const t=()=>{document.documentElement.style.setProperty("--app-height",`${window.innerHeight}px`)};function e(t,e,s,i){var n,r=arguments.length,o=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,s):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,s,i);else for(var h=t.length-1;h>=0;h--)(n=t[h])&&(o=(r<3?n(o):r>3?n(e,s,o):n(e,s))||o);return r>3&&o&&Object.defineProperty(e,s,o),o}function s(t,e,s,i){if("a"===s&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===s?i:"a"===s?i.call(t):i?i.value:e.get(t)}function i(t,e,s,i,n){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?n.call(t,s):n?n.value=s:e.set(t,s),s
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}window.addEventListener("resize",t),t();const n=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,r=Symbol(),o=new WeakMap;class h{constructor(t,e,s){if(this._$cssResult$=!0,s!==r)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(n&&void 0===t){const s=void 0!==e&&1===e.length;s&&(t=o.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),s&&o.set(e,t))}return t}toString(){return this.cssText}}const l=t=>new h("string"==typeof t?t:t+"",void 0,r),c=(t,...e)=>{const s=1===t.length?t[0]:e.reduce(((e,s,i)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(s)+t[i+1]),t[0]);return new h(s,t,r)},a=n?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const s of t.cssRules)e+=s.cssText;return l(e)})(t):t
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;var u;const d=window.trustedTypes,f=d?d.emptyScript:"",w=window.reactiveElementPolyfillSupport,p={toAttribute(t,e){switch(e){case Boolean:t=t?f:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let s=t;switch(e){case Boolean:s=null!==t;break;case Number:s=null===t?null:Number(t);break;case Object:case Array:try{s=JSON.parse(t)}catch(t){s=null}}return s}},g=(t,e)=>e!==t&&(e==e||t==t),v={attribute:!0,type:String,converter:p,reflect:!1,hasChanged:g};class y extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;null!==(e=this.h)&&void 0!==e||(this.h=[]),this.h.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,s)=>{const i=this._$Ep(s,e);void 0!==i&&(this._$Ev.set(i,s),t.push(i))})),t}static createProperty(t,e=v){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const s="symbol"==typeof t?Symbol():"__"+t,i=this.getPropertyDescriptor(t,s,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}}static getPropertyDescriptor(t,e,s){return{get(){return this[e]},set(i){const n=this[t];this[e]=i,this.requestUpdate(t,n,s)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||v}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const s of e)this.createProperty(s,t[s])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const s=new Set(t.flat(1/0).reverse());for(const t of s)e.unshift(a(t))}else void 0!==t&&e.push(a(t));return e}static _$Ep(t,e){const s=e.attribute;return!1===s?void 0:"string"==typeof s?s:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,s;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(s=t.hostConnected)||void 0===s||s.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{n?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const s=document.createElement("style"),i=window.litNonce;void 0!==i&&s.setAttribute("nonce",i),s.textContent=e.cssText,t.appendChild(s)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,s){this._$AK(t,s)}_$EO(t,e,s=v){var i,n;const r=this.constructor._$Ep(t,s);if(void 0!==r&&!0===s.reflect){const o=(null!==(n=null===(i=s.converter)||void 0===i?void 0:i.toAttribute)&&void 0!==n?n:p.toAttribute)(e,s.type);this._$El=t,null==o?this.removeAttribute(r):this.setAttribute(r,o),this._$El=null}}_$AK(t,e){var s,i;const n=this.constructor,r=n._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=n.getPropertyOptions(r),o=t.converter,h=null!==(i=null!==(s=null==o?void 0:o.fromAttribute)&&void 0!==s?s:"function"==typeof o?o:null)&&void 0!==i?i:p.fromAttribute;this._$El=r,this[r]=h(e,t.type),this._$El=null}}requestUpdate(t,e,s){let i=!0;void 0!==t&&(((s=s||this.constructor.getPropertyOptions(t)).hasChanged||g)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===s.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,s))):i=!1),!this.isUpdatePending&&i&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const s=this._$AL;try{e=this.shouldUpdate(s),e?(this.willUpdate(s),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(s)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(s)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var b;y.finalized=!0,y.elementProperties=new Map,y.elementStyles=[],y.shadowRootOptions={mode:"open"},null==w||w({ReactiveElement:y}),(null!==(u=globalThis.reactiveElementVersions)&&void 0!==u?u:globalThis.reactiveElementVersions=[]).push("1.3.3");const m=globalThis.trustedTypes,k=m?m.createPolicy("lit-html",{createHTML:t=>t}):void 0,$=`lit$${(Math.random()+"").slice(9)}$`,x="?"+$,S=`<${x}>`,M=document,A=(t="")=>M.createComment(t),C=t=>null===t||"object"!=typeof t&&"function"!=typeof t,_=Array.isArray,W=t=>{var e;return _(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])},O=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,U=/-->/g,E=/>/g,T=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,R=/'/g,N=/"/g,D=/^(?:script|style|textarea|title)$/i,I=t=>(e,...s)=>({_$litType$:t,strings:e,values:s}),z=I(1),j=I(2),L=Symbol.for("lit-noChange"),P=Symbol.for("lit-nothing"),J=new WeakMap,B=M.createTreeWalker(M,129,null,!1),H=(t,e)=>{const s=t.length-1,i=[];let n,r=2===e?"<svg>":"",o=O;for(let e=0;e<s;e++){const s=t[e];let h,l,c=-1,a=0;for(;a<s.length&&(o.lastIndex=a,l=o.exec(s),null!==l);)a=o.lastIndex,o===O?"!--"===l[1]?o=U:void 0!==l[1]?o=E:void 0!==l[2]?(D.test(l[2])&&(n=RegExp("</"+l[2],"g")),o=T):void 0!==l[3]&&(o=T):o===T?">"===l[0]?(o=null!=n?n:O,c=-1):void 0===l[1]?c=-2:(c=o.lastIndex-l[2].length,h=l[1],o=void 0===l[3]?T:'"'===l[3]?N:R):o===N||o===R?o=T:o===U||o===E?o=O:(o=T,n=void 0);const u=o===T&&t[e+1].startsWith("/>")?" ":"";r+=o===O?s+S:c>=0?(i.push(h),s.slice(0,c)+"$lit$"+s.slice(c)+$+u):s+$+(-2===c?(i.push(void 0),e):u)}const h=r+(t[s]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==k?k.createHTML(h):h,i]};class V{constructor({strings:t,_$litType$:e},s){let i;this.parts=[];let n=0,r=0;const o=t.length-1,h=this.parts,[l,c]=H(t,e);if(this.el=V.createElement(l,s),B.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(i=B.nextNode())&&h.length<o;){if(1===i.nodeType){if(i.hasAttributes()){const t=[];for(const e of i.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith($)){const s=c[r++];if(t.push(e),void 0!==s){const t=i.getAttribute(s.toLowerCase()+"$lit$").split($),e=/([.?@])?(.*)/.exec(s);h.push({type:1,index:n,name:e[2],strings:t,ctor:"."===e[1]?Z:"?"===e[1]?X:"@"===e[1]?Q:F})}else h.push({type:6,index:n})}for(const e of t)i.removeAttribute(e)}if(D.test(i.tagName)){const t=i.textContent.split($),e=t.length-1;if(e>0){i.textContent=m?m.emptyScript:"";for(let s=0;s<e;s++)i.append(t[s],A()),B.nextNode(),h.push({type:2,index:++n});i.append(t[e],A())}}}else if(8===i.nodeType)if(i.data===x)h.push({type:2,index:n});else{let t=-1;for(;-1!==(t=i.data.indexOf($,t+1));)h.push({type:7,index:n}),t+=$.length-1}n++}}static createElement(t,e){const s=M.createElement("template");return s.innerHTML=t,s}}function G(t,e,s=t,i){var n,r,o,h;if(e===L)return e;let l=void 0!==i?null===(n=s._$Cl)||void 0===n?void 0:n[i]:s._$Cu;const c=C(e)?void 0:e._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(r=null==l?void 0:l._$AO)||void 0===r||r.call(l,!1),void 0===c?l=void 0:(l=new c(t),l._$AT(t,s,i)),void 0!==i?(null!==(o=(h=s)._$Cl)&&void 0!==o?o:h._$Cl=[])[i]=l:s._$Cu=l),void 0!==l&&(e=G(t,l._$AS(t,e.values),l,i)),e}class K{constructor(t,e){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var e;const{el:{content:s},parts:i}=this._$AD,n=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:M).importNode(s,!0);B.currentNode=n;let r=B.nextNode(),o=0,h=0,l=i[0];for(;void 0!==l;){if(o===l.index){let e;2===l.type?e=new q(r,r.nextSibling,this,t):1===l.type?e=new l.ctor(r,l.name,l.strings,this,t):6===l.type&&(e=new tt(r,this,t)),this.v.push(e),l=i[++h]}o!==(null==l?void 0:l.index)&&(r=B.nextNode(),o++)}return n}m(t){let e=0;for(const s of this.v)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,e),e+=s.strings.length-2):s._$AI(t[e])),e++}}class q{constructor(t,e,s,i){var n;this.type=2,this._$AH=P,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=s,this.options=i,this._$Cg=null===(n=null==i?void 0:i.isConnected)||void 0===n||n}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=G(this,t,e),C(t)?t===P||null==t||""===t?(this._$AH!==P&&this._$AR(),this._$AH=P):t!==this._$AH&&t!==L&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.k(t):W(t)?this.S(t):this.$(t)}M(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}k(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t))}$(t){this._$AH!==P&&C(this._$AH)?this._$AA.nextSibling.data=t:this.k(M.createTextNode(t)),this._$AH=t}T(t){var e;const{values:s,_$litType$:i}=t,n="number"==typeof i?this._$AC(t):(void 0===i.el&&(i.el=V.createElement(i.h,this.options)),i);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===n)this._$AH.m(s);else{const t=new K(n,this),e=t.p(this.options);t.m(s),this.k(e),this._$AH=t}}_$AC(t){let e=J.get(t.strings);return void 0===e&&J.set(t.strings,e=new V(t)),e}S(t){_(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let s,i=0;for(const n of t)i===e.length?e.push(s=new q(this.M(A()),this.M(A()),this,this.options)):s=e[i],s._$AI(n),i++;i<e.length&&(this._$AR(s&&s._$AB.nextSibling,i),e.length=i)}_$AR(t=this._$AA.nextSibling,e){var s;for(null===(s=this._$AP)||void 0===s||s.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cg=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class F{constructor(t,e,s,i,n){this.type=1,this._$AH=P,this._$AN=void 0,this.element=t,this.name=e,this._$AM=i,this.options=n,s.length>2||""!==s[0]||""!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=P}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,s,i){const n=this.strings;let r=!1;if(void 0===n)t=G(this,t,e,0),r=!C(t)||t!==this._$AH&&t!==L,r&&(this._$AH=t);else{const i=t;let o,h;for(t=n[0],o=0;o<n.length-1;o++)h=G(this,i[s+o],e,o),h===L&&(h=this._$AH[o]),r||(r=!C(h)||h!==this._$AH[o]),h===P?t=P:t!==P&&(t+=(null!=h?h:"")+n[o+1]),this._$AH[o]=h}r&&!i&&this.C(t)}C(t){t===P?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class Z extends F{constructor(){super(...arguments),this.type=3}C(t){this.element[this.name]=t===P?void 0:t}}const Y=m?m.emptyScript:"";class X extends F{constructor(){super(...arguments),this.type=4}C(t){t&&t!==P?this.element.setAttribute(this.name,Y):this.element.removeAttribute(this.name)}}class Q extends F{constructor(t,e,s,i,n){super(t,e,s,i,n),this.type=5}_$AI(t,e=this){var s;if((t=null!==(s=G(this,t,e,0))&&void 0!==s?s:P)===L)return;const i=this._$AH,n=t===P&&i!==P||t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive,r=t!==P&&(i===P||n);n&&this.element.removeEventListener(this.name,this,i),r&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,s;"function"==typeof this._$AH?this._$AH.call(null!==(s=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==s?s:this.element,t):this._$AH.handleEvent(t)}}class tt{constructor(t,e,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){G(this,t)}}const et={L:"$lit$",P:$,V:x,I:1,N:H,R:K,j:W,D:G,H:q,F,O:X,W:Q,B:Z,Z:tt},st=window.litHtmlPolyfillSupport;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var it,nt;null==st||st(V,q),(null!==(b=globalThis.litHtmlVersions)&&void 0!==b?b:globalThis.litHtmlVersions=[]).push("2.2.6");class rt extends y{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const s=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=s.firstChild),s}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,s)=>{var i,n;const r=null!==(i=null==s?void 0:s.renderBefore)&&void 0!==i?i:e;let o=r._$litPart$;if(void 0===o){const t=null!==(n=null==s?void 0:s.renderBefore)&&void 0!==n?n:null;r._$litPart$=o=new q(e.insertBefore(A(),t),t,void 0,null!=s?s:{})}return o._$AI(t),o})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return L}}rt.finalized=!0,rt._$litElement$=!0,null===(it=globalThis.litElementHydrateSupport)||void 0===it||it.call(globalThis,{LitElement:rt});const ot=globalThis.litElementPolyfillSupport;null==ot||ot({LitElement:rt}),(null!==(nt=globalThis.litElementVersions)&&void 0!==nt?nt:globalThis.litElementVersions=[]).push("3.2.1");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const ht=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:s,elements:i}=e;return{kind:s,elements:i,finisher(e){window.customElements.define(t,e)}}})(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */,lt=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(s){s.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(s){s.createProperty(e.key,t)}};function ct(t){return(e,s)=>void 0!==s?((t,e,s)=>{e.constructor.createProperty(s,t)})(t,e,s):lt(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}function at(t){return ct({...t,state:!0})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const ut=({finisher:t,descriptor:e})=>(s,i)=>{var n;if(void 0===i){const i=null!==(n=s.originalKey)&&void 0!==n?n:s.key,r=null!=e?{kind:"method",placement:"prototype",key:i,descriptor:e(s.key)}:{...s,key:i};return null!=t&&(r.finisher=function(e){t(e,i)}),r}{const n=s.constructor;void 0!==e&&Object.defineProperty(s,i,e(i)),null==t||t(n,i)}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;function dt(t){return ut({finisher:(e,s)=>{Object.assign(e.prototype[s],t)}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function ft(t,e){return ut({descriptor:s=>{const i={get(){var e,s;return null!==(s=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(t))&&void 0!==s?s:null},enumerable:!0,configurable:!0};if(e){const e="symbol"==typeof s?Symbol():"__"+s;i.get=function(){var s,i;return void 0===this[e]&&(this[e]=null!==(i=null===(s=this.renderRoot)||void 0===s?void 0:s.querySelector(t))&&void 0!==i?i:null),this[e]}}return i}})}
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var wt;null===(wt=window.HTMLSlotElement)||void 0===wt||wt.prototype.assignedElements;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const pt=1,gt=2,vt=t=>(...e)=>({_$litDirective$:t,values:e});class yt{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,s){this._$Ct=t,this._$AM=e,this._$Ci=s}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const{H:bt}=et,mt=()=>document.createComment(""),kt=(t,e,s)=>{var i;const n=t._$AA.parentNode,r=void 0===e?t._$AB:e._$AA;if(void 0===s){const e=n.insertBefore(mt(),r),i=n.insertBefore(mt(),r);s=new bt(e,i,t,t.options)}else{const e=s._$AB.nextSibling,o=s._$AM,h=o!==t;if(h){let e;null===(i=s._$AQ)||void 0===i||i.call(s,t),s._$AM=t,void 0!==s._$AP&&(e=t._$AU)!==o._$AU&&s._$AP(e)}if(e!==r||h){let t=s._$AA;for(;t!==e;){const e=t.nextSibling;n.insertBefore(t,r),t=e}}}return s},$t=(t,e,s=t)=>(t._$AI(e,s),t),xt={},St=t=>{var e;null===(e=t._$AP)||void 0===e||e.call(t,!1,!0);let s=t._$AA;const i=t._$AB.nextSibling;for(;s!==i;){const t=s.nextSibling;s.remove(),s=t}},Mt=(t,e,s)=>{const i=new Map;for(let n=e;n<=s;n++)i.set(t[n],n);return i},At=vt(class extends yt{constructor(t){if(super(t),t.type!==gt)throw Error("repeat() can only be used in text expressions")}dt(t,e,s){let i;void 0===s?s=e:void 0!==e&&(i=e);const n=[],r=[];let o=0;for(const e of t)n[o]=i?i(e,o):o,r[o]=s(e,o),o++;return{values:r,keys:n}}render(t,e,s){return this.dt(t,e,s).values}update(t,[e,s,i]){var n;const r=(t=>t._$AH)(t),{values:o,keys:h}=this.dt(e,s,i);if(!Array.isArray(r))return this.ut=h,o;const l=null!==(n=this.ut)&&void 0!==n?n:this.ut=[],c=[];let a,u,d=0,f=r.length-1,w=0,p=o.length-1;for(;d<=f&&w<=p;)if(null===r[d])d++;else if(null===r[f])f--;else if(l[d]===h[w])c[w]=$t(r[d],o[w]),d++,w++;else if(l[f]===h[p])c[p]=$t(r[f],o[p]),f--,p--;else if(l[d]===h[p])c[p]=$t(r[d],o[p]),kt(t,c[p+1],r[d]),d++,p--;else if(l[f]===h[w])c[w]=$t(r[f],o[w]),kt(t,r[d],r[f]),f--,w++;else if(void 0===a&&(a=Mt(h,w,p),u=Mt(l,d,f)),a.has(l[d]))if(a.has(l[f])){const e=u.get(h[w]),s=void 0!==e?r[e]:null;if(null===s){const e=kt(t,r[d]);$t(e,o[w]),c[w]=e}else c[w]=$t(s,o[w]),kt(t,r[d],s),r[e]=null;w++}else St(r[f]),f--;else St(r[d]),d++;for(;w<=p;){const e=kt(t,c[p+1]);$t(e,o[w]),c[w++]=e}for(;d<=f;){const t=r[d++];null!==t&&St(t)}return this.ut=h,((t,e=xt)=>{t._$AH=e})(t,c),L}}),Ct=(t,e)=>[t[0]+e[0],t[1]+e[1]],_t=(t,e)=>Ct(t,[e,e]),Wt=(t,e)=>[t[0]-e[0],t[1]-e[1]],Ot=(t,e)=>[t[0]*e,t[1]*e],Ut=(t,e)=>[t[0]/e,t[1]/e],Et=(t,e)=>[Math.max(t[0],e[0]),Math.max(t[1],e[1])],Tt=(t,e)=>[Math.min(t[0],e[0]),Math.min(t[1],e[1])],Rt=(t,e,s)=>Et(t,Tt(e,s)),Nt=(t,e)=>t[0]===e[0]&&t[1]===e[1],Dt=t=>t.isPrimary&&("touch"===t.pointerType||t.pressure>0),It=t=>"mouse"===t.pointerType&&1===t.buttons&&t.pressure>0,zt=t=>{t.preventDefault(),t.stopPropagation()},jt=(t,e)=>new CustomEvent(t,{detail:e,cancelable:!0,bubbles:!0,composed:!0});
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const Lt=async t=>{if(!t.dataTransfer)throw"No compatible drop type found";let e=t.dataTransfer?.items??[];return new Promise((async(t,s)=>{console.log("DataItems",e.length);for(let s=0;s<e.length;s++){if(console.log(e[s].type),e[s].type.startsWith("image/"))return t(e[s].getAsFile());if("text/html"===e[s].type)return void e[s].getAsString((e=>t(Pt(e))));if("application/x-moz-file-promise-url"===e[s].type)return void e[s].getAsString((t=>{}));if("string"===e[s].kind){let t=e[s].type;e[s].getAsString((e=>console.log(t,e)))}}return s("No compatible drop type found")}))};function Pt(t){const e=(new DOMParser).parseFromString(t,"text/html").querySelector("img")?.src;return e??null}const Jt=t=>new CustomEvent("game-event",{detail:t}),Bt=t=>t[Symbol.iterator]().next().value;function*Ht(t,e){for(let s of t)yield e(s)}
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Vt=vt(class extends yt{constructor(t){var e;if(super(t),t.type!==pt||"style"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce(((e,s)=>{const i=t[s];return null==i?e:e+`${s=s.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${i};`}),"")}update(t,[e]){const{style:s}=t.element;if(void 0===this.ct){this.ct=new Set;for(const t in e)this.ct.add(t);return this.render(e)}this.ct.forEach((t=>{null==e[t]&&(this.ct.delete(t),t.includes("-")?s.removeProperty(t):s[t]="")}));for(const t in e){const i=e[t];null!=i&&(this.ct.add(t),t.includes("-")?s.setProperty(t,i):s[t]=i)}return L}});var Gt,Kt,qt,Ft,Zt,Yt,Xt,Qt,te,ee,se,ie,ne,re,oe,he,le,ce,ae,ue,de,fe;let we=class extends rt{constructor(){super(),Gt.add(this),this.width=30,this.height=40,this.selection=new Set,this.callouts=new Set,Kt.set(this,void 0),qt.set(this,void 0),Zt.set(this,0),Yt.set(this,(t=>{var e;zt(t),i(this,Zt,(e=s(this,Zt,"f"),++e),"f")})),Xt.set(this,(t=>{zt(t);const e=s(this,de,"f").call(this,t).map(ge),i=Ot(_t([this.width,this.height],-1),24);this._drop_hint=Rt([0,0],i,e),this.hovering="canvas"})),Qt.set(this,(t=>{var e;i(this,Zt,(e=s(this,Zt,"f"),--e),"f")<=0&&(this._drop_hint=void 0,this.hovering=void 0)})),te.set(this,(t=>{zt(t),this._drop_hint=void 0,this.hovering="bg"})),ee.set(this,(async t=>{zt(t);try{const e=await Lt(t);this.dispatchEvent(jt("bg-drop",e))}catch(t){}i(this,Zt,0,"f"),this.hovering=void 0})),se.set(this,(async t=>{zt(t);try{const e=await Lt(t);console.log("Emitting drop"),this.dispatchEvent(jt("token-drop",{loc:this._drop_hint,dim:[24,24],img:e}))}catch(t){}this._drop_hint=void 0,this.hovering=void 0})),ie.set(this,(t=>{It(t)&&s(this,re,"f").call(this,t)})),ne.set(this,(t=>{(t=>t.isPrimary&&"touch"===t.pointerType)(t)&&s(this,re,"f").call(this,t)})),re.set(this,(t=>{t.preventDefault(),t.stopPropagation();const e=t.target.id;t.shiftKey||t.ctrlKey?this.dispatchEvent(jt("token-select",[e,...this.selection].filter((t=>t!==e||!this.selection.has(e))))):this.dispatchEvent(jt("token-select",[t.target.id]))})),ae.set(this,void 0),ue.set(this,{move:[0,0],resize:[0,0],r:0}),de.set(this,(t=>Wt(this.viewport.coordToLocal([t.clientX,t.clientY]),[20,20]))),fe.set(this,(t=>{if(!this.selection)return;if(8===t.keyCode)return this.dispatchEvent(Jt({type:"token-removed",ids:Array.from(this.selection)})),void zt(t);"z"===t.key&&s(this,qt,"f")&&this.dispatchEvent(Jt({type:"callout",loc:s(this,de,"f").call(this,s(this,qt,"f"))})),this.board.get("tokens").get(this.selection.values().next().value);let e={ArrowUp:[0,-24],ArrowDown:[0,24],ArrowLeft:[-24,0],ArrowRight:[24,0]}[t.key];e&&(this.dispatchEvent(Jt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{const i=this.board.get("tokens").get(t),n=Rt([0,0],Wt(s(this,Gt,"a",Ft),i.get("dim")),Ct(i.get("loc"),e));return{id:i.get("id"),loc:n,dim:i.get("dim"),r:i.get("r")}}))})),zt(t))}))}connectedCallback(){super.connectedCallback(),document.addEventListener("keydown",s(this,fe,"f"))}disconnectedCallback(){super.disconnectedCallback(),document.removeEventListener("keydown",s(this,fe,"f"))}render(){if(console.log("canvas render"),!this.board)return z``;let[t,e]=s(this,Gt,"a",Ft),n=s(this,Gt,"m",ce).call(this),r=1===this.selection.size?this.board.get("tokens").get(this.selection.values().next().value):void 0;return z`
      <p-p-z
        @pointerdown=${s(this,Gt,"m",oe)}
        @pointermove=${s(this,Gt,"m",he)}
        @pointerup=${s(this,Gt,"m",le)}
        @pointerleave=${()=>i(this,qt,void 0,"f")}
        @dragstart=${zt}
        @dragenter=${s(this,Yt,"f")}
        @dragleave=${s(this,Qt,"f")}
        @dragstop=${s(this,Qt,"f")}
        @dragover=${s(this,Xt,"f")}
        @drop=${s(this,se,"f")}
      >
        <svg
          id="root"
          width=${t+40}
          height=${e+40}
          style=${Vt({width:`${t+40}px`,height:`${e+40}px`})}
        >
          <defs>
            <clipPath id="canvasClip">
              <rect width=${t} height=${e} rx=${5}></rect>
            </clipPath>
            <pattern id="horiz" x=${-.25} y=${-.25} width="100%" height=${24} patternUnits="userSpaceOnUse">
              <rect class="gridline" width="100%" height=${.5} fill="#d3d3d3" shape-rendering="geometricPrecision"></rect>
            </pattern>
            <pattern id="vert" x=${-.25} y=${-.25} width=${24} height="100%" patternUnits="userSpaceOnUse">
              <rect class="gridline" width=${.5} height="100%" fill="#d3d3d3" shape-rendering="geometric precision"></rect>
            </pattern>
            <pattern id="loading" patternUnits="userSpaceOnUse" width="1" height="1">
              <rect width="1" height="1" fill="white"></rect>
              <image href="assets/loading.svg" width="1" height="1" />
            </pattern>
          </defs>
          <svg x=${20} y=${20} width=${t} height=${e} id="surface">
            <rect class="shadow" width="100%" height="100%" fill="white" rx=${5}></rect>
            <svg clip-path="url(#canvasClip)">
              ${this.bg?j`<image href=${this.bg} width="100%" height="100%" preserveAspectRatio="none" style="will-change: transform"></image>`:null}
              <rect width="100%" height="100%" fill="url(#horiz)" opacity="0.75" pointer-events="none"></rect>
              <rect width="100%" height="100%" fill="url(#vert)" opacity="0.75" pointer-events="none"></rect>
              <svg id="tokens">
                ${At(this.board.get("order")??[],(t=>t),((t,e)=>{const i=this.board.get("tokens").get(t),[r,o]=_t(i.get("dim"),-.5),[h,l]=_t(i.get("loc"),.25);return z`
                      <svg
                        viewBox="0 0 1 1"
                        x=${h}
                        y=${l}
                        width=${r}
                        height=${o}
                        fill="transparent"
                        preserveAspectRatio="none"
                        @pointerdown=${s(this,ie,"f")}
                        @pointerup=${s(this,ne,"f")}
                      >
                        <image
                          id=${t}
                          class="token"
                          width="1"
                          height="1"
                          href=${i.get("url")}
                          style=${`transform: rotate(${i.get("r")}deg)`}
                          preserveAspectRatio="none"
                          @load=${ve}
                        ></image>
                        <rect width="1" height="1" class="loading"></rect>
                      </svg>

                      ${n?.index===e?j`<rect
                            class="selection-drag-target"
                            x=${n.bbox.start[0]}
                            y=${n.bbox.start[1]}
                            width=${n.bbox.end[0]-n.bbox.start[0]}
                            height=${n.bbox.end[1]-n.bbox.start[1]}
                            fill="transparent"
                            @touchmove=${this.prevent_safari_scroll}
                            @pointerdown=${this.selection_drag_start}
                            @pointermove=${this.selection_drag}
                            @pointerup=${this.selection_drag_end}
                        ></rect>`:null}
                    `}))}
              </svg>
              ${this._drop_hint?j`
            <rect
                class="drop_hint"
                x=${this._drop_hint[0]}
                y=${this._drop_hint[1]}
                width=${24}
                height=${24}
                ></rect>
          `:null}
            </svg>
            ${s(this,Kt,"f")?j`
              <rect id="sbox"
                x=${Math.min(s(this,Kt,"f").pin[0],s(this,Kt,"f").mouse[0])}
                y=${Math.min(s(this,Kt,"f").pin[1],s(this,Kt,"f").mouse[1])}
                width=${Math.abs(s(this,Kt,"f").pin[0]-s(this,Kt,"f").mouse[0])}
                height=${Math.abs(s(this,Kt,"f").pin[1]-s(this,Kt,"f").mouse[1])}
                ></rect>
              `:null}
            ${At(this.callouts,(t=>t),(t=>{const[e,s]=Wt(t,[12,12]);return j`
                  <image href="assets/callout.svg" x=${e} y=${s} width=${24} height=${24}></image>
                `}))}
            ${n?j`
            <svg
              id="selection"
              x=${n.bbox.start[0]}
              y=${n.bbox.start[1]}
              width=${n.bbox.end[0]-n.bbox.start[0]}
              height=${n.bbox.end[1]-n.bbox.start[1]}
              @touchmove=${this.prevent_safari_scroll}
              @pointerdown=${this.selection_drag_start}
              @pointermove=${this.selection_drag}
              @pointerup=${this.selection_drag_end}>
              <rect class="selection-box" width="100%" height="100%"  ></rect>
            ${r?j`
            <g style=${`transform-origin: center; transform: rotate(${r.get("r")}deg) translateY(${Math.sign((r.get("r")-180)%180)*(r.get("dim")[0]-r.get("dim")[1])/2}px)`}>
              <line class="ro" x1="50%" x2="50%" y2=${-10}></line>
              <circle class="ro handle" cx="50%" cy=${-10} r=${2}></circle>
            </g>
            <line class="rn" x2="100%"></line>
            <line class="rw" y2="100%"></line>
            <line class="re" x1="100%" x2="100%" y2="100%"></line>
            <line class="rs" y1="100%" x2="100%" y2="100%"></line>
            <rect class="handle rn rw"></rect>
            <rect class="handle rn re" x="100%"></rect>
            <rect class="handle rs rw" y="100%"></rect>
            <rect class="handle rs re" x="100%" y="100%"></rect>
            </g>
            </svg>`:null}`:null}
          </svg>
        </svg>
      </p-p-z>
      <div
        id="bg-drop"
        class=${this.hovering??""}
        @dragenter=${s(this,Yt,"f")}
        @dragover=${s(this,te,"f")}
        @dragleave=${s(this,Qt,"f")}
        @drop=${s(this,ee,"f")}
      >
        <div id="bg-drop-label" @drop=${s(this,ee,"f")}>Set Background</div>
      </div>
    `}createRenderRoot(){return super.createRenderRoot()}prevent_safari_scroll(t){zt(t)}selection_drag_start(t){if(!Dt(t))return;const e=s(this,de,"f").call(this,t);zt(t),t.target.setPointerCapture(t.pointerId),i(this,ae,e,"f")}selection_drag(t){if(!Dt(t))return;s(this,ae,"f")||this.selection_drag_start(t),zt(t);const e=Rt([0,0],s(this,Gt,"a",Ft),s(this,de,"f").call(this,t)),n=this.board.get("tokens").get(this.selection.values().next().value),r=n.get("dim"),o=n.get("loc"),h=t.target.classList;let l=[0,0],c=[0,0],a=0;if(h.contains("rn")&&(c[1]=o[1]-pe(e[1]),l[1]=pe(e[1])-o[1]),h.contains("rw")&&(c[0]=o[0]-pe(e[0]),l[0]=pe(e[0])-o[0]),h.contains("rs")&&(c[1]=pe(e[1])-r[1]-o[1]),h.contains("re")&&(c[0]=pe(e[0])-r[0]-o[0]),h.contains("ro")){const t=Ct(o,Ut(r,2)),s=Wt(e,t),i=180*Math.atan2(s[0],-s[1])/Math.PI;a=90*Math.round(i/90)-n.get("r")%360}h.contains("selection-drag-target")?l=Wt(e,s(this,ae,"f")).map(pe):(l=Tt(_t(r,-24),l),c=Et(_t(Ot(r,-1),24),c)),a===s(this,ue,"f").r&&Nt(l,s(this,ue,"f").move)&&Nt(c,s(this,ue,"f").resize)||(i(this,ae,Ct(s(this,ae,"f"),l),"f"),i(this,ue,{move:[0,0],resize:[0,0],r:0},"f"),this.dispatchEvent(Jt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{let e=this.board.get("tokens").get(t);return{id:e.get("id"),loc:Ct(e.get("loc"),l),dim:Ct(e.get("dim"),c),r:e.get("r")+a}}))})))}selection_drag_end(t){zt(t),i(this,ae,void 0,"f")}};Kt=new WeakMap,qt=new WeakMap,Zt=new WeakMap,Yt=new WeakMap,Xt=new WeakMap,Qt=new WeakMap,te=new WeakMap,ee=new WeakMap,se=new WeakMap,ie=new WeakMap,ne=new WeakMap,re=new WeakMap,ae=new WeakMap,ue=new WeakMap,de=new WeakMap,fe=new WeakMap,Gt=new WeakSet,Ft=function(){return Ot([this.width,this.height],24)},oe=function(t){if(!It(t))return;t.target.setPointerCapture(t.pointerId);const e=s(this,de,"f").call(this,t);i(this,Kt,{pin:e,mouse:e},"f")},he=function(t){i(this,qt,{clientX:t.clientX,clientY:t.clientY},"f"),s(this,Kt,"f")&&(s(this,Kt,"f").mouse=s(this,de,"f").call(this,t),this.requestUpdate())},le=function(t){if(!s(this,Kt,"f"))return this.dispatchEvent(jt("token-select",[]));t.target.setPointerCapture(t.pointerId);const e=Tt(s(this,Kt,"f").pin,s(this,Kt,"f").mouse),n=(t=>[Math.abs(t[0]),Math.abs(t[1])])(Wt(s(this,Kt,"f").pin,s(this,Kt,"f").mouse)),r={start:e,end:Ct(e,n)},o=Ht(function*(t,e){for(let s of t)e(s)&&(yield s)}(this.board.get("tokens").values(),(t=>((t,e)=>!(e.start[0]>t.end[0]||e.end[0]<t.start[0]||e.start[1]>t.end[1]||e.end[1]<t.start[1]))(r,{start:t.get("loc"),end:Ct(t.get("loc"),t.get("dim"))}))),(t=>t.get("id")));i(this,Kt,void 0,"f"),this.dispatchEvent(jt("token-select",[...o])),this.requestUpdate()},ce=function(){if(0===this.selection.size)return;const t=Array.from(this.selection,(t=>this.board.get("tokens").get(t))).filter((t=>t)),e=Math.max(...Ht(this.selection.values(),(t=>this.board.get("order").toJSON().indexOf(t))));let s=t[0].get("loc"),i=Ct(t[0].get("loc"),t[0].get("dim"));return t.forEach((t=>{s=Tt(s,t.get("loc")),i=Et(i,Ct(t.get("loc"),t.get("dim")))})),{index:e,bbox:{start:s,end:i}}},we.styles=c`
    :host {
      position: relative;
      display: block;
      --selection-color: cornflowerblue;
      overflow: hidden;
    }

    p-p-z {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
    #root {
      backface-visibility: hidden;
    }

    #sbox {
      stroke: var(--selection-color);
      stroke-width: 1px;
      fill: var(--selection-color);
      fill-opacity: 0.2;
    }

    #bg-drop {
      position: absolute;
      right: 5px;
      bottom: -60px;
      display: inline-block;
      height: 50px;
      transition: bottom 250ms;
      background: var(--ui-bg);
      border-radius: 5px 5px 0 0;
      display: grid;
      padding: 5px;
      grid: 1fr 1fr;
      text-align: center;
      display: none;
    }

    #bg-drop.canvas,
    #bg-drop.bg {
      bottom: 0;
      box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.3);
      display: block;
    }

    #bg-drop-label {
      --color: gray;
      padding: 0 1em;
      border: 2px solid var(--color);
      color: var(--color);
      border-radius: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }

    .bg > #bg-drop-label {
      --color: blue;
    }

    svg {
      overflow: visible;
    }

    #surface {
      clip-path: rect(100%);
    }

    .shadow {
      stroke-width: ${.5};
      stroke: rgba(0, 0, 0, 0.2);
      filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));
    }

    .drop_hint {
      transition: none;
      pointer-events: none;
      fill: gray;
    }

    .selection-box,
    line.ro {
      stroke: var(--selection-color);
      stroke-width: 1px;
      filter: drop-shadow(0px 0px 2px var(--selection-color));
      fill: transparent;
    }

    .selection-box {
      pointer-events: none !important;
    }

    .rn,
    .rs,
    .re,
    .rw {
      stroke-width: ${8};
      vector-effect: non-scaling-stroke;
      stroke: transparent;
    }

    .handle {
      stroke-width: 1px;
      fill: var(--selection-color);
      stroke: white;
    }

    .selection-drag-target {
      pointer-events: fill;
      cursor: move;
    }

    rect.handle {
      width: ${8}px;
      height: ${8}px;
      transform: translate(${-4}px, ${-4}px);
    }

    .ro.handle {
      cursor: crosshair;
    }

    .rn.re,
    .rs.rw {
      cursor: nesw-resize;
    }

    .rn.rw,
    .rs.re {
      cursor: nwse-resize;
    }

    .rn,
    .rs {
      cursor: row-resize;
    }

    .re,
    .rw {
      cursor: col-resize;
    }

    p-p-z {
      background-color: #ededf0;
    }

    .token {
      transform-box: fill-box;
      transform-origin: center;
      fill: transparent;
    }

    .token + .loading {
      fill: url(#loading);
      pointer-events: none;
    }

    .token.loaded + .loading {
      fill: transparent;
    }

    #selection {
      pointer-events: none;
    }

    #selection * {
      pointer-events: auto;
    }
  `,e([ct({type:Number})],we.prototype,"width",void 0),e([ct({type:Number})],we.prototype,"height",void 0),e([ct()],we.prototype,"bg",void 0),e([ct({attribute:!1})],we.prototype,"board",void 0),e([ct({attribute:!1})],we.prototype,"selection",void 0),e([ct({attribute:!1})],we.prototype,"callouts",void 0),e([ct({attribute:!1})],we.prototype,"sel_bbox",void 0),e([ft("root",!0)],we.prototype,"root",void 0),e([ft("p-p-z",!0)],we.prototype,"viewport",void 0),e([at()],we.prototype,"_drop_hint",void 0),e([at()],we.prototype,"hovering",void 0),e([dt({capture:!0,passive:!1})],we.prototype,"prevent_safari_scroll",null),e([dt({capture:!0,passive:!1})],we.prototype,"selection_drag_start",null),e([dt({capture:!0,passive:!1})],we.prototype,"selection_drag",null),e([dt({capture:!0,passive:!1})],we.prototype,"selection_drag_end",null),we=e([ht("bg-canvas")],we);const pe=t=>24*Math.round(t/24),ge=t=>t-t%24,ve=t=>t.target.classList.add("loaded");var ye,be;let me=class extends rt{constructor(){super(...arguments),this._state=!1,this._loaded=!1,this._buy=t=>{console.log("CLICK"),zt(t),this._state=!0,document.addEventListener("click",s(this,ye,"f"),{capture:!0})},ye.set(this,(t=>{zt(t),this._state=!1,document.removeEventListener("click",s(this,ye,"f"),{capture:!0})})),be.set(this,(t=>{this._loaded=!0}))}render(){return z`<button @click="${this._buy}">Buy Me A Coffee</button> ${this._state?z`<div id="container"><iframe class="${this._loaded?"loaded":""}" allow="payment" src="https://ko-fi.com/djrenren/?hidefeed=true&widget=true&embed=true&preview=true" title="djrenren" @load="${s(this,be,"f")}"></iframe></div>`:null}`}};ye=new WeakMap,be=new WeakMap,me.styles=c`:host{display:block;position:relative}iframe{border:none;display:block;opacity:0;width:100%;height:100%;transition:opacity .5s linear}#container{border-radius:5px;box-shadow:0 0 6px rgba(0,0,0,.7);position:absolute;width:350px;height:525px;bottom:-535px;right:0;animation-name:fade;animation-duration:.5s;animation-direction:backwards;background:url(assets/loading.svg) center/100px no-repeat,#ededf0;overflow:hidden}iframe.loaded{opacity:1}@keyframes fade{0%{opacity:0}100%{opacity:1}}`,e([at()],me.prototype,"_state",void 0),e([at()],me.prototype,"_loaded",void 0),me=e([ht("buy-me-a-coffee")],me);const ke=()=>new Map,$e=t=>{const e=ke();return t.forEach(((t,s)=>{e.set(s,t)})),e},xe=(t,e,s)=>{let i=t.get(e);return void 0===i&&t.set(e,i=s()),i},Se=()=>new Set,Me=t=>t[t.length-1],Ae=(t,e)=>{for(let s=0;s<e.length;s++)t.push(e[s])},Ce=Array.from;class _e{constructor(){this._observers=ke()}on(t,e){xe(this._observers,t,Se).add(e)}once(t,e){const s=(...i)=>{this.off(t,s),e(...i)};this.on(t,s)}off(t,e){const s=this._observers.get(t);void 0!==s&&(s.delete(e),0===s.size&&this._observers.delete(t))}emit(t,e){return Ce((this._observers.get(t)||ke()).values()).forEach((t=>t(...e)))}destroy(){this._observers=ke()}}const We=Math.floor,Oe=Math.abs,Ue=Math.log10,Ee=(t,e)=>t<e?t:e,Te=(t,e)=>t>e?t:e,Re=t=>0!==t?t<0:1/t<0,Ne=/^\s*/g,De=/([A-Z])/g,Ie=(t,e)=>(t=>t.replace(Ne,""))(t.replace(De,(t=>`${e}${(t=>t.toLowerCase())(t)}`)));"undefined"!=typeof TextEncoder&&new TextEncoder;let ze="undefined"==typeof TextDecoder?null:new TextDecoder("utf-8",{fatal:!0,ignoreBOM:!0});ze&&1===ze.decode(new Uint8Array).length&&(ze=null);const je=t=>void 0===t?null:t;let Le=new class{constructor(){this.map=new Map}setItem(t,e){this.map.set(t,e)}getItem(t){return this.map.get(t)}},Pe=!0;try{"undefined"!=typeof localStorage&&(Le=localStorage,Pe=!1)}catch(mt){}const Je=Le,Be="undefined"!=typeof process&&process.release&&/node|io\.js/.test(process.release.name);let He;"undefined"!=typeof navigator&&/Mac/.test(navigator.platform);const Ve=t=>(()=>{if(void 0===He)if(Be){He=ke();const t=process.argv;let e=null;for(let s=0;s<t.length;s++){const i=t[s];"-"===i[0]?(null!==e&&He.set(e,""),e=i):null!==e&&(He.set(e,i),e=null)}null!==e&&He.set(e,"")}else"object"==typeof location?(He=ke(),(location.search||"?").slice(1).split("&").forEach((t=>{if(0!==t.length){const[e,s]=t.split("=");He.set(`--${Ie(e,"-")}`,s),He.set(`-${Ie(e,"-")}`,s)}}))):He=ke();return He})().has(t);var Ge;Ve("--"+(Ge="production"))||(t=>{je(Be?process.env[t.toUpperCase()]:Je.getItem(t))})(Ge);class Ke{constructor(t){this.arr=t,this.pos=0}}const qe=t=>new Ke(t),Fe=t=>((t,e)=>{const s=hs(t.arr.buffer,t.pos+t.arr.byteOffset,e);return t.pos+=e,s})(t,Ye(t)),Ze=t=>t.arr[t.pos++],Ye=t=>{let e=0,s=0;for(;;){const i=t.arr[t.pos++];if(e|=(127&i)<<s,s+=7,i<128)return e>>>0;if(s>53)throw new Error("Integer out of range!")}},Xe=t=>{let e=t.arr[t.pos++],s=63&e,i=6;const n=(64&e)>0?-1:1;if(0==(128&e))return n*s;for(;;){if(e=t.arr[t.pos++],s|=(127&e)<<i,i+=7,e<128)return n*(s>>>0);if(i>53)throw new Error("Integer out of range!")}},Qe=t=>{let e=Ye(t);if(0===e)return"";{let s=String.fromCodePoint(Ze(t));if(--e<100)for(;e--;)s+=String.fromCodePoint(Ze(t));else for(;e>0;){const i=e<1e4?e:1e4,n=t.arr.subarray(t.pos,t.pos+i);t.pos+=i,s+=String.fromCodePoint.apply(null,n),e-=i}return decodeURIComponent(escape(s))}},ts=(t,e)=>{const s=new DataView(t.arr.buffer,t.arr.byteOffset+t.pos,e);return t.pos+=e,s},es=[t=>{},t=>null,Xe,t=>ts(t,4).getFloat32(0,!1),t=>ts(t,8).getFloat64(0,!1),t=>ts(t,8).getBigInt64(0,!1),t=>!1,t=>!0,Qe,t=>{const e=Ye(t),s={};for(let i=0;i<e;i++){s[Qe(t)]=ss(t)}return s},t=>{const e=Ye(t),s=[];for(let i=0;i<e;i++)s.push(ss(t));return s},Fe],ss=t=>es[127-Ze(t)](t);class is extends Ke{constructor(t,e){super(t),this.reader=e,this.s=null,this.count=0}read(){var t;return 0===this.count&&(this.s=this.reader(this),(t=this).pos!==t.arr.length?this.count=Ye(this)+1:this.count=-1),this.count--,this.s}}class ns extends Ke{constructor(t){super(t),this.s=0,this.count=0}read(){if(0===this.count){this.s=Xe(this);const t=Re(this.s);this.count=1,t&&(this.s=-this.s,this.count=Ye(this)+2)}return this.count--,this.s}}class rs extends Ke{constructor(t){super(t),this.s=0,this.count=0,this.diff=0}read(){if(0===this.count){const t=Xe(this),e=1&t;this.diff=t>>1,this.count=1,e&&(this.count=Ye(this)+2)}return this.s+=this.diff,this.count--,this.s}}class os{constructor(t){this.decoder=new ns(t),this.str=Qe(this.decoder),this.spos=0}read(){const t=this.spos+this.decoder.read(),e=this.str.slice(this.spos,t);return this.spos=t,e}}const hs=(t,e,s)=>new Uint8Array(t,e,s),ls=t=>{const e=(s=t.byteLength,new Uint8Array(s));var s;return e.set(t),e},cs=Number.isInteger||(t=>"number"==typeof t&&isFinite(t)&&We(t)===t);class as{constructor(){this.cpos=0,this.cbuf=new Uint8Array(100),this.bufs=[]}}const us=()=>new as,ds=t=>{const e=new Uint8Array((t=>{let e=t.cpos;for(let s=0;s<t.bufs.length;s++)e+=t.bufs[s].length;return e})(t));let s=0;for(let i=0;i<t.bufs.length;i++){const n=t.bufs[i];e.set(n,s),s+=n.length}return e.set(hs(t.cbuf.buffer,0,t.cpos),s),e},fs=(t,e)=>{const s=t.cbuf.length;t.cpos===s&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(2*s),t.cpos=0),t.cbuf[t.cpos++]=e},ws=fs,ps=(t,e)=>{for(;e>127;)fs(t,128|127&e),e>>>=7;fs(t,127&e)},gs=(t,e)=>{const s=Re(e);for(s&&(e=-e),fs(t,(e>63?128:0)|(s?64:0)|63&e),e>>>=6;e>0;)fs(t,(e>127?128:0)|127&e),e>>>=7},vs=(t,e)=>{const s=unescape(encodeURIComponent(e)),i=s.length;ps(t,i);for(let e=0;e<i;e++)fs(t,s.codePointAt(e))},ys=(t,e)=>{const s=t.cbuf.length,i=t.cpos,n=Ee(s-i,e.length),r=e.length-n;t.cbuf.set(e.subarray(0,n),i),t.cpos+=n,r>0&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(Te(2*s,r)),t.cbuf.set(e.subarray(n)),t.cpos=r)},bs=(t,e)=>{ps(t,e.byteLength),ys(t,e)},ms=(t,e)=>{((t,e)=>{const s=t.cbuf.length;s-t.cpos<e&&(t.bufs.push(hs(t.cbuf.buffer,0,t.cpos)),t.cbuf=new Uint8Array(2*Te(s,e)),t.cpos=0)})(t,e);const s=new DataView(t.cbuf.buffer,t.cpos,e);return t.cpos+=e,s},ks=new DataView(new ArrayBuffer(4)),$s=(t,e)=>{switch(typeof e){case"string":fs(t,119),vs(t,e);break;case"number":cs(e)&&Oe(e)<=2147483647?(fs(t,125),gs(t,e)):(s=e,ks.setFloat32(0,s),ks.getFloat32(0)===s?(fs(t,124),((t,e)=>{ms(t,4).setFloat32(0,e,!1)})(t,e)):(fs(t,123),((t,e)=>{ms(t,8).setFloat64(0,e,!1)})(t,e)));break;case"bigint":fs(t,122),((t,e)=>{ms(t,8).setBigInt64(0,e,!1)})(t,e);break;case"object":if(null===e)fs(t,126);else if(e instanceof Array){fs(t,117),ps(t,e.length);for(let s=0;s<e.length;s++)$s(t,e[s])}else if(e instanceof Uint8Array)fs(t,116),bs(t,e);else{fs(t,118);const s=Object.keys(e);ps(t,s.length);for(let i=0;i<s.length;i++){const n=s[i];vs(t,n),$s(t,e[n])}}break;case"boolean":fs(t,e?120:121);break;default:fs(t,127)}var s};class xs extends as{constructor(t){super(),this.w=t,this.s=null,this.count=0}write(t){this.s===t?this.count++:(this.count>0&&ps(this,this.count-1),this.count=1,this.w(this,t),this.s=t)}}const Ss=t=>{t.count>0&&(gs(t.encoder,1===t.count?t.s:-t.s),t.count>1&&ps(t.encoder,t.count-2))};class Ms{constructor(){this.encoder=new as,this.s=0,this.count=0}write(t){this.s===t?this.count++:(Ss(this),this.count=1,this.s=t)}toUint8Array(){return Ss(this),ds(this.encoder)}}const As=t=>{if(t.count>0){const e=t.diff<<1|(1===t.count?0:1);gs(t.encoder,e),t.count>1&&ps(t.encoder,t.count-2)}};class Cs{constructor(){this.encoder=new as,this.s=0,this.count=0,this.diff=0}write(t){this.diff===t-this.s?(this.s=t,this.count++):(As(this),this.count=1,this.diff=t-this.s,this.s=t)}toUint8Array(){return As(this),ds(this.encoder)}}class _s{constructor(){this.sarr=[],this.s="",this.lensE=new Ms}write(t){this.s+=t,this.s.length>19&&(this.sarr.push(this.s),this.s=""),this.lensE.write(t.length)}toUint8Array(){const t=new as;return this.sarr.push(this.s),this.s="",vs(t,this.sarr.join("")),ys(t,this.lensE.toUint8Array()),ds(t)}}const Ws="undefined"==typeof crypto?null:crypto,Os=null!==Ws?t=>{const e=new ArrayBuffer(t),s=new Uint8Array(e);return Ws.getRandomValues(s),e}:t=>{const e=new ArrayBuffer(t),s=new Uint8Array(e);for(let e=0;e<t;e++)s[e]=Math.ceil(4294967295*Math.random()>>>0);return e},Us=()=>new Uint32Array(Os(4))[0],Es=[1e7]+-1e3+-4e3+-8e3+-1e11,Ts=()=>Es.replace(/[018]/g,(t=>(t^Us()&15>>t/4).toString(16))),Rs=Date.now,Ns=t=>new Error(t),Ds=()=>{throw Ns("Method unimplemented")},Is=()=>{throw Ns("Unexpected case")},zs=Object.keys,js=t=>zs(t).length,Ls=(t,e)=>t===e||js(t)===js(e)&&((t,e)=>{for(const s in t)if(!e(t[s],s))return!1;return!0})(t,((t,s)=>(void 0!==t||((t,e)=>Object.prototype.hasOwnProperty.call(t,e))(e,s))&&e[s]===t)),Ps=(t,e,s=0)=>{try{for(;s<t.length;s++)t[s](...e)}finally{s<t.length&&Ps(t,e,s+1)}},Js=Symbol;class Bs{constructor(t,e){this.left=t,this.right=e}}const Hs=(t,e)=>new Bs(t,e),Vs="undefined"!=typeof document?document:{};"undefined"!=typeof DOMParser&&new DOMParser;const Gs=t=>((t,e)=>{const s=[];for(const[i,n]of t)s.push(e(n,i));return s})(t,((t,e)=>`${e}:${t};`)).join("");Vs.ELEMENT_NODE,Vs.TEXT_NODE,Vs.CDATA_SECTION_NODE,Vs.COMMENT_NODE,Vs.DOCUMENT_NODE,Vs.DOCUMENT_TYPE_NODE,Vs.DOCUMENT_FRAGMENT_NODE;const Ks=Js(),qs=Js(),Fs=Js(),Zs=Js(),Ys=Js(),Xs=Js(),Qs=Js(),ti=Js(),ei=Js(),si={[Ks]:Hs("font-weight","bold"),[qs]:Hs("font-weight","normal"),[Fs]:Hs("color","blue"),[Ys]:Hs("color","green"),[Zs]:Hs("color","grey"),[Xs]:Hs("color","red"),[Qs]:Hs("color","purple"),[ti]:Hs("color","orange"),[ei]:Hs("color","black")},ii={[Ks]:"[1m",[qs]:"[2m",[Fs]:"[34m",[Ys]:"[32m",[Zs]:"[37m",[Xs]:"[31m",[Qs]:"[35m",[ti]:"[38;5;208m",[ei]:"[0m"},ni=Be?t=>{const e=[],s=[];let i=0;for(;i<t.length;i++){const s=t[i],n=ii[s];if(void 0!==n)e.push(n);else{if(s.constructor!==String&&s.constructor!==Number)break;e.push(s)}}for(i>0&&(e.push("[0m"),s.push(e.join("")));i<t.length;i++){const e=t[i];e instanceof Symbol||s.push(e)}return s}:t=>{const e=[],s=[],i=ke();let n=[],r=0;for(;r<t.length;r++){const n=t[r],o=si[n];if(void 0!==o)i.set(o.left,o.right);else{if(n.constructor!==String&&n.constructor!==Number)break;{const t=Gs(i);r>0||t.length>0?(e.push("%c"+n),s.push(t)):e.push(n)}}}for(r>0&&(n=s,n.unshift(e.join("")));r<t.length;r++){const e=t[r];e instanceof Symbol||n.push(e)}return n},ri=new Set,oi=t=>({[Symbol.iterator](){return this},next:t}),hi=(t,e)=>oi((()=>{const{done:s,value:i}=t.next();return{done:s,value:s?void 0:e(i)}}));class li{constructor(t,e){this.clock=t,this.len=e}}class ci{constructor(){this.clients=new Map}}const ai=(t,e,s)=>e.clients.forEach(((e,i)=>{const n=t.doc.store.clients.get(i);for(let i=0;i<e.length;i++){const r=e[i];tn(t,n,r.clock,r.len,s)}})),ui=(t,e)=>{const s=t.clients.get(e.client);return void 0!==s&&null!==((t,e)=>{let s=0,i=t.length-1;for(;s<=i;){const n=We((s+i)/2),r=t[n],o=r.clock;if(o<=e){if(e<o+r.len)return n;s=n+1}else i=n-1}return null})(s,e.clock)},di=t=>{t.clients.forEach((t=>{let e,s;for(t.sort(((t,e)=>t.clock-e.clock)),e=1,s=1;e<t.length;e++){const i=t[s-1],n=t[e];i.clock+i.len>=n.clock?i.len=Te(i.len,n.clock+n.len-i.clock):(s<e&&(t[s]=n),s++)}t.length=s}))},fi=(t,e,s,i)=>{xe(t.clients,e,(()=>[])).push(new li(s,i))},wi=()=>new ci,pi=(t,e)=>{ps(t.restEncoder,e.clients.size),e.clients.forEach(((e,s)=>{t.resetDsCurVal(),ps(t.restEncoder,s);const i=e.length;ps(t.restEncoder,i);for(let s=0;s<i;s++){const i=e[s];t.writeDsClock(i.clock),t.writeDsLen(i.len)}}))},gi=t=>{const e=new ci,s=Ye(t.restDecoder);for(let i=0;i<s;i++){t.resetDsCurVal();const s=Ye(t.restDecoder),i=Ye(t.restDecoder);if(i>0){const n=xe(e.clients,s,(()=>[]));for(let e=0;e<i;e++)n.push(new li(t.readDsClock(),t.readDsLen()))}}return e},vi=(t,e,s)=>{const i=new ci,n=Ye(t.restDecoder);for(let r=0;r<n;r++){t.resetDsCurVal();const n=Ye(t.restDecoder),r=Ye(t.restDecoder),o=s.clients.get(n)||[],h=Ki(s,n);for(let s=0;s<r;s++){const s=t.readDsClock(),r=s+t.readDsLen();if(s<h){h<r&&fi(i,n,h,r-h);let t=Fi(o,s),l=o[t];for(!l.deleted&&l.id.clock<s&&(o.splice(t+1,0,Tr(e,l,s-l.id.clock)),t++);t<o.length&&(l=o[t++],l.id.clock<r);)l.deleted||(r<l.id.clock+l.length&&o.splice(t,0,Tr(e,l,r-l.id.clock)),l.delete(e))}else fi(i,n,s,r-s)}}if(i.clients.size>0){const t=new Si;return ps(t.restEncoder,0),pi(t,i),t.toUint8Array()}return null},yi=Us;class bi extends _e{constructor({guid:t=Ts(),collectionid:e=null,gc:s=!0,gcFilter:i=(()=>!0),meta:n=null,autoLoad:r=!1,shouldLoad:o=!0}={}){super(),this.gc=s,this.gcFilter=i,this.clientID=yi(),this.guid=t,this.collectionid=e,this.share=new Map,this.store=new Vi,this._transaction=null,this._transactionCleanups=[],this.subdocs=new Set,this._item=null,this.shouldLoad=o,this.autoLoad=r,this.meta=n,this.isLoaded=!1,this.whenLoaded=(t=>new Promise(t))((t=>{this.on("load",(()=>{this.isLoaded=!0,t(this)}))}))}load(){const t=this._item;null===t||this.shouldLoad||hn(t.parent.doc,(t=>{t.subdocsLoaded.add(this)}),null,!0),this.shouldLoad=!0}getSubdocs(){return this.subdocs}getSubdocGuids(){return new Set(Array.from(this.subdocs).map((t=>t.guid)))}transact(t,e=null){hn(this,t,e)}get(t,e=An){const s=xe(this.share,t,(()=>{const t=new e;return t._integrate(this,null),t})),i=s.constructor;if(e!==An&&i!==e){if(i===An){const i=new e;i._map=s._map,s._map.forEach((t=>{for(;null!==t;t=t.left)t.parent=i})),i._start=s._start;for(let t=i._start;null!==t;t=t.right)t.parent=i;return i._length=s._length,this.share.set(t,i),i._integrate(this,null),i}throw new Error(`Type with the name ${t} has already been defined with a different constructor`)}return s}getArray(t=""){return this.get(t,Hn)}getText(t=""){return this.get(t,or)}getMap(t=""){return this.get(t,Gn)}getXmlFragment(t=""){return this.get(t,lr)}toJSON(){const t={};return this.share.forEach(((e,s)=>{t[s]=e.toJSON()})),t}destroy(){Ce(this.subdocs).forEach((t=>t.destroy()));const t=this._item;if(null!==t){this._item=null;const e=t.content;e.doc=new bi({guid:this.guid,...e.opts,shouldLoad:!1}),e.doc._item=t,hn(t.parent.doc,(s=>{const i=e.doc;t.deleted||s.subdocsAdded.add(i),s.subdocsRemoved.add(this)}),null,!0)}this.emit("destroyed",[!0]),this.emit("destroy",[this]),super.destroy()}on(t,e){super.on(t,e)}off(t,e){super.off(t,e)}}class mi{constructor(t){this.restDecoder=t}resetDsCurVal(){}readDsClock(){return Ye(this.restDecoder)}readDsLen(){return Ye(this.restDecoder)}}class ki extends mi{readLeftID(){return ji(Ye(this.restDecoder),Ye(this.restDecoder))}readRightID(){return ji(Ye(this.restDecoder),Ye(this.restDecoder))}readClient(){return Ye(this.restDecoder)}readInfo(){return Ze(this.restDecoder)}readString(){return Qe(this.restDecoder)}readParentInfo(){return 1===Ye(this.restDecoder)}readTypeRef(){return Ye(this.restDecoder)}readLen(){return Ye(this.restDecoder)}readAny(){return ss(this.restDecoder)}readBuf(){return ls(Fe(this.restDecoder))}readJSON(){return JSON.parse(Qe(this.restDecoder))}readKey(){return Qe(this.restDecoder)}}class $i extends class{constructor(t){this.dsCurrVal=0,this.restDecoder=t}resetDsCurVal(){this.dsCurrVal=0}readDsClock(){return this.dsCurrVal+=Ye(this.restDecoder),this.dsCurrVal}readDsLen(){const t=Ye(this.restDecoder)+1;return this.dsCurrVal+=t,t}}{constructor(t){super(t),this.keys=[],Ye(t),this.keyClockDecoder=new rs(Fe(t)),this.clientDecoder=new ns(Fe(t)),this.leftClockDecoder=new rs(Fe(t)),this.rightClockDecoder=new rs(Fe(t)),this.infoDecoder=new is(Fe(t),Ze),this.stringDecoder=new os(Fe(t)),this.parentInfoDecoder=new is(Fe(t),Ze),this.typeRefDecoder=new ns(Fe(t)),this.lenDecoder=new ns(Fe(t))}readLeftID(){return new Ii(this.clientDecoder.read(),this.leftClockDecoder.read())}readRightID(){return new Ii(this.clientDecoder.read(),this.rightClockDecoder.read())}readClient(){return this.clientDecoder.read()}readInfo(){return this.infoDecoder.read()}readString(){return this.stringDecoder.read()}readParentInfo(){return 1===this.parentInfoDecoder.read()}readTypeRef(){return this.typeRefDecoder.read()}readLen(){return this.lenDecoder.read()}readAny(){return ss(this.restDecoder)}readBuf(){return Fe(this.restDecoder)}readJSON(){return ss(this.restDecoder)}readKey(){const t=this.keyClockDecoder.read();if(t<this.keys.length)return this.keys[t];{const t=this.stringDecoder.read();return this.keys.push(t),t}}}class xi extends class{constructor(){this.restEncoder=us()}toUint8Array(){return ds(this.restEncoder)}resetDsCurVal(){}writeDsClock(t){ps(this.restEncoder,t)}writeDsLen(t){ps(this.restEncoder,t)}}{writeLeftID(t){ps(this.restEncoder,t.client),ps(this.restEncoder,t.clock)}writeRightID(t){ps(this.restEncoder,t.client),ps(this.restEncoder,t.clock)}writeClient(t){ps(this.restEncoder,t)}writeInfo(t){ws(this.restEncoder,t)}writeString(t){vs(this.restEncoder,t)}writeParentInfo(t){ps(this.restEncoder,t?1:0)}writeTypeRef(t){ps(this.restEncoder,t)}writeLen(t){ps(this.restEncoder,t)}writeAny(t){$s(this.restEncoder,t)}writeBuf(t){bs(this.restEncoder,t)}writeJSON(t){vs(this.restEncoder,JSON.stringify(t))}writeKey(t){vs(this.restEncoder,t)}}class Si extends class{constructor(){this.restEncoder=us(),this.dsCurrVal=0}toUint8Array(){return ds(this.restEncoder)}resetDsCurVal(){this.dsCurrVal=0}writeDsClock(t){const e=t-this.dsCurrVal;this.dsCurrVal=t,ps(this.restEncoder,e)}writeDsLen(t){0===t&&Is(),ps(this.restEncoder,t-1),this.dsCurrVal+=t}}{constructor(){super(),this.keyMap=new Map,this.keyClock=0,this.keyClockEncoder=new Cs,this.clientEncoder=new Ms,this.leftClockEncoder=new Cs,this.rightClockEncoder=new Cs,this.infoEncoder=new xs(ws),this.stringEncoder=new _s,this.parentInfoEncoder=new xs(ws),this.typeRefEncoder=new Ms,this.lenEncoder=new Ms}toUint8Array(){const t=us();return ps(t,0),bs(t,this.keyClockEncoder.toUint8Array()),bs(t,this.clientEncoder.toUint8Array()),bs(t,this.leftClockEncoder.toUint8Array()),bs(t,this.rightClockEncoder.toUint8Array()),bs(t,ds(this.infoEncoder)),bs(t,this.stringEncoder.toUint8Array()),bs(t,ds(this.parentInfoEncoder)),bs(t,this.typeRefEncoder.toUint8Array()),bs(t,this.lenEncoder.toUint8Array()),ys(t,ds(this.restEncoder)),ds(t)}writeLeftID(t){this.clientEncoder.write(t.client),this.leftClockEncoder.write(t.clock)}writeRightID(t){this.clientEncoder.write(t.client),this.rightClockEncoder.write(t.clock)}writeClient(t){this.clientEncoder.write(t)}writeInfo(t){this.infoEncoder.write(t)}writeString(t){this.stringEncoder.write(t)}writeParentInfo(t){this.parentInfoEncoder.write(t?1:0)}writeTypeRef(t){this.typeRefEncoder.write(t)}writeLen(t){this.lenEncoder.write(t)}writeAny(t){$s(this.restEncoder,t)}writeBuf(t){bs(this.restEncoder,t)}writeJSON(t){$s(this.restEncoder,t)}writeKey(t){const e=this.keyMap.get(t);void 0===e?(this.keyClockEncoder.write(this.keyClock++),this.stringEncoder.write(t)):this.keyClockEncoder.write(e)}}const Mi=(t,e,s)=>{const i=new Map;s.forEach(((t,s)=>{Ki(e,s)>t&&i.set(s,t)})),Gi(e).forEach(((t,e)=>{s.has(e)||i.set(e,0)})),ps(t.restEncoder,i.size),Array.from(i.entries()).sort(((t,e)=>e[0]-t[0])).forEach((([s,i])=>{((t,e,s,i)=>{i=Te(i,e[0].id.clock);const n=Fi(e,i);ps(t.restEncoder,e.length-n),t.writeClient(s),ps(t.restEncoder,i);const r=e[n];r.write(t,i-r.id.clock);for(let s=n+1;s<e.length;s++)e[s].write(t,0)})(t,e.clients.get(s),s,i)}))},Ai=(t,e,s,i=new $i(t))=>hn(e,(t=>{t.local=!1;let e=!1;const s=t.doc,n=s.store,r=((t,e)=>{const s=ke(),i=Ye(t.restDecoder);for(let n=0;n<i;n++){const i=Ye(t.restDecoder),n=new Array(i),r=t.readClient();let o=Ye(t.restDecoder);s.set(r,{i:0,refs:n});for(let s=0;s<i;s++){const i=t.readInfo();switch(31&i){case 0:{const e=t.readLen();n[s]=new wr(ji(r,o),e),o+=e;break}case 10:{const e=Ye(t.restDecoder);n[s]=new Ir(ji(r,o),e),o+=e;break}default:{const h=0==(192&i),l=new Rr(ji(r,o),null,128==(128&i)?t.readLeftID():null,null,64==(64&i)?t.readRightID():null,h?t.readParentInfo()?e.get(t.readString()):t.readLeftID():null,h&&32==(32&i)?t.readString():null,Nr(t,i));n[s]=l,o+=l.length}}}}return s})(i,s),o=((t,e,s)=>{const i=[];let n=Array.from(s.keys()).sort(((t,e)=>t-e));if(0===n.length)return null;const r=()=>{if(0===n.length)return null;let t=s.get(n[n.length-1]);for(;t.refs.length===t.i;){if(n.pop(),!(n.length>0))return null;t=s.get(n[n.length-1])}return t};let o=r();if(null===o&&0===i.length)return null;const h=new Vi,l=new Map,c=(t,e)=>{const s=l.get(t);(null==s||s>e)&&l.set(t,e)};let a=o.refs[o.i++];const u=new Map,d=()=>{for(const t of i){const e=t.id.client,i=s.get(e);i?(i.i--,h.clients.set(e,i.refs.slice(i.i)),s.delete(e),i.i=0,i.refs=[]):h.clients.set(e,[t]),n=n.filter((t=>t!==e))}i.length=0};for(;;){if(a.constructor!==Ir){const n=xe(u,a.id.client,(()=>Ki(e,a.id.client)))-a.id.clock;if(n<0)i.push(a),c(a.id.client,a.id.clock-1),d();else{const r=a.getMissing(t,e);if(null!==r){i.push(a);const t=s.get(r)||{refs:[],i:0};if(t.refs.length!==t.i){a=t.refs[t.i++];continue}c(r,Ki(e,r)),d()}else(0===n||n<a.length)&&(a.integrate(t,n),u.set(a.id.client,a.id.clock+a.length))}}if(i.length>0)a=i.pop();else if(null!==o&&o.i<o.refs.length)a=o.refs[o.i++];else{if(o=r(),null===o)break;a=o.refs[o.i++]}}if(h.clients.size>0){const t=new Si;return Mi(t,h,new Map),ps(t.restEncoder,0),{missing:l,update:t.toUint8Array()}}return null})(t,n,r),h=n.pendingStructs;if(h){for(const[t,s]of h.missing)if(s<Ki(n,t)){e=!0;break}if(o){for(const[t,e]of o.missing){const s=h.missing.get(t);(null==s||s>e)&&h.missing.set(t,e)}h.update=dn([h.update,o.update])}}else n.pendingStructs=o;const l=vi(i,t,n);if(n.pendingDs){const e=new $i(qe(n.pendingDs));Ye(e.restDecoder);const s=vi(e,t,n);n.pendingDs=l&&s?dn([l,s]):l||s}else n.pendingDs=l;if(e){const e=n.pendingStructs.update;n.pendingStructs=null,Ci(t.doc,e)}}),s,!1),Ci=(t,e,s,i=$i)=>{const n=qe(e);Ai(n,t,s,new i(n))},_i=(t,e,s)=>Ci(t,e,s,ki),Wi=(t,e,s=new Map)=>{Mi(t,e.store,s),pi(t,(t=>{const e=wi();return t.clients.forEach(((t,s)=>{const i=[];for(let e=0;e<t.length;e++){const s=t[e];if(s.deleted){const n=s.id.clock;let r=s.length;if(e+1<t.length)for(let s=t[e+1];e+1<t.length&&s.deleted;s=t[1+ ++e])r+=s.length;i.push(new li(n,r))}}i.length>0&&e.clients.set(s,i)})),e})(e.store))},Oi=(t,e)=>((t,e=new Uint8Array([0]),s=new Si)=>{const i=Ui(e);Wi(s,t,i);const n=[s.toUint8Array()];if(t.store.pendingDs&&n.push(t.store.pendingDs),t.store.pendingStructs&&n.push(fn(t.store.pendingStructs.update,e)),n.length>1){if(s.constructor===xi)return an(n.map(((t,e)=>0===e?t:vn(t))));if(s.constructor===Si)return dn(n)}return n[0]})(t,e,new xi),Ui=t=>(t=>{const e=new Map,s=Ye(t.restDecoder);for(let i=0;i<s;i++){const s=Ye(t.restDecoder),i=Ye(t.restDecoder);e.set(s,i)}return e})(new mi(qe(t)));class Ei{constructor(){this.l=[]}}const Ti=()=>new Ei,Ri=(t,e)=>t.l.push(e),Ni=(t,e)=>{const s=t.l,i=s.length;t.l=s.filter((t=>e!==t)),i===t.l.length&&console.error("[yjs] Tried to remove event handler that doesn't exist.")},Di=(t,e,s)=>Ps(t.l,[e,s]);class Ii{constructor(t,e){this.client=t,this.clock=e}}const zi=(t,e)=>t===e||null!==t&&null!==e&&t.client===e.client&&t.clock===e.clock,ji=(t,e)=>new Ii(t,e);class Li{constructor(t,e){this.ds=t,this.sv=e}}var Pi,Ji;Pi=wi(),Ji=new Map,new Li(Pi,Ji);const Bi=(t,e)=>void 0===e?!t.deleted:e.sv.has(t.id.client)&&(e.sv.get(t.id.client)||0)>t.id.clock&&!ui(e.ds,t.id),Hi=(t,e)=>{const s=xe(t.meta,Hi,Se),i=t.doc.store;s.has(e)||(e.sv.forEach(((e,s)=>{e<Ki(i,s)&&Xi(t,ji(s,e))})),ai(t,e.ds,(t=>{})),s.add(e))};class Vi{constructor(){this.clients=new Map,this.pendingStructs=null,this.pendingDs=null}}const Gi=t=>{const e=new Map;return t.clients.forEach(((t,s)=>{const i=t[t.length-1];e.set(s,i.id.clock+i.length)})),e},Ki=(t,e)=>{const s=t.clients.get(e);if(void 0===s)return 0;const i=s[s.length-1];return i.id.clock+i.length},qi=(t,e)=>{let s=t.clients.get(e.id.client);if(void 0===s)s=[],t.clients.set(e.id.client,s);else{const t=s[s.length-1];if(t.id.clock+t.length!==e.id.clock)throw Is()}s.push(e)},Fi=(t,e)=>{let s=0,i=t.length-1,n=t[i],r=n.id.clock;if(r===e)return i;let o=We(e/(r+n.length-1)*i);for(;s<=i;){if(n=t[o],r=n.id.clock,r<=e){if(e<r+n.length)return o;s=o+1}else i=o-1;o=We((s+i)/2)}throw Is()},Zi=(t,e)=>{const s=t.clients.get(e.client);return s[Fi(s,e.clock)]},Yi=(t,e,s)=>{const i=Fi(e,s),n=e[i];return n.id.clock<s&&n instanceof Rr?(e.splice(i+1,0,Tr(t,n,s-n.id.clock)),i+1):i},Xi=(t,e)=>{const s=t.doc.store.clients.get(e.client);return s[Yi(t,s,e.clock)]},Qi=(t,e,s)=>{const i=e.clients.get(s.client),n=Fi(i,s.clock),r=i[n];return s.clock!==r.id.clock+r.length-1&&r.constructor!==wr&&i.splice(n+1,0,Tr(t,r,s.clock-r.id.clock+1)),r},tn=(t,e,s,i,n)=>{if(0===i)return;const r=s+i;let o,h=Yi(t,e,s);do{o=e[h++],r<o.id.clock+o.length&&Yi(t,e,r),n(o)}while(h<e.length&&e[h].id.clock<r)};class en{constructor(t,e,s){this.doc=t,this.deleteSet=new ci,this.beforeState=Gi(t.store),this.afterState=new Map,this.changed=new Map,this.changedParentTypes=new Map,this._mergeStructs=[],this.origin=e,this.meta=new Map,this.local=s,this.subdocsAdded=new Set,this.subdocsRemoved=new Set,this.subdocsLoaded=new Set}}const sn=(t,e)=>!(0===e.deleteSet.clients.size&&!((t,e)=>{for(const[s,i]of t)if(e(i,s))return!0;return!1})(e.afterState,((t,s)=>e.beforeState.get(s)!==t)))&&(di(e.deleteSet),((t,e)=>{Mi(t,e.doc.store,e.beforeState)})(t,e),pi(t,e.deleteSet),!0),nn=(t,e,s)=>{const i=e._item;(null===i||i.id.clock<(t.beforeState.get(i.id.client)||0)&&!i.deleted)&&xe(t.changed,e,Se).add(s)},rn=(t,e)=>{const s=t[e-1],i=t[e];s.deleted===i.deleted&&s.constructor===i.constructor&&s.mergeWith(i)&&(t.splice(e,1),i instanceof Rr&&null!==i.parentSub&&i.parent._map.get(i.parentSub)===i&&i.parent._map.set(i.parentSub,s))},on=(t,e)=>{if(e<t.length){const s=t[e],i=s.doc,n=i.store,r=s.deleteSet,o=s._mergeStructs;try{di(r),s.afterState=Gi(s.doc.store),i._transaction=null,i.emit("beforeObserverCalls",[s,i]);const h=[];s.changed.forEach(((t,e)=>h.push((()=>{null!==e._item&&e._item.deleted||e._callObserver(s,t)})))),h.push((()=>{s.changedParentTypes.forEach(((t,e)=>h.push((()=>{null!==e._item&&e._item.deleted||((t=t.filter((t=>null===t.target._item||!t.target._item.deleted))).forEach((t=>{t.currentTarget=e})),t.sort(((t,e)=>t.path.length-e.path.length)),Di(e._dEH,t,s))})))),h.push((()=>i.emit("afterTransaction",[s,i])))})),Ps(h,[])}finally{i.gc&&((t,e,s)=>{for(const[i,n]of t.clients.entries()){const t=e.clients.get(i);for(let i=n.length-1;i>=0;i--){const r=n[i],o=r.clock+r.len;for(let i=Fi(t,r.clock),n=t[i];i<t.length&&n.id.clock<o;n=t[++i]){const n=t[i];if(r.clock+r.len<=n.id.clock)break;n instanceof Rr&&n.deleted&&!n.keep&&s(n)&&n.gc(e,!1)}}}})(r,n,i.gcFilter),((t,e)=>{t.clients.forEach(((t,s)=>{const i=e.clients.get(s);for(let e=t.length-1;e>=0;e--){const s=t[e];for(let t=Ee(i.length-1,1+Fi(i,s.clock+s.len-1)),e=i[t];t>0&&e.id.clock>=s.clock;e=i[--t])rn(i,t)}}))})(r,n),s.afterState.forEach(((t,e)=>{const i=s.beforeState.get(e)||0;if(i!==t){const t=n.clients.get(e),s=Te(Fi(t,i),1);for(let e=t.length-1;e>=s;e--)rn(t,e)}}));for(let t=0;t<o.length;t++){const{client:e,clock:s}=o[t].id,i=n.clients.get(e),r=Fi(i,s);r+1<i.length&&rn(i,r+1),r>0&&rn(i,r)}if(s.local||s.afterState.get(i.clientID)===s.beforeState.get(i.clientID)||(((...t)=>{console.log(...ni(t)),ri.forEach((e=>e.print(t)))})(ti,Ks,"[yjs] ",qs,Xs,"Changed the client-id because another client seems to be using it."),i.clientID=yi()),i.emit("afterTransactionCleanup",[s,i]),i._observers.has("update")){const t=new xi;sn(t,s)&&i.emit("update",[t.toUint8Array(),s.origin,i,s])}if(i._observers.has("updateV2")){const t=new Si;sn(t,s)&&i.emit("updateV2",[t.toUint8Array(),s.origin,i,s])}const{subdocsAdded:h,subdocsLoaded:l,subdocsRemoved:c}=s;(h.size>0||c.size>0||l.size>0)&&(h.forEach((t=>{t.clientID=i.clientID,null==t.collectionid&&(t.collectionid=i.collectionid),i.subdocs.add(t)})),c.forEach((t=>i.subdocs.delete(t))),i.emit("subdocs",[{loaded:l,added:h,removed:c},i,s]),c.forEach((t=>t.destroy()))),t.length<=e+1?(i._transactionCleanups=[],i.emit("afterAllTransactions",[i,t])):on(t,e+1)}}},hn=(t,e,s=null,i=!0)=>{const n=t._transactionCleanups;let r=!1;null===t._transaction&&(r=!0,t._transaction=new en(t,s,i),n.push(t._transaction),1===n.length&&t.emit("beforeAllTransactions",[t]),t.emit("beforeTransaction",[t._transaction,t]));try{e(t._transaction)}finally{r&&n[0]===t._transaction&&on(n,0)}};class ln{constructor(t,e){this.gen=function*(t){const e=Ye(t.restDecoder);for(let s=0;s<e;s++){const e=Ye(t.restDecoder),s=t.readClient();let i=Ye(t.restDecoder);for(let n=0;n<e;n++){const e=t.readInfo();if(10===e){const e=Ye(t.restDecoder);yield new Ir(ji(s,i),e),i+=e}else if(0!=(31&e)){const n=0==(192&e),r=new Rr(ji(s,i),null,128==(128&e)?t.readLeftID():null,null,64==(64&e)?t.readRightID():null,n?t.readParentInfo()?t.readString():t.readLeftID():null,n&&32==(32&e)?t.readString():null,Nr(t,e));yield r,i+=r.length}else{const e=t.readLen();yield new wr(ji(s,i),e),i+=e}}}}(t),this.curr=null,this.done=!1,this.filterSkips=e,this.next()}next(){do{this.curr=this.gen.next().value||null}while(this.filterSkips&&null!==this.curr&&this.curr.constructor===Ir);return this.curr}}class cn{constructor(t){this.currClient=0,this.startClock=0,this.written=0,this.encoder=t,this.clientStructs=[]}}const an=t=>dn(t,ki,xi),un=(t,e)=>{if(t.constructor===wr){const{client:s,clock:i}=t.id;return new wr(ji(s,i+e),t.length-e)}if(t.constructor===Ir){const{client:s,clock:i}=t.id;return new Ir(ji(s,i+e),t.length-e)}{const s=t,{client:i,clock:n}=s.id;return new Rr(ji(i,n+e),null,ji(i,n+e-1),null,s.rightOrigin,s.parent,s.parentSub,s.content.splice(e))}},dn=(t,e=$i,s=Si)=>{if(1===t.length)return t[0];const i=t.map((t=>new e(qe(t))));let n=i.map((t=>new ln(t,!0))),r=null;const o=new s,h=new cn(o);for(;n=n.filter((t=>null!==t.curr)),n.sort(((t,e)=>{if(t.curr.id.client===e.curr.id.client){const s=t.curr.id.clock-e.curr.id.clock;return 0===s?t.curr.constructor===e.curr.constructor?0:t.curr.constructor===Ir?1:-1:s}return e.curr.id.client-t.curr.id.client})),0!==n.length;){const t=n[0],e=t.curr.id.client;if(null!==r){let s=t.curr,i=!1;for(;null!==s&&s.id.clock+s.length<=r.struct.id.clock+r.struct.length&&s.id.client>=r.struct.id.client;)s=t.next(),i=!0;if(null===s||s.id.client!==e||i&&s.id.clock>r.struct.id.clock+r.struct.length)continue;if(e!==r.struct.id.client)pn(h,r.struct,r.offset),r={struct:s,offset:0},t.next();else if(r.struct.id.clock+r.struct.length<s.id.clock)if(r.struct.constructor===Ir)r.struct.length=s.id.clock+s.length-r.struct.id.clock;else{pn(h,r.struct,r.offset);const t=s.id.clock-r.struct.id.clock-r.struct.length;r={struct:new Ir(ji(e,r.struct.id.clock+r.struct.length),t),offset:0}}else{const e=r.struct.id.clock+r.struct.length-s.id.clock;e>0&&(r.struct.constructor===Ir?r.struct.length-=e:s=un(s,e)),r.struct.mergeWith(s)||(pn(h,r.struct,r.offset),r={struct:s,offset:0},t.next())}}else r={struct:t.curr,offset:0},t.next();for(let s=t.curr;null!==s&&s.id.client===e&&s.id.clock===r.struct.id.clock+r.struct.length&&s.constructor!==Ir;s=t.next())pn(h,r.struct,r.offset),r={struct:s,offset:0}}null!==r&&(pn(h,r.struct,r.offset),r=null),gn(h);const l=(t=>{const e=new ci;for(let s=0;s<t.length;s++)t[s].clients.forEach(((i,n)=>{if(!e.clients.has(n)){const r=i.slice();for(let e=s+1;e<t.length;e++)Ae(r,t[e].clients.get(n)||[]);e.clients.set(n,r)}}));return di(e),e})(i.map((t=>gi(t))));return pi(o,l),o.toUint8Array()},fn=(t,e,s=$i,i=Si)=>{const n=Ui(e),r=new i,o=new cn(r),h=new s(qe(t)),l=new ln(h,!1);for(;l.curr;){const t=l.curr,e=t.id.client,s=n.get(e)||0;if(l.curr.constructor!==Ir)if(t.id.clock+t.length>s)for(pn(o,t,Te(s-t.id.clock,0)),l.next();l.curr&&l.curr.id.client===e;)pn(o,l.curr,0),l.next();else for(;l.curr&&l.curr.id.client===e&&l.curr.id.clock+l.curr.length<=s;)l.next();else l.next()}gn(o);const c=gi(h);return pi(r,c),r.toUint8Array()},wn=t=>{t.written>0&&(t.clientStructs.push({written:t.written,restEncoder:ds(t.encoder.restEncoder)}),t.encoder.restEncoder=us(),t.written=0)},pn=(t,e,s)=>{t.written>0&&t.currClient!==e.id.client&&wn(t),0===t.written&&(t.currClient=e.id.client,t.encoder.writeClient(e.id.client),ps(t.encoder.restEncoder,e.id.clock+s)),e.write(t.encoder,s),t.written++},gn=t=>{wn(t);const e=t.encoder.restEncoder;ps(e,t.clientStructs.length);for(let s=0;s<t.clientStructs.length;s++){const i=t.clientStructs[s];ps(e,i.written),ys(e,i.restEncoder)}},vn=t=>((t,e,s)=>{const i=new e(qe(t)),n=new ln(i,!1),r=new s,o=new cn(r);for(let t=n.curr;null!==t;t=n.next())pn(o,t,0);gn(o);const h=gi(i);return pi(r,h),r.toUint8Array()})(t,$i,xi);class yn{constructor(t,e){this.target=t,this.currentTarget=t,this.transaction=e,this._changes=null,this._keys=null,this._delta=null}get path(){return bn(this.currentTarget,this.target)}deletes(t){return ui(this.transaction.deleteSet,t.id)}get keys(){if(null===this._keys){const t=new Map,e=this.target;this.transaction.changed.get(e).forEach((s=>{if(null!==s){const i=e._map.get(s);let n,r;if(this.adds(i)){let t=i.left;for(;null!==t&&this.adds(t);)t=t.left;if(this.deletes(i)){if(null===t||!this.deletes(t))return;n="delete",r=Me(t.content.getContent())}else null!==t&&this.deletes(t)?(n="update",r=Me(t.content.getContent())):(n="add",r=void 0)}else{if(!this.deletes(i))return;n="delete",r=Me(i.content.getContent())}t.set(s,{action:n,oldValue:r})}})),this._keys=t}return this._keys}get delta(){return this.changes.delta}adds(t){return t.id.clock>=(this.transaction.beforeState.get(t.id.client)||0)}get changes(){let t=this._changes;if(null===t){const e=this.target,s=Se(),i=Se(),n=[];t={added:s,deleted:i,delta:n,keys:this.keys};if(this.transaction.changed.get(e).has(null)){let t=null;const r=()=>{t&&n.push(t)};for(let n=e._start;null!==n;n=n.right)n.deleted?this.deletes(n)&&!this.adds(n)&&(null!==t&&void 0!==t.delete||(r(),t={delete:0}),t.delete+=n.length,i.add(n)):this.adds(n)?(null!==t&&void 0!==t.insert||(r(),t={insert:[]}),t.insert=t.insert.concat(n.content.getContent()),s.add(n)):(null!==t&&void 0!==t.retain||(r(),t={retain:0}),t.retain+=n.length);null!==t&&void 0===t.retain&&r()}this._changes=t}return t}}const bn=(t,e)=>{const s=[];for(;null!==e._item&&e!==t;){if(null!==e._item.parentSub)s.unshift(e._item.parentSub);else{let t=0,i=e._item.parent._start;for(;i!==e._item&&null!==i;)i.deleted||t++,i=i.right;s.unshift(t)}e=e._item.parent}return s};let mn=0;class kn{constructor(t,e){t.marker=!0,this.p=t,this.index=e,this.timestamp=mn++}}const $n=(t,e,s)=>{t.p.marker=!1,t.p=e,e.marker=!0,t.index=s,t.timestamp=mn++},xn=(t,e)=>{if(null===t._start||0===e||null===t._searchMarker)return null;const s=0===t._searchMarker.length?null:t._searchMarker.reduce(((t,s)=>Oe(e-t.index)<Oe(e-s.index)?t:s));let i=t._start,n=0;for(null!==s&&(i=s.p,n=s.index,(t=>{t.timestamp=mn++})(s));null!==i.right&&n<e;){if(!i.deleted&&i.countable){if(e<n+i.length)break;n+=i.length}i=i.right}for(;null!==i.left&&n>e;)i=i.left,!i.deleted&&i.countable&&(n-=i.length);for(;null!==i.left&&i.left.id.client===i.id.client&&i.left.id.clock+i.left.length===i.id.clock;)i=i.left,!i.deleted&&i.countable&&(n-=i.length);return null!==s&&Oe(s.index-n)<i.parent.length/80?($n(s,i,n),s):((t,e,s)=>{if(t.length>=80){const i=t.reduce(((t,e)=>t.timestamp<e.timestamp?t:e));return $n(i,e,s),i}{const i=new kn(e,s);return t.push(i),i}})(t._searchMarker,i,n)},Sn=(t,e,s)=>{for(let i=t.length-1;i>=0;i--){const n=t[i];if(s>0){let e=n.p;for(e.marker=!1;e&&(e.deleted||!e.countable);)e=e.left,e&&!e.deleted&&e.countable&&(n.index-=e.length);if(null===e||!0===e.marker){t.splice(i,1);continue}n.p=e,e.marker=!0}(e<n.index||s>0&&e===n.index)&&(n.index=Te(e,n.index+s))}},Mn=(t,e,s)=>{const i=t,n=e.changedParentTypes;for(;xe(n,t,(()=>[])).push(s),null!==t._item;)t=t._item.parent;Di(i._eH,s,e)};class An{constructor(){this._item=null,this._map=new Map,this._start=null,this.doc=null,this._length=0,this._eH=Ti(),this._dEH=Ti(),this._searchMarker=null}get parent(){return this._item?this._item.parent:null}_integrate(t,e){this.doc=t,this._item=e}_copy(){throw Ds()}clone(){throw Ds()}_write(t){}get _first(){let t=this._start;for(;null!==t&&t.deleted;)t=t.right;return t}_callObserver(t,e){!t.local&&this._searchMarker&&(this._searchMarker.length=0)}observe(t){Ri(this._eH,t)}observeDeep(t){Ri(this._dEH,t)}unobserve(t){Ni(this._eH,t)}unobserveDeep(t){Ni(this._dEH,t)}toJSON(){}}const Cn=(t,e,s)=>{e<0&&(e=t._length+e),s<0&&(s=t._length+s);let i=s-e;const n=[];let r=t._start;for(;null!==r&&i>0;){if(r.countable&&!r.deleted){const t=r.content.getContent();if(t.length<=e)e-=t.length;else{for(let s=e;s<t.length&&i>0;s++)n.push(t[s]),i--;e=0}}r=r.right}return n},_n=t=>{const e=[];let s=t._start;for(;null!==s;){if(s.countable&&!s.deleted){const t=s.content.getContent();for(let s=0;s<t.length;s++)e.push(t[s])}s=s.right}return e},Wn=(t,e)=>{let s=0,i=t._start;for(;null!==i;){if(i.countable&&!i.deleted){const n=i.content.getContent();for(let i=0;i<n.length;i++)e(n[i],s++,t)}i=i.right}},On=(t,e)=>{const s=[];return Wn(t,((i,n)=>{s.push(e(i,n,t))})),s},Un=t=>{let e=t._start,s=null,i=0;return{[Symbol.iterator](){return this},next:()=>{if(null===s){for(;null!==e&&e.deleted;)e=e.right;if(null===e)return{done:!0,value:void 0};s=e.content.getContent(),i=0,e=e.right}const t=s[i++];return s.length<=i&&(s=null),{done:!1,value:t}}}},En=(t,e)=>{const s=xn(t,e);let i=t._start;for(null!==s&&(i=s.p,e-=s.index);null!==i;i=i.right)if(!i.deleted&&i.countable){if(e<i.length)return i.content.getContent()[e];e-=i.length}},Tn=(t,e,s,i)=>{let n=s;const r=t.doc,o=r.clientID,h=r.store,l=null===s?e._start:s.right;let c=[];const a=()=>{c.length>0&&(n=new Rr(ji(o,Ki(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new $r(c)),n.integrate(t,0),c=[])};i.forEach((s=>{if(null===s)c.push(s);else switch(s.constructor){case Number:case Object:case Boolean:case Array:case String:c.push(s);break;default:switch(a(),s.constructor){case Uint8Array:case ArrayBuffer:n=new Rr(ji(o,Ki(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new pr(new Uint8Array(s))),n.integrate(t,0);break;case bi:n=new Rr(ji(o,Ki(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new yr(s)),n.integrate(t,0);break;default:if(!(s instanceof An))throw new Error("Unexpected content type in insert operation");n=new Rr(ji(o,Ki(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new Er(s)),n.integrate(t,0)}}})),a()},Rn=Ns("Length exceeded!"),Nn=(t,e,s,i)=>{if(s>e._length)throw Rn;if(0===s)return e._searchMarker&&Sn(e._searchMarker,s,i.length),Tn(t,e,null,i);const n=s,r=xn(e,s);let o=e._start;for(null!==r&&(o=r.p,0===(s-=r.index)&&(o=o.prev,s+=o&&o.countable&&!o.deleted?o.length:0));null!==o;o=o.right)if(!o.deleted&&o.countable){if(s<=o.length){s<o.length&&Xi(t,ji(o.id.client,o.id.clock+s));break}s-=o.length}return e._searchMarker&&Sn(e._searchMarker,n,i.length),Tn(t,e,o,i)},Dn=(t,e,s,i)=>{if(0===i)return;const n=s,r=i,o=xn(e,s);let h=e._start;for(null!==o&&(h=o.p,s-=o.index);null!==h&&s>0;h=h.right)!h.deleted&&h.countable&&(s<h.length&&Xi(t,ji(h.id.client,h.id.clock+s)),s-=h.length);for(;i>0&&null!==h;)h.deleted||(i<h.length&&Xi(t,ji(h.id.client,h.id.clock+i)),h.delete(t),i-=h.length),h=h.right;if(i>0)throw Rn;e._searchMarker&&Sn(e._searchMarker,n,-r+i)},In=(t,e,s)=>{const i=e._map.get(s);void 0!==i&&i.delete(t)},zn=(t,e,s,i)=>{const n=e._map.get(s)||null,r=t.doc,o=r.clientID;let h;if(null==i)h=new $r([i]);else switch(i.constructor){case Number:case Object:case Boolean:case Array:case String:h=new $r([i]);break;case Uint8Array:h=new pr(i);break;case bi:h=new yr(i);break;default:if(!(i instanceof An))throw new Error("Unexpected content type");h=new Er(i)}new Rr(ji(o,Ki(r.store,o)),n,n&&n.lastId,null,null,e,s,h).integrate(t,0)},jn=(t,e)=>{const s=t._map.get(e);return void 0===s||s.deleted?void 0:s.content.getContent()[s.length-1]},Ln=t=>{const e={};return t._map.forEach(((t,s)=>{t.deleted||(e[s]=t.content.getContent()[t.length-1])})),e},Pn=(t,e)=>{const s=t._map.get(e);return void 0!==s&&!s.deleted},Jn=t=>((t,e)=>oi((()=>{let s;do{s=t.next()}while(!s.done&&!e(s.value));return s})))(t.entries(),(t=>!t[1].deleted));class Bn extends yn{constructor(t,e){super(t,e),this._transaction=e}}class Hn extends An{constructor(){super(),this._prelimContent=[],this._searchMarker=[]}static from(t){const e=new Hn;return e.push(t),e}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new Hn}clone(){const t=new Hn;return t.insert(0,this.toArray().map((t=>t instanceof An?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}_callObserver(t,e){super._callObserver(t,e),Mn(this,t,new Bn(this,t))}insert(t,e){null!==this.doc?hn(this.doc,(s=>{Nn(s,this,t,e)})):this._prelimContent.splice(t,0,...e)}push(t){null!==this.doc?hn(this.doc,(e=>{((t,e,s)=>{let i=(e._searchMarker||[]).reduce(((t,e)=>e.index>t.index?e:t),{index:0,p:e._start}).p;if(i)for(;i.right;)i=i.right;Tn(t,e,i,s)})(e,this,t)})):this._prelimContent.push(...t)}unshift(t){this.insert(0,t)}delete(t,e=1){null!==this.doc?hn(this.doc,(s=>{Dn(s,this,t,e)})):this._prelimContent.splice(t,e)}get(t){return En(this,t)}toArray(){return _n(this)}slice(t=0,e=this.length){return Cn(this,t,e)}toJSON(){return this.map((t=>t instanceof An?t.toJSON():t))}map(t){return On(this,t)}forEach(t){Wn(this,t)}[Symbol.iterator](){return Un(this)}_write(t){t.writeTypeRef(Mr)}}class Vn extends yn{constructor(t,e,s){super(t,e),this.keysChanged=s}}class Gn extends An{constructor(t){super(),this._prelimContent=null,this._prelimContent=void 0===t?new Map:new Map(t)}_integrate(t,e){super._integrate(t,e),this._prelimContent.forEach(((t,e)=>{this.set(e,t)})),this._prelimContent=null}_copy(){return new Gn}clone(){const t=new Gn;return this.forEach(((e,s)=>{t.set(s,e instanceof An?e.clone():e)})),t}_callObserver(t,e){Mn(this,t,new Vn(this,t,e))}toJSON(){const t={};return this._map.forEach(((e,s)=>{if(!e.deleted){const i=e.content.getContent()[e.length-1];t[s]=i instanceof An?i.toJSON():i}})),t}get size(){return[...Jn(this._map)].length}keys(){return hi(Jn(this._map),(t=>t[0]))}values(){return hi(Jn(this._map),(t=>t[1].content.getContent()[t[1].length-1]))}entries(){return hi(Jn(this._map),(t=>[t[0],t[1].content.getContent()[t[1].length-1]]))}forEach(t){return this._map.forEach(((e,s)=>{e.deleted||t(e.content.getContent()[e.length-1],s,this)})),{}}[Symbol.iterator](){return this.entries()}delete(t){null!==this.doc?hn(this.doc,(e=>{In(e,this,t)})):this._prelimContent.delete(t)}set(t,e){return null!==this.doc?hn(this.doc,(s=>{zn(s,this,t,e)})):this._prelimContent.set(t,e),e}get(t){return jn(this,t)}has(t){return Pn(this,t)}clear(){null!==this.doc?hn(this.doc,(t=>{this.forEach((function(e,s,i){In(t,i,s)}))})):this._prelimContent.clear()}_write(t){t.writeTypeRef(Ar)}}const Kn=(t,e)=>t===e||"object"==typeof t&&"object"==typeof e&&t&&e&&Ls(t,e);class qn{constructor(t,e,s,i){this.left=t,this.right=e,this.index=s,this.currentAttributes=i}forward(){if(null===this.right&&Is(),this.right.content.constructor===mr)this.right.deleted||Xn(this.currentAttributes,this.right.content);else this.right.deleted||(this.index+=this.right.length);this.left=this.right,this.right=this.right.right}}const Fn=(t,e,s)=>{for(;null!==e.right&&s>0;){if(e.right.content.constructor===mr)e.right.deleted||Xn(e.currentAttributes,e.right.content);else e.right.deleted||(s<e.right.length&&Xi(t,ji(e.right.id.client,e.right.id.clock+s)),e.index+=e.right.length,s-=e.right.length);e.left=e.right,e.right=e.right.right}return e},Zn=(t,e,s)=>{const i=new Map,n=xn(e,s);if(n){const e=new qn(n.p.left,n.p,n.index,i);return Fn(t,e,s-n.index)}{const n=new qn(null,e._start,0,i);return Fn(t,n,s)}},Yn=(t,e,s,i)=>{for(;null!==s.right&&(!0===s.right.deleted||s.right.content.constructor===mr&&Kn(i.get(s.right.content.key),s.right.content.value));)s.right.deleted||i.delete(s.right.content.key),s.forward();const n=t.doc,r=n.clientID;i.forEach(((i,o)=>{const h=s.left,l=s.right,c=new Rr(ji(r,Ki(n.store,r)),h,h&&h.lastId,l,l&&l.id,e,null,new mr(o,i));c.integrate(t,0),s.right=c,s.forward()}))},Xn=(t,e)=>{const{key:s,value:i}=e;null===i?t.delete(s):t.set(s,i)},Qn=(t,e)=>{for(;null!==t.right&&(t.right.deleted||t.right.content.constructor===mr&&Kn(e[t.right.content.key]||null,t.right.content.value));)t.forward()},tr=(t,e,s,i)=>{const n=t.doc,r=n.clientID,o=new Map;for(const h in i){const l=i[h],c=s.currentAttributes.get(h)||null;if(!Kn(c,l)){o.set(h,c);const{left:i,right:a}=s;s.right=new Rr(ji(r,Ki(n.store,r)),i,i&&i.lastId,a,a&&a.id,e,null,new mr(h,l)),s.right.integrate(t,0),s.forward()}}return o},er=(t,e,s,i,n)=>{s.currentAttributes.forEach(((t,e)=>{void 0===n[e]&&(n[e]=null)}));const r=t.doc,o=r.clientID;Qn(s,n);const h=tr(t,e,s,n),l=i.constructor===String?new xr(i):i instanceof An?new Er(i):new br(i);let{left:c,right:a,index:u}=s;e._searchMarker&&Sn(e._searchMarker,s.index,l.getLength()),a=new Rr(ji(o,Ki(r.store,o)),c,c&&c.lastId,a,a&&a.id,e,null,l),a.integrate(t,0),s.right=a,s.index=u,s.forward(),Yn(t,e,s,h)},sr=(t,e,s,i,n)=>{const r=t.doc,o=r.clientID;Qn(s,n);const h=tr(t,e,s,n);t:for(;null!==s.right&&(i>0||h.size>0&&(s.right.deleted||s.right.content.constructor===mr));){if(!s.right.deleted)switch(s.right.content.constructor){case mr:{const{key:e,value:r}=s.right.content,o=n[e];if(void 0!==o){if(Kn(o,r))h.delete(e);else{if(0===i)break t;h.set(e,r)}s.right.delete(t)}else s.currentAttributes.set(e,r);break}default:i<s.right.length&&Xi(t,ji(s.right.id.client,s.right.id.clock+i)),i-=s.right.length}s.forward()}if(i>0){let n="";for(;i>0;i--)n+="\n";s.right=new Rr(ji(o,Ki(r.store,o)),s.left,s.left&&s.left.lastId,s.right,s.right&&s.right.id,e,null,new xr(n)),s.right.integrate(t,0),s.forward()}Yn(t,e,s,h)},ir=(t,e,s,i,n)=>{let r=s;const o=$e(n);for(;r&&(!r.countable||r.deleted);)r.deleted||r.content.constructor!==mr||Xn(o,r.content),r=r.right;let h=0,l=!1;for(;e!==r;){if(s===e&&(l=!0),!e.deleted){const s=e.content;switch(s.constructor){case mr:{const{key:r,value:c}=s;(o.get(r)||null)===c&&(i.get(r)||null)!==c||(e.delete(t),h++,l||(n.get(r)||null)!==c||(i.get(r)||null)===c||n.delete(r));break}}}e=e.right}return h},nr=(t,e,s)=>{const i=s,n=$e(e.currentAttributes),r=e.right;for(;s>0&&null!==e.right;){if(!1===e.right.deleted)switch(e.right.content.constructor){case Er:case br:case xr:s<e.right.length&&Xi(t,ji(e.right.id.client,e.right.id.clock+s)),s-=e.right.length,e.right.delete(t)}e.forward()}r&&ir(t,r,e.right,n,e.currentAttributes);const o=(e.left||e.right).parent;return o._searchMarker&&Sn(o._searchMarker,e.index,-i+s),e};class rr extends yn{constructor(t,e,s){super(t,e),this.childListChanged=!1,this.keysChanged=new Set,s.forEach((t=>{null===t?this.childListChanged=!0:this.keysChanged.add(t)}))}get changes(){if(null===this._changes){const t={keys:this.keys,delta:this.delta,added:new Set,deleted:new Set};this._changes=t}return this._changes}get delta(){if(null===this._delta){const t=this.target.doc,e=[];hn(t,(t=>{const s=new Map,i=new Map;let n=this.target._start,r=null;const o={};let h="",l=0,c=0;const a=()=>{if(null!==r){let t;switch(r){case"delete":t={delete:c},c=0;break;case"insert":t={insert:h},s.size>0&&(t.attributes={},s.forEach(((e,s)=>{null!==e&&(t.attributes[s]=e)}))),h="";break;case"retain":if(t={retain:l},Object.keys(o).length>0){t.attributes={};for(const e in o)t.attributes[e]=o[e]}l=0}e.push(t),r=null}};for(;null!==n;){switch(n.content.constructor){case Er:case br:this.adds(n)?this.deletes(n)||(a(),r="insert",h=n.content.getContent()[0],a()):this.deletes(n)?("delete"!==r&&(a(),r="delete"),c+=1):n.deleted||("retain"!==r&&(a(),r="retain"),l+=1);break;case xr:this.adds(n)?this.deletes(n)||("insert"!==r&&(a(),r="insert"),h+=n.content.str):this.deletes(n)?("delete"!==r&&(a(),r="delete"),c+=n.length):n.deleted||("retain"!==r&&(a(),r="retain"),l+=n.length);break;case mr:{const{key:e,value:h}=n.content;if(this.adds(n)){if(!this.deletes(n)){const l=s.get(e)||null;Kn(l,h)?null!==h&&n.delete(t):("retain"===r&&a(),Kn(h,i.get(e)||null)?delete o[e]:o[e]=h)}}else if(this.deletes(n)){i.set(e,h);const t=s.get(e)||null;Kn(t,h)||("retain"===r&&a(),o[e]=t)}else if(!n.deleted){i.set(e,h);const s=o[e];void 0!==s&&(Kn(s,h)?null!==s&&n.delete(t):("retain"===r&&a(),null===h?delete o[e]:o[e]=h))}n.deleted||("insert"===r&&a(),Xn(s,n.content));break}}n=n.right}for(a();e.length>0;){const t=e[e.length-1];if(void 0===t.retain||void 0!==t.attributes)break;e.pop()}})),this._delta=e}return this._delta}}class or extends An{constructor(t){super(),this._pending=void 0!==t?[()=>this.insert(0,t)]:[],this._searchMarker=[]}get length(){return this._length}_integrate(t,e){super._integrate(t,e);try{this._pending.forEach((t=>t()))}catch(t){console.error(t)}this._pending=null}_copy(){return new or}clone(){const t=new or;return t.applyDelta(this.toDelta()),t}_callObserver(t,e){super._callObserver(t,e);const s=new rr(this,t,e),i=t.doc;if(Mn(this,t,s),!t.local){let e=!1;for(const[s,n]of t.afterState.entries()){const r=t.beforeState.get(s)||0;if(n!==r&&(tn(t,i.store.clients.get(s),r,n,(t=>{t.deleted||t.content.constructor!==mr||(e=!0)})),e))break}e||ai(t,t.deleteSet,(t=>{t instanceof wr||e||t.parent===this&&t.content.constructor===mr&&(e=!0)})),hn(i,(t=>{e?(t=>{let e=0;hn(t.doc,(s=>{let i=t._start,n=t._start,r=ke();const o=$e(r);for(;n;)!1===n.deleted&&(n.content.constructor===mr?Xn(o,n.content):(e+=ir(s,i,n,r,o),r=$e(o),i=n)),n=n.right}))})(this):ai(t,t.deleteSet,(e=>{e instanceof wr||e.parent===this&&((t,e)=>{for(;e&&e.right&&(e.right.deleted||!e.right.countable);)e=e.right;const s=new Set;for(;e&&(e.deleted||!e.countable);){if(!e.deleted&&e.content.constructor===mr){const i=e.content.key;s.has(i)?e.delete(t):s.add(i)}e=e.left}})(t,e)}))}))}}toString(){let t="",e=this._start;for(;null!==e;)!e.deleted&&e.countable&&e.content.constructor===xr&&(t+=e.content.str),e=e.right;return t}toJSON(){return this.toString()}applyDelta(t,{sanitize:e=!0}={}){null!==this.doc?hn(this.doc,(s=>{const i=new qn(null,this._start,0,new Map);for(let n=0;n<t.length;n++){const r=t[n];if(void 0!==r.insert){const o=e||"string"!=typeof r.insert||n!==t.length-1||null!==i.right||"\n"!==r.insert.slice(-1)?r.insert:r.insert.slice(0,-1);("string"!=typeof o||o.length>0)&&er(s,this,i,o,r.attributes||{})}else void 0!==r.retain?sr(s,this,i,r.retain,r.attributes||{}):void 0!==r.delete&&nr(s,i,r.delete)}})):this._pending.push((()=>this.applyDelta(t)))}toDelta(t,e,s){const i=[],n=new Map,r=this.doc;let o="",h=this._start;function l(){if(o.length>0){const t={};let e=!1;n.forEach(((s,i)=>{e=!0,t[i]=s}));const s={insert:o};e&&(s.attributes=t),i.push(s),o=""}}return hn(r,(r=>{for(t&&Hi(r,t),e&&Hi(r,e);null!==h;){if(Bi(h,t)||void 0!==e&&Bi(h,e))switch(h.content.constructor){case xr:{const i=n.get("ychange");void 0===t||Bi(h,t)?void 0===e||Bi(h,e)?void 0!==i&&(l(),n.delete("ychange")):void 0!==i&&i.user===h.id.client&&"added"===i.state||(l(),n.set("ychange",s?s("added",h.id):{type:"added"})):void 0!==i&&i.user===h.id.client&&"removed"===i.state||(l(),n.set("ychange",s?s("removed",h.id):{type:"removed"})),o+=h.content.str;break}case Er:case br:{l();const t={insert:h.content.getContent()[0]};if(n.size>0){const e={};t.attributes=e,n.forEach(((t,s)=>{e[s]=t}))}i.push(t);break}case mr:Bi(h,t)&&(l(),Xn(n,h.content))}h=h.right}l()}),Hi),i}insert(t,e,s){if(e.length<=0)return;const i=this.doc;null!==i?hn(i,(i=>{const n=Zn(i,this,t);s||(s={},n.currentAttributes.forEach(((t,e)=>{s[e]=t}))),er(i,this,n,e,s)})):this._pending.push((()=>this.insert(t,e,s)))}insertEmbed(t,e,s={}){const i=this.doc;null!==i?hn(i,(i=>{const n=Zn(i,this,t);er(i,this,n,e,s)})):this._pending.push((()=>this.insertEmbed(t,e,s)))}delete(t,e){if(0===e)return;const s=this.doc;null!==s?hn(s,(s=>{nr(s,Zn(s,this,t),e)})):this._pending.push((()=>this.delete(t,e)))}format(t,e,s){if(0===e)return;const i=this.doc;null!==i?hn(i,(i=>{const n=Zn(i,this,t);null!==n.right&&sr(i,this,n,e,s)})):this._pending.push((()=>this.format(t,e,s)))}removeAttribute(t){null!==this.doc?hn(this.doc,(e=>{In(e,this,t)})):this._pending.push((()=>this.removeAttribute(t)))}setAttribute(t,e){null!==this.doc?hn(this.doc,(s=>{zn(s,this,t,e)})):this._pending.push((()=>this.setAttribute(t,e)))}getAttribute(t){return jn(this,t)}getAttributes(t){return Ln(this)}_write(t){t.writeTypeRef(Cr)}}class hr{constructor(t,e=(()=>!0)){this._filter=e,this._root=t,this._currentNode=t._start,this._firstCall=!0}[Symbol.iterator](){return this}next(){let t=this._currentNode,e=t&&t.content&&t.content.type;if(null!==t&&(!this._firstCall||t.deleted||!this._filter(e)))do{if(e=t.content.type,t.deleted||e.constructor!==cr&&e.constructor!==lr||null===e._start)for(;null!==t;){if(null!==t.right){t=t.right;break}t=t.parent===this._root?null:t.parent._item}else t=e._start}while(null!==t&&(t.deleted||!this._filter(t.content.type)));return this._firstCall=!1,null===t?{value:void 0,done:!0}:(this._currentNode=t,{value:t.content.type,done:!1})}}class lr extends An{constructor(){super(),this._prelimContent=[]}get firstChild(){const t=this._first;return t?t.content.getContent()[0]:null}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new lr}clone(){const t=new lr;return t.insert(0,this.toArray().map((t=>t instanceof An?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}createTreeWalker(t){return new hr(this,t)}querySelector(t){t=t.toUpperCase();const e=new hr(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)).next();return e.done?null:e.value}querySelectorAll(t){return t=t.toUpperCase(),Array.from(new hr(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)))}_callObserver(t,e){Mn(this,t,new ar(this,e,t))}toString(){return On(this,(t=>t.toString())).join("")}toJSON(){return this.toString()}toDOM(t=document,e={},s){const i=t.createDocumentFragment();return void 0!==s&&s._createAssociation(i,this),Wn(this,(n=>{i.insertBefore(n.toDOM(t,e,s),null)})),i}insert(t,e){null!==this.doc?hn(this.doc,(s=>{Nn(s,this,t,e)})):this._prelimContent.splice(t,0,...e)}insertAfter(t,e){if(null!==this.doc)hn(this.doc,(s=>{const i=t&&t instanceof An?t._item:t;Tn(s,this,i,e)}));else{const s=this._prelimContent,i=null===t?0:s.findIndex((e=>e===t))+1;if(0===i&&null!==t)throw Ns("Reference item not found");s.splice(i,0,...e)}}delete(t,e=1){null!==this.doc?hn(this.doc,(s=>{Dn(s,this,t,e)})):this._prelimContent.splice(t,e)}toArray(){return _n(this)}push(t){this.insert(this.length,t)}unshift(t){this.insert(0,t)}get(t){return En(this,t)}slice(t=0,e=this.length){return Cn(this,t,e)}forEach(t){Wn(this,t)}_write(t){t.writeTypeRef(Wr)}}class cr extends lr{constructor(t="UNDEFINED"){super(),this.nodeName=t,this._prelimAttrs=new Map}get nextSibling(){const t=this._item?this._item.next:null;return t?t.content.type:null}get prevSibling(){const t=this._item?this._item.prev:null;return t?t.content.type:null}_integrate(t,e){super._integrate(t,e),this._prelimAttrs.forEach(((t,e)=>{this.setAttribute(e,t)})),this._prelimAttrs=null}_copy(){return new cr(this.nodeName)}clone(){const t=new cr(this.nodeName),e=this.getAttributes();for(const s in e)t.setAttribute(s,e[s]);return t.insert(0,this.toArray().map((t=>t instanceof An?t.clone():t))),t}toString(){const t=this.getAttributes(),e=[],s=[];for(const e in t)s.push(e);s.sort();const i=s.length;for(let n=0;n<i;n++){const i=s[n];e.push(i+'="'+t[i]+'"')}const n=this.nodeName.toLocaleLowerCase();return`<${n}${e.length>0?" "+e.join(" "):""}>${super.toString()}</${n}>`}removeAttribute(t){null!==this.doc?hn(this.doc,(e=>{In(e,this,t)})):this._prelimAttrs.delete(t)}setAttribute(t,e){null!==this.doc?hn(this.doc,(s=>{zn(s,this,t,e)})):this._prelimAttrs.set(t,e)}getAttribute(t){return jn(this,t)}hasAttribute(t){return Pn(this,t)}getAttributes(t){return Ln(this)}toDOM(t=document,e={},s){const i=t.createElement(this.nodeName),n=this.getAttributes();for(const t in n)i.setAttribute(t,n[t]);return Wn(this,(n=>{i.appendChild(n.toDOM(t,e,s))})),void 0!==s&&s._createAssociation(i,this),i}_write(t){t.writeTypeRef(_r),t.writeKey(this.nodeName)}}class ar extends yn{constructor(t,e,s){super(t,s),this.childListChanged=!1,this.attributesChanged=new Set,e.forEach((t=>{null===t?this.childListChanged=!0:this.attributesChanged.add(t)}))}}class ur extends Gn{constructor(t){super(),this.hookName=t}_copy(){return new ur(this.hookName)}clone(){const t=new ur(this.hookName);return this.forEach(((e,s)=>{t.set(s,e)})),t}toDOM(t=document,e={},s){const i=e[this.hookName];let n;return n=void 0!==i?i.createDom(this):document.createElement(this.hookName),n.setAttribute("data-yjs-hook",this.hookName),void 0!==s&&s._createAssociation(n,this),n}_write(t){t.writeTypeRef(Or),t.writeKey(this.hookName)}}class dr extends or{get nextSibling(){const t=this._item?this._item.next:null;return t?t.content.type:null}get prevSibling(){const t=this._item?this._item.prev:null;return t?t.content.type:null}_copy(){return new dr}clone(){const t=new dr;return t.applyDelta(this.toDelta()),t}toDOM(t=document,e,s){const i=t.createTextNode(this.toString());return void 0!==s&&s._createAssociation(i,this),i}toString(){return this.toDelta().map((t=>{const e=[];for(const s in t.attributes){const i=[];for(const e in t.attributes[s])i.push({key:e,value:t.attributes[s][e]});i.sort(((t,e)=>t.key<e.key?-1:1)),e.push({nodeName:s,attrs:i})}e.sort(((t,e)=>t.nodeName<e.nodeName?-1:1));let s="";for(let t=0;t<e.length;t++){const i=e[t];s+=`<${i.nodeName}`;for(let t=0;t<i.attrs.length;t++){const e=i.attrs[t];s+=` ${e.key}="${e.value}"`}s+=">"}s+=t.insert;for(let t=e.length-1;t>=0;t--)s+=`</${e[t].nodeName}>`;return s})).join("")}toJSON(){return this.toString()}_write(t){t.writeTypeRef(Ur)}}class fr{constructor(t,e){this.id=t,this.length=e}get deleted(){throw Ds()}mergeWith(t){return!1}write(t,e,s){throw Ds()}integrate(t,e){throw Ds()}}class wr extends fr{get deleted(){return!0}delete(){}mergeWith(t){return this.constructor===t.constructor&&(this.length+=t.length,!0)}integrate(t,e){e>0&&(this.id.clock+=e,this.length-=e),qi(t.doc.store,this)}write(t,e){t.writeInfo(0),t.writeLen(this.length-e)}getMissing(t,e){return null}}class pr{constructor(t){this.content=t}getLength(){return 1}getContent(){return[this.content]}isCountable(){return!0}copy(){return new pr(this.content)}splice(t){throw Ds()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeBuf(this.content)}getRef(){return 3}}class gr{constructor(t){this.len=t}getLength(){return this.len}getContent(){return[]}isCountable(){return!1}copy(){return new gr(this.len)}splice(t){const e=new gr(this.len-t);return this.len=t,e}mergeWith(t){return this.len+=t.len,!0}integrate(t,e){fi(t.deleteSet,e.id.client,e.id.clock,this.len),e.markDeleted()}delete(t){}gc(t){}write(t,e){t.writeLen(this.len-e)}getRef(){return 1}}const vr=(t,e)=>new bi({guid:t,...e,shouldLoad:e.shouldLoad||e.autoLoad||!1});class yr{constructor(t){t._item&&console.error("This document was already integrated as a sub-document. You should create a second instance instead with the same guid."),this.doc=t;const e={};this.opts=e,t.gc||(e.gc=!1),t.autoLoad&&(e.autoLoad=!0),null!==t.meta&&(e.meta=t.meta)}getLength(){return 1}getContent(){return[this.doc]}isCountable(){return!0}copy(){return new yr(vr(this.doc.guid,this.opts))}splice(t){throw Ds()}mergeWith(t){return!1}integrate(t,e){this.doc._item=e,t.subdocsAdded.add(this.doc),this.doc.shouldLoad&&t.subdocsLoaded.add(this.doc)}delete(t){t.subdocsAdded.has(this.doc)?t.subdocsAdded.delete(this.doc):t.subdocsRemoved.add(this.doc)}gc(t){}write(t,e){t.writeString(this.doc.guid),t.writeAny(this.opts)}getRef(){return 9}}class br{constructor(t){this.embed=t}getLength(){return 1}getContent(){return[this.embed]}isCountable(){return!0}copy(){return new br(this.embed)}splice(t){throw Ds()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeJSON(this.embed)}getRef(){return 5}}class mr{constructor(t,e){this.key=t,this.value=e}getLength(){return 1}getContent(){return[]}isCountable(){return!1}copy(){return new mr(this.key,this.value)}splice(t){throw Ds()}mergeWith(t){return!1}integrate(t,e){e.parent._searchMarker=null}delete(t){}gc(t){}write(t,e){t.writeKey(this.key),t.writeJSON(this.value)}getRef(){return 6}}class kr{constructor(t){this.arr=t}getLength(){return this.arr.length}getContent(){return this.arr}isCountable(){return!0}copy(){return new kr(this.arr)}splice(t){const e=new kr(this.arr.slice(t));return this.arr=this.arr.slice(0,t),e}mergeWith(t){return this.arr=this.arr.concat(t.arr),!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){const s=this.arr.length;t.writeLen(s-e);for(let i=e;i<s;i++){const e=this.arr[i];t.writeString(void 0===e?"undefined":JSON.stringify(e))}}getRef(){return 2}}class $r{constructor(t){this.arr=t}getLength(){return this.arr.length}getContent(){return this.arr}isCountable(){return!0}copy(){return new $r(this.arr)}splice(t){const e=new $r(this.arr.slice(t));return this.arr=this.arr.slice(0,t),e}mergeWith(t){return this.arr=this.arr.concat(t.arr),!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){const s=this.arr.length;t.writeLen(s-e);for(let i=e;i<s;i++){const e=this.arr[i];t.writeAny(e)}}getRef(){return 8}}class xr{constructor(t){this.str=t}getLength(){return this.str.length}getContent(){return this.str.split("")}isCountable(){return!0}copy(){return new xr(this.str)}splice(t){const e=new xr(this.str.slice(t));this.str=this.str.slice(0,t);const s=this.str.charCodeAt(t-1);return s>=55296&&s<=56319&&(this.str=this.str.slice(0,t-1)+"�",e.str="�"+e.str.slice(1)),e}mergeWith(t){return this.str+=t.str,!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeString(0===e?this.str:this.str.slice(e))}getRef(){return 4}}const Sr=[t=>new Hn,t=>new Gn,t=>new or,t=>new cr(t.readKey()),t=>new lr,t=>new ur(t.readKey()),t=>new dr],Mr=0,Ar=1,Cr=2,_r=3,Wr=4,Or=5,Ur=6;class Er{constructor(t){this.type=t}getLength(){return 1}getContent(){return[this.type]}isCountable(){return!0}copy(){return new Er(this.type._copy())}splice(t){throw Ds()}mergeWith(t){return!1}integrate(t,e){this.type._integrate(t.doc,e)}delete(t){let e=this.type._start;for(;null!==e;)e.deleted?t._mergeStructs.push(e):e.delete(t),e=e.right;this.type._map.forEach((e=>{e.deleted?t._mergeStructs.push(e):e.delete(t)})),t.changed.delete(this.type)}gc(t){let e=this.type._start;for(;null!==e;)e.gc(t,!0),e=e.right;this.type._start=null,this.type._map.forEach((e=>{for(;null!==e;)e.gc(t,!0),e=e.left})),this.type._map=new Map}write(t,e){this.type._write(t)}getRef(){return 7}}const Tr=(t,e,s)=>{const{client:i,clock:n}=e.id,r=new Rr(ji(i,n+s),e,ji(i,n+s-1),e.right,e.rightOrigin,e.parent,e.parentSub,e.content.splice(s));return e.deleted&&r.markDeleted(),e.keep&&(r.keep=!0),null!==e.redone&&(r.redone=ji(e.redone.client,e.redone.clock+s)),e.right=r,null!==r.right&&(r.right.left=r),t._mergeStructs.push(r),null!==r.parentSub&&null===r.right&&r.parent._map.set(r.parentSub,r),e.length=s,r};class Rr extends fr{constructor(t,e,s,i,n,r,o,h){super(t,h.getLength()),this.origin=s,this.left=e,this.right=i,this.rightOrigin=n,this.parent=r,this.parentSub=o,this.redone=null,this.content=h,this.info=this.content.isCountable()?2:0}set marker(t){(8&this.info)>0!==t&&(this.info^=8)}get marker(){return(8&this.info)>0}get keep(){return(1&this.info)>0}set keep(t){this.keep!==t&&(this.info^=1)}get countable(){return(2&this.info)>0}get deleted(){return(4&this.info)>0}set deleted(t){this.deleted!==t&&(this.info^=4)}markDeleted(){this.info|=4}getMissing(t,e){if(this.origin&&this.origin.client!==this.id.client&&this.origin.clock>=Ki(e,this.origin.client))return this.origin.client;if(this.rightOrigin&&this.rightOrigin.client!==this.id.client&&this.rightOrigin.clock>=Ki(e,this.rightOrigin.client))return this.rightOrigin.client;if(this.parent&&this.parent.constructor===Ii&&this.id.client!==this.parent.client&&this.parent.clock>=Ki(e,this.parent.client))return this.parent.client;if(this.origin&&(this.left=Qi(t,e,this.origin),this.origin=this.left.lastId),this.rightOrigin&&(this.right=Xi(t,this.rightOrigin),this.rightOrigin=this.right.id),(this.left&&this.left.constructor===wr||this.right&&this.right.constructor===wr)&&(this.parent=null),this.parent){if(this.parent.constructor===Ii){const t=Zi(e,this.parent);t.constructor===wr?this.parent=null:this.parent=t.content.type}}else this.left&&this.left.constructor===Rr&&(this.parent=this.left.parent,this.parentSub=this.left.parentSub),this.right&&this.right.constructor===Rr&&(this.parent=this.right.parent,this.parentSub=this.right.parentSub);return null}integrate(t,e){if(e>0&&(this.id.clock+=e,this.left=Qi(t,t.doc.store,ji(this.id.client,this.id.clock-1)),this.origin=this.left.lastId,this.content=this.content.splice(e),this.length-=e),this.parent){if(!this.left&&(!this.right||null!==this.right.left)||this.left&&this.left.right!==this.right){let e,s=this.left;if(null!==s)e=s.right;else if(null!==this.parentSub)for(e=this.parent._map.get(this.parentSub)||null;null!==e&&null!==e.left;)e=e.left;else e=this.parent._start;const i=new Set,n=new Set;for(;null!==e&&e!==this.right;){if(n.add(e),i.add(e),zi(this.origin,e.origin)){if(e.id.client<this.id.client)s=e,i.clear();else if(zi(this.rightOrigin,e.rightOrigin))break}else{if(null===e.origin||!n.has(Zi(t.doc.store,e.origin)))break;i.has(Zi(t.doc.store,e.origin))||(s=e,i.clear())}e=e.right}this.left=s}if(null!==this.left){const t=this.left.right;this.right=t,this.left.right=this}else{let t;if(null!==this.parentSub)for(t=this.parent._map.get(this.parentSub)||null;null!==t&&null!==t.left;)t=t.left;else t=this.parent._start,this.parent._start=this;this.right=t}null!==this.right?this.right.left=this:null!==this.parentSub&&(this.parent._map.set(this.parentSub,this),null!==this.left&&this.left.delete(t)),null===this.parentSub&&this.countable&&!this.deleted&&(this.parent._length+=this.length),qi(t.doc.store,this),this.content.integrate(t,this),nn(t,this.parent,this.parentSub),(null!==this.parent._item&&this.parent._item.deleted||null!==this.parentSub&&null!==this.right)&&this.delete(t)}else new wr(this.id,this.length).integrate(t,0)}get next(){let t=this.right;for(;null!==t&&t.deleted;)t=t.right;return t}get prev(){let t=this.left;for(;null!==t&&t.deleted;)t=t.left;return t}get lastId(){return 1===this.length?this.id:ji(this.id.client,this.id.clock+this.length-1)}mergeWith(t){if(this.constructor===t.constructor&&zi(t.origin,this.lastId)&&this.right===t&&zi(this.rightOrigin,t.rightOrigin)&&this.id.client===t.id.client&&this.id.clock+this.length===t.id.clock&&this.deleted===t.deleted&&null===this.redone&&null===t.redone&&this.content.constructor===t.content.constructor&&this.content.mergeWith(t.content)){const e=this.parent._searchMarker;return e&&e.forEach((e=>{e.p===t&&(e.p=this,!this.deleted&&this.countable&&(e.index-=this.length))})),t.keep&&(this.keep=!0),this.right=t.right,null!==this.right&&(this.right.left=this),this.length+=t.length,!0}return!1}delete(t){if(!this.deleted){const e=this.parent;this.countable&&null===this.parentSub&&(e._length-=this.length),this.markDeleted(),fi(t.deleteSet,this.id.client,this.id.clock,this.length),nn(t,e,this.parentSub),this.content.delete(t)}}gc(t,e){if(!this.deleted)throw Is();this.content.gc(t),e?((t,e,s)=>{const i=t.clients.get(e.id.client);i[Fi(i,e.id.clock)]=s})(t,this,new wr(this.id,this.length)):this.content=new gr(this.length)}write(t,e){const s=e>0?ji(this.id.client,this.id.clock+e-1):this.origin,i=this.rightOrigin,n=this.parentSub,r=31&this.content.getRef()|(null===s?0:128)|(null===i?0:64)|(null===n?0:32);if(t.writeInfo(r),null!==s&&t.writeLeftID(s),null!==i&&t.writeRightID(i),null===s&&null===i){const e=this.parent;if(void 0!==e._item){const s=e._item;if(null===s){const s=(t=>{for(const[e,s]of t.doc.share.entries())if(s===t)return e;throw Is()})(e);t.writeParentInfo(!0),t.writeString(s)}else t.writeParentInfo(!1),t.writeLeftID(s.id)}else e.constructor===String?(t.writeParentInfo(!0),t.writeString(e)):e.constructor===Ii?(t.writeParentInfo(!1),t.writeLeftID(e)):Is();null!==n&&t.writeString(n)}this.content.write(t,e)}}const Nr=(t,e)=>Dr[31&e](t),Dr=[()=>{Is()},t=>new gr(t.readLen()),t=>{const e=t.readLen(),s=[];for(let i=0;i<e;i++){const e=t.readString();"undefined"===e?s.push(void 0):s.push(JSON.parse(e))}return new kr(s)},t=>new pr(t.readBuf()),t=>new xr(t.readString()),t=>new br(t.readJSON()),t=>new mr(t.readKey(),t.readJSON()),t=>new Er(Sr[t.readTypeRef()](t)),t=>{const e=t.readLen(),s=[];for(let i=0;i<e;i++)s.push(t.readAny());return new $r(s)},t=>new yr(vr(t.readString(),t.readAny())),()=>{Is()}];class Ir extends fr{get deleted(){return!0}delete(){}mergeWith(t){return this.constructor===t.constructor&&(this.length+=t.length,!0)}integrate(t,e){Is()}write(t,e){t.writeInfo(10),ps(t.restEncoder,this.length-e)}getMissing(t,e){return null}}const zr="undefined"!=typeof window?window:"undefined"!=typeof global?global:{};async function jr(t,e,s){return t.pipeTo(new WritableStream({write:e}),{signal:s})}var Lr,Pr,Jr,Br;!0===zr["g"]&&console.error("Yjs was already imported. This breaks constructor checks and will lead to isssues!"),zr["g"]=!0;class Hr extends EventTarget{constructor(){super(),Lr.add(this),this.callouts=new Set,Pr.set(this,void 0),this.doc=new bi;const t=new TransformStream;i(this,Pr,t.writable.getWriter(),"f"),jr(t.readable,(t=>s(this,Lr,"m",Jr).call(this,t)))}get board(){return this.doc.getMap("board")}initialize_board(){this.doc.transact((()=>{this.board.set("width",30),this.board.set("height",30),this.board.set("bg",null),this.board.set("tokens",new Gn([])),this.board.set("order",new Hn)}))}async set_bg(t){const e=t?await s(this,Lr,"m",Br).call(this,t):null;this.apply({type:"bg",url:e})}async add_token(t,e){console.log("ADDING TOKEN");const i={id:crypto.randomUUID(),url:await s(this,Lr,"m",Br).call(this,t),...e};this.apply({type:"token-added",...i})}set_dim(t){this.apply({type:"grid-resized",dim:t})}async apply(t){await s(this,Pr,"f").write(t)}}Pr=new WeakMap,Lr=new WeakSet,Jr=function(t){console.log("handling event",t),this.doc.transact((()=>{switch(t.type){case"token-manipulated":for(let e of t.tokens){let t=this.board.get("tokens").get(e.id);if(void 0===t)return void console.error("Update received for nonexistant token",e.id);t.set("dim",e.dim),t.set("r",e.r),t.set("loc",e.loc)}break;case"token-added":let e={id:t.id,dim:t.dim,loc:t.loc,url:t.url,r:0};console.log(e),this.board.get("tokens").set(t.id,function(t){let e=new Gn;for(let[s,i]of Object.entries(t))e.set(s,i);return e}(e)),this.board.get("order").push([t.id]);break;case"grid-resized":this.board.set("width",t.dim[0]),this.board.set("height",t.dim[1]);break;case"token-removed":for(let e of t.ids)this.board.get("tokens").delete(e);let s=[];this.board.get("order").forEach(((e,i)=>t.ids.includes(e)&&s.push(i))),s.sort().reverse().forEach((t=>{this.board.get("order").delete(t)}));break;case"state-sync":case"token-reorder":break;case"bg":this.board.set("bg",t.url);break;case"callout":this.callouts.add(t.loc),setTimeout((()=>{this.callouts.delete(t.loc)}),1500)}}))},Br=async function(t){if("string"==typeof t)return t;let e=new URL(window.location.toString());e.search="";let s=await crypto.subtle.digest("SHA-1",await t.arrayBuffer()),i=btoa(String.fromCharCode(...new Uint8Array(s)));console.log("RESOURCE ID: ",i),e.pathname=`/resources/${i}`;let n=await caches.open("resources");return await n.put(e,new Response(t)),e.toString()};
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Vr=t=>{if(t.shouldConnect&&null===t.ws){const e=new WebSocket(t.url),s=t.binaryType;let i=null;s&&(e.binaryType=s),t.ws=e,t.connecting=!0,t.connected=!1,e.onmessage=e=>{t.lastMessageReceived=Rs();const s=e.data,n="string"==typeof s?JSON.parse(s):s;n&&"pong"===n.type&&(clearTimeout(i),i=setTimeout(r,15e3)),t.emit("message",[n,t])};const n=e=>{null!==t.ws&&(t.ws=null,t.connecting=!1,t.connected?(t.connected=!1,t.emit("disconnect",[{type:"disconnect",error:e},t])):t.unsuccessfulReconnects++,setTimeout(Vr,Ee(1200*Ue(t.unsuccessfulReconnects+1),2500),t)),clearTimeout(i)},r=()=>{t.ws===e&&t.send({type:"ping"})};e.onclose=()=>n(null),e.onerror=t=>n(t),e.onopen=()=>{t.lastMessageReceived=Rs(),t.connecting=!1,t.connected=!0,t.unsuccessfulReconnects=0,t.emit("connect",[{type:"connect"},t]),i=setTimeout(r,15e3)}}};class Gr extends _e{constructor(t,{binaryType:e}={}){super(),this.url=t,this.ws=null,this.binaryType=e||null,this.connected=!1,this.connecting=!1,this.unsuccessfulReconnects=0,this.lastMessageReceived=0,this.shouldConnect=!0,this._checkInterval=setInterval((()=>{this.connected&&3e4<Rs()-this.lastMessageReceived&&this.ws.close()}),15e3),Vr(this)}send(t){this.ws&&this.ws.send(JSON.stringify(t))}destroy(){clearInterval(this._checkInterval),this.disconnect(),super.destroy()}disconnect(){this.shouldConnect=!1,null!==this.ws&&this.ws.close()}connect(){this.shouldConnect=!0,this.connected||null!==this.ws||Vr(this)}}var Kr,qr,Fr,Zr,Yr;class Xr extends _e{constructor(){super(...arguments),Kr.set(this,"opening")}get current(){return s(this,Kr,"f")}set(t){let e=s(this,Kr,"f")!==t;i(this,Kr,t,"f"),e&&this.emit("status",[])}connected(){return new Promise(((t,e)=>{let i=()=>{"closed"===s(this,Kr,"f")&&e("closed"),"open"===s(this,Kr,"f")&&t()};"opening"===s(this,Kr,"f")?this.once("status",i):i()}))}}Kr=new WeakMap;const Qr={iceServers:[{urls:["stun:stun1.l.google.com:19302","stun:stun2.l.google.com:19302"]}]};class to extends _e{constructor(t,e=!1,i="wss://battlegrid-signaling.herokuapp.com"){super(),qr.add(this),this.peers=new Map,this.status=new Xr,Yr.set(this,(async t=>{if(console.log("ONMESSAGE",t),"error-not-exists"===t.type){return this.peers.get(t.destination)?.peer.close(),void console.log("closing")}let e=this.peers.get(t.from);if(!e){if("offer"!==t.description?.type)return;e=s(this,qr,"m",Fr).call(this,t.from,!1)}let i=e.peer;if(t.description){const n=!e.making_offer&&("stable"==i.signalingState||e.isSettingRemoteAnswerPending),r="offer"==t.description.type&&!n;if(e.ignore_offer=!e.polite&&r,e.ignore_offer)return;e.isSettingRemoteAnswerPending="answer"===t.description.type,await i.setRemoteDescription(t.description),e.isSettingRemoteAnswerPending=!1,"offer"===t.description.type&&(await i.setLocalDescription(),await s(this,qr,"m",Zr).call(this,{type:"signal",from:this.peer_id,to:t.from,description:i.localDescription})),this.emit("peer",[t.from,i])}else if(t.candidate)try{await i.addIceCandidate(t.candidate)}catch(t){if(!e.ignore_offer)throw t}}));let n=new URL(i);n.pathname=t,this.allow_connections=e,this.peer_id=t,this.socket=new Gr(n.toString()),this.status.set("opening"),this.socket.on("connect",(()=>this.status.set("open"))),this.socket.on("disconnect",(()=>this.status.set("opening"))),this.socket.on("message",s(this,Yr,"f"))}initiate(t){return s(this,qr,"m",Fr).call(this,t,!1).peer}shutdown(){this.socket.destroy(),this.peers.clear(),this.status.destroy()}}Yr=new WeakMap,qr=new WeakSet,Fr=function(t,e){let i=new RTCPeerConnection(Qr),n={polite:e,making_offer:!1,ignore_offer:!1,isSettingRemoteAnswerPending:!1,peer:i};return this.peers.set(t,n),i.onicecandidate=async({candidate:e})=>{await s(this,qr,"m",Zr).call(this,{type:"signal",from:this.peer_id,to:t,candidate:e})},i.onnegotiationneeded=async()=>{console.log("negotiation needed!");try{n.making_offer=!0,await i.setLocalDescription(),await s(this,qr,"m",Zr).call(this,{type:"signal",from:this.peer_id,to:t,description:i.localDescription})}finally{n.making_offer=!1}},i.addEventListener("iceconnectionstatechange",(()=>{console.log("iceConnectionState",i.iceConnectionState),"closed"===i.iceConnectionState&&this.peers.delete(t)})),n},Zr=async function(t){await this.status.connected(),await this.socket.send(t)};const eo=t=>({readable:so(t),writable:io(t)}),so=t=>new ReadableStream({start(e){t.onmessage=({data:t})=>{e.enqueue(t)};t.addEventListener("close",(()=>{0===t.bufferedAmount?(console.log("Underlying datachannel closed"),e.close()):t.addEventListener("bufferedamountlow",(()=>{console.log("Underlying datachannel closed"),e.close()}))}),{once:!0})},cancel(){t.close()}}),io=t=>{let e;return t.addEventListener("error",(t=>console.log("DC ERROR",t))),new WritableStream({start(s){const i=()=>{console.log("stream closed by dc ending",t.label),s.error("Closed foo"),t.removeEventListener("close",i)};t.addEventListener("close",i),t.onopen=()=>e&&e(),t.onbufferedamountlow=()=>e&&e()},async write(s){("connecting"===t.readyState||t.bufferedAmount>t.bufferedAmountLowThreshold)&&(console.log("waiting for resumptoin..."),await new Promise(((t,s)=>e=t)),console.log("resumed!")),t.send(s)},abort(){console.log("aborted dc by stream"),t.close()},close(){console.log("closed dc by stream"),t.close()}},new CountQueuingStrategy({highWaterMark:1}))};async function no(t){let e=t.readable.getReader(),s=await e.read();console.log("header? ",s);let i=JSON.parse(s.value);e.releaseLock();let n=await async function(t,e){let s=[];return console.log("collectin blob"),await jr(t,(t=>{console.log("CHUNK?"),s.push(t)})),console.log("got all bytes"),new Blob(s,{type:e})}(t.readable,i?.type);return{blob:n}}async function ro(t,e,s=262144){console.log("USING MAX MESSAGE SIZE: ",s);let i=t.writable.getWriter();await i.write(JSON.stringify({type:e.blob.type})),i.releaseLock(),await function(t,e){let s=0;return new ReadableStream({async pull(i){if(s>=t.size)return i.close();try{i.enqueue(new Uint8Array(await t.slice(s,Math.min(s+e,t.size)).arrayBuffer()))}catch(t){console.log("Error enqueue slice",t)}s+=e}},new CountQueuingStrategy({highWaterMark:5}))}(e.blob,s).pipeTo(t.writable,{preventClose:!0})}var oo,ho,lo,co,ao,uo,fo,wo,po,go,vo,yo,bo;class mo{constructor(t,e){this.status=new Xr,oo.set(this,void 0),this.ondatachannel=t=>{},this.id=t,this.peer=e;let s=e.createDataChannel("events",{negotiated:!0,id:1});s.binaryType="arraybuffer";let{readable:n,writable:r}=eo(s);this.events=n.pipeThrough(new TransformStream({transform(t,e){console.log("chunk",t),e.enqueue(new Uint8Array(t))}})),i(this,oo,r.getWriter(),"f");let o=e.close;e.close=()=>{this.status.set("closed"),o.bind(e)()},e.addEventListener("iceconnectionstatechange",(()=>{switch(console.log("STATE CHANGE"),e.iceConnectionState){case"closed":this.status.set("closed");break;case"connected":this.status.set("open");break;default:this.status.set("opening")}})),e.ondatachannel=t=>this.ondatachannel(t)}write_event(t){return s(this,oo,"f").write(t)}request(t){return this.datachannel(t,{protocol:"request-resource"}).then(eo).then(no)}datachannel(t,e){return new Promise(((s,i)=>{let n=this.peer.createDataChannel(t,e);n.addEventListener("open",(()=>{n.removeEventListener("error",i),s(n)}),{once:!0}),n.addEventListener("error",i,{once:!0})}))}}oo=new WeakMap;class ko{constructor(t,e){ho.add(this),lo.set(this,void 0),co.set(this,void 0),ao.set(this,void 0),uo.set(this,void 0),this.forward_updates=(t,e)=>{"remote"!==e&&s(this,co,"f").write_event(t)},i(this,uo,new to(crypto.randomUUID()),"f"),i(this,lo,e,"f"),i(this,ao,t,"f"),s(this,lo,"f").doc.on("update",this.forward_updates),i(this,co,s(this,ho,"m",fo).call(this),"f");let n=caches.open("resources");navigator.serviceWorker.onmessage=async t=>{let e=t.data.id;try{let t=await s(this,co,"f").request(e),i=new Response(t.blob);await(await n).put(`/resources/${e}`,i),console.log("COMMUNICATING WITH SERVICE WORKER"),navigator.serviceWorker.controller.postMessage({type:"found",id:e})}catch(t){console.error("Error fetching resource: ",t),navigator.serviceWorker.controller.postMessage({type:"notfound",id:e,error:t})}}}get status(){return s(this,co,"f").status}async reconnect(){i(this,co,s(this,ho,"m",fo).call(this),"f")}async shutdown(){s(this,lo,"f").doc.off("update",this.forward_updates),s(this,co,"f").peer.close(),console.log("Waiting for signaler shutdown"),await s(this,uo,"f").shutdown(),console.log("signaler dead"),navigator.serviceWorker.onmessage=null}}lo=new WeakMap,co=new WeakMap,ao=new WeakMap,uo=new WeakMap,ho=new WeakSet,fo=function(){let t=new mo(s(this,uo,"f").peer_id,s(this,uo,"f").initiate(s(this,ao,"f")));return jr(t.events,(t=>_i(s(this,lo,"f").doc,t,"remote"))),t};class $o{constructor(t){wo.add(this),po.set(this,void 0),this.clients=new Set,go.set(this,void 0),vo.set(this,((t,e)=>{let i=new mo(t,e);this.clients.add(i),i.write_event(Oi(s(this,po,"f").doc)),jr(i.events,(e=>{_i(s(this,po,"f").doc,e,t)})),e.ondatachannel=async t=>{console.log("INCOMING DC",t.channel);const i=t.channel;try{await(r="open",o=i,new Promise((t=>{o.addEventListener(r,(e=>t(e)),{once:!0})}))),console.log("new dc",i),"request-resource"===i.protocol&&(await ro(eo(i),await s(this,wo,"m",yo).call(this,i.label),e.sctp?.maxMessageSize||262144),console.log("FLUSHING"),await(n=i,new Promise(((t,e)=>{const s=()=>0===n.bufferedAmount?t():"closed"===n.readyState||"closing"===n.readyState?e("Buffer closed before flushing"):void 0;n.bufferedAmountLowThreshold=0,n.addEventListener("bufferedamountlow",s),s()}))))}finally{i.close()}var n,r,o}})),this.signaler=new to(crypto.randomUUID(),!0),i(this,po,t,"f"),i(this,go,new AbortController,"f"),this.signaler.on("peer",s(this,vo,"f")),s(this,po,"f").doc.on("update",((t,e)=>{for(let s of this.clients)console.log("ECHO",s.id,e),s.id!==e&&s.write_event(t)}))}async shutdown(){for(let t of this.clients)t.peer.close();this.clients.clear(),s(this,go,"f").abort("Server shutting down"),await this.signaler.shutdown()}}po=new WeakMap,go=new WeakMap,vo=new WeakMap,wo=new WeakSet,yo=async function(t){let e=await(await caches.open("resources")).match(`/resources/${t}`);if(!e)throw`Requested unknown resource ${t}`;return{blob:await e.blob()}};let xo=class extends rt{constructor(){super(...arguments),this.text="",this.mousex=0,this.mousey=0,bo.set(this,(t=>{this.mousex=t.pageX,this.mousey=t.pageY}))}connectedCallback(){super.connectedCallback(),this.addEventListener("mousemove",s(this,bo,"f"))}disconnectedCallback(){this.removeEventListener("mousemove",s(this,bo,"f"))}render(){return console.log("Rendering"),z`<slot></slot><div id="message" style="${Vt({left:`${this.mousex+8}px`,top:`${this.mousey+10}px`})}">${this.text}</div>`}};bo=new WeakMap,xo.styles=c`:host{display:inline-block;position:relative;width:fit-content;height:fit-content}div{font-size:.8em;display:none;opacity:0;position:fixed;background:#000;color:#fff;border-radius:3px;padding:.25em .5em;white-space:nowrap;width:max-content}@keyframes appear{0%{opacity:0}100%{opacity:1}}:host(:hover) div{display:block;animation:appear 250ms linear forwards 750ms}`,e([ct()],xo.prototype,"text",void 0),e([at()],xo.prototype,"mousex",void 0),e([at()],xo.prototype,"mousey",void 0),xo=e([ht("with-tooltip")],xo);let So=class extends rt{constructor(){super(...arguments),this.status="local",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return z`<label class="switch"><with-tooltip text="${function(t){switch(t){case"open":return"Joinable";case"closed":return"Offline";case"opening":return"Not Joinable";case"local":return"Start hosting"}}(this.status)}"><input type="checkbox" @input="${this.toggle}" ?checked="${"local"!==this.status}"> <span class="slider round ${this.status}"><span class="on-space">Hosting</span> <span class="dot"></span> <span class="off-space">Offline</span></span></with-tooltip></label>`}};So.styles=c`.slider{display:inline-flex;flex-wrap:nowrap;height:1em;transition:.4s;padding:.2em;min-width:4.5em;cursor:pointer;background:#ccc}.open{background:#2196f3}.opening{background:#fdcb18}.opening>.on-space{color:#000}input{display:none}input:checked+.slider>.on-space{flex-grow:1;opacity:1}input:checked+.slider>.off-space{flex-grow:0!important;opacity:0}.off-space{opacity:1;flex-grow:1!important}.on-space{opacity:0;color:#fff;width:0}.off-space,.on-space{font-size:.8em}.slider>span{flex-grow:0;flex-basis:0;transition:.4s;overflow:hidden;text-align:center}.round{border-radius:1em}.dot{border-radius:1em;min-width:1em;height:1em;background:#fff}`,e([ct()],So.prototype,"status",void 0),So=e([ht("host-toggle")],So);let Mo=class extends rt{constructor(){super(...arguments),this.status="opening",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return z`<span class="slider round ${this.status}">${function(t){switch(t){case"open":return"Connected";case"closed":return"Disconnected";case"opening":return"Connecting"}}(this.status)}</span>`}};Mo.styles=c`.slider{height:1em;transition:.4s;padding:.2em;min-width:5em;cursor:pointer;color:#fff;font-size:.8em;align-items:baseline}.open{background:#2196f3}.opening{background:#fdcb18}.round{border-radius:1em}`,e([ct()],Mo.prototype,"status",void 0),Mo=e([ht("client-status")],Mo);const Ao=t=>{var i,n;class r extends t{constructor(){super(...arguments),i.set(this,(t=>{this.drag_location=[t.offsetX,t.offsetY],t.preventDefault()})),n.set(this,(t=>{this.drag_location=void 0}))}connectedCallback(){super.connectedCallback(),this.addEventListener("dragenter",s(this,i,"f")),this.addEventListener("dragover",s(this,i,"f")),this.addEventListener("drop",s(this,n,"f")),this.addEventListener("dragleave",s(this,n,"f"))}disconnectedCallback(){this.addEventListener("dragenter",s(this,i,"f")),this.removeEventListener("dragover",s(this,i,"f")),this.removeEventListener("dragleave",s(this,n,"f")),this.removeEventListener("drop",s(this,n,"f"))}}return i=new WeakMap,n=new WeakMap,e([at()],r.prototype,"drag_location",void 0),r};var Co;let _o=class extends(Ao(rt)){constructor(){super(...arguments),Co.set(this,(async t=>{zt(t);try{const e=await Lt(t);console.log("Emitting drop");let s=this.dispatchEvent(jt("token-drop",{loc:this.grid.snap([t.offsetX,t.offsetY]),dim:[this.grid.dim,this.grid.dim],img:e}));console.log("DISPATCH?",s)}catch(t){console.error(t)}}))}connectedCallback(){super.connectedCallback(),this.addEventListener("drop",s(this,Co,"f"))}render(){let t=this.drag_location?this.grid.snap(this.drag_location):void 0;return z`<div id="drop-hint" style="${Vt({visibility:void 0===t?"hidden":"visible",transform:t?`translate(${t[0]}px, ${t[1]}px)`:""})}"></div>`}};var Wo,Oo;Co=new WeakMap,_o.styles=c`:host{width:100%;height:100%;position:relative}#drop-hint{width:1em;height:1em;background:grey;position:absolute}`,_o=e([ht("drop-layer")],_o);let Uo=class extends rt{constructor(){super(...arguments),Wo.add(this),Oo.set(this,{snap:t=>[Eo(t[0]),Eo(t[1])],dim:24})}get screen_dim(){return Ot(this.grid_dim,24)}get grid_dim(){return[this.board.get("width"),this.board.get("height")]}render(){let[t,e]=this.screen_dim;return z`<p-p-z><div id="root" style="${Vt({width:`${t}px`,height:`${e}px`,padding:"20px",fontSize:"24px"})}"><div id="board"><svg style="width:100%;height:100%;position:absolute" viewBox="${"0 0 "+this.board.get("width")+" "+this.board.get("height")}"><defs><pattern id="horiz" x="${-.01}" y="${-.01}" width="100%" height="1" patternUnits="userSpaceOnUse"><rect class="gridline" width="100%" height="${.02}" fill="#d3d3d3" shape-rendering="geometricPrecision"></rect></pattern><pattern id="vert" x="${-.01}" y="${-.01}" width="1" height="100%" patternUnits="userSpaceOnUse"><rect class="gridline" width="${.02}" height="100%" fill="#d3d3d3" shape-rendering="geometric precision"></rect></pattern></defs><rect width="100%" height="100%" fill="url(#horiz)" opacity="0.75" pointer-events="none"></rect><rect width="100%" height="100%" fill="url(#vert)" opacity="0.75" pointer-events="none"></rect></svg> ${At(this.board.get("order").toJSON()??[],(t=>t),((t,e)=>{console.log("repeat!",t);let s=this.board.get("tokens").get(t);const[i,n]=_t(s.get("dim"),0),[r,o]=_t(s.get("loc"),0);return z`<div class="token" style="${Vt({width:i+"px",height:n+"px",backgroundImage:`url("${s.get("url")}")`,transform:`translate(${r}px, ${o}px)`})}"></div>`}))}<drop-layer class="full-bleed" .grid="${s(this,Oo,"f")}" @token-drop="${t=>console.log(t)}"></drop-layer></div></div></p-p-z>`}};Oo=new WeakMap,Wo=new WeakSet,Uo.styles=c`p-p-z{position:absolute;background-color:#ededf0;top:0;left:0;right:0;bottom:0}#board{width:100%;height:100%;border-radius:${l("6px")};background:#fff;position:relative;overflow:hidden;box-shadow:5px solid #dddddddd}.token{position:absolute;background-size:100% 100%}.full-bleed{position:absolute;inset:0}:host{position:relative;display:block;--selection-color:cornflowerblue;overflow:hidden}`,e([ct({attribute:!1})],Uo.prototype,"board",void 0),Uo=e([ht("html-canvas")],Uo);const Eo=t=>t-t%24,To=(t,e)=>Promise.race([t,new Promise(((t,s)=>setTimeout(s,e)))]);var Ro,No,Do,Io,zo;let jo=class extends rt{constructor(){super(...arguments),this.selection=new Set,this.host_pending=!1,this.client_pending=!1,this.game=new Hr,Ro.set(this,(()=>{this.game.set_dim(Et([1,1],[parseInt(this.width?.value)??0,parseInt(this.height?.value)??0]))})),No.set(this,(async()=>{console.log("new local..."),this.game.initialize_board(),await(this.client?.shutdown()),this.client&&this.client.status.off("status",this.requestUpdate),this.client=void 0,window.history.pushState(null,"",window.location.href.split("?")[0])})),Do.set(this,(()=>this.requestUpdate())),Io.set(this,(async()=>{try{this.client?.shutdown(),this.client=void 0,this.host_pending=!0,this.server=new $o(this.game),this.server.signaler.status.on("status",s(this,Do,"f")),console.log("WAITING"),await To(this.server.signaler.status.connected(),5e3),window.history.pushState({},"","?game="+this.server.signaler.peer_id),navigator.clipboard.writeText(window.location.toString())}catch(t){console.error(t),await s(this,zo,"f")}finally{this.host_pending=!1}})),zo.set(this,(async()=>{let t=this.server;this.server=void 0,await(t?.shutdown()),window.history.replaceState({},"",window.location.pathname)}))}render(){let t="closed"===this.client?.status.current?z`<div class="message error"><div><h1>Error connecting to remote grid</h1><button @click="${s(this,No,"f")}">New local grid</button></div></div>`:null,e=this.client_pending?z`<div class="message"><div><h1>Connecting to grid...</h1></div></div>`:null,i="closed"===this.client?.status.current?z`<div class="message"><div><h1>Disconnected from host</h1><button @click="${s(this,No,"f")}">Continue locally</button></div></div>`:null,n=t||e||i;return z`<section id="toolbar" class="group"><div class="group">${this.client?z`<client-status status="${this.client.status.current}"></client-status>`:z`<host-toggle status="${this.server?.signaler.status.current??"local"}" @enable="${s(this,Io,"f")}" @disable="${s(this,zo,"f")}"></host-toggle>`} <span>Grid: <input id="width" type="number" min="1" @input="${s(this,Ro,"f")}" .value="${this.game.board.get("width")+""}"> x <input id="height" type="number" min="1" @input="${s(this,Ro,"f")}" .value="${this.game.board.get("height")+""}"> </span>${1===this.selection.size?z`<div><button @click="${()=>this.game.apply({type:"token-reorder",id:Bt(this.selection),idx:"down"})}" ?disabled="${!0}">Move Down</button> <button @click="${()=>this.game.apply({type:"token-reorder",id:Bt(this.selection),idx:"up"})}" ?disabled="${!0}">Move Up</button></div>`:null}</div><div class="group"><buy-me-a-coffee class="right"></buy-me-a-coffee></div></section><html-canvas bg="${(t=>null!=t?t:P)(this.game.board.get("bg")??void 0)}" .selection="${this.selection}" width="${this.game.board.get("width")}" height="${this.game.board.get("height")}" .board="${this.game.board}" .callouts="${this.game.callouts}" @token-drop="${({detail:t})=>this.game.add_token(t.img,{loc:t.loc,r:0,dim:t.dim})}" @bg-drop="${({detail:t})=>this.game.set_bg(t)}" @token-select="${({detail:t})=>{this.selection=new Set(t)}}" @game-event="${({detail:t})=>this.game.apply(t)}"></html-canvas>${n}`}updated(t){t.has("client")&&(document.title="BattleGrid"+(this.client&&"open"===this.client.status.current?this.server?"- Hosting":"- Connected":""))}async connectedCallback(){super.connectedCallback(),console.log(this.game.board),this.game.doc.on("update",(()=>{console.log("UPDATEING");for(const t of this.selection)this.game.board.get("tokens").has(t)||this.selection.delete(t);this.requestUpdate(),console.log("CANVAS",this.canvas),this.canvas?.requestUpdate()})),this.game.doc.on("afterTransaction",(()=>{this.canvas?.requestUpdate()})),console.log("debug now please");let t=new URLSearchParams(window.location.search).get("game");if(!t)return await s(this,No,"f").call(this);try{console.log("new client"),this.client=new ko(t,this.game),this.client.status.on("status",(()=>this.requestUpdate())),console.log("waiting for connection"),this.client_pending=!0,await To(this.client.status.connected(),5e3),console.log("connected")}catch{console.log("giving up"),await s(this,No,"f").call(this)}finally{this.client_pending=!1}}};var Lo,Po,Jo,Bo,Ho;Ro=new WeakMap,No=new WeakMap,Do=new WeakMap,Io=new WeakMap,zo=new WeakMap,jo.styles=c`:host{width:100%;height:100%;display:grid;grid:"toolbar" 30px "viewport" minmax(0,1fr)/minmax(0,1fr);font-family:inherit;--ui-bg:#f9f9fa}.message{grid-area:1/1/3/1;display:grid;align-items:center;justify-items:center;background:#fff;z-index:2}.right{justify-self:end}html-canvas{grid-area:viewport;z-index:1}input[type=number]{width:3em}.group{display:flex;align-items:center;height:100%;flex-wrap:nowrap}#toolbar{grid-area:toolbar;box-shadow:0 0 4px gray;z-index:2;background:var(--ui-bg);justify-content:space-between;padding:0 1em;grid-template-rows:unset}.group img{width:1em;height:1em;object-fit:cover;display:inline-block}`,e([ft("#width",!0)],jo.prototype,"width",void 0),e([ft("#height",!0)],jo.prototype,"height",void 0),e([ft("html-canvas",!1)],jo.prototype,"canvas",void 0),e([at()],jo.prototype,"client",void 0),e([at()],jo.prototype,"server",void 0),e([at()],jo.prototype,"selection",void 0),e([at()],jo.prototype,"host_pending",void 0),e([at()],jo.prototype,"client_pending",void 0),jo=e([ht("bg-app")],jo);class Vo extends HTMLElement{constructor(){super(),Lo.add(this),this.state={z:1,scroll_pos:[0,0]},this.desired_state={z:1},this.origin=[0,0],this.vloc=[0,0],this.vdim=[0,0],this.cdim=[0,0],this.offset=[0,0],this.smooth=!1,Jo.set(this,new ResizeObserver((t=>{for(let e of t)if(e.target===this){this.vdim=[e.contentRect.width,e.contentRect.height];const t=this.getBoundingClientRect();this.vloc=[t.x,t.y]}else this.cdim=[e.contentRect.width,e.contentRect.height],s(this,Lo,"m",Po).call(this);this.center()}))),this.loop=async()=>{let t,e;for(;t=e,e=await Go();){if(!t)continue;let s=this.desired_state.z-this.state.z;if(0===s)continue;let i=e-t,n=this.smooth?Math.sign(s)*Math.min(.002*i*this.state.z,Math.abs(s)):s;this.state.z+=n,this.center(),this.state.scroll_pos=Et([0,0],Ct(Ot(this.origin,n),this.state.scroll_pos)),this.scrollTo({left:this.state.scroll_pos[0],top:this.state.scroll_pos[1]})}},this.zoom=(t,e)=>{this.desired_state.z=Math.min(4,Math.max(1,this.desired_state.z+e)),this.state.scroll_pos=[this.scrollLeft,this.scrollTop],this.origin=this.coordToLocal(t)},this.wheel=t=>{if(!t.ctrlKey)return;console.log(t.target),t.preventDefault();const e=t.deltaMode===WheelEvent.DOM_DELTA_LINE?10:1,s=Math.min(50,Math.max(-50,-t.deltaY*e)),i=.005*s*this.state.z;this.smooth=50===Math.abs(s),this.zoom([t.clientX,t.clientY],i),this.addEventListener},Bo.set(this,(t=>{console.log("zoom!",t.ctrlKey,t.key),t.ctrlKey&&("-"===t.key?(this.smooth=!0,this.zoom(this.coordToLocal(Ct(this.vloc,Ut(this.vdim,2))),-.2*this.state.z),zt(t)):"="===t.key?(this.smooth=!0,this.zoom(this.coordToLocal(Ct(this.vloc,Ut(this.vdim,2))),.2*this.state.z),zt(t)):"0"===t.key&&(this.smooth=!0,s(this,Lo,"m",Po).call(this)))})),Ho.set(this,{prev_scale:0,origin:[0,0],start:t=>{zt(t),s(this,Ho,"f").origin=this.coordToLocal([t.clientX,t.clientY]),s(this,Ho,"f").prev_scale=1},change:t=>{zt(t),this.zoom(s(this,Ho,"f").origin,this.state.z*(t.scale-s(this,Ho,"f").prev_scale)*1.5),s(this,Ho,"f").prev_scale=t.scale}}),this.root=this.attachShadow({mode:"open"}),this.root.appendChild(Vo.template().content.cloneNode(!0)),this.container=this.root.getElementById("container"),s(this,Jo,"f").observe(this),this.root.querySelector("slot").onslotchange=({target:t})=>{let e=t.assignedElements()[0];s(this,Jo,"f").observe(e),this.smooth=!1},this.addEventListener("scroll",(()=>this.state.scroll_pos=[this.scrollLeft,this.scrollTop])),this.addEventListener("gesturestart",s(this,Ho,"f").start),this.addEventListener("gesturechange",s(this,Ho,"f").change),document.addEventListener("keydown",s(this,Bo,"f"),{passive:!1})}center(){this.offset=Et([0,0],Ot(Wt(this.vdim,Ot(this.cdim,this.state.z)),.5)),this.container.style.transform=`translate(${this.offset[0]}px, ${this.offset[1]}px) scale(${this.state.z})`}connectedCallback(){this.loop(),this.addEventListener("wheel",this.wheel,{passive:!1,capture:!0})}coordToLocal(t){const e=Ct(Wt(t,this.vloc),this.state.scroll_pos);return Ut(Wt(e,this.offset),this.state.z)}static template(){let t=document.createElement("template");return t.innerHTML='\n            <style>\n                :host {\n                    position: relative;\n                    display: block;\n                    overflow: auto; \n                }\n                #container {\n                    transform-origin: 0 0;\n                    display: block;\n                    width: fit-content;\n                    height: fit-content;\n                }\n            </style>\n                <div id="container">\n                    <slot id="content"></slot>\n                </div>\n            </div>\n        ',t}}Jo=new WeakMap,Bo=new WeakMap,Ho=new WeakMap,Lo=new WeakSet,Po=function(){let t=this.root.querySelector("slot").assignedElements()[0],e=this.getBoundingClientRect();this.vdim=[e.width,e.height],e=t.getBoundingClientRect(),this.cdim=[e.width,e.height];const s=Math.max(1,Math.min(4,...Ot(((t,e)=>[t[0]/e[0],t[1]/e[1]])(this.vdim,this.cdim),.95)));this.zoom([0,0],s-this.state.z)};const Go=()=>new Promise((t=>window.requestAnimationFrame(t)));customElements.define("p-p-z",Vo),await navigator.serviceWorker.register("./service-worker.js"),document.body.addEventListener("wheel",(t=>{t.ctrlKey&&t.preventDefault()}),{passive:!1});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
