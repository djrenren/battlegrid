const t=()=>{document.documentElement.style.setProperty("--app-height",`${window.innerHeight}px`)};function e(t,e,i,s){var n,o=arguments.length,r=o<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,s);else for(var h=t.length-1;h>=0;h--)(n=t[h])&&(r=(o<3?n(r):o>3?n(e,i,r):n(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}function i(t,e,i,s){if("a"===i&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?s:"a"===i?s.call(t):s?s.value:e.get(t)}function s(t,e,i,s,n){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?n.call(t,i):n?n.value=i:e.set(t,i),i
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}window.addEventListener("resize",t),t();const n=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,o=Symbol(),r=new WeakMap;class h{constructor(t,e,i){if(this._$cssResult$=!0,i!==o)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(n&&void 0===t){const i=void 0!==e&&1===e.length;i&&(t=r.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),i&&r.set(e,t))}return t}toString(){return this.cssText}}const a=(t,...e)=>{const i=1===t.length?t[0]:e.reduce(((e,i,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[s+1]),t[0]);return new h(i,t,o)},l=n?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new h("string"==typeof t?t:t+"",void 0,o))(e)})(t):t
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;var c;const d=window.trustedTypes,u=d?d.emptyScript:"",f=window.reactiveElementPolyfillSupport,p={toAttribute(t,e){switch(e){case Boolean:t=t?u:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},v=(t,e)=>e!==t&&(e==e||t==t),w={attribute:!0,type:String,converter:p,reflect:!1,hasChanged:v};class g extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;null!==(e=this.h)&&void 0!==e||(this.h=[]),this.h.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const s=this._$Ep(i,e);void 0!==s&&(this._$Ev.set(s,i),t.push(s))})),t}static createProperty(t,e=w){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(s){const n=this[t];this[e]=s,this.requestUpdate(t,n,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||w}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(l(t))}else void 0!==t&&e.push(l(t));return e}static _$Ep(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{n?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const i=document.createElement("style"),s=window.litNonce;void 0!==s&&i.setAttribute("nonce",s),i.textContent=e.cssText,t.appendChild(i)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=w){var s,n;const o=this.constructor._$Ep(t,i);if(void 0!==o&&!0===i.reflect){const r=(null!==(n=null===(s=i.converter)||void 0===s?void 0:s.toAttribute)&&void 0!==n?n:p.toAttribute)(e,i.type);this._$El=t,null==r?this.removeAttribute(o):this.setAttribute(o,r),this._$El=null}}_$AK(t,e){var i,s;const n=this.constructor,o=n._$Ev.get(t);if(void 0!==o&&this._$El!==o){const t=n.getPropertyOptions(o),r=t.converter,h=null!==(s=null!==(i=null==r?void 0:r.fromAttribute)&&void 0!==i?i:"function"==typeof r?r:null)&&void 0!==s?s:p.fromAttribute;this._$El=o,this[o]=h(e,t.type),this._$El=null}}requestUpdate(t,e,i){let s=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||v)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):s=!1),!this.isUpdatePending&&s&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var m;g.finalized=!0,g.elementProperties=new Map,g.elementStyles=[],g.shadowRootOptions={mode:"open"},null==f||f({ReactiveElement:g}),(null!==(c=globalThis.reactiveElementVersions)&&void 0!==c?c:globalThis.reactiveElementVersions=[]).push("1.3.3");const b=globalThis.trustedTypes,y=b?b.createPolicy("lit-html",{createHTML:t=>t}):void 0,$=`lit$${(Math.random()+"").slice(9)}$`,k="?"+$,x=`<${k}>`,M=document,S=(t="")=>M.createComment(t),C=t=>null===t||"object"!=typeof t&&"function"!=typeof t,_=Array.isArray,W=t=>{var e;return _(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])},E=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,T=/-->/g,A=/>/g,z=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,O=/'/g,R=/"/g,N=/^(?:script|style|textarea|title)$/i,U=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),j=U(1),I=U(2),P=Symbol.for("lit-noChange"),D=Symbol.for("lit-nothing"),L=new WeakMap,H=M.createTreeWalker(M,129,null,!1),J=(t,e)=>{const i=t.length-1,s=[];let n,o=2===e?"<svg>":"",r=E;for(let e=0;e<i;e++){const i=t[e];let h,a,l=-1,c=0;for(;c<i.length&&(r.lastIndex=c,a=r.exec(i),null!==a);)c=r.lastIndex,r===E?"!--"===a[1]?r=T:void 0!==a[1]?r=A:void 0!==a[2]?(N.test(a[2])&&(n=RegExp("</"+a[2],"g")),r=z):void 0!==a[3]&&(r=z):r===z?">"===a[0]?(r=null!=n?n:E,l=-1):void 0===a[1]?l=-2:(l=r.lastIndex-a[2].length,h=a[1],r=void 0===a[3]?z:'"'===a[3]?R:O):r===R||r===O?r=z:r===T||r===A?r=E:(r=z,n=void 0);const d=r===z&&t[e+1].startsWith("/>")?" ":"";o+=r===E?i+x:l>=0?(s.push(h),i.slice(0,l)+"$lit$"+i.slice(l)+$+d):i+$+(-2===l?(s.push(void 0),e):d)}const h=o+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==y?y.createHTML(h):h,s]};class B{constructor({strings:t,_$litType$:e},i){let s;this.parts=[];let n=0,o=0;const r=t.length-1,h=this.parts,[a,l]=J(t,e);if(this.el=B.createElement(a,i),H.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(s=H.nextNode())&&h.length<r;){if(1===s.nodeType){if(s.hasAttributes()){const t=[];for(const e of s.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith($)){const i=l[o++];if(t.push(e),void 0!==i){const t=s.getAttribute(i.toLowerCase()+"$lit$").split($),e=/([.?@])?(.*)/.exec(i);h.push({type:1,index:n,name:e[2],strings:t,ctor:"."===e[1]?q:"?"===e[1]?Y:"@"===e[1]?Q:Z})}else h.push({type:6,index:n})}for(const e of t)s.removeAttribute(e)}if(N.test(s.tagName)){const t=s.textContent.split($),e=t.length-1;if(e>0){s.textContent=b?b.emptyScript:"";for(let i=0;i<e;i++)s.append(t[i],S()),H.nextNode(),h.push({type:2,index:++n});s.append(t[e],S())}}}else if(8===s.nodeType)if(s.data===k)h.push({type:2,index:n});else{let t=-1;for(;-1!==(t=s.data.indexOf($,t+1));)h.push({type:7,index:n}),t+=$.length-1}n++}}static createElement(t,e){const i=M.createElement("template");return i.innerHTML=t,i}}function G(t,e,i=t,s){var n,o,r,h;if(e===P)return e;let a=void 0!==s?null===(n=i._$Cl)||void 0===n?void 0:n[s]:i._$Cu;const l=C(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==l&&(null===(o=null==a?void 0:a._$AO)||void 0===o||o.call(a,!1),void 0===l?a=void 0:(a=new l(t),a._$AT(t,i,s)),void 0!==s?(null!==(r=(h=i)._$Cl)&&void 0!==r?r:h._$Cl=[])[s]=a:i._$Cu=a),void 0!==a&&(e=G(t,a._$AS(t,e.values),a,s)),e}class K{constructor(t,e){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var e;const{el:{content:i},parts:s}=this._$AD,n=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:M).importNode(i,!0);H.currentNode=n;let o=H.nextNode(),r=0,h=0,a=s[0];for(;void 0!==a;){if(r===a.index){let e;2===a.type?e=new V(o,o.nextSibling,this,t):1===a.type?e=new a.ctor(o,a.name,a.strings,this,t):6===a.type&&(e=new X(o,this,t)),this.v.push(e),a=s[++h]}r!==(null==a?void 0:a.index)&&(o=H.nextNode(),r++)}return n}m(t){let e=0;for(const i of this.v)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class V{constructor(t,e,i,s){var n;this.type=2,this._$AH=D,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=s,this._$Cg=null===(n=null==s?void 0:s.isConnected)||void 0===n||n}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=G(this,t,e),C(t)?t===D||null==t||""===t?(this._$AH!==D&&this._$AR(),this._$AH=D):t!==this._$AH&&t!==P&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.k(t):W(t)?this.S(t):this.$(t)}M(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}k(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t))}$(t){this._$AH!==D&&C(this._$AH)?this._$AA.nextSibling.data=t:this.k(M.createTextNode(t)),this._$AH=t}T(t){var e;const{values:i,_$litType$:s}=t,n="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=B.createElement(s.h,this.options)),s);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===n)this._$AH.m(i);else{const t=new K(n,this),e=t.p(this.options);t.m(i),this.k(e),this._$AH=t}}_$AC(t){let e=L.get(t.strings);return void 0===e&&L.set(t.strings,e=new B(t)),e}S(t){_(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,s=0;for(const n of t)s===e.length?e.push(i=new V(this.M(S()),this.M(S()),this,this.options)):i=e[s],i._$AI(n),s++;s<e.length&&(this._$AR(i&&i._$AB.nextSibling,s),e.length=s)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cg=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class Z{constructor(t,e,i,s,n){this.type=1,this._$AH=D,this._$AN=void 0,this.element=t,this.name=e,this._$AM=s,this.options=n,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=D}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,s){const n=this.strings;let o=!1;if(void 0===n)t=G(this,t,e,0),o=!C(t)||t!==this._$AH&&t!==P,o&&(this._$AH=t);else{const s=t;let r,h;for(t=n[0],r=0;r<n.length-1;r++)h=G(this,s[i+r],e,r),h===P&&(h=this._$AH[r]),o||(o=!C(h)||h!==this._$AH[r]),h===D?t=D:t!==D&&(t+=(null!=h?h:"")+n[r+1]),this._$AH[r]=h}o&&!s&&this.C(t)}C(t){t===D?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class q extends Z{constructor(){super(...arguments),this.type=3}C(t){this.element[this.name]=t===D?void 0:t}}const F=b?b.emptyScript:"";class Y extends Z{constructor(){super(...arguments),this.type=4}C(t){t&&t!==D?this.element.setAttribute(this.name,F):this.element.removeAttribute(this.name)}}class Q extends Z{constructor(t,e,i,s,n){super(t,e,i,s,n),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=G(this,t,e,0))&&void 0!==i?i:D)===P)return;const s=this._$AH,n=t===D&&s!==D||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,o=t!==D&&(s===D||n);n&&this.element.removeEventListener(this.name,this,s),o&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class X{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){G(this,t)}}const tt={L:"$lit$",P:$,V:k,I:1,N:J,R:K,j:W,D:G,H:V,F:Z,O:Y,W:Q,B:q,Z:X},et=window.litHtmlPolyfillSupport;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var it,st;null==et||et(B,V),(null!==(m=globalThis.litHtmlVersions)&&void 0!==m?m:globalThis.litHtmlVersions=[]).push("2.2.6");class nt extends g{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,i)=>{var s,n;const o=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:e;let r=o._$litPart$;if(void 0===r){const t=null!==(n=null==i?void 0:i.renderBefore)&&void 0!==n?n:null;o._$litPart$=r=new V(e.insertBefore(S(),t),t,void 0,null!=i?i:{})}return r._$AI(t),r})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return P}}nt.finalized=!0,nt._$litElement$=!0,null===(it=globalThis.litElementHydrateSupport)||void 0===it||it.call(globalThis,{LitElement:nt});const ot=globalThis.litElementPolyfillSupport;null==ot||ot({LitElement:nt}),(null!==(st=globalThis.litElementVersions)&&void 0!==st?st:globalThis.litElementVersions=[]).push("3.2.1");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const rt=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(e){window.customElements.define(t,e)}}})(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */,ht=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(i){i.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function at(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):ht(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}function lt(t){return at({...t,state:!0})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const ct=({finisher:t,descriptor:e})=>(i,s)=>{var n;if(void 0===s){const s=null!==(n=i.originalKey)&&void 0!==n?n:i.key,o=null!=e?{kind:"method",placement:"prototype",key:s,descriptor:e(i.key)}:{...i,key:s};return null!=t&&(o.finisher=function(e){t(e,s)}),o}{const n=i.constructor;void 0!==e&&Object.defineProperty(i,s,e(s)),null==t||t(n,s)}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;function dt(t){return ct({finisher:(e,i)=>{Object.assign(e.prototype[i],t)}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function ut(t,e){return ct({descriptor:i=>{const s={get(){var e,i;return null!==(i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(t))&&void 0!==i?i:null},enumerable:!0,configurable:!0};if(e){const e="symbol"==typeof i?Symbol():"__"+i;s.get=function(){var i,s;return void 0===this[e]&&(this[e]=null!==(s=null===(i=this.renderRoot)||void 0===i?void 0:i.querySelector(t))&&void 0!==s?s:null),this[e]}}return s}})}
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var ft;null===(ft=window.HTMLSlotElement)||void 0===ft||ft.prototype.assignedElements;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const pt=1,vt=2,wt=t=>(...e)=>({_$litDirective$:t,values:e});class gt{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const{H:mt}=tt,bt=()=>document.createComment(""),yt=(t,e,i)=>{var s;const n=t._$AA.parentNode,o=void 0===e?t._$AB:e._$AA;if(void 0===i){const e=n.insertBefore(bt(),o),s=n.insertBefore(bt(),o);i=new mt(e,s,t,t.options)}else{const e=i._$AB.nextSibling,r=i._$AM,h=r!==t;if(h){let e;null===(s=i._$AQ)||void 0===s||s.call(i,t),i._$AM=t,void 0!==i._$AP&&(e=t._$AU)!==r._$AU&&i._$AP(e)}if(e!==o||h){let t=i._$AA;for(;t!==e;){const e=t.nextSibling;n.insertBefore(t,o),t=e}}}return i},$t=(t,e,i=t)=>(t._$AI(e,i),t),kt={},xt=t=>{var e;null===(e=t._$AP)||void 0===e||e.call(t,!1,!0);let i=t._$AA;const s=t._$AB.nextSibling;for(;i!==s;){const t=i.nextSibling;i.remove(),i=t}},Mt=(t,e,i)=>{const s=new Map;for(let n=e;n<=i;n++)s.set(t[n],n);return s},St=wt(class extends gt{constructor(t){if(super(t),t.type!==vt)throw Error("repeat() can only be used in text expressions")}dt(t,e,i){let s;void 0===i?i=e:void 0!==e&&(s=e);const n=[],o=[];let r=0;for(const e of t)n[r]=s?s(e,r):r,o[r]=i(e,r),r++;return{values:o,keys:n}}render(t,e,i){return this.dt(t,e,i).values}update(t,[e,i,s]){var n;const o=(t=>t._$AH)(t),{values:r,keys:h}=this.dt(e,i,s);if(!Array.isArray(o))return this.ut=h,r;const a=null!==(n=this.ut)&&void 0!==n?n:this.ut=[],l=[];let c,d,u=0,f=o.length-1,p=0,v=r.length-1;for(;u<=f&&p<=v;)if(null===o[u])u++;else if(null===o[f])f--;else if(a[u]===h[p])l[p]=$t(o[u],r[p]),u++,p++;else if(a[f]===h[v])l[v]=$t(o[f],r[v]),f--,v--;else if(a[u]===h[v])l[v]=$t(o[u],r[v]),yt(t,l[v+1],o[u]),u++,v--;else if(a[f]===h[p])l[p]=$t(o[f],r[p]),yt(t,o[u],o[f]),f--,p++;else if(void 0===c&&(c=Mt(h,p,v),d=Mt(a,u,f)),c.has(a[u]))if(c.has(a[f])){const e=d.get(h[p]),i=void 0!==e?o[e]:null;if(null===i){const e=yt(t,o[u]);$t(e,r[p]),l[p]=e}else l[p]=$t(i,r[p]),yt(t,o[u],i),o[e]=null;p++}else xt(o[f]),f--;else xt(o[u]),u++;for(;p<=v;){const e=yt(t,l[v+1]);$t(e,r[p]),l[p++]=e}for(;u<=f;){const t=o[u++];null!==t&&xt(t)}return this.ut=h,((t,e=kt)=>{t._$AH=e})(t,l),P}}),Ct=(t,e)=>[t[0]+e[0],t[1]+e[1]],_t=(t,e)=>Ct(t,[e,e]),Wt=(t,e)=>[t[0]-e[0],t[1]-e[1]],Et=(t,e)=>[t[0]*e,t[1]*e],Tt=(t,e)=>[t[0]/e,t[1]/e],At=(t,e)=>[Math.max(t[0],e[0]),Math.max(t[1],e[1])],zt=(t,e)=>[Math.min(t[0],e[0]),Math.min(t[1],e[1])],Ot=(t,e,i)=>At(t,zt(e,i)),Rt=(t,e)=>t[0]===e[0]&&t[1]===e[1],Nt=t=>t.isPrimary&&("touch"===t.pointerType||t.pressure>0),Ut=t=>"mouse"===t.pointerType&&1===t.buttons&&t.pressure>0,jt=t=>{t.preventDefault(),t.stopPropagation()},It=(t,e)=>new CustomEvent(t,{detail:e});
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const Pt=async t=>{let e=t.dataTransfer?.items??[];return new Promise((async(t,i)=>{console.log("DataItems",e.length);for(let i=0;i<e.length;i++){if(console.log(e[i].type),e[i].type.startsWith("image/"))return t(e[i].getAsFile());if("text/html"===e[i].type)return void e[i].getAsString((e=>t(Dt(e))));if("application/x-moz-file-promise-url"===e[i].type)return void e[i].getAsString((t=>{}));if("string"===e[i].kind){let t=e[i].type;e[i].getAsString((e=>console.log(t,e)))}}return i("No compatible drop type found")}))};function Dt(t){const e=(new DOMParser).parseFromString(t,"text/html").querySelector("img")?.src;return e??null}const Lt=t=>new CustomEvent("game-event",{detail:t});class Ht{constructor(){this.order=[],this.map=new Map}get(t){return this.map.get(t)}has(t){return this.map.has(t)}add(t,e){this.map.has(t)?this.set_index(t,this.order.length-1):(this.map.set(t,e),this.order.push(t))}delete(t){if(void 0===this.map.get(t))return!1;let e=this.map.delete(t),i=this.order.indexOf(t);return-1===i||this.order.splice(i,1),e}index(t){return this.order.indexOf(t)}set_index(t,e){const i=this.order.indexOf(t);return-1!==i&&(this.order.splice(e,0,...this.order.splice(i,1)),!0)}*values(){for(let t of this.order)yield this.map.get(t)}get size(){return this.map.size}}const Jt=t=>t[Symbol.iterator]().next().value;function*Bt(t,e){for(let i of t)yield e(i)}
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Gt=wt(class extends gt{constructor(t){var e;if(super(t),t.type!==pt||"style"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce(((e,i)=>{const s=t[i];return null==s?e:e+`${i=i.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${s};`}),"")}update(t,[e]){const{style:i}=t.element;if(void 0===this.ct){this.ct=new Set;for(const t in e)this.ct.add(t);return this.render(e)}this.ct.forEach((t=>{null==e[t]&&(this.ct.delete(t),t.includes("-")?i.removeProperty(t):i[t]="")}));for(const t in e){const s=e[t];null!=s&&(this.ct.add(t),t.includes("-")?i.setProperty(t,s):i[t]=s)}return P}});var Kt,Vt,Zt,qt,Ft,Yt,Qt,Xt,te,ee,ie,se,ne,oe,re,he,ae,le,ce,de,ue,fe;let pe=class extends nt{constructor(){super(),Kt.add(this),this.width=30,this.height=40,this.tokens=new Ht,this.selection=new Set,this.callouts=new Set,Vt.set(this,void 0),Zt.set(this,void 0),Ft.set(this,0),Yt.set(this,(t=>{var e;jt(t),s(this,Ft,(e=i(this,Ft,"f"),++e),"f")})),Qt.set(this,(t=>{jt(t);const e=i(this,ue,"f").call(this,t).map(we),s=Et(_t([this.width,this.height],-1),24);this._drop_hint=Ot([0,0],s,e),this.hovering="canvas"})),Xt.set(this,(t=>{var e;s(this,Ft,(e=i(this,Ft,"f"),--e),"f")<=0&&(this._drop_hint=void 0,this.hovering=void 0)})),te.set(this,(t=>{jt(t),this._drop_hint=void 0,this.hovering="bg"})),ee.set(this,(async t=>{jt(t);try{const e=await Pt(t);this.dispatchEvent(It("bg-drop",e))}catch(t){}s(this,Ft,0,"f"),this.hovering=void 0})),ie.set(this,(async t=>{jt(t);try{const e=await Pt(t);this.dispatchEvent(It("token-drop",{loc:this._drop_hint,dim:[24,24],img:e}))}catch(t){}this._drop_hint=void 0,this.hovering=void 0})),se.set(this,(t=>{Ut(t)&&i(this,oe,"f").call(this,t)})),ne.set(this,(t=>{(t=>t.isPrimary&&"touch"===t.pointerType)(t)&&i(this,oe,"f").call(this,t)})),oe.set(this,(t=>{t.preventDefault(),t.stopPropagation();const e=t.target.id;t.shiftKey||t.ctrlKey?this.dispatchEvent(It("token-select",[e,...this.selection].filter((t=>t!==e||!this.selection.has(e))))):this.dispatchEvent(It("token-select",[t.target.id]))})),ce.set(this,void 0),de.set(this,{move:[0,0],resize:[0,0],r:0}),ue.set(this,(t=>Wt(this.viewport.coordToLocal([t.clientX,t.clientY]),[20,20]))),fe.set(this,(t=>{if(!this.selection)return;if(8===t.keyCode)return this.dispatchEvent(Lt({type:"token-removed",ids:Array.from(this.selection)})),void jt(t);"z"===t.key&&i(this,Zt,"f")&&this.dispatchEvent(Lt({type:"callout",loc:i(this,ue,"f").call(this,i(this,Zt,"f"))})),this.tokens.get(this.selection.values().next().value);let e={ArrowUp:[0,-24],ArrowDown:[0,24],ArrowLeft:[-24,0],ArrowRight:[24,0]}[t.key];e&&(this.dispatchEvent(Lt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{const s=this.tokens.get(t),n=Ot([0,0],Wt(i(this,Kt,"a",qt),s.dim),Ct(s.loc,e));return{id:s.id,loc:n,dim:s.dim,r:s.r}}))})),jt(t))}))}connectedCallback(){super.connectedCallback(),document.addEventListener("keydown",i(this,fe,"f"))}disconnectedCallback(){super.disconnectedCallback(),document.removeEventListener("keydown",i(this,fe,"f"))}render(){let[t,e]=i(this,Kt,"a",qt),n=i(this,Kt,"m",le).call(this),o=1===this.selection.size?this.tokens.get(this.selection.values().next().value):void 0;return j`
      <p-p-z
        @pointerdown=${i(this,Kt,"m",re)}
        @pointermove=${i(this,Kt,"m",he)}
        @pointerup=${i(this,Kt,"m",ae)}
        @pointerleave=${()=>s(this,Zt,void 0,"f")}
        @dragstart=${jt}
        @dragenter=${i(this,Yt,"f")}
        @dragleave=${i(this,Xt,"f")}
        @dragstop=${i(this,Xt,"f")}
        @dragover=${i(this,Qt,"f")}
        @drop=${i(this,ie,"f")}
      >
        <svg
          id="root"
          width=${t+40}
          height=${e+40}
          style=${Gt({width:`${t+40}px`,height:`${e+40}px`})}
        >
          <defs>
            <clipPath id="canvasClip">
              <rect width=${t} height=${e} rx=${5}></rect>
            </clipPath>
            <pattern id="horiz" x=${-.25} y=${-.25} width="100%" height=${24} patternUnits="userSpaceOnUse">
              <rect class="gridline" width="100%" height=${.5} fill="#d3d3d3" shape-rendering="geometricPrecision"></rect>
            </pattern>
            <pattern id="vert" x=${-.25} y=${-.25} width=${24} height="100%" patternUnits="userSpaceOnUse">
              <rect class="gridline" width=${.5} height="100%" fill="#d3d3d3" shape-rendering="geometric precision"></rect>
            </pattern>
            <pattern id="loading" patternUnits="userSpaceOnUse" width="1" height="1">
              <rect width="1" height="1" fill="white"></rect>
              <image href="assets/loading.svg" width="1" height="1" />
            </pattern>
          </defs>
          <svg x=${20} y=${20} width=${t} height=${e} id="surface">
            <rect class="shadow" width="100%" height="100%" fill="white" rx=${5}></rect>
            <svg clip-path="url(#canvasClip)">
              ${this.bg?I`<image href=${this.bg} width="100%" height="100%" preserveAspectRatio="none" style="will-change: transform"></image>`:null}
              <rect width="100%" height="100%" fill="url(#horiz)" opacity="0.75" pointer-events="none"></rect>
              <rect width="100%" height="100%" fill="url(#vert)" opacity="0.75" pointer-events="none"></rect>
              <svg id="tokens">
                ${St(this.tokens.values(),(t=>t.id),((t,e)=>{const[s,o]=_t(t.dim,-.5),[r,h]=_t(t.loc,.25);return j`
                      <svg
                        viewBox="0 0 1 1"
                        x=${r}
                        y=${h}
                        width=${s}
                        height=${o}
                        fill="transparent"
                        preserveAspectRatio="none"
                        @pointerdown=${i(this,se,"f")}
                        @pointerup=${i(this,ne,"f")}
                      >
                        <image
                          id=${t.id}
                          class="token"
                          width="1"
                          height="1"
                          href=${t.url}
                          style=${`transform: rotate(${t.r}deg)`}
                          image-rendering="optimizeSpeed"
                          preserveAspectRatio="none"
                          @load=${ge}
                        ></image>
                        <rect width="1" height="1" class="loading"></rect>
                      </svg>

                      ${n?.index===e?I`<rect
                            class="selection-drag-target"
                            x=${n.bbox.start[0]}
                            y=${n.bbox.start[1]}
                            width=${n.bbox.end[0]-n.bbox.start[0]}
                            height=${n.bbox.end[1]-n.bbox.start[1]}
                            fill="transparent"
                            @touchmove=${this.prevent_safari_scroll}
                            @pointerdown=${this.selection_drag_start}
                            @pointermove=${this.selection_drag}
                            @pointerup=${this.selection_drag_end}
                        ></rect>`:null}
                    `}))}
              </svg>
              ${this._drop_hint?I`
            <rect
                class="drop_hint"
                x=${this._drop_hint[0]}
                y=${this._drop_hint[1]}
                width=${24}
                height=${24}
                ></rect>
          `:null}
            </svg>
            ${i(this,Vt,"f")?I`
              <rect id="sbox"
                x=${Math.min(i(this,Vt,"f").pin[0],i(this,Vt,"f").mouse[0])}
                y=${Math.min(i(this,Vt,"f").pin[1],i(this,Vt,"f").mouse[1])}
                width=${Math.abs(i(this,Vt,"f").pin[0]-i(this,Vt,"f").mouse[0])}
                height=${Math.abs(i(this,Vt,"f").pin[1]-i(this,Vt,"f").mouse[1])}
                ></rect>
              `:null}
            ${St(this.callouts,(t=>t),(t=>{const[e,i]=Wt(t,[12,12]);return I`
                  <image href="assets/callout.svg" x=${e} y=${i} width=${24} height=${24}></image>
                `}))}
            ${n?I`
            <svg
              id="selection"
              x=${n.bbox.start[0]}
              y=${n.bbox.start[1]}
              width=${n.bbox.end[0]-n.bbox.start[0]}
              height=${n.bbox.end[1]-n.bbox.start[1]}
              @touchmove=${this.prevent_safari_scroll}
              @pointerdown=${this.selection_drag_start}
              @pointermove=${this.selection_drag}
              @pointerup=${this.selection_drag_end}>
              <rect class="selection-box" width="100%" height="100%"  ></rect>
            ${o?I`
            <g style=${`transform-origin: center; transform: rotate(${o.r}deg) translateY(${Math.sign((o.r-180)%180)*(o.dim[0]-o.dim[1])/2}px)`}>
              <line class="ro" x1="50%" x2="50%" y2=${-10}></line>
              <circle class="ro handle" cx="50%" cy=${-10} r=${2}></circle>
            </g>
            <line class="rn" x2="100%"></line>
            <line class="rw" y2="100%"></line>
            <line class="re" x1="100%" x2="100%" y2="100%"></line>
            <line class="rs" y1="100%" x2="100%" y2="100%"></line>
            <rect class="handle rn rw"></rect>
            <rect class="handle rn re" x="100%"></rect>
            <rect class="handle rs rw" y="100%"></rect>
            <rect class="handle rs re" x="100%" y="100%"></rect>
            </g>
            </svg>`:null}`:null}
          </svg>
        </svg>
      </p-p-z>
      <div
        id="bg-drop"
        class=${this.hovering??""}
        @dragenter=${i(this,Yt,"f")}
        @dragover=${i(this,te,"f")}
        @dragleave=${i(this,Xt,"f")}
        @drop=${i(this,ee,"f")}
      >
        <div id="bg-drop-label" @drop=${i(this,ee,"f")}>Set Background</div>
      </div>
    `}createRenderRoot(){return super.createRenderRoot()}prevent_safari_scroll(t){jt(t)}selection_drag_start(t){if(!Nt(t))return;const e=i(this,ue,"f").call(this,t);jt(t),t.target.setPointerCapture(t.pointerId),s(this,ce,e,"f")}selection_drag(t){if(console.log("drag fired"),!Nt(t))return;i(this,ce,"f")||this.selection_drag_start(t),jt(t);const e=Ot([0,0],i(this,Kt,"a",qt),i(this,ue,"f").call(this,t)),n=this.tokens.get(this.selection.values().next().value),o=n.dim,r=n.loc,h=t.target.classList;let a=[0,0],l=[0,0],c=0;if(h.contains("rn")&&(l[1]=r[1]-ve(e[1]),a[1]=ve(e[1])-r[1]),h.contains("rw")&&(l[0]=r[0]-ve(e[0]),a[0]=ve(e[0])-r[0]),h.contains("rs")&&(l[1]=ve(e[1])-o[1]-r[1]),h.contains("re")&&(l[0]=ve(e[0])-o[0]-r[0]),h.contains("ro")){const t=Ct(r,Tt(o,2)),i=Wt(e,t),s=180*Math.atan2(i[0],-i[1])/Math.PI;c=90*Math.round(s/90)-n.r%360}h.contains("selection-drag-target")?(console.log("move"),a=Wt(e,i(this,ce,"f")).map(ve)):(a=zt(_t(o,-24),a),l=At(_t(Et(o,-1),24),l)),c===i(this,de,"f").r&&Rt(a,i(this,de,"f").move)&&Rt(l,i(this,de,"f").resize)||(s(this,ce,Ct(i(this,ce,"f"),a),"f"),s(this,de,{move:[0,0],resize:[0,0],r:0},"f"),this.dispatchEvent(Lt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{let e=this.tokens.get(t);return{id:e.id,loc:Ct(e.loc,a),dim:Ct(e.dim,l),r:e.r+c}}))})))}selection_drag_end(t){jt(t),s(this,ce,void 0,"f")}};Vt=new WeakMap,Zt=new WeakMap,Ft=new WeakMap,Yt=new WeakMap,Qt=new WeakMap,Xt=new WeakMap,te=new WeakMap,ee=new WeakMap,ie=new WeakMap,se=new WeakMap,ne=new WeakMap,oe=new WeakMap,ce=new WeakMap,de=new WeakMap,ue=new WeakMap,fe=new WeakMap,Kt=new WeakSet,qt=function(){return Et([this.width,this.height],24)},re=function(t){if(!Ut(t))return;t.target.setPointerCapture(t.pointerId);const e=i(this,ue,"f").call(this,t);s(this,Vt,{pin:e,mouse:e},"f")},he=function(t){s(this,Zt,{clientX:t.clientX,clientY:t.clientY},"f"),i(this,Vt,"f")&&(i(this,Vt,"f").mouse=i(this,ue,"f").call(this,t),this.requestUpdate())},ae=function(t){if(!i(this,Vt,"f"))return this.dispatchEvent(It("token-select",[]));t.target.setPointerCapture(t.pointerId);const e=zt(i(this,Vt,"f").pin,i(this,Vt,"f").mouse),n=(t=>[Math.abs(t[0]),Math.abs(t[1])])(Wt(i(this,Vt,"f").pin,i(this,Vt,"f").mouse)),o={start:e,end:Ct(e,n)},r=Bt(function*(t,e){for(let i of t)e(i)&&(yield i)}(this.tokens.values(),(t=>((t,e)=>!(e.start[0]>t.end[0]||e.end[0]<t.start[0]||e.start[1]>t.end[1]||e.end[1]<t.start[1]))(o,{start:t.loc,end:Ct(t.loc,t.dim)}))),(t=>t.id));s(this,Vt,void 0,"f"),this.dispatchEvent(It("token-select",[...r])),this.requestUpdate()},le=function(){if(0===this.selection.size)return;const t=Array.from(this.selection,(t=>this.tokens.get(t))).filter((t=>t)),e=Math.max(...Bt(this.selection.values(),(t=>this.tokens.index(t))));let i=t[0].loc,s=Ct(t[0].loc,t[0].dim);return t.forEach((t=>{i=zt(i,t.loc),s=At(s,Ct(t.loc,t.dim))})),{index:e,bbox:{start:i,end:s}}},pe.styles=a`
    :host {
      position: relative;
      display: block;
      --selection-color: cornflowerblue;
      overflow: hidden;
    }

    p-p-z {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
    #root {
      backface-visibility: hidden;
    }

    #sbox {
      stroke: var(--selection-color);
      stroke-width: 1px;
      fill: var(--selection-color);
      fill-opacity: 0.2;
    }

    #bg-drop {
      position: absolute;
      right: 5px;
      bottom: -60px;
      display: inline-block;
      height: 50px;
      transition: bottom 250ms;
      background: var(--ui-bg);
      border-radius: 5px 5px 0 0;
      display: grid;
      padding: 5px;
      grid: 1fr 1fr;
      text-align: center;
      display: none;
    }

    #bg-drop.canvas,
    #bg-drop.bg {
      bottom: 0;
      box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.3);
      display: block;
    }

    #bg-drop-label {
      --color: gray;
      padding: 0 1em;
      border: 2px solid var(--color);
      color: var(--color);
      border-radius: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }

    .bg > #bg-drop-label {
      --color: blue;
    }

    svg {
      overflow: visible;
    }

    #surface {
      clip-path: rect(100%);
    }

    .shadow {
      stroke-width: ${.5};
      stroke: rgba(0, 0, 0, 0.2);
      filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));
    }

    .drop_hint {
      transition: none;
      pointer-events: none;
      fill: gray;
    }

    .selection-box,
    line.ro {
      stroke: var(--selection-color);
      stroke-width: 1px;
      filter: drop-shadow(0px 0px 2px var(--selection-color));
      fill: transparent;
    }

    .selection-box {
      pointer-events: none !important;
    }

    .rn,
    .rs,
    .re,
    .rw {
      stroke-width: ${8};
      vector-effect: non-scaling-stroke;
      stroke: transparent;
    }

    .handle {
      stroke-width: 1px;
      fill: var(--selection-color);
      stroke: white;
    }

    .selection-drag-target {
      pointer-events: fill;
      cursor: move;
    }

    rect.handle {
      width: ${8}px;
      height: ${8}px;
      transform: translate(${-4}px, ${-4}px);
    }

    .ro.handle {
      cursor: crosshair;
    }

    .rn.re,
    .rs.rw {
      cursor: nesw-resize;
    }

    .rn.rw,
    .rs.re {
      cursor: nwse-resize;
    }

    .rn,
    .rs {
      cursor: row-resize;
    }

    .re,
    .rw {
      cursor: col-resize;
    }

    p-p-z {
      background-color: #ededf0;
    }

    .token {
      transform-box: fill-box;
      transform-origin: center;
      fill: transparent;
    }

    .token + .loading {
      fill: url(#loading);
      pointer-events: none;
    }

    .token.loaded + .loading {
      fill: transparent;
    }

    #selection {
      pointer-events: none;
    }

    #selection * {
      pointer-events: auto;
    }
  `,e([at({type:Number})],pe.prototype,"width",void 0),e([at({type:Number})],pe.prototype,"height",void 0),e([at()],pe.prototype,"bg",void 0),e([at({attribute:!1})],pe.prototype,"tokens",void 0),e([at({attribute:!1})],pe.prototype,"selection",void 0),e([at({attribute:!1})],pe.prototype,"callouts",void 0),e([at({attribute:!1})],pe.prototype,"sel_bbox",void 0),e([ut("root",!0)],pe.prototype,"root",void 0),e([ut("p-p-z",!0)],pe.prototype,"viewport",void 0),e([lt()],pe.prototype,"_drop_hint",void 0),e([lt()],pe.prototype,"hovering",void 0),e([dt({capture:!0,passive:!1})],pe.prototype,"prevent_safari_scroll",null),e([dt({capture:!0,passive:!1})],pe.prototype,"selection_drag_start",null),e([dt({capture:!0,passive:!1})],pe.prototype,"selection_drag",null),e([dt({capture:!0,passive:!1})],pe.prototype,"selection_drag_end",null),pe=e([rt("bg-canvas")],pe);const ve=t=>24*Math.round(t/24),we=t=>t-t%24,ge=t=>t.target.classList.add("loaded");var me,be;let ye=class extends nt{constructor(){super(...arguments),this._state=!1,this._loaded=!1,this._buy=t=>{console.log("CLICK"),jt(t),this._state=!0,document.addEventListener("click",i(this,me,"f"),{capture:!0})},me.set(this,(t=>{jt(t),this._state=!1,document.removeEventListener("click",i(this,me,"f"),{capture:!0})})),be.set(this,(t=>{this._loaded=!0}))}render(){return j`<button @click="${this._buy}">Buy Me A Coffee</button> ${this._state?j`<div id="container"><iframe class="${this._loaded?"loaded":""}" allow="payment" src="https://ko-fi.com/djrenren/?hidefeed=true&widget=true&embed=true&preview=true" title="djrenren" @load="${i(this,be,"f")}"></iframe></div>`:null}`}};async function $e(t,e,i){return t.pipeTo(new WritableStream({write:e}),{signal:i})}me=new WeakMap,be=new WeakMap,ye.styles=a`:host{display:block;position:relative}iframe{border:none;display:block;opacity:0;width:100%;height:100%;transition:opacity .5s linear}#container{border-radius:5px;box-shadow:0 0 6px rgba(0,0,0,.7);position:absolute;width:350px;height:525px;bottom:-535px;right:0;animation-name:fade;animation-duration:.5s;animation-direction:backwards;background:url(assets/loading.svg) center/100px no-repeat,#ededf0;overflow:hidden}iframe.loaded{opacity:1}@keyframes fade{0%{opacity:0}100%{opacity:1}}`,e([lt()],ye.prototype,"_state",void 0),e([lt()],ye.prototype,"_loaded",void 0),ye=e([rt("buy-me-a-coffee")],ye);const ke=t=>JSON.stringify({...t,tokens:[...Bt(t.tokens.values(),(t=>({...t})))]});var xe,Me,Se,Ce;class _e extends EventTarget{constructor(){super(),xe.add(this),this.tabletop={tokens:new Ht,grid_dim:[30,20],bg:null},this.callouts=new Set,Me.set(this,void 0);const t=new TransformStream;s(this,Me,t.writable.getWriter(),"f"),$e(t.readable,(t=>i(this,xe,"m",Se).call(this,t)))}async set_bg(t){const e=t?await i(this,xe,"m",Ce).call(this,t):null;this.apply({type:"bg",url:e})}async add_token(t,e){const s={id:crypto.randomUUID(),url:await i(this,xe,"m",Ce).call(this,t),...e};this.apply({type:"token-added",...s})}set_dim(t){this.apply({type:"grid-resized",dim:t})}async apply(t){await i(this,Me,"f").write(t)}}Me=new WeakMap,xe=new WeakSet,Se=async function(t){switch(t.type){case"token-manipulated":for(let e of t.tokens){let t=this.tabletop.tokens.get(e.id);if(!t)return void console.error("Update received for nonexistant token",e.id);Object.assign(t,{dim:e.dim,loc:e.loc,r:e.r})}break;case"token-added":let e={id:t.id,dim:t.dim,loc:t.loc,url:t.url,r:0};this.tabletop.tokens.add(t.id,e);break;case"grid-resized":this.tabletop.grid_dim=t.dim;break;case"token-removed":for(let e of t.ids){const t=this.tabletop.tokens.get(e);if(!t)return void console.error("Tried to remove nonexistant token",e);this.tabletop.tokens.delete(t.id)}break;case"state-sync":this.tabletop=(t=>{let e=JSON.parse(t),i=new Ht;return e.tokens.forEach((t=>i.add(t.id,t))),{...e,tokens:i}})(t.tabletop);break;case"token-reorder":const i=this.tabletop.tokens.index(t.id);if(void 0===i)return void console.error("Tried to reorder non-existant token",t.id);let s;s="top"===t.idx?this.tabletop.tokens.size-1:"bottom"===t.idx?0:"up"===t.idx?Math.min(this.tabletop.tokens.size-1,i+1):Math.max(0,i-1),this.tabletop.tokens.set_index(t.id,s);break;case"bg":this.tabletop.bg=t.url;break;case"callout":this.callouts.add(t.loc),setTimeout((()=>{this.callouts.delete(t.loc)}),1500)}this.dispatchEvent(Lt(t))},Ce=async function(t){if("string"==typeof t)return t;let e=new URL(window.location.toString());e.search="";let i=await crypto.subtle.digest("SHA-1",await t.arrayBuffer());e.pathname=`/resources/${i}`;let s=await caches.open("resources");return await s.put(e,new Response(t)),e.toString()};var We;class Ee extends EventTarget{constructor(){super(...arguments),We.set(this,"opening")}get current(){return i(this,We,"f")}set(t){s(this,We,t,"f"),setTimeout((()=>this.onstatus&&this.onstatus(t)),0),this.dispatchEvent(new CustomEvent("status",{detail:t}))}async connected(){if("closed"===i(this,We,"f"))throw"closed";if("open"!==i(this,We,"f"))return"opening"===i(this,We,"f")?new Promise(((t,e)=>{let i=s=>{let n=s.detail;"opening"!==n&&("closed"===n?e("closed"):"open"===n&&t(),this.removeEventListener("status",i))};this.addEventListener("status",i)})):void 0}}We=new WeakMap;const Te=t=>({readable:Ae(t),writable:ze(t)}),Ae=t=>new ReadableStream({start(e){t.onmessage=({data:t})=>{console.log("RECEIVED",t),e.enqueue(t)};t.addEventListener("close",(()=>{0===t.bufferedAmount?(console.log("Underlying datachannel closed"),e.close()):t.addEventListener("bufferedamountlow",(()=>{console.log("Underlying datachannel closed"),e.close()}))}),{once:!0})},cancel(){t.close()}}),ze=t=>{let e;return t.addEventListener("error",(t=>console.log("DC ERROR",t))),new WritableStream({start(i){const s=()=>{console.log("stream closed by dc ending",t.label),i.error("Closed foo"),t.removeEventListener("close",s)};t.addEventListener("close",s),t.onopen=()=>e&&e(),t.onbufferedamountlow=()=>e&&e()},async write(i){("connecting"===t.readyState||t.bufferedAmount>t.bufferedAmountLowThreshold)&&(console.log("waiting for resumptoin..."),await new Promise(((t,i)=>e=t)),console.log("resumed!")),console.log("writing",i),t.send(i)},abort(){console.log("aborted dc by stream"),t.close()},close(){console.log("closed dc by stream"),t.close()}},new CountQueuingStrategy({highWaterMark:1}))};var Oe,Re,Ne,Ue,je,Ie,Pe,De,Le,He,Je,Be,Ge;class Ke{constructor(t,e){Oe.set(this,void 0),this.ondatachannel=t=>{},this.id=t,this.rtc=e,this.events_dc=e.createDataChannel("events",{negotiated:!0,id:1});let{readable:i,writable:n}=function(t){let e=new TransformStream({transform(t,e){e.enqueue(JSON.stringify(t))}});return e.readable.pipeTo(t.writable),{readable:t.readable.pipeThrough(new TransformStream({transform(t,e){e.enqueue(JSON.parse(t))}})),writable:e.writable}}(Te(this.events_dc));this.events=i,s(this,Oe,n.getWriter(),"f"),this.rtc.ondatachannel=t=>this.ondatachannel(t)}write_event(t){return t.remote=this.id,i(this,Oe,"f").write(t)}datachannel(t,e){return new Promise(((i,s)=>{let n=this.rtc.createDataChannel(t,e);n.addEventListener("open",(()=>{n.removeEventListener("error",s),i(n)}),{once:!0}),n.addEventListener("error",s,{once:!0})}))}}Oe=new WeakMap;const Ve={iceServers:[{urls:"stun:stun.l.google.com:19302"}]};class Ze extends EventTarget{constructor(t,e=!1,n="wss://battlegrid-signaling.herokuapp.com"){super(),Re.add(this),this.status=new Ee,Ne.set(this,void 0),Ue.set(this,void 0),je.set(this,void 0),Ie.set(this,new Map),Pe.set(this,!1),Le.set(this,(()=>{this.status.set("opening"),i(this,Ne,"f").removeEventListener("close",i(this,Le,"f")),i(this,Ne,"f").removeEventListener("hard-disconnect",i(this,Le,"f")),i(this,Ne,"f").removeEventListener("message",i(this,Be,"f")),!i(this,Pe,"f")&&i(this,Re,"m",Ge).call(this)})),Be.set(this,(async({data:t})=>{let e=JSON.parse(t);if("error-not-exists"===e.type){return i(this,Ie,"f").get(e.destination)?.rtc.close(),void console.log("closing")}let s=i(this,Ie,"f").get(e.from);switch(e.type){case"offer":if(!i(this,je,"f"))return;s=i(this,Re,"m",Je).call(this,e.from),s.rtc.setRemoteDescription(new RTCSessionDescription(e.offer));let t=await s.rtc.createAnswer();await s.rtc.setLocalDescription(t),i(this,Ne,"f").send(JSON.stringify({type:"answer",from:this.peer_id,to:e.from,answer:t}));break;case"answer":s?.rtc.setRemoteDescription(new RTCSessionDescription(e.answer));break;case"icecandidate":await(s?.rtc.addIceCandidate(e.candidate))}})),this.peer_id=t,s(this,je,e,"f"),s(this,Ue,n,"f"),s(this,Ne,i(this,Re,"m",De).call(this),"f")}initiate(t){let e=i(this,Re,"m",Je).call(this,t);return e.rtc.createOffer().then((async s=>(await e.rtc.setLocalDescription(s),i(this,Re,"m",He).call(this,{type:"offer",from:this.peer_id,to:t,offer:s})))).catch((t=>console.error("Intiation error: ",t))),e}shutdown(){s(this,Pe,!0,"f"),i(this,Ne,"f").close(),i(this,Ie,"f").clear()}}Ne=new WeakMap,Ue=new WeakMap,je=new WeakMap,Ie=new WeakMap,Pe=new WeakMap,Le=new WeakMap,Be=new WeakMap,Re=new WeakSet,De=function(){this.status.set("opening");let t=new URL(i(this,Ue,"f"));return t.pathname=this.peer_id,s(this,Ne,function(t){let e=!0,i=setInterval((()=>{e||(console.error("Server failed to respond to heartbeat"),t.close(1e3,"Heartbeat failure"),clearInterval(i),t.dispatchEvent(new Event("hard-disconnect"))),e=!1,t.send("__ping__")}),3e3);return t.addEventListener("message",(t=>{"__pong__"===t.data&&(t.stopImmediatePropagation(),console.log("ponging"),e=!0)})),t.addEventListener("error",(()=>{clearInterval(i)}),{once:!0}),t.addEventListener("close",(()=>{clearInterval(i)}),{once:!0}),t}(new WebSocket(t)),"f"),i(this,Ne,"f").addEventListener("open",(()=>this.status.set("open")),{once:!0}),i(this,Ne,"f").addEventListener("close",i(this,Le,"f")),i(this,Ne,"f").addEventListener("hard-disconnect",i(this,Le,"f")),i(this,Ne,"f").addEventListener("message",i(this,Be,"f")),i(this,Ne,"f")},He=async function(t){await this.status.connected(),i(this,Ne,"f").send(JSON.stringify(t))},Je=function(t){let e=new Ke(t,new RTCPeerConnection(Ve));i(this,Ie,"f").set(t,e);const s=({candidate:e})=>{null!==e&&i(this,Re,"m",He).call(this,{type:"icecandidate",from:this.peer_id,to:t,candidate:e})};return e.rtc.addEventListener("icecandidate",s),e.events_dc.addEventListener("close",(()=>{e.rtc.removeEventListener("icecandidate",s),i(this,Ie,"f").delete(t)})),e.events_dc.addEventListener("open",(async()=>{this.dispatchEvent(new CustomEvent("peer",{detail:e}))})),e},Ge=function(){setTimeout((()=>i(this,Re,"m",De).call(this)),1e3)};async function qe(t){let e=t.readable.getReader(),i=await e.read();console.log("header? ",i);let s=JSON.parse(i.value);e.releaseLock();let n=await async function(t,e){let i=[];return await $e(t,(t=>{console.log("CHUNK?"),i.push(t)})),new Blob(i,{type:e})}(t.readable,s?.type);return console.log("Built buffer"),{blob:n}}async function Fe(t,e){let i=t.writable.getWriter();await i.write(JSON.stringify({type:e.blob.type})),i.releaseLock(),await function(t,e){let i=0;return new ReadableStream({async pull(s){if(i>=t.size)return s.close();s.enqueue(new Uint8Array(await t.slice(i,Math.min(i+e,t.size)).arrayBuffer())),i+=e}})}(e.blob,64e3).pipeTo(t.writable)}var Ye,Qe,Xe,ti,ei,ii,si,ni,oi,ri,hi,ai;class li{constructor(t,e){Ye.add(this),Qe.set(this,void 0),Xe.set(this,void 0),ti.set(this,void 0),ei.set(this,void 0),this.status=new Ee,this.forward_events=({detail:t})=>{console.log("CALLBACK",t),t.remote||i(this,Xe,"f").write_event(t)},s(this,ei,new Ze(crypto.randomUUID()),"f"),s(this,Qe,e,"f"),s(this,ti,t,"f"),i(this,Qe,"f").addEventListener("game-event",this.forward_events),s(this,Xe,i(this,Ye,"m",ii).call(this),"f"),navigator.serviceWorker.onmessage=async t=>{let e=t.data.id;console.log("CLIENT ATTEMPTING TO FETCH",i(this,Xe,"f").events_dc.readyState),await i(this,Xe,"f").datachannel(e,{protocol:"request-resource"}).then(Te).then(qe).then((async({blob:t})=>{console.log(t),console.log("COMMUNICATING WITH SERVICE WORKER"),navigator.serviceWorker.controller.postMessage({type:"found",id:e,blob:t})})).catch((t=>{console.error("Error fetching resource: ",t),navigator.serviceWorker.controller.postMessage({type:"notfound",id:e,error:t})}))}}async reconnect(){s(this,Xe,i(this,Ye,"m",ii).call(this),"f")}async shutdown(){i(this,Qe,"f").removeEventListener("game-event",this.forward_events),i(this,Xe,"f").rtc.close(),console.log("Waiting for signaler shutdown"),await i(this,ei,"f").shutdown(),console.log("signaler dead"),navigator.serviceWorker.onmessage=null}}Qe=new WeakMap,Xe=new WeakMap,ti=new WeakMap,ei=new WeakMap,Ye=new WeakSet,ii=function(){let t=i(this,ei,"f").initiate(i(this,ti,"f"));return t.rtc.addEventListener("iceconnectionstatechange",(()=>{console.log("CONN STATE CHANGED"),"connected"===t.rtc.iceConnectionState&&this.status.set("open")})),t.events_dc.addEventListener("close",(()=>this.status.set("closed"))),t.events_dc.addEventListener("open",(()=>this.status.set("open"))),this.status.set((t=>{switch(t.readyState){case"open":case"closed":return t.readyState;case"closing":return"closed";case"connecting":return"opening"}})(t.events_dc)),$e(t.events,(t=>i(this,Qe,"f").apply(t))),t};class ci{constructor(t){si.add(this),ni.set(this,void 0),this.clients=new Set,oi.set(this,void 0),this.signaler=new Ze(crypto.randomUUID(),!0),s(this,ni,t,"f"),s(this,oi,new AbortController,"f"),this.signaler.addEventListener("peer",(({detail:t})=>i(this,si,"m",ri).call(this,t))),i(this,ni,"f").addEventListener("game-event",(({detail:t})=>{for(let e of this.clients)e.id!==t.remote&&e.write_event(t)}))}async shutdown(){for(let t of this.clients)t.rtc.close();this.clients.clear(),i(this,oi,"f").abort("Server shutting down"),await this.signaler.shutdown()}}ni=new WeakMap,oi=new WeakMap,si=new WeakSet,ri=function(t){this.clients.add(t),t.write_event({type:"state-sync",tabletop:ke(i(this,ni,"f").tabletop)}),$e(t.events,(e=>(e.remote=t.id,i(this,ni,"f").apply(e)))),t.events_dc.addEventListener("close",(()=>{console.log("PEEER EVENT DC"),this.clients.delete(t)})),t.ondatachannel=async t=>{console.log("INCOMING DC",t.channel);const e=t.channel;var s,n;await(s="open",n=e,new Promise((t=>{n.addEventListener(s,(e=>t(e)),{once:!0})}))),console.log("new dc",e),"request-resource"===e.protocol&&Fe(Te(e),await i(this,si,"m",hi).call(this,e.label))}},hi=async function(t){let e=await fetch(`/resources/${t}`);return{blob:await e.blob()}};let di=class extends nt{constructor(){super(...arguments),this.text="",this.mousex=0,this.mousey=0,ai.set(this,(t=>{this.mousex=t.pageX,this.mousey=t.pageY}))}connectedCallback(){super.connectedCallback(),this.addEventListener("mousemove",i(this,ai,"f"))}disconnectedCallback(){this.removeEventListener("mousemove",i(this,ai,"f"))}render(){return console.log("Rendering"),j`<slot></slot><div id="message" style="${Gt({left:`${this.mousex+8}px`,top:`${this.mousey+10}px`})}">${this.text}</div>`}};ai=new WeakMap,di.styles=a`:host{display:inline-block;position:relative;width:fit-content;height:fit-content}div{font-size:.8em;display:none;opacity:0;position:fixed;background:#000;color:#fff;border-radius:3px;padding:.25em .5em;white-space:nowrap;width:max-content}@keyframes appear{0%{opacity:0}100%{opacity:1}}:host(:hover) div{display:block;animation:appear 250ms linear forwards 750ms}`,e([at()],di.prototype,"text",void 0),e([lt()],di.prototype,"mousex",void 0),e([lt()],di.prototype,"mousey",void 0),di=e([rt("with-tooltip")],di);let ui=class extends nt{constructor(){super(...arguments),this.status="local",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return j`<label class="switch"><with-tooltip text="${function(t){switch(t){case"open":return"Joinable";case"closed":return"Offline";case"opening":return"Not Joinable";case"local":return"Start hosting"}}(this.status)}"><input type="checkbox" @input="${this.toggle}" ?checked="${"local"!==this.status}"> <span class="slider round ${this.status}"><span class="on-space">Hosting</span> <span class="dot"></span> <span class="off-space">Offline</span></span></with-tooltip></label>`}};ui.styles=a`.slider{display:inline-flex;flex-wrap:nowrap;height:1em;transition:.4s;padding:.2em;min-width:4.5em;cursor:pointer;background:#ccc}.open{background:#2196f3}.opening{background:#fdcb18}.opening>.on-space{color:#000}input{display:none}input:checked+.slider>.on-space{flex-grow:1;opacity:1}input:checked+.slider>.off-space{flex-grow:0!important;opacity:0}.off-space{opacity:1;flex-grow:1!important}.on-space{opacity:0;color:#fff;width:0}.off-space,.on-space{font-size:.8em}.slider>span{flex-grow:0;flex-basis:0;transition:.4s;overflow:hidden;text-align:center}.round{border-radius:1em}.dot{border-radius:1em;min-width:1em;height:1em;background:#fff}`,e([at()],ui.prototype,"status",void 0),ui=e([rt("host-toggle")],ui);let fi=class extends nt{constructor(){super(...arguments),this.status="opening",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return j`<span class="slider round ${this.status}">${function(t){switch(t){case"open":return"Connected";case"closed":return"Disconnected";case"opening":return"Connecting"}}(this.status)}</span>`}};fi.styles=a`.slider{height:1em;transition:.4s;padding:.2em;min-width:5em;cursor:pointer;color:#fff;font-size:.8em;align-items:baseline}.open{background:#2196f3}.opening{background:#fdcb18}.round{border-radius:1em}`,e([at()],fi.prototype,"status",void 0),fi=e([rt("client-status")],fi);const pi=(t,e)=>Promise.race([t,new Promise(((t,i)=>setTimeout(i,e)))]);var vi,wi,gi,mi;let bi=class extends nt{constructor(){super(...arguments),this.selection=new Set,this.host_pending=!1,this.game=new _e,vi.set(this,(()=>{this.game.set_dim(At([1,1],[parseInt(this.width?.value)??0,parseInt(this.height?.value)??0]))})),wi.set(this,(async()=>{console.log("new local..."),await(this.client?.shutdown()),this.client=void 0,window.history.pushState(null,"",window.location.href.split("?")[0])})),gi.set(this,(async()=>{try{this.client?.shutdown(),this.client=void 0,this.host_pending=!0,this.server=new ci(this.game),this.server.signaler.status.onstatus=()=>this.requestUpdate(),console.log("WAITING"),await pi(this.server.signaler.status.connected(),5e3),window.history.pushState({},"","?game="+this.server.signaler.peer_id),navigator.clipboard.writeText(window.location.toString())}catch(t){console.error(t),await i(this,mi,"f")}finally{this.host_pending=!1}})),mi.set(this,(async()=>{let t=this.server;this.server=void 0,t&&(t.signaler.status.onstatus=void 0),await(t?.shutdown()),window.history.replaceState({},"",window.location.pathname)}))}render(){let t="closed"===this.client?.status.current?j`<div class="message error"><div><h1>Error connecting to remote grid</h1><button @click="${i(this,wi,"f")}">New local grid</button></div></div>`:null,e="opening"===this.client?.status.current?j`<div class="message"><div><h1>Connecting to grid...</h1></div></div>`:null,s="closed"===this.client?.status.current?j`<div class="message"><div><h1>Disconnected from host</h1><button @click="${i(this,wi,"f")}">Continue locally</button></div></div>`:null,n=t||e||s;return j`<section id="toolbar" class="group"><div class="group">${this.client?j`<client-status status="${this.client.status.current}"></client-status>`:j`<host-toggle status="${this.server?.signaler.status.current??"local"}" @enable="${i(this,gi,"f")}" @disable="${i(this,mi,"f")}"></host-toggle>`} <span>Grid: <input id="width" type="number" min="1" @input="${i(this,vi,"f")}" .value="${this.game.tabletop.grid_dim[0]+""}"> x <input id="height" type="number" min="1" @input="${i(this,vi,"f")}" .value="${this.game.tabletop.grid_dim[1]+""}"> </span>${1===this.selection.size?j`<div><button @click="${()=>this.game.apply({type:"token-reorder",id:Jt(this.selection),idx:"down"})}" ?disabled="${0===this.game.tabletop.tokens.index(Jt(this.selection))}">Move Down</button> <button @click="${()=>this.game.apply({type:"token-reorder",id:Jt(this.selection),idx:"up"})}" ?disabled="${this.game.tabletop.tokens.index(Jt(this.selection))===this.game.tabletop.tokens.size-1}">Move Up</button></div>`:null}</div><div class="group"><buy-me-a-coffee class="right"></buy-me-a-coffee></div></section><bg-canvas bg="${(t=>null!=t?t:D)(this.game.tabletop.bg??void 0)}" .selection="${this.selection}" width="${this.game.tabletop.grid_dim[0]}" height="${this.game.tabletop.grid_dim[1]}" .tokens="${this.game.tabletop.tokens}" .callouts="${this.game.callouts}" @token-drop="${({detail:t})=>this.game.add_token(t.img,{loc:t.loc,r:0,dim:t.dim})}" @bg-drop="${({detail:t})=>this.game.set_bg(t)}" @token-select="${({detail:t})=>{this.selection=new Set(t)}}" @game-event="${({detail:t})=>this.game.apply(t)}"></bg-canvas>${n}`}updated(t){t.has("client")&&(document.title="BattleGrid"+(this.client&&"open"===this.client.status.current?this.server?"- Hosting":"- Connected":""))}async connectedCallback(){super.connectedCallback(),this.game.addEventListener("game-event",(()=>{for(const t of this.selection)this.game.tabletop.tokens.has(t)||this.selection.delete(t);this.requestUpdate(),this.canvas?.requestUpdate()})),console.log("debug now please");let t=new URLSearchParams(window.location.search).get("game");if(!t)return await i(this,wi,"f").call(this);try{console.log("new client"),this.client=new li(t,this.game),this.client.status.onstatus=()=>this.requestUpdate(),console.log("waiting for connection"),await pi(this.client.status.connected(),5e3),console.log("connected")}catch{console.log("giving up"),await i(this,wi,"f").call(this)}}};var yi,$i,ki,xi,Mi;vi=new WeakMap,wi=new WeakMap,gi=new WeakMap,mi=new WeakMap,bi.styles=a`:host{width:100%;height:100%;display:grid;grid:"toolbar" 30px "viewport" minmax(0,1fr)/minmax(0,1fr);font-family:inherit;--ui-bg:#f9f9fa}.message{grid-area:1/1/3/1;display:grid;align-items:center;justify-items:center;background:#fff;z-index:2}.right{justify-self:end}bg-canvas{grid-area:viewport;z-index:1}input[type=number]{width:3em}.group{display:flex;align-items:center;height:100%;flex-wrap:nowrap}#toolbar{grid-area:toolbar;box-shadow:0 0 4px gray;z-index:2;background:var(--ui-bg);justify-content:space-between;padding:0 1em;grid-template-rows:unset}.group img{width:1em;height:1em;object-fit:cover;display:inline-block}`,e([ut("#width",!0)],bi.prototype,"width",void 0),e([ut("#height",!0)],bi.prototype,"height",void 0),e([ut("bg-canvas",!0)],bi.prototype,"canvas",void 0),e([lt()],bi.prototype,"client",void 0),e([lt()],bi.prototype,"server",void 0),e([lt()],bi.prototype,"selection",void 0),e([lt()],bi.prototype,"host_pending",void 0),bi=e([rt("bg-app")],bi);class Si extends HTMLElement{constructor(){super(),yi.add(this),this.state={z:1,scroll_pos:[0,0]},this.desired_state={z:1},this.origin=[0,0],this.vloc=[0,0],this.vdim=[0,0],this.cdim=[0,0],this.offset=[0,0],this.smooth=!1,ki.set(this,new ResizeObserver((t=>{for(let e of t)if(e.target===this){this.vdim=[e.contentRect.width,e.contentRect.height];const t=this.getBoundingClientRect();this.vloc=[t.x,t.y]}else this.cdim=[e.target.width.baseVal.value,e.target.height.baseVal.value];this.center()}))),this.loop=async()=>{let t,e;for(;t=e,e=await Ci();){if(!t)continue;let i=this.desired_state.z-this.state.z;if(0===i)continue;let s=e-t,n=this.smooth?Math.sign(i)*Math.min(.002*s*this.state.z,Math.abs(i)):i;this.state.z+=n,this.center(),this.state.scroll_pos=At([0,0],Ct(Et(this.origin,n),this.state.scroll_pos)),this.scrollTo({left:this.state.scroll_pos[0],top:this.state.scroll_pos[1]})}},this.zoom=(t,e)=>{this.desired_state.z=Math.min(4,Math.max(1,this.desired_state.z+e)),this.state.scroll_pos=[this.scrollLeft,this.scrollTop],this.origin=this.coordToLocal(t)},this.wheel=t=>{if(!t.ctrlKey)return;t.preventDefault();const e=t.deltaMode===WheelEvent.DOM_DELTA_LINE?10:1,i=Math.min(50,Math.max(-50,-t.deltaY*e)),s=.005*i*this.state.z;this.smooth=50===Math.abs(i),this.zoom([t.clientX,t.clientY],s),this.addEventListener},xi.set(this,(t=>{console.log("zoom!",t.ctrlKey,t.key),t.ctrlKey&&("-"===t.key?(this.smooth=!0,this.zoom(this.coordToLocal(Ct(this.vloc,Tt(this.vdim,2))),-.2*this.state.z),jt(t)):"="===t.key?(this.smooth=!0,this.zoom(this.coordToLocal(Ct(this.vloc,Tt(this.vdim,2))),.2*this.state.z),jt(t)):"0"===t.key&&(this.smooth=!0,i(this,yi,"m",$i).call(this)))})),Mi.set(this,{prev_scale:0,origin:[0,0],start:t=>{jt(t),i(this,Mi,"f").origin=this.coordToLocal([t.clientX,t.clientY]),i(this,Mi,"f").prev_scale=1},change:t=>{jt(t),this.zoom(i(this,Mi,"f").origin,this.state.z*(t.scale-i(this,Mi,"f").prev_scale)*1.5),i(this,Mi,"f").prev_scale=t.scale}}),this.root=this.attachShadow({mode:"open"}),this.root.appendChild(Si.template().content.cloneNode(!0)),this.container=this.root.getElementById("container"),i(this,ki,"f").observe(this),this.root.querySelector("slot").onslotchange=({target:t})=>{let e=t.assignedElements()[0];i(this,ki,"f").observe(e),this.smooth=!1,i(this,yi,"m",$i).call(this)},this.addEventListener("scroll",(()=>this.state.scroll_pos=[this.scrollLeft,this.scrollTop])),this.addEventListener("gesturestart",i(this,Mi,"f").start),this.addEventListener("gesturechange",i(this,Mi,"f").change),document.addEventListener("keydown",i(this,xi,"f"),{passive:!1})}center(){this.offset=At([0,0],Et(Wt(this.vdim,Et(this.cdim,this.state.z)),.5)),this.container.style.transform=`translate(${this.offset[0]}px, ${this.offset[1]}px) scale(${this.state.z})`}connectedCallback(){this.loop(),this.addEventListener("wheel",this.wheel,{passive:!1,capture:!0})}coordToLocal(t){const e=Ct(Wt(t,this.vloc),this.state.scroll_pos);return Tt(Wt(e,this.offset),this.state.z)}static template(){let t=document.createElement("template");return t.innerHTML='\n            <style>\n                :host {\n                    position: relative;\n                    display: block;\n                    overflow: auto; \n                }\n                #container {\n                    transform-origin: 0 0;\n                    display: block;\n                    width: fit-content;\n                    height: fit-content;\n                }\n            </style>\n                <div id="container">\n                    <slot id="content"></slot>\n                </div>\n            </div>\n        ',t}}ki=new WeakMap,xi=new WeakMap,Mi=new WeakMap,yi=new WeakSet,$i=function(){let t=this.root.querySelector("slot").assignedElements()[0],e=this.getBoundingClientRect(),i=[e.width,e.height],s=[t.width.baseVal.value,t.height.baseVal.value];const n=Math.max(1,Math.min(4,...Et(((t,e)=>[t[0]/e[0],t[1]/e[1]])(i,s),.95)));this.zoom([0,0],n-this.state.z)};const Ci=()=>new Promise((t=>window.requestAnimationFrame(t)));customElements.define("p-p-z",Si),await navigator.serviceWorker.register("./service-worker.js"),document.body.addEventListener("wheel",(t=>{t.ctrlKey&&t.preventDefault()}),{passive:!1});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
