const t=()=>{document.documentElement.style.setProperty("--app-height",`${window.innerHeight}px`)};function e(t,e,i,s){var n,o=arguments.length,r=o<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,s);else for(var h=t.length-1;h>=0;h--)(n=t[h])&&(r=(o<3?n(r):o>3?n(e,i,r):n(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}function i(t,e,i,s){if("a"===i&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?s:"a"===i?s.call(t):s?s.value:e.get(t)}function s(t,e,i,s,n){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?n.call(t,i):n?n.value=i:e.set(t,i),i
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}window.addEventListener("resize",t),t();const n=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,o=Symbol(),r=new WeakMap;class h{constructor(t,e,i){if(this._$cssResult$=!0,i!==o)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(n&&void 0===t){const i=void 0!==e&&1===e.length;i&&(t=r.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),i&&r.set(e,t))}return t}toString(){return this.cssText}}const a=(t,...e)=>{const i=1===t.length?t[0]:e.reduce(((e,i,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[s+1]),t[0]);return new h(i,t,o)},l=n?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new h("string"==typeof t?t:t+"",void 0,o))(e)})(t):t
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;var c;const d=window.trustedTypes,u=d?d.emptyScript:"",p=window.reactiveElementPolyfillSupport,f={toAttribute(t,e){switch(e){case Boolean:t=t?u:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},v=(t,e)=>e!==t&&(e==e||t==t),w={attribute:!0,type:String,converter:f,reflect:!1,hasChanged:v};class g extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;null!==(e=this.h)&&void 0!==e||(this.h=[]),this.h.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const s=this._$Ep(i,e);void 0!==s&&(this._$Ev.set(s,i),t.push(s))})),t}static createProperty(t,e=w){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(s){const n=this[t];this[e]=s,this.requestUpdate(t,n,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||w}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(l(t))}else void 0!==t&&e.push(l(t));return e}static _$Ep(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{n?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const i=document.createElement("style"),s=window.litNonce;void 0!==s&&i.setAttribute("nonce",s),i.textContent=e.cssText,t.appendChild(i)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=w){var s,n;const o=this.constructor._$Ep(t,i);if(void 0!==o&&!0===i.reflect){const r=(null!==(n=null===(s=i.converter)||void 0===s?void 0:s.toAttribute)&&void 0!==n?n:f.toAttribute)(e,i.type);this._$El=t,null==r?this.removeAttribute(o):this.setAttribute(o,r),this._$El=null}}_$AK(t,e){var i,s;const n=this.constructor,o=n._$Ev.get(t);if(void 0!==o&&this._$El!==o){const t=n.getPropertyOptions(o),r=t.converter,h=null!==(s=null!==(i=null==r?void 0:r.fromAttribute)&&void 0!==i?i:"function"==typeof r?r:null)&&void 0!==s?s:f.fromAttribute;this._$El=o,this[o]=h(e,t.type),this._$El=null}}requestUpdate(t,e,i){let s=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||v)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):s=!1),!this.isUpdatePending&&s&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var m;g.finalized=!0,g.elementProperties=new Map,g.elementStyles=[],g.shadowRootOptions={mode:"open"},null==p||p({ReactiveElement:g}),(null!==(c=globalThis.reactiveElementVersions)&&void 0!==c?c:globalThis.reactiveElementVersions=[]).push("1.3.3");const b=globalThis.trustedTypes,y=b?b.createPolicy("lit-html",{createHTML:t=>t}):void 0,k=`lit$${(Math.random()+"").slice(9)}$`,$="?"+k,x=`<${$}>`,M=document,S=(t="")=>M.createComment(t),C=t=>null===t||"object"!=typeof t&&"function"!=typeof t,W=Array.isArray,E=t=>{var e;return W(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])},T=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,_=/-->/g,A=/>/g,O=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,z=/'/g,N=/"/g,R=/^(?:script|style|textarea|title)$/i,I=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),U=I(1),j=I(2),P=Symbol.for("lit-noChange"),L=Symbol.for("lit-nothing"),D=new WeakMap,H=M.createTreeWalker(M,129,null,!1),J=(t,e)=>{const i=t.length-1,s=[];let n,o=2===e?"<svg>":"",r=T;for(let e=0;e<i;e++){const i=t[e];let h,a,l=-1,c=0;for(;c<i.length&&(r.lastIndex=c,a=r.exec(i),null!==a);)c=r.lastIndex,r===T?"!--"===a[1]?r=_:void 0!==a[1]?r=A:void 0!==a[2]?(R.test(a[2])&&(n=RegExp("</"+a[2],"g")),r=O):void 0!==a[3]&&(r=O):r===O?">"===a[0]?(r=null!=n?n:T,l=-1):void 0===a[1]?l=-2:(l=r.lastIndex-a[2].length,h=a[1],r=void 0===a[3]?O:'"'===a[3]?N:z):r===N||r===z?r=O:r===_||r===A?r=T:(r=O,n=void 0);const d=r===O&&t[e+1].startsWith("/>")?" ":"";o+=r===T?i+x:l>=0?(s.push(h),i.slice(0,l)+"$lit$"+i.slice(l)+k+d):i+k+(-2===l?(s.push(void 0),e):d)}const h=o+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==y?y.createHTML(h):h,s]};class B{constructor({strings:t,_$litType$:e},i){let s;this.parts=[];let n=0,o=0;const r=t.length-1,h=this.parts,[a,l]=J(t,e);if(this.el=B.createElement(a,i),H.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(s=H.nextNode())&&h.length<r;){if(1===s.nodeType){if(s.hasAttributes()){const t=[];for(const e of s.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith(k)){const i=l[o++];if(t.push(e),void 0!==i){const t=s.getAttribute(i.toLowerCase()+"$lit$").split(k),e=/([.?@])?(.*)/.exec(i);h.push({type:1,index:n,name:e[2],strings:t,ctor:"."===e[1]?q:"?"===e[1]?X:"@"===e[1]?Y:Z})}else h.push({type:6,index:n})}for(const e of t)s.removeAttribute(e)}if(R.test(s.tagName)){const t=s.textContent.split(k),e=t.length-1;if(e>0){s.textContent=b?b.emptyScript:"";for(let i=0;i<e;i++)s.append(t[i],S()),H.nextNode(),h.push({type:2,index:++n});s.append(t[e],S())}}}else if(8===s.nodeType)if(s.data===$)h.push({type:2,index:n});else{let t=-1;for(;-1!==(t=s.data.indexOf(k,t+1));)h.push({type:7,index:n}),t+=k.length-1}n++}}static createElement(t,e){const i=M.createElement("template");return i.innerHTML=t,i}}function G(t,e,i=t,s){var n,o,r,h;if(e===P)return e;let a=void 0!==s?null===(n=i._$Cl)||void 0===n?void 0:n[s]:i._$Cu;const l=C(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==l&&(null===(o=null==a?void 0:a._$AO)||void 0===o||o.call(a,!1),void 0===l?a=void 0:(a=new l(t),a._$AT(t,i,s)),void 0!==s?(null!==(r=(h=i)._$Cl)&&void 0!==r?r:h._$Cl=[])[s]=a:i._$Cu=a),void 0!==a&&(e=G(t,a._$AS(t,e.values),a,s)),e}class K{constructor(t,e){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var e;const{el:{content:i},parts:s}=this._$AD,n=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:M).importNode(i,!0);H.currentNode=n;let o=H.nextNode(),r=0,h=0,a=s[0];for(;void 0!==a;){if(r===a.index){let e;2===a.type?e=new V(o,o.nextSibling,this,t):1===a.type?e=new a.ctor(o,a.name,a.strings,this,t):6===a.type&&(e=new Q(o,this,t)),this.v.push(e),a=s[++h]}r!==(null==a?void 0:a.index)&&(o=H.nextNode(),r++)}return n}m(t){let e=0;for(const i of this.v)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class V{constructor(t,e,i,s){var n;this.type=2,this._$AH=L,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=s,this._$Cg=null===(n=null==s?void 0:s.isConnected)||void 0===n||n}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=G(this,t,e),C(t)?t===L||null==t||""===t?(this._$AH!==L&&this._$AR(),this._$AH=L):t!==this._$AH&&t!==P&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.k(t):E(t)?this.S(t):this.$(t)}M(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}k(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t))}$(t){this._$AH!==L&&C(this._$AH)?this._$AA.nextSibling.data=t:this.k(M.createTextNode(t)),this._$AH=t}T(t){var e;const{values:i,_$litType$:s}=t,n="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=B.createElement(s.h,this.options)),s);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===n)this._$AH.m(i);else{const t=new K(n,this),e=t.p(this.options);t.m(i),this.k(e),this._$AH=t}}_$AC(t){let e=D.get(t.strings);return void 0===e&&D.set(t.strings,e=new B(t)),e}S(t){W(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,s=0;for(const n of t)s===e.length?e.push(i=new V(this.M(S()),this.M(S()),this,this.options)):i=e[s],i._$AI(n),s++;s<e.length&&(this._$AR(i&&i._$AB.nextSibling,s),e.length=s)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cg=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class Z{constructor(t,e,i,s,n){this.type=1,this._$AH=L,this._$AN=void 0,this.element=t,this.name=e,this._$AM=s,this.options=n,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=L}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,s){const n=this.strings;let o=!1;if(void 0===n)t=G(this,t,e,0),o=!C(t)||t!==this._$AH&&t!==P,o&&(this._$AH=t);else{const s=t;let r,h;for(t=n[0],r=0;r<n.length-1;r++)h=G(this,s[i+r],e,r),h===P&&(h=this._$AH[r]),o||(o=!C(h)||h!==this._$AH[r]),h===L?t=L:t!==L&&(t+=(null!=h?h:"")+n[r+1]),this._$AH[r]=h}o&&!s&&this.C(t)}C(t){t===L?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class q extends Z{constructor(){super(...arguments),this.type=3}C(t){this.element[this.name]=t===L?void 0:t}}const F=b?b.emptyScript:"";class X extends Z{constructor(){super(...arguments),this.type=4}C(t){t&&t!==L?this.element.setAttribute(this.name,F):this.element.removeAttribute(this.name)}}class Y extends Z{constructor(t,e,i,s,n){super(t,e,i,s,n),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=G(this,t,e,0))&&void 0!==i?i:L)===P)return;const s=this._$AH,n=t===L&&s!==L||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,o=t!==L&&(s===L||n);n&&this.element.removeEventListener(this.name,this,s),o&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class Q{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){G(this,t)}}const tt={L:"$lit$",P:k,V:$,I:1,N:J,R:K,j:E,D:G,H:V,F:Z,O:X,W:Y,B:q,Z:Q},et=window.litHtmlPolyfillSupport;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var it,st;null==et||et(B,V),(null!==(m=globalThis.litHtmlVersions)&&void 0!==m?m:globalThis.litHtmlVersions=[]).push("2.2.6");class nt extends g{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,i)=>{var s,n;const o=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:e;let r=o._$litPart$;if(void 0===r){const t=null!==(n=null==i?void 0:i.renderBefore)&&void 0!==n?n:null;o._$litPart$=r=new V(e.insertBefore(S(),t),t,void 0,null!=i?i:{})}return r._$AI(t),r})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return P}}nt.finalized=!0,nt._$litElement$=!0,null===(it=globalThis.litElementHydrateSupport)||void 0===it||it.call(globalThis,{LitElement:nt});const ot=globalThis.litElementPolyfillSupport;null==ot||ot({LitElement:nt}),(null!==(st=globalThis.litElementVersions)&&void 0!==st?st:globalThis.litElementVersions=[]).push("3.2.1");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const rt=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(e){window.customElements.define(t,e)}}})(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */,ht=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(i){i.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function at(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):ht(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}function lt(t){return at({...t,state:!0})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function ct(t,e){return(({finisher:t,descriptor:e})=>(i,s)=>{var n;if(void 0===s){const s=null!==(n=i.originalKey)&&void 0!==n?n:i.key,o=null!=e?{kind:"method",placement:"prototype",key:s,descriptor:e(i.key)}:{...i,key:s};return null!=t&&(o.finisher=function(e){t(e,s)}),o}{const n=i.constructor;void 0!==e&&Object.defineProperty(i,s,e(s)),null==t||t(n,s)}})({descriptor:i=>{const s={get(){var e,i;return null!==(i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(t))&&void 0!==i?i:null},enumerable:!0,configurable:!0};if(e){const e="symbol"==typeof i?Symbol():"__"+i;s.get=function(){var i,s;return void 0===this[e]&&(this[e]=null!==(s=null===(i=this.renderRoot)||void 0===i?void 0:i.querySelector(t))&&void 0!==s?s:null),this[e]}}return s}})}
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var dt;null===(dt=window.HTMLSlotElement)||void 0===dt||dt.prototype.assignedElements;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const ut=1,pt=2,ft=t=>(...e)=>({_$litDirective$:t,values:e});class vt{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const{H:wt}=tt,gt=()=>document.createComment(""),mt=(t,e,i)=>{var s;const n=t._$AA.parentNode,o=void 0===e?t._$AB:e._$AA;if(void 0===i){const e=n.insertBefore(gt(),o),s=n.insertBefore(gt(),o);i=new wt(e,s,t,t.options)}else{const e=i._$AB.nextSibling,r=i._$AM,h=r!==t;if(h){let e;null===(s=i._$AQ)||void 0===s||s.call(i,t),i._$AM=t,void 0!==i._$AP&&(e=t._$AU)!==r._$AU&&i._$AP(e)}if(e!==o||h){let t=i._$AA;for(;t!==e;){const e=t.nextSibling;n.insertBefore(t,o),t=e}}}return i},bt=(t,e,i=t)=>(t._$AI(e,i),t),yt={},kt=t=>{var e;null===(e=t._$AP)||void 0===e||e.call(t,!1,!0);let i=t._$AA;const s=t._$AB.nextSibling;for(;i!==s;){const t=i.nextSibling;i.remove(),i=t}},$t=(t,e,i)=>{const s=new Map;for(let n=e;n<=i;n++)s.set(t[n],n);return s},xt=ft(class extends vt{constructor(t){if(super(t),t.type!==pt)throw Error("repeat() can only be used in text expressions")}dt(t,e,i){let s;void 0===i?i=e:void 0!==e&&(s=e);const n=[],o=[];let r=0;for(const e of t)n[r]=s?s(e,r):r,o[r]=i(e,r),r++;return{values:o,keys:n}}render(t,e,i){return this.dt(t,e,i).values}update(t,[e,i,s]){var n;const o=(t=>t._$AH)(t),{values:r,keys:h}=this.dt(e,i,s);if(!Array.isArray(o))return this.ut=h,r;const a=null!==(n=this.ut)&&void 0!==n?n:this.ut=[],l=[];let c,d,u=0,p=o.length-1,f=0,v=r.length-1;for(;u<=p&&f<=v;)if(null===o[u])u++;else if(null===o[p])p--;else if(a[u]===h[f])l[f]=bt(o[u],r[f]),u++,f++;else if(a[p]===h[v])l[v]=bt(o[p],r[v]),p--,v--;else if(a[u]===h[v])l[v]=bt(o[u],r[v]),mt(t,l[v+1],o[u]),u++,v--;else if(a[p]===h[f])l[f]=bt(o[p],r[f]),mt(t,o[u],o[p]),p--,f++;else if(void 0===c&&(c=$t(h,f,v),d=$t(a,u,p)),c.has(a[u]))if(c.has(a[p])){const e=d.get(h[f]),i=void 0!==e?o[e]:null;if(null===i){const e=mt(t,o[u]);bt(e,r[f]),l[f]=e}else l[f]=bt(i,r[f]),mt(t,o[u],i),o[e]=null;f++}else kt(o[p]),p--;else kt(o[u]),u++;for(;f<=v;){const e=mt(t,l[v+1]);bt(e,r[f]),l[f++]=e}for(;u<=p;){const t=o[u++];null!==t&&kt(t)}return this.ut=h,((t,e=yt)=>{t._$AH=e})(t,l),P}}),Mt=(t,e)=>[t[0]+e[0],t[1]+e[1]],St=(t,e)=>Mt(t,[e,e]),Ct=(t,e)=>[t[0]-e[0],t[1]-e[1]],Wt=(t,e)=>[t[0]*e,t[1]*e],Et=(t,e)=>[t[0]/e,t[1]/e],Tt=(t,e)=>[Math.max(t[0],e[0]),Math.max(t[1],e[1])],_t=(t,e)=>[Math.min(t[0],e[0]),Math.min(t[1],e[1])],At=(t,e,i)=>Tt(t,_t(e,i)),Ot=(t,e)=>t[0]===e[0]&&t[1]===e[1],zt=t=>t.isPrimary&&("touch"===t.pointerType||t.pressure>0),Nt=t=>"mouse"===t.pointerType&&1===t.buttons&&t.pressure>0,Rt=t=>{t.preventDefault(),t.stopPropagation()},It=(t,e)=>new CustomEvent(t,{detail:e});
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const Ut=async t=>{let e=t.dataTransfer?.items??[];return new Promise((async(t,i)=>{console.log("DataItems",e.length);for(let i=0;i<e.length;i++){if(console.log(e[i].type),e[i].type.startsWith("image/"))return t(e[i].getAsFile());if("text/html"===e[i].type)return void e[i].getAsString((e=>t(jt(e))));if("application/x-moz-file-promise-url"===e[i].type)return void e[i].getAsString((t=>{}));if("string"===e[i].kind){let t=e[i].type;e[i].getAsString((e=>console.log(t,e)))}}return i("No compatible drop type found")}))};function jt(t){const e=(new DOMParser).parseFromString(t,"text/html").querySelector("img")?.src;return e??null}const Pt=t=>new CustomEvent("game-event",{detail:t});class Lt{constructor(){this.order=[],this.map=new Map}get(t){const e=this.map.get(t);if(void 0!==e)return this.order[e]}has(t){return this.map.has(t)}add(t,e){this.map.has(t)?this.set_index(t,this.order.length-1):(this.map.set(t,this.order.length),this.order.push(e))}delete(t){const e=this.map.get(t);return void 0!==e&&(this.order.splice(e,1),this.map.delete(t),this.map.forEach(((t,i)=>{t>=e&&this.map.set(i,t-1)})),!0)}index(t){return this.map.get(t)}set_index(t,e){const i=this.map.get(t);if(void 0===i||e>=this.order.length)return!1;const s=this.order.splice(i,1)[0];return this.order.splice(e,0,s),this.map.forEach(((t,i)=>{t>=e&&this.map.set(i,t+1)})),this.map.set(t,e),!0}values(){return this.order}get size(){return this.map.size}}const Dt=t=>t[Symbol.iterator]().next().value;function*Ht(t,e){for(let i of t)yield e(i)}var Jt,Bt,Gt,Kt,Vt,Zt,qt,Ft,Xt,Yt,Qt,te,ee,ie,se,ne,oe,re,he,ae,le,ce,de;let ue=class extends nt{constructor(){super(),Jt.add(this),this.width=30,this.height=40,this.tokens=new Lt,this.selection=new Set,this.callouts=new Set,Bt.set(this,void 0),Gt.set(this,void 0),Vt.set(this,0),Zt.set(this,(t=>{var e;Rt(t),s(this,Vt,(e=i(this,Vt,"f"),++e),"f")})),qt.set(this,(t=>{Rt(t);const e=i(this,ce,"f").call(this,t).map(fe),s=Wt(St([this.width,this.height],-1),24);this._drop_hint=At([0,0],s,e),this.hovering="canvas"})),Ft.set(this,(t=>{var e;s(this,Vt,(e=i(this,Vt,"f"),--e),"f")<=0&&(this._drop_hint=void 0,this.hovering=void 0)})),Xt.set(this,(t=>{Rt(t),this._drop_hint=void 0,this.hovering="bg"})),Yt.set(this,(async t=>{Rt(t);try{const e=await Ut(t);this.dispatchEvent(It("bg-drop",e))}catch(t){}s(this,Vt,0,"f"),this.hovering=void 0})),Qt.set(this,(async t=>{Rt(t);try{const e=await Ut(t);this.dispatchEvent(It("token-drop",{loc:this._drop_hint,dim:[24,24],img:e}))}catch(t){}this._drop_hint=void 0,this.hovering=void 0})),te.set(this,(t=>{if(!Nt(t))return;t.preventDefault(),t.stopPropagation();const e=t.target.id;t.shiftKey||t.ctrlKey?this.dispatchEvent(It("token-select",[e,...this.selection].filter((t=>t!==e||!this.selection.has(e))))):this.dispatchEvent(It("token-select",[t.target.id]))})),oe.set(this,void 0),re.set(this,(t=>{if(!zt(t))return;const e=i(this,ce,"f").call(this,t);Rt(t),t.target.setPointerCapture(t.pointerId),s(this,oe,e,"f")})),he.set(this,{move:[0,0],resize:[0,0],r:0}),ae.set(this,(t=>{if(!zt(t))return;i(this,oe,"f")||i(this,re,"f").call(this,t),Rt(t);const e=At([0,0],i(this,Jt,"a",Kt),i(this,ce,"f").call(this,t)),n=this.tokens.get(this.selection.values().next().value),o=n.dim,r=n.loc,h=t.target.classList;let a=[0,0],l=[0,0],c=0;if(h.contains("rn")&&(l[1]=r[1]-pe(e[1]),a[1]=pe(e[1])-r[1]),h.contains("rw")&&(l[0]=r[0]-pe(e[0]),a[0]=pe(e[0])-r[0]),h.contains("rs")&&(l[1]=pe(e[1])-o[1]-r[1]),h.contains("re")&&(l[0]=pe(e[0])-o[0]-r[0]),h.contains("ro")){const t=Mt(r,Et(o,2)),i=Ct(e,t),s=180*Math.atan2(i[0],-i[1])/Math.PI;c=90*Math.round(s/90)-n.r%360}h.contains("selection-drag-target")?(console.log("move"),a=Ct(e,i(this,oe,"f")).map(pe)):(a=_t(St(o,-24),a),l=Tt(St(Wt(o,-1),24),l)),c===i(this,he,"f").r&&Ot(a,i(this,he,"f").move)&&Ot(l,i(this,he,"f").resize)||(s(this,oe,Mt(i(this,oe,"f"),a),"f"),s(this,he,{move:[0,0],resize:[0,0],r:0},"f"),this.dispatchEvent(Pt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{let e=this.tokens.get(t);return{id:e.id,loc:Mt(e.loc,a),dim:Mt(e.dim,l),r:e.r+c}}))})))})),le.set(this,(t=>{Rt(t),s(this,oe,void 0,"f")})),ce.set(this,(t=>Ct(this.viewport.coordToLocal([t.clientX,t.clientY]),[20,20]))),de.set(this,(t=>{if(!this.selection)return;if(8===t.keyCode)return this.dispatchEvent(Pt({type:"token-removed",ids:Array.from(this.selection)})),void Rt(t);"z"===t.key&&i(this,Gt,"f")&&this.dispatchEvent(Pt({type:"callout",loc:i(this,ce,"f").call(this,i(this,Gt,"f"))})),this.tokens.get(this.selection.values().next().value);let e={ArrowUp:[0,-24],ArrowDown:[0,24],ArrowLeft:[-24,0],ArrowRight:[24,0]}[t.key];e&&(this.dispatchEvent(Pt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{const s=this.tokens.get(t),n=At([0,0],Ct(i(this,Jt,"a",Kt),s.dim),Mt(s.loc,e));return{id:s.id,loc:n,dim:s.dim,r:s.r}}))})),Rt(t))}))}connectedCallback(){super.connectedCallback(),document.addEventListener("keydown",i(this,de,"f"))}disconnectedCallback(){super.disconnectedCallback(),document.removeEventListener("keydown",i(this,de,"f"))}render(){let[t,e]=i(this,Jt,"a",Kt),n=i(this,Jt,"m",ne).call(this),o=1===this.selection.size?this.tokens.get(this.selection.values().next().value):void 0;return U`
      <p-p-z
        @pointerdown=${i(this,Jt,"m",ee)}
        @pointermove=${i(this,Jt,"m",ie)}
        @pointerup=${i(this,Jt,"m",se)}
        @pointerleave=${()=>s(this,Gt,void 0,"f")}
        @dragstart=${Rt}
        @dragenter=${i(this,Zt,"f")}
        @dragleave=${i(this,Ft,"f")}
        @dragstop=${i(this,Ft,"f")}
        @dragover=${i(this,qt,"f")}
        @drop=${i(this,Qt,"f")}
      >
        <svg id="root" width=${t+40} height=${e+40}>
          <defs>
            <clipPath id="canvasClip">
              <rect width=${t} height=${e} rx=${5}></rect>
            </clipPath>
            <pattern id="horiz" x=${-.25} y=${-.25} width="100%" height=${24} patternUnits="userSpaceOnUse">
              <rect class="gridline" width="100%" height=${.5} fill="#d3d3d3" shape-rendering="geometricPrecision"></rect>
            </pattern>
            <pattern id="vert" x=${-.25} y=${-.25} width=${24} height="100%" patternUnits="userSpaceOnUse">
              <rect class="gridline" width=${.5} height="100%" fill="#d3d3d3" shape-rendering="geometric precision"></rect>
            </pattern>
            <pattern id="loading" patternUnits="userSpaceOnUse" width="1" height="1">
              <rect width="1" height="1" fill="white"></rect>
              <image href="assets/loading.svg" width="1" height="1" />
            </pattern>
          </defs>
          <svg x=${20} y=${20} width=${t} height=${e} id="surface">
            <rect class="shadow" width="100%" height="100%" fill="white" rx=${5}></rect>
            <svg clip-path="url(#canvasClip)">
              ${this.bg?j`<image href=${this.bg} width="100%" height="100%" preserveAspectRatio="none" style="will-change: transform"></image>`:null}
              <rect width="100%" height="100%" fill="url(#horiz)" opacity="0.75" pointer-events="none"></rect>
              <rect width="100%" height="100%" fill="url(#vert)" opacity="0.75" pointer-events="none"></rect>
              <svg id="tokens">
                ${xt(this.tokens.values(),(t=>t.id),((t,e)=>{const[s,o]=St(t.dim,-.5),[r,h]=St(t.loc,.25);return U`
                      <svg
                        viewBox="0 0 1 1"
                        x=${r}
                        y=${h}
                        width=${s}
                        height=${o}
                        fill="transparent"
                        preserveAspectRatio="none"
                        @pointerdown=${i(this,te,"f")}
                      >
                        <image
                          id=${t.id}
                          class="token"
                          width="1"
                          height="1"
                          href=${t.url}
                          style=${`transform: rotate(${t.r}deg)`}
                          image-rendering="optimizeSpeed"
                          preserveAspectRatio="none"
                          @load=${ve}
                        ></image>
                        <rect width="1" height="1" class="loading"></rect>
                      </svg>

                      ${n?.index===e?j`<rect
                            class="selection-drag-target"
                            x=${n.bbox.start[0]}
                            y=${n.bbox.start[1]}
                            width=${n.bbox.end[0]-n.bbox.start[0]}
                            height=${n.bbox.end[1]-n.bbox.start[1]}
                            fill="transparent"
                            @pointerdown=${i(this,re,"f")}
                            @pointermove=${i(this,ae,"f")}
                            @pointerup=${i(this,le,"f")}
                        ></rect>`:null}
                    `}))}
              </svg>
              ${this._drop_hint?j`
            <rect
                class="drop_hint"
                x=${this._drop_hint[0]}
                y=${this._drop_hint[1]}
                width=${24}
                height=${24}
                ></rect>
          `:null}
            </svg>
            ${i(this,Bt,"f")?j`
              <rect id="sbox"
                x=${Math.min(i(this,Bt,"f").pin[0],i(this,Bt,"f").mouse[0])}
                y=${Math.min(i(this,Bt,"f").pin[1],i(this,Bt,"f").mouse[1])}
                width=${Math.abs(i(this,Bt,"f").pin[0]-i(this,Bt,"f").mouse[0])}
                height=${Math.abs(i(this,Bt,"f").pin[1]-i(this,Bt,"f").mouse[1])}
                ></rect>
              `:null}
            ${xt(this.callouts,(t=>t),(t=>{const[e,i]=Ct(t,[12,12]);return j`
                  <image href="assets/callout.svg" x=${e} y=${i} width=${24} height=${24}></image>
                `}))}
            ${n?j`
            <svg
              id="selection"
              x=${n.bbox.start[0]}
              y=${n.bbox.start[1]}
              width=${n.bbox.end[0]-n.bbox.start[0]}
              height=${n.bbox.end[1]-n.bbox.start[1]}
              @pointerdown=${i(this,re,"f")}
              @pointermove=${i(this,ae,"f")}
              @pointerup=${i(this,le,"f")}>
              <rect class="selection-box" width="100%" height="100%"  ></rect>
            ${o?j`
            <g style=${`transform-origin: center; transform: rotate(${o.r}deg) translateY(${Math.sign((o.r-180)%180)*(o.dim[0]-o.dim[1])/2}px)`}>
              <line class="ro" x1="50%" x2="50%" y2=${-10}></line>
              <circle class="ro handle" cx="50%" cy=${-10} r=${2}></circle>
            </g>
            <line class="rn" x2="100%"></line>
            <line class="rw" y2="100%"></line>
            <line class="re" x1="100%" x2="100%" y2="100%"></line>
            <line class="rs" y1="100%" x2="100%" y2="100%"></line>
            <rect class="handle rn rw"></rect>
            <rect class="handle rn re" x="100%"></rect>
            <rect class="handle rs rw" y="100%"></rect>
            <rect class="handle rs re" x="100%" y="100%"></rect>
            </g>
            </svg>`:null}`:null}
          </svg>
        </svg>
      </p-p-z>
      <div
        id="bg-drop"
        class=${this.hovering??""}
        @dragenter=${i(this,Zt,"f")}
        @dragover=${i(this,Xt,"f")}
        @dragleave=${i(this,Ft,"f")}
        @drop=${i(this,Yt,"f")}
      >
        <div id="bg-drop-label" @drop=${i(this,Yt,"f")}>Set Background</div>
      </div>
    `}createRenderRoot(){return super.createRenderRoot()}};Bt=new WeakMap,Gt=new WeakMap,Vt=new WeakMap,Zt=new WeakMap,qt=new WeakMap,Ft=new WeakMap,Xt=new WeakMap,Yt=new WeakMap,Qt=new WeakMap,te=new WeakMap,oe=new WeakMap,re=new WeakMap,he=new WeakMap,ae=new WeakMap,le=new WeakMap,ce=new WeakMap,de=new WeakMap,Jt=new WeakSet,Kt=function(){return Wt([this.width,this.height],24)},ee=function(t){if(!Nt(t))return;t.target.setPointerCapture(t.pointerId);const e=i(this,ce,"f").call(this,t);s(this,Bt,{pin:e,mouse:e},"f")},ie=function(t){s(this,Gt,{clientX:t.clientX,clientY:t.clientY},"f"),i(this,Bt,"f")&&(i(this,Bt,"f").mouse=i(this,ce,"f").call(this,t),this.requestUpdate())},se=function(t){if(!i(this,Bt,"f"))return;t.target.setPointerCapture(t.pointerId);const e=_t(i(this,Bt,"f").pin,i(this,Bt,"f").mouse),n=(t=>[Math.abs(t[0]),Math.abs(t[1])])(Ct(i(this,Bt,"f").pin,i(this,Bt,"f").mouse)),o={start:e,end:Mt(e,n)},r=this.tokens.order.filter((t=>((t,e)=>!(e.start[0]>t.end[0]||e.end[0]<t.start[0]||e.start[1]>t.end[1]||e.end[1]<t.start[1]))(o,{start:t.loc,end:Mt(t.loc,t.dim)}))).map((t=>t.id));s(this,Bt,void 0,"f"),this.dispatchEvent(It("token-select",r)),this.requestUpdate()},ne=function(){if(0===this.selection.size)return;const t=Array.from(this.selection,(t=>this.tokens.get(t))).filter((t=>t)),e=Math.max(...Ht(this.selection.values(),(t=>this.tokens.index(t))));let i=t[0].loc,s=Mt(t[0].loc,t[0].dim);return t.forEach((t=>{i=_t(i,t.loc),s=Tt(s,Mt(t.loc,t.dim))})),{index:e,bbox:{start:i,end:s}}},ue.styles=a`
    :host {
      position: relative;
      display: block;
      --selection-color: cornflowerblue;
      overflow: hidden;
    }

    p-p-z {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
    #root {
      backface-visibility: hidden;
    }

    #sbox {
      stroke: var(--selection-color);
      stroke-width: 1px;
      fill: var(--selection-color);
      fill-opacity: 0.2;
    }

    #bg-drop {
      position: absolute;
      right: 5px;
      bottom: -60px;
      display: inline-block;
      height: 50px;
      transition: bottom 250ms;
      background: var(--ui-bg);
      border-radius: 5px 5px 0 0;
      display: grid;
      padding: 5px;
      grid: 1fr 1fr;
      text-align: center;
      display: none;
    }

    #bg-drop.canvas,
    #bg-drop.bg {
      bottom: 0;
      box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.3);
      display: block;
    }

    #bg-drop-label {
      --color: gray;
      padding: 0 1em;
      border: 2px solid var(--color);
      color: var(--color);
      border-radius: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }

    .bg > #bg-drop-label {
      --color: blue;
    }

    svg {
      overflow: visible;
    }

    #surface {
      clip-path: rect(100%);
    }

    .shadow {
      stroke-width: ${.5};
      stroke: rgba(0, 0, 0, 0.2);
      filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));
    }

    .drop_hint {
      transition: none;
      pointer-events: none;
      fill: gray;
    }

    .selection-box,
    line.ro {
      stroke: var(--selection-color);
      stroke-width: 1px;
      filter: drop-shadow(0px 0px 2px var(--selection-color));
      fill: transparent;
    }

    .selection-box {
      pointer-events: none !important;
    }

    .rn,
    .rs,
    .re,
    .rw {
      stroke-width: ${8};
      vector-effect: non-scaling-stroke;
      stroke: transparent;
    }

    .handle {
      stroke-width: 1px;
      fill: var(--selection-color);
      stroke: white;
    }

    .selection-drag-target {
      pointer-events: fill;
      cursor: move;
    }

    rect.handle {
      width: ${8}px;
      height: ${8}px;
      transform: translate(${-4}px, ${-4}px);
    }

    .ro.handle {
      cursor: crosshair;
    }

    .rn.re,
    .rs.rw {
      cursor: nesw-resize;
    }

    .rn.rw,
    .rs.re {
      cursor: nwse-resize;
    }

    .rn,
    .rs {
      cursor: row-resize;
    }

    .re,
    .rw {
      cursor: col-resize;
    }

    p-p-z {
      background-color: #ededf0;
    }

    bg-viewport::part(bar) {
      background: rgb(75, 75, 75);
      border: 1px solid white;
      opacity: 0.75;
      --thickness: 10px;
    }

    bg-viewport::part(bar):hover {
      opacity: 1;
    }

    .token {
      transform-box: fill-box;
      transform-origin: center;
      fill: transparent;
    }

    .token + .loading {
      fill: url(#loading);
      pointer-events: none;
    }

    .token.loaded + .loading {
      fill: transparent;
    }

    #selection {
      pointer-events: none;
    }

    #selection * {
      pointer-events: auto;
    }
  `,e([at({type:Number})],ue.prototype,"width",void 0),e([at({type:Number})],ue.prototype,"height",void 0),e([at()],ue.prototype,"bg",void 0),e([at({attribute:!1})],ue.prototype,"tokens",void 0),e([at({attribute:!1})],ue.prototype,"selection",void 0),e([at({attribute:!1})],ue.prototype,"callouts",void 0),e([at({attribute:!1})],ue.prototype,"sel_bbox",void 0),e([ct("root",!0)],ue.prototype,"root",void 0),e([ct("p-p-z",!0)],ue.prototype,"viewport",void 0),e([lt()],ue.prototype,"_drop_hint",void 0),e([lt()],ue.prototype,"hovering",void 0),ue=e([rt("bg-canvas")],ue);const pe=t=>24*Math.round(t/24),fe=t=>t-t%24,ve=t=>t.target.classList.add("loaded");var we,ge;let me=class extends nt{constructor(){super(...arguments),this._state=!1,this._loaded=!1,this._buy=t=>{console.log("CLICK"),Rt(t),this._state=!0,document.addEventListener("click",i(this,we,"f"),{capture:!0})},we.set(this,(t=>{Rt(t),this._state=!1,document.removeEventListener("click",i(this,we,"f"),{capture:!0})})),ge.set(this,(t=>{this._loaded=!0}))}render(){return U`<button @click="${this._buy}">Buy Me A Coffee</button> ${this._state?U`<div id="container"><iframe class="${this._loaded?"loaded":""}" allow="payment" src="https://ko-fi.com/djrenren/?hidefeed=true&widget=true&embed=true&preview=true" title="djrenren" @load="${i(this,ge,"f")}"></iframe></div>`:null}`}};async function be(t,e,i){return t.pipeTo(new WritableStream({write:e}),{signal:i})}we=new WeakMap,ge=new WeakMap,me.styles=a`:host{display:block;position:relative}iframe{border:none;display:block;opacity:0;width:100%;height:100%;transition:opacity .5s linear}#container{border-radius:5px;box-shadow:0 0 6px rgba(0,0,0,.7);position:absolute;width:350px;height:525px;bottom:-535px;right:0;animation-name:fade;animation-duration:.5s;animation-direction:backwards;background:url(assets/loading.svg) center/100px no-repeat,#ededf0;overflow:hidden}iframe.loaded{opacity:1}@keyframes fade{0%{opacity:0}100%{opacity:1}}`,e([lt()],me.prototype,"_state",void 0),e([lt()],me.prototype,"_loaded",void 0),me=e([rt("buy-me-a-coffee")],me);const ye=t=>JSON.stringify({...t,tokens:[...Ht(t.tokens.values(),(t=>({...t})))]});var ke,$e,xe,Me;class Se extends EventTarget{constructor(){super(),ke.add(this),this.tabletop={tokens:new Lt,grid_dim:[30,20],bg:null},this.callouts=new Set,$e.set(this,void 0);const t=new TransformStream;s(this,$e,t.writable.getWriter(),"f"),be(t.readable,(t=>i(this,ke,"m",xe).call(this,t)))}async set_bg(t){const e=t?await i(this,ke,"m",Me).call(this,t):null;this.apply({type:"bg",url:e})}async add_token(t,e){const s={id:crypto.randomUUID(),url:await i(this,ke,"m",Me).call(this,t),...e};this.apply({type:"token-added",...s})}set_dim(t){this.apply({type:"grid-resized",dim:t})}async apply(t){await i(this,$e,"f").write(t)}}$e=new WeakMap,ke=new WeakSet,xe=async function(t){switch(t.type){case"token-manipulated":for(let e of t.tokens){let t=this.tabletop.tokens.get(e.id);if(!t)return void console.error("Update received for nonexistant token",e.id);Object.assign(t,{dim:e.dim,loc:e.loc,r:e.r})}break;case"token-added":let e={id:t.id,dim:t.dim,loc:t.loc,url:t.url,r:0};this.tabletop.tokens.add(t.id,e);break;case"grid-resized":this.tabletop.grid_dim=t.dim;break;case"token-removed":for(let e of t.ids){const t=this.tabletop.tokens.get(e);if(!t)return void console.error("Tried to remove nonexistant token",e);this.tabletop.tokens.delete(t.id)}break;case"state-sync":this.tabletop=(t=>{let e=JSON.parse(t),i=new Lt;return e.tokens.forEach((t=>i.add(t.id,t))),{...e,tokens:i}})(t.tabletop);break;case"token-reorder":const i=this.tabletop.tokens.index(t.id);if(void 0===i)return void console.error("Tried to reorder non-existant token",t.id);let s;s="top"===t.idx?this.tabletop.tokens.size-1:"bottom"===t.idx?0:"up"===t.idx?Math.min(this.tabletop.tokens.size-1,i+1):Math.max(0,i-1),this.tabletop.tokens.set_index(t.id,s);break;case"bg":this.tabletop.bg=t.url;break;case"callout":this.callouts.add(t.loc),setTimeout((()=>{this.callouts.delete(t.loc)}),1500)}this.dispatchEvent(Pt(t))},Me=async function(t){if("string"==typeof t)return t;let e=new URL(window.location.toString());e.search="";let i=crypto.randomUUID();e.pathname=`/resources/${i}`;let s=await caches.open("resources");return await s.put(e,new Response(t)),e.toString()};var Ce;class We extends EventTarget{constructor(){super(...arguments),Ce.set(this,"opening")}get current(){return i(this,Ce,"f")}set(t){s(this,Ce,t,"f"),setTimeout((()=>this.onstatus&&this.onstatus(t)),0),this.dispatchEvent(new CustomEvent("status",{detail:t}))}async connected(){if("closed"===i(this,Ce,"f"))throw"closed";if("open"!==i(this,Ce,"f"))return"opening"===i(this,Ce,"f")?new Promise(((t,e)=>{let i=s=>{let n=s.detail;"opening"!==n&&("closed"===n?e("closed"):"open"===n&&t(),this.removeEventListener("status",i))};this.addEventListener("status",i)})):void 0}}Ce=new WeakMap;const Ee=t=>({readable:Te(t),writable:_e(t)}),Te=t=>new ReadableStream({start(e){t.onmessage=({data:t})=>{console.log("RECEIVED",t),e.enqueue(t)};const i=()=>{setTimeout((()=>e.close()),3e3),t.removeEventListener("close",i)};t.addEventListener("close",i)},cancel(){t.close()}}),_e=t=>{let e;return t.addEventListener("error",(t=>console.log("DC ERROR",t))),new WritableStream({start(i){const s=()=>{console.log("stream closed by dc ending",t.label),i.error("Closed foo"),t.removeEventListener("close",s)};t.addEventListener("close",s),t.onopen=()=>e&&e(),t.onbufferedamountlow=()=>e&&e()},async write(i){("connecting"===t.readyState||t.bufferedAmount>t.bufferedAmountLowThreshold)&&(console.log("waiting for resumptoin..."),await new Promise(((t,i)=>e=t)),console.log("resumed!")),console.log("writing",i),t.send(i)},abort(){console.log("aborted dc by stream"),t.close()},close(){console.log("closed dc by stream"),t.close()}},new CountQueuingStrategy({highWaterMark:1}))};var Ae,Oe,ze,Ne,Re,Ie,Ue,je,Pe,Le,De,He,Je;class Be{constructor(t,e){Ae.set(this,void 0),this.ondatachannel=t=>{},this.id=t,this.rtc=e,this.events_dc=e.createDataChannel("events",{negotiated:!0,id:1});let{readable:i,writable:n}=function(t){let e=new TransformStream({transform(t,e){e.enqueue(JSON.stringify(t))}});return e.readable.pipeTo(t.writable),{readable:t.readable.pipeThrough(new TransformStream({transform(t,e){e.enqueue(JSON.parse(t))}})),writable:e.writable}}(Ee(this.events_dc));this.events=i,s(this,Ae,n.getWriter(),"f"),this.rtc.ondatachannel=t=>this.ondatachannel(t)}write_event(t){return t.remote=this.id,i(this,Ae,"f").write(t)}datachannel(t,e){return new Promise(((i,s)=>{let n=this.rtc.createDataChannel(t,e);n.addEventListener("open",(()=>{n.removeEventListener("error",s),i(n)}),{once:!0}),n.addEventListener("error",s,{once:!0})}))}}Ae=new WeakMap;const Ge={iceServers:[{urls:"stun:stun.l.google.com:19302"}]};class Ke extends EventTarget{constructor(t,e=!1,n="wss://battlegrid-signaling.herokuapp.com"){super(),Oe.add(this),this.status=new We,ze.set(this,void 0),Ne.set(this,void 0),Re.set(this,void 0),Ie.set(this,new Map),Ue.set(this,!1),Pe.set(this,(()=>{this.status.set("opening"),i(this,ze,"f").removeEventListener("close",i(this,Pe,"f")),i(this,ze,"f").removeEventListener("hard-disconnect",i(this,Pe,"f")),i(this,ze,"f").removeEventListener("message",i(this,He,"f")),!i(this,Ue,"f")&&i(this,Oe,"m",Je).call(this)})),He.set(this,(async({data:t})=>{let e=JSON.parse(t);if("error-not-exists"===e.type){return i(this,Ie,"f").get(e.destination)?.rtc.close(),void console.log("closing")}let s=i(this,Ie,"f").get(e.from);switch(e.type){case"offer":if(!i(this,Re,"f"))return;s=i(this,Oe,"m",De).call(this,e.from),s.rtc.setRemoteDescription(new RTCSessionDescription(e.offer));let t=await s.rtc.createAnswer();await s.rtc.setLocalDescription(t),i(this,ze,"f").send(JSON.stringify({type:"answer",from:this.peer_id,to:e.from,answer:t}));break;case"answer":s?.rtc.setRemoteDescription(new RTCSessionDescription(e.answer));break;case"icecandidate":await(s?.rtc.addIceCandidate(e.candidate))}})),this.peer_id=t,s(this,Re,e,"f"),s(this,Ne,n,"f"),s(this,ze,i(this,Oe,"m",je).call(this),"f")}initiate(t){let e=i(this,Oe,"m",De).call(this,t);return e.rtc.createOffer().then((async s=>(await e.rtc.setLocalDescription(s),i(this,Oe,"m",Le).call(this,{type:"offer",from:this.peer_id,to:t,offer:s})))).catch((t=>console.error("Intiation error: ",t))),e}shutdown(){s(this,Ue,!0,"f"),i(this,ze,"f").close(),i(this,Ie,"f").clear()}}ze=new WeakMap,Ne=new WeakMap,Re=new WeakMap,Ie=new WeakMap,Ue=new WeakMap,Pe=new WeakMap,He=new WeakMap,Oe=new WeakSet,je=function(){this.status.set("opening");let t=new URL(i(this,Ne,"f"));return t.pathname=this.peer_id,s(this,ze,function(t){let e=!0,i=setInterval((()=>{e||(console.error("Server failed to respond to heartbeat"),t.close(1e3,"Heartbeat failure"),clearInterval(i),t.dispatchEvent(new Event("hard-disconnect"))),e=!1,t.send("__ping__")}),3e3);return t.addEventListener("message",(t=>{"__pong__"===t.data&&(t.stopImmediatePropagation(),console.log("ponging"),e=!0)})),t.addEventListener("error",(()=>{clearInterval(i)}),{once:!0}),t.addEventListener("close",(()=>{clearInterval(i)}),{once:!0}),t}(new WebSocket(t)),"f"),i(this,ze,"f").addEventListener("open",(()=>this.status.set("open")),{once:!0}),i(this,ze,"f").addEventListener("close",i(this,Pe,"f")),i(this,ze,"f").addEventListener("hard-disconnect",i(this,Pe,"f")),i(this,ze,"f").addEventListener("message",i(this,He,"f")),i(this,ze,"f")},Le=async function(t){await this.status.connected(),i(this,ze,"f").send(JSON.stringify(t))},De=function(t){let e=new Be(t,new RTCPeerConnection(Ge));i(this,Ie,"f").set(t,e);const s=({candidate:e})=>{null!==e&&i(this,Oe,"m",Le).call(this,{type:"icecandidate",from:this.peer_id,to:t,candidate:e})};return e.rtc.addEventListener("icecandidate",s),e.events_dc.addEventListener("close",(()=>{e.rtc.removeEventListener("icecandidate",s),i(this,Ie,"f").delete(t)})),e.events_dc.addEventListener("open",(async()=>{this.dispatchEvent(new CustomEvent("peer",{detail:e}))})),e},Je=function(){setTimeout((()=>i(this,Oe,"m",je).call(this)),1e3)};async function Ve(t){let e,i=[];try{await be(t.readable,(t=>{"string"!=typeof t?(console.log("READING resource CHUNK"),i.push(t)):e=JSON.parse(t)}))}catch(t){console.error("Error consuming",t)}console.log(i);let s=new Blob(i,{type:e?.type});return console.log("GOT EM ALL!",s),{blob:s}}var Ze,qe,Fe,Xe,Ye,Qe,ti,ei,ii,si,ni,oi;class ri{constructor(t,e){Ze.add(this),qe.set(this,void 0),Fe.set(this,void 0),Xe.set(this,void 0),Ye.set(this,void 0),this.status=new We,this.forward_events=({detail:t})=>{console.log("CALLBACK",t),t.remote||i(this,Fe,"f").write_event(t)},s(this,Ye,new Ke(crypto.randomUUID()),"f"),s(this,qe,e,"f"),s(this,Xe,t,"f"),i(this,qe,"f").addEventListener("game-event",this.forward_events),s(this,Fe,i(this,Ze,"m",Qe).call(this),"f"),navigator.serviceWorker.onmessage=async t=>{let e=t.data.id;console.log("CLIENT ATTEMPTING TO FETCH",i(this,Fe,"f").events_dc.readyState),await i(this,Fe,"f").datachannel(e,{protocol:"request-resource"}).then(Ee).then(Ve).then((async({blob:t})=>{console.log("COMMUNICATING WITH SERVICE WORKER"),navigator.serviceWorker.controller.postMessage({type:"found",id:e,blob:t})})).catch((t=>{console.error("Error fetching resource: ",t),navigator.serviceWorker.controller.postMessage({type:"notfound",id:e,error:t})}))}}async reconnect(){s(this,Fe,i(this,Ze,"m",Qe).call(this),"f")}async shutdown(){i(this,Fe,"f").rtc.close(),console.log("Waiting for signaler shutdown"),await i(this,Ye,"f").shutdown(),console.log("signaler dead"),navigator.serviceWorker.onmessage=null}}qe=new WeakMap,Fe=new WeakMap,Xe=new WeakMap,Ye=new WeakMap,Ze=new WeakSet,Qe=function(){let t=i(this,Ye,"f").initiate(i(this,Xe,"f"));return t.rtc.addEventListener("iceconnectionstatechange",(()=>{console.log("CONN STATE CHANGED"),"connected"===t.rtc.iceConnectionState&&this.status.set("open")})),t.events_dc.addEventListener("close",(()=>this.status.set("closed"))),t.events_dc.addEventListener("open",(()=>this.status.set("open"))),this.status.set((t=>{switch(t.readyState){case"open":case"closed":return t.readyState;case"closing":return"closed";case"connecting":return"opening"}})(t.events_dc)),be(t.events,(t=>i(this,qe,"f").apply(t))),t};class hi{constructor(t){ti.add(this),ei.set(this,void 0),ii.set(this,new Set),si.set(this,void 0),this.signaler=new Ke(crypto.randomUUID(),!0),s(this,ei,t,"f"),s(this,si,new AbortController,"f"),this.signaler.addEventListener("peer",(({detail:t})=>i(this,ti,"m",ni).call(this,t))),i(this,ei,"f").addEventListener("game-event",(({detail:t})=>{for(let e of i(this,ii,"f"))e.id!==t.remote&&e.write_event(t)}))}async shutdown(){for(let t of i(this,ii,"f"))t.rtc.close();i(this,ii,"f").clear(),i(this,si,"f").abort("Server shutting down"),await this.signaler.shutdown()}}ei=new WeakMap,ii=new WeakMap,si=new WeakMap,ti=new WeakSet,ni=function(t){i(this,ii,"f").add(t),t.write_event({type:"state-sync",tabletop:ye(i(this,ei,"f").tabletop)}),be(t.events,(e=>(e.remote=t.id,i(this,ei,"f").apply(e)))),t.events_dc.addEventListener("close",(()=>{console.log("PEEER EVENT DC"),i(this,ii,"f").delete(t)})),t.ondatachannel=async t=>{console.log("INCOMING DC",t.channel);const e=t.channel;var s,n;await(s="open",n=e,new Promise((t=>{n.addEventListener(s,(e=>t(e)),{once:!0})}))),console.log("new dc",e),"request-resource"===e.protocol&&async function(t,e){let i=e.blob,s=t.writable.getWriter();console.log("BLOBL",i),s.write(JSON.stringify({type:i.type}));for(let t=0;t<i.size;t+=64e3)console.log("WRITING FIRST ChUNK"),await s.write(await i.slice(t,Math.min(t+64e3,i.size)).arrayBuffer());console.error("closing"),await s.close()}(Ee(e),await i(this,ti,"m",oi).call(this,e.label))}},oi=async function(t){let e=await fetch(`/resources/${t}`);return{blob:await e.blob()}};
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const ai=ft(class extends vt{constructor(t){var e;if(super(t),t.type!==ut||"style"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce(((e,i)=>{const s=t[i];return null==s?e:e+`${i=i.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${s};`}),"")}update(t,[e]){const{style:i}=t.element;if(void 0===this.ct){this.ct=new Set;for(const t in e)this.ct.add(t);return this.render(e)}this.ct.forEach((t=>{null==e[t]&&(this.ct.delete(t),t.includes("-")?i.removeProperty(t):i[t]="")}));for(const t in e){const s=e[t];null!=s&&(this.ct.add(t),t.includes("-")?i.setProperty(t,s):i[t]=s)}return P}});var li;let ci=class extends nt{constructor(){super(...arguments),this.text="",this.mousex=0,this.mousey=0,li.set(this,(t=>{this.mousex=t.pageX,this.mousey=t.pageY}))}connectedCallback(){super.connectedCallback(),this.addEventListener("mousemove",i(this,li,"f"))}disconnectedCallback(){this.removeEventListener("mousemove",i(this,li,"f"))}render(){return console.log("Rendering"),U`<slot></slot><div id="message" style="${ai({left:`${this.mousex+8}px`,top:`${this.mousey+10}px`})}">${this.text}</div>`}};li=new WeakMap,ci.styles=a`:host{display:inline-block;position:relative;width:fit-content;height:fit-content}div{font-size:.8em;display:none;opacity:0;position:fixed;background:#000;color:#fff;border-radius:3px;padding:.25em .5em;white-space:nowrap;width:max-content}@keyframes appear{0%{opacity:0}100%{opacity:1}}:host(:hover) div{display:block;animation:appear 250ms linear forwards 750ms}`,e([at()],ci.prototype,"text",void 0),e([lt()],ci.prototype,"mousex",void 0),e([lt()],ci.prototype,"mousey",void 0),ci=e([rt("with-tooltip")],ci);let di=class extends nt{render(){return U`<label class="switch"><input type="checkbox"> <span class="slider round"><span class="on-text">Hosting</span> <span class="off-text">Offline</span></span><div class="dot-wrapper"><div class="dot"></div></div></label>`}};di.styles=a`.switch{cursor:pointer;position:relative;display:inline-block;height:1em;width:4.5em;padding:.1em}.switch input{display:none}.slider{position:absolute;top:0;bottom:0;left:0;right:0;background-color:#ccc;transition:.4s}.slider>span{position:absolute;font-size:.8em;top:.1em}input:checked+.slider>.on-text{opacity:1}input:checked+.slider>.off-text{opacity:0}input+.slider>.off-text{position:absolute;right:.8em;opacity:1}input+.slider>.on-text{opacity:0;left:.5em;color:#fff}.dot-wrapper{position:absolute;left:.1em;top:.1em;right:.1em;bottom:.1em;transition:.4s}input:checked+.slider{background-color:#2196f3}input:focus+.slider{box-shadow:0 0 1px #2196f3}input:checked+.slider+.dot-wrapper{transform:translateX(calc(100% - 1.2em))}.slider.round{border-radius:34px}.dot{position:absolute;background-color:#fff;height:1em;aspect-ratio:1/1;border-radius:50%}`,di=e([rt("bg-toggle")],di);let ui=class extends nt{constructor(){super(...arguments),this.status="local",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return U`<label class="switch"><with-tooltip text="${function(t){switch(t){case"open":return"Joinable";case"closed":return"Offline";case"opening":return"Not Joinable";case"local":return"Start hosting"}}(this.status)}"><input type="checkbox" @input="${this.toggle}" ?checked="${"local"!==this.status}"> <span class="slider round ${this.status}"><span class="on-space">Hosting</span> <span class="dot"></span> <span class="off-space">Offline</span></span></with-tooltip></label>`}};ui.styles=a`.slider{display:inline-flex;flex-wrap:nowrap;height:1em;transition:.4s;padding:.2em;min-width:4.5em;cursor:pointer;background:#ccc}.open{background:#2196f3}.opening{background:#fdcb18}.opening>.on-space{color:#000}input{display:none}input:checked+.slider>.on-space{flex-grow:1;opacity:1}input:checked+.slider>.off-space{flex-grow:0!important;opacity:0}.off-space{opacity:1;flex-grow:1!important}.on-space{opacity:0;color:#fff;width:0}.off-space,.on-space{font-size:.8em}.slider>span{flex-grow:0;flex-basis:0;transition:.4s;overflow:hidden;text-align:center}.round{border-radius:1em}.dot{border-radius:1em;min-width:1em;height:1em;background:#fff}`,e([at()],ui.prototype,"status",void 0),ui=e([rt("host-toggle")],ui);let pi=class extends nt{constructor(){super(...arguments),this.status="opening",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return U`<span class="slider round ${this.status}">${function(t){switch(t){case"open":return"Connected";case"closed":return"Disconnected";case"opening":return"Connecting"}}(this.status)}</span>`}};pi.styles=a`.slider{height:1em;transition:.4s;padding:.2em;min-width:5em;cursor:pointer;color:#fff;font-size:.8em;align-items:baseline}.open{background:#2196f3}.opening{background:#fdcb18}.round{border-radius:1em}`,e([at()],pi.prototype,"status",void 0),pi=e([rt("client-status")],pi);const fi=(t,e)=>Promise.race([t,new Promise(((t,i)=>setTimeout(i,e)))]);var vi,wi,gi,mi;let bi=class extends nt{constructor(){super(...arguments),this.selection=new Set,this.host_pending=!1,this.game=new Se,vi.set(this,(()=>{this.game.set_dim(Tt([1,1],[parseInt(this.width?.value)??0,parseInt(this.height?.value)??0]))})),wi.set(this,(async()=>{console.log("new local..."),await(this.client?.shutdown()),this.client=void 0,window.history.pushState(null,"",window.location.href.split("?")[0])})),gi.set(this,(async()=>{try{this.client?.shutdown(),this.client=void 0,this.host_pending=!0,this.server=new hi(this.game),this.server.signaler.status.onstatus=()=>this.requestUpdate(),console.log("WAITING"),await fi(this.server.signaler.status.connected(),5e3),window.history.pushState({},"","?game="+this.server.signaler.peer_id),navigator.clipboard.writeText(window.location.toString())}catch(t){console.error(t),await i(this,mi,"f")}finally{this.host_pending=!1}})),mi.set(this,(async()=>{let t=this.server;this.server=void 0,t&&(t.signaler.status.onstatus=void 0),await(t?.shutdown()),window.history.replaceState({},"",window.location.pathname)}))}render(){let t="closed"===this.client?.status.current?U`<div class="message error"><div><h1>Error connecting to remote grid</h1><button @click="${i(this,wi,"f")}">New local grid</button></div></div>`:null,e="opening"===this.client?.status.current?U`<div class="message"><div><h1>Connecting to grid...</h1></div></div>`:null,s="closed"===this.client?.status.current?U`<div class="message"><div><h1>Disconnected from host</h1><button @click="${i(this,wi,"f")}">Continue locally</button></div></div>`:null,n=t||e||s;return U`<section id="toolbar" class="group"><div class="group">${this.client?U`<client-status status="${this.client.status.current}"></client-status>`:U`<host-toggle status="${this.server?.signaler.status.current??"local"}" @enable="${i(this,gi,"f")}" @disable="${i(this,mi,"f")}"></host-toggle>`} <span>Grid: <input id="width" type="number" min="1" @input="${i(this,vi,"f")}" .value="${this.game.tabletop.grid_dim[0]+""}"> x <input id="height" type="number" min="1" @input="${i(this,vi,"f")}" .value="${this.game.tabletop.grid_dim[1]+""}"> </span>${1===this.selection.size?U`<div><button @click="${()=>this.game.apply({type:"token-reorder",id:Dt(this.selection),idx:"down"})}" ?disabled="${0===this.game.tabletop.tokens.index(Dt(this.selection))}">Move Down</button> <button @click="${()=>this.game.apply({type:"token-reorder",id:Dt(this.selection),idx:"up"})}" ?disabled="${this.game.tabletop.tokens.index(Dt(this.selection))===this.game.tabletop.tokens.size-1}">Move Up</button></div>`:null}</div><div class="group"><buy-me-a-coffee class="right"></buy-me-a-coffee></div></section><bg-canvas bg="${(t=>null!=t?t:L)(this.game.tabletop.bg??void 0)}" .selection="${this.selection}" width="${this.game.tabletop.grid_dim[0]}" height="${this.game.tabletop.grid_dim[1]}" .tokens="${this.game.tabletop.tokens}" .callouts="${this.game.callouts}" @token-drop="${({detail:t})=>this.game.add_token(t.img,{loc:t.loc,r:0,dim:t.dim})}" @bg-drop="${({detail:t})=>this.game.set_bg(t)}" @token-select="${({detail:t})=>{this.selection=new Set(t)}}" @game-event="${({detail:t})=>this.game.apply(t)}"></bg-canvas>${n}`}updated(t){t.has("client")&&(document.title="BattleGrid"+(this.client&&"open"===this.client.status.current?this.server?"- Hosting":"- Connected":""))}async connectedCallback(){super.connectedCallback(),this.game.addEventListener("game-event",(()=>{for(const t of this.selection)this.game.tabletop.tokens.has(t)||this.selection.delete(t);this.requestUpdate(),this.canvas?.requestUpdate()})),console.log("debug now please");let t=new URLSearchParams(window.location.search).get("game");if(!t)return await i(this,wi,"f").call(this);try{console.log("new client"),this.client=new ri(t,this.game),this.client.status.onstatus=()=>this.requestUpdate(),console.log("waiting for connection"),await fi(this.client.status.connected(),5e3),console.log("connected")}catch{console.log("giving up"),await i(this,wi,"f").call(this)}}};var yi,ki;vi=new WeakMap,wi=new WeakMap,gi=new WeakMap,mi=new WeakMap,bi.styles=a`:host{width:100%;height:100%;display:grid;grid:"toolbar" 30px "viewport" minmax(0,1fr)/minmax(0,1fr);font-family:inherit;--ui-bg:#f9f9fa}.message{grid-area:1/1/3/1;display:grid;align-items:center;justify-items:center;background:#fff;z-index:2}.right{justify-self:end}bg-canvas{grid-area:viewport;z-index:1}input[type=number]{width:3em}.group{display:flex;align-items:center;height:100%;flex-wrap:nowrap}#toolbar{grid-area:toolbar;box-shadow:0 0 4px gray;z-index:2;background:var(--ui-bg);justify-content:space-between;padding:0 1em;grid-template-rows:unset}.group img{width:1em;height:1em;object-fit:cover;display:inline-block}`,e([ct("#width",!0)],bi.prototype,"width",void 0),e([ct("#height",!0)],bi.prototype,"height",void 0),e([ct("bg-canvas",!0)],bi.prototype,"canvas",void 0),e([lt()],bi.prototype,"client",void 0),e([lt()],bi.prototype,"server",void 0),e([lt()],bi.prototype,"selection",void 0),e([lt()],bi.prototype,"host_pending",void 0),bi=e([rt("bg-app")],bi);class $i extends HTMLElement{constructor(){super(),this.state={z:1,scroll_pos:[0,0]},this.desired_state={z:1},this.origin=[0,0],this.vloc=[0,0],this.vdim=[0,0],this.cdim=[0,0],this.offset=[0,0],this.smooth=!1,yi.set(this,new ResizeObserver((t=>{for(let e of t)if(e.target===this){this.vdim=[e.contentRect.width,e.contentRect.height];const t=this.getBoundingClientRect();this.vloc=[t.x,t.y]}else this.cdim=[e.target.width.baseVal.value,e.target.height.baseVal.value];this.center()}))),this.loop=async()=>{let t,e;for(;t=e,e=await xi();){if(!t)continue;let i=this.desired_state.z-this.state.z;if(0===i)continue;let s=e-t,n=this.smooth?Math.sign(i)*Math.min(.002*s*this.state.z,Math.abs(i)):i;this.state.z+=n,this.center(),this.state.scroll_pos=Tt([0,0],Mt(Wt(this.origin,n),this.state.scroll_pos)),this.scrollTo({left:this.state.scroll_pos[0],top:this.state.scroll_pos[1]})}},this.zoom=(t,e)=>{this.desired_state.z=Math.min(4,Math.max(1,this.desired_state.z+e)),this.state.scroll_pos=[this.scrollLeft,this.scrollTop],this.origin=this.coordToLocal(t)},this.wheel=t=>{if(!t.ctrlKey)return;t.preventDefault();const e=t.deltaMode===WheelEvent.DOM_DELTA_LINE?10:1,i=Math.min(50,Math.max(-50,-t.deltaY*e)),s=.005*i*this.state.z;this.smooth=50===Math.abs(i),this.zoom([t.clientX,t.clientY],s),this.addEventListener},ki.set(this,{prev_scale:0,origin:[0,0],start:t=>{Rt(t),i(this,ki,"f").origin=this.coordToLocal([t.clientX,t.clientY]),i(this,ki,"f").prev_scale=1},change:t=>{Rt(t),this.zoom(i(this,ki,"f").origin,this.state.z*(t.scale-i(this,ki,"f").prev_scale)*1.5),i(this,ki,"f").prev_scale=t.scale}}),this.root=this.attachShadow({mode:"open"}),this.root.appendChild($i.template().content.cloneNode(!0)),this.container=this.root.getElementById("container"),i(this,yi,"f").observe(this),this.root.querySelector("slot").onslotchange=({target:t})=>{let e=t.assignedElements()[0];i(this,yi,"f").observe(e),this.smooth=!1;let s=this.getBoundingClientRect(),n=[s.width,s.height],o=[e.width.baseVal.value,e.height.baseVal.value];const r=Math.max(1,Math.min(4,...Wt(((t,e)=>[t[0]/e[0],t[1]/e[1]])(n,o),.95)));this.zoom([0,0],r-this.state.z)},this.addEventListener("scroll",(()=>this.state.scroll_pos=[this.scrollLeft,this.scrollTop])),this.addEventListener("gesturestart",i(this,ki,"f").start),this.addEventListener("gesturechange",i(this,ki,"f").change)}center(){this.offset=Tt([0,0],Wt(Ct(this.vdim,Wt(this.cdim,this.state.z)),.5)),this.container.style.transform=`translate(${this.offset[0]}px, ${this.offset[1]}px) scale(${this.state.z})`}connectedCallback(){this.loop(),this.addEventListener("wheel",this.wheel,{passive:!1,capture:!0})}coordToLocal(t){const e=Mt(Ct(t,this.vloc),this.state.scroll_pos);return Et(Ct(e,this.offset),this.state.z)}static template(){let t=document.createElement("template");return t.innerHTML='\n            <style>\n                :host {\n                    position: relative;\n                    display: block;\n                    overflow: auto; \n                }\n                #container {\n                    transform-origin: 0 0;\n                    display: block;\n                    width: fit-content;\n                    height: fit-content;\n                }\n            </style>\n                <div id="container">\n                    <slot>\n                </div>\n            </div>\n        ',t}}yi=new WeakMap,ki=new WeakMap;const xi=()=>new Promise((t=>window.requestAnimationFrame(t)));customElements.define("p-p-z",$i),await navigator.serviceWorker.register("./service-worker.js"),document.body.addEventListener("wheel",(t=>{t.ctrlKey&&t.preventDefault()}),{passive:!1});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvdWkvc2FmYXJpLWZpeC50cyIsIi4uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2Nzcy10YWcuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L3JlYWN0aXZlLWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvbGl0LWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvY3VzdG9tLWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvc3RhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcXVlcnkuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvYmFzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3NpZ25lZC1lbGVtZW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmUuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlLWhlbHBlcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlcy9yZXBlYXQuanMiLCIuLi9zcmMvdXRpbC9tYXRoLnRzIiwiLi4vc3JjL3V0aWwvZXZlbnRzLnRzIiwiLi4vc3JjL3V0aWwvZmlsZXMudHMiLCIuLi9zcmMvZ2FtZS9nYW1lLWV2ZW50cy50cyIsIi4uL3NyYy91dGlsL29yZGVyZWRtYXAudHMiLCIuLi9zcmMvdXRpbC9pdGVyLnRzIiwiLi4vc3JjL3VpL2NhbnZhcy50cyIsIi4uL3NyYy91aS9idXltZWFjb2ZmZWUudHMiLCIuLi9zcmMvdXRpbC9zdHJlYW1zLnRzIiwiLi4vc3JjL2dhbWUvdGFibGV0b3AudHMiLCIuLi9zcmMvZ2FtZS9nYW1lLnRzIiwiLi4vc3JjL3V0aWwvbmV0LnRzIiwiLi4vc3JjL3V0aWwvcnRjLnRzIiwiLi4vc3JjL25ldC9wZWVyLnRzIiwiLi4vc3JjL25ldC9zaWduYWxlci50cyIsIi4uL3NyYy91dGlsL3NvY2tldC50cyIsIi4uL3NyYy9uZXQvcmVzb3VyY2VzL3Byb3RvY29sLnRzIiwiLi4vc3JjL25ldC9jbGllbnQudHMiLCIuLi9zcmMvbmV0L3NlcnZlci50cyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyIsIi4uL3NyYy91aS91dGlsL3dpdGgtdG9vbHRpcC50cyIsIi4uL3NyYy91aS91dGlsL3RvZ2dsZS50cyIsIi4uL3NyYy91aS9ob3N0LXRvZ2dsZS50cyIsIi4uL3NyYy91aS9jbGllbnQtc3RhdHVzLnRzIiwiLi4vc3JjL3V0aWwvcHJvbWlzZXMudHMiLCIuLi9zcmMvdWkvYXBwLnRzIiwiLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvaWYtZGVmaW5lZC5qcyIsIi4uL3NyYy91aS9wcHAudHMiLCIuLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBGb3IgdGhlIGxvdmUgb2YgZ29kLCB3aHkgaXMgdGhpcyBicm93c2VyIHNvIGphbmsgKi9cbmNvbnN0IGFwcEhlaWdodCA9ICgpID0+IHtcbiAgY29uc3QgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBkb2Muc3R5bGUuc2V0UHJvcGVydHkoXCItLWFwcC1oZWlnaHRcIiwgYCR7d2luZG93LmlubmVySGVpZ2h0fXB4YCk7XG59O1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgYXBwSGVpZ2h0KTtcbmFwcEhlaWdodCgpO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xyXG4gICAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xyXG4gICAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XHJcbiAgICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG59XHJcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD13aW5kb3cuU2hhZG93Um9vdCYmKHZvaWQgMD09PXdpbmRvdy5TaGFkeUNTU3x8d2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykmJlwiYWRvcHRlZFN0eWxlU2hlZXRzXCJpbiBEb2N1bWVudC5wcm90b3R5cGUmJlwicmVwbGFjZVwiaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUsZT1TeW1ib2woKSxuPW5ldyBXZWFrTWFwO2NsYXNzIHN7Y29uc3RydWN0b3IodCxuLHMpe2lmKHRoaXMuXyRjc3NSZXN1bHQkPSEwLHMhPT1lKXRocm93IEVycm9yKFwiQ1NTUmVzdWx0IGlzIG5vdCBjb25zdHJ1Y3RhYmxlLiBVc2UgYHVuc2FmZUNTU2Agb3IgYGNzc2AgaW5zdGVhZC5cIik7dGhpcy5jc3NUZXh0PXQsdGhpcy50PW59Z2V0IHN0eWxlU2hlZXQoKXtsZXQgZT10aGlzLm87Y29uc3Qgcz10aGlzLnQ7aWYodCYmdm9pZCAwPT09ZSl7Y29uc3QgdD12b2lkIDAhPT1zJiYxPT09cy5sZW5ndGg7dCYmKGU9bi5nZXQocykpLHZvaWQgMD09PWUmJigodGhpcy5vPWU9bmV3IENTU1N0eWxlU2hlZXQpLnJlcGxhY2VTeW5jKHRoaXMuY3NzVGV4dCksdCYmbi5zZXQocyxlKSl9cmV0dXJuIGV9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5jc3NUZXh0fX1jb25zdCBvPXQ9Pm5ldyBzKFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dCtcIlwiLHZvaWQgMCxlKSxyPSh0LC4uLm4pPT57Y29uc3Qgbz0xPT09dC5sZW5ndGg/dFswXTpuLnJlZHVjZSgoKGUsbixzKT0+ZSsodD0+e2lmKCEwPT09dC5fJGNzc1Jlc3VsdCQpcmV0dXJuIHQuY3NzVGV4dDtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdDt0aHJvdyBFcnJvcihcIlZhbHVlIHBhc3NlZCB0byAnY3NzJyBmdW5jdGlvbiBtdXN0IGJlIGEgJ2NzcycgZnVuY3Rpb24gcmVzdWx0OiBcIit0K1wiLiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dCB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuXCIpfSkobikrdFtzKzFdKSx0WzBdKTtyZXR1cm4gbmV3IHMobyx0LGUpfSxpPShlLG4pPT57dD9lLmFkb3B0ZWRTdHlsZVNoZWV0cz1uLm1hcCgodD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/dDp0LnN0eWxlU2hlZXQpKTpuLmZvckVhY2goKHQ9Pntjb25zdCBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxzPXdpbmRvdy5saXROb25jZTt2b2lkIDAhPT1zJiZuLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIscyksbi50ZXh0Q29udGVudD10LmNzc1RleHQsZS5hcHBlbmRDaGlsZChuKX0pKX0sUz10P3Q9PnQ6dD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/KHQ9PntsZXQgZT1cIlwiO2Zvcihjb25zdCBuIG9mIHQuY3NzUnVsZXMpZSs9bi5jc3NUZXh0O3JldHVybiBvKGUpfSkodCk6dDtleHBvcnR7cyBhcyBDU1NSZXN1bHQsaSBhcyBhZG9wdFN0eWxlcyxyIGFzIGNzcyxTIGFzIGdldENvbXBhdGlibGVTdHlsZSx0IGFzIHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyxvIGFzIHVuc2FmZUNTU307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MtdGFnLmpzLm1hcFxuIiwiaW1wb3J0e2dldENvbXBhdGlibGVTdHlsZSBhcyB0LGFkb3B0U3R5bGVzIGFzIGl9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7ZXhwb3J0e0NTU1Jlc3VsdCxhZG9wdFN0eWxlcyxjc3MsZ2V0Q29tcGF0aWJsZVN0eWxlLHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyx1bnNhZmVDU1N9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgcztjb25zdCBlPXdpbmRvdy50cnVzdGVkVHlwZXMscj1lP2UuZW1wdHlTY3JpcHQ6XCJcIixoPXdpbmRvdy5yZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQsbz17dG9BdHRyaWJ1dGUodCxpKXtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnQ9dD9yOm51bGw7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0PW51bGw9PXQ/dDpKU09OLnN0cmluZ2lmeSh0KX1yZXR1cm4gdH0sZnJvbUF0dHJpYnV0ZSh0LGkpe2xldCBzPXQ7c3dpdGNoKGkpe2Nhc2UgQm9vbGVhbjpzPW51bGwhPT10O2JyZWFrO2Nhc2UgTnVtYmVyOnM9bnVsbD09PXQ/bnVsbDpOdW1iZXIodCk7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0cnl7cz1KU09OLnBhcnNlKHQpfWNhdGNoKHQpe3M9bnVsbH19cmV0dXJuIHN9fSxuPSh0LGkpPT5pIT09dCYmKGk9PWl8fHQ9PXQpLGw9e2F0dHJpYnV0ZTohMCx0eXBlOlN0cmluZyxjb252ZXJ0ZXI6byxyZWZsZWN0OiExLGhhc0NoYW5nZWQ6bn07Y2xhc3MgYSBleHRlbmRzIEhUTUxFbGVtZW50e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl8kRWk9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMSx0aGlzLmhhc1VwZGF0ZWQ9ITEsdGhpcy5fJEVsPW51bGwsdGhpcy51KCl9c3RhdGljIGFkZEluaXRpYWxpemVyKHQpe3ZhciBpO251bGwhPT0oaT10aGlzLmgpJiZ2b2lkIDAhPT1pfHwodGhpcy5oPVtdKSx0aGlzLmgucHVzaCh0KX1zdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpe3RoaXMuZmluYWxpemUoKTtjb25zdCB0PVtdO3JldHVybiB0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLmZvckVhY2goKChpLHMpPT57Y29uc3QgZT10aGlzLl8kRXAocyxpKTt2b2lkIDAhPT1lJiYodGhpcy5fJEV2LnNldChlLHMpLHQucHVzaChlKSl9KSksdH1zdGF0aWMgY3JlYXRlUHJvcGVydHkodCxpPWwpe2lmKGkuc3RhdGUmJihpLmF0dHJpYnV0ZT0hMSksdGhpcy5maW5hbGl6ZSgpLHRoaXMuZWxlbWVudFByb3BlcnRpZXMuc2V0KHQsaSksIWkubm9BY2Nlc3NvciYmIXRoaXMucHJvdG90eXBlLmhhc093blByb3BlcnR5KHQpKXtjb25zdCBzPVwic3ltYm9sXCI9PXR5cGVvZiB0P1N5bWJvbCgpOlwiX19cIit0LGU9dGhpcy5nZXRQcm9wZXJ0eURlc2NyaXB0b3IodCxzLGkpO3ZvaWQgMCE9PWUmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnByb3RvdHlwZSx0LGUpfX1zdGF0aWMgZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQsaSxzKXtyZXR1cm57Z2V0KCl7cmV0dXJuIHRoaXNbaV19LHNldChlKXtjb25zdCByPXRoaXNbdF07dGhpc1tpXT1lLHRoaXMucmVxdWVzdFVwZGF0ZSh0LHIscyl9LGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwfX1zdGF0aWMgZ2V0UHJvcGVydHlPcHRpb25zKHQpe3JldHVybiB0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLmdldCh0KXx8bH1zdGF0aWMgZmluYWxpemUoKXtpZih0aGlzLmhhc093blByb3BlcnR5KFwiZmluYWxpemVkXCIpKXJldHVybiExO3RoaXMuZmluYWxpemVkPSEwO2NvbnN0IHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO2lmKHQuZmluYWxpemUoKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAodC5lbGVtZW50UHJvcGVydGllcyksdGhpcy5fJEV2PW5ldyBNYXAsdGhpcy5oYXNPd25Qcm9wZXJ0eShcInByb3BlcnRpZXNcIikpe2NvbnN0IHQ9dGhpcy5wcm9wZXJ0aWVzLGk9Wy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCldO2Zvcihjb25zdCBzIG9mIGkpdGhpcy5jcmVhdGVQcm9wZXJ0eShzLHRbc10pfXJldHVybiB0aGlzLmVsZW1lbnRTdHlsZXM9dGhpcy5maW5hbGl6ZVN0eWxlcyh0aGlzLnN0eWxlcyksITB9c3RhdGljIGZpbmFsaXplU3R5bGVzKGkpe2NvbnN0IHM9W107aWYoQXJyYXkuaXNBcnJheShpKSl7Y29uc3QgZT1uZXcgU2V0KGkuZmxhdCgxLzApLnJldmVyc2UoKSk7Zm9yKGNvbnN0IGkgb2YgZSlzLnVuc2hpZnQodChpKSl9ZWxzZSB2b2lkIDAhPT1pJiZzLnB1c2godChpKSk7cmV0dXJuIHN9c3RhdGljIF8kRXAodCxpKXtjb25zdCBzPWkuYXR0cmlidXRlO3JldHVybiExPT09cz92b2lkIDA6XCJzdHJpbmdcIj09dHlwZW9mIHM/czpcInN0cmluZ1wiPT10eXBlb2YgdD90LnRvTG93ZXJDYXNlKCk6dm9pZCAwfXUoKXt2YXIgdDt0aGlzLl8kRV89bmV3IFByb21pc2UoKHQ9PnRoaXMuZW5hYmxlVXBkYXRpbmc9dCkpLHRoaXMuXyRBTD1uZXcgTWFwLHRoaXMuXyRFZygpLHRoaXMucmVxdWVzdFVwZGF0ZSgpLG51bGw9PT0odD10aGlzLmNvbnN0cnVjdG9yLmgpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9PnQodGhpcykpKX1hZGRDb250cm9sbGVyKHQpe3ZhciBpLHM7KG51bGwhPT0oaT10aGlzLl8kRVMpJiZ2b2lkIDAhPT1pP2k6dGhpcy5fJEVTPVtdKS5wdXNoKHQpLHZvaWQgMCE9PXRoaXMucmVuZGVyUm9vdCYmdGhpcy5pc0Nvbm5lY3RlZCYmKG51bGw9PT0ocz10Lmhvc3RDb25uZWN0ZWQpfHx2b2lkIDA9PT1zfHxzLmNhbGwodCkpfXJlbW92ZUNvbnRyb2xsZXIodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFUyl8fHZvaWQgMD09PWl8fGkuc3BsaWNlKHRoaXMuXyRFUy5pbmRleE9mKHQpPj4+MCwxKX1fJEVnKCl7dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgodCxpKT0+e3RoaXMuaGFzT3duUHJvcGVydHkoaSkmJih0aGlzLl8kRWkuc2V0KGksdGhpc1tpXSksZGVsZXRlIHRoaXNbaV0pfSkpfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdDtjb25zdCBzPW51bGwhPT0odD10aGlzLnNoYWRvd1Jvb3QpJiZ2b2lkIDAhPT10P3Q6dGhpcy5hdHRhY2hTaGFkb3codGhpcy5jb25zdHJ1Y3Rvci5zaGFkb3dSb290T3B0aW9ucyk7cmV0dXJuIGkocyx0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRTdHlsZXMpLHN9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDt2b2lkIDA9PT10aGlzLnJlbmRlclJvb3QmJih0aGlzLnJlbmRlclJvb3Q9dGhpcy5jcmVhdGVSZW5kZXJSb290KCkpLHRoaXMuZW5hYmxlVXBkYXRpbmcoITApLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1lbmFibGVVcGRhdGluZyh0KXt9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3REaXNjb25uZWN0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSl9YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHQsaSxzKXt0aGlzLl8kQUsodCxzKX1fJEVPKHQsaSxzPWwpe3ZhciBlLHI7Y29uc3QgaD10aGlzLmNvbnN0cnVjdG9yLl8kRXAodCxzKTtpZih2b2lkIDAhPT1oJiYhMD09PXMucmVmbGVjdCl7Y29uc3Qgbj0obnVsbCE9PShyPW51bGw9PT0oZT1zLmNvbnZlcnRlcil8fHZvaWQgMD09PWU/dm9pZCAwOmUudG9BdHRyaWJ1dGUpJiZ2b2lkIDAhPT1yP3I6by50b0F0dHJpYnV0ZSkoaSxzLnR5cGUpO3RoaXMuXyRFbD10LG51bGw9PW4/dGhpcy5yZW1vdmVBdHRyaWJ1dGUoaCk6dGhpcy5zZXRBdHRyaWJ1dGUoaCxuKSx0aGlzLl8kRWw9bnVsbH19XyRBSyh0LGkpe3ZhciBzLGU7Y29uc3Qgcj10aGlzLmNvbnN0cnVjdG9yLGg9ci5fJEV2LmdldCh0KTtpZih2b2lkIDAhPT1oJiZ0aGlzLl8kRWwhPT1oKXtjb25zdCB0PXIuZ2V0UHJvcGVydHlPcHRpb25zKGgpLG49dC5jb252ZXJ0ZXIsbD1udWxsIT09KGU9bnVsbCE9PShzPW51bGw9PW4/dm9pZCAwOm4uZnJvbUF0dHJpYnV0ZSkmJnZvaWQgMCE9PXM/czpcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP246bnVsbCkmJnZvaWQgMCE9PWU/ZTpvLmZyb21BdHRyaWJ1dGU7dGhpcy5fJEVsPWgsdGhpc1toXT1sKGksdC50eXBlKSx0aGlzLl8kRWw9bnVsbH19cmVxdWVzdFVwZGF0ZSh0LGkscyl7bGV0IGU9ITA7dm9pZCAwIT09dCYmKCgocz1zfHx0aGlzLmNvbnN0cnVjdG9yLmdldFByb3BlcnR5T3B0aW9ucyh0KSkuaGFzQ2hhbmdlZHx8bikodGhpc1t0XSxpKT8odGhpcy5fJEFMLmhhcyh0KXx8dGhpcy5fJEFMLnNldCh0LGkpLCEwPT09cy5yZWZsZWN0JiZ0aGlzLl8kRWwhPT10JiYodm9pZCAwPT09dGhpcy5fJEVDJiYodGhpcy5fJEVDPW5ldyBNYXApLHRoaXMuXyRFQy5zZXQodCxzKSkpOmU9ITEpLCF0aGlzLmlzVXBkYXRlUGVuZGluZyYmZSYmKHRoaXMuXyRFXz10aGlzLl8kRWooKSl9YXN5bmMgXyRFaigpe3RoaXMuaXNVcGRhdGVQZW5kaW5nPSEwO3RyeXthd2FpdCB0aGlzLl8kRV99Y2F0Y2godCl7UHJvbWlzZS5yZWplY3QodCl9Y29uc3QgdD10aGlzLnNjaGVkdWxlVXBkYXRlKCk7cmV0dXJuIG51bGwhPXQmJmF3YWl0IHQsIXRoaXMuaXNVcGRhdGVQZW5kaW5nfXNjaGVkdWxlVXBkYXRlKCl7cmV0dXJuIHRoaXMucGVyZm9ybVVwZGF0ZSgpfXBlcmZvcm1VcGRhdGUoKXt2YXIgdDtpZighdGhpcy5pc1VwZGF0ZVBlbmRpbmcpcmV0dXJuO3RoaXMuaGFzVXBkYXRlZCx0aGlzLl8kRWkmJih0aGlzLl8kRWkuZm9yRWFjaCgoKHQsaSk9PnRoaXNbaV09dCkpLHRoaXMuXyRFaT12b2lkIDApO2xldCBpPSExO2NvbnN0IHM9dGhpcy5fJEFMO3RyeXtpPXRoaXMuc2hvdWxkVXBkYXRlKHMpLGk/KHRoaXMud2lsbFVwZGF0ZShzKSxudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RVcGRhdGUpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSksdGhpcy51cGRhdGUocykpOnRoaXMuXyRFaygpfWNhdGNoKHQpe3Rocm93IGk9ITEsdGhpcy5fJEVrKCksdH1pJiZ0aGlzLl8kQUUocyl9d2lsbFVwZGF0ZSh0KXt9XyRBRSh0KXt2YXIgaTtudWxsPT09KGk9dGhpcy5fJEVTKXx8dm9pZCAwPT09aXx8aS5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RVcGRhdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpLHRoaXMuaGFzVXBkYXRlZHx8KHRoaXMuaGFzVXBkYXRlZD0hMCx0aGlzLmZpcnN0VXBkYXRlZCh0KSksdGhpcy51cGRhdGVkKHQpfV8kRWsoKXt0aGlzLl8kQUw9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMX1nZXQgdXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5nZXRVcGRhdGVDb21wbGV0ZSgpfWdldFVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuXyRFX31zaG91bGRVcGRhdGUodCl7cmV0dXJuITB9dXBkYXRlKHQpe3ZvaWQgMCE9PXRoaXMuXyRFQyYmKHRoaXMuXyRFQy5mb3JFYWNoKCgodCxpKT0+dGhpcy5fJEVPKGksdGhpc1tpXSx0KSkpLHRoaXMuXyRFQz12b2lkIDApLHRoaXMuXyRFaygpfXVwZGF0ZWQodCl7fWZpcnN0VXBkYXRlZCh0KXt9fWEuZmluYWxpemVkPSEwLGEuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCxhLmVsZW1lbnRTdHlsZXM9W10sYS5zaGFkb3dSb290T3B0aW9ucz17bW9kZTpcIm9wZW5cIn0sbnVsbD09aHx8aCh7UmVhY3RpdmVFbGVtZW50OmF9KSwobnVsbCE9PShzPWdsb2JhbFRoaXMucmVhY3RpdmVFbGVtZW50VmVyc2lvbnMpJiZ2b2lkIDAhPT1zP3M6Z2xvYmFsVGhpcy5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjEuMy4zXCIpO2V4cG9ydHthIGFzIFJlYWN0aXZlRWxlbWVudCxvIGFzIGRlZmF1bHRDb252ZXJ0ZXIsbiBhcyBub3RFcXVhbH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdGl2ZS1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG52YXIgdDtjb25zdCBpPWdsb2JhbFRoaXMudHJ1c3RlZFR5cGVzLHM9aT9pLmNyZWF0ZVBvbGljeShcImxpdC1odG1sXCIse2NyZWF0ZUhUTUw6dD0+dH0pOnZvaWQgMCxlPWBsaXQkJHsoTWF0aC5yYW5kb20oKStcIlwiKS5zbGljZSg5KX0kYCxvPVwiP1wiK2Usbj1gPCR7b30+YCxsPWRvY3VtZW50LGg9KHQ9XCJcIik9PmwuY3JlYXRlQ29tbWVudCh0KSxyPXQ9Pm51bGw9PT10fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCxkPUFycmF5LmlzQXJyYXksdT10PT57dmFyIGk7cmV0dXJuIGQodCl8fFwiZnVuY3Rpb25cIj09dHlwZW9mKG51bGw9PT0oaT10KXx8dm9pZCAwPT09aT92b2lkIDA6aVtTeW1ib2wuaXRlcmF0b3JdKX0sYz0vPCg/OighLS18XFwvW15hLXpBLVpdKXwoXFwvP1thLXpBLVpdW14+XFxzXSopfChcXC8/JCkpL2csdj0vLS0+L2csYT0vPi9nLGY9Lz58WyBcdFxcblxmXFxyXSg/OihbXlxcc1wiJz49L10rKShbIFx0XFxuXGZcXHJdKj1bIFx0XFxuXGZcXHJdKig/OlteIFx0XFxuXGZcXHJcIidgPD49XXwoXCJ8Jyl8KSl8JCkvZyxfPS8nL2csbT0vXCIvZyxnPS9eKD86c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaSxwPXQ9PihpLC4uLnMpPT4oe18kbGl0VHlwZSQ6dCxzdHJpbmdzOmksdmFsdWVzOnN9KSwkPXAoMSkseT1wKDIpLGI9U3ltYm9sLmZvcihcImxpdC1ub0NoYW5nZVwiKSx3PVN5bWJvbC5mb3IoXCJsaXQtbm90aGluZ1wiKSxUPW5ldyBXZWFrTWFwLHg9KHQsaSxzKT0+e3ZhciBlLG87Y29uc3Qgbj1udWxsIT09KGU9bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1lP2U6aTtsZXQgbD1uLl8kbGl0UGFydCQ7aWYodm9pZCAwPT09bCl7Y29uc3QgdD1udWxsIT09KG89bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1vP286bnVsbDtuLl8kbGl0UGFydCQ9bD1uZXcgTihpLmluc2VydEJlZm9yZShoKCksdCksdCx2b2lkIDAsbnVsbCE9cz9zOnt9KX1yZXR1cm4gbC5fJEFJKHQpLGx9LEE9bC5jcmVhdGVUcmVlV2Fsa2VyKGwsMTI5LG51bGwsITEpLEM9KHQsaSk9Pntjb25zdCBvPXQubGVuZ3RoLTEsbD1bXTtsZXQgaCxyPTI9PT1pP1wiPHN2Zz5cIjpcIlwiLGQ9Yztmb3IobGV0IGk9MDtpPG87aSsrKXtjb25zdCBzPXRbaV07bGV0IG8sdSxwPS0xLCQ9MDtmb3IoOyQ8cy5sZW5ndGgmJihkLmxhc3RJbmRleD0kLHU9ZC5leGVjKHMpLG51bGwhPT11KTspJD1kLmxhc3RJbmRleCxkPT09Yz9cIiEtLVwiPT09dVsxXT9kPXY6dm9pZCAwIT09dVsxXT9kPWE6dm9pZCAwIT09dVsyXT8oZy50ZXN0KHVbMl0pJiYoaD1SZWdFeHAoXCI8L1wiK3VbMl0sXCJnXCIpKSxkPWYpOnZvaWQgMCE9PXVbM10mJihkPWYpOmQ9PT1mP1wiPlwiPT09dVswXT8oZD1udWxsIT1oP2g6YyxwPS0xKTp2b2lkIDA9PT11WzFdP3A9LTI6KHA9ZC5sYXN0SW5kZXgtdVsyXS5sZW5ndGgsbz11WzFdLGQ9dm9pZCAwPT09dVszXT9mOidcIic9PT11WzNdP206Xyk6ZD09PW18fGQ9PT1fP2Q9ZjpkPT09dnx8ZD09PWE/ZD1jOihkPWYsaD12b2lkIDApO2NvbnN0IHk9ZD09PWYmJnRbaSsxXS5zdGFydHNXaXRoKFwiLz5cIik/XCIgXCI6XCJcIjtyKz1kPT09Yz9zK246cD49MD8obC5wdXNoKG8pLHMuc2xpY2UoMCxwKStcIiRsaXQkXCIrcy5zbGljZShwKStlK3kpOnMrZSsoLTI9PT1wPyhsLnB1c2godm9pZCAwKSxpKTp5KX1jb25zdCB1PXIrKHRbb118fFwiPD8+XCIpKygyPT09aT9cIjwvc3ZnPlwiOlwiXCIpO2lmKCFBcnJheS5pc0FycmF5KHQpfHwhdC5oYXNPd25Qcm9wZXJ0eShcInJhd1wiKSl0aHJvdyBFcnJvcihcImludmFsaWQgdGVtcGxhdGUgc3RyaW5ncyBhcnJheVwiKTtyZXR1cm5bdm9pZCAwIT09cz9zLmNyZWF0ZUhUTUwodSk6dSxsXX07Y2xhc3MgRXtjb25zdHJ1Y3Rvcih7c3RyaW5nczp0LF8kbGl0VHlwZSQ6c30sbil7bGV0IGw7dGhpcy5wYXJ0cz1bXTtsZXQgcj0wLGQ9MDtjb25zdCB1PXQubGVuZ3RoLTEsYz10aGlzLnBhcnRzLFt2LGFdPUModCxzKTtpZih0aGlzLmVsPUUuY3JlYXRlRWxlbWVudCh2LG4pLEEuY3VycmVudE5vZGU9dGhpcy5lbC5jb250ZW50LDI9PT1zKXtjb25zdCB0PXRoaXMuZWwuY29udGVudCxpPXQuZmlyc3RDaGlsZDtpLnJlbW92ZSgpLHQuYXBwZW5kKC4uLmkuY2hpbGROb2Rlcyl9Zm9yKDtudWxsIT09KGw9QS5uZXh0Tm9kZSgpKSYmYy5sZW5ndGg8dTspe2lmKDE9PT1sLm5vZGVUeXBlKXtpZihsLmhhc0F0dHJpYnV0ZXMoKSl7Y29uc3QgdD1bXTtmb3IoY29uc3QgaSBvZiBsLmdldEF0dHJpYnV0ZU5hbWVzKCkpaWYoaS5lbmRzV2l0aChcIiRsaXQkXCIpfHxpLnN0YXJ0c1dpdGgoZSkpe2NvbnN0IHM9YVtkKytdO2lmKHQucHVzaChpKSx2b2lkIDAhPT1zKXtjb25zdCB0PWwuZ2V0QXR0cmlidXRlKHMudG9Mb3dlckNhc2UoKStcIiRsaXQkXCIpLnNwbGl0KGUpLGk9LyhbLj9AXSk/KC4qKS8uZXhlYyhzKTtjLnB1c2goe3R5cGU6MSxpbmRleDpyLG5hbWU6aVsyXSxzdHJpbmdzOnQsY3RvcjpcIi5cIj09PWlbMV0/TTpcIj9cIj09PWlbMV0/SDpcIkBcIj09PWlbMV0/STpTfSl9ZWxzZSBjLnB1c2goe3R5cGU6NixpbmRleDpyfSl9Zm9yKGNvbnN0IGkgb2YgdClsLnJlbW92ZUF0dHJpYnV0ZShpKX1pZihnLnRlc3QobC50YWdOYW1lKSl7Y29uc3QgdD1sLnRleHRDb250ZW50LnNwbGl0KGUpLHM9dC5sZW5ndGgtMTtpZihzPjApe2wudGV4dENvbnRlbnQ9aT9pLmVtcHR5U2NyaXB0OlwiXCI7Zm9yKGxldCBpPTA7aTxzO2krKylsLmFwcGVuZCh0W2ldLGgoKSksQS5uZXh0Tm9kZSgpLGMucHVzaCh7dHlwZToyLGluZGV4Oisrcn0pO2wuYXBwZW5kKHRbc10saCgpKX19fWVsc2UgaWYoOD09PWwubm9kZVR5cGUpaWYobC5kYXRhPT09byljLnB1c2goe3R5cGU6MixpbmRleDpyfSk7ZWxzZXtsZXQgdD0tMTtmb3IoOy0xIT09KHQ9bC5kYXRhLmluZGV4T2YoZSx0KzEpKTspYy5wdXNoKHt0eXBlOjcsaW5kZXg6cn0pLHQrPWUubGVuZ3RoLTF9cisrfX1zdGF0aWMgY3JlYXRlRWxlbWVudCh0LGkpe2NvbnN0IHM9bC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cmV0dXJuIHMuaW5uZXJIVE1MPXQsc319ZnVuY3Rpb24gUCh0LGkscz10LGUpe3ZhciBvLG4sbCxoO2lmKGk9PT1iKXJldHVybiBpO2xldCBkPXZvaWQgMCE9PWU/bnVsbD09PShvPXMuXyRDbCl8fHZvaWQgMD09PW8/dm9pZCAwOm9bZV06cy5fJEN1O2NvbnN0IHU9cihpKT92b2lkIDA6aS5fJGxpdERpcmVjdGl2ZSQ7cmV0dXJuKG51bGw9PWQ/dm9pZCAwOmQuY29uc3RydWN0b3IpIT09dSYmKG51bGw9PT0obj1udWxsPT1kP3ZvaWQgMDpkLl8kQU8pfHx2b2lkIDA9PT1ufHxuLmNhbGwoZCwhMSksdm9pZCAwPT09dT9kPXZvaWQgMDooZD1uZXcgdSh0KSxkLl8kQVQodCxzLGUpKSx2b2lkIDAhPT1lPyhudWxsIT09KGw9KGg9cykuXyRDbCkmJnZvaWQgMCE9PWw/bDpoLl8kQ2w9W10pW2VdPWQ6cy5fJEN1PWQpLHZvaWQgMCE9PWQmJihpPVAodCxkLl8kQVModCxpLnZhbHVlcyksZCxlKSksaX1jbGFzcyBWe2NvbnN0cnVjdG9yKHQsaSl7dGhpcy52PVtdLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFEPXQsdGhpcy5fJEFNPWl9Z2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFNLnBhcmVudE5vZGV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9cCh0KXt2YXIgaTtjb25zdHtlbDp7Y29udGVudDpzfSxwYXJ0czplfT10aGlzLl8kQUQsbz0obnVsbCE9PShpPW51bGw9PXQ/dm9pZCAwOnQuY3JlYXRpb25TY29wZSkmJnZvaWQgMCE9PWk/aTpsKS5pbXBvcnROb2RlKHMsITApO0EuY3VycmVudE5vZGU9bztsZXQgbj1BLm5leHROb2RlKCksaD0wLHI9MCxkPWVbMF07Zm9yKDt2b2lkIDAhPT1kOyl7aWYoaD09PWQuaW5kZXgpe2xldCBpOzI9PT1kLnR5cGU/aT1uZXcgTihuLG4ubmV4dFNpYmxpbmcsdGhpcyx0KToxPT09ZC50eXBlP2k9bmV3IGQuY3RvcihuLGQubmFtZSxkLnN0cmluZ3MsdGhpcyx0KTo2PT09ZC50eXBlJiYoaT1uZXcgTChuLHRoaXMsdCkpLHRoaXMudi5wdXNoKGkpLGQ9ZVsrK3JdfWghPT0obnVsbD09ZD92b2lkIDA6ZC5pbmRleCkmJihuPUEubmV4dE5vZGUoKSxoKyspfXJldHVybiBvfW0odCl7bGV0IGk9MDtmb3IoY29uc3QgcyBvZiB0aGlzLnYpdm9pZCAwIT09cyYmKHZvaWQgMCE9PXMuc3RyaW5ncz8ocy5fJEFJKHQscyxpKSxpKz1zLnN0cmluZ3MubGVuZ3RoLTIpOnMuXyRBSSh0W2ldKSksaSsrfX1jbGFzcyBOe2NvbnN0cnVjdG9yKHQsaSxzLGUpe3ZhciBvO3RoaXMudHlwZT0yLHRoaXMuXyRBSD13LHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFBPXQsdGhpcy5fJEFCPWksdGhpcy5fJEFNPXMsdGhpcy5vcHRpb25zPWUsdGhpcy5fJENnPW51bGw9PT0obz1udWxsPT1lP3ZvaWQgMDplLmlzQ29ubmVjdGVkKXx8dm9pZCAwPT09b3x8b31nZXQgXyRBVSgpe3ZhciB0LGk7cmV0dXJuIG51bGwhPT0oaT1udWxsPT09KHQ9dGhpcy5fJEFNKXx8dm9pZCAwPT09dD92b2lkIDA6dC5fJEFVKSYmdm9pZCAwIT09aT9pOnRoaXMuXyRDZ31nZXQgcGFyZW50Tm9kZSgpe2xldCB0PXRoaXMuXyRBQS5wYXJlbnROb2RlO2NvbnN0IGk9dGhpcy5fJEFNO3JldHVybiB2b2lkIDAhPT1pJiYxMT09PXQubm9kZVR5cGUmJih0PWkucGFyZW50Tm9kZSksdH1nZXQgc3RhcnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQX1nZXQgZW5kTm9kZSgpe3JldHVybiB0aGlzLl8kQUJ9XyRBSSh0LGk9dGhpcyl7dD1QKHRoaXMsdCxpKSxyKHQpP3Q9PT13fHxudWxsPT10fHxcIlwiPT09dD8odGhpcy5fJEFIIT09dyYmdGhpcy5fJEFSKCksdGhpcy5fJEFIPXcpOnQhPT10aGlzLl8kQUgmJnQhPT1iJiZ0aGlzLiQodCk6dm9pZCAwIT09dC5fJGxpdFR5cGUkP3RoaXMuVCh0KTp2b2lkIDAhPT10Lm5vZGVUeXBlP3RoaXMuayh0KTp1KHQpP3RoaXMuUyh0KTp0aGlzLiQodCl9TSh0LGk9dGhpcy5fJEFCKXtyZXR1cm4gdGhpcy5fJEFBLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsaSl9ayh0KXt0aGlzLl8kQUghPT10JiYodGhpcy5fJEFSKCksdGhpcy5fJEFIPXRoaXMuTSh0KSl9JCh0KXt0aGlzLl8kQUghPT13JiZyKHRoaXMuXyRBSCk/dGhpcy5fJEFBLm5leHRTaWJsaW5nLmRhdGE9dDp0aGlzLmsobC5jcmVhdGVUZXh0Tm9kZSh0KSksdGhpcy5fJEFIPXR9VCh0KXt2YXIgaTtjb25zdHt2YWx1ZXM6cyxfJGxpdFR5cGUkOmV9PXQsbz1cIm51bWJlclwiPT10eXBlb2YgZT90aGlzLl8kQUModCk6KHZvaWQgMD09PWUuZWwmJihlLmVsPUUuY3JlYXRlRWxlbWVudChlLmgsdGhpcy5vcHRpb25zKSksZSk7aWYoKG51bGw9PT0oaT10aGlzLl8kQUgpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLl8kQUQpPT09byl0aGlzLl8kQUgubShzKTtlbHNle2NvbnN0IHQ9bmV3IFYobyx0aGlzKSxpPXQucCh0aGlzLm9wdGlvbnMpO3QubShzKSx0aGlzLmsoaSksdGhpcy5fJEFIPXR9fV8kQUModCl7bGV0IGk9VC5nZXQodC5zdHJpbmdzKTtyZXR1cm4gdm9pZCAwPT09aSYmVC5zZXQodC5zdHJpbmdzLGk9bmV3IEUodCkpLGl9Uyh0KXtkKHRoaXMuXyRBSCl8fCh0aGlzLl8kQUg9W10sdGhpcy5fJEFSKCkpO2NvbnN0IGk9dGhpcy5fJEFIO2xldCBzLGU9MDtmb3IoY29uc3QgbyBvZiB0KWU9PT1pLmxlbmd0aD9pLnB1c2gocz1uZXcgTih0aGlzLk0oaCgpKSx0aGlzLk0oaCgpKSx0aGlzLHRoaXMub3B0aW9ucykpOnM9aVtlXSxzLl8kQUkobyksZSsrO2U8aS5sZW5ndGgmJih0aGlzLl8kQVIocyYmcy5fJEFCLm5leHRTaWJsaW5nLGUpLGkubGVuZ3RoPWUpfV8kQVIodD10aGlzLl8kQUEubmV4dFNpYmxpbmcsaSl7dmFyIHM7Zm9yKG51bGw9PT0ocz10aGlzLl8kQVApfHx2b2lkIDA9PT1zfHxzLmNhbGwodGhpcywhMSwhMCxpKTt0JiZ0IT09dGhpcy5fJEFCOyl7Y29uc3QgaT10Lm5leHRTaWJsaW5nO3QucmVtb3ZlKCksdD1pfX1zZXRDb25uZWN0ZWQodCl7dmFyIGk7dm9pZCAwPT09dGhpcy5fJEFNJiYodGhpcy5fJENnPXQsbnVsbD09PShpPXRoaXMuXyRBUCl8fHZvaWQgMD09PWl8fGkuY2FsbCh0aGlzLHQpKX19Y2xhc3MgU3tjb25zdHJ1Y3Rvcih0LGkscyxlLG8pe3RoaXMudHlwZT0xLHRoaXMuXyRBSD13LHRoaXMuXyRBTj12b2lkIDAsdGhpcy5lbGVtZW50PXQsdGhpcy5uYW1lPWksdGhpcy5fJEFNPWUsdGhpcy5vcHRpb25zPW8scy5sZW5ndGg+Mnx8XCJcIiE9PXNbMF18fFwiXCIhPT1zWzFdPyh0aGlzLl8kQUg9QXJyYXkocy5sZW5ndGgtMSkuZmlsbChuZXcgU3RyaW5nKSx0aGlzLnN0cmluZ3M9cyk6dGhpcy5fJEFIPXd9Z2V0IHRhZ05hbWUoKXtyZXR1cm4gdGhpcy5lbGVtZW50LnRhZ05hbWV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBSSh0LGk9dGhpcyxzLGUpe2NvbnN0IG89dGhpcy5zdHJpbmdzO2xldCBuPSExO2lmKHZvaWQgMD09PW8pdD1QKHRoaXMsdCxpLDApLG49IXIodCl8fHQhPT10aGlzLl8kQUgmJnQhPT1iLG4mJih0aGlzLl8kQUg9dCk7ZWxzZXtjb25zdCBlPXQ7bGV0IGwsaDtmb3IodD1vWzBdLGw9MDtsPG8ubGVuZ3RoLTE7bCsrKWg9UCh0aGlzLGVbcytsXSxpLGwpLGg9PT1iJiYoaD10aGlzLl8kQUhbbF0pLG58fChuPSFyKGgpfHxoIT09dGhpcy5fJEFIW2xdKSxoPT09dz90PXc6dCE9PXcmJih0Kz0obnVsbCE9aD9oOlwiXCIpK29bbCsxXSksdGhpcy5fJEFIW2xdPWh9biYmIWUmJnRoaXMuQyh0KX1DKHQpe3Q9PT13P3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTp0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSxudWxsIT10P3Q6XCJcIil9fWNsYXNzIE0gZXh0ZW5kcyBTe2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9M31DKHQpe3RoaXMuZWxlbWVudFt0aGlzLm5hbWVdPXQ9PT13P3ZvaWQgMDp0fX1jb25zdCBrPWk/aS5lbXB0eVNjcmlwdDpcIlwiO2NsYXNzIEggZXh0ZW5kcyBTe2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9NH1DKHQpe3QmJnQhPT13P3RoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLGspOnRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKX19Y2xhc3MgSSBleHRlbmRzIFN7Y29uc3RydWN0b3IodCxpLHMsZSxvKXtzdXBlcih0LGkscyxlLG8pLHRoaXMudHlwZT01fV8kQUkodCxpPXRoaXMpe3ZhciBzO2lmKCh0PW51bGwhPT0ocz1QKHRoaXMsdCxpLDApKSYmdm9pZCAwIT09cz9zOncpPT09YilyZXR1cm47Y29uc3QgZT10aGlzLl8kQUgsbz10PT09dyYmZSE9PXd8fHQuY2FwdHVyZSE9PWUuY2FwdHVyZXx8dC5vbmNlIT09ZS5vbmNlfHx0LnBhc3NpdmUhPT1lLnBhc3NpdmUsbj10IT09dyYmKGU9PT13fHxvKTtvJiZ0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyxlKSxuJiZ0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyx0KSx0aGlzLl8kQUg9dH1oYW5kbGVFdmVudCh0KXt2YXIgaSxzO1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuXyRBSD90aGlzLl8kQUguY2FsbChudWxsIT09KHM9bnVsbD09PShpPXRoaXMub3B0aW9ucyl8fHZvaWQgMD09PWk/dm9pZCAwOmkuaG9zdCkmJnZvaWQgMCE9PXM/czp0aGlzLmVsZW1lbnQsdCk6dGhpcy5fJEFILmhhbmRsZUV2ZW50KHQpfX1jbGFzcyBMe2NvbnN0cnVjdG9yKHQsaSxzKXt0aGlzLmVsZW1lbnQ9dCx0aGlzLnR5cGU9Nix0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBTT1pLHRoaXMub3B0aW9ucz1zfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQUkodCl7UCh0aGlzLHQpfX1jb25zdCBSPXtMOlwiJGxpdCRcIixQOmUsVjpvLEk6MSxOOkMsUjpWLGo6dSxEOlAsSDpOLEY6UyxPOkgsVzpJLEI6TSxaOkx9LHo9d2luZG93LmxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQ7bnVsbD09enx8eihFLE4pLChudWxsIT09KHQ9Z2xvYmFsVGhpcy5saXRIdG1sVmVyc2lvbnMpJiZ2b2lkIDAhPT10P3Q6Z2xvYmFsVGhpcy5saXRIdG1sVmVyc2lvbnM9W10pLnB1c2goXCIyLjIuNlwiKTtleHBvcnR7UiBhcyBfJExILCQgYXMgaHRtbCxiIGFzIG5vQ2hhbmdlLHcgYXMgbm90aGluZyx4IGFzIHJlbmRlcix5IGFzIHN2Z307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtaHRtbC5qcy5tYXBcbiIsImltcG9ydHtSZWFjdGl2ZUVsZW1lbnQgYXMgdH1mcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtleHBvcnQqZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI7aW1wb3J0e3JlbmRlciBhcyBlLG5vQ2hhbmdlIGFzIGl9ZnJvbVwibGl0LWh0bWxcIjtleHBvcnQqZnJvbVwibGl0LWh0bWxcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL3ZhciBsLG87Y29uc3Qgcj10O2NsYXNzIHMgZXh0ZW5kcyB0e2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnJlbmRlck9wdGlvbnM9e2hvc3Q6dGhpc30sdGhpcy5fJERvPXZvaWQgMH1jcmVhdGVSZW5kZXJSb290KCl7dmFyIHQsZTtjb25zdCBpPXN1cGVyLmNyZWF0ZVJlbmRlclJvb3QoKTtyZXR1cm4gbnVsbCE9PSh0PShlPXRoaXMucmVuZGVyT3B0aW9ucykucmVuZGVyQmVmb3JlKSYmdm9pZCAwIT09dHx8KGUucmVuZGVyQmVmb3JlPWkuZmlyc3RDaGlsZCksaX11cGRhdGUodCl7Y29uc3QgaT10aGlzLnJlbmRlcigpO3RoaXMuaGFzVXBkYXRlZHx8KHRoaXMucmVuZGVyT3B0aW9ucy5pc0Nvbm5lY3RlZD10aGlzLmlzQ29ubmVjdGVkKSxzdXBlci51cGRhdGUodCksdGhpcy5fJERvPWUoaSx0aGlzLnJlbmRlclJvb3QsdGhpcy5yZW5kZXJPcHRpb25zKX1jb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O3N1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCksbnVsbD09PSh0PXRoaXMuXyREbyl8fHZvaWQgMD09PXR8fHQuc2V0Q29ubmVjdGVkKCEwKX1kaXNjb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O3N1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCksbnVsbD09PSh0PXRoaXMuXyREbyl8fHZvaWQgMD09PXR8fHQuc2V0Q29ubmVjdGVkKCExKX1yZW5kZXIoKXtyZXR1cm4gaX19cy5maW5hbGl6ZWQ9ITAscy5fJGxpdEVsZW1lbnQkPSEwLG51bGw9PT0obD1nbG9iYWxUaGlzLmxpdEVsZW1lbnRIeWRyYXRlU3VwcG9ydCl8fHZvaWQgMD09PWx8fGwuY2FsbChnbG9iYWxUaGlzLHtMaXRFbGVtZW50OnN9KTtjb25zdCBuPWdsb2JhbFRoaXMubGl0RWxlbWVudFBvbHlmaWxsU3VwcG9ydDtudWxsPT1ufHxuKHtMaXRFbGVtZW50OnN9KTtjb25zdCBoPXtfJEFLOih0LGUsaSk9Pnt0Ll8kQUsoZSxpKX0sXyRBTDp0PT50Ll8kQUx9OyhudWxsIT09KG89Z2xvYmFsVGhpcy5saXRFbGVtZW50VmVyc2lvbnMpJiZ2b2lkIDAhPT1vP286Z2xvYmFsVGhpcy5saXRFbGVtZW50VmVyc2lvbnM9W10pLnB1c2goXCIzLjIuMVwiKTtleHBvcnR7cyBhcyBMaXRFbGVtZW50LHIgYXMgVXBkYXRpbmdFbGVtZW50LGggYXMgXyRMRX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtZWxlbWVudC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3Qgbj1uPT5lPT5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlPygobixlKT0+KHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUobixlKSxlKSkobixlKTooKG4sZSk9Pntjb25zdHtraW5kOnQsZWxlbWVudHM6aX09ZTtyZXR1cm57a2luZDp0LGVsZW1lbnRzOmksZmluaXNoZXIoZSl7d2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShuLGUpfX19KShuLGUpO2V4cG9ydHtuIGFzIGN1c3RvbUVsZW1lbnR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VzdG9tLWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IGk9KGksZSk9PlwibWV0aG9kXCI9PT1lLmtpbmQmJmUuZGVzY3JpcHRvciYmIShcInZhbHVlXCJpbiBlLmRlc2NyaXB0b3IpP3suLi5lLGZpbmlzaGVyKG4pe24uY3JlYXRlUHJvcGVydHkoZS5rZXksaSl9fTp7a2luZDpcImZpZWxkXCIsa2V5OlN5bWJvbCgpLHBsYWNlbWVudDpcIm93blwiLGRlc2NyaXB0b3I6e30sb3JpZ2luYWxLZXk6ZS5rZXksaW5pdGlhbGl6ZXIoKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluaXRpYWxpemVyJiYodGhpc1tlLmtleV09ZS5pbml0aWFsaXplci5jYWxsKHRoaXMpKX0sZmluaXNoZXIobil7bi5jcmVhdGVQcm9wZXJ0eShlLmtleSxpKX19O2Z1bmN0aW9uIGUoZSl7cmV0dXJuKG4sdCk9PnZvaWQgMCE9PXQ/KChpLGUsbik9PntlLmNvbnN0cnVjdG9yLmNyZWF0ZVByb3BlcnR5KG4saSl9KShlLG4sdCk6aShlLG4pfWV4cG9ydHtlIGFzIHByb3BlcnR5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BlcnR5LmpzLm1hcFxuIiwiaW1wb3J0e3Byb3BlcnR5IGFzIHJ9ZnJvbVwiLi9wcm9wZXJ0eS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovZnVuY3Rpb24gdCh0KXtyZXR1cm4gcih7Li4udCxzdGF0ZTohMH0pfWV4cG9ydHt0IGFzIHN0YXRlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLmpzLm1hcFxuIiwiaW1wb3J0e2RlY29yYXRlUHJvcGVydHkgYXMgb31mcm9tXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2Z1bmN0aW9uIGkoaSxuKXtyZXR1cm4gbyh7ZGVzY3JpcHRvcjpvPT57Y29uc3QgdD17Z2V0KCl7dmFyIG8sbjtyZXR1cm4gbnVsbCE9PShuPW51bGw9PT0obz10aGlzLnJlbmRlclJvb3QpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnF1ZXJ5U2VsZWN0b3IoaSkpJiZ2b2lkIDAhPT1uP246bnVsbH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9O2lmKG4pe2NvbnN0IG49XCJzeW1ib2xcIj09dHlwZW9mIG8/U3ltYm9sKCk6XCJfX1wiK287dC5nZXQ9ZnVuY3Rpb24oKXt2YXIgbyx0O3JldHVybiB2b2lkIDA9PT10aGlzW25dJiYodGhpc1tuXT1udWxsIT09KHQ9bnVsbD09PShvPXRoaXMucmVuZGVyUm9vdCl8fHZvaWQgMD09PW8/dm9pZCAwOm8ucXVlcnlTZWxlY3RvcihpKSkmJnZvaWQgMCE9PXQ/dDpudWxsKSx0aGlzW25dfX1yZXR1cm4gdH19KX1leHBvcnR7aSBhcyBxdWVyeX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeS5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgZT0oZSx0LG8pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbyxlKX0sdD0oZSx0KT0+KHtraW5kOlwibWV0aG9kXCIscGxhY2VtZW50OlwicHJvdG90eXBlXCIsa2V5OnQua2V5LGRlc2NyaXB0b3I6ZX0pLG89KHtmaW5pc2hlcjplLGRlc2NyaXB0b3I6dH0pPT4obyxuKT0+e3ZhciByO2lmKHZvaWQgMD09PW4pe2NvbnN0IG49bnVsbCE9PShyPW8ub3JpZ2luYWxLZXkpJiZ2b2lkIDAhPT1yP3I6by5rZXksaT1udWxsIT10P3traW5kOlwibWV0aG9kXCIscGxhY2VtZW50OlwicHJvdG90eXBlXCIsa2V5Om4sZGVzY3JpcHRvcjp0KG8ua2V5KX06ey4uLm8sa2V5Om59O3JldHVybiBudWxsIT1lJiYoaS5maW5pc2hlcj1mdW5jdGlvbih0KXtlKHQsbil9KSxpfXtjb25zdCByPW8uY29uc3RydWN0b3I7dm9pZCAwIT09dCYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sbix0KG4pKSxudWxsPT1lfHxlKHIsbil9fTtleHBvcnR7byBhcyBkZWNvcmF0ZVByb3BlcnR5LGUgYXMgbGVnYWN5UHJvdG90eXBlTWV0aG9kLHQgYXMgc3RhbmRhcmRQcm90b3R5cGVNZXRob2R9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5qcy5tYXBcbiIsImltcG9ydHtkZWNvcmF0ZVByb3BlcnR5IGFzIG99ZnJvbVwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgbjtjb25zdCBlPW51bGwhPShudWxsPT09KG49d2luZG93LkhUTUxTbG90RWxlbWVudCl8fHZvaWQgMD09PW4/dm9pZCAwOm4ucHJvdG90eXBlLmFzc2lnbmVkRWxlbWVudHMpPyhvLG4pPT5vLmFzc2lnbmVkRWxlbWVudHMobik6KG8sbik9Pm8uYXNzaWduZWROb2RlcyhuKS5maWx0ZXIoKG89Pm8ubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSkpO2Z1bmN0aW9uIGwobil7Y29uc3R7c2xvdDpsLHNlbGVjdG9yOnR9PW51bGwhPW4/bjp7fTtyZXR1cm4gbyh7ZGVzY3JpcHRvcjpvPT4oe2dldCgpe3ZhciBvO2NvbnN0IHI9XCJzbG90XCIrKGw/YFtuYW1lPSR7bH1dYDpcIjpub3QoW25hbWVdKVwiKSxpPW51bGw9PT0obz10aGlzLnJlbmRlclJvb3QpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnF1ZXJ5U2VsZWN0b3Iocikscz1udWxsIT1pP2UoaSxuKTpbXTtyZXR1cm4gdD9zLmZpbHRlcigobz0+by5tYXRjaGVzKHQpKSk6c30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KX0pfWV4cG9ydHtsIGFzIHF1ZXJ5QXNzaWduZWRFbGVtZW50c307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeS1hc3NpZ25lZC1lbGVtZW50cy5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD17QVRUUklCVVRFOjEsQ0hJTEQ6MixQUk9QRVJUWTozLEJPT0xFQU5fQVRUUklCVVRFOjQsRVZFTlQ6NSxFTEVNRU5UOjZ9LGU9dD0+KC4uLmUpPT4oe18kbGl0RGlyZWN0aXZlJDp0LHZhbHVlczplfSk7Y2xhc3MgaXtjb25zdHJ1Y3Rvcih0KXt9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBVCh0LGUsaSl7dGhpcy5fJEN0PXQsdGhpcy5fJEFNPWUsdGhpcy5fJENpPWl9XyRBUyh0LGUpe3JldHVybiB0aGlzLnVwZGF0ZSh0LGUpfXVwZGF0ZSh0LGUpe3JldHVybiB0aGlzLnJlbmRlciguLi5lKX19ZXhwb3J0e2kgYXMgRGlyZWN0aXZlLHQgYXMgUGFydFR5cGUsZSBhcyBkaXJlY3RpdmV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlLmpzLm1hcFxuIiwiaW1wb3J0e18kTEggYXMgb31mcm9tXCIuL2xpdC1odG1sLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdHtIOml9PW8sdD1vPT5udWxsPT09b3x8XCJvYmplY3RcIiE9dHlwZW9mIG8mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG8sbj17SFRNTDoxLFNWRzoyfSx2PShvLGkpPT57dmFyIHQsbjtyZXR1cm4gdm9pZCAwPT09aT92b2lkIDAhPT0obnVsbD09PSh0PW8pfHx2b2lkIDA9PT10P3ZvaWQgMDp0Ll8kbGl0VHlwZSQpOihudWxsPT09KG49byl8fHZvaWQgMD09PW4/dm9pZCAwOm4uXyRsaXRUeXBlJCk9PT1pfSxsPW89Pnt2YXIgaTtyZXR1cm4gdm9pZCAwIT09KG51bGw9PT0oaT1vKXx8dm9pZCAwPT09aT92b2lkIDA6aS5fJGxpdERpcmVjdGl2ZSQpfSxkPW89Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPW8pfHx2b2lkIDA9PT1pP3ZvaWQgMDppLl8kbGl0RGlyZWN0aXZlJH0scj1vPT52b2lkIDA9PT1vLnN0cmluZ3MsZT0oKT0+ZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSx1PShvLHQsbik9Pnt2YXIgdjtjb25zdCBsPW8uXyRBQS5wYXJlbnROb2RlLGQ9dm9pZCAwPT09dD9vLl8kQUI6dC5fJEFBO2lmKHZvaWQgMD09PW4pe2NvbnN0IHQ9bC5pbnNlcnRCZWZvcmUoZSgpLGQpLHY9bC5pbnNlcnRCZWZvcmUoZSgpLGQpO249bmV3IGkodCx2LG8sby5vcHRpb25zKX1lbHNle2NvbnN0IGk9bi5fJEFCLm5leHRTaWJsaW5nLHQ9bi5fJEFNLHI9dCE9PW87aWYocil7bGV0IGk7bnVsbD09PSh2PW4uXyRBUSl8fHZvaWQgMD09PXZ8fHYuY2FsbChuLG8pLG4uXyRBTT1vLHZvaWQgMCE9PW4uXyRBUCYmKGk9by5fJEFVKSE9PXQuXyRBVSYmbi5fJEFQKGkpfWlmKGkhPT1kfHxyKXtsZXQgbz1uLl8kQUE7Zm9yKDtvIT09aTspe2NvbnN0IGk9by5uZXh0U2libGluZztsLmluc2VydEJlZm9yZShvLGQpLG89aX19fXJldHVybiBufSxjPShvLGksdD1vKT0+KG8uXyRBSShpLHQpLG8pLGY9e30scz0obyxpPWYpPT5vLl8kQUg9aSxhPW89Pm8uXyRBSCxtPW89Pnt2YXIgaTtudWxsPT09KGk9by5fJEFQKXx8dm9pZCAwPT09aXx8aS5jYWxsKG8sITEsITApO2xldCB0PW8uXyRBQTtjb25zdCBuPW8uXyRBQi5uZXh0U2libGluZztmb3IoO3QhPT1uOyl7Y29uc3Qgbz10Lm5leHRTaWJsaW5nO3QucmVtb3ZlKCksdD1vfX0scD1vPT57by5fJEFSKCl9O2V4cG9ydHtuIGFzIFRlbXBsYXRlUmVzdWx0VHlwZSxwIGFzIGNsZWFyUGFydCxhIGFzIGdldENvbW1pdHRlZFZhbHVlLGQgYXMgZ2V0RGlyZWN0aXZlQ2xhc3MsdSBhcyBpbnNlcnRQYXJ0LGwgYXMgaXNEaXJlY3RpdmVSZXN1bHQsdCBhcyBpc1ByaW1pdGl2ZSxyIGFzIGlzU2luZ2xlRXhwcmVzc2lvbix2IGFzIGlzVGVtcGxhdGVSZXN1bHQsbSBhcyByZW1vdmVQYXJ0LGMgYXMgc2V0Q2hpbGRQYXJ0VmFsdWUscyBhcyBzZXRDb21taXR0ZWRWYWx1ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJlY3RpdmUtaGVscGVycy5qcy5tYXBcbiIsImltcG9ydHtub0NoYW5nZSBhcyBlfWZyb21cIi4uL2xpdC1odG1sLmpzXCI7aW1wb3J0e2RpcmVjdGl2ZSBhcyBzLERpcmVjdGl2ZSBhcyB0LFBhcnRUeXBlIGFzIHJ9ZnJvbVwiLi4vZGlyZWN0aXZlLmpzXCI7aW1wb3J0e2dldENvbW1pdHRlZFZhbHVlIGFzIGwsc2V0Q2hpbGRQYXJ0VmFsdWUgYXMgbyxpbnNlcnRQYXJ0IGFzIGkscmVtb3ZlUGFydCBhcyBuLHNldENvbW1pdHRlZFZhbHVlIGFzIGZ9ZnJvbVwiLi4vZGlyZWN0aXZlLWhlbHBlcnMuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdT0oZSxzLHQpPT57Y29uc3Qgcj1uZXcgTWFwO2ZvcihsZXQgbD1zO2w8PXQ7bCsrKXIuc2V0KGVbbF0sbCk7cmV0dXJuIHJ9LGM9cyhjbGFzcyBleHRlbmRzIHR7Y29uc3RydWN0b3IoZSl7aWYoc3VwZXIoZSksZS50eXBlIT09ci5DSElMRCl0aHJvdyBFcnJvcihcInJlcGVhdCgpIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGV4dCBleHByZXNzaW9uc1wiKX1kdChlLHMsdCl7bGV0IHI7dm9pZCAwPT09dD90PXM6dm9pZCAwIT09cyYmKHI9cyk7Y29uc3QgbD1bXSxvPVtdO2xldCBpPTA7Zm9yKGNvbnN0IHMgb2YgZSlsW2ldPXI/cihzLGkpOmksb1tpXT10KHMsaSksaSsrO3JldHVybnt2YWx1ZXM6byxrZXlzOmx9fXJlbmRlcihlLHMsdCl7cmV0dXJuIHRoaXMuZHQoZSxzLHQpLnZhbHVlc311cGRhdGUocyxbdCxyLGNdKXt2YXIgZDtjb25zdCBhPWwocykse3ZhbHVlczpwLGtleXM6dn09dGhpcy5kdCh0LHIsYyk7aWYoIUFycmF5LmlzQXJyYXkoYSkpcmV0dXJuIHRoaXMudXQ9dixwO2NvbnN0IGg9bnVsbCE9PShkPXRoaXMudXQpJiZ2b2lkIDAhPT1kP2Q6dGhpcy51dD1bXSxtPVtdO2xldCB5LHgsaj0wLGs9YS5sZW5ndGgtMSx3PTAsQT1wLmxlbmd0aC0xO2Zvcig7ajw9ayYmdzw9QTspaWYobnVsbD09PWFbal0paisrO2Vsc2UgaWYobnVsbD09PWFba10pay0tO2Vsc2UgaWYoaFtqXT09PXZbd10pbVt3XT1vKGFbal0scFt3XSksaisrLHcrKztlbHNlIGlmKGhba109PT12W0FdKW1bQV09byhhW2tdLHBbQV0pLGstLSxBLS07ZWxzZSBpZihoW2pdPT09dltBXSltW0FdPW8oYVtqXSxwW0FdKSxpKHMsbVtBKzFdLGFbal0pLGorKyxBLS07ZWxzZSBpZihoW2tdPT09dlt3XSltW3ddPW8oYVtrXSxwW3ddKSxpKHMsYVtqXSxhW2tdKSxrLS0sdysrO2Vsc2UgaWYodm9pZCAwPT09eSYmKHk9dSh2LHcsQSkseD11KGgsaixrKSkseS5oYXMoaFtqXSkpaWYoeS5oYXMoaFtrXSkpe2NvbnN0IGU9eC5nZXQodlt3XSksdD12b2lkIDAhPT1lP2FbZV06bnVsbDtpZihudWxsPT09dCl7Y29uc3QgZT1pKHMsYVtqXSk7byhlLHBbd10pLG1bd109ZX1lbHNlIG1bd109byh0LHBbd10pLGkocyxhW2pdLHQpLGFbZV09bnVsbDt3Kyt9ZWxzZSBuKGFba10pLGstLTtlbHNlIG4oYVtqXSksaisrO2Zvcig7dzw9QTspe2NvbnN0IGU9aShzLG1bQSsxXSk7byhlLHBbd10pLG1bdysrXT1lfWZvcig7ajw9azspe2NvbnN0IGU9YVtqKytdO251bGwhPT1lJiZuKGUpfXJldHVybiB0aGlzLnV0PXYsZihzLG0pLGV9fSk7ZXhwb3J0e2MgYXMgcmVwZWF0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGVhdC5qcy5tYXBcbiIsImV4cG9ydCB0eXBlIFBvaW50ID0gW251bWJlciwgbnVtYmVyXTtcblxuZXhwb3J0IGNvbnN0IGFkZF9wID0gKGE6IFBvaW50LCBiOiBQb2ludCk6IFBvaW50ID0+IFthWzBdICsgYlswXSwgYVsxXSArIGJbMV1dO1xuZXhwb3J0IGNvbnN0IGFkZF9jID0gKGE6IFBvaW50LCBjOiBudW1iZXIpOiBQb2ludCA9PiBhZGRfcChhLCBbYywgY10pO1xuXG5leHBvcnQgY29uc3Qgc3ViX3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogUG9pbnQgPT4gW2FbMF0gLSBiWzBdLCBhWzFdIC0gYlsxXV07XG5cbmV4cG9ydCBjb25zdCBtdWxfYyA9IChhOiBQb2ludCwgYzogbnVtYmVyKTogUG9pbnQgPT4gW2FbMF0gKiBjLCBhWzFdICogY107XG5leHBvcnQgY29uc3QgbXVsX3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogUG9pbnQgPT4gW2FbMF0gKiBiWzBdLCBhWzFdICogYlsxXV07XG5cbmV4cG9ydCBjb25zdCBkaXZfcCA9IChhOiBQb2ludCwgYjogUG9pbnQpOiBQb2ludCA9PiBbYVswXSAvIGJbMF0sIGFbMV0gLyBiWzFdXTtcbmV4cG9ydCBjb25zdCBkaXZfYyA9IChhOiBQb2ludCwgYzogbnVtYmVyKTogUG9pbnQgPT4gW2FbMF0gLyBjLCBhWzFdIC8gY107XG5cbmV4cG9ydCBjb25zdCBndF9wID0gKGE6IFBvaW50LCBiOiBQb2ludCk6IGJvb2xlYW4gPT4gYVswXSA+IGJbMF0gJiYgYVsxXSA+IGJbMV07XG5leHBvcnQgY29uc3QgbHRfcCA9IChhOiBQb2ludCwgYjogUG9pbnQpOiBib29sZWFuID0+IGFbMF0gPCBiWzBdICYmIGFbMV0gPCBiWzFdO1xuXG5leHBvcnQgY29uc3QgbWF4X3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogUG9pbnQgPT4gW01hdGgubWF4KGFbMF0sIGJbMF0pLCBNYXRoLm1heChhWzFdLCBiWzFdKV07XG5leHBvcnQgY29uc3QgbWluX3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogUG9pbnQgPT4gW01hdGgubWluKGFbMF0sIGJbMF0pLCBNYXRoLm1pbihhWzFdLCBiWzFdKV07XG5leHBvcnQgY29uc3QgY2xhbXBfcCA9IChtaW46IFBvaW50LCBtYXg6IFBvaW50LCBwOiBQb2ludCk6IFBvaW50ID0+IG1heF9wKG1pbiwgbWluX3AobWF4LCBwKSk7XG5leHBvcnQgY29uc3QgYWJzX3AgPSAoYTogUG9pbnQpOiBQb2ludCA9PiBbTWF0aC5hYnMoYVswXSksIE1hdGguYWJzKGFbMV0pXTtcblxuZXhwb3J0IGNvbnN0IGVxX3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogYm9vbGVhbiA9PiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV07XG5cbmV4cG9ydCB0eXBlIEJCb3ggPSB7IHN0YXJ0OiBQb2ludDsgZW5kOiBQb2ludCB9O1xuZXhwb3J0IGNvbnN0IGNvbnRhaW5zID0gKGE6IEJCb3gsIHA6IFBvaW50KTogYm9vbGVhbiA9PiBsdF9wKGEuc3RhcnQsIHApICYmIGx0X3AocCwgYS5lbmQpO1xuXG5leHBvcnQgY29uc3QgaW50ZXJzZWN0ID0gKGE6IEJCb3gsIGI6IEJCb3gpOiBib29sZWFuID0+XG4gICEoYi5zdGFydFswXSA+IGEuZW5kWzBdIHx8IGIuZW5kWzBdIDwgYS5zdGFydFswXSB8fCBiLnN0YXJ0WzFdID4gYS5lbmRbMV0gfHwgYi5lbmRbMV0gPCBhLnN0YXJ0WzFdKTtcbiIsImV4cG9ydCBjb25zdCBpc19wcmltYXJ5X3RvdWNoID0gKGV2OiBQb2ludGVyRXZlbnQpOiBib29sZWFuID0+IGV2LmlzUHJpbWFyeSAmJiBldi5wb2ludGVyVHlwZSA9PT0gXCJ0b3VjaFwiO1xuXG5leHBvcnQgY29uc3QgaXNfcHJpbWFyeV9kb3duID0gKGV2OiBQb2ludGVyRXZlbnQpOiBib29sZWFuID0+IGV2LmlzUHJpbWFyeSAmJiAoZXYucG9pbnRlclR5cGUgPT09IFwidG91Y2hcIiB8fCBldi5wcmVzc3VyZSA+IDApO1xuZXhwb3J0IGNvbnN0IGlzX21vdXNlX2Rvd24gPSAoZXY6IFBvaW50ZXJFdmVudCk6IGJvb2xlYW4gPT4gZXYucG9pbnRlclR5cGUgPT09IFwibW91c2VcIiAmJiBldi5idXR0b25zID09PSAxICYmIGV2LnByZXNzdXJlID4gMDtcbmV4cG9ydCBjb25zdCBpc19ub25fdG91Y2hfZHJhZyA9IChldjogUG9pbnRlckV2ZW50KTogYm9vbGVhbiA9PiBldi5wb2ludGVyVHlwZSAhPT0gXCJ0b3VjaFwiICYmIGV2LmlzUHJpbWFyeSAmJiBldi5wcmVzc3VyZSA+IDA7XG5cbmV4cG9ydCBjb25zdCBzdG9wX2V2ID0gKGV2OiBFdmVudCkgPT4ge1xuICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbn07XG5cbnR5cGUgQ3VzdG9tRXZlbnRUeXBlPFQgZXh0ZW5kcyBFdmVudD4gPSBUIGV4dGVuZHMgQ3VzdG9tRXZlbnQ8aW5mZXIgVT4gPyBVIDogbmV2ZXI7XG5leHBvcnQgY29uc3Qgd2luZG93X2V2ID0gPE4gZXh0ZW5kcyBrZXlvZiBXaW5kb3dFdmVudE1hcD4obmFtZTogTiwgZGV0YWlsOiBDdXN0b21FdmVudFR5cGU8V2luZG93RXZlbnRNYXBbTl0+KTogV2luZG93RXZlbnRNYXBbTl0gPT5cbiAgbmV3IEN1c3RvbUV2ZW50KG5hbWUsIHsgZGV0YWlsIH0pIGFzIGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBFdmVudEVtaXR0ZXI8RXZlbnRNYXA+IGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICBhZGRFdmVudExpc3RlbmVyKHR5cGU6IHN0cmluZywgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QsIG9wdGlvbnM/OiBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMpOiB2b2lkO1xuICBhZGRFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBFdmVudE1hcD4odHlwZTogSywgbGlzdGVuZXI6IChldjogRXZlbnRNYXBbS10pID0+IGFueSwgb3B0aW9ucz86IGJvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyk6IHZvaWQ7XG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCwgb3B0aW9ucz86IGJvb2xlYW4gfCBFdmVudExpc3RlbmVyT3B0aW9ucyk6IHZvaWQ7XG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI8SyBleHRlbmRzIGtleW9mIEV2ZW50TWFwPih0eXBlOiBLLCBsaXN0ZW5lcjogKGV2OiBFdmVudE1hcFtLXSkgPT4gYW55LCBvcHRpb25zPzogYm9vbGVhbiB8IEV2ZW50TGlzdGVuZXJPcHRpb25zKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhaXRGb3I8SyBleHRlbmRzIHN0cmluZywgRSwgRVQgZXh0ZW5kcyBFdmVudEVtaXR0ZXI8eyBLOiBFIH0+Pih0eXBlOiBLLCB0YXJnZXQ6IEVUKTogUHJvbWlzZTxFPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTxFPigocmVzb2x2ZSkgPT4ge1xuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIChlKSA9PiByZXNvbHZlKGUgYXMgYW55KSwgeyBvbmNlOiB0cnVlIH0pO1xuICB9KTtcbn1cbiIsImV4cG9ydCB0eXBlIExvY2FsT3JSZW1vdGVJbWFnZSA9IEJsb2IgfCBzdHJpbmc7XG5cbmV4cG9ydCBjb25zdCBnZXRJbWFnZSA9IGFzeW5jIChldjogRHJhZ0V2ZW50KTogUHJvbWlzZTxMb2NhbE9yUmVtb3RlSW1hZ2U+ID0+IHtcbiAgbGV0IGRhdGFJdGVtcyA9IGV2LmRhdGFUcmFuc2Zlcj8uaXRlbXMgPz8gW107XG4gIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJEYXRhSXRlbXNcIiwgZGF0YUl0ZW1zLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhSXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGFJdGVtc1tpXS50eXBlKTtcbiAgICAgIGlmIChkYXRhSXRlbXNbaV0udHlwZS5zdGFydHNXaXRoKFwiaW1hZ2UvXCIpKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKGRhdGFJdGVtc1tpXS5nZXRBc0ZpbGUoKSEpO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGFJdGVtc1tpXS50eXBlID09PSBcInRleHQvaHRtbFwiKSB7XG4gICAgICAgIGRhdGFJdGVtc1tpXS5nZXRBc1N0cmluZygocykgPT4gcmVzb2x2ZShleHRyYWN0VVJMRnJvbUhUTUwocykhKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhSXRlbXNbaV0udHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LW1vei1maWxlLXByb21pc2UtdXJsXCIpIHtcbiAgICAgICAgZGF0YUl0ZW1zW2ldLmdldEFzU3RyaW5nKChzKSA9PiB7XG4gICAgICAgICAgdXJsOiByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChkYXRhSXRlbXNbaV0ua2luZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBsZXQgdCA9IGRhdGFJdGVtc1tpXS50eXBlO1xuICAgICAgICBkYXRhSXRlbXNbaV0uZ2V0QXNTdHJpbmcoKHMpID0+IGNvbnNvbGUubG9nKHQsIHMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlamVjdChcIk5vIGNvbXBhdGlibGUgZHJvcCB0eXBlIGZvdW5kXCIpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGV4dHJhY3RVUkxGcm9tSFRNTChodG1sOiBzdHJpbmcpOiBMb2NhbE9yUmVtb3RlSW1hZ2UgfCBudWxsIHtcbiAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpO1xuICBjb25zdCB1cmwgPSBkb2MucXVlcnlTZWxlY3RvcihcImltZ1wiKT8uc3JjO1xuICByZXR1cm4gdXJsID8/IG51bGw7XG59XG4iLCJpbXBvcnQgeyBQZWVySWQgfSBmcm9tIFwiLi4vbmV0L3BlZXJcIjtcbmltcG9ydCB7IFBvaW50IH0gZnJvbSBcIi4uL3V0aWwvbWF0aFwiO1xuaW1wb3J0IHsgU2VyaWFsaXplZFRhYmxldG9wIH0gZnJvbSBcIi4vdGFibGV0b3BcIjtcblxuZXhwb3J0IHR5cGUgR2FtZUV2ZW50ID0geyByZW1vdGU/OiBQZWVySWQgfSAmIChcbiAgfCBUb2tlbkFkZGVkXG4gIHwgVG9rZW5NYW5pcHVsYXRlZFxuICB8IFRva2VuUmVtb3ZlZFxuICB8IEdyaWRSZXNpemVkXG4gIHwgU3RhdGVTeW5jXG4gIHwgQmFja2dyb3VuZFxuICB8IFRva2VuUmVvcmRlclxuICB8IENhbGxvdXRcbik7XG5cbmV4cG9ydCB0eXBlIFRva2VuQWRkZWQgPSB7XG4gIHR5cGU6IFwidG9rZW4tYWRkZWRcIjtcbiAgaWQ6IHN0cmluZztcbiAgbG9jOiBQb2ludDtcbiAgZGltOiBQb2ludDtcbiAgdXJsOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBUb2tlbk1hbmlwdWxhdGVkID0ge1xuICB0eXBlOiBcInRva2VuLW1hbmlwdWxhdGVkXCI7XG4gIHRva2Vuczoge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbG9jOiBQb2ludDtcbiAgICBkaW06IFBvaW50O1xuICAgIHI6IG51bWJlcjtcbiAgfVtdO1xufTtcblxuZXhwb3J0IHR5cGUgVG9rZW5SZW1vdmVkID0ge1xuICB0eXBlOiBcInRva2VuLXJlbW92ZWRcIjtcbiAgaWRzOiBzdHJpbmdbXTtcbn07XG5cbmV4cG9ydCB0eXBlIEdyaWRSZXNpemVkID0ge1xuICB0eXBlOiBcImdyaWQtcmVzaXplZFwiO1xuICBkaW06IFBvaW50O1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZVN5bmMge1xuICB0eXBlOiBcInN0YXRlLXN5bmNcIjtcbiAgdGFibGV0b3A6IFNlcmlhbGl6ZWRUYWJsZXRvcDtcbn1cblxuZXhwb3J0IHR5cGUgQ2FsbG91dCA9IHtcbiAgdHlwZTogXCJjYWxsb3V0XCI7XG4gIGxvYzogUG9pbnQ7XG59O1xuXG5leHBvcnQgdHlwZSBUb2tlblJlb3JkZXIgPSB7XG4gIHR5cGU6IFwidG9rZW4tcmVvcmRlclwiO1xuICBpZDogc3RyaW5nO1xuICBpZHg6IFwidXBcIiB8IFwiZG93blwiIHwgXCJ0b3BcIiB8IFwiYm90dG9tXCI7XG59O1xuXG5leHBvcnQgdHlwZSBUb2tlbkRhdGEgPSB7XG4gIGxvYzogUG9pbnQ7XG4gIGRpbTogUG9pbnQ7XG4gIHVybDogc3RyaW5nO1xuICBpZDogc3RyaW5nO1xuICByOiBudW1iZXI7IC8vIGRlZ3JlZXMhXG59O1xuXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kID0ge1xuICB0eXBlOiBcImJnXCI7XG4gIHVybDogc3RyaW5nIHwgbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCB1dWlkdjQgPSAoKSA9PiB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgcmV0dXJuIChbMWU3XSArIC0xZTMgKyAtNGUzICsgLThlMyArIC0xZTExKS5yZXBsYWNlKC9bMDE4XS9nLCAoYykgPT5cbiAgICAoYyBeIChjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDEpKVswXSAmICgxNSA+PiAoYyAvIDQpKSkpLnRvU3RyaW5nKDE2KVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdhbWVfZXZlbnQgPSAoZGV0YWlsOiBHYW1lRXZlbnQpOiBDdXN0b21FdmVudDxHYW1lRXZlbnQ+ID0+IHtcbiAgcmV0dXJuIG5ldyBDdXN0b21FdmVudChcImdhbWUtZXZlbnRcIiwgeyBkZXRhaWwgfSk7XG59O1xuIiwiZXhwb3J0IGNsYXNzIE9yZGVyZWRNYXA8SywgVj4ge1xuICBvcmRlcjogVltdID0gW107XG4gIG1hcDogTWFwPEssIG51bWJlcj4gPSBuZXcgTWFwKCk7XG5cbiAgZ2V0KGtleTogSyk6IFYgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGlkeCA9IHRoaXMubWFwLmdldChrZXkpO1xuICAgIGlmIChpZHggIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMub3JkZXJbaWR4XTtcbiAgfVxuXG4gIGhhcyhrZXk6IEspOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzKGtleSk7XG4gIH1cblxuICBhZGQoa2V5OiBLLCB2YWx1ZTogVikge1xuICAgIGlmICghdGhpcy5tYXAuaGFzKGtleSkpIHtcbiAgICAgIHRoaXMubWFwLnNldChrZXksIHRoaXMub3JkZXIubGVuZ3RoKTtcbiAgICAgIHRoaXMub3JkZXIucHVzaCh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0X2luZGV4KGtleSwgdGhpcy5vcmRlci5sZW5ndGggLSAxKTtcbiAgICB9XG4gIH1cblxuICBkZWxldGUoa2V5OiBLKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaWR4ID0gdGhpcy5tYXAuZ2V0KGtleSk7XG4gICAgaWYgKGlkeCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG5cbiAgICB0aGlzLm9yZGVyLnNwbGljZShpZHgsIDEpO1xuICAgIHRoaXMubWFwLmRlbGV0ZShrZXkpO1xuICAgIHRoaXMubWFwLmZvckVhY2goKHZhbCwga2V5KSA9PiB7XG4gICAgICBpZiAodmFsID49IGlkeCkge1xuICAgICAgICB0aGlzLm1hcC5zZXQoa2V5LCB2YWwgLSAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGluZGV4KGtleTogSyk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpO1xuICB9XG5cbiAgc2V0X2luZGV4KGtleTogSywgaTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaWR4ID0gdGhpcy5tYXAuZ2V0KGtleSk7XG4gICAgaWYgKGlkeCA9PT0gdW5kZWZpbmVkIHx8IGkgPj0gdGhpcy5vcmRlci5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCB2YWwgPSB0aGlzLm9yZGVyLnNwbGljZShpZHgsIDEpWzBdO1xuICAgIHRoaXMub3JkZXIuc3BsaWNlKGksIDAsIHZhbCk7XG4gICAgdGhpcy5tYXAuZm9yRWFjaCgodmFsLCBrZXkpID0+IHtcbiAgICAgIGlmICh2YWwgPj0gaSkge1xuICAgICAgICB0aGlzLm1hcC5zZXQoa2V5LCB2YWwgKyAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLm1hcC5zZXQoa2V5LCBpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhbHVlcygpOiBJdGVyYWJsZTxWPiB7XG4gICAgcmV0dXJuIHRoaXMub3JkZXI7XG4gIH1cblxuICBnZXQgc2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLm1hcC5zaXplO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgZmlyc3QgPSA8VD4oaXRlcjogSXRlcmFibGU8VD4pOiBUIHwgdW5kZWZpbmVkID0+IGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSgpLm5leHQoKS52YWx1ZTtcbmV4cG9ydCBmdW5jdGlvbiogbWFwPFQsIFU+KGl0ZXI6IEl0ZXJhYmxlPFQ+LCBmOiAoaXRlbTogVCkgPT4gVSk6IEl0ZXJhYmxlPFU+IHtcbiAgZm9yIChsZXQgaXRlbSBvZiBpdGVyKSB7XG4gICAgeWllbGQgZihpdGVtKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY3NzLCBodG1sLCBMaXRFbGVtZW50LCBzdmcgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSwgcXVlcnksIHN0YXRlIH0gZnJvbSBcImxpdC9kZWNvcmF0b3JzLmpzXCI7XG5pbXBvcnQgeyByZXBlYXQgfSBmcm9tIFwibGl0L2RpcmVjdGl2ZXMvcmVwZWF0LmpzXCI7XG5pbXBvcnQgeyBhYnNfcCwgYWRkX2MsIGFkZF9wLCBCQm94LCBjbGFtcF9wLCBkaXZfYywgZXFfcCwgaW50ZXJzZWN0LCBtYXhfcCwgbWluX3AsIG11bF9jLCBQb2ludCwgc3ViX3AgfSBmcm9tIFwiLi4vdXRpbC9tYXRoXCI7XG5pbXBvcnQgeyBpc19tb3VzZV9kb3duLCBpc19wcmltYXJ5X2Rvd24sIHN0b3BfZXYsIHdpbmRvd19ldiB9IGZyb20gXCIuLi91dGlsL2V2ZW50c1wiO1xuaW1wb3J0IHsgZ2V0SW1hZ2UsIExvY2FsT3JSZW1vdGVJbWFnZSB9IGZyb20gXCIuLi91dGlsL2ZpbGVzXCI7XG5pbXBvcnQgeyBHYW1lRXZlbnQsIGdhbWVfZXZlbnQsIFN0YXRlU3luYywgVG9rZW5EYXRhLCB1dWlkdjQgfSBmcm9tIFwiLi4vZ2FtZS9nYW1lLWV2ZW50c1wiO1xuaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuLi9nYW1lL2dhbWVcIjtcbmltcG9ydCB7IE9yZGVyZWRNYXAgfSBmcm9tIFwiLi4vdXRpbC9vcmRlcmVkbWFwXCI7XG5pbXBvcnQgeyBtYXAgfSBmcm9tIFwiLi4vdXRpbC9pdGVyXCI7XG5pbXBvcnQgeyBQUFogfSBmcm9tIFwiLi9wcHBcIjtcblxuY29uc3QgUElYRUxfU0NBTEUgPSAxO1xuY29uc3QgR1JJRF9TSVpFID0gMjQgKiBQSVhFTF9TQ0FMRTsgLy8gc2NhbGUtZGVwZW5kZW50IHB4XG5jb25zdCBMSU5FX1dJRFRIID0gMC41ICogUElYRUxfU0NBTEU7IC8vIHNjYWxlLWRlcGVuZGVudCBweFxuY29uc3QgSEFORExFX1NJWkUgPSA4ICogUElYRUxfU0NBTEU7IC8vIHNjYWxlLWluZGVwZW5kZW50IHB4XG5jb25zdCBDQU5WQVNfUkFESVVTID0gNSAqIFBJWEVMX1NDQUxFO1xuY29uc3QgUk9UQVRFX0RJU1RBTkNFID0gMTAgKiBQSVhFTF9TQ0FMRTtcbmNvbnN0IFJPVEFURV9TSVpFID0gSEFORExFX1NJWkUgLyAyO1xuY29uc3QgUEFERElORyA9IDIwICogUElYRUxfU0NBTEU7XG5jb25zdCBDQUxMT1VUX0RJTSA9IEdSSURfU0laRTtcblxudHlwZSBTZWxlY3Rpb25Cb3ggPSB7XG4gIGluZGV4OiBudW1iZXI7XG4gIGJib3g6IEJCb3g7XG59O1xuQGN1c3RvbUVsZW1lbnQoXCJiZy1jYW52YXNcIilcbmV4cG9ydCBjbGFzcyBDYW52YXMgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgQHByb3BlcnR5KHsgdHlwZTogTnVtYmVyIH0pXG4gIHJlYWRvbmx5IHdpZHRoID0gMzA7XG5cbiAgQHByb3BlcnR5KHsgdHlwZTogTnVtYmVyIH0pXG4gIHJlYWRvbmx5IGhlaWdodCA9IDQwO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIHJlYWRvbmx5IGJnPzogc3RyaW5nO1xuXG4gIEBwcm9wZXJ0eSh7IGF0dHJpYnV0ZTogZmFsc2UgfSlcbiAgcmVhZG9ubHkgdG9rZW5zOiBPcmRlcmVkTWFwPHN0cmluZywgVG9rZW5EYXRhPiA9IG5ldyBPcmRlcmVkTWFwKCk7XG5cbiAgQHByb3BlcnR5KHsgYXR0cmlidXRlOiBmYWxzZSB9KVxuICByZWFkb25seSBzZWxlY3Rpb246IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuXG4gIEBwcm9wZXJ0eSh7IGF0dHJpYnV0ZTogZmFsc2UgfSlcbiAgcmVhZG9ubHkgY2FsbG91dHM6IFNldDxQb2ludD4gPSBuZXcgU2V0KCk7XG5cbiAgI3Nib3g/OiB7IHBpbjogUG9pbnQ7IG1vdXNlOiBQb2ludCB9O1xuXG4gIEBwcm9wZXJ0eSh7IGF0dHJpYnV0ZTogZmFsc2UgfSlcbiAgc2VsX2Jib3g/OiBCQm94O1xuXG4gIEBxdWVyeShcInJvb3RcIiwgdHJ1ZSlcbiAgcm9vdD86IFNWR0VsZW1lbnQ7XG5cbiAgQHF1ZXJ5KFwicC1wLXpcIiwgdHJ1ZSlcbiAgdmlld3BvcnQ/OiBQUFo7XG5cbiAgI21vdXNlX2xvYz86IFBpY2s8TW91c2VFdmVudCwgXCJjbGllbnRYXCIgfCBcImNsaWVudFlcIj47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGdldCAjZGltKCkge1xuICAgIHJldHVybiBtdWxfYyhbdGhpcy53aWR0aCwgdGhpcy5oZWlnaHRdLCBHUklEX1NJWkUpO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLiNrZXlkb3duKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy4ja2V5ZG93bik7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGxldCBbd2lkdGgsIGhlaWdodF0gPSB0aGlzLiNkaW07XG4gICAgbGV0IHNiYm94ID0gdGhpcy4jc2VsZWN0aW9uX2Jib3goKTtcbiAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGlvbi5zaXplID09PSAxID8gdGhpcy50b2tlbnMuZ2V0KHRoaXMuc2VsZWN0aW9uLnZhbHVlcygpLm5leHQoKS52YWx1ZSkgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8cC1wLXpcbiAgICAgICAgQHBvaW50ZXJkb3duPSR7dGhpcy4jc2JveF9zdGFydH1cbiAgICAgICAgQHBvaW50ZXJtb3ZlPSR7dGhpcy4jc2JveF9tb3ZlfVxuICAgICAgICBAcG9pbnRlcnVwPSR7dGhpcy4jc2JveF9zdG9wfVxuICAgICAgICBAcG9pbnRlcmxlYXZlPSR7KCkgPT4gKHRoaXMuI21vdXNlX2xvYyA9IHVuZGVmaW5lZCl9XG4gICAgICAgIEBkcmFnc3RhcnQ9JHtzdG9wX2V2fVxuICAgICAgICBAZHJhZ2VudGVyPSR7dGhpcy4jZHJhZ19lbnRlcn1cbiAgICAgICAgQGRyYWdsZWF2ZT0ke3RoaXMuI2RyYWdfbGVhdmV9XG4gICAgICAgIEBkcmFnc3RvcD0ke3RoaXMuI2RyYWdfbGVhdmV9XG4gICAgICAgIEBkcmFnb3Zlcj0ke3RoaXMuI2RyYWdfb3Zlcn1cbiAgICAgICAgQGRyb3A9JHt0aGlzLiNkcm9wfVxuICAgICAgPlxuICAgICAgICA8c3ZnIGlkPVwicm9vdFwiIHdpZHRoPSR7d2lkdGggKyBQQURESU5HICogMn0gaGVpZ2h0PSR7aGVpZ2h0ICsgUEFERElORyAqIDJ9PlxuICAgICAgICAgIDxkZWZzPlxuICAgICAgICAgICAgPGNsaXBQYXRoIGlkPVwiY2FudmFzQ2xpcFwiPlxuICAgICAgICAgICAgICA8cmVjdCB3aWR0aD0ke3dpZHRofSBoZWlnaHQ9JHtoZWlnaHR9IHJ4PSR7Q0FOVkFTX1JBRElVU30+PC9yZWN0PlxuICAgICAgICAgICAgPC9jbGlwUGF0aD5cbiAgICAgICAgICAgIDxwYXR0ZXJuIGlkPVwiaG9yaXpcIiB4PSR7LUxJTkVfV0lEVEggLyAyfSB5PSR7LUxJTkVfV0lEVEggLyAyfSB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9JHtHUklEX1NJWkV9IHBhdHRlcm5Vbml0cz1cInVzZXJTcGFjZU9uVXNlXCI+XG4gICAgICAgICAgICAgIDxyZWN0IGNsYXNzPVwiZ3JpZGxpbmVcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9JHtMSU5FX1dJRFRIfSBmaWxsPVwiI2QzZDNkM1wiIHNoYXBlLXJlbmRlcmluZz1cImdlb21ldHJpY1ByZWNpc2lvblwiPjwvcmVjdD5cbiAgICAgICAgICAgIDwvcGF0dGVybj5cbiAgICAgICAgICAgIDxwYXR0ZXJuIGlkPVwidmVydFwiIHg9JHstTElORV9XSURUSCAvIDJ9IHk9JHstTElORV9XSURUSCAvIDJ9IHdpZHRoPSR7R1JJRF9TSVpFfSBoZWlnaHQ9XCIxMDAlXCIgcGF0dGVyblVuaXRzPVwidXNlclNwYWNlT25Vc2VcIj5cbiAgICAgICAgICAgICAgPHJlY3QgY2xhc3M9XCJncmlkbGluZVwiIHdpZHRoPSR7TElORV9XSURUSH0gaGVpZ2h0PVwiMTAwJVwiIGZpbGw9XCIjZDNkM2QzXCIgc2hhcGUtcmVuZGVyaW5nPVwiZ2VvbWV0cmljIHByZWNpc2lvblwiPjwvcmVjdD5cbiAgICAgICAgICAgIDwvcGF0dGVybj5cbiAgICAgICAgICAgIDxwYXR0ZXJuIGlkPVwibG9hZGluZ1wiIHBhdHRlcm5Vbml0cz1cInVzZXJTcGFjZU9uVXNlXCIgd2lkdGg9XCIxXCIgaGVpZ2h0PVwiMVwiPlxuICAgICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjFcIiBoZWlnaHQ9XCIxXCIgZmlsbD1cIndoaXRlXCI+PC9yZWN0PlxuICAgICAgICAgICAgICA8aW1hZ2UgaHJlZj1cImFzc2V0cy9sb2FkaW5nLnN2Z1wiIHdpZHRoPVwiMVwiIGhlaWdodD1cIjFcIiAvPlxuICAgICAgICAgICAgPC9wYXR0ZXJuPlxuICAgICAgICAgIDwvZGVmcz5cbiAgICAgICAgICA8c3ZnIHg9JHtQQURESU5HfSB5PSR7UEFERElOR30gd2lkdGg9JHt3aWR0aH0gaGVpZ2h0PSR7aGVpZ2h0fSBpZD1cInN1cmZhY2VcIj5cbiAgICAgICAgICAgIDxyZWN0IGNsYXNzPVwic2hhZG93XCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIGZpbGw9XCJ3aGl0ZVwiIHJ4PSR7Q0FOVkFTX1JBRElVU30+PC9yZWN0PlxuICAgICAgICAgICAgPHN2ZyBjbGlwLXBhdGg9XCJ1cmwoI2NhbnZhc0NsaXApXCI+XG4gICAgICAgICAgICAgICR7dGhpcy5iZ1xuICAgICAgICAgICAgICAgID8gc3ZnYDxpbWFnZSBocmVmPSR7dGhpcy5iZ30gd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIHByZXNlcnZlQXNwZWN0UmF0aW89XCJub25lXCIgc3R5bGU9XCJ3aWxsLWNoYW5nZTogdHJhbnNmb3JtXCI+PC9pbWFnZT5gXG4gICAgICAgICAgICAgICAgOiBudWxsfVxuICAgICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgZmlsbD1cInVybCgjaG9yaXopXCIgb3BhY2l0eT1cIjAuNzVcIiBwb2ludGVyLWV2ZW50cz1cIm5vbmVcIj48L3JlY3Q+XG4gICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBmaWxsPVwidXJsKCN2ZXJ0KVwiIG9wYWNpdHk9XCIwLjc1XCIgcG9pbnRlci1ldmVudHM9XCJub25lXCI+PC9yZWN0PlxuICAgICAgICAgICAgICA8c3ZnIGlkPVwidG9rZW5zXCI+XG4gICAgICAgICAgICAgICAgJHtyZXBlYXQoXG4gICAgICAgICAgICAgICAgICB0aGlzLnRva2Vucy52YWx1ZXMoKSxcbiAgICAgICAgICAgICAgICAgICh0KSA9PiB0LmlkLFxuICAgICAgICAgICAgICAgICAgKHQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFt3aWR0aCwgaGVpZ2h0XSA9IGFkZF9jKHQuZGltLCAtTElORV9XSURUSCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFt4LCB5XSA9IGFkZF9jKHQubG9jLCBMSU5FX1dJRFRIIC8gMik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMSAxXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg9JHt4fVxuICAgICAgICAgICAgICAgICAgICAgICAgeT0ke3l9XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0ke3dpZHRofVxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSR7aGVpZ2h0fVxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cInRyYW5zcGFyZW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW89XCJub25lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBwb2ludGVyZG93bj0ke3RoaXMuI2ZvY3VzfVxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ke3QuaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwidG9rZW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIxXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj0ke3QudXJsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ke2B0cmFuc2Zvcm06IHJvdGF0ZSgke3Qucn1kZWcpYH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UtcmVuZGVyaW5nPVwib3B0aW1pemVTcGVlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW89XCJub25lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQGxvYWQ9JHttYXJrX2xvYWRlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgID48L2ltYWdlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIxXCIgaGVpZ2h0PVwiMVwiIGNsYXNzPVwibG9hZGluZ1wiPjwvcmVjdD5cbiAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cblxuICAgICAgICAgICAgICAgICAgICAgICR7c2Jib3g/LmluZGV4ID09PSBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzdmdgPHJlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInNlbGVjdGlvbi1kcmFnLXRhcmdldFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeD0ke3NiYm94LmJib3guc3RhcnRbMF19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeT0ke3NiYm94LmJib3guc3RhcnRbMV19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9JHtzYmJveC5iYm94LmVuZFswXSAtIHNiYm94LmJib3guc3RhcnRbMF19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSR7c2Jib3guYmJveC5lbmRbMV0gLSBzYmJveC5iYm94LnN0YXJ0WzFdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCJ0cmFuc3BhcmVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQHBvaW50ZXJkb3duPSR7dGhpcy4jc2VsZWN0aW9uX2RyYWdfc3RhcnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQHBvaW50ZXJtb3ZlPSR7dGhpcy4jc2VsZWN0aW9uX2RyYWd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQHBvaW50ZXJ1cD0ke3RoaXMuI3NlbGVjdGlvbl9kcmFnX2VuZH1cbiAgICAgICAgICAgICAgICAgICAgICAgID48L3JlY3Q+YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsfVxuICAgICAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAke3RoaXMuX2Ryb3BfaGludFxuICAgICAgICAgICAgICAgID8gc3ZnYFxuICAgICAgICAgICAgPHJlY3RcbiAgICAgICAgICAgICAgICBjbGFzcz1cImRyb3BfaGludFwiXG4gICAgICAgICAgICAgICAgeD0ke3RoaXMuX2Ryb3BfaGludFswXX1cbiAgICAgICAgICAgICAgICB5PSR7dGhpcy5fZHJvcF9oaW50WzFdfVxuICAgICAgICAgICAgICAgIHdpZHRoPSR7R1JJRF9TSVpFfVxuICAgICAgICAgICAgICAgIGhlaWdodD0ke0dSSURfU0laRX1cbiAgICAgICAgICAgICAgICA+PC9yZWN0PlxuICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgICR7dGhpcy4jc2JveFxuICAgICAgICAgICAgICA/IHN2Z2BcbiAgICAgICAgICAgICAgPHJlY3QgaWQ9XCJzYm94XCJcbiAgICAgICAgICAgICAgICB4PSR7TWF0aC5taW4odGhpcy4jc2JveC5waW5bMF0sIHRoaXMuI3Nib3gubW91c2VbMF0pfVxuICAgICAgICAgICAgICAgIHk9JHtNYXRoLm1pbih0aGlzLiNzYm94LnBpblsxXSwgdGhpcy4jc2JveC5tb3VzZVsxXSl9XG4gICAgICAgICAgICAgICAgd2lkdGg9JHtNYXRoLmFicyh0aGlzLiNzYm94LnBpblswXSAtIHRoaXMuI3Nib3gubW91c2VbMF0pfVxuICAgICAgICAgICAgICAgIGhlaWdodD0ke01hdGguYWJzKHRoaXMuI3Nib3gucGluWzFdIC0gdGhpcy4jc2JveC5tb3VzZVsxXSl9XG4gICAgICAgICAgICAgICAgPjwvcmVjdD5cbiAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgICAke3JlcGVhdChcbiAgICAgICAgICAgICAgdGhpcy5jYWxsb3V0cyxcbiAgICAgICAgICAgICAgKGlkKSA9PiBpZCxcbiAgICAgICAgICAgICAgKHBvaW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgW3gsIHldID0gc3ViX3AocG9pbnQsIFtDQUxMT1VUX0RJTSAvIDIsIENBTExPVVRfRElNIC8gMl0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN2Z2BcbiAgICAgICAgICAgICAgICAgIDxpbWFnZSBocmVmPVwiYXNzZXRzL2NhbGxvdXQuc3ZnXCIgeD0ke3h9IHk9JHt5fSB3aWR0aD0ke0NBTExPVVRfRElNfSBoZWlnaHQ9JHtDQUxMT1VUX0RJTX0+PC9pbWFnZT5cbiAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgJHtzYmJveFxuICAgICAgICAgICAgICA/IHN2Z2BcbiAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgaWQ9XCJzZWxlY3Rpb25cIlxuICAgICAgICAgICAgICB4PSR7c2Jib3guYmJveC5zdGFydFswXX1cbiAgICAgICAgICAgICAgeT0ke3NiYm94LmJib3guc3RhcnRbMV19XG4gICAgICAgICAgICAgIHdpZHRoPSR7c2Jib3guYmJveC5lbmRbMF0gLSBzYmJveC5iYm94LnN0YXJ0WzBdfVxuICAgICAgICAgICAgICBoZWlnaHQ9JHtzYmJveC5iYm94LmVuZFsxXSAtIHNiYm94LmJib3guc3RhcnRbMV19XG4gICAgICAgICAgICAgIEBwb2ludGVyZG93bj0ke3RoaXMuI3NlbGVjdGlvbl9kcmFnX3N0YXJ0fVxuICAgICAgICAgICAgICBAcG9pbnRlcm1vdmU9JHt0aGlzLiNzZWxlY3Rpb25fZHJhZ31cbiAgICAgICAgICAgICAgQHBvaW50ZXJ1cD0ke3RoaXMuI3NlbGVjdGlvbl9kcmFnX2VuZH0+XG4gICAgICAgICAgICAgIDxyZWN0IGNsYXNzPVwic2VsZWN0aW9uLWJveFwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiAgPjwvcmVjdD5cbiAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgPyBzdmdgXG4gICAgICAgICAgICA8ZyBzdHlsZT0ke2B0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7IHRyYW5zZm9ybTogcm90YXRlKCR7c2VsZWN0ZWQucn1kZWcpIHRyYW5zbGF0ZVkoJHtcbiAgICAgICAgICAgICAgKE1hdGguc2lnbigoc2VsZWN0ZWQuciAtIDE4MCkgJSAxODApICogKHNlbGVjdGVkLmRpbVswXSAtIHNlbGVjdGVkLmRpbVsxXSkpIC8gMlxuICAgICAgICAgICAgfXB4KWB9PlxuICAgICAgICAgICAgICA8bGluZSBjbGFzcz1cInJvXCIgeDE9XCI1MCVcIiB4Mj1cIjUwJVwiIHkyPSR7LVJPVEFURV9ESVNUQU5DRX0+PC9saW5lPlxuICAgICAgICAgICAgICA8Y2lyY2xlIGNsYXNzPVwicm8gaGFuZGxlXCIgY3g9XCI1MCVcIiBjeT0key1ST1RBVEVfRElTVEFOQ0V9IHI9JHtST1RBVEVfU0laRSAvIDJ9PjwvY2lyY2xlPlxuICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgPGxpbmUgY2xhc3M9XCJyblwiIHgyPVwiMTAwJVwiPjwvbGluZT5cbiAgICAgICAgICAgIDxsaW5lIGNsYXNzPVwicndcIiB5Mj1cIjEwMCVcIj48L2xpbmU+XG4gICAgICAgICAgICA8bGluZSBjbGFzcz1cInJlXCIgeDE9XCIxMDAlXCIgeDI9XCIxMDAlXCIgeTI9XCIxMDAlXCI+PC9saW5lPlxuICAgICAgICAgICAgPGxpbmUgY2xhc3M9XCJyc1wiIHkxPVwiMTAwJVwiIHgyPVwiMTAwJVwiIHkyPVwiMTAwJVwiPjwvbGluZT5cbiAgICAgICAgICAgIDxyZWN0IGNsYXNzPVwiaGFuZGxlIHJuIHJ3XCI+PC9yZWN0PlxuICAgICAgICAgICAgPHJlY3QgY2xhc3M9XCJoYW5kbGUgcm4gcmVcIiB4PVwiMTAwJVwiPjwvcmVjdD5cbiAgICAgICAgICAgIDxyZWN0IGNsYXNzPVwiaGFuZGxlIHJzIHJ3XCIgeT1cIjEwMCVcIj48L3JlY3Q+XG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cImhhbmRsZSBycyByZVwiIHg9XCIxMDAlXCIgeT1cIjEwMCVcIj48L3JlY3Q+XG4gICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICA8L3N2Zz5gXG4gICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICB9YFxuICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgPC9zdmc+XG4gICAgICAgIDwvc3ZnPlxuICAgICAgPC9wLXAtej5cbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9XCJiZy1kcm9wXCJcbiAgICAgICAgY2xhc3M9JHt0aGlzLmhvdmVyaW5nID8/IFwiXCJ9XG4gICAgICAgIEBkcmFnZW50ZXI9JHt0aGlzLiNkcmFnX2VudGVyfVxuICAgICAgICBAZHJhZ292ZXI9JHt0aGlzLiNiZ19kcmFnX292ZXJ9XG4gICAgICAgIEBkcmFnbGVhdmU9JHt0aGlzLiNkcmFnX2xlYXZlfVxuICAgICAgICBAZHJvcD0ke3RoaXMuI2JnX2Ryb3B9XG4gICAgICA+XG4gICAgICAgIDxkaXYgaWQ9XCJiZy1kcm9wLWxhYmVsXCIgQGRyb3A9JHt0aGlzLiNiZ19kcm9wfT5TZXQgQmFja2dyb3VuZDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVSZW5kZXJSb290KCk6IEVsZW1lbnQgfCBTaGFkb3dSb290IHtcbiAgICBjb25zdCByb290ID0gc3VwZXIuY3JlYXRlUmVuZGVyUm9vdCgpO1xuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgQHN0YXRlKClcbiAgX2Ryb3BfaGludD86IFBvaW50O1xuXG4gIEBzdGF0ZSgpXG4gIGhvdmVyaW5nPzogXCJjYW52YXNcIiB8IFwiYmdcIjtcblxuICAjZHJhZ19kZXB0aCA9IDA7XG4gICNkcmFnX2VudGVyID0gKGV2OiBEcmFnRXZlbnQpID0+IHtcbiAgICBzdG9wX2V2KGV2KTtcbiAgICB0aGlzLiNkcmFnX2RlcHRoKys7XG4gIH07XG4gICNkcmFnX292ZXIgPSAoZXY6IERyYWdFdmVudCkgPT4ge1xuICAgIHN0b3BfZXYoZXYpO1xuXG4gICAgY29uc3QgbG9jYWwgPSB0aGlzLiNzY3JlZW5fdG9fc3ZnKGV2KTtcbiAgICBjb25zdCBjZWxsID0gbG9jYWwubWFwKG9jY3VwaWVkX2NlbGwpO1xuICAgIGNvbnN0IG1heCA9IG11bF9jKGFkZF9jKFt0aGlzLndpZHRoLCB0aGlzLmhlaWdodF0sIC0xKSwgR1JJRF9TSVpFKTtcbiAgICB0aGlzLl9kcm9wX2hpbnQgPSBjbGFtcF9wKFswLCAwXSwgbWF4LCBjZWxsIGFzIFBvaW50KTtcbiAgICB0aGlzLmhvdmVyaW5nID0gXCJjYW52YXNcIjtcbiAgfTtcblxuICAjZHJhZ19sZWF2ZSA9IChldjogRHJhZ0V2ZW50KSA9PiB7XG4gICAgaWYgKC0tdGhpcy4jZHJhZ19kZXB0aCA8PSAwKSB7XG4gICAgICB0aGlzLl9kcm9wX2hpbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmhvdmVyaW5nID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICAjYmdfZHJhZ19vdmVyID0gKGV2OiBEcmFnRXZlbnQpID0+IHtcbiAgICBzdG9wX2V2KGV2KTtcbiAgICB0aGlzLl9kcm9wX2hpbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ob3ZlcmluZyA9IFwiYmdcIjtcbiAgfTtcblxuICAjYmdfZHJvcCA9IGFzeW5jIChldjogRHJhZ0V2ZW50KSA9PiB7XG4gICAgc3RvcF9ldihldik7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGltZyA9IGF3YWl0IGdldEltYWdlKGV2KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh3aW5kb3dfZXYoXCJiZy1kcm9wXCIsIGltZykpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdGhpcy4jZHJhZ19kZXB0aCA9IDA7XG4gICAgdGhpcy5ob3ZlcmluZyA9IHVuZGVmaW5lZDtcbiAgfTtcblxuICAjZHJvcCA9IGFzeW5jIChldjogRHJhZ0V2ZW50KSA9PiB7XG4gICAgc3RvcF9ldihldik7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGltZyA9IGF3YWl0IGdldEltYWdlKGV2KTtcbiAgICAgIC8vIFRPRE8gRU1JVCBEUk9QUEVEIFRPS0VOXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIHdpbmRvd19ldihcInRva2VuLWRyb3BcIiwge1xuICAgICAgICAgIGxvYzogdGhpcy5fZHJvcF9oaW50ISxcbiAgICAgICAgICBkaW06IFtHUklEX1NJWkUsIEdSSURfU0laRV0gYXMgUG9pbnQsXG4gICAgICAgICAgaW1nLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRoaXMuX2Ryb3BfaGludCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhvdmVyaW5nID0gdW5kZWZpbmVkO1xuICB9O1xuXG4gICNmb2N1cyA9IChldjogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgaWYgKCFpc19tb3VzZV9kb3duKGV2KSkgcmV0dXJuO1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgY29uc3QgaWQgPSAoZXYudGFyZ2V0IGFzIFNWR0ltYWdlRWxlbWVudCkuaWQ7XG4gICAgaWYgKGV2LnNoaWZ0S2V5IHx8IGV2LmN0cmxLZXkpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgd2luZG93X2V2KFxuICAgICAgICAgIFwidG9rZW4tc2VsZWN0XCIsXG4gICAgICAgICAgW2lkLCAuLi50aGlzLnNlbGVjdGlvbl0uZmlsdGVyKChzKSA9PiBzICE9PSBpZCB8fCAhdGhpcy5zZWxlY3Rpb24uaGFzKGlkKSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHdpbmRvd19ldihcInRva2VuLXNlbGVjdFwiLCBbKGV2LnRhcmdldCBhcyBTVkdJbWFnZUVsZW1lbnQpLmlkXSkpO1xuICAgIH1cbiAgfTtcblxuICAjc2JveF9zdGFydChldjogUG9pbnRlckV2ZW50KSB7XG4gICAgaWYgKCFpc19tb3VzZV9kb3duKGV2KSkgcmV0dXJuO1xuICAgIChldi50YXJnZXQgYXMgU1ZHRWxlbWVudCkuc2V0UG9pbnRlckNhcHR1cmUoZXYucG9pbnRlcklkKTtcbiAgICBjb25zdCBsb2NhbCA9IHRoaXMuI3NjcmVlbl90b19zdmcoZXYpO1xuICAgIHRoaXMuI3Nib3ggPSB7IHBpbjogbG9jYWwsIG1vdXNlOiBsb2NhbCB9O1xuICB9XG5cbiAgI3Nib3hfbW92ZShldjogUG9pbnRlckV2ZW50KSB7XG4gICAgdGhpcy4jbW91c2VfbG9jID0geyBjbGllbnRYOiBldi5jbGllbnRYLCBjbGllbnRZOiBldi5jbGllbnRZIH07XG4gICAgaWYgKCF0aGlzLiNzYm94KSByZXR1cm47XG4gICAgdGhpcy4jc2JveC5tb3VzZSA9IHRoaXMuI3NjcmVlbl90b19zdmcoZXYpO1xuICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgpO1xuICB9XG5cbiAgI3Nib3hfc3RvcChldjogUG9pbnRlckV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLiNzYm94KSByZXR1cm47XG4gICAgKGV2LnRhcmdldCBhcyBTVkdFbGVtZW50KS5zZXRQb2ludGVyQ2FwdHVyZShldi5wb2ludGVySWQpO1xuICAgIGNvbnN0IGxvYyA9IG1pbl9wKHRoaXMuI3Nib3gucGluLCB0aGlzLiNzYm94Lm1vdXNlKTtcbiAgICBjb25zdCBkaW0gPSBhYnNfcChzdWJfcCh0aGlzLiNzYm94LnBpbiwgdGhpcy4jc2JveC5tb3VzZSkpO1xuXG4gICAgY29uc3QgYm94ID0ge1xuICAgICAgc3RhcnQ6IGxvYyxcbiAgICAgIGVuZDogYWRkX3AobG9jLCBkaW0pLFxuICAgIH07XG5cbiAgICBjb25zdCBzZWwgPSB0aGlzLnRva2Vucy5vcmRlclxuICAgICAgLmZpbHRlcigodCkgPT5cbiAgICAgICAgaW50ZXJzZWN0KGJveCwge1xuICAgICAgICAgIHN0YXJ0OiB0LmxvYyxcbiAgICAgICAgICBlbmQ6IGFkZF9wKHQubG9jLCB0LmRpbSksXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICAubWFwKCh0KSA9PiB0LmlkKTtcblxuICAgIHRoaXMuI3Nib3ggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KHdpbmRvd19ldihcInRva2VuLXNlbGVjdFwiLCBzZWwpKTtcbiAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgfVxuXG4gICNzZWxlY3Rpb25fYmJveCgpOiBTZWxlY3Rpb25Cb3ggfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbi5zaXplID09PSAwKSByZXR1cm47XG4gICAgY29uc3QgcyA9IEFycmF5LmZyb20odGhpcy5zZWxlY3Rpb24sICh0KSA9PiB0aGlzLnRva2Vucy5nZXQodCkpLmZpbHRlcigodCkgPT4gdCkgYXMgVG9rZW5EYXRhW107XG4gICAgY29uc3QgaW5kZXggPSBNYXRoLm1heCguLi5tYXAodGhpcy5zZWxlY3Rpb24udmFsdWVzKCksIChpZCkgPT4gdGhpcy50b2tlbnMuaW5kZXgoaWQpISkpO1xuICAgIGxldCBzdGFydCA9IHNbMF0hLmxvYztcbiAgICBsZXQgZW5kID0gYWRkX3Aoc1swXSEubG9jLCBzWzBdIS5kaW0pO1xuXG4gICAgcy5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICBzdGFydCA9IG1pbl9wKHN0YXJ0LCB0LmxvYyk7XG4gICAgICBlbmQgPSBtYXhfcChlbmQsIGFkZF9wKHQubG9jLCB0LmRpbSkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHsgaW5kZXgsIGJib3g6IHsgc3RhcnQsIGVuZCB9IH07XG4gIH1cblxuICAjZHJhZ19vZmZzZXQ/OiBQb2ludDtcbiAgI3NlbGVjdGlvbl9kcmFnX3N0YXJ0ID0gKGV2OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICBpZiAoIWlzX3ByaW1hcnlfZG93bihldikpIHJldHVybjtcbiAgICBjb25zdCBzdmdfY29vcmQgPSB0aGlzLiNzY3JlZW5fdG9fc3ZnKGV2KSBhcyBQb2ludDtcbiAgICBzdG9wX2V2KGV2KTtcbiAgICAoZXYudGFyZ2V0IGFzIFNWR0VsZW1lbnQpLnNldFBvaW50ZXJDYXB0dXJlKGV2LnBvaW50ZXJJZCk7XG4gICAgdGhpcy4jZHJhZ19vZmZzZXQgPSBzdmdfY29vcmQ7XG4gIH07XG5cbiAgI3NlbGVjdGlvbl90cmFuc2Zvcm0gPSB7IG1vdmU6IFswLCAwXSBhcyBQb2ludCwgcmVzaXplOiBbMCwgMF0gYXMgUG9pbnQsIHI6IDAgfTtcbiAgI3NlbGVjdGlvbl9kcmFnID0gKGV2OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICBpZiAoIWlzX3ByaW1hcnlfZG93bihldikpIHJldHVybjtcbiAgICBpZiAoIXRoaXMuI2RyYWdfb2Zmc2V0KSB7XG4gICAgICB0aGlzLiNzZWxlY3Rpb25fZHJhZ19zdGFydChldik7XG4gICAgfVxuICAgIHN0b3BfZXYoZXYpO1xuICAgIGNvbnN0IGdyaWRfbG9jID0gY2xhbXBfcChbMCwgMF0sIHRoaXMuI2RpbSwgdGhpcy4jc2NyZWVuX3RvX3N2ZyhldikpO1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMudG9rZW5zLmdldCh0aGlzLnNlbGVjdGlvbi52YWx1ZXMoKS5uZXh0KCkudmFsdWUpITtcbiAgICBjb25zdCBkaW0gPSBzZWxlY3Rpb24uZGltO1xuICAgIGNvbnN0IGxvYyA9IHNlbGVjdGlvbi5sb2M7XG4gICAgY29uc3QgY2xhc3NlcyA9IChldi50YXJnZXQgYXMgU1ZHR3JhcGhpY3NFbGVtZW50KS5jbGFzc0xpc3Q7XG4gICAgbGV0IG1vdmUgPSBbMCwgMF0gYXMgUG9pbnQ7XG4gICAgbGV0IHJlc2l6ZSA9IFswLCAwXSBhcyBQb2ludDtcbiAgICBsZXQgciA9IDA7XG5cbiAgICBpZiAoY2xhc3Nlcy5jb250YWlucyhcInJuXCIpKSB7XG4gICAgICByZXNpemVbMV0gPSBsb2NbMV0gLSBuZWFyZXN0X2Nvcm5lcihncmlkX2xvY1sxXSk7XG4gICAgICBtb3ZlWzFdID0gbmVhcmVzdF9jb3JuZXIoZ3JpZF9sb2NbMV0pIC0gbG9jWzFdO1xuICAgIH1cblxuICAgIGlmIChjbGFzc2VzLmNvbnRhaW5zKFwicndcIikpIHtcbiAgICAgIHJlc2l6ZVswXSA9IGxvY1swXSAtIG5lYXJlc3RfY29ybmVyKGdyaWRfbG9jWzBdKTtcbiAgICAgIG1vdmVbMF0gPSBuZWFyZXN0X2Nvcm5lcihncmlkX2xvY1swXSkgLSBsb2NbMF07XG4gICAgfVxuXG4gICAgaWYgKGNsYXNzZXMuY29udGFpbnMoXCJyc1wiKSkge1xuICAgICAgcmVzaXplWzFdID0gbmVhcmVzdF9jb3JuZXIoZ3JpZF9sb2NbMV0pIC0gZGltWzFdIC0gbG9jWzFdO1xuICAgIH1cblxuICAgIGlmIChjbGFzc2VzLmNvbnRhaW5zKFwicmVcIikpIHtcbiAgICAgIHJlc2l6ZVswXSA9IG5lYXJlc3RfY29ybmVyKGdyaWRfbG9jWzBdKSAtIGRpbVswXSAtIGxvY1swXTtcbiAgICB9XG5cbiAgICBpZiAoY2xhc3Nlcy5jb250YWlucyhcInJvXCIpKSB7XG4gICAgICBjb25zdCBjZW50ZXIgPSBhZGRfcChsb2MsIGRpdl9jKGRpbSwgMikpO1xuICAgICAgY29uc3QgcmVsID0gc3ViX3AoZ3JpZF9sb2MsIGNlbnRlcik7XG4gICAgICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIocmVsWzBdLCAtcmVsWzFdKTtcbiAgICAgIGNvbnN0IGRlZyA9IChhbmdsZSAqIDE4MCkgLyBNYXRoLlBJO1xuICAgICAgciA9IE1hdGgucm91bmQoZGVnIC8gOTApICogOTAgLSAoc2VsZWN0aW9uLnIgJSAzNjApO1xuICAgIH1cblxuICAgIGlmIChjbGFzc2VzLmNvbnRhaW5zKFwic2VsZWN0aW9uLWRyYWctdGFyZ2V0XCIpKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIm1vdmVcIik7XG4gICAgICBtb3ZlID0gc3ViX3AoZ3JpZF9sb2MsIHRoaXMuI2RyYWdfb2Zmc2V0ISkubWFwKG5lYXJlc3RfY29ybmVyKSBhcyBQb2ludDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRG9uJ3QgbGV0IHRvcC1sZWZ0IGRyYWdzIGNhdXNlIG1vdmVtZW50IHBhcyB0aGUgZGltZW5zaW9uc1xuICAgICAgbW92ZSA9IG1pbl9wKGFkZF9jKGRpbSwgLUdSSURfU0laRSksIG1vdmUpO1xuICAgICAgLy8gQ29uc3RyYWluIHRoZSB0cmFuc2Zvcm0gZnJvbSBtYWtpbmcgYW55dGhpbmcgc21hbGxlciB0aGFuIGEgZ3JpZFxuICAgICAgcmVzaXplID0gbWF4X3AoYWRkX2MobXVsX2MoZGltLCAtMSksIEdSSURfU0laRSksIHJlc2l6ZSBhcyBQb2ludCk7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IHRoaXMuI3NlbGVjdGlvbl90cmFuc2Zvcm0uciB8fCAhZXFfcChtb3ZlLCB0aGlzLiNzZWxlY3Rpb25fdHJhbnNmb3JtLm1vdmUpIHx8ICFlcV9wKHJlc2l6ZSwgdGhpcy4jc2VsZWN0aW9uX3RyYW5zZm9ybS5yZXNpemUpKSB7XG4gICAgICB0aGlzLiNkcmFnX29mZnNldCA9IGFkZF9wKHRoaXMuI2RyYWdfb2Zmc2V0ISwgbW92ZSk7XG4gICAgICB0aGlzLiNzZWxlY3Rpb25fdHJhbnNmb3JtID0geyBtb3ZlOiBbMCwgMF0gYXMgUG9pbnQsIHJlc2l6ZTogWzAsIDBdIGFzIFBvaW50LCByOiAwIH07XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIGdhbWVfZXZlbnQoe1xuICAgICAgICAgIHR5cGU6IFwidG9rZW4tbWFuaXB1bGF0ZWRcIixcbiAgICAgICAgICB0b2tlbnM6IEFycmF5LmZyb20odGhpcy5zZWxlY3Rpb24sIChpZCkgPT4ge1xuICAgICAgICAgICAgbGV0IHNlbGVjdGlvbiA9IHRoaXMudG9rZW5zLmdldChpZCkhO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgaWQ6IHNlbGVjdGlvbi5pZCxcbiAgICAgICAgICAgICAgbG9jOiBhZGRfcChzZWxlY3Rpb24ubG9jLCBtb3ZlKSxcbiAgICAgICAgICAgICAgZGltOiBhZGRfcChzZWxlY3Rpb24uZGltLCByZXNpemUpLFxuICAgICAgICAgICAgICByOiBzZWxlY3Rpb24uciArIHIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgI3NlbGVjdGlvbl9kcmFnX2VuZCA9IChldjogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgc3RvcF9ldihldik7XG4gICAgdGhpcy4jZHJhZ19vZmZzZXQgPSB1bmRlZmluZWQ7XG4gIH07XG5cbiAgLy8gTm9ybWFsbHkgd2UnZCB1c2UgU1ZHIG1hY2hpbmVyeSBidXQgaXQncyBicm9rZW4gaW4gb25lIGJyb3dzZXIuLi5cbiAgLy8gLi4uIEknbGwgbGV0IHlvdSBndWVzcyB3aG8uLi5cbiAgLy8gLi4uIGl0J3Mgc2FmYXJpXG4gICNzY3JlZW5fdG9fc3ZnID0gKGV2OiB7IGNsaWVudFg6IG51bWJlcjsgY2xpZW50WTogbnVtYmVyIH0pOiBQb2ludCA9PiB7XG4gICAgbGV0IHJlcyA9IHN1Yl9wKHRoaXMudmlld3BvcnQhLmNvb3JkVG9Mb2NhbChbZXYuY2xpZW50WCwgZXYuY2xpZW50WV0pLCBbUEFERElORywgUEFERElOR10pO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgI2tleWRvd24gPSAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICBpZiAoIXRoaXMuc2VsZWN0aW9uKSByZXR1cm47XG5cbiAgICAvLyBCYWNrc3BhY2VcbiAgICBpZiAoZXYua2V5Q29kZSA9PT0gOCkge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBnYW1lX2V2ZW50KHtcbiAgICAgICAgICB0eXBlOiBcInRva2VuLXJlbW92ZWRcIixcbiAgICAgICAgICBpZHM6IEFycmF5LmZyb20odGhpcy5zZWxlY3Rpb24pLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIHN0b3BfZXYoZXYpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldi5rZXkgPT09IFwielwiICYmIHRoaXMuI21vdXNlX2xvYykge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBnYW1lX2V2ZW50KHtcbiAgICAgICAgICB0eXBlOiBcImNhbGxvdXRcIixcbiAgICAgICAgICBsb2M6IHRoaXMuI3NjcmVlbl90b19zdmcodGhpcy4jbW91c2VfbG9jKSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IHMgPSB0aGlzLnRva2Vucy5nZXQodGhpcy5zZWxlY3Rpb24udmFsdWVzKCkubmV4dCgpLnZhbHVlKSE7XG4gICAgY29uc3QgbW92ZW1lbnRzOiB7IFtrZXk6IHN0cmluZ106IFBvaW50IH0gPSB7XG4gICAgICBBcnJvd1VwOiBbMCwgLUdSSURfU0laRV0sXG4gICAgICBBcnJvd0Rvd246IFswLCBHUklEX1NJWkVdLFxuICAgICAgQXJyb3dMZWZ0OiBbLUdSSURfU0laRSwgMF0sXG4gICAgICBBcnJvd1JpZ2h0OiBbR1JJRF9TSVpFLCAwXSxcbiAgICB9O1xuXG4gICAgbGV0IG1vdmU6IFBvaW50IHwgdW5kZWZpbmVkID0gbW92ZW1lbnRzW2V2LmtleV07XG4gICAgaWYgKG1vdmUpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgZ2FtZV9ldmVudCh7XG4gICAgICAgICAgdHlwZTogXCJ0b2tlbi1tYW5pcHVsYXRlZFwiLFxuICAgICAgICAgIHRva2VuczogQXJyYXkuZnJvbSh0aGlzLnNlbGVjdGlvbiwgKGlkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gdGhpcy50b2tlbnMuZ2V0KGlkKSE7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBjbGFtcF9wKFswLCAwXSwgc3ViX3AodGhpcy4jZGltLCBzLmRpbSksIGFkZF9wKHMubG9jLCBtb3ZlISkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgaWQ6IHMuaWQsXG4gICAgICAgICAgICAgIGxvYzogbG9jLFxuICAgICAgICAgICAgICBkaW06IHMuZGltLFxuICAgICAgICAgICAgICByOiBzLnIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIHN0b3BfZXYoZXYpO1xuICAgIH1cbiAgfTtcblxuICBzdGF0aWMgc3R5bGVzID0gY3NzYFxuICAgIDpob3N0IHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgLS1zZWxlY3Rpb24tY29sb3I6IGNvcm5mbG93ZXJibHVlO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB9XG5cbiAgICBwLXAteiB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDA7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgcmlnaHQ6IDA7XG4gICAgICBib3R0b206IDA7XG4gICAgfVxuICAgICNyb290IHtcbiAgICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICB9XG5cbiAgICAjc2JveCB7XG4gICAgICBzdHJva2U6IHZhcigtLXNlbGVjdGlvbi1jb2xvcik7XG4gICAgICBzdHJva2Utd2lkdGg6IDFweDtcbiAgICAgIGZpbGw6IHZhcigtLXNlbGVjdGlvbi1jb2xvcik7XG4gICAgICBmaWxsLW9wYWNpdHk6IDAuMjtcbiAgICB9XG5cbiAgICAjYmctZHJvcCB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICByaWdodDogNXB4O1xuICAgICAgYm90dG9tOiAtNjBweDtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIGhlaWdodDogNTBweDtcbiAgICAgIHRyYW5zaXRpb246IGJvdHRvbSAyNTBtcztcbiAgICAgIGJhY2tncm91bmQ6IHZhcigtLXVpLWJnKTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDVweCA1cHggMCAwO1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIHBhZGRpbmc6IDVweDtcbiAgICAgIGdyaWQ6IDFmciAxZnI7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgICNiZy1kcm9wLmNhbnZhcyxcbiAgICAjYmctZHJvcC5iZyB7XG4gICAgICBib3R0b206IDA7XG4gICAgICBib3gtc2hhZG93OiAycHggNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICAjYmctZHJvcC1sYWJlbCB7XG4gICAgICAtLWNvbG9yOiBncmF5O1xuICAgICAgcGFkZGluZzogMCAxZW07XG4gICAgICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1jb2xvcik7XG4gICAgICBjb2xvcjogdmFyKC0tY29sb3IpO1xuICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIH1cblxuICAgIC5iZyA+ICNiZy1kcm9wLWxhYmVsIHtcbiAgICAgIC0tY29sb3I6IGJsdWU7XG4gICAgfVxuXG4gICAgc3ZnIHtcbiAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIH1cblxuICAgICNzdXJmYWNlIHtcbiAgICAgIGNsaXAtcGF0aDogcmVjdCgxMDAlKTtcbiAgICB9XG5cbiAgICAuc2hhZG93IHtcbiAgICAgIHN0cm9rZS13aWR0aDogJHtMSU5FX1dJRFRIfTtcbiAgICAgIHN0cm9rZTogcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgICAgZmlsdGVyOiBkcm9wLXNoYWRvdygycHggNHB4IDZweCByZ2JhKDAsIDAsIDAsIDAuMykpO1xuICAgIH1cblxuICAgIC5kcm9wX2hpbnQge1xuICAgICAgdHJhbnNpdGlvbjogbm9uZTtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgZmlsbDogZ3JheTtcbiAgICB9XG5cbiAgICAuc2VsZWN0aW9uLWJveCxcbiAgICBsaW5lLnJvIHtcbiAgICAgIHN0cm9rZTogdmFyKC0tc2VsZWN0aW9uLWNvbG9yKTtcbiAgICAgIHN0cm9rZS13aWR0aDogMXB4O1xuICAgICAgZmlsdGVyOiBkcm9wLXNoYWRvdygwcHggMHB4IDJweCB2YXIoLS1zZWxlY3Rpb24tY29sb3IpKTtcbiAgICAgIGZpbGw6IHRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIC5zZWxlY3Rpb24tYm94IHtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgLnJuLFxuICAgIC5ycyxcbiAgICAucmUsXG4gICAgLnJ3IHtcbiAgICAgIHN0cm9rZS13aWR0aDogJHtIQU5ETEVfU0laRX07XG4gICAgICB2ZWN0b3ItZWZmZWN0OiBub24tc2NhbGluZy1zdHJva2U7XG4gICAgICBzdHJva2U6IHRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIC5oYW5kbGUge1xuICAgICAgc3Ryb2tlLXdpZHRoOiAxcHg7XG4gICAgICBmaWxsOiB2YXIoLS1zZWxlY3Rpb24tY29sb3IpO1xuICAgICAgc3Ryb2tlOiB3aGl0ZTtcbiAgICB9XG5cbiAgICAuc2VsZWN0aW9uLWRyYWctdGFyZ2V0IHtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBmaWxsO1xuICAgICAgY3Vyc29yOiBtb3ZlO1xuICAgIH1cblxuICAgIHJlY3QuaGFuZGxlIHtcbiAgICAgIHdpZHRoOiAke0hBTkRMRV9TSVpFfXB4O1xuICAgICAgaGVpZ2h0OiAke0hBTkRMRV9TSVpFfXB4O1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoJHstSEFORExFX1NJWkUgLyAyfXB4LCAkey1IQU5ETEVfU0laRSAvIDJ9cHgpO1xuICAgIH1cblxuICAgIC5yby5oYW5kbGUge1xuICAgICAgY3Vyc29yOiBjcm9zc2hhaXI7XG4gICAgfVxuXG4gICAgLnJuLnJlLFxuICAgIC5ycy5ydyB7XG4gICAgICBjdXJzb3I6IG5lc3ctcmVzaXplO1xuICAgIH1cblxuICAgIC5ybi5ydyxcbiAgICAucnMucmUge1xuICAgICAgY3Vyc29yOiBud3NlLXJlc2l6ZTtcbiAgICB9XG5cbiAgICAucm4sXG4gICAgLnJzIHtcbiAgICAgIGN1cnNvcjogcm93LXJlc2l6ZTtcbiAgICB9XG5cbiAgICAucmUsXG4gICAgLnJ3IHtcbiAgICAgIGN1cnNvcjogY29sLXJlc2l6ZTtcbiAgICB9XG5cbiAgICBwLXAteiB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRlZGYwO1xuICAgIH1cblxuICAgIGJnLXZpZXdwb3J0OjpwYXJ0KGJhcikge1xuICAgICAgYmFja2dyb3VuZDogcmdiKDc1LCA3NSwgNzUpO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XG4gICAgICBvcGFjaXR5OiAwLjc1O1xuICAgICAgLS10aGlja25lc3M6IDEwcHg7XG4gICAgfVxuXG4gICAgYmctdmlld3BvcnQ6OnBhcnQoYmFyKTpob3ZlciB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cblxuICAgIC50b2tlbiB7XG4gICAgICB0cmFuc2Zvcm0tYm94OiBmaWxsLWJveDtcbiAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcbiAgICAgIGZpbGw6IHRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIC50b2tlbiArIC5sb2FkaW5nIHtcbiAgICAgIGZpbGw6IHVybCgjbG9hZGluZyk7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICB9XG5cbiAgICAudG9rZW4ubG9hZGVkICsgLmxvYWRpbmcge1xuICAgICAgZmlsbDogdHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgI3NlbGVjdGlvbiB7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICB9XG5cbiAgICAjc2VsZWN0aW9uICoge1xuICAgICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgfVxuICBgO1xufVxuXG5leHBvcnQgdHlwZSBUb2tlbkRyb3BFdmVudCA9IEN1c3RvbUV2ZW50PHsgbG9jOiBQb2ludDsgZGltOiBQb2ludDsgaW1nOiBMb2NhbE9yUmVtb3RlSW1hZ2UgfT47XG5leHBvcnQgdHlwZSBCZ0Ryb3BFdmVudCA9IEN1c3RvbUV2ZW50PExvY2FsT3JSZW1vdGVJbWFnZT47XG5leHBvcnQgdHlwZSBUb2tlblNlbGVjdEV2ZW50ID0gQ3VzdG9tRXZlbnQ8c3RyaW5nW10+O1xuZXhwb3J0IHR5cGUgVG9rZW5EZWxldGVFdmVudCA9IEN1c3RvbUV2ZW50PHN0cmluZz47XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvd0V2ZW50TWFwIHtcbiAgICBcInRva2VuLWRyb3BcIjogVG9rZW5Ecm9wRXZlbnQ7XG4gICAgXCJiZy1kcm9wXCI6IEJnRHJvcEV2ZW50O1xuICAgIFwidG9rZW4tc2VsZWN0XCI6IFRva2VuU2VsZWN0RXZlbnQ7XG4gIH1cbn1cblxuY29uc3QgbmVhcmVzdF9jb3JuZXIgPSAobjogbnVtYmVyKSA9PiBNYXRoLnJvdW5kKG4gLyBHUklEX1NJWkUpICogR1JJRF9TSVpFO1xuY29uc3Qgb2NjdXBpZWRfY2VsbCA9IChuOiBudW1iZXIpID0+IG4gLSAobiAlIEdSSURfU0laRSk7XG5jb25zdCBtYXJrX2xvYWRlZCA9IChldjogYW55KSA9PiBldi50YXJnZXQuY2xhc3NMaXN0LmFkZChcImxvYWRlZFwiKTtcbiIsImltcG9ydCB7IGNzcywgQ1NTUmVzdWx0R3JvdXAsIGh0bWwsIExpdEVsZW1lbnQgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBzdGF0ZSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgc3RvcF9ldiB9IGZyb20gXCIuLi91dGlsL2V2ZW50c1wiO1xuXG5AY3VzdG9tRWxlbWVudChcImJ1eS1tZS1hLWNvZmZlZVwiKVxuZXhwb3J0IGNsYXNzIEJ1eU1lQUNvZmZlZSBleHRlbmRzIExpdEVsZW1lbnQge1xuICBAc3RhdGUoKVxuICBfc3RhdGUgPSBmYWxzZTtcblxuICBAc3RhdGUoKVxuICBfbG9hZGVkID0gZmFsc2U7XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGJ1dHRvbiBAY2xpY2s9JHt0aGlzLl9idXl9PkJ1eSBNZSBBIENvZmZlZTwvYnV0dG9uPlxuICAgICAgJHt0aGlzLl9zdGF0ZVxuICAgICAgICA/IGh0bWxgXG4gICAgICAgICAgICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgIDxpZnJhbWVcbiAgICAgICAgICAgICAgICBjbGFzcz0ke3RoaXMuX2xvYWRlZCA/IFwibG9hZGVkXCIgOiBcIlwifVxuICAgICAgICAgICAgICAgIGFsbG93PVwicGF5bWVudFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9rby1maS5jb20vZGpyZW5yZW4vP2hpZGVmZWVkPXRydWUmd2lkZ2V0PXRydWUmZW1iZWQ9dHJ1ZSZwcmV2aWV3PXRydWVcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiZGpyZW5yZW5cIlxuICAgICAgICAgICAgICAgIEBsb2FkPSR7dGhpcy4jaWZyYW1lX2xvYWR9XG4gICAgICAgICAgICAgID48L2lmcmFtZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIGBcbiAgICAgICAgOiBudWxsfVxuICAgIGA7XG4gIH1cblxuICBfYnV5ID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJDTElDS1wiKTtcbiAgICBzdG9wX2V2KGV2KTtcbiAgICB0aGlzLl9zdGF0ZSA9IHRydWU7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuI2Nsb3NlLCB7IGNhcHR1cmU6IHRydWUgfSk7XG4gIH07XG5cbiAgI2Nsb3NlID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgc3RvcF9ldihldik7XG4gICAgdGhpcy5fc3RhdGUgPSBmYWxzZTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy4jY2xvc2UsIHsgY2FwdHVyZTogdHJ1ZSB9KTtcbiAgfTtcblxuICAjaWZyYW1lX2xvYWQgPSAoZXY6IEV2ZW50KSA9PiB7XG4gICAgdGhpcy5fbG9hZGVkID0gdHJ1ZTtcbiAgfTtcblxuICBzdGF0aWMgc3R5bGVzID0gY3NzYFxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbiAgICBpZnJhbWUge1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNXMgbGluZWFyO1xuICAgIH1cblxuICAgICNjb250YWluZXIge1xuICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgYm94LXNoYWRvdzogMCAwIDZweCByZ2JhKDAsIDAsIDAsIDAuNyk7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB3aWR0aDogMzUwcHg7XG4gICAgICBoZWlnaHQ6IDUyNXB4O1xuICAgICAgYm90dG9tOiAtNTM1cHg7XG4gICAgICByaWdodDogMDtcbiAgICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlO1xuICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjVzO1xuICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogYmFja3dhcmRzO1xuICAgICAgYmFja2dyb3VuZDogdXJsKFwiYXNzZXRzL2xvYWRpbmcuc3ZnXCIpIGNlbnRlci8xMDBweCBuby1yZXBlYXQsICNlZGVkZjA7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIH1cblxuICAgIGlmcmFtZS5sb2FkZWQge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG5cbiAgICBAa2V5ZnJhbWVzIGZhZGUge1xuICAgICAgMCUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgfVxuICAgICAgMTAwJSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB9XG4gICAgfVxuICBgO1xufVxuIiwiaW1wb3J0IHsgcmVhZEJ1aWxkZXJQcm9ncmFtLCByZXNvbHZlTW9kdWxlTmFtZSB9IGZyb20gXCJ0eXBlc2NyaXB0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwaXBlPFQ+KCk6IFtSZWFkYWJsZVdyaXRhYmxlUGFpcjxULCBUPiwgUmVhZGFibGVXcml0YWJsZVBhaXI8VCwgVD5dIHtcbiAgbGV0IGxlZnRfdG9fcmlnaHQgPSBuZXcgVHJhbnNmb3JtU3RyZWFtKCk7XG4gIGxldCByaWdodF90b19sZWZ0ID0gbmV3IFRyYW5zZm9ybVN0cmVhbSgpO1xuXG4gIHJldHVybiBbXG4gICAge1xuICAgICAgcmVhZGFibGU6IHJpZ2h0X3RvX2xlZnQucmVhZGFibGUsXG4gICAgICB3cml0YWJsZTogbGVmdF90b19yaWdodC53cml0YWJsZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlYWRhYmxlOiBsZWZ0X3RvX3JpZ2h0LnJlYWRhYmxlLFxuICAgICAgd3JpdGFibGU6IHJpZ2h0X3RvX2xlZnQud3JpdGFibGUsXG4gICAgfSxcbiAgXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBpdGVyPFI+KHI6IFJlYWRhYmxlU3RyZWFtPFI+KTogQXN5bmNJdGVyYWJsZTxSPiB7XG4gIGxldCBkb25lLFxuICAgIHZhbHVlLFxuICAgIHJlYWRlciA9IHIuZ2V0UmVhZGVyKCk7XG5cbiAgd2hpbGUgKCh7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpKSAmJiAhZG9uZSkge1xuICAgIHlpZWxkIHZhbHVlITtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29uc3VtZTxSPihyOiBSZWFkYWJsZVN0cmVhbTxSPiwgd3JpdGU6IChjaHVuazogUikgPT4gYW55LCBzaWduYWw/OiBBYm9ydFNpZ25hbCk6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gci5waXBlVG8obmV3IFdyaXRhYmxlU3RyZWFtKHsgd3JpdGUgfSksIHsgc2lnbmFsIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24ganNvbjxUPihyOiBSZWFkYWJsZVdyaXRhYmxlUGFpcjxzdHJpbmcsIHN0cmluZz4pOiBSZWFkYWJsZVdyaXRhYmxlUGFpcjxULCBUPiB7XG4gIGxldCBlbmNvZGUgPSBuZXcgVHJhbnNmb3JtU3RyZWFtPFQsIHN0cmluZz4oe1xuICAgIHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuICAgICAgY29udHJvbGxlci5lbnF1ZXVlKEpTT04uc3RyaW5naWZ5KGNodW5rKSk7XG4gICAgfSxcbiAgfSk7XG4gIGVuY29kZS5yZWFkYWJsZS5waXBlVG8oci53cml0YWJsZSk7XG5cbiAgcmV0dXJuIHtcbiAgICByZWFkYWJsZTogci5yZWFkYWJsZS5waXBlVGhyb3VnaChcbiAgICAgIG5ldyBUcmFuc2Zvcm1TdHJlYW08c3RyaW5nLCBUPih7XG4gICAgICAgIHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShKU09OLnBhcnNlKGNodW5rKSk7XG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICksXG5cbiAgICB3cml0YWJsZTogZW5jb2RlLndyaXRhYmxlLFxuICB9O1xufVxuXG5leHBvcnQgdHlwZSBTdGF0dXMgPSBcImNvbm5lY3RlZFwiIHwgXCJjb25uZWN0aW5nXCIgfCBcImNsb3NlZFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFib3J0YWJsZVN0cmVhbTxSLCBXPiBleHRlbmRzIFJlYWRhYmxlV3JpdGFibGVQYWlyPFIsIFc+IHtcbiAgYWJvcnQoKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuLy8gZXhwb3J0IGZ1bmN0aW9uIHBpcCgpOiBSZWFkYWJsZVdyaXRhYmxlUGFpcjxhbnksIGFueT4ge1xuLy8gICBsZXQgcmVhZGVyO1xuLy8gICBsZXQgd3JpdGVyO1xuLy8gICBsZXQgY29udHJvbGxlcjogUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcjtcbi8vICAgcmVhZGVyID0gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbi8vICAgICBzdGFydChjb250cm9sbGVyKSB7Y29udHJvbGxlciA9IGNvbnRyb2xsZXJ9XG4vLyAgIH0pO1xuLy8gICB3cml0ZXIgPSBuZXcgV3JpdGFibGVTdHJlYW0oe1xuLy8gICAgIHdyaXRlKGNodW5rKSB7XG4vLyAgICAgICBjb250cm9sbGVyLmVucXVldWVcbi8vICAgICB9XG4vLyAgIH0pXG4vLyB9XG5cbi8vIC8qKlxuLy8gICogQ3JlYXRlcyBhIGEgc3RhYmxlIHN0cmVhbSBieSByZXByb2R1Y2luZyBhbiB1bmRlcmx5aW5nIHN0cmVhbSB3aGVuZXZlciBpdCBjbG9zZXNcbi8vICAqIEBwYXJhbSBidWlsZGVyIHRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIHVuZGVybHlpbmcgc3RyZWFtXG4vLyAgKiBAcmV0dXJucyBBIHN0cmVhbVxuLy8gICovXG4vLyBleHBvcnQgZnVuY3Rpb24gZHVyYWJsZTxSLCBXPihidWlsZGVyOiAoKSA9PiBQcm9taXNlPFJlYWRhYmxlV3JpdGFibGVQYWlyPFIsIFc+Pik6IFJlYWRhYmxlV3JpdGFibGVQYWlyPFIsIFc+IHtcbi8vICAgbGV0IHVuZGVybHlpbmc6IFByb21pc2U8e1xuLy8gICAgIHdyaXRlcjogV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLFxuLy8gICAgIHJlYWRlcjogUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLFxuLy8gICB9PlxuXG4vLyAgIGxldCB0aW1lb3V0OiBQcm9taXNlPHZvaWQ+ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4vLyAgIGxldCBub2J1ZmZlciA9IG5ldyBDb3VudFF1ZXVpbmdTdHJhdGVneSh7aGlnaFdhdGVyTWFyazogMH0pO1xuLy8gICBsZXQgbG9hZGluZyA9IGZhbHNlO1xuLy8gICBsZXQgcmVsb2FkID0gKCkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0aW5nIGEgcmVsb2FkJyk7XG4vLyAgICAgaWYgKGxvYWRpbmcpIHsgcmV0dXJuOyB9XG4vLyAgICAgY29uc29sZS5sb2coJ3BlcmZvcm1pbmcgYSByZWxvYWQnKTtcbi8vICAgICBsb2FkaW5nID0gdHJ1ZTtcbi8vICAgICB1bmRlcmx5aW5nPy50aGVuKHUgPT4ge1xuLy8gICAgICAgdS5yZWFkZXIuY2xvc2VkIHx8IHUucmVhZGVyLmNhbmNlbChcIlJlc3RhcnRpbmcgc3RyZWFtXCIpO1xuLy8gICAgICAgdS53cml0ZXIuY2xvc2VkIHx8IHUud3JpdGVyLmNsb3NlKCk7XG4vLyAgICAgfSlcblxuLy8gICAgIHVuZGVybHlpbmcgPSB0aW1lb3V0LnRoZW4oKCkgPT4gYnVpbGRlcigpKS50aGVuKCh7cmVhZGFibGUsIHdyaXRhYmxlfSkgPT4gKHtcbi8vICAgICAgIHJlYWRlcjogcmVhZGFibGUuZ2V0UmVhZGVyKCksXG4vLyAgICAgICB3cml0ZXI6IHdyaXRhYmxlLmdldFdyaXRlcigpLFxuLy8gICAgIH0pKVxuLy8gICAgIHRpbWVvdXQgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xuLy8gICAgIHVuZGVybHlpbmcuZmluYWxseSgoKSA9PiBsb2FkaW5nID0gZmFsc2UpO1xuLy8gICB9XG5cbi8vICAgcmVsb2FkKCk7XG5cbi8vICAgbGV0IHdyaXRhYmxlID0gbmV3IFdyaXRhYmxlU3RyZWFtKHtcbi8vICAgICBhc3luYyB3cml0ZShjaHVuaykge1xuLy8gICAgICAgd2hpbGUodHJ1ZSkge1xuLy8gICAgICAgICB0cnkge1xuLy8gICAgICAgICAgIGNvbnNvbGUubG9nKFwiV1JJVElORyBDSFVOS1wiLCBjaHVuayk7XG4vLyAgICAgICAgICAgYXdhaXQgKChhd2FpdCB1bmRlcmx5aW5nKS53cml0ZXIpLndyaXRlKGNodW5rKTtcbi8vICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNIVU5LIFdSSVRURU5cIik7XG4vLyAgICAgICAgICAgcmV0dXJuO1xuLy8gICAgICAgICB9IGNhdGNoIChlKXtcbi8vICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd3JpdGluZzogXCIsIGUsIFwiLi4uIHJlbG9hZGluZ1wiKTtcbi8vICAgICAgICAgICByZWxvYWQoKTtcbi8vICAgICAgICAgfVxuLy8gICAgICAgfVxuLy8gICAgIH0sXG4vLyAgICAgYXN5bmMgYWJvcnQocmVhc29uKSB7XG4vLyAgICAgICBjb25zb2xlLmxvZyhcIndyaXRhYmxlIGFib3J0ZWRcIik7O1xuLy8gICAgICAgdHJ5IHtcbi8vICAgICAgICAgYXdhaXQgKChhd2FpdCB1bmRlcmx5aW5nKS53cml0ZXIpLmFib3J0KHJlYXNvbik7XG5cbi8vICAgICAgIH0gY2F0Y2gge31cbi8vICAgICB9LFxuXG4vLyAgICAgYXN5bmMgY2xvc2UoKSB7XG4vLyAgICAgICBjb25zb2xlLmxvZyhcIndyaXRhYmxlIGNsb3NlZFwiKTs7XG4vLyAgICAgICB0cnkge1xuLy8gICAgICAgICBhd2FpdCAoKGF3YWl0IHVuZGVybHlpbmcpLndyaXRlcikuY2xvc2UoKTtcbi8vICAgICAgIH0gY2F0Y2gge31cbi8vICAgICB9XG4vLyAgIH0sIG5vYnVmZmVyKVxuXG4vLyAgIGxldCBjYW5jZWxlZCA9IGZhbHNlO1xuLy8gICBsZXQgcmVhZGFibGUgPSBuZXcgUmVhZGFibGVTdHJlYW0oe1xuLy8gICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuLy8gICAgICAgd2hpbGUoIWNhbmNlbGVkKSB7XG4vLyAgICAgICAgIHRyeSB7XG4vLyAgICAgICAgICAgbGV0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCAoKGF3YWl0IHVuZGVybHlpbmcpLnJlYWRlcikucmVhZCgpO1xuLy8gICAgICAgICAgIGlmICghZG9uZSkge1xuLy8gICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKTtcbi8vICAgICAgICAgICAgIHJldHVybjtcbi8vICAgICAgICAgICB9XG4vLyAgICAgICAgIH0gY2F0Y2gge31cblxuLy8gICAgICAgICByZWxvYWQoKTtcbi8vICAgICAgIH1cbi8vICAgICB9LFxuXG4vLyAgICAgYXN5bmMgY2FuY2VsKHJlYXNvbikge1xuLy8gICAgICAgY2FuY2VsZWQgPSB0cnVlO1xuLy8gICAgICAgY29uc29sZS5sb2coXCJyZWFkYWJsZSBjYW5jZWxlZFwiKTtcbi8vICAgICAgIHRyeSB7XG4vLyAgICAgICAgIGF3YWl0ICgoYXdhaXQgdW5kZXJseWluZykucmVhZGVyKS5jYW5jZWwocmVhc29uKTtcbi8vICAgICAgIH0gY2F0Y2gge31cbi8vICAgICB9XG4vLyAgIH0sIG5vYnVmZmVyKTtcblxuLy8gICByZXR1cm4ge1xuLy8gICAgIHJlYWRhYmxlLFxuLy8gICAgIHdyaXRhYmxlLFxuLy8gICB9O1xuLy8gfVxuIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSBcIi4uL3V0aWwvaXRlclwiO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiLi4vdXRpbC9tYXRoXCI7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSBcIi4uL3V0aWwvb3JkZXJlZG1hcFwiO1xuaW1wb3J0IHsgQnJhbmRlZCB9IGZyb20gXCIuLi91dGlsL3N0cmluZ1wiO1xuaW1wb3J0IHsgVG9rZW5EYXRhIH0gZnJvbSBcIi4vZ2FtZS1ldmVudHNcIjtcblxuZXhwb3J0IHR5cGUgVGFibGV0b3AgPSB7XG4gIHRva2VuczogT3JkZXJlZE1hcDxzdHJpbmcsIFRva2VuRGF0YT47XG4gIGdyaWRfZGltOiBQb2ludDtcbiAgYmc6IHN0cmluZyB8IG51bGw7XG59O1xuXG5leHBvcnQgdHlwZSBTZXJpYWxpemVkVGFibGV0b3AgPSBCcmFuZGVkPFwidGFibGV0b3BcIj47XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0X3RhYmxldG9wID0gKCk6IFRhYmxldG9wID0+ICh7XG4gIHRva2VuczogbmV3IE9yZGVyZWRNYXAoKSxcbiAgZ3JpZF9kaW06IFszMCwgMjBdIGFzIFBvaW50LFxuICBiZzogbnVsbCxcbn0pO1xuXG5leHBvcnQgY29uc3Qgc2VyaWFsaXplX3RidCA9ICh0OiBUYWJsZXRvcCk6IFNlcmlhbGl6ZWRUYWJsZXRvcCA9PlxuICBKU09OLnN0cmluZ2lmeSh7XG4gICAgLi4udCxcbiAgICB0b2tlbnM6IFsuLi5tYXAodC50b2tlbnMudmFsdWVzKCksICh0KSA9PiAoeyAuLi50IH0pKV0sXG4gIH0pIGFzIFNlcmlhbGl6ZWRUYWJsZXRvcDtcblxuZXhwb3J0IGNvbnN0IGRlc2VyaWFsaXplX3RidCA9ICh0OiBTZXJpYWxpemVkVGFibGV0b3ApOiBUYWJsZXRvcCA9PiB7XG4gIGxldCBwID0gSlNPTi5wYXJzZSh0KSBhcyBhbnk7XG4gIGxldCBvbSA9IG5ldyBPcmRlcmVkTWFwKCk7XG4gIHAudG9rZW5zLmZvckVhY2goKHQ6IFRva2VuRGF0YSkgPT4gb20uYWRkKHQuaWQsIHQpKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5wLFxuICAgIHRva2Vuczogb20sXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIi4uL3V0aWwvZXZlbnRzXCI7XG5pbXBvcnQgeyBMb2NhbE9yUmVtb3RlSW1hZ2UgfSBmcm9tIFwiLi4vdXRpbC9maWxlc1wiO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiLi4vdXRpbC9tYXRoXCI7XG5pbXBvcnQgeyBjb25zdW1lIH0gZnJvbSBcIi4uL3V0aWwvc3RyZWFtc1wiO1xuaW1wb3J0IHsgR2FtZUV2ZW50LCBnYW1lX2V2ZW50LCBUb2tlbkRhdGEgfSBmcm9tIFwiLi9nYW1lLWV2ZW50c1wiO1xuaW1wb3J0IHsgZGVmYXVsdF90YWJsZXRvcCwgZGVzZXJpYWxpemVfdGJ0IH0gZnJvbSBcIi4vdGFibGV0b3BcIjtcblxuY29uc3QgQ0FMTE9VVF9USU1FUiA9IDE1MDA7XG5cbnR5cGUgRXZlbnRNYXAgPSB7XG4gIFwiZ2FtZS1ldmVudFwiOiBDdXN0b21FdmVudDxHYW1lRXZlbnQ+O1xufTtcbmV4cG9ydCBjbGFzcyBHYW1lIGV4dGVuZHMgRXZlbnRUYXJnZXQgaW1wbGVtZW50cyBFdmVudEVtaXR0ZXI8RXZlbnRNYXA+IHtcbiAgdGFibGV0b3AgPSBkZWZhdWx0X3RhYmxldG9wKCk7XG4gIGNhbGxvdXRzID0gbmV3IFNldDxQb2ludD4oKTtcblxuICAjZXZlbnRfd3JpdGVyOiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXI8R2FtZUV2ZW50PjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8gVXNlIGEgc3RyZWFtIHNvIHRoYXQgZ2FtZSBldmVudCBwcm9jZXNzaW5nIGlzIGFsbG93ZWQgdG8gYmUgYXN5bmNcbiAgICAvLyBidXQgcmVtYWlucyBvcmRlcmVkLlxuICAgIGNvbnN0IGV2ZW50cyA9IG5ldyBUcmFuc2Zvcm1TdHJlYW08R2FtZUV2ZW50LCBHYW1lRXZlbnQ+KCk7XG4gICAgdGhpcy4jZXZlbnRfd3JpdGVyID0gZXZlbnRzLndyaXRhYmxlLmdldFdyaXRlcigpO1xuXG4gICAgY29uc3VtZShldmVudHMucmVhZGFibGUsIChldikgPT4gdGhpcy4jaGFuZGxlX2V2ZW50KGV2KSk7XG4gIH1cblxuICBhc3luYyBzZXRfYmcoaW1nOiBMb2NhbE9yUmVtb3RlSW1hZ2UgfCB1bmRlZmluZWQpIHtcbiAgICBjb25zdCB1cmwgPSBpbWcgPyBhd2FpdCB0aGlzLiNyZWdpc3Rlcl9yZXNvdXJjZShpbWcpIDogbnVsbDtcbiAgICB0aGlzLmFwcGx5KHtcbiAgICAgIHR5cGU6IFwiYmdcIixcbiAgICAgIHVybCxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGFkZF90b2tlbihpbWc6IExvY2FsT3JSZW1vdGVJbWFnZSwgdDogT21pdDxUb2tlbkRhdGEsIFwidXJsXCIgfCBcImlkXCI+KSB7XG4gICAgY29uc3QgaWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICAgIGNvbnN0IHVybCA9IGF3YWl0IHRoaXMuI3JlZ2lzdGVyX3Jlc291cmNlKGltZyk7XG4gICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICBpZCxcbiAgICAgIHVybCxcbiAgICAgIC4uLnQsXG4gICAgfTtcblxuICAgIHRoaXMuYXBwbHkoe1xuICAgICAgdHlwZTogXCJ0b2tlbi1hZGRlZFwiLFxuICAgICAgLi4udG9rZW4sXG4gICAgfSk7XG4gIH1cblxuICBzZXRfZGltKGRpbTogUG9pbnQpIHtcbiAgICB0aGlzLmFwcGx5KHtcbiAgICAgIHR5cGU6IFwiZ3JpZC1yZXNpemVkXCIsXG4gICAgICBkaW0sXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBhcHBseShldjogR2FtZUV2ZW50KSB7XG4gICAgYXdhaXQgdGhpcy4jZXZlbnRfd3JpdGVyLndyaXRlKGV2KTtcbiAgfVxuXG4gIGFzeW5jICNoYW5kbGVfZXZlbnQoZXY6IEdhbWVFdmVudCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHN3aXRjaCAoZXYudHlwZSkge1xuICAgICAgY2FzZSBcInRva2VuLW1hbmlwdWxhdGVkXCI6XG4gICAgICAgIGZvciAobGV0IHQgb2YgZXYudG9rZW5zKSB7XG4gICAgICAgICAgbGV0IGV4X3Rva2VuID0gdGhpcy50YWJsZXRvcC50b2tlbnMuZ2V0KHQuaWQpO1xuICAgICAgICAgIGlmICghZXhfdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVcGRhdGUgcmVjZWl2ZWQgZm9yIG5vbmV4aXN0YW50IHRva2VuXCIsIHQuaWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBPYmplY3QuYXNzaWduKGV4X3Rva2VuLCB7IGRpbTogdC5kaW0sIGxvYzogdC5sb2MsIHI6IHQuciB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInRva2VuLWFkZGVkXCI6XG4gICAgICAgIGxldCB0b2tlbiA9IHsgaWQ6IGV2LmlkLCBkaW06IGV2LmRpbSwgbG9jOiBldi5sb2MsIHVybDogZXYudXJsLCByOiAwIH07XG4gICAgICAgIHRoaXMudGFibGV0b3AudG9rZW5zLmFkZChldi5pZCwgdG9rZW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJncmlkLXJlc2l6ZWRcIjpcbiAgICAgICAgdGhpcy50YWJsZXRvcC5ncmlkX2RpbSA9IGV2LmRpbTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidG9rZW4tcmVtb3ZlZFwiOlxuICAgICAgICBmb3IgKGxldCBpZCBvZiBldi5pZHMpIHtcbiAgICAgICAgICBjb25zdCByZW1fdG9rZW4gPSB0aGlzLnRhYmxldG9wLnRva2Vucy5nZXQoaWQpO1xuICAgICAgICAgIGlmICghcmVtX3Rva2VuKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVHJpZWQgdG8gcmVtb3ZlIG5vbmV4aXN0YW50IHRva2VuXCIsIGlkKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy50YWJsZXRvcC50b2tlbnMuZGVsZXRlKHJlbV90b2tlbi5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzdGF0ZS1zeW5jXCI6XG4gICAgICAgIHRoaXMudGFibGV0b3AgPSBkZXNlcmlhbGl6ZV90YnQoZXYudGFibGV0b3ApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInRva2VuLXJlb3JkZXJcIjpcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy50YWJsZXRvcC50b2tlbnMuaW5kZXgoZXYuaWQpO1xuICAgICAgICBpZiAoaWR4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVHJpZWQgdG8gcmVvcmRlciBub24tZXhpc3RhbnQgdG9rZW5cIiwgZXYuaWQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0YXJnZXQ7XG4gICAgICAgIGlmIChldi5pZHggPT09IFwidG9wXCIpIHtcbiAgICAgICAgICB0YXJnZXQgPSB0aGlzLnRhYmxldG9wLnRva2Vucy5zaXplIC0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5pZHggPT09IFwiYm90dG9tXCIpIHtcbiAgICAgICAgICB0YXJnZXQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2LmlkeCA9PT0gXCJ1cFwiKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gTWF0aC5taW4odGhpcy50YWJsZXRvcC50b2tlbnMuc2l6ZSAtIDEsIGlkeCArIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldCA9IE1hdGgubWF4KDAsIGlkeCAtIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50YWJsZXRvcC50b2tlbnMuc2V0X2luZGV4KGV2LmlkLCB0YXJnZXQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJiZ1wiOlxuICAgICAgICB0aGlzLnRhYmxldG9wLmJnID0gZXYudXJsO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImNhbGxvdXRcIjpcbiAgICAgICAgdGhpcy5jYWxsb3V0cy5hZGQoZXYubG9jKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jYWxsb3V0cy5kZWxldGUoZXYubG9jKTtcbiAgICAgICAgfSwgQ0FMTE9VVF9USU1FUik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIE5vdGlmeSB0aGF0IHRoZSBnYW1lIHN0YXRlIGhhcyBiZWVuIGFsdGVyZWRcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZ2FtZV9ldmVudChldikpO1xuICB9XG5cbiAgYXN5bmMgI3JlZ2lzdGVyX3Jlc291cmNlKGltZzogTG9jYWxPclJlbW90ZUltYWdlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvLyBVUkxzIGFyZSB2YWxpZCByZXNvdXJjZXNcbiAgICBpZiAodHlwZW9mIGltZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIGltZyBhcyBzdHJpbmc7XG4gICAgfVxuXG4gICAgbGV0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkpO1xuICAgIHVybC5zZWFyY2ggPSBcIlwiO1xuICAgIGxldCBpZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgdXJsLnBhdGhuYW1lID0gYC9yZXNvdXJjZXMvJHtpZH1gO1xuICAgIGxldCBjYWNoZSA9IGF3YWl0IGNhY2hlcy5vcGVuKFwicmVzb3VyY2VzXCIpO1xuICAgIGF3YWl0IGNhY2hlLnB1dCh1cmwsIG5ldyBSZXNwb25zZShpbWcpKTtcbiAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBHYW1lIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICBhZGRFdmVudExpc3RlbmVyKHR5cGU6IFwiZ2FtZS1ldmVudFwiLCBsaXN0ZW5lcjogKGV2OiBDdXN0b21FdmVudDxHYW1lRXZlbnQ+KSA9PiBhbnksIGNhcHR1cmU/OiBib29sZWFuKTogdm9pZDtcbiAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlOiBzdHJpbmcsIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyIHwgRXZlbnRMaXN0ZW5lck9iamVjdCwgdXNlQ2FwdHVyZT86IGJvb2xlYW4pOiB2b2lkO1xufVxuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCB3YWl0Rm9yIH0gZnJvbSBcIi4vZXZlbnRzXCI7XG5cbmV4cG9ydCB0eXBlIFN0YXR1cyA9IFwib3BlblwiIHwgXCJjbG9zZWRcIiB8IFwib3BlbmluZ1wiO1xuXG5leHBvcnQgdHlwZSBIYXNTdGF0dXMgPSB7IHN0YXR1czogU3RhdHVzIH0gJiBFdmVudEVtaXR0ZXI8e1xuICBzdGF0dXM6IEN1c3RvbUV2ZW50PFN0YXR1cz47XG59PjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RlZChpOiBIYXNTdGF0dXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgaGFuZGxlciA9ICh7IGRldGFpbDogc3RhdHVzIH06IHsgZGV0YWlsOiBTdGF0dXMgfSkgPT4ge1xuICAgICAgc3RhdHVzID09PSBcIm9wZW5cIiAmJiByZXNvbHZlKCk7XG4gICAgICBzdGF0dXMgPT09IFwiY2xvc2VkXCIgJiYgcmVqZWN0KCk7XG4gICAgICBpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdGF0dXNcIiwgaGFuZGxlcik7XG4gICAgfTtcbiAgICBpLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0dXNcIiwgaGFuZGxlcik7XG4gICAgaGFuZGxlcih7IGRldGFpbDogaS5zdGF0dXMgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgY2xhc3MgU3RhdHVzRW1pdHRlclxuICBleHRlbmRzIEV2ZW50VGFyZ2V0XG4gIGltcGxlbWVudHNcbiAgICBFdmVudEVtaXR0ZXI8e1xuICAgICAgc3RhdHVzOiBDdXN0b21FdmVudDxTdGF0dXM+O1xuICAgIH0+XG57XG4gICN2YWx1ZTogU3RhdHVzID0gXCJvcGVuaW5nXCI7XG4gIGdldCBjdXJyZW50KCkge1xuICAgIHJldHVybiB0aGlzLiN2YWx1ZTtcbiAgfVxuXG4gIHNldChzOiBTdGF0dXMpIHtcbiAgICB0aGlzLiN2YWx1ZSA9IHM7XG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLm9uc3RhdHVzICYmIHRoaXMub25zdGF0dXMocyksIDApO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJzdGF0dXNcIiwgeyBkZXRhaWw6IHMgfSkpO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdGVkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLiN2YWx1ZSA9PT0gXCJjbG9zZWRcIikgdGhyb3cgXCJjbG9zZWRcIjtcbiAgICBpZiAodGhpcy4jdmFsdWUgPT09IFwib3BlblwiKSByZXR1cm47XG4gICAgaWYgKHRoaXMuI3ZhbHVlID09PSBcIm9wZW5pbmdcIikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbGV0IGhhbmRsZXI6IEV2ZW50TGlzdGVuZXIgPSAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICBsZXQgcyA9IChlIGFzIEN1c3RvbUV2ZW50KS5kZXRhaWw7XG4gICAgICAgICAgaWYgKHMgPT09IFwib3BlbmluZ1wiKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAocyA9PT0gXCJjbG9zZWRcIikge1xuICAgICAgICAgICAgcmVqZWN0KFwiY2xvc2VkXCIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocyA9PT0gXCJvcGVuXCIpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdGF0dXNcIiwgaGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInN0YXR1c1wiLCBoYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uc3RhdHVzPzogKHM6IFN0YXR1cykgPT4gdm9pZDtcbn1cbiIsImltcG9ydCB7IFN0YXR1cyB9IGZyb20gXCIuL25ldFwiO1xuXG5leHBvcnQgdHlwZSBSVENNZXNzYWdlID0gc3RyaW5nIHwgQXJyYXlCdWZmZXIgfCBBcnJheUJ1ZmZlclZpZXcgfCBCbG9iO1xuXG5leHBvcnQgY29uc3Qgc3RyZWFtcyA9IDxSIGV4dGVuZHMgUlRDTWVzc2FnZSwgVyBleHRlbmRzIFJUQ01lc3NhZ2U+KGRjOiBSVENEYXRhQ2hhbm5lbCk6IFJlYWRhYmxlV3JpdGFibGVQYWlyPFIsIFc+ID0+ICh7XG4gIHJlYWRhYmxlOiByZWFkX3N0cmVhbShkYykgYXMgUmVhZGFibGVTdHJlYW08Uj4sXG4gIHdyaXRhYmxlOiB3cml0ZV9zdHJlYW0oZGMpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBvcGVuID0gYXN5bmMgKGNvbm46IFJUQ1BlZXJDb25uZWN0aW9uKTogUHJvbWlzZTxSVENQZWVyQ29ubmVjdGlvbj4gPT4ge1xuICBjb25zb2xlLmxvZyhcIk9QRU5cIik7XG4gIGlmIChjb25uLmljZUNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJjb25uZWN0ZWRcIikge1xuICAgIGNvbnNvbGUubG9nKFwiV0FUXCIpO1xuICAgIHJldHVybiBjb25uO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlBcIiwgY29ubi5pY2VDb25uZWN0aW9uU3RhdGUpO1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJPUEVOXCIsIGNvbm4uaWNlQ29ubmVjdGlvblN0YXRlKTtcbiAgICAgIGlmIChbXCJmYWlsZWRcIiwgXCJjbG9zZWRcIl0uaW5jbHVkZXMoY29ubi5pY2VDb25uZWN0aW9uU3RhdGUpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTkFJTEVEIElUXCIpO1xuICAgICAgICByZWplY3QoXCJGYWlsZWQgdG8gY29ubmVjdFwiKTtcbiAgICAgICAgY29ubi5yZW1vdmVFdmVudExpc3RlbmVyKFwiaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsIGxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoY29ubi5pY2VDb25uZWN0aW9uU3RhdGUgPT09IFwiY29ubmVjdGVkXCIpIHtcbiAgICAgICAgcmVzb2x2ZShjb25uKTtcbiAgICAgICAgY29ubi5yZW1vdmVFdmVudExpc3RlbmVyKFwiaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbm4uYWRkRXZlbnRMaXN0ZW5lcihcInNpZ25hbGluZ3N0YXRlY2hhbmdlXCIsIChldikgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJTSUdOQUxcIiwgZXYpO1xuICAgIH0pO1xuICAgIGNvbm4uYWRkRXZlbnRMaXN0ZW5lcihcImljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiLCBsaXN0ZW5lcik7XG4gIH0pO1xufTtcblxuY29uc3QgcmVhZF9zdHJlYW0gPSAoZGM6IFJUQ0RhdGFDaGFubmVsKTogUmVhZGFibGVTdHJlYW08UlRDTWVzc2FnZT4gPT4ge1xuICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICBkYy5vbm1lc3NhZ2UgPSAoeyBkYXRhIH0pID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJSRUNFSVZFRFwiLCBkYXRhKTtcbiAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGRhdGEpO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IG9uY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gY29udHJvbGxlci5jbG9zZSgpLCAzMDAwKTtcbiAgICAgICAgZGMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgICAgfTtcbiAgICAgIGRjLmFkZEV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICB9LFxuXG4gICAgY2FuY2VsKCkge1xuICAgICAgZGMuY2xvc2UoKTtcbiAgICB9LFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBkY19zdGF0dXMgPSAoZGM6IFJUQ0RhdGFDaGFubmVsKTogU3RhdHVzID0+IHtcbiAgc3dpdGNoIChkYy5yZWFkeVN0YXRlKSB7XG4gICAgY2FzZSBcIm9wZW5cIjpcbiAgICBjYXNlIFwiY2xvc2VkXCI6XG4gICAgICByZXR1cm4gZGMucmVhZHlTdGF0ZTtcbiAgICBjYXNlIFwiY2xvc2luZ1wiOlxuICAgICAgcmV0dXJuIFwiY2xvc2VkXCI7XG4gICAgY2FzZSBcImNvbm5lY3RpbmdcIjpcbiAgICAgIHJldHVybiBcIm9wZW5pbmdcIjtcbiAgfVxufTtcblxuY29uc3Qgd3JpdGVfc3RyZWFtID0gKGRjOiBSVENEYXRhQ2hhbm5lbCk6IFdyaXRhYmxlU3RyZWFtPFJUQ01lc3NhZ2U+ID0+IHtcbiAgbGV0IHJlc3VtZTogKCgpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuICBkYy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgKGVycikgPT4gY29uc29sZS5sb2coXCJEQyBFUlJPUlwiLCBlcnIpKTtcbiAgcmV0dXJuIG5ldyBXcml0YWJsZVN0cmVhbShcbiAgICB7XG4gICAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnN0IG9uY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJzdHJlYW0gY2xvc2VkIGJ5IGRjIGVuZGluZ1wiLCBkYy5sYWJlbCk7XG4gICAgICAgICAgY29udHJvbGxlci5lcnJvcihcIkNsb3NlZCBmb29cIik7XG4gICAgICAgICAgZGMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgICAgICB9O1xuICAgICAgICBkYy5hZGRFdmVudExpc3RlbmVyKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgICAgIGRjLm9ub3BlbiA9ICgpID0+IHJlc3VtZSAmJiByZXN1bWUoKTtcbiAgICAgICAgZGMub25idWZmZXJlZGFtb3VudGxvdyA9ICgpID0+IHJlc3VtZSAmJiByZXN1bWUoKTtcbiAgICAgIH0sXG4gICAgICBhc3luYyB3cml0ZShjaHVuaykge1xuICAgICAgICBpZiAoZGMucmVhZHlTdGF0ZSA9PT0gXCJjb25uZWN0aW5nXCIgfHwgZGMuYnVmZmVyZWRBbW91bnQgPiBkYy5idWZmZXJlZEFtb3VudExvd1RocmVzaG9sZCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwid2FpdGluZyBmb3IgcmVzdW1wdG9pbi4uLlwiKTtcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigociwgXykgPT4gKHJlc3VtZSA9IHIpKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInJlc3VtZWQhXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwid3JpdGluZ1wiLCBjaHVuayk7XG4gICAgICAgIGRjLnNlbmQoY2h1bmspO1xuICAgICAgfSxcbiAgICAgIGFib3J0KCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImFib3J0ZWQgZGMgYnkgc3RyZWFtXCIpO1xuICAgICAgICBkYy5jbG9zZSgpO1xuICAgICAgfSxcbiAgICAgIGNsb3NlKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNsb3NlZCBkYyBieSBzdHJlYW1cIik7XG4gICAgICAgIGRjLmNsb3NlKCk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgLy8gRG9uJ3QgbGV0IHRoZSBvdXRwdXQgc3RyZWFtIGNvbnN1bWUgbW9yZSB0aGFuIG9uZSBtZXNzYWdlIGluIGNhc2UgaXQgZ2V0cyBzaHV0ZG93blxuICAgIG5ldyBDb3VudFF1ZXVpbmdTdHJhdGVneSh7IGhpZ2hXYXRlck1hcms6IDEgfSlcbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBHYW1lRXZlbnQgfSBmcm9tIFwiLi4vZ2FtZS9nYW1lLWV2ZW50c1wiO1xuaW1wb3J0IHsgc3RyZWFtcyB9IGZyb20gXCIuLi91dGlsL3J0Y1wiO1xuaW1wb3J0IHsganNvbiwgcGlwZSB9IGZyb20gXCIuLi91dGlsL3N0cmVhbXNcIjtcblxuZXhwb3J0IHR5cGUgUGVlcklkID0gc3RyaW5nICYgeyBfX2JyYW5kOiBcIlBlZXJJZFwiIH07XG5cbmV4cG9ydCBjbGFzcyBQZWVyIHtcbiAgaWQ6IFBlZXJJZDtcbiAgcnRjOiBSVENQZWVyQ29ubmVjdGlvbjtcbiAgZXZlbnRzOiBSZWFkYWJsZVN0cmVhbTxHYW1lRXZlbnQ+O1xuICBldmVudHNfZGM6IFJUQ0RhdGFDaGFubmVsO1xuICAjZXZlbnRfd3JpdGVyOiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXI8R2FtZUV2ZW50PjtcblxuICBjb25zdHJ1Y3RvcihpZDogUGVlcklkLCBydGM6IFJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMucnRjID0gcnRjO1xuXG4gICAgdGhpcy5ldmVudHNfZGMgPSBydGMuY3JlYXRlRGF0YUNoYW5uZWwoXCJldmVudHNcIiwgeyBuZWdvdGlhdGVkOiB0cnVlLCBpZDogMSB9KTtcbiAgICBsZXQgeyByZWFkYWJsZSwgd3JpdGFibGUgfSA9IGpzb248R2FtZUV2ZW50PihzdHJlYW1zKHRoaXMuZXZlbnRzX2RjKSBhcyBSZWFkYWJsZVdyaXRhYmxlUGFpcjxzdHJpbmcsIHN0cmluZz4pO1xuICAgIHRoaXMuZXZlbnRzID0gcmVhZGFibGU7XG4gICAgdGhpcy4jZXZlbnRfd3JpdGVyID0gd3JpdGFibGUuZ2V0V3JpdGVyKCk7XG4gICAgdGhpcy5ydGMub25kYXRhY2hhbm5lbCA9IChldikgPT4gdGhpcy5vbmRhdGFjaGFubmVsKGV2KTtcbiAgfVxuXG4gIHdyaXRlX2V2ZW50KGV2OiBHYW1lRXZlbnQpIHtcbiAgICBldi5yZW1vdGUgPSB0aGlzLmlkO1xuICAgIHJldHVybiB0aGlzLiNldmVudF93cml0ZXIud3JpdGUoZXYpO1xuICB9XG5cbiAgb25kYXRhY2hhbm5lbCA9IChldjogUlRDRGF0YUNoYW5uZWxFdmVudCkgPT4ge307XG5cbiAgZGF0YWNoYW5uZWwobmFtZTogc3RyaW5nLCBpbml0PzogUlRDRGF0YUNoYW5uZWxJbml0KTogUHJvbWlzZTxSVENEYXRhQ2hhbm5lbD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgZGMgPSB0aGlzLnJ0Yy5jcmVhdGVEYXRhQ2hhbm5lbChuYW1lLCBpbml0KTtcbiAgICAgIGRjLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwib3BlblwiLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgZGMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHJlamVjdCk7XG4gICAgICAgICAgcmVzb2x2ZShkYyk7XG4gICAgICAgIH0sXG4gICAgICAgIHsgb25jZTogdHJ1ZSB9XG4gICAgICApO1xuICAgICAgZGMuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHJlamVjdCwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiLi4vdXRpbC9ldmVudHNcIjtcbmltcG9ydCB7IFN0YXR1c0VtaXR0ZXIgfSBmcm9tIFwiLi4vdXRpbC9uZXRcIjtcbmltcG9ydCB7IHdpdGhfaGVhcnRiZWF0IH0gZnJvbSBcIi4uL3V0aWwvc29ja2V0XCI7XG5pbXBvcnQgeyBQZWVyLCBQZWVySWQgfSBmcm9tIFwiLi9wZWVyXCI7XG5cbmNvbnN0IERFRkFVTFRfU0lHTkFMRVIgPSBcIndzczovL2JhdHRsZWdyaWQtc2lnbmFsaW5nLmhlcm9rdWFwcC5jb21cIjtcbmNvbnN0IFBFRVJfQ09ORklHID0geyBpY2VTZXJ2ZXJzOiBbeyB1cmxzOiBcInN0dW46c3R1bi5sLmdvb2dsZS5jb206MTkzMDJcIiB9XSB9O1xuY29uc3QgUkVDT05ORUNUX1RJTUVPVVQgPSAxMDAwOyAvL21zXG5cbmV4cG9ydCBjbGFzcyBTaWduYWxlciBleHRlbmRzIEV2ZW50VGFyZ2V0IGltcGxlbWVudHMgRXZlbnRFbWl0dGVyPHsgcGVlcjogQ3VzdG9tRXZlbnQ8UGVlcj4gfT4ge1xuICBzdGF0dXMgPSBuZXcgU3RhdHVzRW1pdHRlcigpO1xuICBwZWVyX2lkOiBQZWVySWQ7XG5cbiAgI3NvY2tldDogV2ViU29ja2V0O1xuICAjc2lnbmFsX3VybDogc3RyaW5nO1xuICAjYWxsb3dfY29ubmVjdGlvbnM6IGJvb2xlYW47XG4gICNjb25ucyA9IG5ldyBNYXA8UGVlcklkLCBQZWVyPigpO1xuICAjc2h1dHRpbmdfZG93biA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHBlZXJfaWQ6IFBlZXJJZCwgYWxsb3dfY29ubmVjdGlvbnMgPSBmYWxzZSwgc2lnbmFsX3VybCA9IERFRkFVTFRfU0lHTkFMRVIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucGVlcl9pZCA9IHBlZXJfaWQ7XG4gICAgdGhpcy4jYWxsb3dfY29ubmVjdGlvbnMgPSBhbGxvd19jb25uZWN0aW9ucztcbiAgICB0aGlzLiNzaWduYWxfdXJsID0gc2lnbmFsX3VybDtcbiAgICB0aGlzLiNzb2NrZXQgPSB0aGlzLiNlc3RhYmxpc2hfc29ja2V0KCk7XG4gIH1cblxuICBpbml0aWF0ZShyZW1vdGVfaWQ6IFBlZXJJZCk6IFBlZXIge1xuICAgIGxldCBwZWVyID0gdGhpcy4jaW5pdF9jb25uZWN0aW9uKHJlbW90ZV9pZCk7XG5cbiAgICBwZWVyLnJ0Y1xuICAgICAgLmNyZWF0ZU9mZmVyKClcbiAgICAgIC50aGVuKGFzeW5jIChvZmZlcikgPT4ge1xuICAgICAgICBhd2FpdCBwZWVyLnJ0Yy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3NlbmQoe1xuICAgICAgICAgIHR5cGU6IFwib2ZmZXJcIixcbiAgICAgICAgICBmcm9tOiB0aGlzLnBlZXJfaWQsXG4gICAgICAgICAgdG86IHJlbW90ZV9pZCxcbiAgICAgICAgICBvZmZlcixcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlKSA9PiBjb25zb2xlLmVycm9yKFwiSW50aWF0aW9uIGVycm9yOiBcIiwgZSkpO1xuXG4gICAgcmV0dXJuIHBlZXI7XG4gIH1cblxuICAjZXN0YWJsaXNoX3NvY2tldCgpOiBXZWJTb2NrZXQge1xuICAgIHRoaXMuc3RhdHVzLnNldChcIm9wZW5pbmdcIik7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwodGhpcy4jc2lnbmFsX3VybCk7XG4gICAgdXJsLnBhdGhuYW1lID0gdGhpcy5wZWVyX2lkO1xuICAgIHRoaXMuI3NvY2tldCA9IHdpdGhfaGVhcnRiZWF0KG5ldyBXZWJTb2NrZXQodXJsKSk7XG4gICAgdGhpcy4jc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsICgpID0+IHRoaXMuc3RhdHVzLnNldChcIm9wZW5cIiksIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB0aGlzLiNzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsIHRoaXMuI3NvY2tldF9zaHV0ZG93bik7XG4gICAgdGhpcy4jc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJoYXJkLWRpc2Nvbm5lY3RcIiwgdGhpcy4jc29ja2V0X3NodXRkb3duKTtcbiAgICB0aGlzLiNzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy4jaGFuZGxlX21lc3NhZ2UpO1xuICAgIHJldHVybiB0aGlzLiNzb2NrZXQ7XG4gIH1cblxuICAjc29ja2V0X3NodXRkb3duID0gKCkgPT4ge1xuICAgIHRoaXMuc3RhdHVzLnNldChcIm9wZW5pbmdcIik7XG4gICAgdGhpcy4jc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCB0aGlzLiNzb2NrZXRfc2h1dGRvd24pO1xuICAgIHRoaXMuI3NvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKFwiaGFyZC1kaXNjb25uZWN0XCIsIHRoaXMuI3NvY2tldF9zaHV0ZG93bik7XG4gICAgdGhpcy4jc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuI2hhbmRsZV9tZXNzYWdlKTtcblxuICAgICF0aGlzLiNzaHV0dGluZ19kb3duICYmIHRoaXMuI3JlY29ubmVjdCgpO1xuICB9O1xuXG4gIGFzeW5jICNzZW5kKG1zZzogU2lnbmFsKSB7XG4gICAgYXdhaXQgdGhpcy5zdGF0dXMuY29ubmVjdGVkKCk7XG4gICAgdGhpcy4jc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkobXNnKSk7XG4gIH1cblxuICAjaW5pdF9jb25uZWN0aW9uKHJlbW90ZV9pZDogUGVlcklkKTogUGVlciB7XG4gICAgbGV0IHBlZXIgPSBuZXcgUGVlcihyZW1vdGVfaWQsIG5ldyBSVENQZWVyQ29ubmVjdGlvbihQRUVSX0NPTkZJRykpO1xuICAgIHRoaXMuI2Nvbm5zLnNldChyZW1vdGVfaWQsIHBlZXIpO1xuXG4gICAgY29uc3Qgb25pY2VjYW5kaWRhdGUgPSAoeyBjYW5kaWRhdGUgfTogUlRDUGVlckNvbm5lY3Rpb25JY2VFdmVudCkgPT4ge1xuICAgICAgaWYgKGNhbmRpZGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLiNzZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImljZWNhbmRpZGF0ZVwiLFxuICAgICAgICAgIGZyb206IHRoaXMucGVlcl9pZCxcbiAgICAgICAgICB0bzogcmVtb3RlX2lkLFxuICAgICAgICAgIGNhbmRpZGF0ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEZvcndhcmQgYWxsIGljZSBjYW5kaWRhdGVzXG4gICAgcGVlci5ydGMuYWRkRXZlbnRMaXN0ZW5lcihcImljZWNhbmRpZGF0ZVwiLCBvbmljZWNhbmRpZGF0ZSk7XG5cbiAgICBwZWVyLmV2ZW50c19kYy5hZGRFdmVudExpc3RlbmVyKFwiY2xvc2VcIiwgKCkgPT4ge1xuICAgICAgcGVlci5ydGMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImljZWNhbmRpZGF0ZVwiLCBvbmljZWNhbmRpZGF0ZSk7XG4gICAgICB0aGlzLiNjb25ucy5kZWxldGUocmVtb3RlX2lkKTtcbiAgICB9KTtcblxuICAgIHBlZXIuZXZlbnRzX2RjLmFkZEV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJwZWVyXCIsIHsgZGV0YWlsOiBwZWVyIH0pKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwZWVyO1xuICB9XG5cbiAgI2hhbmRsZV9tZXNzYWdlID0gYXN5bmMgKHsgZGF0YSB9OiBNZXNzYWdlRXZlbnQ8c3RyaW5nPikgPT4ge1xuICAgIGxldCBzaWcgPSBKU09OLnBhcnNlKGRhdGEpO1xuXG4gICAgaWYgKHNpZy50eXBlID09PSBcImVycm9yLW5vdC1leGlzdHNcIikge1xuICAgICAgbGV0IHBlZXIgPSB0aGlzLiNjb25ucy5nZXQoc2lnLmRlc3RpbmF0aW9uKTtcbiAgICAgIHBlZXI/LnJ0Yy5jbG9zZSgpO1xuICAgICAgY29uc29sZS5sb2coXCJjbG9zaW5nXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCByZW1vdGUgPSB0aGlzLiNjb25ucy5nZXQoc2lnLmZyb20pO1xuXG4gICAgc3dpdGNoIChzaWcudHlwZSkge1xuICAgICAgLy8gQSByZW1vdGUgcGVlciBpcyB0cnlpbmcgdG8gY29ubmVjdCB0byB1c1xuICAgICAgY2FzZSBcIm9mZmVyXCI6XG4gICAgICAgIGlmICghdGhpcy4jYWxsb3dfY29ubmVjdGlvbnMpIHJldHVybjtcbiAgICAgICAgcmVtb3RlID0gdGhpcy4jaW5pdF9jb25uZWN0aW9uKHNpZy5mcm9tKTtcbiAgICAgICAgcmVtb3RlLnJ0Yy5zZXRSZW1vdGVEZXNjcmlwdGlvbihuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHNpZy5vZmZlcikpO1xuICAgICAgICBsZXQgYW5zd2VyID0gYXdhaXQgcmVtb3RlLnJ0Yy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgYXdhaXQgcmVtb3RlLnJ0Yy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG5cbiAgICAgICAgdGhpcy4jc29ja2V0LnNlbmQoXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgdHlwZTogXCJhbnN3ZXJcIixcbiAgICAgICAgICAgIGZyb206IHRoaXMucGVlcl9pZCxcbiAgICAgICAgICAgIHRvOiBzaWcuZnJvbSxcbiAgICAgICAgICAgIGFuc3dlcixcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiYW5zd2VyXCI6XG4gICAgICAgIHJlbW90ZT8ucnRjLnNldFJlbW90ZURlc2NyaXB0aW9uKG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oc2lnLmFuc3dlcikpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImljZWNhbmRpZGF0ZVwiOlxuICAgICAgICBhd2FpdCByZW1vdGU/LnJ0Yy5hZGRJY2VDYW5kaWRhdGUoc2lnLmNhbmRpZGF0ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICAjcmVjb25uZWN0KCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy4jZXN0YWJsaXNoX3NvY2tldCgpLCBSRUNPTk5FQ1RfVElNRU9VVCk7XG4gIH1cblxuICBzaHV0ZG93bigpIHtcbiAgICB0aGlzLiNzaHV0dGluZ19kb3duID0gdHJ1ZTtcbiAgICB0aGlzLiNzb2NrZXQuY2xvc2UoKTtcbiAgICB0aGlzLiNjb25ucy5jbGVhcigpO1xuICB9XG59XG5cbnR5cGUgU2lnbmFsRGF0YSA9IHsgZnJvbTogUGVlcklkOyB0bzogUGVlcklkIH0gJiAoXG4gIHwge1xuICAgICAgdHlwZTogXCJhbnN3ZXJcIjtcbiAgICAgIGFuc3dlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdDtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogXCJvZmZlclwiO1xuICAgICAgb2ZmZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQ7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IFwiaWNlY2FuZGlkYXRlXCI7XG4gICAgICBjYW5kaWRhdGU6IFJUQ0ljZUNhbmRpZGF0ZTtcbiAgICB9XG4pO1xuXG50eXBlIFNpZ25hbEVycm9yID0ge1xuICB0eXBlOiBcImVycm9yLW5vdC1leGlzdHNcIjtcbiAgZGVzdGluYXRpb246IFBlZXJJZDtcbn07XG5cbnR5cGUgU2lnbmFsID0gU2lnbmFsRGF0YSB8IFNpZ25hbEVycm9yO1xuIiwiY29uc3QgSEVBUlRCRUFUX0lOVEVSVkFMID0gMzAwMDtcbmV4cG9ydCBmdW5jdGlvbiB3aXRoX2hlYXJ0YmVhdCh3czogV2ViU29ja2V0KTogV2ViU29ja2V0IHtcbiAgbGV0IGxpdmUgPSB0cnVlO1xuICBsZXQgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgaWYgKCFsaXZlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiU2VydmVyIGZhaWxlZCB0byByZXNwb25kIHRvIGhlYXJ0YmVhdFwiKTtcbiAgICAgIHdzLmNsb3NlKDEwMDAsIFwiSGVhcnRiZWF0IGZhaWx1cmVcIik7XG4gICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgIHdzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaGFyZC1kaXNjb25uZWN0XCIpKTtcbiAgICB9XG4gICAgbGl2ZSA9IGZhbHNlO1xuICAgIHdzLnNlbmQoXCJfX3BpbmdfX1wiKTtcbiAgfSwgSEVBUlRCRUFUX0lOVEVSVkFMKTtcblxuICB3cy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAobXNnKSA9PiB7XG4gICAgaWYgKG1zZy5kYXRhID09PSBcIl9fcG9uZ19fXCIpIHtcbiAgICAgIG1zZy5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIGNvbnNvbGUubG9nKFwicG9uZ2luZ1wiKTtcbiAgICAgIGxpdmUgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgd3MuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBcImVycm9yXCIsXG4gICAgKCkgPT4ge1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgfSxcbiAgICB7IG9uY2U6IHRydWUgfVxuICApO1xuICB3cy5hZGRFdmVudExpc3RlbmVyKFxuICAgIFwiY2xvc2VcIixcbiAgICAoKSA9PiB7XG4gICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICB9LFxuICAgIHsgb25jZTogdHJ1ZSB9XG4gICk7XG5cbiAgcmV0dXJuIHdzO1xufVxuIiwiaW1wb3J0IHsgY29uc3VtZSB9IGZyb20gXCIuLi8uLi91dGlsL3N0cmVhbXNcIjtcblxuZXhwb3J0IGNvbnN0IFJFU09VUkNFX1BST1RPQ09MID0gXCJyZXF1ZXN0LXJlc291cmNlXCI7XG5cbmV4cG9ydCB0eXBlIFJlc291cmNlID0ge1xuICBibG9iOiBCbG9iO1xufTtcblxudHlwZSBIZWFkZXIgPSB7XG4gIHR5cGU6IHN0cmluZztcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1ZXN0KGNoYW5uZWw6IFJlYWRhYmxlV3JpdGFibGVQYWlyPEFycmF5QnVmZmVyIHwgc3RyaW5nLCBBcnJheUJ1ZmZlciB8IHN0cmluZz4pOiBQcm9taXNlPFJlc291cmNlPiB7XG4gIGxldCBidWZmZXI6IEFycmF5QnVmZmVyW10gPSBbXTtcbiAgbGV0IGhlYWRlcjogSGVhZGVyIHwgdW5kZWZpbmVkO1xuICB0cnkge1xuICAgIGF3YWl0IGNvbnN1bWUoY2hhbm5lbC5yZWFkYWJsZSwgKGNodW5rKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGhlYWRlciA9IEpTT04ucGFyc2UoY2h1bmspO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhcIlJFQURJTkcgcmVzb3VyY2UgQ0hVTktcIik7XG4gICAgICBidWZmZXIucHVzaChjaHVuayk7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY29uc3VtaW5nXCIsIGUpO1xuICB9XG5cbiAgY29uc29sZS5sb2coYnVmZmVyKTtcbiAgbGV0IGJsb2IgPSBuZXcgQmxvYihidWZmZXIsIHsgdHlwZTogaGVhZGVyPy50eXBlIH0pO1xuXG4gIGNvbnNvbGUubG9nKFwiR09UIEVNIEFMTCFcIiwgYmxvYik7XG4gIHJldHVybiB7XG4gICAgYmxvYixcbiAgfTtcbn1cblxuY29uc3QgTUFYX01FU1NBR0VfU0laRSA9IDY0ICogMTAwMDtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXNwb25zZShkYzogUmVhZGFibGVXcml0YWJsZVBhaXI8QXJyYXlCdWZmZXIgfCBzdHJpbmcsIEFycmF5QnVmZmVyIHwgc3RyaW5nPiwgcmVzb3VyY2U6IFJlc291cmNlKSB7XG4gIGxldCBibG9iID0gcmVzb3VyY2UuYmxvYjtcbiAgbGV0IHdyaXRlciA9IGRjLndyaXRhYmxlLmdldFdyaXRlcigpO1xuICBjb25zb2xlLmxvZyhcIkJMT0JMXCIsIGJsb2IpO1xuXG4gIHdyaXRlci53cml0ZShKU09OLnN0cmluZ2lmeSh7IHR5cGU6IGJsb2IudHlwZSB9KSk7XG4gIC8vIFRoZW4gc2VuZCB0aGUgY2h1bmtzXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvYi5zaXplOyBpICs9IE1BWF9NRVNTQUdFX1NJWkUpIHtcbiAgICBjb25zb2xlLmxvZyhcIldSSVRJTkcgRklSU1QgQ2hVTktcIik7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgYXdhaXQgd3JpdGVyLndyaXRlKGF3YWl0IGJsb2Iuc2xpY2UoaSwgTWF0aC5taW4oaSArIE1BWF9NRVNTQUdFX1NJWkUsIGJsb2Iuc2l6ZSkpLmFycmF5QnVmZmVyKCkpO1xuICB9XG5cbiAgY29uc29sZS5lcnJvcihcImNsb3NpbmdcIik7XG4gIGF3YWl0IHdyaXRlci5jbG9zZSgpO1xufVxuIiwiaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuLi9nYW1lL2dhbWVcIjtcbmltcG9ydCB7IEdhbWVFdmVudCB9IGZyb20gXCIuLi9nYW1lL2dhbWUtZXZlbnRzXCI7XG5pbXBvcnQgeyBjb25zdW1lIH0gZnJvbSBcIi4uL3V0aWwvc3RyZWFtc1wiO1xuaW1wb3J0IHsgUGVlciwgUGVlcklkIH0gZnJvbSBcIi4vcGVlclwiO1xuaW1wb3J0IHsgU2lnbmFsZXIgfSBmcm9tIFwiLi9zaWduYWxlclwiO1xuaW1wb3J0IHsgUkVTT1VSQ0VfUFJPVE9DT0wsIHJlcXVlc3QgfSBmcm9tIFwiLi9yZXNvdXJjZXMvcHJvdG9jb2xcIjtcbmltcG9ydCB7IGRjX3N0YXR1cywgc3RyZWFtcyB9IGZyb20gXCIuLi91dGlsL3J0Y1wiO1xuaW1wb3J0IHsgUmVzb3VyY2VJZCwgUmVzb3VyY2VNZXNzYWdlLCBSZXNvdXJjZVJlcXVlc3QgfSBmcm9tIFwiLi9yZXNvdXJjZXMvc2VydmljZS13b3JrZXItcHJvdG9jb2xcIjtcbmltcG9ydCB7IFN0YXR1c0VtaXR0ZXIgfSBmcm9tIFwiLi4vdXRpbC9uZXRcIjtcbmltcG9ydCB7IHByZVByb2Nlc3NGaWxlIH0gZnJvbSBcInR5cGVzY3JpcHRcIjtcblxuZXhwb3J0IGNsYXNzIENsaWVudCB7XG4gICNnYW1lOiBHYW1lO1xuICAjcGVlcjogUGVlcjtcbiAgI2dhbWVfaWQ6IFBlZXJJZFxuICAjc2lnbmFsZXI6IFNpZ25hbGVyO1xuICBzdGF0dXMgPSBuZXcgU3RhdHVzRW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKGdhbWVfaWQ6IFBlZXJJZCwgZ2FtZTogR2FtZSkge1xuICAgIHRoaXMuI3NpZ25hbGVyID0gbmV3IFNpZ25hbGVyKGNyeXB0by5yYW5kb21VVUlEKCkgYXMgUGVlcklkKTtcbiAgICB0aGlzLiNnYW1lID0gZ2FtZTtcbiAgICB0aGlzLiNnYW1lX2lkID0gZ2FtZV9pZDtcbiAgICB0aGlzLiNnYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2dhbWUtZXZlbnQnLCB0aGlzLmZvcndhcmRfZXZlbnRzKTtcbiAgICB0aGlzLiNwZWVyID0gdGhpcy4jc2V0dXBfcGVlcigpO1xuXG4gICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIub25tZXNzYWdlID0gYXN5bmMgKGV2OiBNZXNzYWdlRXZlbnQ8UmVzb3VyY2VSZXF1ZXN0PikgPT4ge1xuICAgICAgbGV0IGlkID0gZXYuZGF0YS5pZCBhcyBSZXNvdXJjZUlkO1xuICAgICAgY29uc29sZS5sb2coXCJDTElFTlQgQVRURU1QVElORyBUTyBGRVRDSFwiLCB0aGlzLiNwZWVyLmV2ZW50c19kYy5yZWFkeVN0YXRlKTtcbiAgICAgIGF3YWl0IHRoaXMuI3BlZXIuZGF0YWNoYW5uZWwoaWQsIHtwcm90b2NvbDogUkVTT1VSQ0VfUFJPVE9DT0x9KVxuICAgICAgICAudGhlbihzdHJlYW1zPEFycmF5QnVmZmVyLCBBcnJheUJ1ZmZlcj4pXG4gICAgICAgIC50aGVuKHJlcXVlc3QpXG4gICAgICAgIC50aGVuKGFzeW5jICh7YmxvYn0pID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkNPTU1VTklDQVRJTkcgV0lUSCBTRVJWSUNFIFdPUktFUlwiKTtcbiAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyIS5wb3N0TWVzc2FnZSh7dHlwZTogJ2ZvdW5kJywgaWQsIGJsb2J9IGFzIFJlc291cmNlTWVzc2FnZSlcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyByZXNvdXJjZTogXCIsIGUpO1xuICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIhLnBvc3RNZXNzYWdlKHt0eXBlOiAnbm90Zm91bmQnLCBpZCwgZXJyb3I6IGV9IGFzIFJlc291cmNlTWVzc2FnZSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgfVxuXG4gIGZvcndhcmRfZXZlbnRzID0gKHtkZXRhaWw6IGV2fTogQ3VzdG9tRXZlbnQ8R2FtZUV2ZW50PikgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiQ0FMTEJBQ0tcIiwgZXYpO1xuICAgIGlmIChldi5yZW1vdGUpIHJldHVybjtcbiAgICB0aGlzLiNwZWVyLndyaXRlX2V2ZW50KGV2KTtcbiAgfVxuXG5cbiAgYXN5bmMgcmVjb25uZWN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuI3BlZXIgPSB0aGlzLiNzZXR1cF9wZWVyKCk7XG4gIH1cblxuICBhc3luYyBzaHV0ZG93bigpIHtcbiAgICB0aGlzLiNwZWVyLnJ0Yy5jbG9zZSgpO1xuICAgIGNvbnNvbGUubG9nKFwiV2FpdGluZyBmb3Igc2lnbmFsZXIgc2h1dGRvd25cIik7XG4gICAgYXdhaXQgdGhpcy4jc2lnbmFsZXIuc2h1dGRvd24oKTtcbiAgICBjb25zb2xlLmxvZyhcInNpZ25hbGVyIGRlYWRcIik7XG4gICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIub25tZXNzYWdlID0gbnVsbDtcbiAgfVxuXG4gICNzZXR1cF9wZWVyKCk6IFBlZXIge1xuICAgIGxldCBwZWVyID0gdGhpcy4jc2lnbmFsZXIuaW5pdGlhdGUodGhpcy4jZ2FtZV9pZCk7XG4gICAgcGVlci5ydGMuYWRkRXZlbnRMaXN0ZW5lcignaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJDT05OIFNUQVRFIENIQU5HRURcIik7XG4gICAgICBpZiAocGVlci5ydGMuaWNlQ29ubmVjdGlvblN0YXRlID09PSBcImNvbm5lY3RlZFwiKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzLnNldCgnb3BlbicpO1xuICAgICAgfVxuICAgIH0pXG4gICAgcGVlci5ldmVudHNfZGMuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB0aGlzLnN0YXR1cy5zZXQoJ2Nsb3NlZCcpKTtcbiAgICBwZWVyLmV2ZW50c19kYy5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKCkgPT4gdGhpcy5zdGF0dXMuc2V0KCdvcGVuJykpO1xuICAgIHRoaXMuc3RhdHVzLnNldChkY19zdGF0dXMocGVlci5ldmVudHNfZGMpKTtcblxuICAgIGNvbnN1bWUocGVlci5ldmVudHMsIChldikgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuI2dhbWUuYXBwbHkoZXYpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcGVlcjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuLi9nYW1lL2dhbWVcIjtcbmltcG9ydCB7IHNlcmlhbGl6ZV90YnQgfSBmcm9tIFwiLi4vZ2FtZS90YWJsZXRvcFwiO1xuaW1wb3J0IHsgd2FpdEZvciB9IGZyb20gXCIuLi91dGlsL2V2ZW50c1wiO1xuaW1wb3J0IHsgU3RhdHVzRW1pdHRlciB9IGZyb20gXCIuLi91dGlsL25ldFwiO1xuaW1wb3J0IHsgc3RyZWFtcyB9IGZyb20gXCIuLi91dGlsL3J0Y1wiO1xuaW1wb3J0IHsgY29uc3VtZSB9IGZyb20gXCIuLi91dGlsL3N0cmVhbXNcIjtcbmltcG9ydCB7IFBlZXIsIFBlZXJJZCB9IGZyb20gXCIuL3BlZXJcIjtcbmltcG9ydCB7IFJlc291cmNlLCBSRVNPVVJDRV9QUk9UT0NPTCwgcmVzcG9uc2UgfSBmcm9tIFwiLi9yZXNvdXJjZXMvcHJvdG9jb2xcIjtcbmltcG9ydCB7IFJlc291cmNlSWQgfSBmcm9tIFwiLi9yZXNvdXJjZXMvc2VydmljZS13b3JrZXItcHJvdG9jb2xcIjtcbmltcG9ydCB7IFNpZ25hbGVyIH0gZnJvbSBcIi4vc2lnbmFsZXJcIjtcblxuZXhwb3J0IGNsYXNzIFNlcnZlciB7XG4gIHNpZ25hbGVyOiBTaWduYWxlcjtcbiAgI2dhbWU6IEdhbWU7XG4gICNjbGllbnRzOiBTZXQ8UGVlcj4gPSBuZXcgU2V0KCk7XG4gICNhYm9ydDogQWJvcnRDb250cm9sbGVyO1xuXG4gIGNvbnN0cnVjdG9yKGdhbWU6IEdhbWUpIHtcbiAgICB0aGlzLnNpZ25hbGVyID0gbmV3IFNpZ25hbGVyKGNyeXB0by5yYW5kb21VVUlEKCkgYXMgUGVlcklkLCB0cnVlKTtcbiAgICB0aGlzLiNnYW1lID0gZ2FtZTtcbiAgICB0aGlzLiNhYm9ydCA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICB0aGlzLnNpZ25hbGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJwZWVyXCIsICh7IGRldGFpbDogcGVlciB9OiBDdXN0b21FdmVudDxQZWVyPikgPT4gdGhpcy4jYWRkX2NsaWVudChwZWVyKSk7XG4gICAgdGhpcy4jZ2FtZS5hZGRFdmVudExpc3RlbmVyKFwiZ2FtZS1ldmVudFwiLCAoeyBkZXRhaWw6IGV2IH0pID0+IHtcbiAgICAgIGZvciAobGV0IGNsaWVudCBvZiB0aGlzLiNjbGllbnRzKSB7XG4gICAgICAgIGlmIChjbGllbnQuaWQgPT09IGV2LnJlbW90ZSkgY29udGludWU7XG4gICAgICAgIGNsaWVudC53cml0ZV9ldmVudChldik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAjYWRkX2NsaWVudChwZWVyOiBQZWVyKSB7XG4gICAgdGhpcy4jY2xpZW50cy5hZGQocGVlcik7XG5cbiAgICAvLyBJdCdzIGEgbGl0dGxlIHdlaXJkIHRoYXQgd2UncmUgc2VuZGluZyB0aGUgSlNPTiBlbmNvZGluZ1xuICAgIC8vIGFzIGEgc3RyaW5nLiBCdXQgd2UgbmVlZCB0byBjYXB0dXJlIHRoZSBzdGF0ZSBvZiB0aGUgdGFibGV0b3BcbiAgICAvLyBhdCB0aGlzIGV4YWN0IG1vbWVudC4gSWYgd2UgZGlkbid0IEpTT04gZW5jb2RlIG5vdywgdGhlIHRhYmxldG9wXG4gICAgLy8gY291bGQgYmUgbXV0YXRlZCBiZWZvcmUgYmVpbmcgd3JpdHRlbiB0byB0aGUgd2lyZS5cbiAgICAvL1xuICAgIC8vIFdlIGFpbSBmb3IgaWRlbXBvdGVuY3kgc28gdGhpcyAqc2hvdWxkbid0KiBiZSBhIHByb2JsZW0sIGJ1dCBsZXRzXG4gICAgLy8ganVzdCBhdm9pZCBpdFxuICAgIHBlZXIud3JpdGVfZXZlbnQoe1xuICAgICAgdHlwZTogXCJzdGF0ZS1zeW5jXCIsXG4gICAgICB0YWJsZXRvcDogc2VyaWFsaXplX3RidCh0aGlzLiNnYW1lLnRhYmxldG9wKSxcbiAgICB9KTtcblxuICAgIGNvbnN1bWUocGVlci5ldmVudHMsIChldikgPT4ge1xuICAgICAgZXYucmVtb3RlID0gcGVlci5pZDtcbiAgICAgIHJldHVybiB0aGlzLiNnYW1lLmFwcGx5KGV2KTtcbiAgICB9KTtcblxuICAgIHBlZXIuZXZlbnRzX2RjLmFkZEV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIlBFRUVSIEVWRU5UIERDXCIpO1xuICAgICAgdGhpcy4jY2xpZW50cy5kZWxldGUocGVlcik7XG4gICAgfSk7XG5cbiAgICBwZWVyLm9uZGF0YWNoYW5uZWwgPSBhc3luYyAoZXYpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiSU5DT01JTkcgRENcIiwgZXYuY2hhbm5lbCk7XG4gICAgICBjb25zdCBjaGFubmVsID0gZXYuY2hhbm5lbDtcbiAgICAgIGF3YWl0IHdhaXRGb3IoXCJvcGVuXCIsIGNoYW5uZWwpO1xuICAgICAgY29uc29sZS5sb2coXCJuZXcgZGNcIiwgY2hhbm5lbCk7XG4gICAgICBpZiAoY2hhbm5lbC5wcm90b2NvbCA9PT0gUkVTT1VSQ0VfUFJPVE9DT0wpIHtcbiAgICAgICAgcmVzcG9uc2Uoc3RyZWFtczxBcnJheUJ1ZmZlciwgQXJyYXlCdWZmZXI+KGNoYW5uZWwpLCBhd2FpdCB0aGlzLiNnZXRfcmVzb3VyY2UoY2hhbm5lbC5sYWJlbCBhcyBSZXNvdXJjZUlkKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jICNnZXRfcmVzb3VyY2UoaWQ6IFJlc291cmNlSWQpOiBQcm9taXNlPFJlc291cmNlPiB7XG4gICAgbGV0IHJlc3AgPSBhd2FpdCBmZXRjaChgL3Jlc291cmNlcy8ke2lkfWApO1xuICAgIHJldHVybiB7IGJsb2I6IGF3YWl0IHJlc3AuYmxvYigpIH07XG4gIH1cblxuICBhc3luYyBzaHV0ZG93bigpIHtcbiAgICBmb3IgKGxldCBjIG9mIHRoaXMuI2NsaWVudHMpIHtcbiAgICAgIGMucnRjLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgdGhpcy4jY2xpZW50cy5jbGVhcigpO1xuICAgIHRoaXMuI2Fib3J0LmFib3J0KFwiU2VydmVyIHNodXR0aW5nIGRvd25cIik7XG4gICAgYXdhaXQgdGhpcy5zaWduYWxlci5zaHV0ZG93bigpO1xuICB9XG59XG4iLCJpbXBvcnR7bm9DaGFuZ2UgYXMgdH1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO2ltcG9ydHtkaXJlY3RpdmUgYXMgZSxEaXJlY3RpdmUgYXMgcixQYXJ0VHlwZSBhcyBzfWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3QgaT1lKGNsYXNzIGV4dGVuZHMgcntjb25zdHJ1Y3Rvcih0KXt2YXIgZTtpZihzdXBlcih0KSx0LnR5cGUhPT1zLkFUVFJJQlVURXx8XCJzdHlsZVwiIT09dC5uYW1lfHwobnVsbD09PShlPXQuc3RyaW5ncyl8fHZvaWQgMD09PWU/dm9pZCAwOmUubGVuZ3RoKT4yKXRocm93IEVycm9yKFwiVGhlIGBzdHlsZU1hcGAgZGlyZWN0aXZlIG11c3QgYmUgdXNlZCBpbiB0aGUgYHN0eWxlYCBhdHRyaWJ1dGUgYW5kIG11c3QgYmUgdGhlIG9ubHkgcGFydCBpbiB0aGUgYXR0cmlidXRlLlwiKX1yZW5kZXIodCl7cmV0dXJuIE9iamVjdC5rZXlzKHQpLnJlZHVjZSgoKGUscik9Pntjb25zdCBzPXRbcl07cmV0dXJuIG51bGw9PXM/ZTplK2Ake3I9ci5yZXBsYWNlKC8oPzpeKHdlYmtpdHxtb3p8bXN8byl8KSg/PVtBLVpdKS9nLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCl9OiR7c307YH0pLFwiXCIpfXVwZGF0ZShlLFtyXSl7Y29uc3R7c3R5bGU6c309ZS5lbGVtZW50O2lmKHZvaWQgMD09PXRoaXMuY3Qpe3RoaXMuY3Q9bmV3IFNldDtmb3IoY29uc3QgdCBpbiByKXRoaXMuY3QuYWRkKHQpO3JldHVybiB0aGlzLnJlbmRlcihyKX10aGlzLmN0LmZvckVhY2goKHQ9PntudWxsPT1yW3RdJiYodGhpcy5jdC5kZWxldGUodCksdC5pbmNsdWRlcyhcIi1cIik/cy5yZW1vdmVQcm9wZXJ0eSh0KTpzW3RdPVwiXCIpfSkpO2Zvcihjb25zdCB0IGluIHIpe2NvbnN0IGU9clt0XTtudWxsIT1lJiYodGhpcy5jdC5hZGQodCksdC5pbmNsdWRlcyhcIi1cIik/cy5zZXRQcm9wZXJ0eSh0LGUpOnNbdF09ZSl9cmV0dXJuIHR9fSk7ZXhwb3J0e2kgYXMgc3R5bGVNYXB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGUtbWFwLmpzLm1hcFxuIiwiaW1wb3J0IHsgY3NzLCBDU1NSZXN1bHRHcm91cCwgaHRtbCwgTGl0RWxlbWVudCB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5LCBzdGF0ZSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgc3R5bGVNYXAgfSBmcm9tIFwibGl0L2RpcmVjdGl2ZXMvc3R5bGUtbWFwLmpzXCI7XG5cbkBjdXN0b21FbGVtZW50KFwid2l0aC10b29sdGlwXCIpXG5jbGFzcyBXaXRoVG9vbHRpcCBleHRlbmRzIExpdEVsZW1lbnQge1xuICBAcHJvcGVydHkoKVxuICB0ZXh0ID0gXCJcIjtcblxuICBAc3RhdGUoKVxuICBtb3VzZXg6IG51bWJlciA9IDA7XG5cbiAgQHN0YXRlKClcbiAgbW91c2V5OiBudW1iZXIgPSAwO1xuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy4jbW91c2Vtb3ZlKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLiNtb3VzZW1vdmUpO1xuICB9XG5cbiAgI21vdXNlbW92ZSA9IChldjogTW91c2VFdmVudCkgPT4ge1xuICAgIHRoaXMubW91c2V4ID0gZXYucGFnZVg7XG4gICAgdGhpcy5tb3VzZXkgPSBldi5wYWdlWTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc29sZS5sb2coXCJSZW5kZXJpbmdcIik7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICA8ZGl2XG4gICAgICAgIGlkPVwibWVzc2FnZVwiXG4gICAgICAgIHN0eWxlPSR7c3R5bGVNYXAoe1xuICAgICAgICAgIGxlZnQ6IGAke3RoaXMubW91c2V4ICsgOH1weGAsXG4gICAgICAgICAgdG9wOiBgJHt0aGlzLm1vdXNleSArIDEwfXB4YCxcbiAgICAgICAgfSl9XG4gICAgICA+XG4gICAgICAgICR7dGhpcy50ZXh0fVxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxuXG4gIHN0YXRpYyBzdHlsZXM/OiBDU1NSZXN1bHRHcm91cCB8IHVuZGVmaW5lZCA9IGNzc2BcbiAgICA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICAgIH1cblxuICAgIGRpdiB7XG4gICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICBiYWNrZ3JvdW5kOiBibGFjaztcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgIHBhZGRpbmc6IDAuMjVlbSAwLjVlbTtcbiAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICB3aWR0aDogbWF4LWNvbnRlbnQ7XG4gICAgfVxuXG4gICAgQGtleWZyYW1lcyBhcHBlYXIge1xuICAgICAgMCUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgfVxuXG4gICAgICAxMDAlIHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICA6aG9zdCg6aG92ZXIpIGRpdiB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIGFuaW1hdGlvbjogYXBwZWFyIDI1MG1zIGxpbmVhciBmb3J3YXJkcyA3NTBtcztcbiAgICB9XG4gIGA7XG59XG4iLCJpbXBvcnQgeyBjc3MsIENTU1Jlc3VsdEdyb3VwLCBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSBcImxpdFwiO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuXG5AY3VzdG9tRWxlbWVudChcImJnLXRvZ2dsZVwiKVxuY2xhc3MgVG9nZ2xlIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDwhLS0gUmVjdGFuZ3VsYXIgc3dpdGNoIC0tPlxuICAgICAgPGxhYmVsIGNsYXNzPVwic3dpdGNoXCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiAvPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInNsaWRlciByb3VuZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwib24tdGV4dFwiPkhvc3Rpbmc8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJvZmYtdGV4dFwiPk9mZmxpbmU8L3NwYW4+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRvdC13cmFwcGVyXCI+PGRpdiBjbGFzcz1cImRvdFwiPjwvZGl2PjwvZGl2PlxuICAgICAgPC9sYWJlbD5cbiAgICBgO1xuICB9XG5cbiAgc3RhdGljIHN0eWxlcz86IENTU1Jlc3VsdEdyb3VwIHwgdW5kZWZpbmVkID0gY3NzYFxuICAgIC8qIFRoZSBzd2l0Y2ggLSB0aGUgYm94IGFyb3VuZCB0aGUgc2xpZGVyICovXG4gICAgLnN3aXRjaCB7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgIHdpZHRoOiA0LjVlbTtcbiAgICAgIHBhZGRpbmc6IDAuMWVtO1xuICAgIH1cblxuICAgIC8qIEhpZGUgZGVmYXVsdCBIVE1MIGNoZWNrYm94ICovXG4gICAgLnN3aXRjaCBpbnB1dCB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgIC8qIFRoZSBzbGlkZXIgKi9cbiAgICAuc2xpZGVyIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogMDtcbiAgICAgIGJvdHRvbTogMDtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICByaWdodDogMDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XG4gICAgICB0cmFuc2l0aW9uOiAwLjRzO1xuICAgIH1cblxuICAgIC5zbGlkZXIgPiBzcGFuIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgICB0b3A6IDAuMWVtO1xuICAgIH1cblxuICAgIGlucHV0OmNoZWNrZWQgKyAuc2xpZGVyID4gLm9uLXRleHQge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG5cbiAgICBpbnB1dDpjaGVja2VkICsgLnNsaWRlciA+IC5vZmYtdGV4dCB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIGlucHV0ICsgLnNsaWRlciA+IC5vZmYtdGV4dCB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICByaWdodDogMC44ZW07XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cblxuICAgIGlucHV0ICsgLnNsaWRlciA+IC5vbi10ZXh0IHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICBsZWZ0OiAwLjVlbTtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB9XG5cbiAgICAuZG90LXdyYXBwZXIge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgbGVmdDogMC4xZW07XG4gICAgICB0b3A6IDAuMWVtO1xuICAgICAgcmlnaHQ6IDAuMWVtO1xuICAgICAgYm90dG9tOiAwLjFlbTtcbiAgICAgIHRyYW5zaXRpb246IDAuNHM7XG4gICAgfVxuXG4gICAgaW5wdXQ6Y2hlY2tlZCArIC5zbGlkZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzIxOTZmMztcbiAgICB9XG5cbiAgICBpbnB1dDpmb2N1cyArIC5zbGlkZXIge1xuICAgICAgYm94LXNoYWRvdzogMCAwIDFweCAjMjE5NmYzO1xuICAgIH1cblxuICAgIGlucHV0OmNoZWNrZWQgKyAuc2xpZGVyICsgLmRvdC13cmFwcGVyIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWChjYWxjKDEwMCUgLSAxLjJlbSkpO1xuICAgIH1cblxuICAgIC8qIFJvdW5kZWQgc2xpZGVycyAqL1xuICAgIC5zbGlkZXIucm91bmQge1xuICAgICAgYm9yZGVyLXJhZGl1czogMzRweDtcbiAgICB9XG5cbiAgICAuZG90IHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgaGVpZ2h0OiAxZW07XG4gICAgICBhc3BlY3QtcmF0aW86IDEvMTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICB9XG4gIGA7XG59XG4iLCJpbXBvcnQgeyBjc3MsIGh0bWwsIExpdEVsZW1lbnQgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgU3RhdHVzIH0gZnJvbSBcIi4uL3V0aWwvbmV0XCI7XG5pbXBvcnQgXCIuL3V0aWwvd2l0aC10b29sdGlwXCI7XG5cbkBjdXN0b21FbGVtZW50KFwiaG9zdC10b2dnbGVcIilcbmNsYXNzIEhvc3RUb2dnbGUgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgQHByb3BlcnR5KClcbiAgc3RhdHVzOiBTdGF0dXMgfCBcImxvY2FsXCIgPSBcImxvY2FsXCI7XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPCEtLSBSZWN0YW5ndWxhciBzd2l0Y2ggLS0+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJzd2l0Y2hcIj5cbiAgICAgICAgPHdpdGgtdG9vbHRpcCB0ZXh0PSR7aHVtYW4odGhpcy5zdGF0dXMpfT5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgQGlucHV0PSR7dGhpcy50b2dnbGV9ID9jaGVja2VkPSR7dGhpcy5zdGF0dXMgIT09IFwibG9jYWxcIn0gLz5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInNsaWRlciByb3VuZCAke3RoaXMuc3RhdHVzfVwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJvbi1zcGFjZVwiPkhvc3Rpbmc8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRvdFwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwib2ZmLXNwYWNlXCI+T2ZmbGluZTwvc3Bhbj5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvd2l0aC10b29sdGlwPlxuICAgICAgPC9sYWJlbD5cbiAgICBgO1xuICB9XG5cbiAgdG9nZ2xlID0gKGV2OiBJbnB1dEV2ZW50KSA9PiB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICgoZXYudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJlbmFibGVcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiZGlzYWJsZVwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgXG4gICAgLnNsaWRlciB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgIGZsZXgtd3JhcDogbm93cmFwO1xuICAgICAgaGVpZ2h0OiAxZW07XG4gICAgICB0cmFuc2l0aW9uOiAwLjRzO1xuICAgICAgcGFkZGluZzogMC4yZW07XG4gICAgICBtaW4td2lkdGg6IDQuNWVtO1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgYmFja2dyb3VuZDogI2NjYztcbiAgICB9XG5cbiAgICAub3BlbiB7XG4gICAgICBiYWNrZ3JvdW5kOiAjMjE5NmYzO1xuICAgIH1cblxuICAgIC5vcGVuaW5nIHtcbiAgICAgIGJhY2tncm91bmQ6ICNmZGNiMTg7XG4gICAgfVxuXG4gICAgLm9wZW5pbmcgPiAub24tc3BhY2Uge1xuICAgICAgY29sb3I6IGJsYWNrO1xuICAgIH1cblxuICAgIGlucHV0IHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgaW5wdXQ6Y2hlY2tlZCArIC5zbGlkZXIge1xuICAgIH1cblxuICAgIGlucHV0OmNoZWNrZWQgKyAuc2xpZGVyID4gLm9uLXNwYWNlIHtcbiAgICAgIGZsZXgtZ3JvdzogMTtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgfVxuXG4gICAgaW5wdXQ6Y2hlY2tlZCArIC5zbGlkZXIgPiAub2ZmLXNwYWNlIHtcbiAgICAgIGZsZXgtZ3JvdzogMCAhaW1wb3J0YW50O1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG5cbiAgICAub2ZmLXNwYWNlIHtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgICBmbGV4LWdyb3c6IDEgIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAub24tc3BhY2Uge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgIHdpZHRoOiAwO1xuICAgIH1cblxuICAgIC5vbi1zcGFjZSxcbiAgICAub2ZmLXNwYWNlIHtcbiAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgfVxuXG4gICAgLnNsaWRlciA+IHNwYW4ge1xuICAgICAgZmxleC1ncm93OiAwO1xuICAgICAgZmxleC1iYXNpczogMDtcbiAgICAgIHRyYW5zaXRpb246IDAuNHM7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cblxuICAgIC5yb3VuZCB7XG4gICAgICBib3JkZXItcmFkaXVzOiAxZW07XG4gICAgfVxuICAgIC5kb3Qge1xuICAgICAgYm9yZGVyLXJhZGl1czogMWVtO1xuICAgICAgbWluLXdpZHRoOiAxZW07XG4gICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgIH1cbiAgYDtcbn1cblxuZnVuY3Rpb24gaHVtYW4oczogU3RhdHVzIHwgXCJsb2NhbFwiKSB7XG4gIHN3aXRjaCAocykge1xuICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgICByZXR1cm4gXCJKb2luYWJsZVwiO1xuICAgIGNhc2UgXCJjbG9zZWRcIjpcbiAgICAgIHJldHVybiBcIk9mZmxpbmVcIjtcbiAgICBjYXNlIFwib3BlbmluZ1wiOlxuICAgICAgcmV0dXJuIFwiTm90IEpvaW5hYmxlXCI7XG4gICAgY2FzZSBcImxvY2FsXCI6XG4gICAgICByZXR1cm4gXCJTdGFydCBob3N0aW5nXCI7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNzcywgaHRtbCwgTGl0RWxlbWVudCB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5IH0gZnJvbSBcImxpdC9kZWNvcmF0b3JzLmpzXCI7XG5pbXBvcnQgeyBTdGF0dXMgfSBmcm9tIFwiLi4vdXRpbC9uZXRcIjtcbmltcG9ydCBcIi4vdXRpbC93aXRoLXRvb2x0aXBcIjtcblxuQGN1c3RvbUVsZW1lbnQoXCJjbGllbnQtc3RhdHVzXCIpXG5jbGFzcyBDbGllbnRTdGF0dXMgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgQHByb3BlcnR5KClcbiAgc3RhdHVzOiBTdGF0dXMgPSBcIm9wZW5pbmdcIjtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8IS0tIFJlY3Rhbmd1bGFyIHN3aXRjaCAtLT5cbiAgICAgIDxzcGFuIGNsYXNzPVwic2xpZGVyIHJvdW5kICR7dGhpcy5zdGF0dXN9XCI+ICR7aHVtYW4odGhpcy5zdGF0dXMpfSA8L3NwYW4+XG4gICAgYDtcbiAgfVxuXG4gIHRvZ2dsZSA9IChldjogSW5wdXRFdmVudCkgPT4ge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoKGV2LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiZW5hYmxlXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImRpc2FibGVcIikpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBzdGF0aWMgc3R5bGVzID0gY3NzYFxuICAgIC5zbGlkZXIge1xuICAgICAgaGVpZ2h0OiAxZW07XG4gICAgICB0cmFuc2l0aW9uOiAwLjRzO1xuICAgICAgcGFkZGluZzogMC4yZW07XG4gICAgICBtaW4td2lkdGg6IDVlbTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgICBhbGlnbi1pdGVtczogYmFzZWxpbmU7XG4gICAgfVxuXG4gICAgLm9wZW4ge1xuICAgICAgYmFja2dyb3VuZDogIzIxOTZmMztcbiAgICB9XG5cbiAgICAub3BlbmluZyB7XG4gICAgICBiYWNrZ3JvdW5kOiAjZmRjYjE4O1xuICAgIH1cblxuICAgIC5yb3VuZCB7XG4gICAgICBib3JkZXItcmFkaXVzOiAxZW07XG4gICAgfVxuICBgO1xufVxuXG5mdW5jdGlvbiBodW1hbihzOiBTdGF0dXMgfCBcImxvY2FsXCIpIHtcbiAgc3dpdGNoIChzKSB7XG4gICAgY2FzZSBcIm9wZW5cIjpcbiAgICAgIHJldHVybiBcIkNvbm5lY3RlZFwiO1xuICAgIGNhc2UgXCJjbG9zZWRcIjpcbiAgICAgIHJldHVybiBcIkRpc2Nvbm5lY3RlZFwiO1xuICAgIGNhc2UgXCJvcGVuaW5nXCI6XG4gICAgICByZXR1cm4gXCJDb25uZWN0aW5nXCI7XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCB0aW1lb3V0ID0gPFQ+KHByb206IFByb21pc2U8VD4sIHRpbWU6IG51bWJlcik6IFByb21pc2U8VD4gPT5cbiAgUHJvbWlzZS5yYWNlKFtwcm9tLCBuZXcgUHJvbWlzZSgoX3IsIHJlaikgPT4gc2V0VGltZW91dChyZWosIHRpbWUpKSBhcyBQcm9taXNlPFQ+XSk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXRyeTxUPih0aW1lczogbnVtYmVyLCBwcm9tOiAoKSA9PiBQcm9taXNlPFQ+KTogUHJvbWlzZTxUPiB7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBwcm9tKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHRpbWVzLS0gPT0gMCkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgY3NzLCBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSBcImxpdFwiO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHksIHF1ZXJ5LCBzdGF0ZSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgR2FtZUV2ZW50IH0gZnJvbSBcIi4uL2dhbWUvZ2FtZS1ldmVudHNcIjtcbmltcG9ydCB7IEJnRHJvcEV2ZW50LCBDYW52YXMsIFRva2VuRHJvcEV2ZW50LCBUb2tlblNlbGVjdEV2ZW50IH0gZnJvbSBcIi4vY2FudmFzXCI7XG5pbXBvcnQgXCIuL2J1eW1lYWNvZmZlZVwiO1xuaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuLi9nYW1lL2dhbWVcIjtcbmltcG9ydCB7IGlmRGVmaW5lZCB9IGZyb20gXCJsaXQvZGlyZWN0aXZlcy9pZi1kZWZpbmVkLmpzXCI7XG5pbXBvcnQgeyBtYXhfcCB9IGZyb20gXCIuLi91dGlsL21hdGhcIjtcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSBcIi4uL3V0aWwvaXRlclwiO1xuaW1wb3J0IHsgQ2xpZW50IH0gZnJvbSBcIi4uL25ldC9jbGllbnRcIjtcbmltcG9ydCB7IFNlcnZlciB9IGZyb20gXCIuLi9uZXQvc2VydmVyXCI7XG5pbXBvcnQgeyBQZWVySWQgfSBmcm9tIFwiLi4vbmV0L3BlZXJcIjtcbmltcG9ydCBcIi4vdXRpbC93aXRoLXRvb2x0aXBcIjtcbmltcG9ydCBcIi4vdXRpbC90b2dnbGVcIjtcbmltcG9ydCBcIi4vaG9zdC10b2dnbGVcIjtcbmltcG9ydCBcIi4vY2xpZW50LXN0YXR1c1wiO1xuaW1wb3J0IHsgdGltZW91dCB9IGZyb20gXCIuLi91dGlsL3Byb21pc2VzXCI7XG5cbkBjdXN0b21FbGVtZW50KFwiYmctYXBwXCIpXG5jbGFzcyBBcHAgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgQHF1ZXJ5KFwiI3dpZHRoXCIsIHRydWUpXG4gIHdpZHRoPzogSFRNTElucHV0RWxlbWVudDtcblxuICBAcXVlcnkoXCIjaGVpZ2h0XCIsIHRydWUpXG4gIGhlaWdodD86IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgQHF1ZXJ5KFwiYmctY2FudmFzXCIsIHRydWUpXG4gIGNhbnZhcz86IENhbnZhcztcblxuICBAc3RhdGUoKVxuICBjbGllbnQ/OiBDbGllbnQ7XG5cbiAgQHN0YXRlKClcbiAgc2VydmVyPzogU2VydmVyO1xuXG4gIEBzdGF0ZSgpXG4gIHNlbGVjdGlvbjogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG5cbiAgQHN0YXRlKClcbiAgaG9zdF9wZW5kaW5nID0gZmFsc2U7XG5cbiAgZ2FtZTogR2FtZSA9IG5ldyBHYW1lKCk7XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCBlcnJvciA9XG4gICAgICB0aGlzLmNsaWVudD8uc3RhdHVzLmN1cnJlbnQgPT09IFwiY2xvc2VkXCJcbiAgICAgICAgPyBodG1sYCA8ZGl2IGNsYXNzPVwibWVzc2FnZSBlcnJvclwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGgxPkVycm9yIGNvbm5lY3RpbmcgdG8gcmVtb3RlIGdyaWQ8L2gxPlxuICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz0ke3RoaXMuI25ld19sb2NhbH0+TmV3IGxvY2FsIGdyaWQ8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PmBcbiAgICAgICAgOiBudWxsO1xuICAgIGxldCBjb25uZWN0aW5nID1cbiAgICAgIHRoaXMuY2xpZW50Py5zdGF0dXMuY3VycmVudCA9PT0gXCJvcGVuaW5nXCJcbiAgICAgICAgPyBodG1sYCA8ZGl2IGNsYXNzPVwibWVzc2FnZVwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGgxPkNvbm5lY3RpbmcgdG8gZ3JpZC4uLjwvaDE+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5gXG4gICAgICAgIDogbnVsbDtcbiAgICBsZXQgZGlzY29ubmVjdGVkID1cbiAgICAgIHRoaXMuY2xpZW50Py5zdGF0dXMuY3VycmVudCA9PT0gXCJjbG9zZWRcIlxuICAgICAgICA/IGh0bWxgIDxkaXYgY2xhc3M9XCJtZXNzYWdlXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8aDE+RGlzY29ubmVjdGVkIGZyb20gaG9zdDwvaDE+XG4gICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPSR7dGhpcy4jbmV3X2xvY2FsfT5Db250aW51ZSBsb2NhbGx5PC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5gXG4gICAgICAgIDogbnVsbDtcblxuICAgIGxldCBvdmVybGF5ID0gZXJyb3IgfHwgY29ubmVjdGluZyB8fCBkaXNjb25uZWN0ZWQ7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8c2VjdGlvbiBpZD1cInRvb2xiYXJcIiBjbGFzcz1cImdyb3VwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJncm91cFwiPlxuICAgICAgICAgICR7dGhpcy5jbGllbnRcbiAgICAgICAgICAgID8gaHRtbGA8Y2xpZW50LXN0YXR1cyBzdGF0dXM9JHt0aGlzLmNsaWVudC5zdGF0dXMuY3VycmVudH0+PC9jbGllbnQtc3RhdHVzPmBcbiAgICAgICAgICAgIDogaHRtbGA8aG9zdC10b2dnbGVcbiAgICAgICAgICAgICAgICBzdGF0dXM9JHt0aGlzLnNlcnZlcj8uc2lnbmFsZXIuc3RhdHVzLmN1cnJlbnQgPz8gXCJsb2NhbFwifVxuICAgICAgICAgICAgICAgIEBlbmFibGU9JHt0aGlzLiNob3N0fVxuICAgICAgICAgICAgICAgIEBkaXNhYmxlPSR7dGhpcy4jdW5ob3N0fVxuICAgICAgICAgICAgICA+PC9ob3N0LXRvZ2dsZT5gfVxuICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgR3JpZDpcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cIndpZHRoXCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjFcIiBAaW5wdXQ9JHt0aGlzLiN1cGRhdGVEaW19IC52YWx1ZT0ke3RoaXMuZ2FtZS50YWJsZXRvcC5ncmlkX2RpbVswXSArIFwiXCJ9IC8+IHhcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cImhlaWdodFwiIHR5cGU9XCJudW1iZXJcIiBtaW49XCIxXCIgQGlucHV0PSR7dGhpcy4jdXBkYXRlRGltfSAudmFsdWU9JHt0aGlzLmdhbWUudGFibGV0b3AuZ3JpZF9kaW1bMV0gKyBcIlwifSAvPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAke3RoaXMuc2VsZWN0aW9uLnNpemUgPT09IDFcbiAgICAgICAgICAgID8gaHRtbGBcbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBAY2xpY2s9JHsoKSA9PiB0aGlzLmdhbWUuYXBwbHkoeyB0eXBlOiBcInRva2VuLXJlb3JkZXJcIiwgaWQ6IGZpcnN0KHRoaXMuc2VsZWN0aW9uKSEsIGlkeDogXCJkb3duXCIgfSl9XG4gICAgICAgICAgICAgICAgICAgID9kaXNhYmxlZD0ke3RoaXMuZ2FtZS50YWJsZXRvcC50b2tlbnMuaW5kZXgoZmlyc3QodGhpcy5zZWxlY3Rpb24pISkgPT09IDB9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIE1vdmUgRG93blxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIEBjbGljaz0keygpID0+IHRoaXMuZ2FtZS5hcHBseSh7IHR5cGU6IFwidG9rZW4tcmVvcmRlclwiLCBpZDogZmlyc3QodGhpcy5zZWxlY3Rpb24pISwgaWR4OiBcInVwXCIgfSl9XG4gICAgICAgICAgICAgICAgICAgID9kaXNhYmxlZD0ke3RoaXMuZ2FtZS50YWJsZXRvcC50b2tlbnMuaW5kZXgoZmlyc3QodGhpcy5zZWxlY3Rpb24pISkgPT09IHRoaXMuZ2FtZS50YWJsZXRvcC50b2tlbnMuc2l6ZSAtIDF9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIE1vdmUgVXBcbiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICBgXG4gICAgICAgICAgICA6IG51bGx9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZ3JvdXBcIj5cbiAgICAgICAgICA8YnV5LW1lLWEtY29mZmVlIGNsYXNzPVwicmlnaHRcIj48L2J1eS1tZS1hLWNvZmZlZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgICA8YmctY2FudmFzXG4gICAgICAgIGJnPSR7aWZEZWZpbmVkKHRoaXMuZ2FtZS50YWJsZXRvcC5iZyA/PyB1bmRlZmluZWQpfVxuICAgICAgICAuc2VsZWN0aW9uPSR7dGhpcy5zZWxlY3Rpb259XG4gICAgICAgIHdpZHRoPSR7dGhpcy5nYW1lLnRhYmxldG9wLmdyaWRfZGltWzBdfVxuICAgICAgICBoZWlnaHQ9JHt0aGlzLmdhbWUudGFibGV0b3AuZ3JpZF9kaW1bMV19XG4gICAgICAgIC50b2tlbnM9JHt0aGlzLmdhbWUudGFibGV0b3AudG9rZW5zfVxuICAgICAgICAuY2FsbG91dHM9JHt0aGlzLmdhbWUuY2FsbG91dHN9XG4gICAgICAgIEB0b2tlbi1kcm9wPSR7KHsgZGV0YWlsIH06IFRva2VuRHJvcEV2ZW50KSA9PiB0aGlzLmdhbWUuYWRkX3Rva2VuKGRldGFpbC5pbWcsIHsgbG9jOiBkZXRhaWwubG9jLCByOiAwLCBkaW06IGRldGFpbC5kaW0gfSl9XG4gICAgICAgIEBiZy1kcm9wPSR7KHsgZGV0YWlsIH06IEJnRHJvcEV2ZW50KSA9PiB0aGlzLmdhbWUuc2V0X2JnKGRldGFpbCl9XG4gICAgICAgIEB0b2tlbi1zZWxlY3Q9JHsoeyBkZXRhaWwgfTogVG9rZW5TZWxlY3RFdmVudCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2VsZWN0aW9uID0gbmV3IFNldChkZXRhaWwpO1xuICAgICAgICB9fVxuICAgICAgICBAZ2FtZS1ldmVudD0keyh7IGRldGFpbCB9OiBDdXN0b21FdmVudDxHYW1lRXZlbnQ+KSA9PiB0aGlzLmdhbWUuYXBwbHkoZGV0YWlsKX1cbiAgICAgID48L2JnLWNhbnZhcz5cbiAgICAgICR7b3ZlcmxheX1cbiAgICBgO1xuICB9XG5cbiAgdXBkYXRlZChjaGFuZ2VkUHJvcGVydGllczogTWFwPHN0cmluZywgYW55Pikge1xuICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoXCJjbGllbnRcIikpIHtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gYEJhdHRsZUdyaWQke3RoaXMuY2xpZW50ICYmIHRoaXMuY2xpZW50LnN0YXR1cy5jdXJyZW50ID09PSBcIm9wZW5cIiA/ICh0aGlzLnNlcnZlciA/IFwiLSBIb3N0aW5nXCIgOiBcIi0gQ29ubmVjdGVkXCIpIDogXCJcIn1gO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgXG4gICAgOmhvc3Qge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgZ3JpZDpcbiAgICAgICAgXCJ0b29sYmFyXCIgMzBweFxuICAgICAgICBcInZpZXdwb3J0XCIgbWlubWF4KDAsIDFmcilcbiAgICAgICAgLyBtaW5tYXgoMCwgMWZyKTtcbiAgICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICAgICAgLS11aS1iZzogI2Y5ZjlmYTtcbiAgICB9XG5cbiAgICAubWVzc2FnZSB7XG4gICAgICBncmlkLWFyZWE6IDEgLyAxIC8gMyAvIDE7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgei1pbmRleDogMjtcbiAgICB9XG5cbiAgICAucmlnaHQge1xuICAgICAganVzdGlmeS1zZWxmOiBlbmQ7XG4gICAgfVxuXG4gICAgYmctY2FudmFzIHtcbiAgICAgIGdyaWQtYXJlYTogdmlld3BvcnQ7XG4gICAgICB6LWluZGV4OiAxO1xuICAgIH1cblxuICAgIGlucHV0W3R5cGU9XCJudW1iZXJcIl0ge1xuICAgICAgd2lkdGg6IDNlbTtcbiAgICB9XG5cbiAgICAuZ3JvdXAge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBmbGV4LXdyYXA6IG5vd3JhcDtcbiAgICB9XG5cbiAgICAjdG9vbGJhciB7XG4gICAgICBncmlkLWFyZWE6IHRvb2xiYXI7XG4gICAgICBib3gtc2hhZG93OiAwIDAgNHB4IGdyYXk7XG4gICAgICB6LWluZGV4OiAyO1xuICAgICAgYmFja2dyb3VuZDogdmFyKC0tdWktYmcpO1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgcGFkZGluZzogMCAxZW07XG4gICAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHVuc2V0O1xuICAgIH1cbiAgICAuZ3JvdXAgaW1nIHtcbiAgICAgIHdpZHRoOiAxZW07XG4gICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIH1cbiAgYDtcblxuICAjdXBkYXRlRGltID0gKCkgPT4ge1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIHRoaXMuZ2FtZS5zZXRfZGltKG1heF9wKFsxLCAxXSwgW3BhcnNlSW50KHRoaXMud2lkdGg/LnZhbHVlKSA/PyAwLCBwYXJzZUludCh0aGlzLmhlaWdodD8udmFsdWUpID8/IDBdKSk7XG4gIH07XG5cbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICB0aGlzLmdhbWUuYWRkRXZlbnRMaXN0ZW5lcihcImdhbWUtZXZlbnRcIiwgKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBpZCBvZiB0aGlzLnNlbGVjdGlvbikge1xuICAgICAgICB0aGlzLmdhbWUudGFibGV0b3AudG9rZW5zLmhhcyhpZCkgfHwgdGhpcy5zZWxlY3Rpb24uZGVsZXRlKGlkKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgpO1xuICAgICAgdGhpcy5jYW52YXM/LnJlcXVlc3RVcGRhdGUoKTtcbiAgICB9KTtcbiAgICAvLyBzZXRUaW1lb3V0KCBhc3luYyAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJkZWJ1ZyBub3cgcGxlYXNlXCIpO1xuXG4gICAgbGV0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgbGV0IGdhbWVfaWQgPSBwYXJhbXMuZ2V0KFwiZ2FtZVwiKSBhcyBQZWVySWQgfCB1bmRlZmluZWQ7XG4gICAgaWYgKCFnYW1lX2lkKSByZXR1cm4gYXdhaXQgdGhpcy4jbmV3X2xvY2FsKCk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coXCJuZXcgY2xpZW50XCIpO1xuICAgICAgdGhpcy5jbGllbnQgPSBuZXcgQ2xpZW50KGdhbWVfaWQsIHRoaXMuZ2FtZSk7XG4gICAgICB0aGlzLmNsaWVudC5zdGF0dXMub25zdGF0dXMgPSAoKSA9PiB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgICAgIGNvbnNvbGUubG9nKFwid2FpdGluZyBmb3IgY29ubmVjdGlvblwiKTtcbiAgICAgIGF3YWl0IHRpbWVvdXQodGhpcy5jbGllbnQuc3RhdHVzLmNvbm5lY3RlZCgpLCA1MDAwKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiY29ubmVjdGVkXCIpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgY29uc29sZS5sb2coXCJnaXZpbmcgdXBcIik7XG4gICAgICBhd2FpdCB0aGlzLiNuZXdfbG9jYWwoKTtcbiAgICB9XG5cbiAgICAvLyB9LCAyMDAwKTtcbiAgfVxuXG4gICNuZXdfbG9jYWwgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJuZXcgbG9jYWwuLi5cIik7XG4gICAgYXdhaXQgdGhpcy5jbGllbnQ/LnNodXRkb3duKCk7XG4gICAgLy8gdGhpcy5jbGllbnQgJiYgKHRoaXMuY2xpZW50LnN0YXR1cy5vbnN0YXR1cyA9IHVuZGVmaW5lZCk7XG4gICAgdGhpcy5jbGllbnQgPSB1bmRlZmluZWQ7XG4gICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIFwiXCIsIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KFwiP1wiKVswXSk7XG4gIH07XG5cbiAgI2hvc3QgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuY2xpZW50Py5zaHV0ZG93bigpO1xuICAgICAgdGhpcy5jbGllbnQgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMuaG9zdF9wZW5kaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2VydmVyID0gbmV3IFNlcnZlcih0aGlzLmdhbWUpO1xuICAgICAgdGhpcy5zZXJ2ZXIuc2lnbmFsZXIuc3RhdHVzLm9uc3RhdHVzID0gKCkgPT4gdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gICAgICBjb25zb2xlLmxvZyhcIldBSVRJTkdcIik7XG4gICAgICBhd2FpdCB0aW1lb3V0KHRoaXMuc2VydmVyLnNpZ25hbGVyLnN0YXR1cy5jb25uZWN0ZWQoKSwgNTAwMCk7XG5cbiAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgXCJcIiwgXCI/Z2FtZT1cIiArIHRoaXMuc2VydmVyLnNpZ25hbGVyLnBlZXJfaWQpO1xuICAgICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQod2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICBhd2FpdCB0aGlzLiN1bmhvc3Q7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuaG9zdF9wZW5kaW5nID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gICN1bmhvc3QgPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHMgPSB0aGlzLnNlcnZlcjtcbiAgICB0aGlzLnNlcnZlciA9IHVuZGVmaW5lZDtcblxuICAgIHMgJiYgKHMuc2lnbmFsZXIuc3RhdHVzLm9uc3RhdHVzID0gdW5kZWZpbmVkKTtcbiAgICBhd2FpdCBzPy5zaHV0ZG93bigpO1xuXG4gICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBcIlwiLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xuICB9O1xufVxuIiwiaW1wb3J0e25vdGhpbmcgYXMgdH1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3QgbD1sPT5udWxsIT1sP2w6dDtleHBvcnR7bCBhcyBpZkRlZmluZWR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWYtZGVmaW5lZC5qcy5tYXBcbiIsImltcG9ydCB7IHN0b3BfZXYgfSBmcm9tIFwiLi4vdXRpbC9ldmVudHNcIjtcbmltcG9ydCB7IGFkZF9wLCBkaXZfYywgZGl2X3AsIG1heF9wLCBtdWxfYywgbXVsX3AsIFBvaW50LCBzdWJfcCB9IGZyb20gXCIuLi91dGlsL21hdGhcIjtcblxudHlwZSBTdGF0ZSA9IHtcbiAgb2Zmc2V0OiBbMCwgMF07XG4gIHo6IG51bWJlcjtcbn07XG5cbmNvbnN0IE1BWF9TQ0FMRSA9IDQ7XG5jb25zdCBNSU5fU0NBTEUgPSAxO1xuY29uc3QgQVVUT19aT09NX0ZJTEwgPSAwLjk1OyAvLyBQZXJjZW50YWdlIG9mIHRoZSB2aWV3cG9ydCB0byBmaWxsIG9uIGZpcnN0IGxvYWRcblxuY29uc3QgU1BFRUQgPSAwLjAwMjsgLy8gMTAwIHB4IHBlciBzZWNvbmRcblxuZXhwb3J0IGNsYXNzIFBQWiBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgcm9vdDogU2hhZG93Um9vdDtcbiAgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcblxuICBzdGF0ZSA9IHsgejogMSwgc2Nyb2xsX3BvczogWzAsIDBdIGFzIFtudW1iZXIsIG51bWJlcl0gfTtcbiAgZGVzaXJlZF9zdGF0ZSA9IHsgejogMSB9O1xuXG4gIC8vIFRPRE86IHJlcGxhY2Ugd2l0aCBhIGBkZXNpcmVkX3N0YXRlLnNjcm9sbF9wb3NgIHRoYXQgd2UgaW50ZXJwb2xhdGVcblxuICAvKiogVGhlIHBvaW50IGFyb3VuZCB3aGljaCBhbiBhbmltYXRlZCB6b29tIG9wZXJhdGVzICovXG4gIG9yaWdpbiA9IFswLCAwXSBhcyBbbnVtYmVyLCBudW1iZXJdO1xuXG4gIC8qKiBMb2NhdGlvbiBvZiB0aGUgdmlld3BvcnQgaW4gY2xpZW50IHNwYWNlICovXG4gIHZsb2M6IFBvaW50ID0gWzAsIDBdIGFzIFBvaW50O1xuXG4gIC8qKiBEaW1lbnNpb25zIG9mIHRoZSB2aWV3cG9ydCAqL1xuICB2ZGltOiBQb2ludCA9IFswLCAwXSBhcyBQb2ludDtcblxuICAvKiogRGltZW5zaW9ucyBvZiB0aGUgY2xpZW50ICovXG4gIGNkaW06IFBvaW50ID0gWzAsIDBdIGFzIFBvaW50O1xuXG4gIC8qKiBPZmZzZXQgb2YgdGhlIGNsaWVudCB3aXRoaW4gdGhlIGludGVyaW9yIHNjcm9sbGFibGUgc3BhY2UuIFVzZWQgdG8gY2VudGVyIGNvbnRlbnQgKi9cbiAgb2Zmc2V0OiBQb2ludCA9IFswLCAwXSBhcyBQb2ludDtcblxuICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgem9vbWluZyBzaG91bGQgYmUgYW5pbWF0ZWQgb3IgaW1tZWRpYXRlICovXG4gIHNtb290aDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5yb290ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiBcIm9wZW5cIiB9KTtcbiAgICB0aGlzLnJvb3QuYXBwZW5kQ2hpbGQoUFBaLnRlbXBsYXRlKCkuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy5yb290LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyXCIpIGFzIEhUTUxEaXZFbGVtZW50O1xuICAgIHRoaXMuI3Jlc2l6ZV9vYnNlcnZlci5vYnNlcnZlKHRoaXMpO1xuICAgIHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKFwic2xvdFwiKSEub25zbG90Y2hhbmdlID0gKHsgdGFyZ2V0IH0pID0+IHtcbiAgICAgIGxldCBzbG90ID0gdGFyZ2V0IGFzIEhUTUxTbG90RWxlbWVudDtcbiAgICAgIGxldCBzdmcgPSBzbG90LmFzc2lnbmVkRWxlbWVudHMoKVswXSBhcyBTVkdTVkdFbGVtZW50O1xuICAgICAgdGhpcy4jcmVzaXplX29ic2VydmVyLm9ic2VydmUoc3ZnKTtcblxuICAgICAgdGhpcy5zbW9vdGggPSBmYWxzZTtcbiAgICAgIGxldCBkaW0gPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgbGV0IHZkaW0gPSBbZGltLndpZHRoLCBkaW0uaGVpZ2h0XSBhcyBQb2ludDtcbiAgICAgIGxldCBjZGltID0gW3N2Zy53aWR0aC5iYXNlVmFsLnZhbHVlLCBzdmcuaGVpZ2h0LmJhc2VWYWwudmFsdWVdIGFzIFBvaW50O1xuICAgICAgY29uc3Qgem9vbSA9IE1hdGgubWF4KE1JTl9TQ0FMRSwgTWF0aC5taW4oTUFYX1NDQUxFLCAuLi5tdWxfYyhkaXZfcCh2ZGltLCBjZGltKSwgQVVUT19aT09NX0ZJTEwpKSk7XG4gICAgICB0aGlzLnpvb20oWzAsIDBdLCB6b29tIC0gdGhpcy5zdGF0ZS56KTtcbiAgICB9O1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCAoKSA9PiAodGhpcy5zdGF0ZS5zY3JvbGxfcG9zID0gW3RoaXMuc2Nyb2xsTGVmdCwgdGhpcy5zY3JvbGxUb3BdKSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiZ2VzdHVyZXN0YXJ0XCIsIHRoaXMuI2dlc3R1cmUuc3RhcnQpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImdlc3R1cmVjaGFuZ2VcIiwgdGhpcy4jZ2VzdHVyZS5jaGFuZ2UpO1xuICB9XG5cbiAgI3Jlc2l6ZV9vYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgIGZvciAobGV0IGUgb2YgZW50cmllcykge1xuICAgICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzKSB7XG4gICAgICAgIHRoaXMudmRpbSA9IFtlLmNvbnRlbnRSZWN0LndpZHRoLCBlLmNvbnRlbnRSZWN0LmhlaWdodF07XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB0aGlzLnZsb2MgPSBbcmVjdC54LCByZWN0LnldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9AdHMtaWdub3JlO1xuICAgICAgICB0aGlzLmNkaW0gPSBbZS50YXJnZXQud2lkdGguYmFzZVZhbC52YWx1ZSwgZS50YXJnZXQuaGVpZ2h0LmJhc2VWYWwudmFsdWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY2VudGVyKCk7XG4gIH0pO1xuXG4gIGxvb3AgPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHBydjtcbiAgICBsZXQgdHM7XG4gICAgd2hpbGUgKCgocHJ2ID0gdHMpIHx8IHRydWUpICYmICh0cyA9IGF3YWl0IG5leHRfZnJhbWUoKSkpIHtcbiAgICAgIGlmICghcHJ2KSBjb250aW51ZTtcbiAgICAgIGxldCBkZWx0YSA9IHRoaXMuZGVzaXJlZF9zdGF0ZS56IC0gdGhpcy5zdGF0ZS56O1xuICAgICAgaWYgKGRlbHRhID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbGV0IGVsYXBzZWQgPSB0cyAtIHBydjtcblxuICAgICAgLy8gSWYgaXQncyBzbW9vdGgsIHdlJ2xsIG1vdmUgaW4gaW5jcmVtZW50cywgb3RoZXJ3aXNlIHBlcmZvcm0gYWxsIGFkanVzdG1lbnRzIGluIG9uZSBmcmFtZVxuICAgICAgbGV0IGRlbHRhX3NjYWxlID0gdGhpcy5zbW9vdGggPyBNYXRoLnNpZ24oZGVsdGEpICogTWF0aC5taW4oZWxhcHNlZCAqIFNQRUVEICogdGhpcy5zdGF0ZS56LCBNYXRoLmFicyhkZWx0YSkpIDogZGVsdGE7XG5cbiAgICAgIC8vIFJlY29yZCB0aGUgbmV3IHpcbiAgICAgIHRoaXMuc3RhdGUueiArPSBkZWx0YV9zY2FsZTtcblxuICAgICAgdGhpcy5jZW50ZXIoKTtcblxuICAgICAgLy8gQmUgc3VyZSB0byBwcmV2ZW50IG5lZ2F0aXZlIHNjcm9sbCBwb3NpdGlvbnNcbiAgICAgIHRoaXMuc3RhdGUuc2Nyb2xsX3BvcyA9IG1heF9wKFswLCAwXSwgYWRkX3AobXVsX2ModGhpcy5vcmlnaW4sIGRlbHRhX3NjYWxlKSwgdGhpcy5zdGF0ZS5zY3JvbGxfcG9zKSk7XG4gICAgICB0aGlzLnNjcm9sbFRvKHsgbGVmdDogdGhpcy5zdGF0ZS5zY3JvbGxfcG9zWzBdLCB0b3A6IHRoaXMuc3RhdGUuc2Nyb2xsX3Bvc1sxXSB9KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENlbnRlcnMgdGhlIGNvbnRlbnQgb24gdGhlIHNjcmVlbiBpZiBpdCBpcyBzbWFsbGVyIHRoYW4gdGhlIHZpZXdwb3J0LlxuICAgKiBUaGlzIHVwZGF0ZXMgdGhlIGBvZmZzZXRgIG1lbWJlciBhY2NvcmRpbmdseVxuICAgKi9cbiAgY2VudGVyKCkge1xuICAgIHRoaXMub2Zmc2V0ID0gbWF4X3AoWzAsIDBdLCBtdWxfYyhzdWJfcCh0aGlzLnZkaW0sIG11bF9jKHRoaXMuY2RpbSwgdGhpcy5zdGF0ZS56KSksIDAuNSkpO1xuICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHt0aGlzLm9mZnNldFswXX1weCwgJHt0aGlzLm9mZnNldFsxXX1weCkgc2NhbGUoJHt0aGlzLnN0YXRlLnp9KWA7XG4gIH1cblxuICAvKipcbiAgICogUnVucyB3aGVuIHRoZSBjb21wb25lbnQgaXMgYXR0YWNoZWQgdG8gdGhlIERPTS5cbiAgICogU2V0cyB1cCBvdXIgYW5pbWF0aW9uIGxvb3AgYW5kIGV2ZW50IGxpc3RlbmVlc1xuICAgKi9cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5sb29wKCk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgdGhpcy53aGVlbCwgeyBwYXNzaXZlOiBmYWxzZSwgY2FwdHVyZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhbiBpbmNyZW1lbnRhbCB6b29tIG9uIGEgbG9jYXRpb24gKHNjcmVlbiBjb29yZGluYXRlKVxuICAgKi9cbiAgem9vbSA9IChvcmlnaW46IFtudW1iZXIsIG51bWJlcl0sIGluYzogbnVtYmVyKSA9PiB7XG4gICAgLy8gU3RlcCAxOiBCb3VuZCB0aGUgcHJvcG9zZWQgZGVsdGEgYnkgdGhlIG1pbiBhbmQgbWF4IHNjYWxlXG4gICAgdGhpcy5kZXNpcmVkX3N0YXRlLnogPSBNYXRoLm1pbihNQVhfU0NBTEUsIE1hdGgubWF4KE1JTl9TQ0FMRSwgdGhpcy5kZXNpcmVkX3N0YXRlLnogKyBpbmMpKTtcblxuICAgIC8vIFN0ZXAgMjogUmVjb3JkIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbi5cbiAgICAvLyAgICAgICAgICBUT0RPOiBEZXRlcm1pbmUgaWYgd2Ugc3RpbGwgbmVlZCB0aGlzIHdoZW4gd2UgcmVjb3JkIG9uIHNjcm9sbCBldmVudFxuICAgIHRoaXMuc3RhdGUuc2Nyb2xsX3BvcyA9IFt0aGlzLnNjcm9sbExlZnQsIHRoaXMuc2Nyb2xsVG9wXTtcblxuICAgIC8vIFN0ZXAgMzogUmVjb3JkIHRoZSBvcmlnaW4gdGhlIHpvb20gaW4gY29udGVudC1sb2NhbCBjb29yZGluYXRlcy5cbiAgICAvLyAgICAgICAgICBUaGUgZ29hbCBvZiB6b29taW5nIGlzIHRvIGtlZXAgdGhpcyBjb29yZGluYXRlIGluIHRoZSBzYW1lIGNsaWVudCBsb2NhdGlvblxuICAgIHRoaXMub3JpZ2luID0gdGhpcy5jb29yZFRvTG9jYWwob3JpZ2luKTtcblxuICAgIC8vIFN0ZXAgNDogRG8gdGhlIHpvb21pbmc/IFdlIGhhdmUgYW4gYW5pbWF0aW9uIGxvb3AgcnVubmluZyBmb3IgdGhhdFxuICB9O1xuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhbiBpbmNyZW1lbnRhbCB6b29tIG9uIGEgbG9jYXRpb24gKGxvY2FsIGNvb3JkaW5hdGUgaW4gY29udGVudClcbiAgICovXG4gIHdoZWVsID0gKGV2OiBXaGVlbEV2ZW50KSA9PiB7XG4gICAgaWYgKCFldi5jdHJsS2V5KSByZXR1cm47XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgIC8vIEZpcmVmb3ggc2Nyb2xscyBieSBsaW5lcywgY2hyb21lIHNjcm9sbHMgYnkgcGl4ZWxzLCB0aGVyZSdzIG5vIGZvcm1hbFxuICAgIC8vIGRlZmluaXRpb24gb2Ygd2hhdCBhIFwibGluZVwiIGlzLCBidXQgbGV0J3MganVzdCBzYXkgaXQncyAxMCBweFxuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBldi5kZWx0YU1vZGUgPT09IFdoZWVsRXZlbnQuRE9NX0RFTFRBX0xJTkUgPyAxMCA6IDE7XG5cbiAgICAvLyBEb24ndCBsZXQgYW55IHdlaXJkIGlucHV0cyBjYXVzZSBhIGp1bXAgb2YgbW9yZSB0aGFuIDUwcHggLyA1IGxpbmVzXG4gICAgY29uc3QgZGVsdGEgPSBNYXRoLm1pbig1MCwgTWF0aC5tYXgoLTUwLCAtZXYuZGVsdGFZICogbXVsdGlwbGllcikpO1xuXG4gICAgLy8gVHVybiB0aGUgc2Nyb2xsIGRlbHRhIGludG8gYSB6b29tIGRlbHRhLiBXZSB1c2UgYSBtYWdpYyBzY2FsYXIsXG4gICAgLy8gIGJ1dCBub3RlIHRoYXQgd2Ugem9vbSAqbW9yZSogdGhlIG1vcmUgem9vbWVkIGluIHdlIGFyZS5cbiAgICBjb25zdCB6b29tID0gZGVsdGEgKiAwLjAwNSAqIHRoaXMuc3RhdGUuejtcblxuICAgIC8vIE9ubHkgZG8gc21vb3RoaW5nIGlmIHRoZSBkZWx0YSBpcyBsYXJnZS5cbiAgICAvLyBUaGlzIHNob3VsZCBjb3JyZXNwb25kIHRvIHVzaW5nIGEgc2Nyb2xsIHdoZWVsIGFzIG9wcG9zZWQgdG8gYSB0b3VjaHBhZFxuICAgIHRoaXMuc21vb3RoID0gTWF0aC5hYnMoZGVsdGEpID09PSA1MDtcblxuICAgIHRoaXMuem9vbShbZXYuY2xpZW50WCwgZXYuY2xpZW50WV0sIHpvb20pO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcjtcbiAgfTtcblxuICAvLyBHZXN0dXJlLWJhc2VkIHNjcm9sbGluZ1xuICAvLyBTYWZhcmkgcmVjb3JkcyBwaW5jaGVzIGFzIGdlc3R1cmUgZXZlbnRzIHJhdGhlciB0aGFuIHdoZWVsIGV2ZW50c1xuICAvLyBzbyB3ZSBoYXZlIHRvIGxpc3RlbiBmb3IgdGhlc2UgYXMgd2VsbFxuICAjZ2VzdHVyZSA9IHtcbiAgICBwcmV2X3NjYWxlOiAwLFxuICAgIG9yaWdpbjogWzAsIDBdIGFzIFtudW1iZXIsIG51bWJlcl0sXG4gICAgc3RhcnQ6IChldjogYW55KSA9PiB7XG4gICAgICBzdG9wX2V2KGV2KTtcbiAgICAgIHRoaXMuI2dlc3R1cmUub3JpZ2luID0gdGhpcy5jb29yZFRvTG9jYWwoW2V2LmNsaWVudFgsIGV2LmNsaWVudFldKTtcbiAgICAgIHRoaXMuI2dlc3R1cmUucHJldl9zY2FsZSA9IDE7XG4gICAgfSxcblxuICAgIGNoYW5nZTogKGV2OiBhbnkpID0+IHtcbiAgICAgIHN0b3BfZXYoZXYpO1xuICAgICAgdGhpcy56b29tKFxuICAgICAgICB0aGlzLiNnZXN0dXJlLm9yaWdpbixcbiAgICAgICAgLy8gSSdsbCBiZSByZWFsIEknbSBub3QgZW50aXJlbHkgc3VyZSB3aHkgdGhpcyBpcyB0aGUgbWFnaWMgbnVtYmVyXG4gICAgICAgIHRoaXMuc3RhdGUueiAqIChldi5zY2FsZSAtIHRoaXMuI2dlc3R1cmUucHJldl9zY2FsZSkgKiAxLjVcbiAgICAgICk7XG4gICAgICB0aGlzLiNnZXN0dXJlLnByZXZfc2NhbGUgPSBldi5zY2FsZTtcbiAgICB9LFxuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBjbGllbnQgY29vcmRpbmF0ZXMgaW50byBjb250ZW50IGNvb3JkaW5hdGVzLCBhY2NvdW50aW5nIGZvclxuICAgKiB0aGUgdmlld3BvcnQncyBvZmZzZXQgYW5kIHNjYWxlXG4gICAqL1xuICBjb29yZFRvTG9jYWwoY2xpZW50X2Nvb3JkOiBbbnVtYmVyLCBudW1iZXJdKTogW251bWJlciwgbnVtYmVyXSB7XG4gICAgLy8gdjogVGhlIGNvb3JkaW5hdGUgb2YgdGhlIGV2ZW50IHdpdGhpbiB0byB0aGUgaW50ZXJpb3Igc2Nyb2xsYWJsZSBzcGFjZTpcbiAgICBjb25zdCB2ID0gYWRkX3Aoc3ViX3AoY2xpZW50X2Nvb3JkLCB0aGlzLnZsb2MpLCB0aGlzLnN0YXRlLnNjcm9sbF9wb3MpO1xuICAgIC8vIFdlIHdhbnQgdG8ganVzdCBkaXZpZGUgYnkgc2NhbGUsIGJ1dCBiZWZvcmUgd2UgY2FuIGRvIHRoYXQsIHdlIGhhdmUgdG8gc3VidHJhY3RcbiAgICAvLyBhbnkgb2Zmc2V0IG9uIHRoZSBjb250ZW50ICh0aGUgcmVzdWx0IG9mIG91ciBjZW50ZXJpbmcgb3BlcmF0aW9uKVxuICAgIGNvbnN0IHJlcyA9IGRpdl9jKHN1Yl9wKHYsIHRoaXMub2Zmc2V0KSwgdGhpcy5zdGF0ZS56KTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgc3RhdGljIHRlbXBsYXRlKCk6IEhUTUxUZW1wbGF0ZUVsZW1lbnQge1xuICAgIGxldCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICAgIHQuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPHN0eWxlPlxuICAgICAgICAgICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAjY29udGFpbmVyIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvc3R5bGU+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8c2xvdD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgIHJldHVybiB0O1xuICB9XG59XG5cbmNvbnN0IG5leHRfZnJhbWUgPSAoKTogUHJvbWlzZTxET01IaWdoUmVzVGltZVN0YW1wPiA9PiBuZXcgUHJvbWlzZSgocmVzKSA9PiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlcykpO1xuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJwLXAtelwiLCBQUFopO1xuIiwiLy8vIDxyZWZlcmVuY2UgbGliPVwiRE9NXCIgLz5cblxuaW1wb3J0IFwiLi91aS9zYWZhcmktZml4XCI7XG5pbXBvcnQgXCIuL3VpL2NhbnZhc1wiO1xuaW1wb3J0IFwiLi91aS9hcHBcIjtcbmltcG9ydCBcIi4vdWkvYXBwXCI7XG5pbXBvcnQgXCIuL3VpL3BwcFwiO1xuXG5hd2FpdCBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcihcIi4vc2VydmljZS13b3JrZXIuanNcIik7XG5cbmRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcbiAgXCJ3aGVlbFwiLFxuICAoZXYpID0+IHtcbiAgICBpZiAoZXYuY3RybEtleSkgZXYucHJldmVudERlZmF1bHQoKTtcbiAgfSxcbiAgeyBwYXNzaXZlOiBmYWxzZSB9XG4pO1xuIl0sIm5hbWVzIjpbImFwcEhlaWdodCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsIndpbmRvdyIsImlubmVySGVpZ2h0IiwiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJrZXkiLCJkZXNjIiwiZCIsImMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiaSIsImRlZmluZVByb3BlcnR5IiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwic3RhdGUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsImNhbGwiLCJ2YWx1ZSIsImdldCIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJzZXQiLCJhZGRFdmVudExpc3RlbmVyIiwidCIsIlNoYWRvd1Jvb3QiLCJTaGFkeUNTUyIsIm5hdGl2ZVNoYWRvdyIsIkRvY3VtZW50IiwicHJvdG90eXBlIiwiQ1NTU3R5bGVTaGVldCIsImUiLCJTeW1ib2wiLCJuIiwiV2Vha01hcCIsInMiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJfJGNzc1Jlc3VsdCQiLCJFcnJvciIsImNzc1RleHQiLCJzdHlsZVNoZWV0IiwibyIsInJlcGxhY2VTeW5jIiwidG9TdHJpbmciLCJyZWR1Y2UiLCJTIiwiY3NzUnVsZXMiLCJ0cnVzdGVkVHlwZXMiLCJlbXB0eVNjcmlwdCIsImgiLCJyZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQiLCJ0b0F0dHJpYnV0ZSIsIkJvb2xlYW4iLCJBcnJheSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmcm9tQXR0cmlidXRlIiwiTnVtYmVyIiwicGFyc2UiLCJsIiwiYXR0cmlidXRlIiwidHlwZSIsIlN0cmluZyIsImNvbnZlcnRlciIsInJlZmxlY3QiLCJoYXNDaGFuZ2VkIiwiYSIsIkhUTUxFbGVtZW50Iiwic3VwZXIiLCJfJEVpIiwiTWFwIiwiaXNVcGRhdGVQZW5kaW5nIiwiaGFzVXBkYXRlZCIsIl8kRWwiLCJ1Iiwic3RhdGljIiwicHVzaCIsIm9ic2VydmVkQXR0cmlidXRlcyIsImZpbmFsaXplIiwiZWxlbWVudFByb3BlcnRpZXMiLCJmb3JFYWNoIiwiXyRFcCIsIl8kRXYiLCJub0FjY2Vzc29yIiwiaGFzT3duUHJvcGVydHkiLCJnZXRQcm9wZXJ0eURlc2NyaXB0b3IiLCJyZXF1ZXN0VXBkYXRlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImZpbmFsaXplZCIsImdldFByb3RvdHlwZU9mIiwicHJvcGVydGllcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjcmVhdGVQcm9wZXJ0eSIsImVsZW1lbnRTdHlsZXMiLCJmaW5hbGl6ZVN0eWxlcyIsInN0eWxlcyIsImlzQXJyYXkiLCJTZXQiLCJmbGF0IiwicmV2ZXJzZSIsInVuc2hpZnQiLCJ0b0xvd2VyQ2FzZSIsIl8kRV8iLCJQcm9taXNlIiwiZW5hYmxlVXBkYXRpbmciLCJfJEFMIiwiXyRFZyIsImFkZENvbnRyb2xsZXIiLCJfJEVTIiwicmVuZGVyUm9vdCIsImlzQ29ubmVjdGVkIiwiaG9zdENvbm5lY3RlZCIsInJlbW92ZUNvbnRyb2xsZXIiLCJzcGxpY2UiLCJpbmRleE9mIiwiY3JlYXRlUmVuZGVyUm9vdCIsInNoYWRvd1Jvb3QiLCJhdHRhY2hTaGFkb3ciLCJzaGFkb3dSb290T3B0aW9ucyIsImFkb3B0ZWRTdHlsZVNoZWV0cyIsIm1hcCIsImNyZWF0ZUVsZW1lbnQiLCJsaXROb25jZSIsInNldEF0dHJpYnV0ZSIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJjb25uZWN0ZWRDYWxsYmFjayIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiaG9zdERpc2Nvbm5lY3RlZCIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIl8kQUsiLCJfJEVPIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0UHJvcGVydHlPcHRpb25zIiwiXyRFQyIsIl8kRWoiLCJhc3luYyIsInJlamVjdCIsInNjaGVkdWxlVXBkYXRlIiwicGVyZm9ybVVwZGF0ZSIsInNob3VsZFVwZGF0ZSIsIndpbGxVcGRhdGUiLCJob3N0VXBkYXRlIiwidXBkYXRlIiwiXyRFayIsIl8kQUUiLCJob3N0VXBkYXRlZCIsImZpcnN0VXBkYXRlZCIsInVwZGF0ZWQiLCJ1cGRhdGVDb21wbGV0ZSIsImdldFVwZGF0ZUNvbXBsZXRlIiwibW9kZSIsIlJlYWN0aXZlRWxlbWVudCIsImdsb2JhbFRoaXMiLCJyZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucyIsImNyZWF0ZVBvbGljeSIsImNyZWF0ZUhUTUwiLCJNYXRoIiwicmFuZG9tIiwic2xpY2UiLCJjcmVhdGVDb21tZW50IiwiaXRlcmF0b3IiLCJ2IiwiXyIsIm0iLCJnIiwicCIsIl8kbGl0VHlwZSQiLCJzdHJpbmdzIiwidmFsdWVzIiwiJCIsInkiLCJiIiwiZm9yIiwidyIsIlQiLCJBIiwiY3JlYXRlVHJlZVdhbGtlciIsIkMiLCJsYXN0SW5kZXgiLCJleGVjIiwidGVzdCIsIlJlZ0V4cCIsInN0YXJ0c1dpdGgiLCJFIiwicGFydHMiLCJlbCIsImN1cnJlbnROb2RlIiwiY29udGVudCIsImZpcnN0Q2hpbGQiLCJyZW1vdmUiLCJhcHBlbmQiLCJjaGlsZE5vZGVzIiwibmV4dE5vZGUiLCJub2RlVHlwZSIsImhhc0F0dHJpYnV0ZXMiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsImVuZHNXaXRoIiwiZ2V0QXR0cmlidXRlIiwic3BsaXQiLCJpbmRleCIsIm5hbWUiLCJjdG9yIiwiTSIsIkgiLCJJIiwidGFnTmFtZSIsImRhdGEiLCJpbm5lckhUTUwiLCJQIiwiXyRDbCIsIl8kQ3UiLCJfJGxpdERpcmVjdGl2ZSQiLCJfJEFPIiwiXyRBVCIsIl8kQVMiLCJWIiwiXyRBTiIsIl8kQUQiLCJfJEFNIiwicGFyZW50Tm9kZSIsIl8kQVUiLCJjcmVhdGlvblNjb3BlIiwiaW1wb3J0Tm9kZSIsIk4iLCJuZXh0U2libGluZyIsIkwiLCJfJEFJIiwiXyRBSCIsIl8kQUEiLCJfJEFCIiwib3B0aW9ucyIsIl8kQ2ciLCJzdGFydE5vZGUiLCJlbmROb2RlIiwiXyRBUiIsImsiLCJpbnNlcnRCZWZvcmUiLCJjcmVhdGVUZXh0Tm9kZSIsIl8kQUMiLCJfJEFQIiwic2V0Q29ubmVjdGVkIiwiZWxlbWVudCIsImZpbGwiLCJjYXB0dXJlIiwib25jZSIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFuZGxlRXZlbnQiLCJob3N0IiwiUiIsImoiLCJEIiwiRiIsIk8iLCJXIiwiQiIsIloiLCJ6IiwibGl0SHRtbFBvbHlmaWxsU3VwcG9ydCIsImxpdEh0bWxWZXJzaW9ucyIsInJlbmRlck9wdGlvbnMiLCJfJERvIiwicmVuZGVyQmVmb3JlIiwicmVuZGVyIiwiXyRsaXRQYXJ0JCIsIl8kbGl0RWxlbWVudCQiLCJsaXRFbGVtZW50SHlkcmF0ZVN1cHBvcnQiLCJMaXRFbGVtZW50IiwibGl0RWxlbWVudFBvbHlmaWxsU3VwcG9ydCIsImxpdEVsZW1lbnRWZXJzaW9ucyIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiZWxlbWVudHMiLCJmaW5pc2hlciIsImRlc2NyaXB0b3IiLCJwbGFjZW1lbnQiLCJvcmlnaW5hbEtleSIsImluaXRpYWxpemVyIiwicXVlcnlTZWxlY3RvciIsIkhUTUxTbG90RWxlbWVudCIsImFzc2lnbmVkRWxlbWVudHMiLCJfJEN0IiwiXyRDaSIsIl8kQVEiLCJkdCIsImtleXMiLCJ1dCIsIngiLCJhZGRfcCIsImFkZF9jIiwic3ViX3AiLCJtdWxfYyIsImRpdl9jIiwibWF4X3AiLCJtYXgiLCJtaW5fcCIsIm1pbiIsImNsYW1wX3AiLCJlcV9wIiwiaXNfcHJpbWFyeV9kb3duIiwiZXYiLCJpc1ByaW1hcnkiLCJwb2ludGVyVHlwZSIsInByZXNzdXJlIiwiaXNfbW91c2VfZG93biIsImJ1dHRvbnMiLCJzdG9wX2V2IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJ3aW5kb3dfZXYiLCJkZXRhaWwiLCJDdXN0b21FdmVudCIsImdldEltYWdlIiwiZGF0YUl0ZW1zIiwiZGF0YVRyYW5zZmVyIiwiaXRlbXMiLCJyZXNvbHZlIiwiY29uc29sZSIsImxvZyIsImdldEFzRmlsZSIsImdldEFzU3RyaW5nIiwiZXh0cmFjdFVSTEZyb21IVE1MIiwiaHRtbCIsInVybCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInNyYyIsImdhbWVfZXZlbnQiLCJPcmRlcmVkTWFwIiwib3JkZXIiLCJpZHgiLCJ1bmRlZmluZWQiLCJhZGQiLCJzZXRfaW5kZXgiLCJkZWxldGUiLCJ2YWwiLCJzaXplIiwiZmlyc3QiLCJpdGVyIiwibmV4dCIsIml0ZW0iLCJDYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsInRva2VucyIsInNlbGVjdGlvbiIsImNhbGxvdXRzIiwiX0NhbnZhc19zYm94IiwiX0NhbnZhc19tb3VzZV9sb2MiLCJfQ2FudmFzX2RyYWdfZGVwdGgiLCJfQ2FudmFzX2RyYWdfZW50ZXIiLCJfYSIsIl9DYW52YXNfZHJhZ19vdmVyIiwiY2VsbCIsIl9DYW52YXNfc2NyZWVuX3RvX3N2ZyIsIm9jY3VwaWVkX2NlbGwiLCJfZHJvcF9oaW50IiwiaG92ZXJpbmciLCJfQ2FudmFzX2RyYWdfbGVhdmUiLCJfQ2FudmFzX2JnX2RyYWdfb3ZlciIsIl9DYW52YXNfYmdfZHJvcCIsImltZyIsImRpc3BhdGNoRXZlbnQiLCJfQ2FudmFzX2Ryb3AiLCJsb2MiLCJkaW0iLCJfQ2FudmFzX2ZvY3VzIiwiaWQiLCJzaGlmdEtleSIsImN0cmxLZXkiLCJmaWx0ZXIiLCJfQ2FudmFzX2RyYWdfb2Zmc2V0IiwiX0NhbnZhc19zZWxlY3Rpb25fZHJhZ19zdGFydCIsInN2Z19jb29yZCIsInNldFBvaW50ZXJDYXB0dXJlIiwicG9pbnRlcklkIiwiX0NhbnZhc19zZWxlY3Rpb25fdHJhbnNmb3JtIiwibW92ZSIsInJlc2l6ZSIsIl9DYW52YXNfc2VsZWN0aW9uX2RyYWciLCJncmlkX2xvYyIsIl9DYW52YXNfaW5zdGFuY2VzIiwiX0NhbnZhc19kaW1fZ2V0IiwiY2xhc3NlcyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwibmVhcmVzdF9jb3JuZXIiLCJjZW50ZXIiLCJyZWwiLCJkZWciLCJhdGFuMiIsIlBJIiwicm91bmQiLCJmcm9tIiwiX0NhbnZhc19zZWxlY3Rpb25fZHJhZ19lbmQiLCJ2aWV3cG9ydCIsImNvb3JkVG9Mb2NhbCIsImNsaWVudFgiLCJjbGllbnRZIiwiX0NhbnZhc19rZXlkb3duIiwia2V5Q29kZSIsImlkcyIsIkFycm93VXAiLCJBcnJvd0Rvd24iLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0Iiwic2Jib3giLCJzZWxlY3RlZCIsIl9DYW52YXNfc2JveF9zdGFydCIsIl9DYW52YXNfc2JveF9tb3ZlIiwiX0NhbnZhc19zYm94X3N0b3AiLCJQQURESU5HIiwiYmciLCJzdmciLCJyZXBlYXQiLCJMSU5FX1dJRFRIIiwibWFya19sb2FkZWQiLCJiYm94Iiwic3RhcnQiLCJlbmQiLCJwaW4iLCJtb3VzZSIsImFicyIsInBvaW50IiwiQ0FMTE9VVF9ESU0iLCJzaWduIiwiUk9UQVRFX1NJWkUiLCJsb2NhbCIsImFic19wIiwiYm94Iiwic2VsIiwiaW50ZXJzZWN0IiwiX0NhbnZhc19zZWxlY3Rpb25fYmJveCIsImNzcyIsInByb3BlcnR5IiwicXVlcnkiLCJjdXN0b21FbGVtZW50IiwiQnV5TWVBQ29mZmVlIiwiX3N0YXRlIiwiX2xvYWRlZCIsIl9idXkiLCJfQnV5TWVBQ29mZmVlX2Nsb3NlIiwiX0J1eU1lQUNvZmZlZV9pZnJhbWVfbG9hZCIsImNvbnN1bWUiLCJ3cml0ZSIsInNpZ25hbCIsInBpcGVUbyIsIldyaXRhYmxlU3RyZWFtIiwic2VyaWFsaXplX3RidCIsIkdhbWUiLCJFdmVudFRhcmdldCIsInRhYmxldG9wIiwiZ3JpZF9kaW0iLCJfR2FtZV9ldmVudF93cml0ZXIiLCJldmVudHMiLCJUcmFuc2Zvcm1TdHJlYW0iLCJ3cml0YWJsZSIsImdldFdyaXRlciIsInJlYWRhYmxlIiwiYXBwbHkiLCJ0b2tlbiIsImNyeXB0byIsInJhbmRvbVVVSUQiLCJfR2FtZV9pbnN0YW5jZXMiLCJfR2FtZV9yZWdpc3Rlcl9yZXNvdXJjZSIsInNldF9kaW0iLCJXZWFrU2V0IiwiX0dhbWVfaGFuZGxlX2V2ZW50IiwiZXhfdG9rZW4iLCJlcnJvciIsImFzc2lnbiIsInJlbV90b2tlbiIsIm9tIiwiZGVzZXJpYWxpemVfdGJ0Iiwic2V0VGltZW91dCIsIlVSTCIsImxvY2F0aW9uIiwic2VhcmNoIiwicGF0aG5hbWUiLCJjYWNoZSIsImNhY2hlcyIsIm9wZW4iLCJwdXQiLCJSZXNwb25zZSIsIlN0YXR1c0VtaXR0ZXIiLCJfU3RhdHVzRW1pdHRlcl92YWx1ZSIsImN1cnJlbnQiLCJvbnN0YXR1cyIsImhhbmRsZXIiLCJzdHJlYW1zIiwiZGMiLCJyZWFkX3N0cmVhbSIsIndyaXRlX3N0cmVhbSIsIlJlYWRhYmxlU3RyZWFtIiwiY29udHJvbGxlciIsIm9ubWVzc2FnZSIsImVucXVldWUiLCJvbmNsb3NlIiwiY2xvc2UiLCJjYW5jZWwiLCJyZXN1bWUiLCJlcnIiLCJsYWJlbCIsIm9ub3BlbiIsIm9uYnVmZmVyZWRhbW91bnRsb3ciLCJjaHVuayIsInJlYWR5U3RhdGUiLCJidWZmZXJlZEFtb3VudCIsImJ1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkIiwic2VuZCIsImFib3J0IiwiQ291bnRRdWV1aW5nU3RyYXRlZ3kiLCJoaWdoV2F0ZXJNYXJrIiwiUGVlciIsInJ0YyIsIl9QZWVyX2V2ZW50X3dyaXRlciIsIm9uZGF0YWNoYW5uZWwiLCJldmVudHNfZGMiLCJjcmVhdGVEYXRhQ2hhbm5lbCIsIm5lZ290aWF0ZWQiLCJlbmNvZGUiLCJ0cmFuc2Zvcm0iLCJwaXBlVGhyb3VnaCIsImpzb24iLCJ3cml0ZV9ldmVudCIsInJlbW90ZSIsImRhdGFjaGFubmVsIiwiaW5pdCIsIlBFRVJfQ09ORklHIiwiaWNlU2VydmVycyIsInVybHMiLCJTaWduYWxlciIsInBlZXJfaWQiLCJhbGxvd19jb25uZWN0aW9ucyIsInNpZ25hbF91cmwiLCJzdGF0dXMiLCJfU2lnbmFsZXJfc29ja2V0IiwiX1NpZ25hbGVyX3NpZ25hbF91cmwiLCJfU2lnbmFsZXJfYWxsb3dfY29ubmVjdGlvbnMiLCJfU2lnbmFsZXJfY29ubnMiLCJfU2lnbmFsZXJfc2h1dHRpbmdfZG93biIsIl9TaWduYWxlcl9zb2NrZXRfc2h1dGRvd24iLCJfU2lnbmFsZXJfaGFuZGxlX21lc3NhZ2UiLCJfU2lnbmFsZXJfaW5zdGFuY2VzIiwiX1NpZ25hbGVyX3JlY29ubmVjdCIsInNpZyIsImRlc3RpbmF0aW9uIiwiX1NpZ25hbGVyX2luaXRfY29ubmVjdGlvbiIsInNldFJlbW90ZURlc2NyaXB0aW9uIiwiUlRDU2Vzc2lvbkRlc2NyaXB0aW9uIiwib2ZmZXIiLCJhbnN3ZXIiLCJjcmVhdGVBbnN3ZXIiLCJzZXRMb2NhbERlc2NyaXB0aW9uIiwidG8iLCJhZGRJY2VDYW5kaWRhdGUiLCJjYW5kaWRhdGUiLCJpbml0aWF0ZSIsInJlbW90ZV9pZCIsInBlZXIiLCJjcmVhdGVPZmZlciIsInRoZW4iLCJfU2lnbmFsZXJfc2VuZCIsImNhdGNoIiwic2h1dGRvd24iLCJjbGVhciIsIndzIiwibGl2ZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiRXZlbnQiLCJtc2ciLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJ3aXRoX2hlYXJ0YmVhdCIsIldlYlNvY2tldCIsImNvbm5lY3RlZCIsIlJUQ1BlZXJDb25uZWN0aW9uIiwib25pY2VjYW5kaWRhdGUiLCJfU2lnbmFsZXJfZXN0YWJsaXNoX3NvY2tldCIsInJlcXVlc3QiLCJjaGFubmVsIiwiaGVhZGVyIiwiYnVmZmVyIiwiYmxvYiIsIkJsb2IiLCJDbGllbnQiLCJnYW1lX2lkIiwiZ2FtZSIsIl9DbGllbnRfZ2FtZSIsIl9DbGllbnRfcGVlciIsIl9DbGllbnRfZ2FtZV9pZCIsIl9DbGllbnRfc2lnbmFsZXIiLCJmb3J3YXJkX2V2ZW50cyIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJwcm90b2NvbCIsInBvc3RNZXNzYWdlIiwiaWNlQ29ubmVjdGlvblN0YXRlIiwiZGNfc3RhdHVzIiwiU2VydmVyIiwiX1NlcnZlcl9nYW1lIiwiX1NlcnZlcl9jbGllbnRzIiwiX1NlcnZlcl9hYm9ydCIsInNpZ25hbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiX1NlcnZlcl9pbnN0YW5jZXMiLCJfU2VydmVyX2FkZF9jbGllbnQiLCJjbGllbnQiLCJyZXNvdXJjZSIsIndyaXRlciIsImFycmF5QnVmZmVyIiwicmVzcG9uc2UiLCJfU2VydmVyX2dldF9yZXNvdXJjZSIsInJlc3AiLCJmZXRjaCIsInJlcGxhY2UiLCJjdCIsImluY2x1ZGVzIiwicmVtb3ZlUHJvcGVydHkiLCJXaXRoVG9vbHRpcCIsInRleHQiLCJtb3VzZXgiLCJtb3VzZXkiLCJfV2l0aFRvb2x0aXBfbW91c2Vtb3ZlIiwicGFnZVgiLCJwYWdlWSIsInN0eWxlTWFwIiwibGVmdCIsInRvcCIsIlRvZ2dsZSIsIkhvc3RUb2dnbGUiLCJ0b2dnbGUiLCJjaGVja2VkIiwiaHVtYW4iLCJDbGllbnRTdGF0dXMiLCJ0aW1lb3V0IiwicHJvbSIsInRpbWUiLCJyYWNlIiwiX3IiLCJyZWoiLCJBcHAiLCJob3N0X3BlbmRpbmciLCJfQXBwX3VwZGF0ZURpbSIsInBhcnNlSW50IiwiX0FwcF9uZXdfbG9jYWwiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiaHJlZiIsIl9BcHBfaG9zdCIsInNlcnZlciIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsIl9BcHBfdW5ob3N0IiwicmVwbGFjZVN0YXRlIiwiY29ubmVjdGluZyIsImRpc2Nvbm5lY3RlZCIsIm92ZXJsYXkiLCJpZkRlZmluZWQiLCJhZGRfdG9rZW4iLCJzZXRfYmciLCJjaGFuZ2VkUHJvcGVydGllcyIsInRpdGxlIiwiY2FudmFzIiwiVVJMU2VhcmNoUGFyYW1zIiwiUFBaIiwic2Nyb2xsX3BvcyIsImRlc2lyZWRfc3RhdGUiLCJvcmlnaW4iLCJ2bG9jIiwidmRpbSIsImNkaW0iLCJvZmZzZXQiLCJzbW9vdGgiLCJfUFBaX3Jlc2l6ZV9vYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwiZW50cmllcyIsImNvbnRlbnRSZWN0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJhc2VWYWwiLCJsb29wIiwicHJ2IiwidHMiLCJuZXh0X2ZyYW1lIiwiZGVsdGEiLCJlbGFwc2VkIiwiZGVsdGFfc2NhbGUiLCJzY3JvbGxUbyIsInpvb20iLCJpbmMiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwid2hlZWwiLCJtdWx0aXBsaWVyIiwiZGVsdGFNb2RlIiwiV2hlZWxFdmVudCIsIkRPTV9ERUxUQV9MSU5FIiwiZGVsdGFZIiwiX1BQWl9nZXN0dXJlIiwicHJldl9zY2FsZSIsImNoYW5nZSIsInNjYWxlIiwicm9vdCIsInRlbXBsYXRlIiwiY2xvbmVOb2RlIiwiY29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJvYnNlcnZlIiwib25zbG90Y2hhbmdlIiwiZGl2X3AiLCJjbGllbnRfY29vcmQiLCJyZXMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZWdpc3RlciIsImJvZHkiXSwibWFwcGluZ3MiOiJBQUNBLE1BQU1BLEVBQVksS0FDSkMsU0FBU0MsZ0JBQ2pCQyxNQUFNQyxZQUFZLGVBQWdCLEdBQUdDLE9BQU9DLGtCQ21EM0MsU0FBU0MsRUFBV0MsRUFBWUMsRUFBUUMsRUFBS0MsR0FDaEQsSUFBMkhDLEVBQXZIQyxFQUFJQyxVQUFVQyxPQUFRQyxFQUFJSCxFQUFJLEVBQUlKLEVBQWtCLE9BQVRFLEVBQWdCQSxFQUFPTSxPQUFPQyx5QkFBeUJULEVBQVFDLEdBQU9DLEVBQ3JILEdBQXVCLGlCQUFaUSxTQUFvRCxtQkFBckJBLFFBQVFDLFNBQXlCSixFQUFJRyxRQUFRQyxTQUFTWixFQUFZQyxFQUFRQyxFQUFLQyxRQUNwSCxJQUFLLElBQUlVLEVBQUliLEVBQVdPLE9BQVMsRUFBR00sR0FBSyxFQUFHQSxLQUFTVCxFQUFJSixFQUFXYSxNQUFJTCxHQUFLSCxFQUFJLEVBQUlELEVBQUVJLEdBQUtILEVBQUksRUFBSUQsRUFBRUgsRUFBUUMsRUFBS00sR0FBS0osRUFBRUgsRUFBUUMsS0FBU00sR0FDaEosT0FBT0gsRUFBSSxHQUFLRyxHQUFLQyxPQUFPSyxlQUFlYixFQUFRQyxFQUFLTSxHQUFJQSxFQTZLekQsU0FBU08sRUFBdUJDLEVBQVVDLEVBQU9DLEVBQU1DLEdBQzFELEdBQWEsTUFBVEQsSUFBaUJDLEVBQUcsTUFBTSxJQUFJQyxVQUFVLGlEQUM1QyxHQUFxQixtQkFBVkgsRUFBdUJELElBQWFDLElBQVVFLEdBQUtG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
