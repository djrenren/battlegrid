const t=()=>{document.documentElement.style.setProperty("--app-height",`${window.innerHeight}px`)};function e(t,e,i,s){var n,o=arguments.length,r=o<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,s);else for(var h=t.length-1;h>=0;h--)(n=t[h])&&(r=(o<3?n(r):o>3?n(e,i,r):n(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}function i(t,e,i,s){if("a"===i&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?s:"a"===i?s.call(t):s?s.value:e.get(t)}function s(t,e,i,s,n){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?n.call(t,i):n?n.value=i:e.set(t,i),i
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}window.addEventListener("resize",t),t();const n=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,o=Symbol(),r=new WeakMap;class h{constructor(t,e,i){if(this._$cssResult$=!0,i!==o)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(n&&void 0===t){const i=void 0!==e&&1===e.length;i&&(t=r.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),i&&r.set(e,t))}return t}toString(){return this.cssText}}const a=(t,...e)=>{const i=1===t.length?t[0]:e.reduce(((e,i,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[s+1]),t[0]);return new h(i,t,o)},l=n?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new h("string"==typeof t?t:t+"",void 0,o))(e)})(t):t
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;var c;const d=window.trustedTypes,u=d?d.emptyScript:"",p=window.reactiveElementPolyfillSupport,f={toAttribute(t,e){switch(e){case Boolean:t=t?u:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},v=(t,e)=>e!==t&&(e==e||t==t),w={attribute:!0,type:String,converter:f,reflect:!1,hasChanged:v};class g extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;null!==(e=this.h)&&void 0!==e||(this.h=[]),this.h.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const s=this._$Ep(i,e);void 0!==s&&(this._$Ev.set(s,i),t.push(s))})),t}static createProperty(t,e=w){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(s){const n=this[t];this[e]=s,this.requestUpdate(t,n,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||w}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(l(t))}else void 0!==t&&e.push(l(t));return e}static _$Ep(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{n?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const i=document.createElement("style"),s=window.litNonce;void 0!==s&&i.setAttribute("nonce",s),i.textContent=e.cssText,t.appendChild(i)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=w){var s,n;const o=this.constructor._$Ep(t,i);if(void 0!==o&&!0===i.reflect){const r=(null!==(n=null===(s=i.converter)||void 0===s?void 0:s.toAttribute)&&void 0!==n?n:f.toAttribute)(e,i.type);this._$El=t,null==r?this.removeAttribute(o):this.setAttribute(o,r),this._$El=null}}_$AK(t,e){var i,s;const n=this.constructor,o=n._$Ev.get(t);if(void 0!==o&&this._$El!==o){const t=n.getPropertyOptions(o),r=t.converter,h=null!==(s=null!==(i=null==r?void 0:r.fromAttribute)&&void 0!==i?i:"function"==typeof r?r:null)&&void 0!==s?s:f.fromAttribute;this._$El=o,this[o]=h(e,t.type),this._$El=null}}requestUpdate(t,e,i){let s=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||v)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):s=!1),!this.isUpdatePending&&s&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var m;g.finalized=!0,g.elementProperties=new Map,g.elementStyles=[],g.shadowRootOptions={mode:"open"},null==p||p({ReactiveElement:g}),(null!==(c=globalThis.reactiveElementVersions)&&void 0!==c?c:globalThis.reactiveElementVersions=[]).push("1.3.3");const b=globalThis.trustedTypes,y=b?b.createPolicy("lit-html",{createHTML:t=>t}):void 0,$=`lit$${(Math.random()+"").slice(9)}$`,k="?"+$,x=`<${k}>`,M=document,S=(t="")=>M.createComment(t),C=t=>null===t||"object"!=typeof t&&"function"!=typeof t,_=Array.isArray,W=t=>{var e;return _(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])},E=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,T=/-->/g,A=/>/g,O=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,z=/'/g,N=/"/g,R=/^(?:script|style|textarea|title)$/i,I=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),U=I(1),j=I(2),P=Symbol.for("lit-noChange"),L=Symbol.for("lit-nothing"),D=new WeakMap,H=M.createTreeWalker(M,129,null,!1),J=(t,e)=>{const i=t.length-1,s=[];let n,o=2===e?"<svg>":"",r=E;for(let e=0;e<i;e++){const i=t[e];let h,a,l=-1,c=0;for(;c<i.length&&(r.lastIndex=c,a=r.exec(i),null!==a);)c=r.lastIndex,r===E?"!--"===a[1]?r=T:void 0!==a[1]?r=A:void 0!==a[2]?(R.test(a[2])&&(n=RegExp("</"+a[2],"g")),r=O):void 0!==a[3]&&(r=O):r===O?">"===a[0]?(r=null!=n?n:E,l=-1):void 0===a[1]?l=-2:(l=r.lastIndex-a[2].length,h=a[1],r=void 0===a[3]?O:'"'===a[3]?N:z):r===N||r===z?r=O:r===T||r===A?r=E:(r=O,n=void 0);const d=r===O&&t[e+1].startsWith("/>")?" ":"";o+=r===E?i+x:l>=0?(s.push(h),i.slice(0,l)+"$lit$"+i.slice(l)+$+d):i+$+(-2===l?(s.push(void 0),e):d)}const h=o+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==y?y.createHTML(h):h,s]};class B{constructor({strings:t,_$litType$:e},i){let s;this.parts=[];let n=0,o=0;const r=t.length-1,h=this.parts,[a,l]=J(t,e);if(this.el=B.createElement(a,i),H.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(s=H.nextNode())&&h.length<r;){if(1===s.nodeType){if(s.hasAttributes()){const t=[];for(const e of s.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith($)){const i=l[o++];if(t.push(e),void 0!==i){const t=s.getAttribute(i.toLowerCase()+"$lit$").split($),e=/([.?@])?(.*)/.exec(i);h.push({type:1,index:n,name:e[2],strings:t,ctor:"."===e[1]?q:"?"===e[1]?X:"@"===e[1]?Y:Z})}else h.push({type:6,index:n})}for(const e of t)s.removeAttribute(e)}if(R.test(s.tagName)){const t=s.textContent.split($),e=t.length-1;if(e>0){s.textContent=b?b.emptyScript:"";for(let i=0;i<e;i++)s.append(t[i],S()),H.nextNode(),h.push({type:2,index:++n});s.append(t[e],S())}}}else if(8===s.nodeType)if(s.data===k)h.push({type:2,index:n});else{let t=-1;for(;-1!==(t=s.data.indexOf($,t+1));)h.push({type:7,index:n}),t+=$.length-1}n++}}static createElement(t,e){const i=M.createElement("template");return i.innerHTML=t,i}}function G(t,e,i=t,s){var n,o,r,h;if(e===P)return e;let a=void 0!==s?null===(n=i._$Cl)||void 0===n?void 0:n[s]:i._$Cu;const l=C(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==l&&(null===(o=null==a?void 0:a._$AO)||void 0===o||o.call(a,!1),void 0===l?a=void 0:(a=new l(t),a._$AT(t,i,s)),void 0!==s?(null!==(r=(h=i)._$Cl)&&void 0!==r?r:h._$Cl=[])[s]=a:i._$Cu=a),void 0!==a&&(e=G(t,a._$AS(t,e.values),a,s)),e}class K{constructor(t,e){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var e;const{el:{content:i},parts:s}=this._$AD,n=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:M).importNode(i,!0);H.currentNode=n;let o=H.nextNode(),r=0,h=0,a=s[0];for(;void 0!==a;){if(r===a.index){let e;2===a.type?e=new V(o,o.nextSibling,this,t):1===a.type?e=new a.ctor(o,a.name,a.strings,this,t):6===a.type&&(e=new Q(o,this,t)),this.v.push(e),a=s[++h]}r!==(null==a?void 0:a.index)&&(o=H.nextNode(),r++)}return n}m(t){let e=0;for(const i of this.v)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class V{constructor(t,e,i,s){var n;this.type=2,this._$AH=L,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=s,this._$Cg=null===(n=null==s?void 0:s.isConnected)||void 0===n||n}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=G(this,t,e),C(t)?t===L||null==t||""===t?(this._$AH!==L&&this._$AR(),this._$AH=L):t!==this._$AH&&t!==P&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.k(t):W(t)?this.S(t):this.$(t)}M(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}k(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t))}$(t){this._$AH!==L&&C(this._$AH)?this._$AA.nextSibling.data=t:this.k(M.createTextNode(t)),this._$AH=t}T(t){var e;const{values:i,_$litType$:s}=t,n="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=B.createElement(s.h,this.options)),s);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===n)this._$AH.m(i);else{const t=new K(n,this),e=t.p(this.options);t.m(i),this.k(e),this._$AH=t}}_$AC(t){let e=D.get(t.strings);return void 0===e&&D.set(t.strings,e=new B(t)),e}S(t){_(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,s=0;for(const n of t)s===e.length?e.push(i=new V(this.M(S()),this.M(S()),this,this.options)):i=e[s],i._$AI(n),s++;s<e.length&&(this._$AR(i&&i._$AB.nextSibling,s),e.length=s)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cg=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class Z{constructor(t,e,i,s,n){this.type=1,this._$AH=L,this._$AN=void 0,this.element=t,this.name=e,this._$AM=s,this.options=n,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=L}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,s){const n=this.strings;let o=!1;if(void 0===n)t=G(this,t,e,0),o=!C(t)||t!==this._$AH&&t!==P,o&&(this._$AH=t);else{const s=t;let r,h;for(t=n[0],r=0;r<n.length-1;r++)h=G(this,s[i+r],e,r),h===P&&(h=this._$AH[r]),o||(o=!C(h)||h!==this._$AH[r]),h===L?t=L:t!==L&&(t+=(null!=h?h:"")+n[r+1]),this._$AH[r]=h}o&&!s&&this.C(t)}C(t){t===L?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class q extends Z{constructor(){super(...arguments),this.type=3}C(t){this.element[this.name]=t===L?void 0:t}}const F=b?b.emptyScript:"";class X extends Z{constructor(){super(...arguments),this.type=4}C(t){t&&t!==L?this.element.setAttribute(this.name,F):this.element.removeAttribute(this.name)}}class Y extends Z{constructor(t,e,i,s,n){super(t,e,i,s,n),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=G(this,t,e,0))&&void 0!==i?i:L)===P)return;const s=this._$AH,n=t===L&&s!==L||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,o=t!==L&&(s===L||n);n&&this.element.removeEventListener(this.name,this,s),o&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class Q{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){G(this,t)}}const tt={L:"$lit$",P:$,V:k,I:1,N:J,R:K,j:W,D:G,H:V,F:Z,O:X,W:Y,B:q,Z:Q},et=window.litHtmlPolyfillSupport;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var it,st;null==et||et(B,V),(null!==(m=globalThis.litHtmlVersions)&&void 0!==m?m:globalThis.litHtmlVersions=[]).push("2.2.6");class nt extends g{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,i)=>{var s,n;const o=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:e;let r=o._$litPart$;if(void 0===r){const t=null!==(n=null==i?void 0:i.renderBefore)&&void 0!==n?n:null;o._$litPart$=r=new V(e.insertBefore(S(),t),t,void 0,null!=i?i:{})}return r._$AI(t),r})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return P}}nt.finalized=!0,nt._$litElement$=!0,null===(it=globalThis.litElementHydrateSupport)||void 0===it||it.call(globalThis,{LitElement:nt});const ot=globalThis.litElementPolyfillSupport;null==ot||ot({LitElement:nt}),(null!==(st=globalThis.litElementVersions)&&void 0!==st?st:globalThis.litElementVersions=[]).push("3.2.1");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const rt=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(e){window.customElements.define(t,e)}}})(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */,ht=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(i){i.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function at(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):ht(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}function lt(t){return at({...t,state:!0})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const ct=({finisher:t,descriptor:e})=>(i,s)=>{var n;if(void 0===s){const s=null!==(n=i.originalKey)&&void 0!==n?n:i.key,o=null!=e?{kind:"method",placement:"prototype",key:s,descriptor:e(i.key)}:{...i,key:s};return null!=t&&(o.finisher=function(e){t(e,s)}),o}{const n=i.constructor;void 0!==e&&Object.defineProperty(i,s,e(s)),null==t||t(n,s)}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;function dt(t){return ct({finisher:(e,i)=>{Object.assign(e.prototype[i],t)}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function ut(t,e){return ct({descriptor:i=>{const s={get(){var e,i;return null!==(i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(t))&&void 0!==i?i:null},enumerable:!0,configurable:!0};if(e){const e="symbol"==typeof i?Symbol():"__"+i;s.get=function(){var i,s;return void 0===this[e]&&(this[e]=null!==(s=null===(i=this.renderRoot)||void 0===i?void 0:i.querySelector(t))&&void 0!==s?s:null),this[e]}}return s}})}
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var pt;null===(pt=window.HTMLSlotElement)||void 0===pt||pt.prototype.assignedElements;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const ft=1,vt=2,wt=t=>(...e)=>({_$litDirective$:t,values:e});class gt{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const{H:mt}=tt,bt=()=>document.createComment(""),yt=(t,e,i)=>{var s;const n=t._$AA.parentNode,o=void 0===e?t._$AB:e._$AA;if(void 0===i){const e=n.insertBefore(bt(),o),s=n.insertBefore(bt(),o);i=new mt(e,s,t,t.options)}else{const e=i._$AB.nextSibling,r=i._$AM,h=r!==t;if(h){let e;null===(s=i._$AQ)||void 0===s||s.call(i,t),i._$AM=t,void 0!==i._$AP&&(e=t._$AU)!==r._$AU&&i._$AP(e)}if(e!==o||h){let t=i._$AA;for(;t!==e;){const e=t.nextSibling;n.insertBefore(t,o),t=e}}}return i},$t=(t,e,i=t)=>(t._$AI(e,i),t),kt={},xt=t=>{var e;null===(e=t._$AP)||void 0===e||e.call(t,!1,!0);let i=t._$AA;const s=t._$AB.nextSibling;for(;i!==s;){const t=i.nextSibling;i.remove(),i=t}},Mt=(t,e,i)=>{const s=new Map;for(let n=e;n<=i;n++)s.set(t[n],n);return s},St=wt(class extends gt{constructor(t){if(super(t),t.type!==vt)throw Error("repeat() can only be used in text expressions")}dt(t,e,i){let s;void 0===i?i=e:void 0!==e&&(s=e);const n=[],o=[];let r=0;for(const e of t)n[r]=s?s(e,r):r,o[r]=i(e,r),r++;return{values:o,keys:n}}render(t,e,i){return this.dt(t,e,i).values}update(t,[e,i,s]){var n;const o=(t=>t._$AH)(t),{values:r,keys:h}=this.dt(e,i,s);if(!Array.isArray(o))return this.ut=h,r;const a=null!==(n=this.ut)&&void 0!==n?n:this.ut=[],l=[];let c,d,u=0,p=o.length-1,f=0,v=r.length-1;for(;u<=p&&f<=v;)if(null===o[u])u++;else if(null===o[p])p--;else if(a[u]===h[f])l[f]=$t(o[u],r[f]),u++,f++;else if(a[p]===h[v])l[v]=$t(o[p],r[v]),p--,v--;else if(a[u]===h[v])l[v]=$t(o[u],r[v]),yt(t,l[v+1],o[u]),u++,v--;else if(a[p]===h[f])l[f]=$t(o[p],r[f]),yt(t,o[u],o[p]),p--,f++;else if(void 0===c&&(c=Mt(h,f,v),d=Mt(a,u,p)),c.has(a[u]))if(c.has(a[p])){const e=d.get(h[f]),i=void 0!==e?o[e]:null;if(null===i){const e=yt(t,o[u]);$t(e,r[f]),l[f]=e}else l[f]=$t(i,r[f]),yt(t,o[u],i),o[e]=null;f++}else xt(o[p]),p--;else xt(o[u]),u++;for(;f<=v;){const e=yt(t,l[v+1]);$t(e,r[f]),l[f++]=e}for(;u<=p;){const t=o[u++];null!==t&&xt(t)}return this.ut=h,((t,e=kt)=>{t._$AH=e})(t,l),P}}),Ct=(t,e)=>[t[0]+e[0],t[1]+e[1]],_t=(t,e)=>Ct(t,[e,e]),Wt=(t,e)=>[t[0]-e[0],t[1]-e[1]],Et=(t,e)=>[t[0]*e,t[1]*e],Tt=(t,e)=>[t[0]/e,t[1]/e],At=(t,e)=>[Math.max(t[0],e[0]),Math.max(t[1],e[1])],Ot=(t,e)=>[Math.min(t[0],e[0]),Math.min(t[1],e[1])],zt=(t,e,i)=>At(t,Ot(e,i)),Nt=(t,e)=>t[0]===e[0]&&t[1]===e[1],Rt=t=>t.isPrimary&&("touch"===t.pointerType||t.pressure>0),It=t=>"mouse"===t.pointerType&&1===t.buttons&&t.pressure>0,Ut=t=>{t.preventDefault(),t.stopPropagation()},jt=(t,e)=>new CustomEvent(t,{detail:e});
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const Pt=async t=>{let e=t.dataTransfer?.items??[];return new Promise((async(t,i)=>{console.log("DataItems",e.length);for(let i=0;i<e.length;i++){if(console.log(e[i].type),e[i].type.startsWith("image/"))return t(e[i].getAsFile());if("text/html"===e[i].type)return void e[i].getAsString((e=>t(Lt(e))));if("application/x-moz-file-promise-url"===e[i].type)return void e[i].getAsString((t=>{}));if("string"===e[i].kind){let t=e[i].type;e[i].getAsString((e=>console.log(t,e)))}}return i("No compatible drop type found")}))};function Lt(t){const e=(new DOMParser).parseFromString(t,"text/html").querySelector("img")?.src;return e??null}const Dt=t=>new CustomEvent("game-event",{detail:t});class Ht{constructor(){this.order=[],this.map=new Map}get(t){const e=this.map.get(t);if(void 0!==e)return this.order[e]}has(t){return this.map.has(t)}add(t,e){this.map.has(t)?this.set_index(t,this.order.length-1):(this.map.set(t,this.order.length),this.order.push(e))}delete(t){const e=this.map.get(t);return void 0!==e&&(this.order.splice(e,1),this.map.delete(t),this.map.forEach(((t,i)=>{t>=e&&this.map.set(i,t-1)})),!0)}index(t){return this.map.get(t)}set_index(t,e){const i=this.map.get(t);if(void 0===i||e>=this.order.length)return!1;const s=this.order.splice(i,1)[0];return this.order.splice(e>i?e-1:e,0,s),this.map.forEach(((t,s)=>{t>=e&&t<i&&this.map.set(s,t+1),t<=e&&t>i&&this.map.set(s,t-1)})),this.map.set(t,e),!0}values(){return this.order}get size(){return this.map.size}}const Jt=t=>t[Symbol.iterator]().next().value;function*Bt(t,e){for(let i of t)yield e(i)}
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const Gt=wt(class extends gt{constructor(t){var e;if(super(t),t.type!==ft||"style"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce(((e,i)=>{const s=t[i];return null==s?e:e+`${i=i.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${s};`}),"")}update(t,[e]){const{style:i}=t.element;if(void 0===this.ct){this.ct=new Set;for(const t in e)this.ct.add(t);return this.render(e)}this.ct.forEach((t=>{null==e[t]&&(this.ct.delete(t),t.includes("-")?i.removeProperty(t):i[t]="")}));for(const t in e){const s=e[t];null!=s&&(this.ct.add(t),t.includes("-")?i.setProperty(t,s):i[t]=s)}return P}});var Kt,Vt,Zt,qt,Ft,Xt,Yt,Qt,te,ee,ie,se,ne,oe,re,he,ae,le,ce,de,ue,pe;let fe=class extends nt{constructor(){super(),Kt.add(this),this.width=30,this.height=40,this.tokens=new Ht,this.selection=new Set,this.callouts=new Set,Vt.set(this,void 0),Zt.set(this,void 0),Ft.set(this,0),Xt.set(this,(t=>{var e;Ut(t),s(this,Ft,(e=i(this,Ft,"f"),++e),"f")})),Yt.set(this,(t=>{Ut(t);const e=i(this,ue,"f").call(this,t).map(we),s=Et(_t([this.width,this.height],-1),24);this._drop_hint=zt([0,0],s,e),this.hovering="canvas"})),Qt.set(this,(t=>{var e;s(this,Ft,(e=i(this,Ft,"f"),--e),"f")<=0&&(this._drop_hint=void 0,this.hovering=void 0)})),te.set(this,(t=>{Ut(t),this._drop_hint=void 0,this.hovering="bg"})),ee.set(this,(async t=>{Ut(t);try{const e=await Pt(t);this.dispatchEvent(jt("bg-drop",e))}catch(t){}s(this,Ft,0,"f"),this.hovering=void 0})),ie.set(this,(async t=>{Ut(t);try{const e=await Pt(t);this.dispatchEvent(jt("token-drop",{loc:this._drop_hint,dim:[24,24],img:e}))}catch(t){}this._drop_hint=void 0,this.hovering=void 0})),se.set(this,(t=>{It(t)&&i(this,oe,"f").call(this,t)})),ne.set(this,(t=>{(t=>t.isPrimary&&"touch"===t.pointerType)(t)&&i(this,oe,"f").call(this,t)})),oe.set(this,(t=>{t.preventDefault(),t.stopPropagation();const e=t.target.id;t.shiftKey||t.ctrlKey?this.dispatchEvent(jt("token-select",[e,...this.selection].filter((t=>t!==e||!this.selection.has(e))))):this.dispatchEvent(jt("token-select",[t.target.id]))})),ce.set(this,void 0),de.set(this,{move:[0,0],resize:[0,0],r:0}),ue.set(this,(t=>Wt(this.viewport.coordToLocal([t.clientX,t.clientY]),[20,20]))),pe.set(this,(t=>{if(!this.selection)return;if(8===t.keyCode)return this.dispatchEvent(Dt({type:"token-removed",ids:Array.from(this.selection)})),void Ut(t);"z"===t.key&&i(this,Zt,"f")&&this.dispatchEvent(Dt({type:"callout",loc:i(this,ue,"f").call(this,i(this,Zt,"f"))})),this.tokens.get(this.selection.values().next().value);let e={ArrowUp:[0,-24],ArrowDown:[0,24],ArrowLeft:[-24,0],ArrowRight:[24,0]}[t.key];e&&(this.dispatchEvent(Dt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{const s=this.tokens.get(t),n=zt([0,0],Wt(i(this,Kt,"a",qt),s.dim),Ct(s.loc,e));return{id:s.id,loc:n,dim:s.dim,r:s.r}}))})),Ut(t))}))}connectedCallback(){super.connectedCallback(),document.addEventListener("keydown",i(this,pe,"f"))}disconnectedCallback(){super.disconnectedCallback(),document.removeEventListener("keydown",i(this,pe,"f"))}render(){let[t,e]=i(this,Kt,"a",qt),n=i(this,Kt,"m",le).call(this),o=1===this.selection.size?this.tokens.get(this.selection.values().next().value):void 0;return U`
      <p-p-z
        @pointerdown=${i(this,Kt,"m",re)}
        @pointermove=${i(this,Kt,"m",he)}
        @pointerup=${i(this,Kt,"m",ae)}
        @pointerleave=${()=>s(this,Zt,void 0,"f")}
        @dragstart=${Ut}
        @dragenter=${i(this,Xt,"f")}
        @dragleave=${i(this,Qt,"f")}
        @dragstop=${i(this,Qt,"f")}
        @dragover=${i(this,Yt,"f")}
        @drop=${i(this,ie,"f")}
      >
        <svg id="root" width=${t+40} height=${e+40} style=${Gt({width:`${t+40}px`,height:`${e+40}px`})}>
          <defs>
            <clipPath id="canvasClip">
              <rect width=${t} height=${e} rx=${5}></rect>
            </clipPath>
            <pattern id="horiz" x=${-.25} y=${-.25} width="100%" height=${24} patternUnits="userSpaceOnUse">
              <rect class="gridline" width="100%" height=${.5} fill="#d3d3d3" shape-rendering="geometricPrecision"></rect>
            </pattern>
            <pattern id="vert" x=${-.25} y=${-.25} width=${24} height="100%" patternUnits="userSpaceOnUse">
              <rect class="gridline" width=${.5} height="100%" fill="#d3d3d3" shape-rendering="geometric precision"></rect>
            </pattern>
            <pattern id="loading" patternUnits="userSpaceOnUse" width="1" height="1">
              <rect width="1" height="1" fill="white"></rect>
              <image href="assets/loading.svg" width="1" height="1" />
            </pattern>
          </defs>
          <svg x=${20} y=${20} width=${t} height=${e} id="surface">
            <rect class="shadow" width="100%" height="100%" fill="white" rx=${5}></rect>
            <svg clip-path="url(#canvasClip)">
              ${this.bg?j`<image href=${this.bg} width="100%" height="100%" preserveAspectRatio="none" style="will-change: transform"></image>`:null}
              <rect width="100%" height="100%" fill="url(#horiz)" opacity="0.75" pointer-events="none"></rect>
              <rect width="100%" height="100%" fill="url(#vert)" opacity="0.75" pointer-events="none"></rect>
              <svg id="tokens">
                ${St(this.tokens.values(),(t=>t.id),((t,e)=>{const[s,o]=_t(t.dim,-.5),[r,h]=_t(t.loc,.25);return U`
                      <svg
                        viewBox="0 0 1 1"
                        x=${r}
                        y=${h}
                        width=${s}
                        height=${o}
                        fill="transparent"
                        preserveAspectRatio="none"
                        @pointerdown=${i(this,se,"f")}
                        @pointerup=${i(this,ne,"f")}
                      >
                        <image
                          id=${t.id}
                          class="token"
                          width="1"
                          height="1"
                          href=${t.url}
                          style=${`transform: rotate(${t.r}deg)`}
                          image-rendering="optimizeSpeed"
                          preserveAspectRatio="none"
                          @load=${ge}
                        ></image>
                        <rect width="1" height="1" class="loading"></rect>
                      </svg>

                      ${n?.index===e?j`<rect
                            class="selection-drag-target"
                            x=${n.bbox.start[0]}
                            y=${n.bbox.start[1]}
                            width=${n.bbox.end[0]-n.bbox.start[0]}
                            height=${n.bbox.end[1]-n.bbox.start[1]}
                            fill="transparent"
                            @touchmove=${this.prevent_safari_scroll}
                            @pointerdown=${this.selection_drag_start}
                            @pointermove=${this.selection_drag}
                            @pointerup=${this.selection_drag_end}
                        ></rect>`:null}
                    `}))}
              </svg>
              ${this._drop_hint?j`
            <rect
                class="drop_hint"
                x=${this._drop_hint[0]}
                y=${this._drop_hint[1]}
                width=${24}
                height=${24}
                ></rect>
          `:null}
            </svg>
            ${i(this,Vt,"f")?j`
              <rect id="sbox"
                x=${Math.min(i(this,Vt,"f").pin[0],i(this,Vt,"f").mouse[0])}
                y=${Math.min(i(this,Vt,"f").pin[1],i(this,Vt,"f").mouse[1])}
                width=${Math.abs(i(this,Vt,"f").pin[0]-i(this,Vt,"f").mouse[0])}
                height=${Math.abs(i(this,Vt,"f").pin[1]-i(this,Vt,"f").mouse[1])}
                ></rect>
              `:null}
            ${St(this.callouts,(t=>t),(t=>{const[e,i]=Wt(t,[12,12]);return j`
                  <image href="assets/callout.svg" x=${e} y=${i} width=${24} height=${24}></image>
                `}))}
            ${n?j`
            <svg
              id="selection"
              x=${n.bbox.start[0]}
              y=${n.bbox.start[1]}
              width=${n.bbox.end[0]-n.bbox.start[0]}
              height=${n.bbox.end[1]-n.bbox.start[1]}
              @touchmove=${this.prevent_safari_scroll}
              @pointerdown=${this.selection_drag_start}
              @pointermove=${this.selection_drag}
              @pointerup=${this.selection_drag_end}>
              <rect class="selection-box" width="100%" height="100%"  ></rect>
            ${o?j`
            <g style=${`transform-origin: center; transform: rotate(${o.r}deg) translateY(${Math.sign((o.r-180)%180)*(o.dim[0]-o.dim[1])/2}px)`}>
              <line class="ro" x1="50%" x2="50%" y2=${-10}></line>
              <circle class="ro handle" cx="50%" cy=${-10} r=${2}></circle>
            </g>
            <line class="rn" x2="100%"></line>
            <line class="rw" y2="100%"></line>
            <line class="re" x1="100%" x2="100%" y2="100%"></line>
            <line class="rs" y1="100%" x2="100%" y2="100%"></line>
            <rect class="handle rn rw"></rect>
            <rect class="handle rn re" x="100%"></rect>
            <rect class="handle rs rw" y="100%"></rect>
            <rect class="handle rs re" x="100%" y="100%"></rect>
            </g>
            </svg>`:null}`:null}
          </svg>
        </svg>
      </p-p-z>
      <div
        id="bg-drop"
        class=${this.hovering??""}
        @dragenter=${i(this,Xt,"f")}
        @dragover=${i(this,te,"f")}
        @dragleave=${i(this,Qt,"f")}
        @drop=${i(this,ee,"f")}
      >
        <div id="bg-drop-label" @drop=${i(this,ee,"f")}>Set Background</div>
      </div>
    `}createRenderRoot(){return super.createRenderRoot()}prevent_safari_scroll(t){Ut(t)}selection_drag_start(t){if(!Rt(t))return;const e=i(this,ue,"f").call(this,t);Ut(t),t.target.setPointerCapture(t.pointerId),s(this,ce,e,"f")}selection_drag(t){if(console.log("drag fired"),!Rt(t))return;i(this,ce,"f")||this.selection_drag_start(t),Ut(t);const e=zt([0,0],i(this,Kt,"a",qt),i(this,ue,"f").call(this,t)),n=this.tokens.get(this.selection.values().next().value),o=n.dim,r=n.loc,h=t.target.classList;let a=[0,0],l=[0,0],c=0;if(h.contains("rn")&&(l[1]=r[1]-ve(e[1]),a[1]=ve(e[1])-r[1]),h.contains("rw")&&(l[0]=r[0]-ve(e[0]),a[0]=ve(e[0])-r[0]),h.contains("rs")&&(l[1]=ve(e[1])-o[1]-r[1]),h.contains("re")&&(l[0]=ve(e[0])-o[0]-r[0]),h.contains("ro")){const t=Ct(r,Tt(o,2)),i=Wt(e,t),s=180*Math.atan2(i[0],-i[1])/Math.PI;c=90*Math.round(s/90)-n.r%360}h.contains("selection-drag-target")?(console.log("move"),a=Wt(e,i(this,ce,"f")).map(ve)):(a=Ot(_t(o,-24),a),l=At(_t(Et(o,-1),24),l)),c===i(this,de,"f").r&&Nt(a,i(this,de,"f").move)&&Nt(l,i(this,de,"f").resize)||(s(this,ce,Ct(i(this,ce,"f"),a),"f"),s(this,de,{move:[0,0],resize:[0,0],r:0},"f"),this.dispatchEvent(Dt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{let e=this.tokens.get(t);return{id:e.id,loc:Ct(e.loc,a),dim:Ct(e.dim,l),r:e.r+c}}))})))}selection_drag_end(t){Ut(t),s(this,ce,void 0,"f")}};Vt=new WeakMap,Zt=new WeakMap,Ft=new WeakMap,Xt=new WeakMap,Yt=new WeakMap,Qt=new WeakMap,te=new WeakMap,ee=new WeakMap,ie=new WeakMap,se=new WeakMap,ne=new WeakMap,oe=new WeakMap,ce=new WeakMap,de=new WeakMap,ue=new WeakMap,pe=new WeakMap,Kt=new WeakSet,qt=function(){return Et([this.width,this.height],24)},re=function(t){if(!It(t))return;t.target.setPointerCapture(t.pointerId);const e=i(this,ue,"f").call(this,t);s(this,Vt,{pin:e,mouse:e},"f")},he=function(t){s(this,Zt,{clientX:t.clientX,clientY:t.clientY},"f"),i(this,Vt,"f")&&(i(this,Vt,"f").mouse=i(this,ue,"f").call(this,t),this.requestUpdate())},ae=function(t){if(!i(this,Vt,"f"))return this.dispatchEvent(jt("token-select",[]));t.target.setPointerCapture(t.pointerId);const e=Ot(i(this,Vt,"f").pin,i(this,Vt,"f").mouse),n=(t=>[Math.abs(t[0]),Math.abs(t[1])])(Wt(i(this,Vt,"f").pin,i(this,Vt,"f").mouse)),o={start:e,end:Ct(e,n)},r=this.tokens.order.filter((t=>((t,e)=>!(e.start[0]>t.end[0]||e.end[0]<t.start[0]||e.start[1]>t.end[1]||e.end[1]<t.start[1]))(o,{start:t.loc,end:Ct(t.loc,t.dim)}))).map((t=>t.id));s(this,Vt,void 0,"f"),this.dispatchEvent(jt("token-select",r)),this.requestUpdate()},le=function(){if(0===this.selection.size)return;const t=Array.from(this.selection,(t=>this.tokens.get(t))).filter((t=>t)),e=Math.max(...Bt(this.selection.values(),(t=>this.tokens.index(t))));let i=t[0].loc,s=Ct(t[0].loc,t[0].dim);return t.forEach((t=>{i=Ot(i,t.loc),s=At(s,Ct(t.loc,t.dim))})),{index:e,bbox:{start:i,end:s}}},fe.styles=a`
    :host {
      position: relative;
      display: block;
      --selection-color: cornflowerblue;
      overflow: hidden;
    }

    p-p-z {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
    #root {
      backface-visibility: hidden;
    }

    #sbox {
      stroke: var(--selection-color);
      stroke-width: 1px;
      fill: var(--selection-color);
      fill-opacity: 0.2;
    }

    #bg-drop {
      position: absolute;
      right: 5px;
      bottom: -60px;
      display: inline-block;
      height: 50px;
      transition: bottom 250ms;
      background: var(--ui-bg);
      border-radius: 5px 5px 0 0;
      display: grid;
      padding: 5px;
      grid: 1fr 1fr;
      text-align: center;
      display: none;
    }

    #bg-drop.canvas,
    #bg-drop.bg {
      bottom: 0;
      box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.3);
      display: block;
    }

    #bg-drop-label {
      --color: gray;
      padding: 0 1em;
      border: 2px solid var(--color);
      color: var(--color);
      border-radius: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }

    .bg > #bg-drop-label {
      --color: blue;
    }

    svg {
      overflow: visible;
    }

    #surface {
      clip-path: rect(100%);
    }

    .shadow {
      stroke-width: ${.5};
      stroke: rgba(0, 0, 0, 0.2);
      filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));
    }

    .drop_hint {
      transition: none;
      pointer-events: none;
      fill: gray;
    }

    .selection-box,
    line.ro {
      stroke: var(--selection-color);
      stroke-width: 1px;
      filter: drop-shadow(0px 0px 2px var(--selection-color));
      fill: transparent;
    }

    .selection-box {
      pointer-events: none !important;
    }

    .rn,
    .rs,
    .re,
    .rw {
      stroke-width: ${8};
      vector-effect: non-scaling-stroke;
      stroke: transparent;
    }

    .handle {
      stroke-width: 1px;
      fill: var(--selection-color);
      stroke: white;
    }

    .selection-drag-target {
      pointer-events: fill;
      cursor: move;
    }

    rect.handle {
      width: ${8}px;
      height: ${8}px;
      transform: translate(${-4}px, ${-4}px);
    }

    .ro.handle {
      cursor: crosshair;
    }

    .rn.re,
    .rs.rw {
      cursor: nesw-resize;
    }

    .rn.rw,
    .rs.re {
      cursor: nwse-resize;
    }

    .rn,
    .rs {
      cursor: row-resize;
    }

    .re,
    .rw {
      cursor: col-resize;
    }

    p-p-z {
      background-color: #ededf0;
    }

    .token {
      transform-box: fill-box;
      transform-origin: center;
      fill: transparent;
    }

    .token + .loading {
      fill: url(#loading);
      pointer-events: none;
    }

    .token.loaded + .loading {
      fill: transparent;
    }

    #selection {
      pointer-events: none;
    }

    #selection * {
      pointer-events: auto;
    }
  `,e([at({type:Number})],fe.prototype,"width",void 0),e([at({type:Number})],fe.prototype,"height",void 0),e([at()],fe.prototype,"bg",void 0),e([at({attribute:!1})],fe.prototype,"tokens",void 0),e([at({attribute:!1})],fe.prototype,"selection",void 0),e([at({attribute:!1})],fe.prototype,"callouts",void 0),e([at({attribute:!1})],fe.prototype,"sel_bbox",void 0),e([ut("root",!0)],fe.prototype,"root",void 0),e([ut("p-p-z",!0)],fe.prototype,"viewport",void 0),e([lt()],fe.prototype,"_drop_hint",void 0),e([lt()],fe.prototype,"hovering",void 0),e([dt({capture:!0,passive:!1})],fe.prototype,"prevent_safari_scroll",null),e([dt({capture:!0,passive:!1})],fe.prototype,"selection_drag_start",null),e([dt({capture:!0,passive:!1})],fe.prototype,"selection_drag",null),e([dt({capture:!0,passive:!1})],fe.prototype,"selection_drag_end",null),fe=e([rt("bg-canvas")],fe);const ve=t=>24*Math.round(t/24),we=t=>t-t%24,ge=t=>t.target.classList.add("loaded");var me,be;let ye=class extends nt{constructor(){super(...arguments),this._state=!1,this._loaded=!1,this._buy=t=>{console.log("CLICK"),Ut(t),this._state=!0,document.addEventListener("click",i(this,me,"f"),{capture:!0})},me.set(this,(t=>{Ut(t),this._state=!1,document.removeEventListener("click",i(this,me,"f"),{capture:!0})})),be.set(this,(t=>{this._loaded=!0}))}render(){return U`<button @click="${this._buy}">Buy Me A Coffee</button> ${this._state?U`<div id="container"><iframe class="${this._loaded?"loaded":""}" allow="payment" src="https://ko-fi.com/djrenren/?hidefeed=true&widget=true&embed=true&preview=true" title="djrenren" @load="${i(this,be,"f")}"></iframe></div>`:null}`}};async function $e(t,e,i){return t.pipeTo(new WritableStream({write:e}),{signal:i})}me=new WeakMap,be=new WeakMap,ye.styles=a`:host{display:block;position:relative}iframe{border:none;display:block;opacity:0;width:100%;height:100%;transition:opacity .5s linear}#container{border-radius:5px;box-shadow:0 0 6px rgba(0,0,0,.7);position:absolute;width:350px;height:525px;bottom:-535px;right:0;animation-name:fade;animation-duration:.5s;animation-direction:backwards;background:url(assets/loading.svg) center/100px no-repeat,#ededf0;overflow:hidden}iframe.loaded{opacity:1}@keyframes fade{0%{opacity:0}100%{opacity:1}}`,e([lt()],ye.prototype,"_state",void 0),e([lt()],ye.prototype,"_loaded",void 0),ye=e([rt("buy-me-a-coffee")],ye);const ke=t=>JSON.stringify({...t,tokens:[...Bt(t.tokens.values(),(t=>({...t})))]});var xe,Me,Se,Ce;class _e extends EventTarget{constructor(){super(),xe.add(this),this.tabletop={tokens:new Ht,grid_dim:[30,20],bg:null},this.callouts=new Set,Me.set(this,void 0);const t=new TransformStream;s(this,Me,t.writable.getWriter(),"f"),$e(t.readable,(t=>i(this,xe,"m",Se).call(this,t)))}async set_bg(t){const e=t?await i(this,xe,"m",Ce).call(this,t):null;this.apply({type:"bg",url:e})}async add_token(t,e){const s={id:crypto.randomUUID(),url:await i(this,xe,"m",Ce).call(this,t),...e};this.apply({type:"token-added",...s})}set_dim(t){this.apply({type:"grid-resized",dim:t})}async apply(t){await i(this,Me,"f").write(t)}}Me=new WeakMap,xe=new WeakSet,Se=async function(t){switch(t.type){case"token-manipulated":for(let e of t.tokens){let t=this.tabletop.tokens.get(e.id);if(!t)return void console.error("Update received for nonexistant token",e.id);Object.assign(t,{dim:e.dim,loc:e.loc,r:e.r})}break;case"token-added":let e={id:t.id,dim:t.dim,loc:t.loc,url:t.url,r:0};this.tabletop.tokens.add(t.id,e);break;case"grid-resized":this.tabletop.grid_dim=t.dim;break;case"token-removed":for(let e of t.ids){const t=this.tabletop.tokens.get(e);if(!t)return void console.error("Tried to remove nonexistant token",e);this.tabletop.tokens.delete(t.id)}break;case"state-sync":this.tabletop=(t=>{let e=JSON.parse(t),i=new Ht;return e.tokens.forEach((t=>i.add(t.id,t))),{...e,tokens:i}})(t.tabletop);break;case"token-reorder":const i=this.tabletop.tokens.index(t.id);if(void 0===i)return void console.error("Tried to reorder non-existant token",t.id);let s;s="top"===t.idx?this.tabletop.tokens.size-1:"bottom"===t.idx?0:"up"===t.idx?Math.min(this.tabletop.tokens.size-1,i+1):Math.max(0,i-1),this.tabletop.tokens.set_index(t.id,s);break;case"bg":this.tabletop.bg=t.url;break;case"callout":this.callouts.add(t.loc),setTimeout((()=>{this.callouts.delete(t.loc)}),1500)}this.dispatchEvent(Dt(t))},Ce=async function(t){if("string"==typeof t)return t;let e=new URL(window.location.toString());e.search="";let i=crypto.randomUUID();e.pathname=`/resources/${i}`;let s=await caches.open("resources");return await s.put(e,new Response(t)),e.toString()};var We;class Ee extends EventTarget{constructor(){super(...arguments),We.set(this,"opening")}get current(){return i(this,We,"f")}set(t){s(this,We,t,"f"),setTimeout((()=>this.onstatus&&this.onstatus(t)),0),this.dispatchEvent(new CustomEvent("status",{detail:t}))}async connected(){if("closed"===i(this,We,"f"))throw"closed";if("open"!==i(this,We,"f"))return"opening"===i(this,We,"f")?new Promise(((t,e)=>{let i=s=>{let n=s.detail;"opening"!==n&&("closed"===n?e("closed"):"open"===n&&t(),this.removeEventListener("status",i))};this.addEventListener("status",i)})):void 0}}We=new WeakMap;const Te=t=>({readable:Ae(t),writable:Oe(t)}),Ae=t=>new ReadableStream({start(e){t.onmessage=({data:t})=>{console.log("RECEIVED",t),e.enqueue(t)};const i=()=>{setTimeout((()=>e.close()),3e3),t.removeEventListener("close",i)};t.addEventListener("close",i)},cancel(){t.close()}}),Oe=t=>{let e;return t.addEventListener("error",(t=>console.log("DC ERROR",t))),new WritableStream({start(i){const s=()=>{console.log("stream closed by dc ending",t.label),i.error("Closed foo"),t.removeEventListener("close",s)};t.addEventListener("close",s),t.onopen=()=>e&&e(),t.onbufferedamountlow=()=>e&&e()},async write(i){("connecting"===t.readyState||t.bufferedAmount>t.bufferedAmountLowThreshold)&&(console.log("waiting for resumptoin..."),await new Promise(((t,i)=>e=t)),console.log("resumed!")),console.log("writing",i),t.send(i)},abort(){console.log("aborted dc by stream"),t.close()},close(){console.log("closed dc by stream"),t.close()}},new CountQueuingStrategy({highWaterMark:1}))};var ze,Ne,Re,Ie,Ue,je,Pe,Le,De,He,Je,Be,Ge;class Ke{constructor(t,e){ze.set(this,void 0),this.ondatachannel=t=>{},this.id=t,this.rtc=e,this.events_dc=e.createDataChannel("events",{negotiated:!0,id:1});let{readable:i,writable:n}=function(t){let e=new TransformStream({transform(t,e){e.enqueue(JSON.stringify(t))}});return e.readable.pipeTo(t.writable),{readable:t.readable.pipeThrough(new TransformStream({transform(t,e){e.enqueue(JSON.parse(t))}})),writable:e.writable}}(Te(this.events_dc));this.events=i,s(this,ze,n.getWriter(),"f"),this.rtc.ondatachannel=t=>this.ondatachannel(t)}write_event(t){return t.remote=this.id,i(this,ze,"f").write(t)}datachannel(t,e){return new Promise(((i,s)=>{let n=this.rtc.createDataChannel(t,e);n.addEventListener("open",(()=>{n.removeEventListener("error",s),i(n)}),{once:!0}),n.addEventListener("error",s,{once:!0})}))}}ze=new WeakMap;const Ve={iceServers:[{urls:"stun:stun.l.google.com:19302"}]};class Ze extends EventTarget{constructor(t,e=!1,n="wss://battlegrid-signaling.herokuapp.com"){super(),Ne.add(this),this.status=new Ee,Re.set(this,void 0),Ie.set(this,void 0),Ue.set(this,void 0),je.set(this,new Map),Pe.set(this,!1),De.set(this,(()=>{this.status.set("opening"),i(this,Re,"f").removeEventListener("close",i(this,De,"f")),i(this,Re,"f").removeEventListener("hard-disconnect",i(this,De,"f")),i(this,Re,"f").removeEventListener("message",i(this,Be,"f")),!i(this,Pe,"f")&&i(this,Ne,"m",Ge).call(this)})),Be.set(this,(async({data:t})=>{let e=JSON.parse(t);if("error-not-exists"===e.type){return i(this,je,"f").get(e.destination)?.rtc.close(),void console.log("closing")}let s=i(this,je,"f").get(e.from);switch(e.type){case"offer":if(!i(this,Ue,"f"))return;s=i(this,Ne,"m",Je).call(this,e.from),s.rtc.setRemoteDescription(new RTCSessionDescription(e.offer));let t=await s.rtc.createAnswer();await s.rtc.setLocalDescription(t),i(this,Re,"f").send(JSON.stringify({type:"answer",from:this.peer_id,to:e.from,answer:t}));break;case"answer":s?.rtc.setRemoteDescription(new RTCSessionDescription(e.answer));break;case"icecandidate":await(s?.rtc.addIceCandidate(e.candidate))}})),this.peer_id=t,s(this,Ue,e,"f"),s(this,Ie,n,"f"),s(this,Re,i(this,Ne,"m",Le).call(this),"f")}initiate(t){let e=i(this,Ne,"m",Je).call(this,t);return e.rtc.createOffer().then((async s=>(await e.rtc.setLocalDescription(s),i(this,Ne,"m",He).call(this,{type:"offer",from:this.peer_id,to:t,offer:s})))).catch((t=>console.error("Intiation error: ",t))),e}shutdown(){s(this,Pe,!0,"f"),i(this,Re,"f").close(),i(this,je,"f").clear()}}Re=new WeakMap,Ie=new WeakMap,Ue=new WeakMap,je=new WeakMap,Pe=new WeakMap,De=new WeakMap,Be=new WeakMap,Ne=new WeakSet,Le=function(){this.status.set("opening");let t=new URL(i(this,Ie,"f"));return t.pathname=this.peer_id,s(this,Re,function(t){let e=!0,i=setInterval((()=>{e||(console.error("Server failed to respond to heartbeat"),t.close(1e3,"Heartbeat failure"),clearInterval(i),t.dispatchEvent(new Event("hard-disconnect"))),e=!1,t.send("__ping__")}),3e3);return t.addEventListener("message",(t=>{"__pong__"===t.data&&(t.stopImmediatePropagation(),console.log("ponging"),e=!0)})),t.addEventListener("error",(()=>{clearInterval(i)}),{once:!0}),t.addEventListener("close",(()=>{clearInterval(i)}),{once:!0}),t}(new WebSocket(t)),"f"),i(this,Re,"f").addEventListener("open",(()=>this.status.set("open")),{once:!0}),i(this,Re,"f").addEventListener("close",i(this,De,"f")),i(this,Re,"f").addEventListener("hard-disconnect",i(this,De,"f")),i(this,Re,"f").addEventListener("message",i(this,Be,"f")),i(this,Re,"f")},He=async function(t){await this.status.connected(),i(this,Re,"f").send(JSON.stringify(t))},Je=function(t){let e=new Ke(t,new RTCPeerConnection(Ve));i(this,je,"f").set(t,e);const s=({candidate:e})=>{null!==e&&i(this,Ne,"m",He).call(this,{type:"icecandidate",from:this.peer_id,to:t,candidate:e})};return e.rtc.addEventListener("icecandidate",s),e.events_dc.addEventListener("close",(()=>{e.rtc.removeEventListener("icecandidate",s),i(this,je,"f").delete(t)})),e.events_dc.addEventListener("open",(async()=>{this.dispatchEvent(new CustomEvent("peer",{detail:e}))})),e},Ge=function(){setTimeout((()=>i(this,Ne,"m",Le).call(this)),1e3)};async function qe(t){let e,i=[];try{await $e(t.readable,(t=>{"string"!=typeof t?(console.log("READING resource CHUNK"),i.push(t)):e=JSON.parse(t)}))}catch(t){console.error("Error consuming",t)}console.log(i);let s=new Blob(i,{type:e?.type});return console.log("GOT EM ALL!",s),{blob:s}}var Fe,Xe,Ye,Qe,ti,ei,ii,si,ni,oi,ri,hi,ai;class li{constructor(t,e){Fe.add(this),Xe.set(this,void 0),Ye.set(this,void 0),Qe.set(this,void 0),ti.set(this,void 0),this.status=new Ee,this.forward_events=({detail:t})=>{console.log("CALLBACK",t),t.remote||i(this,Ye,"f").write_event(t)},s(this,ti,new Ze(crypto.randomUUID()),"f"),s(this,Xe,e,"f"),s(this,Qe,t,"f"),i(this,Xe,"f").addEventListener("game-event",this.forward_events),s(this,Ye,i(this,Fe,"m",ei).call(this),"f"),navigator.serviceWorker.onmessage=async t=>{let e=t.data.id;console.log("CLIENT ATTEMPTING TO FETCH",i(this,Ye,"f").events_dc.readyState),await i(this,Ye,"f").datachannel(e,{protocol:"request-resource"}).then(Te).then(qe).then((async({blob:t})=>{console.log("COMMUNICATING WITH SERVICE WORKER"),navigator.serviceWorker.controller.postMessage({type:"found",id:e,blob:t})})).catch((t=>{console.error("Error fetching resource: ",t),navigator.serviceWorker.controller.postMessage({type:"notfound",id:e,error:t})}))}}async reconnect(){s(this,Ye,i(this,Fe,"m",ei).call(this),"f")}async shutdown(){i(this,Ye,"f").rtc.close(),console.log("Waiting for signaler shutdown"),await i(this,ti,"f").shutdown(),console.log("signaler dead"),navigator.serviceWorker.onmessage=null}}Xe=new WeakMap,Ye=new WeakMap,Qe=new WeakMap,ti=new WeakMap,Fe=new WeakSet,ei=function(){let t=i(this,ti,"f").initiate(i(this,Qe,"f"));return t.rtc.addEventListener("iceconnectionstatechange",(()=>{console.log("CONN STATE CHANGED"),"connected"===t.rtc.iceConnectionState&&this.status.set("open")})),t.events_dc.addEventListener("close",(()=>this.status.set("closed"))),t.events_dc.addEventListener("open",(()=>this.status.set("open"))),this.status.set((t=>{switch(t.readyState){case"open":case"closed":return t.readyState;case"closing":return"closed";case"connecting":return"opening"}})(t.events_dc)),$e(t.events,(t=>i(this,Xe,"f").apply(t))),t};class ci{constructor(t){ii.add(this),si.set(this,void 0),ni.set(this,new Set),oi.set(this,void 0),this.signaler=new Ze(crypto.randomUUID(),!0),s(this,si,t,"f"),s(this,oi,new AbortController,"f"),this.signaler.addEventListener("peer",(({detail:t})=>i(this,ii,"m",ri).call(this,t))),i(this,si,"f").addEventListener("game-event",(({detail:t})=>{for(let e of i(this,ni,"f"))e.id!==t.remote&&e.write_event(t)}))}async shutdown(){for(let t of i(this,ni,"f"))t.rtc.close();i(this,ni,"f").clear(),i(this,oi,"f").abort("Server shutting down"),await this.signaler.shutdown()}}si=new WeakMap,ni=new WeakMap,oi=new WeakMap,ii=new WeakSet,ri=function(t){i(this,ni,"f").add(t),t.write_event({type:"state-sync",tabletop:ke(i(this,si,"f").tabletop)}),$e(t.events,(e=>(e.remote=t.id,i(this,si,"f").apply(e)))),t.events_dc.addEventListener("close",(()=>{console.log("PEEER EVENT DC"),i(this,ni,"f").delete(t)})),t.ondatachannel=async t=>{console.log("INCOMING DC",t.channel);const e=t.channel;var s,n;await(s="open",n=e,new Promise((t=>{n.addEventListener(s,(e=>t(e)),{once:!0})}))),console.log("new dc",e),"request-resource"===e.protocol&&async function(t,e){let i=e.blob,s=t.writable.getWriter();console.log("BLOBL",i),s.write(JSON.stringify({type:i.type}));for(let t=0;t<i.size;t+=64e3)console.log("WRITING FIRST ChUNK"),await s.write(await i.slice(t,Math.min(t+64e3,i.size)).arrayBuffer());console.error("closing"),await s.close()}(Te(e),await i(this,ii,"m",hi).call(this,e.label))}},hi=async function(t){let e=await fetch(`/resources/${t}`);return{blob:await e.blob()}};let di=class extends nt{constructor(){super(...arguments),this.text="",this.mousex=0,this.mousey=0,ai.set(this,(t=>{this.mousex=t.pageX,this.mousey=t.pageY}))}connectedCallback(){super.connectedCallback(),this.addEventListener("mousemove",i(this,ai,"f"))}disconnectedCallback(){this.removeEventListener("mousemove",i(this,ai,"f"))}render(){return console.log("Rendering"),U`<slot></slot><div id="message" style="${Gt({left:`${this.mousex+8}px`,top:`${this.mousey+10}px`})}">${this.text}</div>`}};ai=new WeakMap,di.styles=a`:host{display:inline-block;position:relative;width:fit-content;height:fit-content}div{font-size:.8em;display:none;opacity:0;position:fixed;background:#000;color:#fff;border-radius:3px;padding:.25em .5em;white-space:nowrap;width:max-content}@keyframes appear{0%{opacity:0}100%{opacity:1}}:host(:hover) div{display:block;animation:appear 250ms linear forwards 750ms}`,e([at()],di.prototype,"text",void 0),e([lt()],di.prototype,"mousex",void 0),e([lt()],di.prototype,"mousey",void 0),di=e([rt("with-tooltip")],di);let ui=class extends nt{render(){return U`<label class="switch"><input type="checkbox"> <span class="slider round"><span class="on-text">Hosting</span> <span class="off-text">Offline</span></span><div class="dot-wrapper"><div class="dot"></div></div></label>`}};ui.styles=a`.switch{cursor:pointer;position:relative;display:inline-block;height:1em;width:4.5em;padding:.1em}.switch input{display:none}.slider{position:absolute;top:0;bottom:0;left:0;right:0;background-color:#ccc;transition:.4s}.slider>span{position:absolute;font-size:.8em;top:.1em}input:checked+.slider>.on-text{opacity:1}input:checked+.slider>.off-text{opacity:0}input+.slider>.off-text{position:absolute;right:.8em;opacity:1}input+.slider>.on-text{opacity:0;left:.5em;color:#fff}.dot-wrapper{position:absolute;left:.1em;top:.1em;right:.1em;bottom:.1em;transition:.4s}input:checked+.slider{background-color:#2196f3}input:focus+.slider{box-shadow:0 0 1px #2196f3}input:checked+.slider+.dot-wrapper{transform:translateX(calc(100% - 1.2em))}.slider.round{border-radius:34px}.dot{position:absolute;background-color:#fff;height:1em;aspect-ratio:1/1;border-radius:50%}`,ui=e([rt("bg-toggle")],ui);let pi=class extends nt{constructor(){super(...arguments),this.status="local",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return U`<label class="switch"><with-tooltip text="${function(t){switch(t){case"open":return"Joinable";case"closed":return"Offline";case"opening":return"Not Joinable";case"local":return"Start hosting"}}(this.status)}"><input type="checkbox" @input="${this.toggle}" ?checked="${"local"!==this.status}"> <span class="slider round ${this.status}"><span class="on-space">Hosting</span> <span class="dot"></span> <span class="off-space">Offline</span></span></with-tooltip></label>`}};pi.styles=a`.slider{display:inline-flex;flex-wrap:nowrap;height:1em;transition:.4s;padding:.2em;min-width:4.5em;cursor:pointer;background:#ccc}.open{background:#2196f3}.opening{background:#fdcb18}.opening>.on-space{color:#000}input{display:none}input:checked+.slider>.on-space{flex-grow:1;opacity:1}input:checked+.slider>.off-space{flex-grow:0!important;opacity:0}.off-space{opacity:1;flex-grow:1!important}.on-space{opacity:0;color:#fff;width:0}.off-space,.on-space{font-size:.8em}.slider>span{flex-grow:0;flex-basis:0;transition:.4s;overflow:hidden;text-align:center}.round{border-radius:1em}.dot{border-radius:1em;min-width:1em;height:1em;background:#fff}`,e([at()],pi.prototype,"status",void 0),pi=e([rt("host-toggle")],pi);let fi=class extends nt{constructor(){super(...arguments),this.status="opening",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return U`<span class="slider round ${this.status}">${function(t){switch(t){case"open":return"Connected";case"closed":return"Disconnected";case"opening":return"Connecting"}}(this.status)}</span>`}};fi.styles=a`.slider{height:1em;transition:.4s;padding:.2em;min-width:5em;cursor:pointer;color:#fff;font-size:.8em;align-items:baseline}.open{background:#2196f3}.opening{background:#fdcb18}.round{border-radius:1em}`,e([at()],fi.prototype,"status",void 0),fi=e([rt("client-status")],fi);const vi=(t,e)=>Promise.race([t,new Promise(((t,i)=>setTimeout(i,e)))]);var wi,gi,mi,bi;let yi=class extends nt{constructor(){super(...arguments),this.selection=new Set,this.host_pending=!1,this.game=new _e,wi.set(this,(()=>{this.game.set_dim(At([1,1],[parseInt(this.width?.value)??0,parseInt(this.height?.value)??0]))})),gi.set(this,(async()=>{console.log("new local..."),await(this.client?.shutdown()),this.client=void 0,window.history.pushState(null,"",window.location.href.split("?")[0])})),mi.set(this,(async()=>{try{this.client?.shutdown(),this.client=void 0,this.host_pending=!0,this.server=new ci(this.game),this.server.signaler.status.onstatus=()=>this.requestUpdate(),console.log("WAITING"),await vi(this.server.signaler.status.connected(),5e3),window.history.pushState({},"","?game="+this.server.signaler.peer_id),navigator.clipboard.writeText(window.location.toString())}catch(t){console.error(t),await i(this,bi,"f")}finally{this.host_pending=!1}})),bi.set(this,(async()=>{let t=this.server;this.server=void 0,t&&(t.signaler.status.onstatus=void 0),await(t?.shutdown()),window.history.replaceState({},"",window.location.pathname)}))}render(){let t="closed"===this.client?.status.current?U`<div class="message error"><div><h1>Error connecting to remote grid</h1><button @click="${i(this,gi,"f")}">New local grid</button></div></div>`:null,e="opening"===this.client?.status.current?U`<div class="message"><div><h1>Connecting to grid...</h1></div></div>`:null,s="closed"===this.client?.status.current?U`<div class="message"><div><h1>Disconnected from host</h1><button @click="${i(this,gi,"f")}">Continue locally</button></div></div>`:null,n=t||e||s;return U`<section id="toolbar" class="group"><div class="group">${this.client?U`<client-status status="${this.client.status.current}"></client-status>`:U`<host-toggle status="${this.server?.signaler.status.current??"local"}" @enable="${i(this,mi,"f")}" @disable="${i(this,bi,"f")}"></host-toggle>`} <span>Grid: <input id="width" type="number" min="1" @input="${i(this,wi,"f")}" .value="${this.game.tabletop.grid_dim[0]+""}"> x <input id="height" type="number" min="1" @input="${i(this,wi,"f")}" .value="${this.game.tabletop.grid_dim[1]+""}"> </span>${1===this.selection.size?U`<div><button @click="${()=>this.game.apply({type:"token-reorder",id:Jt(this.selection),idx:"down"})}" ?disabled="${0===this.game.tabletop.tokens.index(Jt(this.selection))}">Move Down</button> <button @click="${()=>this.game.apply({type:"token-reorder",id:Jt(this.selection),idx:"up"})}" ?disabled="${this.game.tabletop.tokens.index(Jt(this.selection))===this.game.tabletop.tokens.size-1}">Move Up</button></div>`:null}</div><div class="group"><buy-me-a-coffee class="right"></buy-me-a-coffee></div></section><bg-canvas bg="${(t=>null!=t?t:L)(this.game.tabletop.bg??void 0)}" .selection="${this.selection}" width="${this.game.tabletop.grid_dim[0]}" height="${this.game.tabletop.grid_dim[1]}" .tokens="${this.game.tabletop.tokens}" .callouts="${this.game.callouts}" @token-drop="${({detail:t})=>this.game.add_token(t.img,{loc:t.loc,r:0,dim:t.dim})}" @bg-drop="${({detail:t})=>this.game.set_bg(t)}" @token-select="${({detail:t})=>{this.selection=new Set(t)}}" @game-event="${({detail:t})=>this.game.apply(t)}"></bg-canvas>${n}`}updated(t){t.has("client")&&(document.title="BattleGrid"+(this.client&&"open"===this.client.status.current?this.server?"- Hosting":"- Connected":""))}async connectedCallback(){super.connectedCallback(),this.game.addEventListener("game-event",(()=>{for(const t of this.selection)this.game.tabletop.tokens.has(t)||this.selection.delete(t);this.requestUpdate(),this.canvas?.requestUpdate()})),console.log("debug now please");let t=new URLSearchParams(window.location.search).get("game");if(!t)return await i(this,gi,"f").call(this);try{console.log("new client"),this.client=new li(t,this.game),this.client.status.onstatus=()=>this.requestUpdate(),console.log("waiting for connection"),await vi(this.client.status.connected(),5e3),console.log("connected")}catch{console.log("giving up"),await i(this,gi,"f").call(this)}}};var $i,ki,xi,Mi,Si;wi=new WeakMap,gi=new WeakMap,mi=new WeakMap,bi=new WeakMap,yi.styles=a`:host{width:100%;height:100%;display:grid;grid:"toolbar" 30px "viewport" minmax(0,1fr)/minmax(0,1fr);font-family:inherit;--ui-bg:#f9f9fa}.message{grid-area:1/1/3/1;display:grid;align-items:center;justify-items:center;background:#fff;z-index:2}.right{justify-self:end}bg-canvas{grid-area:viewport;z-index:1}input[type=number]{width:3em}.group{display:flex;align-items:center;height:100%;flex-wrap:nowrap}#toolbar{grid-area:toolbar;box-shadow:0 0 4px gray;z-index:2;background:var(--ui-bg);justify-content:space-between;padding:0 1em;grid-template-rows:unset}.group img{width:1em;height:1em;object-fit:cover;display:inline-block}`,e([ut("#width",!0)],yi.prototype,"width",void 0),e([ut("#height",!0)],yi.prototype,"height",void 0),e([ut("bg-canvas",!0)],yi.prototype,"canvas",void 0),e([lt()],yi.prototype,"client",void 0),e([lt()],yi.prototype,"server",void 0),e([lt()],yi.prototype,"selection",void 0),e([lt()],yi.prototype,"host_pending",void 0),yi=e([rt("bg-app")],yi);class Ci extends HTMLElement{constructor(){super(),$i.add(this),this.state={z:1,scroll_pos:[0,0]},this.desired_state={z:1},this.origin=[0,0],this.vloc=[0,0],this.vdim=[0,0],this.cdim=[0,0],this.offset=[0,0],this.smooth=!1,xi.set(this,new ResizeObserver((t=>{for(let e of t)if(e.target===this){this.vdim=[e.contentRect.width,e.contentRect.height];const t=this.getBoundingClientRect();this.vloc=[t.x,t.y]}else this.cdim=[e.target.width.baseVal.value,e.target.height.baseVal.value];this.center()}))),this.loop=async()=>{let t,e;for(;t=e,e=await _i();){if(!t)continue;let i=this.desired_state.z-this.state.z;if(0===i)continue;let s=e-t,n=this.smooth?Math.sign(i)*Math.min(.002*s*this.state.z,Math.abs(i)):i;this.state.z+=n,this.center(),this.state.scroll_pos=At([0,0],Ct(Et(this.origin,n),this.state.scroll_pos)),this.scrollTo({left:this.state.scroll_pos[0],top:this.state.scroll_pos[1]})}},this.zoom=(t,e)=>{this.desired_state.z=Math.min(4,Math.max(1,this.desired_state.z+e)),this.state.scroll_pos=[this.scrollLeft,this.scrollTop],this.origin=this.coordToLocal(t)},this.wheel=t=>{if(!t.ctrlKey)return;t.preventDefault();const e=t.deltaMode===WheelEvent.DOM_DELTA_LINE?10:1,i=Math.min(50,Math.max(-50,-t.deltaY*e)),s=.005*i*this.state.z;this.smooth=50===Math.abs(i),this.zoom([t.clientX,t.clientY],s),this.addEventListener},Mi.set(this,(t=>{console.log("zoom!",t.ctrlKey,t.key),t.ctrlKey&&("-"===t.key?(this.smooth=!0,this.zoom(this.coordToLocal(Ct(this.vloc,Tt(this.vdim,2))),-.2*this.state.z),Ut(t)):"="===t.key?(this.smooth=!0,this.zoom(this.coordToLocal(Ct(this.vloc,Tt(this.vdim,2))),.2*this.state.z),Ut(t)):"0"===t.key&&(this.smooth=!0,i(this,$i,"m",ki).call(this)))})),Si.set(this,{prev_scale:0,origin:[0,0],start:t=>{Ut(t),i(this,Si,"f").origin=this.coordToLocal([t.clientX,t.clientY]),i(this,Si,"f").prev_scale=1},change:t=>{Ut(t),this.zoom(i(this,Si,"f").origin,this.state.z*(t.scale-i(this,Si,"f").prev_scale)*1.5),i(this,Si,"f").prev_scale=t.scale}}),this.root=this.attachShadow({mode:"open"}),this.root.appendChild(Ci.template().content.cloneNode(!0)),this.container=this.root.getElementById("container"),i(this,xi,"f").observe(this),this.root.querySelector("slot").onslotchange=({target:t})=>{let e=t.assignedElements()[0];i(this,xi,"f").observe(e),this.smooth=!1,i(this,$i,"m",ki).call(this)},this.addEventListener("scroll",(()=>this.state.scroll_pos=[this.scrollLeft,this.scrollTop])),this.addEventListener("gesturestart",i(this,Si,"f").start),this.addEventListener("gesturechange",i(this,Si,"f").change),document.addEventListener("keydown",i(this,Mi,"f"),{passive:!1})}center(){this.offset=At([0,0],Et(Wt(this.vdim,Et(this.cdim,this.state.z)),.5)),this.container.style.transform=`translate(${this.offset[0]}px, ${this.offset[1]}px) scale(${this.state.z})`}connectedCallback(){this.loop(),this.addEventListener("wheel",this.wheel,{passive:!1,capture:!0})}coordToLocal(t){const e=Ct(Wt(t,this.vloc),this.state.scroll_pos);return Tt(Wt(e,this.offset),this.state.z)}static template(){let t=document.createElement("template");return t.innerHTML='\n            <style>\n                :host {\n                    position: relative;\n                    display: block;\n                    overflow: auto; \n                }\n                #container {\n                    transform-origin: 0 0;\n                    display: block;\n                    width: fit-content;\n                    height: fit-content;\n                }\n            </style>\n                <div id="container">\n                    <slot id="content"></slot>\n                </div>\n            </div>\n        ',t}}xi=new WeakMap,Mi=new WeakMap,Si=new WeakMap,$i=new WeakSet,ki=function(){let t=this.root.querySelector("slot").assignedElements()[0],e=this.getBoundingClientRect(),i=[e.width,e.height],s=[t.width.baseVal.value,t.height.baseVal.value];const n=Math.max(1,Math.min(4,...Et(((t,e)=>[t[0]/e[0],t[1]/e[1]])(i,s),.95)));this.zoom([0,0],n-this.state.z)};const _i=()=>new Promise((t=>window.requestAnimationFrame(t)));customElements.define("p-p-z",Ci),await navigator.serviceWorker.register("./service-worker.js"),document.body.addEventListener("wheel",(t=>{t.ctrlKey&&t.preventDefault()}),{passive:!1});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvdWkvc2FmYXJpLWZpeC50cyIsIi4uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2Nzcy10YWcuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L3JlYWN0aXZlLWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvbGl0LWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvY3VzdG9tLWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvc3RhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvYmFzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9ldmVudC1vcHRpb25zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LWFzc2lnbmVkLWVsZW1lbnRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmUtaGVscGVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3JlcGVhdC5qcyIsIi4uL3NyYy91dGlsL21hdGgudHMiLCIuLi9zcmMvdXRpbC9ldmVudHMudHMiLCIuLi9zcmMvdXRpbC9maWxlcy50cyIsIi4uL3NyYy9nYW1lL2dhbWUtZXZlbnRzLnRzIiwiLi4vc3JjL3V0aWwvb3JkZXJlZG1hcC50cyIsIi4uL3NyYy91dGlsL2l0ZXIudHMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanMiLCIuLi9zcmMvdWkvY2FudmFzLnRzIiwiLi4vc3JjL3VpL2J1eW1lYWNvZmZlZS50cyIsIi4uL3NyYy91dGlsL3N0cmVhbXMudHMiLCIuLi9zcmMvZ2FtZS90YWJsZXRvcC50cyIsIi4uL3NyYy9nYW1lL2dhbWUudHMiLCIuLi9zcmMvdXRpbC9uZXQudHMiLCIuLi9zcmMvdXRpbC9ydGMudHMiLCIuLi9zcmMvbmV0L3BlZXIudHMiLCIuLi9zcmMvbmV0L3NpZ25hbGVyLnRzIiwiLi4vc3JjL3V0aWwvc29ja2V0LnRzIiwiLi4vc3JjL25ldC9yZXNvdXJjZXMvcHJvdG9jb2wudHMiLCIuLi9zcmMvbmV0L2NsaWVudC50cyIsIi4uL3NyYy9uZXQvc2VydmVyLnRzIiwiLi4vc3JjL3VpL3V0aWwvd2l0aC10b29sdGlwLnRzIiwiLi4vc3JjL3VpL3V0aWwvdG9nZ2xlLnRzIiwiLi4vc3JjL3VpL2hvc3QtdG9nZ2xlLnRzIiwiLi4vc3JjL3VpL2NsaWVudC1zdGF0dXMudHMiLCIuLi9zcmMvdXRpbC9wcm9taXNlcy50cyIsIi4uL3NyYy91aS9hcHAudHMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlcy9pZi1kZWZpbmVkLmpzIiwiLi4vc3JjL3VpL3BwcC50cyIsIi4uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEZvciB0aGUgbG92ZSBvZiBnb2QsIHdoeSBpcyB0aGlzIGJyb3dzZXIgc28gamFuayAqL1xuY29uc3QgYXBwSGVpZ2h0ID0gKCkgPT4ge1xuICBjb25zdCBkb2MgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGRvYy5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tYXBwLWhlaWdodFwiLCBgJHt3aW5kb3cuaW5uZXJIZWlnaHR9cHhgKTtcbn07XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBhcHBIZWlnaHQpO1xuYXBwSGVpZ2h0KCk7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcclxuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XHJcbiAgICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XHJcbiAgICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcclxuICAgIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XHJcbn1cclxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PXdpbmRvdy5TaGFkb3dSb290JiYodm9pZCAwPT09d2luZG93LlNoYWR5Q1NTfHx3aW5kb3cuU2hhZHlDU1MubmF0aXZlU2hhZG93KSYmXCJhZG9wdGVkU3R5bGVTaGVldHNcImluIERvY3VtZW50LnByb3RvdHlwZSYmXCJyZXBsYWNlXCJpbiBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZSxlPVN5bWJvbCgpLG49bmV3IFdlYWtNYXA7Y2xhc3Mgc3tjb25zdHJ1Y3Rvcih0LG4scyl7aWYodGhpcy5fJGNzc1Jlc3VsdCQ9ITAscyE9PWUpdGhyb3cgRXJyb3IoXCJDU1NSZXN1bHQgaXMgbm90IGNvbnN0cnVjdGFibGUuIFVzZSBgdW5zYWZlQ1NTYCBvciBgY3NzYCBpbnN0ZWFkLlwiKTt0aGlzLmNzc1RleHQ9dCx0aGlzLnQ9bn1nZXQgc3R5bGVTaGVldCgpe2xldCBlPXRoaXMubztjb25zdCBzPXRoaXMudDtpZih0JiZ2b2lkIDA9PT1lKXtjb25zdCB0PXZvaWQgMCE9PXMmJjE9PT1zLmxlbmd0aDt0JiYoZT1uLmdldChzKSksdm9pZCAwPT09ZSYmKCh0aGlzLm89ZT1uZXcgQ1NTU3R5bGVTaGVldCkucmVwbGFjZVN5bmModGhpcy5jc3NUZXh0KSx0JiZuLnNldChzLGUpKX1yZXR1cm4gZX10b1N0cmluZygpe3JldHVybiB0aGlzLmNzc1RleHR9fWNvbnN0IG89dD0+bmV3IHMoXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDp0K1wiXCIsdm9pZCAwLGUpLHI9KHQsLi4ubik9Pntjb25zdCBvPTE9PT10Lmxlbmd0aD90WzBdOm4ucmVkdWNlKCgoZSxuLHMpPT5lKyh0PT57aWYoITA9PT10Ll8kY3NzUmVzdWx0JClyZXR1cm4gdC5jc3NUZXh0O2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0O3Rocm93IEVycm9yKFwiVmFsdWUgcGFzc2VkIHRvICdjc3MnIGZ1bmN0aW9uIG11c3QgYmUgYSAnY3NzJyBmdW5jdGlvbiByZXN1bHQ6IFwiK3QrXCIuIFVzZSAndW5zYWZlQ1NTJyB0byBwYXNzIG5vbi1saXRlcmFsIHZhbHVlcywgYnV0IHRha2UgY2FyZSB0byBlbnN1cmUgcGFnZSBzZWN1cml0eS5cIil9KShuKSt0W3MrMV0pLHRbMF0pO3JldHVybiBuZXcgcyhvLHQsZSl9LGk9KGUsbik9Pnt0P2UuYWRvcHRlZFN0eWxlU2hlZXRzPW4ubWFwKCh0PT50IGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldD90OnQuc3R5bGVTaGVldCkpOm4uZm9yRWFjaCgodD0+e2NvbnN0IG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLHM9d2luZG93LmxpdE5vbmNlO3ZvaWQgMCE9PXMmJm4uc2V0QXR0cmlidXRlKFwibm9uY2VcIixzKSxuLnRleHRDb250ZW50PXQuY3NzVGV4dCxlLmFwcGVuZENoaWxkKG4pfSkpfSxTPXQ/dD0+dDp0PT50IGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldD8odD0+e2xldCBlPVwiXCI7Zm9yKGNvbnN0IG4gb2YgdC5jc3NSdWxlcyllKz1uLmNzc1RleHQ7cmV0dXJuIG8oZSl9KSh0KTp0O2V4cG9ydHtzIGFzIENTU1Jlc3VsdCxpIGFzIGFkb3B0U3R5bGVzLHIgYXMgY3NzLFMgYXMgZ2V0Q29tcGF0aWJsZVN0eWxlLHQgYXMgc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzLG8gYXMgdW5zYWZlQ1NTfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy10YWcuanMubWFwXG4iLCJpbXBvcnR7Z2V0Q29tcGF0aWJsZVN0eWxlIGFzIHQsYWRvcHRTdHlsZXMgYXMgaX1mcm9tXCIuL2Nzcy10YWcuanNcIjtleHBvcnR7Q1NTUmVzdWx0LGFkb3B0U3R5bGVzLGNzcyxnZXRDb21wYXRpYmxlU3R5bGUsc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzLHVuc2FmZUNTU31mcm9tXCIuL2Nzcy10YWcuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL3ZhciBzO2NvbnN0IGU9d2luZG93LnRydXN0ZWRUeXBlcyxyPWU/ZS5lbXB0eVNjcmlwdDpcIlwiLGg9d2luZG93LnJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCxvPXt0b0F0dHJpYnV0ZSh0LGkpe3N3aXRjaChpKXtjYXNlIEJvb2xlYW46dD10P3I6bnVsbDticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnQ9bnVsbD09dD90OkpTT04uc3RyaW5naWZ5KHQpfXJldHVybiB0fSxmcm9tQXR0cmlidXRlKHQsaSl7bGV0IHM9dDtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnM9bnVsbCE9PXQ7YnJlYWs7Y2FzZSBOdW1iZXI6cz1udWxsPT09dD9udWxsOk51bWJlcih0KTticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnRyeXtzPUpTT04ucGFyc2UodCl9Y2F0Y2godCl7cz1udWxsfX1yZXR1cm4gc319LG49KHQsaSk9PmkhPT10JiYoaT09aXx8dD09dCksbD17YXR0cmlidXRlOiEwLHR5cGU6U3RyaW5nLGNvbnZlcnRlcjpvLHJlZmxlY3Q6ITEsaGFzQ2hhbmdlZDpufTtjbGFzcyBhIGV4dGVuZHMgSFRNTEVsZW1lbnR7Y29uc3RydWN0b3IoKXtzdXBlcigpLHRoaXMuXyRFaT1uZXcgTWFwLHRoaXMuaXNVcGRhdGVQZW5kaW5nPSExLHRoaXMuaGFzVXBkYXRlZD0hMSx0aGlzLl8kRWw9bnVsbCx0aGlzLnUoKX1zdGF0aWMgYWRkSW5pdGlhbGl6ZXIodCl7dmFyIGk7bnVsbCE9PShpPXRoaXMuaCkmJnZvaWQgMCE9PWl8fCh0aGlzLmg9W10pLHRoaXMuaC5wdXNoKHQpfXN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCl7dGhpcy5maW5hbGl6ZSgpO2NvbnN0IHQ9W107cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZm9yRWFjaCgoKGkscyk9Pntjb25zdCBlPXRoaXMuXyRFcChzLGkpO3ZvaWQgMCE9PWUmJih0aGlzLl8kRXYuc2V0KGUscyksdC5wdXNoKGUpKX0pKSx0fXN0YXRpYyBjcmVhdGVQcm9wZXJ0eSh0LGk9bCl7aWYoaS5zdGF0ZSYmKGkuYXR0cmlidXRlPSExKSx0aGlzLmZpbmFsaXplKCksdGhpcy5lbGVtZW50UHJvcGVydGllcy5zZXQodCxpKSwhaS5ub0FjY2Vzc29yJiYhdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkodCkpe2NvbnN0IHM9XCJzeW1ib2xcIj09dHlwZW9mIHQ/U3ltYm9sKCk6XCJfX1wiK3QsZT10aGlzLmdldFByb3BlcnR5RGVzY3JpcHRvcih0LHMsaSk7dm9pZCAwIT09ZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLHQsZSl9fXN0YXRpYyBnZXRQcm9wZXJ0eURlc2NyaXB0b3IodCxpLHMpe3JldHVybntnZXQoKXtyZXR1cm4gdGhpc1tpXX0sc2V0KGUpe2NvbnN0IHI9dGhpc1t0XTt0aGlzW2ldPWUsdGhpcy5yZXF1ZXN0VXBkYXRlKHQscixzKX0sY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITB9fXN0YXRpYyBnZXRQcm9wZXJ0eU9wdGlvbnModCl7cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZ2V0KHQpfHxsfXN0YXRpYyBmaW5hbGl6ZSgpe2lmKHRoaXMuaGFzT3duUHJvcGVydHkoXCJmaW5hbGl6ZWRcIikpcmV0dXJuITE7dGhpcy5maW5hbGl6ZWQ9ITA7Y29uc3QgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7aWYodC5maW5hbGl6ZSgpLHRoaXMuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCh0LmVsZW1lbnRQcm9wZXJ0aWVzKSx0aGlzLl8kRXY9bmV3IE1hcCx0aGlzLmhhc093blByb3BlcnR5KFwicHJvcGVydGllc1wiKSl7Y29uc3QgdD10aGlzLnByb3BlcnRpZXMsaT1bLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCksLi4uT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KV07Zm9yKGNvbnN0IHMgb2YgaSl0aGlzLmNyZWF0ZVByb3BlcnR5KHMsdFtzXSl9cmV0dXJuIHRoaXMuZWxlbWVudFN0eWxlcz10aGlzLmZpbmFsaXplU3R5bGVzKHRoaXMuc3R5bGVzKSwhMH1zdGF0aWMgZmluYWxpemVTdHlsZXMoaSl7Y29uc3Qgcz1bXTtpZihBcnJheS5pc0FycmF5KGkpKXtjb25zdCBlPW5ldyBTZXQoaS5mbGF0KDEvMCkucmV2ZXJzZSgpKTtmb3IoY29uc3QgaSBvZiBlKXMudW5zaGlmdCh0KGkpKX1lbHNlIHZvaWQgMCE9PWkmJnMucHVzaCh0KGkpKTtyZXR1cm4gc31zdGF0aWMgXyRFcCh0LGkpe2NvbnN0IHM9aS5hdHRyaWJ1dGU7cmV0dXJuITE9PT1zP3ZvaWQgMDpcInN0cmluZ1wiPT10eXBlb2Ygcz9zOlwic3RyaW5nXCI9PXR5cGVvZiB0P3QudG9Mb3dlckNhc2UoKTp2b2lkIDB9dSgpe3ZhciB0O3RoaXMuXyRFXz1uZXcgUHJvbWlzZSgodD0+dGhpcy5lbmFibGVVcGRhdGluZz10KSksdGhpcy5fJEFMPW5ldyBNYXAsdGhpcy5fJEVnKCksdGhpcy5yZXF1ZXN0VXBkYXRlKCksbnVsbD09PSh0PXRoaXMuY29uc3RydWN0b3IuaCl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+dCh0aGlzKSkpfWFkZENvbnRyb2xsZXIodCl7dmFyIGksczsobnVsbCE9PShpPXRoaXMuXyRFUykmJnZvaWQgMCE9PWk/aTp0aGlzLl8kRVM9W10pLnB1c2godCksdm9pZCAwIT09dGhpcy5yZW5kZXJSb290JiZ0aGlzLmlzQ29ubmVjdGVkJiYobnVsbD09PShzPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PXN8fHMuY2FsbCh0KSl9cmVtb3ZlQ29udHJvbGxlcih0KXt2YXIgaTtudWxsPT09KGk9dGhpcy5fJEVTKXx8dm9pZCAwPT09aXx8aS5zcGxpY2UodGhpcy5fJEVTLmluZGV4T2YodCk+Pj4wLDEpfV8kRWcoKXt0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRQcm9wZXJ0aWVzLmZvckVhY2goKCh0LGkpPT57dGhpcy5oYXNPd25Qcm9wZXJ0eShpKSYmKHRoaXMuXyRFaS5zZXQoaSx0aGlzW2ldKSxkZWxldGUgdGhpc1tpXSl9KSl9Y3JlYXRlUmVuZGVyUm9vdCgpe3ZhciB0O2NvbnN0IHM9bnVsbCE9PSh0PXRoaXMuc2hhZG93Um9vdCkmJnZvaWQgMCE9PXQ/dDp0aGlzLmF0dGFjaFNoYWRvdyh0aGlzLmNvbnN0cnVjdG9yLnNoYWRvd1Jvb3RPcHRpb25zKTtyZXR1cm4gaShzLHRoaXMuY29uc3RydWN0b3IuZWxlbWVudFN0eWxlcyksc31jb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O3ZvaWQgMD09PXRoaXMucmVuZGVyUm9vdCYmKHRoaXMucmVuZGVyUm9vdD10aGlzLmNyZWF0ZVJlbmRlclJvb3QoKSksdGhpcy5lbmFibGVVcGRhdGluZyghMCksbnVsbD09PSh0PXRoaXMuXyRFUyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0Q29ubmVjdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpfWVuYWJsZVVwZGF0aW5nKHQpe31kaXNjb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O251bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdERpc2Nvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodCxpLHMpe3RoaXMuXyRBSyh0LHMpfV8kRU8odCxpLHM9bCl7dmFyIGUscjtjb25zdCBoPXRoaXMuY29uc3RydWN0b3IuXyRFcCh0LHMpO2lmKHZvaWQgMCE9PWgmJiEwPT09cy5yZWZsZWN0KXtjb25zdCBuPShudWxsIT09KHI9bnVsbD09PShlPXMuY29udmVydGVyKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS50b0F0dHJpYnV0ZSkmJnZvaWQgMCE9PXI/cjpvLnRvQXR0cmlidXRlKShpLHMudHlwZSk7dGhpcy5fJEVsPXQsbnVsbD09bj90aGlzLnJlbW92ZUF0dHJpYnV0ZShoKTp0aGlzLnNldEF0dHJpYnV0ZShoLG4pLHRoaXMuXyRFbD1udWxsfX1fJEFLKHQsaSl7dmFyIHMsZTtjb25zdCByPXRoaXMuY29uc3RydWN0b3IsaD1yLl8kRXYuZ2V0KHQpO2lmKHZvaWQgMCE9PWgmJnRoaXMuXyRFbCE9PWgpe2NvbnN0IHQ9ci5nZXRQcm9wZXJ0eU9wdGlvbnMoaCksbj10LmNvbnZlcnRlcixsPW51bGwhPT0oZT1udWxsIT09KHM9bnVsbD09bj92b2lkIDA6bi5mcm9tQXR0cmlidXRlKSYmdm9pZCAwIT09cz9zOlwiZnVuY3Rpb25cIj09dHlwZW9mIG4/bjpudWxsKSYmdm9pZCAwIT09ZT9lOm8uZnJvbUF0dHJpYnV0ZTt0aGlzLl8kRWw9aCx0aGlzW2hdPWwoaSx0LnR5cGUpLHRoaXMuXyRFbD1udWxsfX1yZXF1ZXN0VXBkYXRlKHQsaSxzKXtsZXQgZT0hMDt2b2lkIDAhPT10JiYoKChzPXN8fHRoaXMuY29uc3RydWN0b3IuZ2V0UHJvcGVydHlPcHRpb25zKHQpKS5oYXNDaGFuZ2VkfHxuKSh0aGlzW3RdLGkpPyh0aGlzLl8kQUwuaGFzKHQpfHx0aGlzLl8kQUwuc2V0KHQsaSksITA9PT1zLnJlZmxlY3QmJnRoaXMuXyRFbCE9PXQmJih2b2lkIDA9PT10aGlzLl8kRUMmJih0aGlzLl8kRUM9bmV3IE1hcCksdGhpcy5fJEVDLnNldCh0LHMpKSk6ZT0hMSksIXRoaXMuaXNVcGRhdGVQZW5kaW5nJiZlJiYodGhpcy5fJEVfPXRoaXMuXyRFaigpKX1hc3luYyBfJEVqKCl7dGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITA7dHJ5e2F3YWl0IHRoaXMuXyRFX31jYXRjaCh0KXtQcm9taXNlLnJlamVjdCh0KX1jb25zdCB0PXRoaXMuc2NoZWR1bGVVcGRhdGUoKTtyZXR1cm4gbnVsbCE9dCYmYXdhaXQgdCwhdGhpcy5pc1VwZGF0ZVBlbmRpbmd9c2NoZWR1bGVVcGRhdGUoKXtyZXR1cm4gdGhpcy5wZXJmb3JtVXBkYXRlKCl9cGVyZm9ybVVwZGF0ZSgpe3ZhciB0O2lmKCF0aGlzLmlzVXBkYXRlUGVuZGluZylyZXR1cm47dGhpcy5oYXNVcGRhdGVkLHRoaXMuXyRFaSYmKHRoaXMuXyRFaS5mb3JFYWNoKCgodCxpKT0+dGhpc1tpXT10KSksdGhpcy5fJEVpPXZvaWQgMCk7bGV0IGk9ITE7Y29uc3Qgcz10aGlzLl8kQUw7dHJ5e2k9dGhpcy5zaG91bGRVcGRhdGUocyksaT8odGhpcy53aWxsVXBkYXRlKHMpLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZSl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKSx0aGlzLnVwZGF0ZShzKSk6dGhpcy5fJEVrKCl9Y2F0Y2godCl7dGhyb3cgaT0hMSx0aGlzLl8kRWsoKSx0fWkmJnRoaXMuXyRBRShzKX13aWxsVXBkYXRlKHQpe31fJEFFKHQpe3ZhciBpO251bGw9PT0oaT10aGlzLl8kRVMpfHx2b2lkIDA9PT1pfHxpLmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSksdGhpcy5oYXNVcGRhdGVkfHwodGhpcy5oYXNVcGRhdGVkPSEwLHRoaXMuZmlyc3RVcGRhdGVkKHQpKSx0aGlzLnVwZGF0ZWQodCl9XyRFaygpe3RoaXMuXyRBTD1uZXcgTWFwLHRoaXMuaXNVcGRhdGVQZW5kaW5nPSExfWdldCB1cGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLmdldFVwZGF0ZUNvbXBsZXRlKCl9Z2V0VXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5fJEVffXNob3VsZFVwZGF0ZSh0KXtyZXR1cm4hMH11cGRhdGUodCl7dm9pZCAwIT09dGhpcy5fJEVDJiYodGhpcy5fJEVDLmZvckVhY2goKCh0LGkpPT50aGlzLl8kRU8oaSx0aGlzW2ldLHQpKSksdGhpcy5fJEVDPXZvaWQgMCksdGhpcy5fJEVrKCl9dXBkYXRlZCh0KXt9Zmlyc3RVcGRhdGVkKHQpe319YS5maW5hbGl6ZWQ9ITAsYS5lbGVtZW50UHJvcGVydGllcz1uZXcgTWFwLGEuZWxlbWVudFN0eWxlcz1bXSxhLnNoYWRvd1Jvb3RPcHRpb25zPXttb2RlOlwib3BlblwifSxudWxsPT1ofHxoKHtSZWFjdGl2ZUVsZW1lbnQ6YX0pLChudWxsIT09KHM9Z2xvYmFsVGhpcy5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucykmJnZvaWQgMCE9PXM/czpnbG9iYWxUaGlzLnJlYWN0aXZlRWxlbWVudFZlcnNpb25zPVtdKS5wdXNoKFwiMS4zLjNcIik7ZXhwb3J0e2EgYXMgUmVhY3RpdmVFbGVtZW50LG8gYXMgZGVmYXVsdENvbnZlcnRlcixuIGFzIG5vdEVxdWFsfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0aXZlLWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbnZhciB0O2NvbnN0IGk9Z2xvYmFsVGhpcy50cnVzdGVkVHlwZXMscz1pP2kuY3JlYXRlUG9saWN5KFwibGl0LWh0bWxcIix7Y3JlYXRlSFRNTDp0PT50fSk6dm9pZCAwLGU9YGxpdCQkeyhNYXRoLnJhbmRvbSgpK1wiXCIpLnNsaWNlKDkpfSRgLG89XCI/XCIrZSxuPWA8JHtvfT5gLGw9ZG9jdW1lbnQsaD0odD1cIlwiKT0+bC5jcmVhdGVDb21tZW50KHQpLHI9dD0+bnVsbD09PXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LGQ9QXJyYXkuaXNBcnJheSx1PXQ9Pnt2YXIgaTtyZXR1cm4gZCh0KXx8XCJmdW5jdGlvblwiPT10eXBlb2YobnVsbD09PShpPXQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppW1N5bWJvbC5pdGVyYXRvcl0pfSxjPS88KD86KCEtLXxcXC9bXmEtekEtWl0pfChcXC8/W2EtekEtWl1bXj5cXHNdKil8KFxcLz8kKSkvZyx2PS8tLT4vZyxhPS8+L2csZj0vPnxbIFx0XFxuXGZcXHJdKD86KFteXFxzXCInPj0vXSspKFsgXHRcXG5cZlxccl0qPVsgXHRcXG5cZlxccl0qKD86W14gXHRcXG5cZlxcclwiJ2A8Pj1dfChcInwnKXwpKXwkKS9nLF89LycvZyxtPS9cIi9nLGc9L14oPzpzY3JpcHR8c3R5bGV8dGV4dGFyZWF8dGl0bGUpJC9pLHA9dD0+KGksLi4ucyk9Pih7XyRsaXRUeXBlJDp0LHN0cmluZ3M6aSx2YWx1ZXM6c30pLCQ9cCgxKSx5PXAoMiksYj1TeW1ib2wuZm9yKFwibGl0LW5vQ2hhbmdlXCIpLHc9U3ltYm9sLmZvcihcImxpdC1ub3RoaW5nXCIpLFQ9bmV3IFdlYWtNYXAseD0odCxpLHMpPT57dmFyIGUsbztjb25zdCBuPW51bGwhPT0oZT1udWxsPT1zP3ZvaWQgMDpzLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PWU/ZTppO2xldCBsPW4uXyRsaXRQYXJ0JDtpZih2b2lkIDA9PT1sKXtjb25zdCB0PW51bGwhPT0obz1udWxsPT1zP3ZvaWQgMDpzLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PW8/bzpudWxsO24uXyRsaXRQYXJ0JD1sPW5ldyBOKGkuaW5zZXJ0QmVmb3JlKGgoKSx0KSx0LHZvaWQgMCxudWxsIT1zP3M6e30pfXJldHVybiBsLl8kQUkodCksbH0sQT1sLmNyZWF0ZVRyZWVXYWxrZXIobCwxMjksbnVsbCwhMSksQz0odCxpKT0+e2NvbnN0IG89dC5sZW5ndGgtMSxsPVtdO2xldCBoLHI9Mj09PWk/XCI8c3ZnPlwiOlwiXCIsZD1jO2ZvcihsZXQgaT0wO2k8bztpKyspe2NvbnN0IHM9dFtpXTtsZXQgbyx1LHA9LTEsJD0wO2Zvcig7JDxzLmxlbmd0aCYmKGQubGFzdEluZGV4PSQsdT1kLmV4ZWMocyksbnVsbCE9PXUpOykkPWQubGFzdEluZGV4LGQ9PT1jP1wiIS0tXCI9PT11WzFdP2Q9djp2b2lkIDAhPT11WzFdP2Q9YTp2b2lkIDAhPT11WzJdPyhnLnRlc3QodVsyXSkmJihoPVJlZ0V4cChcIjwvXCIrdVsyXSxcImdcIikpLGQ9Zik6dm9pZCAwIT09dVszXSYmKGQ9Zik6ZD09PWY/XCI+XCI9PT11WzBdPyhkPW51bGwhPWg/aDpjLHA9LTEpOnZvaWQgMD09PXVbMV0/cD0tMjoocD1kLmxhc3RJbmRleC11WzJdLmxlbmd0aCxvPXVbMV0sZD12b2lkIDA9PT11WzNdP2Y6J1wiJz09PXVbM10/bTpfKTpkPT09bXx8ZD09PV8/ZD1mOmQ9PT12fHxkPT09YT9kPWM6KGQ9ZixoPXZvaWQgMCk7Y29uc3QgeT1kPT09ZiYmdFtpKzFdLnN0YXJ0c1dpdGgoXCIvPlwiKT9cIiBcIjpcIlwiO3IrPWQ9PT1jP3MrbjpwPj0wPyhsLnB1c2gobykscy5zbGljZSgwLHApK1wiJGxpdCRcIitzLnNsaWNlKHApK2UreSk6cytlKygtMj09PXA/KGwucHVzaCh2b2lkIDApLGkpOnkpfWNvbnN0IHU9cisodFtvXXx8XCI8Pz5cIikrKDI9PT1pP1wiPC9zdmc+XCI6XCJcIik7aWYoIUFycmF5LmlzQXJyYXkodCl8fCF0Lmhhc093blByb3BlcnR5KFwicmF3XCIpKXRocm93IEVycm9yKFwiaW52YWxpZCB0ZW1wbGF0ZSBzdHJpbmdzIGFycmF5XCIpO3JldHVyblt2b2lkIDAhPT1zP3MuY3JlYXRlSFRNTCh1KTp1LGxdfTtjbGFzcyBFe2NvbnN0cnVjdG9yKHtzdHJpbmdzOnQsXyRsaXRUeXBlJDpzfSxuKXtsZXQgbDt0aGlzLnBhcnRzPVtdO2xldCByPTAsZD0wO2NvbnN0IHU9dC5sZW5ndGgtMSxjPXRoaXMucGFydHMsW3YsYV09Qyh0LHMpO2lmKHRoaXMuZWw9RS5jcmVhdGVFbGVtZW50KHYsbiksQS5jdXJyZW50Tm9kZT10aGlzLmVsLmNvbnRlbnQsMj09PXMpe2NvbnN0IHQ9dGhpcy5lbC5jb250ZW50LGk9dC5maXJzdENoaWxkO2kucmVtb3ZlKCksdC5hcHBlbmQoLi4uaS5jaGlsZE5vZGVzKX1mb3IoO251bGwhPT0obD1BLm5leHROb2RlKCkpJiZjLmxlbmd0aDx1Oyl7aWYoMT09PWwubm9kZVR5cGUpe2lmKGwuaGFzQXR0cmlidXRlcygpKXtjb25zdCB0PVtdO2Zvcihjb25zdCBpIG9mIGwuZ2V0QXR0cmlidXRlTmFtZXMoKSlpZihpLmVuZHNXaXRoKFwiJGxpdCRcIil8fGkuc3RhcnRzV2l0aChlKSl7Y29uc3Qgcz1hW2QrK107aWYodC5wdXNoKGkpLHZvaWQgMCE9PXMpe2NvbnN0IHQ9bC5nZXRBdHRyaWJ1dGUocy50b0xvd2VyQ2FzZSgpK1wiJGxpdCRcIikuc3BsaXQoZSksaT0vKFsuP0BdKT8oLiopLy5leGVjKHMpO2MucHVzaCh7dHlwZToxLGluZGV4OnIsbmFtZTppWzJdLHN0cmluZ3M6dCxjdG9yOlwiLlwiPT09aVsxXT9NOlwiP1wiPT09aVsxXT9IOlwiQFwiPT09aVsxXT9JOlN9KX1lbHNlIGMucHVzaCh7dHlwZTo2LGluZGV4OnJ9KX1mb3IoY29uc3QgaSBvZiB0KWwucmVtb3ZlQXR0cmlidXRlKGkpfWlmKGcudGVzdChsLnRhZ05hbWUpKXtjb25zdCB0PWwudGV4dENvbnRlbnQuc3BsaXQoZSkscz10Lmxlbmd0aC0xO2lmKHM+MCl7bC50ZXh0Q29udGVudD1pP2kuZW1wdHlTY3JpcHQ6XCJcIjtmb3IobGV0IGk9MDtpPHM7aSsrKWwuYXBwZW5kKHRbaV0saCgpKSxBLm5leHROb2RlKCksYy5wdXNoKHt0eXBlOjIsaW5kZXg6KytyfSk7bC5hcHBlbmQodFtzXSxoKCkpfX19ZWxzZSBpZig4PT09bC5ub2RlVHlwZSlpZihsLmRhdGE9PT1vKWMucHVzaCh7dHlwZToyLGluZGV4OnJ9KTtlbHNle2xldCB0PS0xO2Zvcig7LTEhPT0odD1sLmRhdGEuaW5kZXhPZihlLHQrMSkpOyljLnB1c2goe3R5cGU6NyxpbmRleDpyfSksdCs9ZS5sZW5ndGgtMX1yKyt9fXN0YXRpYyBjcmVhdGVFbGVtZW50KHQsaSl7Y29uc3Qgcz1sLmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtyZXR1cm4gcy5pbm5lckhUTUw9dCxzfX1mdW5jdGlvbiBQKHQsaSxzPXQsZSl7dmFyIG8sbixsLGg7aWYoaT09PWIpcmV0dXJuIGk7bGV0IGQ9dm9pZCAwIT09ZT9udWxsPT09KG89cy5fJENsKXx8dm9pZCAwPT09bz92b2lkIDA6b1tlXTpzLl8kQ3U7Y29uc3QgdT1yKGkpP3ZvaWQgMDppLl8kbGl0RGlyZWN0aXZlJDtyZXR1cm4obnVsbD09ZD92b2lkIDA6ZC5jb25zdHJ1Y3RvcikhPT11JiYobnVsbD09PShuPW51bGw9PWQ/dm9pZCAwOmQuXyRBTyl8fHZvaWQgMD09PW58fG4uY2FsbChkLCExKSx2b2lkIDA9PT11P2Q9dm9pZCAwOihkPW5ldyB1KHQpLGQuXyRBVCh0LHMsZSkpLHZvaWQgMCE9PWU/KG51bGwhPT0obD0oaD1zKS5fJENsKSYmdm9pZCAwIT09bD9sOmguXyRDbD1bXSlbZV09ZDpzLl8kQ3U9ZCksdm9pZCAwIT09ZCYmKGk9UCh0LGQuXyRBUyh0LGkudmFsdWVzKSxkLGUpKSxpfWNsYXNzIFZ7Y29uc3RydWN0b3IodCxpKXt0aGlzLnY9W10sdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQUQ9dCx0aGlzLl8kQU09aX1nZXQgcGFyZW50Tm9kZSgpe3JldHVybiB0aGlzLl8kQU0ucGFyZW50Tm9kZX1nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1wKHQpe3ZhciBpO2NvbnN0e2VsOntjb250ZW50OnN9LHBhcnRzOmV9PXRoaXMuXyRBRCxvPShudWxsIT09KGk9bnVsbD09dD92b2lkIDA6dC5jcmVhdGlvblNjb3BlKSYmdm9pZCAwIT09aT9pOmwpLmltcG9ydE5vZGUocywhMCk7QS5jdXJyZW50Tm9kZT1vO2xldCBuPUEubmV4dE5vZGUoKSxoPTAscj0wLGQ9ZVswXTtmb3IoO3ZvaWQgMCE9PWQ7KXtpZihoPT09ZC5pbmRleCl7bGV0IGk7Mj09PWQudHlwZT9pPW5ldyBOKG4sbi5uZXh0U2libGluZyx0aGlzLHQpOjE9PT1kLnR5cGU/aT1uZXcgZC5jdG9yKG4sZC5uYW1lLGQuc3RyaW5ncyx0aGlzLHQpOjY9PT1kLnR5cGUmJihpPW5ldyBMKG4sdGhpcyx0KSksdGhpcy52LnB1c2goaSksZD1lWysrcl19aCE9PShudWxsPT1kP3ZvaWQgMDpkLmluZGV4KSYmKG49QS5uZXh0Tm9kZSgpLGgrKyl9cmV0dXJuIG99bSh0KXtsZXQgaT0wO2Zvcihjb25zdCBzIG9mIHRoaXMudil2b2lkIDAhPT1zJiYodm9pZCAwIT09cy5zdHJpbmdzPyhzLl8kQUkodCxzLGkpLGkrPXMuc3RyaW5ncy5sZW5ndGgtMik6cy5fJEFJKHRbaV0pKSxpKyt9fWNsYXNzIE57Y29uc3RydWN0b3IodCxpLHMsZSl7dmFyIG87dGhpcy50eXBlPTIsdGhpcy5fJEFIPXcsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQUE9dCx0aGlzLl8kQUI9aSx0aGlzLl8kQU09cyx0aGlzLm9wdGlvbnM9ZSx0aGlzLl8kQ2c9bnVsbD09PShvPW51bGw9PWU/dm9pZCAwOmUuaXNDb25uZWN0ZWQpfHx2b2lkIDA9PT1vfHxvfWdldCBfJEFVKCl7dmFyIHQsaTtyZXR1cm4gbnVsbCE9PShpPW51bGw9PT0odD10aGlzLl8kQU0pfHx2b2lkIDA9PT10P3ZvaWQgMDp0Ll8kQVUpJiZ2b2lkIDAhPT1pP2k6dGhpcy5fJENnfWdldCBwYXJlbnROb2RlKCl7bGV0IHQ9dGhpcy5fJEFBLnBhcmVudE5vZGU7Y29uc3QgaT10aGlzLl8kQU07cmV0dXJuIHZvaWQgMCE9PWkmJjExPT09dC5ub2RlVHlwZSYmKHQ9aS5wYXJlbnROb2RlKSx0fWdldCBzdGFydE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFBfWdldCBlbmROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQn1fJEFJKHQsaT10aGlzKXt0PVAodGhpcyx0LGkpLHIodCk/dD09PXd8fG51bGw9PXR8fFwiXCI9PT10Pyh0aGlzLl8kQUghPT13JiZ0aGlzLl8kQVIoKSx0aGlzLl8kQUg9dyk6dCE9PXRoaXMuXyRBSCYmdCE9PWImJnRoaXMuJCh0KTp2b2lkIDAhPT10Ll8kbGl0VHlwZSQ/dGhpcy5UKHQpOnZvaWQgMCE9PXQubm9kZVR5cGU/dGhpcy5rKHQpOnUodCk/dGhpcy5TKHQpOnRoaXMuJCh0KX1NKHQsaT10aGlzLl8kQUIpe3JldHVybiB0aGlzLl8kQUEucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCxpKX1rKHQpe3RoaXMuXyRBSCE9PXQmJih0aGlzLl8kQVIoKSx0aGlzLl8kQUg9dGhpcy5NKHQpKX0kKHQpe3RoaXMuXyRBSCE9PXcmJnIodGhpcy5fJEFIKT90aGlzLl8kQUEubmV4dFNpYmxpbmcuZGF0YT10OnRoaXMuayhsLmNyZWF0ZVRleHROb2RlKHQpKSx0aGlzLl8kQUg9dH1UKHQpe3ZhciBpO2NvbnN0e3ZhbHVlczpzLF8kbGl0VHlwZSQ6ZX09dCxvPVwibnVtYmVyXCI9PXR5cGVvZiBlP3RoaXMuXyRBQyh0KToodm9pZCAwPT09ZS5lbCYmKGUuZWw9RS5jcmVhdGVFbGVtZW50KGUuaCx0aGlzLm9wdGlvbnMpKSxlKTtpZigobnVsbD09PShpPXRoaXMuXyRBSCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuXyRBRCk9PT1vKXRoaXMuXyRBSC5tKHMpO2Vsc2V7Y29uc3QgdD1uZXcgVihvLHRoaXMpLGk9dC5wKHRoaXMub3B0aW9ucyk7dC5tKHMpLHRoaXMuayhpKSx0aGlzLl8kQUg9dH19XyRBQyh0KXtsZXQgaT1ULmdldCh0LnN0cmluZ3MpO3JldHVybiB2b2lkIDA9PT1pJiZULnNldCh0LnN0cmluZ3MsaT1uZXcgRSh0KSksaX1TKHQpe2QodGhpcy5fJEFIKXx8KHRoaXMuXyRBSD1bXSx0aGlzLl8kQVIoKSk7Y29uc3QgaT10aGlzLl8kQUg7bGV0IHMsZT0wO2Zvcihjb25zdCBvIG9mIHQpZT09PWkubGVuZ3RoP2kucHVzaChzPW5ldyBOKHRoaXMuTShoKCkpLHRoaXMuTShoKCkpLHRoaXMsdGhpcy5vcHRpb25zKSk6cz1pW2VdLHMuXyRBSShvKSxlKys7ZTxpLmxlbmd0aCYmKHRoaXMuXyRBUihzJiZzLl8kQUIubmV4dFNpYmxpbmcsZSksaS5sZW5ndGg9ZSl9XyRBUih0PXRoaXMuXyRBQS5uZXh0U2libGluZyxpKXt2YXIgcztmb3IobnVsbD09PShzPXRoaXMuXyRBUCl8fHZvaWQgMD09PXN8fHMuY2FsbCh0aGlzLCExLCEwLGkpO3QmJnQhPT10aGlzLl8kQUI7KXtjb25zdCBpPXQubmV4dFNpYmxpbmc7dC5yZW1vdmUoKSx0PWl9fXNldENvbm5lY3RlZCh0KXt2YXIgaTt2b2lkIDA9PT10aGlzLl8kQU0mJih0aGlzLl8kQ2c9dCxudWxsPT09KGk9dGhpcy5fJEFQKXx8dm9pZCAwPT09aXx8aS5jYWxsKHRoaXMsdCkpfX1jbGFzcyBTe2NvbnN0cnVjdG9yKHQsaSxzLGUsbyl7dGhpcy50eXBlPTEsdGhpcy5fJEFIPXcsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLmVsZW1lbnQ9dCx0aGlzLm5hbWU9aSx0aGlzLl8kQU09ZSx0aGlzLm9wdGlvbnM9byxzLmxlbmd0aD4yfHxcIlwiIT09c1swXXx8XCJcIiE9PXNbMV0/KHRoaXMuXyRBSD1BcnJheShzLmxlbmd0aC0xKS5maWxsKG5ldyBTdHJpbmcpLHRoaXMuc3RyaW5ncz1zKTp0aGlzLl8kQUg9d31nZXQgdGFnTmFtZSgpe3JldHVybiB0aGlzLmVsZW1lbnQudGFnTmFtZX1nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFJKHQsaT10aGlzLHMsZSl7Y29uc3Qgbz10aGlzLnN0cmluZ3M7bGV0IG49ITE7aWYodm9pZCAwPT09byl0PVAodGhpcyx0LGksMCksbj0hcih0KXx8dCE9PXRoaXMuXyRBSCYmdCE9PWIsbiYmKHRoaXMuXyRBSD10KTtlbHNle2NvbnN0IGU9dDtsZXQgbCxoO2Zvcih0PW9bMF0sbD0wO2w8by5sZW5ndGgtMTtsKyspaD1QKHRoaXMsZVtzK2xdLGksbCksaD09PWImJihoPXRoaXMuXyRBSFtsXSksbnx8KG49IXIoaCl8fGghPT10aGlzLl8kQUhbbF0pLGg9PT13P3Q9dzp0IT09dyYmKHQrPShudWxsIT1oP2g6XCJcIikrb1tsKzFdKSx0aGlzLl8kQUhbbF09aH1uJiYhZSYmdGhpcy5DKHQpfUModCl7dD09PXc/dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpOnRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLG51bGwhPXQ/dDpcIlwiKX19Y2xhc3MgTSBleHRlbmRzIFN7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMudHlwZT0zfUModCl7dGhpcy5lbGVtZW50W3RoaXMubmFtZV09dD09PXc/dm9pZCAwOnR9fWNvbnN0IGs9aT9pLmVtcHR5U2NyaXB0OlwiXCI7Y2xhc3MgSCBleHRlbmRzIFN7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMudHlwZT00fUModCl7dCYmdCE9PXc/dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsayk6dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpfX1jbGFzcyBJIGV4dGVuZHMgU3tjb25zdHJ1Y3Rvcih0LGkscyxlLG8pe3N1cGVyKHQsaSxzLGUsbyksdGhpcy50eXBlPTV9XyRBSSh0LGk9dGhpcyl7dmFyIHM7aWYoKHQ9bnVsbCE9PShzPVAodGhpcyx0LGksMCkpJiZ2b2lkIDAhPT1zP3M6dyk9PT1iKXJldHVybjtjb25zdCBlPXRoaXMuXyRBSCxvPXQ9PT13JiZlIT09d3x8dC5jYXB0dXJlIT09ZS5jYXB0dXJlfHx0Lm9uY2UhPT1lLm9uY2V8fHQucGFzc2l2ZSE9PWUucGFzc2l2ZSxuPXQhPT13JiYoZT09PXd8fG8pO28mJnRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMubmFtZSx0aGlzLGUpLG4mJnRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMubmFtZSx0aGlzLHQpLHRoaXMuXyRBSD10fWhhbmRsZUV2ZW50KHQpe3ZhciBpLHM7XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fJEFIP3RoaXMuXyRBSC5jYWxsKG51bGwhPT0ocz1udWxsPT09KGk9dGhpcy5vcHRpb25zKXx8dm9pZCAwPT09aT92b2lkIDA6aS5ob3N0KSYmdm9pZCAwIT09cz9zOnRoaXMuZWxlbWVudCx0KTp0aGlzLl8kQUguaGFuZGxlRXZlbnQodCl9fWNsYXNzIEx7Y29uc3RydWN0b3IodCxpLHMpe3RoaXMuZWxlbWVudD10LHRoaXMudHlwZT02LHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFNPWksdGhpcy5vcHRpb25zPXN9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBSSh0KXtQKHRoaXMsdCl9fWNvbnN0IFI9e0w6XCIkbGl0JFwiLFA6ZSxWOm8sSToxLE46QyxSOlYsajp1LEQ6UCxIOk4sRjpTLE86SCxXOkksQjpNLFo6TH0sej13aW5kb3cubGl0SHRtbFBvbHlmaWxsU3VwcG9ydDtudWxsPT16fHx6KEUsTiksKG51bGwhPT0odD1nbG9iYWxUaGlzLmxpdEh0bWxWZXJzaW9ucykmJnZvaWQgMCE9PXQ/dDpnbG9iYWxUaGlzLmxpdEh0bWxWZXJzaW9ucz1bXSkucHVzaChcIjIuMi42XCIpO2V4cG9ydHtSIGFzIF8kTEgsJCBhcyBodG1sLGIgYXMgbm9DaGFuZ2UsdyBhcyBub3RoaW5nLHggYXMgcmVuZGVyLHkgYXMgc3ZnfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1odG1sLmpzLm1hcFxuIiwiaW1wb3J0e1JlYWN0aXZlRWxlbWVudCBhcyB0fWZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtpbXBvcnR7cmVuZGVyIGFzIGUsbm9DaGFuZ2UgYXMgaX1mcm9tXCJsaXQtaHRtbFwiO2V4cG9ydCpmcm9tXCJsaXQtaHRtbFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIGwsbztjb25zdCByPXQ7Y2xhc3MgcyBleHRlbmRzIHR7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMucmVuZGVyT3B0aW9ucz17aG9zdDp0aGlzfSx0aGlzLl8kRG89dm9pZCAwfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdCxlO2NvbnN0IGk9c3VwZXIuY3JlYXRlUmVuZGVyUm9vdCgpO3JldHVybiBudWxsIT09KHQ9KGU9dGhpcy5yZW5kZXJPcHRpb25zKS5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT10fHwoZS5yZW5kZXJCZWZvcmU9aS5maXJzdENoaWxkKSxpfXVwZGF0ZSh0KXtjb25zdCBpPXRoaXMucmVuZGVyKCk7dGhpcy5oYXNVcGRhdGVkfHwodGhpcy5yZW5kZXJPcHRpb25zLmlzQ29ubmVjdGVkPXRoaXMuaXNDb25uZWN0ZWQpLHN1cGVyLnVwZGF0ZSh0KSx0aGlzLl8kRG89ZShpLHRoaXMucmVuZGVyUm9vdCx0aGlzLnJlbmRlck9wdGlvbnMpfWNvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7c3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKSxudWxsPT09KHQ9dGhpcy5fJERvKXx8dm9pZCAwPT09dHx8dC5zZXRDb25uZWN0ZWQoITApfWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7c3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKSxudWxsPT09KHQ9dGhpcy5fJERvKXx8dm9pZCAwPT09dHx8dC5zZXRDb25uZWN0ZWQoITEpfXJlbmRlcigpe3JldHVybiBpfX1zLmZpbmFsaXplZD0hMCxzLl8kbGl0RWxlbWVudCQ9ITAsbnVsbD09PShsPWdsb2JhbFRoaXMubGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0KXx8dm9pZCAwPT09bHx8bC5jYWxsKGdsb2JhbFRoaXMse0xpdEVsZW1lbnQ6c30pO2NvbnN0IG49Z2xvYmFsVGhpcy5saXRFbGVtZW50UG9seWZpbGxTdXBwb3J0O251bGw9PW58fG4oe0xpdEVsZW1lbnQ6c30pO2NvbnN0IGg9e18kQUs6KHQsZSxpKT0+e3QuXyRBSyhlLGkpfSxfJEFMOnQ9PnQuXyRBTH07KG51bGwhPT0obz1nbG9iYWxUaGlzLmxpdEVsZW1lbnRWZXJzaW9ucykmJnZvaWQgMCE9PW8/bzpnbG9iYWxUaGlzLmxpdEVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjMuMi4xXCIpO2V4cG9ydHtzIGFzIExpdEVsZW1lbnQsciBhcyBVcGRhdGluZ0VsZW1lbnQsaCBhcyBfJExFfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCBuPW49PmU9PlwiZnVuY3Rpb25cIj09dHlwZW9mIGU/KChuLGUpPT4od2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShuLGUpLGUpKShuLGUpOigobixlKT0+e2NvbnN0e2tpbmQ6dCxlbGVtZW50czppfT1lO3JldHVybntraW5kOnQsZWxlbWVudHM6aSxmaW5pc2hlcihlKXt3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKG4sZSl9fX0pKG4sZSk7ZXhwb3J0e24gYXMgY3VzdG9tRWxlbWVudH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jdXN0b20tZWxlbWVudC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgaT0oaSxlKT0+XCJtZXRob2RcIj09PWUua2luZCYmZS5kZXNjcmlwdG9yJiYhKFwidmFsdWVcImluIGUuZGVzY3JpcHRvcik/ey4uLmUsZmluaXNoZXIobil7bi5jcmVhdGVQcm9wZXJ0eShlLmtleSxpKX19OntraW5kOlwiZmllbGRcIixrZXk6U3ltYm9sKCkscGxhY2VtZW50Olwib3duXCIsZGVzY3JpcHRvcjp7fSxvcmlnaW5hbEtleTplLmtleSxpbml0aWFsaXplcigpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGUuaW5pdGlhbGl6ZXImJih0aGlzW2Uua2V5XT1lLmluaXRpYWxpemVyLmNhbGwodGhpcykpfSxmaW5pc2hlcihuKXtuLmNyZWF0ZVByb3BlcnR5KGUua2V5LGkpfX07ZnVuY3Rpb24gZShlKXtyZXR1cm4obix0KT0+dm9pZCAwIT09dD8oKGksZSxuKT0+e2UuY29uc3RydWN0b3IuY3JlYXRlUHJvcGVydHkobixpKX0pKGUsbix0KTppKGUsbil9ZXhwb3J0e2UgYXMgcHJvcGVydHl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGVydHkuanMubWFwXG4iLCJpbXBvcnR7cHJvcGVydHkgYXMgcn1mcm9tXCIuL3Byb3BlcnR5LmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9mdW5jdGlvbiB0KHQpe3JldHVybiByKHsuLi50LHN0YXRlOiEwfSl9ZXhwb3J0e3QgYXMgc3RhdGV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGUuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IGU9KGUsdCxvKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG8sZSl9LHQ9KGUsdCk9Pih7a2luZDpcIm1ldGhvZFwiLHBsYWNlbWVudDpcInByb3RvdHlwZVwiLGtleTp0LmtleSxkZXNjcmlwdG9yOmV9KSxvPSh7ZmluaXNoZXI6ZSxkZXNjcmlwdG9yOnR9KT0+KG8sbik9Pnt2YXIgcjtpZih2b2lkIDA9PT1uKXtjb25zdCBuPW51bGwhPT0ocj1vLm9yaWdpbmFsS2V5KSYmdm9pZCAwIT09cj9yOm8ua2V5LGk9bnVsbCE9dD97a2luZDpcIm1ldGhvZFwiLHBsYWNlbWVudDpcInByb3RvdHlwZVwiLGtleTpuLGRlc2NyaXB0b3I6dChvLmtleSl9OnsuLi5vLGtleTpufTtyZXR1cm4gbnVsbCE9ZSYmKGkuZmluaXNoZXI9ZnVuY3Rpb24odCl7ZSh0LG4pfSksaX17Y29uc3Qgcj1vLmNvbnN0cnVjdG9yO3ZvaWQgMCE9PXQmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLG4sdChuKSksbnVsbD09ZXx8ZShyLG4pfX07ZXhwb3J0e28gYXMgZGVjb3JhdGVQcm9wZXJ0eSxlIGFzIGxlZ2FjeVByb3RvdHlwZU1ldGhvZCx0IGFzIHN0YW5kYXJkUHJvdG90eXBlTWV0aG9kfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwXG4iLCJpbXBvcnR7ZGVjb3JhdGVQcm9wZXJ0eSBhcyByfWZyb21cIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovZnVuY3Rpb24gZShlKXtyZXR1cm4gcih7ZmluaXNoZXI6KHIsdCk9PntPYmplY3QuYXNzaWduKHIucHJvdG90eXBlW3RdLGUpfX0pfWV4cG9ydHtlIGFzIGV2ZW50T3B0aW9uc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudC1vcHRpb25zLmpzLm1hcFxuIiwiaW1wb3J0e2RlY29yYXRlUHJvcGVydHkgYXMgb31mcm9tXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2Z1bmN0aW9uIGkoaSxuKXtyZXR1cm4gbyh7ZGVzY3JpcHRvcjpvPT57Y29uc3QgdD17Z2V0KCl7dmFyIG8sbjtyZXR1cm4gbnVsbCE9PShuPW51bGw9PT0obz10aGlzLnJlbmRlclJvb3QpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnF1ZXJ5U2VsZWN0b3IoaSkpJiZ2b2lkIDAhPT1uP246bnVsbH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9O2lmKG4pe2NvbnN0IG49XCJzeW1ib2xcIj09dHlwZW9mIG8/U3ltYm9sKCk6XCJfX1wiK287dC5nZXQ9ZnVuY3Rpb24oKXt2YXIgbyx0O3JldHVybiB2b2lkIDA9PT10aGlzW25dJiYodGhpc1tuXT1udWxsIT09KHQ9bnVsbD09PShvPXRoaXMucmVuZGVyUm9vdCl8fHZvaWQgMD09PW8/dm9pZCAwOm8ucXVlcnlTZWxlY3RvcihpKSkmJnZvaWQgMCE9PXQ/dDpudWxsKSx0aGlzW25dfX1yZXR1cm4gdH19KX1leHBvcnR7aSBhcyBxdWVyeX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeS5qcy5tYXBcbiIsImltcG9ydHtkZWNvcmF0ZVByb3BlcnR5IGFzIG99ZnJvbVwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgbjtjb25zdCBlPW51bGwhPShudWxsPT09KG49d2luZG93LkhUTUxTbG90RWxlbWVudCl8fHZvaWQgMD09PW4/dm9pZCAwOm4ucHJvdG90eXBlLmFzc2lnbmVkRWxlbWVudHMpPyhvLG4pPT5vLmFzc2lnbmVkRWxlbWVudHMobik6KG8sbik9Pm8uYXNzaWduZWROb2RlcyhuKS5maWx0ZXIoKG89Pm8ubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSkpO2Z1bmN0aW9uIGwobil7Y29uc3R7c2xvdDpsLHNlbGVjdG9yOnR9PW51bGwhPW4/bjp7fTtyZXR1cm4gbyh7ZGVzY3JpcHRvcjpvPT4oe2dldCgpe3ZhciBvO2NvbnN0IHI9XCJzbG90XCIrKGw/YFtuYW1lPSR7bH1dYDpcIjpub3QoW25hbWVdKVwiKSxpPW51bGw9PT0obz10aGlzLnJlbmRlclJvb3QpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnF1ZXJ5U2VsZWN0b3Iocikscz1udWxsIT1pP2UoaSxuKTpbXTtyZXR1cm4gdD9zLmZpbHRlcigobz0+by5tYXRjaGVzKHQpKSk6c30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KX0pfWV4cG9ydHtsIGFzIHF1ZXJ5QXNzaWduZWRFbGVtZW50c307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeS1hc3NpZ25lZC1lbGVtZW50cy5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD17QVRUUklCVVRFOjEsQ0hJTEQ6MixQUk9QRVJUWTozLEJPT0xFQU5fQVRUUklCVVRFOjQsRVZFTlQ6NSxFTEVNRU5UOjZ9LGU9dD0+KC4uLmUpPT4oe18kbGl0RGlyZWN0aXZlJDp0LHZhbHVlczplfSk7Y2xhc3MgaXtjb25zdHJ1Y3Rvcih0KXt9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBVCh0LGUsaSl7dGhpcy5fJEN0PXQsdGhpcy5fJEFNPWUsdGhpcy5fJENpPWl9XyRBUyh0LGUpe3JldHVybiB0aGlzLnVwZGF0ZSh0LGUpfXVwZGF0ZSh0LGUpe3JldHVybiB0aGlzLnJlbmRlciguLi5lKX19ZXhwb3J0e2kgYXMgRGlyZWN0aXZlLHQgYXMgUGFydFR5cGUsZSBhcyBkaXJlY3RpdmV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlLmpzLm1hcFxuIiwiaW1wb3J0e18kTEggYXMgb31mcm9tXCIuL2xpdC1odG1sLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdHtIOml9PW8sdD1vPT5udWxsPT09b3x8XCJvYmplY3RcIiE9dHlwZW9mIG8mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG8sbj17SFRNTDoxLFNWRzoyfSx2PShvLGkpPT57dmFyIHQsbjtyZXR1cm4gdm9pZCAwPT09aT92b2lkIDAhPT0obnVsbD09PSh0PW8pfHx2b2lkIDA9PT10P3ZvaWQgMDp0Ll8kbGl0VHlwZSQpOihudWxsPT09KG49byl8fHZvaWQgMD09PW4/dm9pZCAwOm4uXyRsaXRUeXBlJCk9PT1pfSxsPW89Pnt2YXIgaTtyZXR1cm4gdm9pZCAwIT09KG51bGw9PT0oaT1vKXx8dm9pZCAwPT09aT92b2lkIDA6aS5fJGxpdERpcmVjdGl2ZSQpfSxkPW89Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPW8pfHx2b2lkIDA9PT1pP3ZvaWQgMDppLl8kbGl0RGlyZWN0aXZlJH0scj1vPT52b2lkIDA9PT1vLnN0cmluZ3MsZT0oKT0+ZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSx1PShvLHQsbik9Pnt2YXIgdjtjb25zdCBsPW8uXyRBQS5wYXJlbnROb2RlLGQ9dm9pZCAwPT09dD9vLl8kQUI6dC5fJEFBO2lmKHZvaWQgMD09PW4pe2NvbnN0IHQ9bC5pbnNlcnRCZWZvcmUoZSgpLGQpLHY9bC5pbnNlcnRCZWZvcmUoZSgpLGQpO249bmV3IGkodCx2LG8sby5vcHRpb25zKX1lbHNle2NvbnN0IGk9bi5fJEFCLm5leHRTaWJsaW5nLHQ9bi5fJEFNLHI9dCE9PW87aWYocil7bGV0IGk7bnVsbD09PSh2PW4uXyRBUSl8fHZvaWQgMD09PXZ8fHYuY2FsbChuLG8pLG4uXyRBTT1vLHZvaWQgMCE9PW4uXyRBUCYmKGk9by5fJEFVKSE9PXQuXyRBVSYmbi5fJEFQKGkpfWlmKGkhPT1kfHxyKXtsZXQgbz1uLl8kQUE7Zm9yKDtvIT09aTspe2NvbnN0IGk9by5uZXh0U2libGluZztsLmluc2VydEJlZm9yZShvLGQpLG89aX19fXJldHVybiBufSxjPShvLGksdD1vKT0+KG8uXyRBSShpLHQpLG8pLGY9e30scz0obyxpPWYpPT5vLl8kQUg9aSxhPW89Pm8uXyRBSCxtPW89Pnt2YXIgaTtudWxsPT09KGk9by5fJEFQKXx8dm9pZCAwPT09aXx8aS5jYWxsKG8sITEsITApO2xldCB0PW8uXyRBQTtjb25zdCBuPW8uXyRBQi5uZXh0U2libGluZztmb3IoO3QhPT1uOyl7Y29uc3Qgbz10Lm5leHRTaWJsaW5nO3QucmVtb3ZlKCksdD1vfX0scD1vPT57by5fJEFSKCl9O2V4cG9ydHtuIGFzIFRlbXBsYXRlUmVzdWx0VHlwZSxwIGFzIGNsZWFyUGFydCxhIGFzIGdldENvbW1pdHRlZFZhbHVlLGQgYXMgZ2V0RGlyZWN0aXZlQ2xhc3MsdSBhcyBpbnNlcnRQYXJ0LGwgYXMgaXNEaXJlY3RpdmVSZXN1bHQsdCBhcyBpc1ByaW1pdGl2ZSxyIGFzIGlzU2luZ2xlRXhwcmVzc2lvbix2IGFzIGlzVGVtcGxhdGVSZXN1bHQsbSBhcyByZW1vdmVQYXJ0LGMgYXMgc2V0Q2hpbGRQYXJ0VmFsdWUscyBhcyBzZXRDb21taXR0ZWRWYWx1ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJlY3RpdmUtaGVscGVycy5qcy5tYXBcbiIsImltcG9ydHtub0NoYW5nZSBhcyBlfWZyb21cIi4uL2xpdC1odG1sLmpzXCI7aW1wb3J0e2RpcmVjdGl2ZSBhcyBzLERpcmVjdGl2ZSBhcyB0LFBhcnRUeXBlIGFzIHJ9ZnJvbVwiLi4vZGlyZWN0aXZlLmpzXCI7aW1wb3J0e2dldENvbW1pdHRlZFZhbHVlIGFzIGwsc2V0Q2hpbGRQYXJ0VmFsdWUgYXMgbyxpbnNlcnRQYXJ0IGFzIGkscmVtb3ZlUGFydCBhcyBuLHNldENvbW1pdHRlZFZhbHVlIGFzIGZ9ZnJvbVwiLi4vZGlyZWN0aXZlLWhlbHBlcnMuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdT0oZSxzLHQpPT57Y29uc3Qgcj1uZXcgTWFwO2ZvcihsZXQgbD1zO2w8PXQ7bCsrKXIuc2V0KGVbbF0sbCk7cmV0dXJuIHJ9LGM9cyhjbGFzcyBleHRlbmRzIHR7Y29uc3RydWN0b3IoZSl7aWYoc3VwZXIoZSksZS50eXBlIT09ci5DSElMRCl0aHJvdyBFcnJvcihcInJlcGVhdCgpIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGV4dCBleHByZXNzaW9uc1wiKX1kdChlLHMsdCl7bGV0IHI7dm9pZCAwPT09dD90PXM6dm9pZCAwIT09cyYmKHI9cyk7Y29uc3QgbD1bXSxvPVtdO2xldCBpPTA7Zm9yKGNvbnN0IHMgb2YgZSlsW2ldPXI/cihzLGkpOmksb1tpXT10KHMsaSksaSsrO3JldHVybnt2YWx1ZXM6byxrZXlzOmx9fXJlbmRlcihlLHMsdCl7cmV0dXJuIHRoaXMuZHQoZSxzLHQpLnZhbHVlc311cGRhdGUocyxbdCxyLGNdKXt2YXIgZDtjb25zdCBhPWwocykse3ZhbHVlczpwLGtleXM6dn09dGhpcy5kdCh0LHIsYyk7aWYoIUFycmF5LmlzQXJyYXkoYSkpcmV0dXJuIHRoaXMudXQ9dixwO2NvbnN0IGg9bnVsbCE9PShkPXRoaXMudXQpJiZ2b2lkIDAhPT1kP2Q6dGhpcy51dD1bXSxtPVtdO2xldCB5LHgsaj0wLGs9YS5sZW5ndGgtMSx3PTAsQT1wLmxlbmd0aC0xO2Zvcig7ajw9ayYmdzw9QTspaWYobnVsbD09PWFbal0paisrO2Vsc2UgaWYobnVsbD09PWFba10pay0tO2Vsc2UgaWYoaFtqXT09PXZbd10pbVt3XT1vKGFbal0scFt3XSksaisrLHcrKztlbHNlIGlmKGhba109PT12W0FdKW1bQV09byhhW2tdLHBbQV0pLGstLSxBLS07ZWxzZSBpZihoW2pdPT09dltBXSltW0FdPW8oYVtqXSxwW0FdKSxpKHMsbVtBKzFdLGFbal0pLGorKyxBLS07ZWxzZSBpZihoW2tdPT09dlt3XSltW3ddPW8oYVtrXSxwW3ddKSxpKHMsYVtqXSxhW2tdKSxrLS0sdysrO2Vsc2UgaWYodm9pZCAwPT09eSYmKHk9dSh2LHcsQSkseD11KGgsaixrKSkseS5oYXMoaFtqXSkpaWYoeS5oYXMoaFtrXSkpe2NvbnN0IGU9eC5nZXQodlt3XSksdD12b2lkIDAhPT1lP2FbZV06bnVsbDtpZihudWxsPT09dCl7Y29uc3QgZT1pKHMsYVtqXSk7byhlLHBbd10pLG1bd109ZX1lbHNlIG1bd109byh0LHBbd10pLGkocyxhW2pdLHQpLGFbZV09bnVsbDt3Kyt9ZWxzZSBuKGFba10pLGstLTtlbHNlIG4oYVtqXSksaisrO2Zvcig7dzw9QTspe2NvbnN0IGU9aShzLG1bQSsxXSk7byhlLHBbd10pLG1bdysrXT1lfWZvcig7ajw9azspe2NvbnN0IGU9YVtqKytdO251bGwhPT1lJiZuKGUpfXJldHVybiB0aGlzLnV0PXYsZihzLG0pLGV9fSk7ZXhwb3J0e2MgYXMgcmVwZWF0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGVhdC5qcy5tYXBcbiIsImV4cG9ydCB0eXBlIFBvaW50ID0gW251bWJlciwgbnVtYmVyXTtcblxuZXhwb3J0IGNvbnN0IGFkZF9wID0gKGE6IFBvaW50LCBiOiBQb2ludCk6IFBvaW50ID0+IFthWzBdICsgYlswXSwgYVsxXSArIGJbMV1dO1xuZXhwb3J0IGNvbnN0IGFkZF9jID0gKGE6IFBvaW50LCBjOiBudW1iZXIpOiBQb2ludCA9PiBhZGRfcChhLCBbYywgY10pO1xuXG5leHBvcnQgY29uc3Qgc3ViX3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogUG9pbnQgPT4gW2FbMF0gLSBiWzBdLCBhWzFdIC0gYlsxXV07XG5cbmV4cG9ydCBjb25zdCBtdWxfYyA9IChhOiBQb2ludCwgYzogbnVtYmVyKTogUG9pbnQgPT4gW2FbMF0gKiBjLCBhWzFdICogY107XG5leHBvcnQgY29uc3QgbXVsX3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogUG9pbnQgPT4gW2FbMF0gKiBiWzBdLCBhWzFdICogYlsxXV07XG5cbmV4cG9ydCBjb25zdCBkaXZfcCA9IChhOiBQb2ludCwgYjogUG9pbnQpOiBQb2ludCA9PiBbYVswXSAvIGJbMF0sIGFbMV0gLyBiWzFdXTtcbmV4cG9ydCBjb25zdCBkaXZfYyA9IChhOiBQb2ludCwgYzogbnVtYmVyKTogUG9pbnQgPT4gW2FbMF0gLyBjLCBhWzFdIC8gY107XG5cbmV4cG9ydCBjb25zdCBndF9wID0gKGE6IFBvaW50LCBiOiBQb2ludCk6IGJvb2xlYW4gPT4gYVswXSA+IGJbMF0gJiYgYVsxXSA+IGJbMV07XG5leHBvcnQgY29uc3QgbHRfcCA9IChhOiBQb2ludCwgYjogUG9pbnQpOiBib29sZWFuID0+IGFbMF0gPCBiWzBdICYmIGFbMV0gPCBiWzFdO1xuXG5leHBvcnQgY29uc3QgbWF4X3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogUG9pbnQgPT4gW01hdGgubWF4KGFbMF0sIGJbMF0pLCBNYXRoLm1heChhWzFdLCBiWzFdKV07XG5leHBvcnQgY29uc3QgbWluX3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogUG9pbnQgPT4gW01hdGgubWluKGFbMF0sIGJbMF0pLCBNYXRoLm1pbihhWzFdLCBiWzFdKV07XG5leHBvcnQgY29uc3QgY2xhbXBfcCA9IChtaW46IFBvaW50LCBtYXg6IFBvaW50LCBwOiBQb2ludCk6IFBvaW50ID0+IG1heF9wKG1pbiwgbWluX3AobWF4LCBwKSk7XG5leHBvcnQgY29uc3QgYWJzX3AgPSAoYTogUG9pbnQpOiBQb2ludCA9PiBbTWF0aC5hYnMoYVswXSksIE1hdGguYWJzKGFbMV0pXTtcblxuZXhwb3J0IGNvbnN0IGVxX3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogYm9vbGVhbiA9PiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV07XG5cbmV4cG9ydCB0eXBlIEJCb3ggPSB7IHN0YXJ0OiBQb2ludDsgZW5kOiBQb2ludCB9O1xuZXhwb3J0IGNvbnN0IGNvbnRhaW5zID0gKGE6IEJCb3gsIHA6IFBvaW50KTogYm9vbGVhbiA9PiBsdF9wKGEuc3RhcnQsIHApICYmIGx0X3AocCwgYS5lbmQpO1xuXG5leHBvcnQgY29uc3QgaW50ZXJzZWN0ID0gKGE6IEJCb3gsIGI6IEJCb3gpOiBib29sZWFuID0+XG4gICEoYi5zdGFydFswXSA+IGEuZW5kWzBdIHx8IGIuZW5kWzBdIDwgYS5zdGFydFswXSB8fCBiLnN0YXJ0WzFdID4gYS5lbmRbMV0gfHwgYi5lbmRbMV0gPCBhLnN0YXJ0WzFdKTtcbiIsImV4cG9ydCBjb25zdCBpc19wcmltYXJ5X3RvdWNoID0gKGV2OiBQb2ludGVyRXZlbnQpOiBib29sZWFuID0+IGV2LmlzUHJpbWFyeSAmJiBldi5wb2ludGVyVHlwZSA9PT0gXCJ0b3VjaFwiO1xuXG5leHBvcnQgY29uc3QgaXNfcHJpbWFyeV9kb3duID0gKGV2OiBQb2ludGVyRXZlbnQpOiBib29sZWFuID0+IGV2LmlzUHJpbWFyeSAmJiAoZXYucG9pbnRlclR5cGUgPT09IFwidG91Y2hcIiB8fCBldi5wcmVzc3VyZSA+IDApO1xuZXhwb3J0IGNvbnN0IGlzX21vdXNlX2Rvd24gPSAoZXY6IFBvaW50ZXJFdmVudCk6IGJvb2xlYW4gPT4gZXYucG9pbnRlclR5cGUgPT09IFwibW91c2VcIiAmJiBldi5idXR0b25zID09PSAxICYmIGV2LnByZXNzdXJlID4gMDtcbmV4cG9ydCBjb25zdCBpc19ub25fdG91Y2hfZHJhZyA9IChldjogUG9pbnRlckV2ZW50KTogYm9vbGVhbiA9PiBldi5wb2ludGVyVHlwZSAhPT0gXCJ0b3VjaFwiICYmIGV2LmlzUHJpbWFyeSAmJiBldi5wcmVzc3VyZSA+IDA7XG5cbmV4cG9ydCBjb25zdCBzdG9wX2V2ID0gKGV2OiBFdmVudCkgPT4ge1xuICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbn07XG5cbnR5cGUgQ3VzdG9tRXZlbnRUeXBlPFQgZXh0ZW5kcyBFdmVudD4gPSBUIGV4dGVuZHMgQ3VzdG9tRXZlbnQ8aW5mZXIgVT4gPyBVIDogbmV2ZXI7XG5leHBvcnQgY29uc3Qgd2luZG93X2V2ID0gPE4gZXh0ZW5kcyBrZXlvZiBXaW5kb3dFdmVudE1hcD4obmFtZTogTiwgZGV0YWlsOiBDdXN0b21FdmVudFR5cGU8V2luZG93RXZlbnRNYXBbTl0+KTogV2luZG93RXZlbnRNYXBbTl0gPT5cbiAgbmV3IEN1c3RvbUV2ZW50KG5hbWUsIHsgZGV0YWlsIH0pIGFzIGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBFdmVudEVtaXR0ZXI8RXZlbnRNYXA+IGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICBhZGRFdmVudExpc3RlbmVyKHR5cGU6IHN0cmluZywgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QsIG9wdGlvbnM/OiBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMpOiB2b2lkO1xuICBhZGRFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBFdmVudE1hcD4odHlwZTogSywgbGlzdGVuZXI6IChldjogRXZlbnRNYXBbS10pID0+IGFueSwgb3B0aW9ucz86IGJvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyk6IHZvaWQ7XG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCwgb3B0aW9ucz86IGJvb2xlYW4gfCBFdmVudExpc3RlbmVyT3B0aW9ucyk6IHZvaWQ7XG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI8SyBleHRlbmRzIGtleW9mIEV2ZW50TWFwPih0eXBlOiBLLCBsaXN0ZW5lcjogKGV2OiBFdmVudE1hcFtLXSkgPT4gYW55LCBvcHRpb25zPzogYm9vbGVhbiB8IEV2ZW50TGlzdGVuZXJPcHRpb25zKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhaXRGb3I8SyBleHRlbmRzIHN0cmluZywgRSwgRVQgZXh0ZW5kcyBFdmVudEVtaXR0ZXI8eyBLOiBFIH0+Pih0eXBlOiBLLCB0YXJnZXQ6IEVUKTogUHJvbWlzZTxFPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTxFPigocmVzb2x2ZSkgPT4ge1xuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIChlKSA9PiByZXNvbHZlKGUgYXMgYW55KSwgeyBvbmNlOiB0cnVlIH0pO1xuICB9KTtcbn1cbiIsImV4cG9ydCB0eXBlIExvY2FsT3JSZW1vdGVJbWFnZSA9IEJsb2IgfCBzdHJpbmc7XG5cbmV4cG9ydCBjb25zdCBnZXRJbWFnZSA9IGFzeW5jIChldjogRHJhZ0V2ZW50KTogUHJvbWlzZTxMb2NhbE9yUmVtb3RlSW1hZ2U+ID0+IHtcbiAgbGV0IGRhdGFJdGVtcyA9IGV2LmRhdGFUcmFuc2Zlcj8uaXRlbXMgPz8gW107XG4gIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJEYXRhSXRlbXNcIiwgZGF0YUl0ZW1zLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhSXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGFJdGVtc1tpXS50eXBlKTtcbiAgICAgIGlmIChkYXRhSXRlbXNbaV0udHlwZS5zdGFydHNXaXRoKFwiaW1hZ2UvXCIpKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKGRhdGFJdGVtc1tpXS5nZXRBc0ZpbGUoKSEpO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGFJdGVtc1tpXS50eXBlID09PSBcInRleHQvaHRtbFwiKSB7XG4gICAgICAgIGRhdGFJdGVtc1tpXS5nZXRBc1N0cmluZygocykgPT4gcmVzb2x2ZShleHRyYWN0VVJMRnJvbUhUTUwocykhKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhSXRlbXNbaV0udHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LW1vei1maWxlLXByb21pc2UtdXJsXCIpIHtcbiAgICAgICAgZGF0YUl0ZW1zW2ldLmdldEFzU3RyaW5nKChzKSA9PiB7XG4gICAgICAgICAgdXJsOiByZXNvbHZlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChkYXRhSXRlbXNbaV0ua2luZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBsZXQgdCA9IGRhdGFJdGVtc1tpXS50eXBlO1xuICAgICAgICBkYXRhSXRlbXNbaV0uZ2V0QXNTdHJpbmcoKHMpID0+IGNvbnNvbGUubG9nKHQsIHMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlamVjdChcIk5vIGNvbXBhdGlibGUgZHJvcCB0eXBlIGZvdW5kXCIpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGV4dHJhY3RVUkxGcm9tSFRNTChodG1sOiBzdHJpbmcpOiBMb2NhbE9yUmVtb3RlSW1hZ2UgfCBudWxsIHtcbiAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpO1xuICBjb25zdCB1cmwgPSBkb2MucXVlcnlTZWxlY3RvcihcImltZ1wiKT8uc3JjO1xuICByZXR1cm4gdXJsID8/IG51bGw7XG59XG4iLCJpbXBvcnQgeyBQZWVySWQgfSBmcm9tIFwiLi4vbmV0L3BlZXJcIjtcbmltcG9ydCB7IFBvaW50IH0gZnJvbSBcIi4uL3V0aWwvbWF0aFwiO1xuaW1wb3J0IHsgU2VyaWFsaXplZFRhYmxldG9wIH0gZnJvbSBcIi4vdGFibGV0b3BcIjtcblxuZXhwb3J0IHR5cGUgR2FtZUV2ZW50ID0geyByZW1vdGU/OiBQZWVySWQgfSAmIChcbiAgfCBUb2tlbkFkZGVkXG4gIHwgVG9rZW5NYW5pcHVsYXRlZFxuICB8IFRva2VuUmVtb3ZlZFxuICB8IEdyaWRSZXNpemVkXG4gIHwgU3RhdGVTeW5jXG4gIHwgQmFja2dyb3VuZFxuICB8IFRva2VuUmVvcmRlclxuICB8IENhbGxvdXRcbik7XG5cbmV4cG9ydCB0eXBlIFRva2VuQWRkZWQgPSB7XG4gIHR5cGU6IFwidG9rZW4tYWRkZWRcIjtcbiAgaWQ6IHN0cmluZztcbiAgbG9jOiBQb2ludDtcbiAgZGltOiBQb2ludDtcbiAgdXJsOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBUb2tlbk1hbmlwdWxhdGVkID0ge1xuICB0eXBlOiBcInRva2VuLW1hbmlwdWxhdGVkXCI7XG4gIHRva2Vuczoge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbG9jOiBQb2ludDtcbiAgICBkaW06IFBvaW50O1xuICAgIHI6IG51bWJlcjtcbiAgfVtdO1xufTtcblxuZXhwb3J0IHR5cGUgVG9rZW5SZW1vdmVkID0ge1xuICB0eXBlOiBcInRva2VuLXJlbW92ZWRcIjtcbiAgaWRzOiBzdHJpbmdbXTtcbn07XG5cbmV4cG9ydCB0eXBlIEdyaWRSZXNpemVkID0ge1xuICB0eXBlOiBcImdyaWQtcmVzaXplZFwiO1xuICBkaW06IFBvaW50O1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZVN5bmMge1xuICB0eXBlOiBcInN0YXRlLXN5bmNcIjtcbiAgdGFibGV0b3A6IFNlcmlhbGl6ZWRUYWJsZXRvcDtcbn1cblxuZXhwb3J0IHR5cGUgQ2FsbG91dCA9IHtcbiAgdHlwZTogXCJjYWxsb3V0XCI7XG4gIGxvYzogUG9pbnQ7XG59O1xuXG5leHBvcnQgdHlwZSBUb2tlblJlb3JkZXIgPSB7XG4gIHR5cGU6IFwidG9rZW4tcmVvcmRlclwiO1xuICBpZDogc3RyaW5nO1xuICBpZHg6IFwidXBcIiB8IFwiZG93blwiIHwgXCJ0b3BcIiB8IFwiYm90dG9tXCI7XG59O1xuXG5leHBvcnQgdHlwZSBUb2tlbkRhdGEgPSB7XG4gIGxvYzogUG9pbnQ7XG4gIGRpbTogUG9pbnQ7XG4gIHVybDogc3RyaW5nO1xuICBpZDogc3RyaW5nO1xuICByOiBudW1iZXI7IC8vIGRlZ3JlZXMhXG59O1xuXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kID0ge1xuICB0eXBlOiBcImJnXCI7XG4gIHVybDogc3RyaW5nIHwgbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCB1dWlkdjQgPSAoKSA9PiB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgcmV0dXJuIChbMWU3XSArIC0xZTMgKyAtNGUzICsgLThlMyArIC0xZTExKS5yZXBsYWNlKC9bMDE4XS9nLCAoYykgPT5cbiAgICAoYyBeIChjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDEpKVswXSAmICgxNSA+PiAoYyAvIDQpKSkpLnRvU3RyaW5nKDE2KVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdhbWVfZXZlbnQgPSAoZGV0YWlsOiBHYW1lRXZlbnQpOiBDdXN0b21FdmVudDxHYW1lRXZlbnQ+ID0+IHtcbiAgcmV0dXJuIG5ldyBDdXN0b21FdmVudChcImdhbWUtZXZlbnRcIiwgeyBkZXRhaWwgfSk7XG59O1xuIiwiZXhwb3J0IGNsYXNzIE9yZGVyZWRNYXA8SywgVj4ge1xuICBvcmRlcjogVltdID0gW107XG4gIG1hcDogTWFwPEssIG51bWJlcj4gPSBuZXcgTWFwKCk7XG5cbiAgZ2V0KGtleTogSyk6IFYgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGlkeCA9IHRoaXMubWFwLmdldChrZXkpO1xuICAgIGlmIChpZHggIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMub3JkZXJbaWR4XTtcbiAgfVxuXG4gIGhhcyhrZXk6IEspOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzKGtleSk7XG4gIH1cblxuICBhZGQoa2V5OiBLLCB2YWx1ZTogVikge1xuICAgIGlmICghdGhpcy5tYXAuaGFzKGtleSkpIHtcbiAgICAgIHRoaXMubWFwLnNldChrZXksIHRoaXMub3JkZXIubGVuZ3RoKTtcbiAgICAgIHRoaXMub3JkZXIucHVzaCh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0X2luZGV4KGtleSwgdGhpcy5vcmRlci5sZW5ndGggLSAxKTtcbiAgICB9XG4gIH1cblxuICBkZWxldGUoa2V5OiBLKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaWR4ID0gdGhpcy5tYXAuZ2V0KGtleSk7XG4gICAgaWYgKGlkeCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG5cbiAgICB0aGlzLm9yZGVyLnNwbGljZShpZHgsIDEpO1xuICAgIHRoaXMubWFwLmRlbGV0ZShrZXkpO1xuICAgIHRoaXMubWFwLmZvckVhY2goKHZhbCwga2V5KSA9PiB7XG4gICAgICBpZiAodmFsID49IGlkeCkge1xuICAgICAgICB0aGlzLm1hcC5zZXQoa2V5LCB2YWwgLSAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGluZGV4KGtleTogSyk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpO1xuICB9XG5cbiAgc2V0X2luZGV4KGtleTogSywgaTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgZGVidWdnZXI7XG4gICAgY29uc3QgaWR4ID0gdGhpcy5tYXAuZ2V0KGtleSk7XG4gICAgaWYgKGlkeCA9PT0gdW5kZWZpbmVkIHx8IGkgPj0gdGhpcy5vcmRlci5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCB2YWwgPSB0aGlzLm9yZGVyLnNwbGljZShpZHgsIDEpWzBdO1xuICAgIHRoaXMub3JkZXIuc3BsaWNlKGkgPiBpZHggPyBpIC0gMSA6IGksIDAsIHZhbCk7XG4gICAgdGhpcy5tYXAuZm9yRWFjaCgodmFsLCBrZXkpID0+IHtcbiAgICAgIGlmICh2YWwgPj0gaSAmJiB2YWwgPCBpZHgpIHtcbiAgICAgICAgdGhpcy5tYXAuc2V0KGtleSwgdmFsICsgMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWwgPD0gaSAmJiB2YWwgPiBpZHgpIHtcbiAgICAgICAgdGhpcy5tYXAuc2V0KGtleSwgdmFsIC0gMSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5tYXAuc2V0KGtleSwgaSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YWx1ZXMoKTogSXRlcmFibGU8Vj4ge1xuICAgIHJldHVybiB0aGlzLm9yZGVyO1xuICB9XG5cbiAgZ2V0IHNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuc2l6ZTtcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IGZpcnN0ID0gPFQ+KGl0ZXI6IEl0ZXJhYmxlPFQ+KTogVCB8IHVuZGVmaW5lZCA9PiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0oKS5uZXh0KCkudmFsdWU7XG5leHBvcnQgZnVuY3Rpb24qIG1hcDxULCBVPihpdGVyOiBJdGVyYWJsZTxUPiwgZjogKGl0ZW06IFQpID0+IFUpOiBJdGVyYWJsZTxVPiB7XG4gIGZvciAobGV0IGl0ZW0gb2YgaXRlcikge1xuICAgIHlpZWxkIGYoaXRlbSk7XG4gIH1cbn1cbiIsImltcG9ydHtub0NoYW5nZSBhcyB0fWZyb21cIi4uL2xpdC1odG1sLmpzXCI7aW1wb3J0e2RpcmVjdGl2ZSBhcyBlLERpcmVjdGl2ZSBhcyByLFBhcnRUeXBlIGFzIHN9ZnJvbVwiLi4vZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBpPWUoY2xhc3MgZXh0ZW5kcyBye2NvbnN0cnVjdG9yKHQpe3ZhciBlO2lmKHN1cGVyKHQpLHQudHlwZSE9PXMuQVRUUklCVVRFfHxcInN0eWxlXCIhPT10Lm5hbWV8fChudWxsPT09KGU9dC5zdHJpbmdzKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5sZW5ndGgpPjIpdGhyb3cgRXJyb3IoXCJUaGUgYHN0eWxlTWFwYCBkaXJlY3RpdmUgbXVzdCBiZSB1c2VkIGluIHRoZSBgc3R5bGVgIGF0dHJpYnV0ZSBhbmQgbXVzdCBiZSB0aGUgb25seSBwYXJ0IGluIHRoZSBhdHRyaWJ1dGUuXCIpfXJlbmRlcih0KXtyZXR1cm4gT2JqZWN0LmtleXModCkucmVkdWNlKCgoZSxyKT0+e2NvbnN0IHM9dFtyXTtyZXR1cm4gbnVsbD09cz9lOmUrYCR7cj1yLnJlcGxhY2UoLyg/Ol4od2Via2l0fG1venxtc3xvKXwpKD89W0EtWl0pL2csXCItJCZcIikudG9Mb3dlckNhc2UoKX06JHtzfTtgfSksXCJcIil9dXBkYXRlKGUsW3JdKXtjb25zdHtzdHlsZTpzfT1lLmVsZW1lbnQ7aWYodm9pZCAwPT09dGhpcy5jdCl7dGhpcy5jdD1uZXcgU2V0O2Zvcihjb25zdCB0IGluIHIpdGhpcy5jdC5hZGQodCk7cmV0dXJuIHRoaXMucmVuZGVyKHIpfXRoaXMuY3QuZm9yRWFjaCgodD0+e251bGw9PXJbdF0mJih0aGlzLmN0LmRlbGV0ZSh0KSx0LmluY2x1ZGVzKFwiLVwiKT9zLnJlbW92ZVByb3BlcnR5KHQpOnNbdF09XCJcIil9KSk7Zm9yKGNvbnN0IHQgaW4gcil7Y29uc3QgZT1yW3RdO251bGwhPWUmJih0aGlzLmN0LmFkZCh0KSx0LmluY2x1ZGVzKFwiLVwiKT9zLnNldFByb3BlcnR5KHQsZSk6c1t0XT1lKX1yZXR1cm4gdH19KTtleHBvcnR7aSBhcyBzdHlsZU1hcH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZS1tYXAuanMubWFwXG4iLCJpbXBvcnQgeyBjc3MsIGh0bWwsIExpdEVsZW1lbnQsIHN2ZyB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIGV2ZW50T3B0aW9ucywgcHJvcGVydHksIHF1ZXJ5LCBzdGF0ZSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgcmVwZWF0IH0gZnJvbSBcImxpdC9kaXJlY3RpdmVzL3JlcGVhdC5qc1wiO1xuaW1wb3J0IHsgYWJzX3AsIGFkZF9jLCBhZGRfcCwgQkJveCwgY2xhbXBfcCwgZGl2X2MsIGVxX3AsIGludGVyc2VjdCwgbWF4X3AsIG1pbl9wLCBtdWxfYywgUG9pbnQsIHN1Yl9wIH0gZnJvbSBcIi4uL3V0aWwvbWF0aFwiO1xuaW1wb3J0IHsgaXNfbW91c2VfZG93biwgaXNfcHJpbWFyeV9kb3duLCBpc19wcmltYXJ5X3RvdWNoLCBzdG9wX2V2LCB3aW5kb3dfZXYgfSBmcm9tIFwiLi4vdXRpbC9ldmVudHNcIjtcbmltcG9ydCB7IGdldEltYWdlLCBMb2NhbE9yUmVtb3RlSW1hZ2UgfSBmcm9tIFwiLi4vdXRpbC9maWxlc1wiO1xuaW1wb3J0IHsgR2FtZUV2ZW50LCBnYW1lX2V2ZW50LCBTdGF0ZVN5bmMsIFRva2VuRGF0YSwgdXVpZHY0IH0gZnJvbSBcIi4uL2dhbWUvZ2FtZS1ldmVudHNcIjtcbmltcG9ydCB7IEdhbWUgfSBmcm9tIFwiLi4vZ2FtZS9nYW1lXCI7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSBcIi4uL3V0aWwvb3JkZXJlZG1hcFwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcIi4uL3V0aWwvaXRlclwiO1xuaW1wb3J0IHsgUFBaIH0gZnJvbSBcIi4vcHBwXCI7XG5pbXBvcnQgeyBzdHlsZU1hcCB9IGZyb20gXCJsaXQvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanNcIjtcblxuY29uc3QgUElYRUxfU0NBTEUgPSAxO1xuY29uc3QgR1JJRF9TSVpFID0gMjQgKiBQSVhFTF9TQ0FMRTsgLy8gc2NhbGUtZGVwZW5kZW50IHB4XG5jb25zdCBMSU5FX1dJRFRIID0gMC41ICogUElYRUxfU0NBTEU7IC8vIHNjYWxlLWRlcGVuZGVudCBweFxuY29uc3QgSEFORExFX1NJWkUgPSA4ICogUElYRUxfU0NBTEU7IC8vIHNjYWxlLWluZGVwZW5kZW50IHB4XG5jb25zdCBDQU5WQVNfUkFESVVTID0gNSAqIFBJWEVMX1NDQUxFO1xuY29uc3QgUk9UQVRFX0RJU1RBTkNFID0gMTAgKiBQSVhFTF9TQ0FMRTtcbmNvbnN0IFJPVEFURV9TSVpFID0gSEFORExFX1NJWkUgLyAyO1xuY29uc3QgUEFERElORyA9IDIwICogUElYRUxfU0NBTEU7XG5jb25zdCBDQUxMT1VUX0RJTSA9IEdSSURfU0laRTtcblxudHlwZSBTZWxlY3Rpb25Cb3ggPSB7XG4gIGluZGV4OiBudW1iZXI7XG4gIGJib3g6IEJCb3g7XG59O1xuQGN1c3RvbUVsZW1lbnQoXCJiZy1jYW52YXNcIilcbmV4cG9ydCBjbGFzcyBDYW52YXMgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgQHByb3BlcnR5KHsgdHlwZTogTnVtYmVyIH0pXG4gIHJlYWRvbmx5IHdpZHRoID0gMzA7XG5cbiAgQHByb3BlcnR5KHsgdHlwZTogTnVtYmVyIH0pXG4gIHJlYWRvbmx5IGhlaWdodCA9IDQwO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIHJlYWRvbmx5IGJnPzogc3RyaW5nO1xuXG4gIEBwcm9wZXJ0eSh7IGF0dHJpYnV0ZTogZmFsc2UgfSlcbiAgcmVhZG9ubHkgdG9rZW5zOiBPcmRlcmVkTWFwPHN0cmluZywgVG9rZW5EYXRhPiA9IG5ldyBPcmRlcmVkTWFwKCk7XG5cbiAgQHByb3BlcnR5KHsgYXR0cmlidXRlOiBmYWxzZSB9KVxuICByZWFkb25seSBzZWxlY3Rpb246IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuXG4gIEBwcm9wZXJ0eSh7IGF0dHJpYnV0ZTogZmFsc2UgfSlcbiAgcmVhZG9ubHkgY2FsbG91dHM6IFNldDxQb2ludD4gPSBuZXcgU2V0KCk7XG5cbiAgI3Nib3g/OiB7IHBpbjogUG9pbnQ7IG1vdXNlOiBQb2ludCB9O1xuXG4gIEBwcm9wZXJ0eSh7IGF0dHJpYnV0ZTogZmFsc2UgfSlcbiAgc2VsX2Jib3g/OiBCQm94O1xuXG4gIEBxdWVyeShcInJvb3RcIiwgdHJ1ZSlcbiAgcm9vdD86IFNWR0VsZW1lbnQ7XG5cbiAgQHF1ZXJ5KFwicC1wLXpcIiwgdHJ1ZSlcbiAgdmlld3BvcnQ/OiBQUFo7XG5cbiAgI21vdXNlX2xvYz86IFBpY2s8TW91c2VFdmVudCwgXCJjbGllbnRYXCIgfCBcImNsaWVudFlcIj47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGdldCAjZGltKCkge1xuICAgIHJldHVybiBtdWxfYyhbdGhpcy53aWR0aCwgdGhpcy5oZWlnaHRdLCBHUklEX1NJWkUpO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLiNrZXlkb3duKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy4ja2V5ZG93bik7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGxldCBbd2lkdGgsIGhlaWdodF0gPSB0aGlzLiNkaW07XG4gICAgbGV0IHNiYm94ID0gdGhpcy4jc2VsZWN0aW9uX2Jib3goKTtcbiAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGlvbi5zaXplID09PSAxID8gdGhpcy50b2tlbnMuZ2V0KHRoaXMuc2VsZWN0aW9uLnZhbHVlcygpLm5leHQoKS52YWx1ZSkgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8cC1wLXpcbiAgICAgICAgQHBvaW50ZXJkb3duPSR7dGhpcy4jc2JveF9zdGFydH1cbiAgICAgICAgQHBvaW50ZXJtb3ZlPSR7dGhpcy4jc2JveF9tb3ZlfVxuICAgICAgICBAcG9pbnRlcnVwPSR7dGhpcy4jc2JveF9zdG9wfVxuICAgICAgICBAcG9pbnRlcmxlYXZlPSR7KCkgPT4gKHRoaXMuI21vdXNlX2xvYyA9IHVuZGVmaW5lZCl9XG4gICAgICAgIEBkcmFnc3RhcnQ9JHtzdG9wX2V2fVxuICAgICAgICBAZHJhZ2VudGVyPSR7dGhpcy4jZHJhZ19lbnRlcn1cbiAgICAgICAgQGRyYWdsZWF2ZT0ke3RoaXMuI2RyYWdfbGVhdmV9XG4gICAgICAgIEBkcmFnc3RvcD0ke3RoaXMuI2RyYWdfbGVhdmV9XG4gICAgICAgIEBkcmFnb3Zlcj0ke3RoaXMuI2RyYWdfb3Zlcn1cbiAgICAgICAgQGRyb3A9JHt0aGlzLiNkcm9wfVxuICAgICAgPlxuICAgICAgICA8c3ZnIGlkPVwicm9vdFwiIHdpZHRoPSR7d2lkdGggKyBQQURESU5HICogMn0gaGVpZ2h0PSR7aGVpZ2h0ICsgUEFERElORyAqIDJ9IHN0eWxlPSR7c3R5bGVNYXAoe1xuICAgICAgICAgIHdpZHRoOiBgJHt3aWR0aCArIFBBRERJTkcgKiAyfXB4YCxcbiAgICAgICAgICBoZWlnaHQ6IGAke2hlaWdodCArIFBBRERJTkcgKiAyfXB4YFxuICAgICAgICB9KX0+XG4gICAgICAgICAgPGRlZnM+XG4gICAgICAgICAgICA8Y2xpcFBhdGggaWQ9XCJjYW52YXNDbGlwXCI+XG4gICAgICAgICAgICAgIDxyZWN0IHdpZHRoPSR7d2lkdGh9IGhlaWdodD0ke2hlaWdodH0gcng9JHtDQU5WQVNfUkFESVVTfT48L3JlY3Q+XG4gICAgICAgICAgICA8L2NsaXBQYXRoPlxuICAgICAgICAgICAgPHBhdHRlcm4gaWQ9XCJob3JpelwiIHg9JHstTElORV9XSURUSCAvIDJ9IHk9JHstTElORV9XSURUSCAvIDJ9IHdpZHRoPVwiMTAwJVwiIGhlaWdodD0ke0dSSURfU0laRX0gcGF0dGVyblVuaXRzPVwidXNlclNwYWNlT25Vc2VcIj5cbiAgICAgICAgICAgICAgPHJlY3QgY2xhc3M9XCJncmlkbGluZVwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD0ke0xJTkVfV0lEVEh9IGZpbGw9XCIjZDNkM2QzXCIgc2hhcGUtcmVuZGVyaW5nPVwiZ2VvbWV0cmljUHJlY2lzaW9uXCI+PC9yZWN0PlxuICAgICAgICAgICAgPC9wYXR0ZXJuPlxuICAgICAgICAgICAgPHBhdHRlcm4gaWQ9XCJ2ZXJ0XCIgeD0key1MSU5FX1dJRFRIIC8gMn0geT0key1MSU5FX1dJRFRIIC8gMn0gd2lkdGg9JHtHUklEX1NJWkV9IGhlaWdodD1cIjEwMCVcIiBwYXR0ZXJuVW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiPlxuICAgICAgICAgICAgICA8cmVjdCBjbGFzcz1cImdyaWRsaW5lXCIgd2lkdGg9JHtMSU5FX1dJRFRIfSBoZWlnaHQ9XCIxMDAlXCIgZmlsbD1cIiNkM2QzZDNcIiBzaGFwZS1yZW5kZXJpbmc9XCJnZW9tZXRyaWMgcHJlY2lzaW9uXCI+PC9yZWN0PlxuICAgICAgICAgICAgPC9wYXR0ZXJuPlxuICAgICAgICAgICAgPHBhdHRlcm4gaWQ9XCJsb2FkaW5nXCIgcGF0dGVyblVuaXRzPVwidXNlclNwYWNlT25Vc2VcIiB3aWR0aD1cIjFcIiBoZWlnaHQ9XCIxXCI+XG4gICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMVwiIGhlaWdodD1cIjFcIiBmaWxsPVwid2hpdGVcIj48L3JlY3Q+XG4gICAgICAgICAgICAgIDxpbWFnZSBocmVmPVwiYXNzZXRzL2xvYWRpbmcuc3ZnXCIgd2lkdGg9XCIxXCIgaGVpZ2h0PVwiMVwiIC8+XG4gICAgICAgICAgICA8L3BhdHRlcm4+XG4gICAgICAgICAgPC9kZWZzPlxuICAgICAgICAgIDxzdmcgeD0ke1BBRERJTkd9IHk9JHtQQURESU5HfSB3aWR0aD0ke3dpZHRofSBoZWlnaHQ9JHtoZWlnaHR9IGlkPVwic3VyZmFjZVwiPlxuICAgICAgICAgICAgPHJlY3QgY2xhc3M9XCJzaGFkb3dcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgZmlsbD1cIndoaXRlXCIgcng9JHtDQU5WQVNfUkFESVVTfT48L3JlY3Q+XG4gICAgICAgICAgICA8c3ZnIGNsaXAtcGF0aD1cInVybCgjY2FudmFzQ2xpcClcIj5cbiAgICAgICAgICAgICAgJHt0aGlzLmJnXG4gICAgICAgICAgICAgICAgPyBzdmdgPGltYWdlIGhyZWY9JHt0aGlzLmJnfSB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cIm5vbmVcIiBzdHlsZT1cIndpbGwtY2hhbmdlOiB0cmFuc2Zvcm1cIj48L2ltYWdlPmBcbiAgICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBmaWxsPVwidXJsKCNob3JpeilcIiBvcGFjaXR5PVwiMC43NVwiIHBvaW50ZXItZXZlbnRzPVwibm9uZVwiPjwvcmVjdD5cbiAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIGZpbGw9XCJ1cmwoI3ZlcnQpXCIgb3BhY2l0eT1cIjAuNzVcIiBwb2ludGVyLWV2ZW50cz1cIm5vbmVcIj48L3JlY3Q+XG4gICAgICAgICAgICAgIDxzdmcgaWQ9XCJ0b2tlbnNcIj5cbiAgICAgICAgICAgICAgICAke3JlcGVhdChcbiAgICAgICAgICAgICAgICAgIHRoaXMudG9rZW5zLnZhbHVlcygpLFxuICAgICAgICAgICAgICAgICAgKHQpID0+IHQuaWQsXG4gICAgICAgICAgICAgICAgICAodCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID0gYWRkX2ModC5kaW0sIC1MSU5FX1dJRFRIKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3gsIHldID0gYWRkX2ModC5sb2MsIExJTkVfV0lEVEggLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAxIDFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgeD0ke3h9XG4gICAgICAgICAgICAgICAgICAgICAgICB5PSR7eX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSR7d2lkdGh9XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9JHtoZWlnaHR9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVwidHJhbnNwYXJlbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbz1cIm5vbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgQHBvaW50ZXJkb3duPSR7dGhpcy4jbW91c2VfZm9jdXN9XG4gICAgICAgICAgICAgICAgICAgICAgICBAcG9pbnRlcnVwPSR7dGhpcy4jdG91Y2hfZm9jdXN9XG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSR7dC5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJ0b2tlblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSR7dC51cmx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSR7YHRyYW5zZm9ybTogcm90YXRlKCR7dC5yfWRlZylgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZS1yZW5kZXJpbmc9XCJvcHRpbWl6ZVNwZWVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbz1cIm5vbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBAbG9hZD0ke21hcmtfbG9hZGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgPjwvaW1hZ2U+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjFcIiBoZWlnaHQ9XCIxXCIgY2xhc3M9XCJsb2FkaW5nXCI+PC9yZWN0PlxuICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuXG4gICAgICAgICAgICAgICAgICAgICAgJHtzYmJveD8uaW5kZXggPT09IGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHN2Z2A8cmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic2VsZWN0aW9uLWRyYWctdGFyZ2V0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4PSR7c2Jib3guYmJveC5zdGFydFswXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5PSR7c2Jib3guYmJveC5zdGFydFsxXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0ke3NiYm94LmJib3guZW5kWzBdIC0gc2Jib3guYmJveC5zdGFydFswXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9JHtzYmJveC5iYm94LmVuZFsxXSAtIHNiYm94LmJib3guc3RhcnRbMV19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cInRyYW5zcGFyZW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAdG91Y2htb3ZlPSR7dGhpcy5wcmV2ZW50X3NhZmFyaV9zY3JvbGx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQHBvaW50ZXJkb3duPSR7dGhpcy5zZWxlY3Rpb25fZHJhZ19zdGFydH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAcG9pbnRlcm1vdmU9JHt0aGlzLnNlbGVjdGlvbl9kcmFnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBwb2ludGVydXA9JHt0aGlzLnNlbGVjdGlvbl9kcmFnX2VuZH1cbiAgICAgICAgICAgICAgICAgICAgICAgID48L3JlY3Q+YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsfVxuICAgICAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAke3RoaXMuX2Ryb3BfaGludFxuICAgICAgICAgICAgICAgID8gc3ZnYFxuICAgICAgICAgICAgPHJlY3RcbiAgICAgICAgICAgICAgICBjbGFzcz1cImRyb3BfaGludFwiXG4gICAgICAgICAgICAgICAgeD0ke3RoaXMuX2Ryb3BfaGludFswXX1cbiAgICAgICAgICAgICAgICB5PSR7dGhpcy5fZHJvcF9oaW50WzFdfVxuICAgICAgICAgICAgICAgIHdpZHRoPSR7R1JJRF9TSVpFfVxuICAgICAgICAgICAgICAgIGhlaWdodD0ke0dSSURfU0laRX1cbiAgICAgICAgICAgICAgICA+PC9yZWN0PlxuICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgICR7dGhpcy4jc2JveFxuICAgICAgICAgICAgICA/IHN2Z2BcbiAgICAgICAgICAgICAgPHJlY3QgaWQ9XCJzYm94XCJcbiAgICAgICAgICAgICAgICB4PSR7TWF0aC5taW4odGhpcy4jc2JveC5waW5bMF0sIHRoaXMuI3Nib3gubW91c2VbMF0pfVxuICAgICAgICAgICAgICAgIHk9JHtNYXRoLm1pbih0aGlzLiNzYm94LnBpblsxXSwgdGhpcy4jc2JveC5tb3VzZVsxXSl9XG4gICAgICAgICAgICAgICAgd2lkdGg9JHtNYXRoLmFicyh0aGlzLiNzYm94LnBpblswXSAtIHRoaXMuI3Nib3gubW91c2VbMF0pfVxuICAgICAgICAgICAgICAgIGhlaWdodD0ke01hdGguYWJzKHRoaXMuI3Nib3gucGluWzFdIC0gdGhpcy4jc2JveC5tb3VzZVsxXSl9XG4gICAgICAgICAgICAgICAgPjwvcmVjdD5cbiAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgICAke3JlcGVhdChcbiAgICAgICAgICAgICAgdGhpcy5jYWxsb3V0cyxcbiAgICAgICAgICAgICAgKGlkKSA9PiBpZCxcbiAgICAgICAgICAgICAgKHBvaW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgW3gsIHldID0gc3ViX3AocG9pbnQsIFtDQUxMT1VUX0RJTSAvIDIsIENBTExPVVRfRElNIC8gMl0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN2Z2BcbiAgICAgICAgICAgICAgICAgIDxpbWFnZSBocmVmPVwiYXNzZXRzL2NhbGxvdXQuc3ZnXCIgeD0ke3h9IHk9JHt5fSB3aWR0aD0ke0NBTExPVVRfRElNfSBoZWlnaHQ9JHtDQUxMT1VUX0RJTX0+PC9pbWFnZT5cbiAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgJHtzYmJveFxuICAgICAgICAgICAgICA/IHN2Z2BcbiAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgaWQ9XCJzZWxlY3Rpb25cIlxuICAgICAgICAgICAgICB4PSR7c2Jib3guYmJveC5zdGFydFswXX1cbiAgICAgICAgICAgICAgeT0ke3NiYm94LmJib3guc3RhcnRbMV19XG4gICAgICAgICAgICAgIHdpZHRoPSR7c2Jib3guYmJveC5lbmRbMF0gLSBzYmJveC5iYm94LnN0YXJ0WzBdfVxuICAgICAgICAgICAgICBoZWlnaHQ9JHtzYmJveC5iYm94LmVuZFsxXSAtIHNiYm94LmJib3guc3RhcnRbMV19XG4gICAgICAgICAgICAgIEB0b3VjaG1vdmU9JHt0aGlzLnByZXZlbnRfc2FmYXJpX3Njcm9sbH1cbiAgICAgICAgICAgICAgQHBvaW50ZXJkb3duPSR7dGhpcy5zZWxlY3Rpb25fZHJhZ19zdGFydH1cbiAgICAgICAgICAgICAgQHBvaW50ZXJtb3ZlPSR7dGhpcy5zZWxlY3Rpb25fZHJhZ31cbiAgICAgICAgICAgICAgQHBvaW50ZXJ1cD0ke3RoaXMuc2VsZWN0aW9uX2RyYWdfZW5kfT5cbiAgICAgICAgICAgICAgPHJlY3QgY2xhc3M9XCJzZWxlY3Rpb24tYm94XCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiICA+PC9yZWN0PlxuICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICA/IHN2Z2BcbiAgICAgICAgICAgIDxnIHN0eWxlPSR7YHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjsgdHJhbnNmb3JtOiByb3RhdGUoJHtzZWxlY3RlZC5yfWRlZykgdHJhbnNsYXRlWSgke1xuICAgICAgICAgICAgICAoTWF0aC5zaWduKChzZWxlY3RlZC5yIC0gMTgwKSAlIDE4MCkgKiAoc2VsZWN0ZWQuZGltWzBdIC0gc2VsZWN0ZWQuZGltWzFdKSkgLyAyXG4gICAgICAgICAgICB9cHgpYH0+XG4gICAgICAgICAgICAgIDxsaW5lIGNsYXNzPVwicm9cIiB4MT1cIjUwJVwiIHgyPVwiNTAlXCIgeTI9JHstUk9UQVRFX0RJU1RBTkNFfT48L2xpbmU+XG4gICAgICAgICAgICAgIDxjaXJjbGUgY2xhc3M9XCJybyBoYW5kbGVcIiBjeD1cIjUwJVwiIGN5PSR7LVJPVEFURV9ESVNUQU5DRX0gcj0ke1JPVEFURV9TSVpFIC8gMn0+PC9jaXJjbGU+XG4gICAgICAgICAgICA8L2c+XG4gICAgICAgICAgICA8bGluZSBjbGFzcz1cInJuXCIgeDI9XCIxMDAlXCI+PC9saW5lPlxuICAgICAgICAgICAgPGxpbmUgY2xhc3M9XCJyd1wiIHkyPVwiMTAwJVwiPjwvbGluZT5cbiAgICAgICAgICAgIDxsaW5lIGNsYXNzPVwicmVcIiB4MT1cIjEwMCVcIiB4Mj1cIjEwMCVcIiB5Mj1cIjEwMCVcIj48L2xpbmU+XG4gICAgICAgICAgICA8bGluZSBjbGFzcz1cInJzXCIgeTE9XCIxMDAlXCIgeDI9XCIxMDAlXCIgeTI9XCIxMDAlXCI+PC9saW5lPlxuICAgICAgICAgICAgPHJlY3QgY2xhc3M9XCJoYW5kbGUgcm4gcndcIj48L3JlY3Q+XG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cImhhbmRsZSBybiByZVwiIHg9XCIxMDAlXCI+PC9yZWN0PlxuICAgICAgICAgICAgPHJlY3QgY2xhc3M9XCJoYW5kbGUgcnMgcndcIiB5PVwiMTAwJVwiPjwvcmVjdD5cbiAgICAgICAgICAgIDxyZWN0IGNsYXNzPVwiaGFuZGxlIHJzIHJlXCIgeD1cIjEwMCVcIiB5PVwiMTAwJVwiPjwvcmVjdD5cbiAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgIDwvc3ZnPmBcbiAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgIH1gXG4gICAgICAgICAgICAgIDogbnVsbH1cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9zdmc+XG4gICAgICA8L3AtcC16PlxuICAgICAgPGRpdlxuICAgICAgICBpZD1cImJnLWRyb3BcIlxuICAgICAgICBjbGFzcz0ke3RoaXMuaG92ZXJpbmcgPz8gXCJcIn1cbiAgICAgICAgQGRyYWdlbnRlcj0ke3RoaXMuI2RyYWdfZW50ZXJ9XG4gICAgICAgIEBkcmFnb3Zlcj0ke3RoaXMuI2JnX2RyYWdfb3Zlcn1cbiAgICAgICAgQGRyYWdsZWF2ZT0ke3RoaXMuI2RyYWdfbGVhdmV9XG4gICAgICAgIEBkcm9wPSR7dGhpcy4jYmdfZHJvcH1cbiAgICAgID5cbiAgICAgICAgPGRpdiBpZD1cImJnLWRyb3AtbGFiZWxcIiBAZHJvcD0ke3RoaXMuI2JnX2Ryb3B9PlNldCBCYWNrZ3JvdW5kPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVJlbmRlclJvb3QoKTogRWxlbWVudCB8IFNoYWRvd1Jvb3Qge1xuICAgIGNvbnN0IHJvb3QgPSBzdXBlci5jcmVhdGVSZW5kZXJSb290KCk7XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBAc3RhdGUoKVxuICBfZHJvcF9oaW50PzogUG9pbnQ7XG5cbiAgQHN0YXRlKClcbiAgaG92ZXJpbmc/OiBcImNhbnZhc1wiIHwgXCJiZ1wiO1xuXG4gICNkcmFnX2RlcHRoID0gMDtcbiAgI2RyYWdfZW50ZXIgPSAoZXY6IERyYWdFdmVudCkgPT4ge1xuICAgIHN0b3BfZXYoZXYpO1xuICAgIHRoaXMuI2RyYWdfZGVwdGgrKztcbiAgfTtcbiAgI2RyYWdfb3ZlciA9IChldjogRHJhZ0V2ZW50KSA9PiB7XG4gICAgc3RvcF9ldihldik7XG5cbiAgICBjb25zdCBsb2NhbCA9IHRoaXMuI3NjcmVlbl90b19zdmcoZXYpO1xuICAgIGNvbnN0IGNlbGwgPSBsb2NhbC5tYXAob2NjdXBpZWRfY2VsbCk7XG4gICAgY29uc3QgbWF4ID0gbXVsX2MoYWRkX2MoW3RoaXMud2lkdGgsIHRoaXMuaGVpZ2h0XSwgLTEpLCBHUklEX1NJWkUpO1xuICAgIHRoaXMuX2Ryb3BfaGludCA9IGNsYW1wX3AoWzAsIDBdLCBtYXgsIGNlbGwgYXMgUG9pbnQpO1xuICAgIHRoaXMuaG92ZXJpbmcgPSBcImNhbnZhc1wiO1xuICB9O1xuXG4gICNkcmFnX2xlYXZlID0gKGV2OiBEcmFnRXZlbnQpID0+IHtcbiAgICBpZiAoLS10aGlzLiNkcmFnX2RlcHRoIDw9IDApIHtcbiAgICAgIHRoaXMuX2Ryb3BfaGludCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuaG92ZXJpbmcgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIEBldmVudE9wdGlvbnMoe2NhcHR1cmU6IHRydWUsIHBhc3NpdmU6IGZhbHNlfSlcbiAgcHJldmVudF9zYWZhcmlfc2Nyb2xsKGV2OiBUb3VjaEV2ZW50KSB7XG4gICAgc3RvcF9ldihldik7XG4gIH1cblxuICAjYmdfZHJhZ19vdmVyID0gKGV2OiBEcmFnRXZlbnQpID0+IHtcbiAgICBzdG9wX2V2KGV2KTtcbiAgICB0aGlzLl9kcm9wX2hpbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ob3ZlcmluZyA9IFwiYmdcIjtcbiAgfTtcblxuICAjYmdfZHJvcCA9IGFzeW5jIChldjogRHJhZ0V2ZW50KSA9PiB7XG4gICAgc3RvcF9ldihldik7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGltZyA9IGF3YWl0IGdldEltYWdlKGV2KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh3aW5kb3dfZXYoXCJiZy1kcm9wXCIsIGltZykpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdGhpcy4jZHJhZ19kZXB0aCA9IDA7XG4gICAgdGhpcy5ob3ZlcmluZyA9IHVuZGVmaW5lZDtcbiAgfTtcblxuICAjZHJvcCA9IGFzeW5jIChldjogRHJhZ0V2ZW50KSA9PiB7XG4gICAgc3RvcF9ldihldik7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGltZyA9IGF3YWl0IGdldEltYWdlKGV2KTtcbiAgICAgIC8vIFRPRE8gRU1JVCBEUk9QUEVEIFRPS0VOXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIHdpbmRvd19ldihcInRva2VuLWRyb3BcIiwge1xuICAgICAgICAgIGxvYzogdGhpcy5fZHJvcF9oaW50ISxcbiAgICAgICAgICBkaW06IFtHUklEX1NJWkUsIEdSSURfU0laRV0gYXMgUG9pbnQsXG4gICAgICAgICAgaW1nLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRoaXMuX2Ryb3BfaGludCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhvdmVyaW5nID0gdW5kZWZpbmVkO1xuICB9O1xuXG4gICNtb3VzZV9mb2N1cyA9IChldjogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgaWYgKCFpc19tb3VzZV9kb3duKGV2KSkgcmV0dXJuO1xuICAgIHRoaXMuI2ZvY3VzKGV2KTtcbiAgfTtcblxuICAjdG91Y2hfZm9jdXMgPSAoZXY6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgIGlmICghaXNfcHJpbWFyeV90b3VjaChldikpIHJldHVybjtcbiAgICB0aGlzLiNmb2N1cyhldik7XG4gIH07XG5cbiAgI2ZvY3VzID0gKGV2OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGNvbnN0IGlkID0gKGV2LnRhcmdldCBhcyBTVkdJbWFnZUVsZW1lbnQpLmlkO1xuICAgIGlmIChldi5zaGlmdEtleSB8fCBldi5jdHJsS2V5KSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIHdpbmRvd19ldihcbiAgICAgICAgICBcInRva2VuLXNlbGVjdFwiLFxuICAgICAgICAgIFtpZCwgLi4udGhpcy5zZWxlY3Rpb25dLmZpbHRlcigocykgPT4gcyAhPT0gaWQgfHwgIXRoaXMuc2VsZWN0aW9uLmhhcyhpZCkpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh3aW5kb3dfZXYoXCJ0b2tlbi1zZWxlY3RcIiwgWyhldi50YXJnZXQgYXMgU1ZHSW1hZ2VFbGVtZW50KS5pZF0pKTtcbiAgICB9XG4gIH07XG5cbiAgI3Nib3hfc3RhcnQoZXY6IFBvaW50ZXJFdmVudCkge1xuICAgIGlmICghaXNfbW91c2VfZG93bihldikpIHJldHVybjtcbiAgICAoZXYudGFyZ2V0IGFzIFNWR0VsZW1lbnQpLnNldFBvaW50ZXJDYXB0dXJlKGV2LnBvaW50ZXJJZCk7XG4gICAgY29uc3QgbG9jYWwgPSB0aGlzLiNzY3JlZW5fdG9fc3ZnKGV2KTtcbiAgICB0aGlzLiNzYm94ID0geyBwaW46IGxvY2FsLCBtb3VzZTogbG9jYWwgfTtcbiAgfVxuXG4gICNzYm94X21vdmUoZXY6IFBvaW50ZXJFdmVudCkge1xuICAgIHRoaXMuI21vdXNlX2xvYyA9IHsgY2xpZW50WDogZXYuY2xpZW50WCwgY2xpZW50WTogZXYuY2xpZW50WSB9O1xuICAgIGlmICghdGhpcy4jc2JveCkgcmV0dXJuO1xuICAgIHRoaXMuI3Nib3gubW91c2UgPSB0aGlzLiNzY3JlZW5fdG9fc3ZnKGV2KTtcbiAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgfVxuXG4gICNzYm94X3N0b3AoZXY6IFBvaW50ZXJFdmVudCkge1xuICAgIC8vIFRPRE86IFRoaXMgY2F1c2VzIG1vYmlsZSBzYWZhcmkgdG8gbG9zZSBzZWxlY3Rpb24gb24gem9vbVxuICAgIGlmICghdGhpcy4jc2JveCkgcmV0dXJuIHRoaXMuZGlzcGF0Y2hFdmVudCh3aW5kb3dfZXYoXCJ0b2tlbi1zZWxlY3RcIiwgW10pKTtcbiAgICAoZXYudGFyZ2V0IGFzIFNWR0VsZW1lbnQpLnNldFBvaW50ZXJDYXB0dXJlKGV2LnBvaW50ZXJJZCk7XG4gICAgY29uc3QgbG9jID0gbWluX3AodGhpcy4jc2JveC5waW4sIHRoaXMuI3Nib3gubW91c2UpO1xuICAgIGNvbnN0IGRpbSA9IGFic19wKHN1Yl9wKHRoaXMuI3Nib3gucGluLCB0aGlzLiNzYm94Lm1vdXNlKSk7XG5cbiAgICBjb25zdCBib3ggPSB7XG4gICAgICBzdGFydDogbG9jLFxuICAgICAgZW5kOiBhZGRfcChsb2MsIGRpbSksXG4gICAgfTtcblxuICAgIGNvbnN0IHNlbCA9IHRoaXMudG9rZW5zLm9yZGVyXG4gICAgICAuZmlsdGVyKCh0KSA9PlxuICAgICAgICBpbnRlcnNlY3QoYm94LCB7XG4gICAgICAgICAgc3RhcnQ6IHQubG9jLFxuICAgICAgICAgIGVuZDogYWRkX3AodC5sb2MsIHQuZGltKSxcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC5tYXAoKHQpID0+IHQuaWQpO1xuXG4gICAgdGhpcy4jc2JveCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQod2luZG93X2V2KFwidG9rZW4tc2VsZWN0XCIsIHNlbCkpO1xuICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgpO1xuICB9XG5cbiAgI3NlbGVjdGlvbl9iYm94KCk6IFNlbGVjdGlvbkJveCB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uLnNpemUgPT09IDApIHJldHVybjtcbiAgICBjb25zdCBzID0gQXJyYXkuZnJvbSh0aGlzLnNlbGVjdGlvbiwgKHQpID0+IHRoaXMudG9rZW5zLmdldCh0KSkuZmlsdGVyKCh0KSA9PiB0KSBhcyBUb2tlbkRhdGFbXTtcbiAgICBjb25zdCBpbmRleCA9IE1hdGgubWF4KC4uLm1hcCh0aGlzLnNlbGVjdGlvbi52YWx1ZXMoKSwgKGlkKSA9PiB0aGlzLnRva2Vucy5pbmRleChpZCkhKSk7XG4gICAgbGV0IHN0YXJ0ID0gc1swXSEubG9jO1xuICAgIGxldCBlbmQgPSBhZGRfcChzWzBdIS5sb2MsIHNbMF0hLmRpbSk7XG5cbiAgICBzLmZvckVhY2goKHQpID0+IHtcbiAgICAgIHN0YXJ0ID0gbWluX3Aoc3RhcnQsIHQubG9jKTtcbiAgICAgIGVuZCA9IG1heF9wKGVuZCwgYWRkX3AodC5sb2MsIHQuZGltKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4geyBpbmRleCwgYmJveDogeyBzdGFydCwgZW5kIH0gfTtcbiAgfVxuXG4gICNkcmFnX29mZnNldD86IFBvaW50O1xuXG4gIEBldmVudE9wdGlvbnMoeyBjYXB0dXJlOiB0cnVlLCBwYXNzaXZlOiBmYWxzZSB9KVxuICBzZWxlY3Rpb25fZHJhZ19zdGFydChldjogUG9pbnRlckV2ZW50KSB7XG4gICAgaWYgKCFpc19wcmltYXJ5X2Rvd24oZXYpKSByZXR1cm47XG4gICAgY29uc3Qgc3ZnX2Nvb3JkID0gdGhpcy4jc2NyZWVuX3RvX3N2ZyhldikgYXMgUG9pbnQ7XG4gICAgc3RvcF9ldihldik7XG4gICAgKGV2LnRhcmdldCBhcyBTVkdFbGVtZW50KS5zZXRQb2ludGVyQ2FwdHVyZShldi5wb2ludGVySWQpO1xuICAgIHRoaXMuI2RyYWdfb2Zmc2V0ID0gc3ZnX2Nvb3JkO1xuICB9XG5cbiAgI3NlbGVjdGlvbl90cmFuc2Zvcm0gPSB7IG1vdmU6IFswLCAwXSBhcyBQb2ludCwgcmVzaXplOiBbMCwgMF0gYXMgUG9pbnQsIHI6IDAgfTtcblxuICBAZXZlbnRPcHRpb25zKHsgY2FwdHVyZTogdHJ1ZSwgcGFzc2l2ZTogZmFsc2UgfSlcbiAgc2VsZWN0aW9uX2RyYWcoZXY6IFBvaW50ZXJFdmVudCkge1xuICAgIGNvbnNvbGUubG9nKFwiZHJhZyBmaXJlZFwiKTtcbiAgICBpZiAoIWlzX3ByaW1hcnlfZG93bihldikpIHJldHVybjtcbiAgICBpZiAoIXRoaXMuI2RyYWdfb2Zmc2V0KSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbl9kcmFnX3N0YXJ0KGV2KTtcbiAgICB9XG4gICAgc3RvcF9ldihldik7XG4gICAgY29uc3QgZ3JpZF9sb2MgPSBjbGFtcF9wKFswLCAwXSwgdGhpcy4jZGltLCB0aGlzLiNzY3JlZW5fdG9fc3ZnKGV2KSk7XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gdGhpcy50b2tlbnMuZ2V0KHRoaXMuc2VsZWN0aW9uLnZhbHVlcygpLm5leHQoKS52YWx1ZSkhO1xuICAgIGNvbnN0IGRpbSA9IHNlbGVjdGlvbi5kaW07XG4gICAgY29uc3QgbG9jID0gc2VsZWN0aW9uLmxvYztcbiAgICBjb25zdCBjbGFzc2VzID0gKGV2LnRhcmdldCBhcyBTVkdHcmFwaGljc0VsZW1lbnQpLmNsYXNzTGlzdDtcbiAgICBsZXQgbW92ZSA9IFswLCAwXSBhcyBQb2ludDtcbiAgICBsZXQgcmVzaXplID0gWzAsIDBdIGFzIFBvaW50O1xuICAgIGxldCByID0gMDtcblxuICAgIGlmIChjbGFzc2VzLmNvbnRhaW5zKFwicm5cIikpIHtcbiAgICAgIHJlc2l6ZVsxXSA9IGxvY1sxXSAtIG5lYXJlc3RfY29ybmVyKGdyaWRfbG9jWzFdKTtcbiAgICAgIG1vdmVbMV0gPSBuZWFyZXN0X2Nvcm5lcihncmlkX2xvY1sxXSkgLSBsb2NbMV07XG4gICAgfVxuXG4gICAgaWYgKGNsYXNzZXMuY29udGFpbnMoXCJyd1wiKSkge1xuICAgICAgcmVzaXplWzBdID0gbG9jWzBdIC0gbmVhcmVzdF9jb3JuZXIoZ3JpZF9sb2NbMF0pO1xuICAgICAgbW92ZVswXSA9IG5lYXJlc3RfY29ybmVyKGdyaWRfbG9jWzBdKSAtIGxvY1swXTtcbiAgICB9XG5cbiAgICBpZiAoY2xhc3Nlcy5jb250YWlucyhcInJzXCIpKSB7XG4gICAgICByZXNpemVbMV0gPSBuZWFyZXN0X2Nvcm5lcihncmlkX2xvY1sxXSkgLSBkaW1bMV0gLSBsb2NbMV07XG4gICAgfVxuXG4gICAgaWYgKGNsYXNzZXMuY29udGFpbnMoXCJyZVwiKSkge1xuICAgICAgcmVzaXplWzBdID0gbmVhcmVzdF9jb3JuZXIoZ3JpZF9sb2NbMF0pIC0gZGltWzBdIC0gbG9jWzBdO1xuICAgIH1cblxuICAgIGlmIChjbGFzc2VzLmNvbnRhaW5zKFwicm9cIikpIHtcbiAgICAgIGNvbnN0IGNlbnRlciA9IGFkZF9wKGxvYywgZGl2X2MoZGltLCAyKSk7XG4gICAgICBjb25zdCByZWwgPSBzdWJfcChncmlkX2xvYywgY2VudGVyKTtcbiAgICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5hdGFuMihyZWxbMF0sIC1yZWxbMV0pO1xuICAgICAgY29uc3QgZGVnID0gKGFuZ2xlICogMTgwKSAvIE1hdGguUEk7XG4gICAgICByID0gTWF0aC5yb3VuZChkZWcgLyA5MCkgKiA5MCAtIChzZWxlY3Rpb24uciAlIDM2MCk7XG4gICAgfVxuXG4gICAgaWYgKGNsYXNzZXMuY29udGFpbnMoXCJzZWxlY3Rpb24tZHJhZy10YXJnZXRcIikpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwibW92ZVwiKTtcbiAgICAgIG1vdmUgPSBzdWJfcChncmlkX2xvYywgdGhpcy4jZHJhZ19vZmZzZXQhKS5tYXAobmVhcmVzdF9jb3JuZXIpIGFzIFBvaW50O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBEb24ndCBsZXQgdG9wLWxlZnQgZHJhZ3MgY2F1c2UgbW92ZW1lbnQgcGFzIHRoZSBkaW1lbnNpb25zXG4gICAgICBtb3ZlID0gbWluX3AoYWRkX2MoZGltLCAtR1JJRF9TSVpFKSwgbW92ZSk7XG4gICAgICAvLyBDb25zdHJhaW4gdGhlIHRyYW5zZm9ybSBmcm9tIG1ha2luZyBhbnl0aGluZyBzbWFsbGVyIHRoYW4gYSBncmlkXG4gICAgICByZXNpemUgPSBtYXhfcChhZGRfYyhtdWxfYyhkaW0sIC0xKSwgR1JJRF9TSVpFKSwgcmVzaXplIGFzIFBvaW50KTtcbiAgICB9XG5cbiAgICBpZiAociAhPT0gdGhpcy4jc2VsZWN0aW9uX3RyYW5zZm9ybS5yIHx8ICFlcV9wKG1vdmUsIHRoaXMuI3NlbGVjdGlvbl90cmFuc2Zvcm0ubW92ZSkgfHwgIWVxX3AocmVzaXplLCB0aGlzLiNzZWxlY3Rpb25fdHJhbnNmb3JtLnJlc2l6ZSkpIHtcbiAgICAgIHRoaXMuI2RyYWdfb2Zmc2V0ID0gYWRkX3AodGhpcy4jZHJhZ19vZmZzZXQhLCBtb3ZlKTtcbiAgICAgIHRoaXMuI3NlbGVjdGlvbl90cmFuc2Zvcm0gPSB7IG1vdmU6IFswLCAwXSBhcyBQb2ludCwgcmVzaXplOiBbMCwgMF0gYXMgUG9pbnQsIHI6IDAgfTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgZ2FtZV9ldmVudCh7XG4gICAgICAgICAgdHlwZTogXCJ0b2tlbi1tYW5pcHVsYXRlZFwiLFxuICAgICAgICAgIHRva2VuczogQXJyYXkuZnJvbSh0aGlzLnNlbGVjdGlvbiwgKGlkKSA9PiB7XG4gICAgICAgICAgICBsZXQgc2VsZWN0aW9uID0gdGhpcy50b2tlbnMuZ2V0KGlkKSE7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBpZDogc2VsZWN0aW9uLmlkLFxuICAgICAgICAgICAgICBsb2M6IGFkZF9wKHNlbGVjdGlvbi5sb2MsIG1vdmUpLFxuICAgICAgICAgICAgICBkaW06IGFkZF9wKHNlbGVjdGlvbi5kaW0sIHJlc2l6ZSksXG4gICAgICAgICAgICAgIHI6IHNlbGVjdGlvbi5yICsgcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIEBldmVudE9wdGlvbnMoeyBjYXB0dXJlOiB0cnVlLCBwYXNzaXZlOiBmYWxzZSB9KVxuICBzZWxlY3Rpb25fZHJhZ19lbmQoZXY6IFBvaW50ZXJFdmVudCkge1xuICAgIHN0b3BfZXYoZXYpO1xuICAgIHRoaXMuI2RyYWdfb2Zmc2V0ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gTm9ybWFsbHkgd2UnZCB1c2UgU1ZHIG1hY2hpbmVyeSBidXQgaXQncyBicm9rZW4gaW4gb25lIGJyb3dzZXIuLi5cbiAgLy8gLi4uIEknbGwgbGV0IHlvdSBndWVzcyB3aG8uLi5cbiAgLy8gLi4uIGl0J3Mgc2FmYXJpXG4gICNzY3JlZW5fdG9fc3ZnID0gKGV2OiB7IGNsaWVudFg6IG51bWJlcjsgY2xpZW50WTogbnVtYmVyIH0pOiBQb2ludCA9PiB7XG4gICAgbGV0IHJlcyA9IHN1Yl9wKHRoaXMudmlld3BvcnQhLmNvb3JkVG9Mb2NhbChbZXYuY2xpZW50WCwgZXYuY2xpZW50WV0pLCBbUEFERElORywgUEFERElOR10pO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgI2tleWRvd24gPSAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICBpZiAoIXRoaXMuc2VsZWN0aW9uKSByZXR1cm47XG5cbiAgICAvLyBCYWNrc3BhY2VcbiAgICBpZiAoZXYua2V5Q29kZSA9PT0gOCkge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBnYW1lX2V2ZW50KHtcbiAgICAgICAgICB0eXBlOiBcInRva2VuLXJlbW92ZWRcIixcbiAgICAgICAgICBpZHM6IEFycmF5LmZyb20odGhpcy5zZWxlY3Rpb24pLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIHN0b3BfZXYoZXYpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldi5rZXkgPT09IFwielwiICYmIHRoaXMuI21vdXNlX2xvYykge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBnYW1lX2V2ZW50KHtcbiAgICAgICAgICB0eXBlOiBcImNhbGxvdXRcIixcbiAgICAgICAgICBsb2M6IHRoaXMuI3NjcmVlbl90b19zdmcodGhpcy4jbW91c2VfbG9jKSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IHMgPSB0aGlzLnRva2Vucy5nZXQodGhpcy5zZWxlY3Rpb24udmFsdWVzKCkubmV4dCgpLnZhbHVlKSE7XG4gICAgY29uc3QgbW92ZW1lbnRzOiB7IFtrZXk6IHN0cmluZ106IFBvaW50IH0gPSB7XG4gICAgICBBcnJvd1VwOiBbMCwgLUdSSURfU0laRV0sXG4gICAgICBBcnJvd0Rvd246IFswLCBHUklEX1NJWkVdLFxuICAgICAgQXJyb3dMZWZ0OiBbLUdSSURfU0laRSwgMF0sXG4gICAgICBBcnJvd1JpZ2h0OiBbR1JJRF9TSVpFLCAwXSxcbiAgICB9O1xuXG4gICAgbGV0IG1vdmU6IFBvaW50IHwgdW5kZWZpbmVkID0gbW92ZW1lbnRzW2V2LmtleV07XG4gICAgaWYgKG1vdmUpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgZ2FtZV9ldmVudCh7XG4gICAgICAgICAgdHlwZTogXCJ0b2tlbi1tYW5pcHVsYXRlZFwiLFxuICAgICAgICAgIHRva2VuczogQXJyYXkuZnJvbSh0aGlzLnNlbGVjdGlvbiwgKGlkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gdGhpcy50b2tlbnMuZ2V0KGlkKSE7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBjbGFtcF9wKFswLCAwXSwgc3ViX3AodGhpcy4jZGltLCBzLmRpbSksIGFkZF9wKHMubG9jLCBtb3ZlISkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgaWQ6IHMuaWQsXG4gICAgICAgICAgICAgIGxvYzogbG9jLFxuICAgICAgICAgICAgICBkaW06IHMuZGltLFxuICAgICAgICAgICAgICByOiBzLnIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIHN0b3BfZXYoZXYpO1xuICAgIH1cbiAgfTtcblxuICBzdGF0aWMgc3R5bGVzID0gY3NzYFxuICAgIDpob3N0IHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgLS1zZWxlY3Rpb24tY29sb3I6IGNvcm5mbG93ZXJibHVlO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB9XG5cbiAgICBwLXAteiB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDA7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgcmlnaHQ6IDA7XG4gICAgICBib3R0b206IDA7XG4gICAgfVxuICAgICNyb290IHtcbiAgICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICB9XG5cbiAgICAjc2JveCB7XG4gICAgICBzdHJva2U6IHZhcigtLXNlbGVjdGlvbi1jb2xvcik7XG4gICAgICBzdHJva2Utd2lkdGg6IDFweDtcbiAgICAgIGZpbGw6IHZhcigtLXNlbGVjdGlvbi1jb2xvcik7XG4gICAgICBmaWxsLW9wYWNpdHk6IDAuMjtcbiAgICB9XG5cbiAgICAjYmctZHJvcCB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICByaWdodDogNXB4O1xuICAgICAgYm90dG9tOiAtNjBweDtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIGhlaWdodDogNTBweDtcbiAgICAgIHRyYW5zaXRpb246IGJvdHRvbSAyNTBtcztcbiAgICAgIGJhY2tncm91bmQ6IHZhcigtLXVpLWJnKTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDVweCA1cHggMCAwO1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIHBhZGRpbmc6IDVweDtcbiAgICAgIGdyaWQ6IDFmciAxZnI7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgICNiZy1kcm9wLmNhbnZhcyxcbiAgICAjYmctZHJvcC5iZyB7XG4gICAgICBib3R0b206IDA7XG4gICAgICBib3gtc2hhZG93OiAycHggNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICAjYmctZHJvcC1sYWJlbCB7XG4gICAgICAtLWNvbG9yOiBncmF5O1xuICAgICAgcGFkZGluZzogMCAxZW07XG4gICAgICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1jb2xvcik7XG4gICAgICBjb2xvcjogdmFyKC0tY29sb3IpO1xuICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIH1cblxuICAgIC5iZyA+ICNiZy1kcm9wLWxhYmVsIHtcbiAgICAgIC0tY29sb3I6IGJsdWU7XG4gICAgfVxuXG4gICAgc3ZnIHtcbiAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIH1cblxuICAgICNzdXJmYWNlIHtcbiAgICAgIGNsaXAtcGF0aDogcmVjdCgxMDAlKTtcbiAgICB9XG5cbiAgICAuc2hhZG93IHtcbiAgICAgIHN0cm9rZS13aWR0aDogJHtMSU5FX1dJRFRIfTtcbiAgICAgIHN0cm9rZTogcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgICAgZmlsdGVyOiBkcm9wLXNoYWRvdygycHggNHB4IDZweCByZ2JhKDAsIDAsIDAsIDAuMykpO1xuICAgIH1cblxuICAgIC5kcm9wX2hpbnQge1xuICAgICAgdHJhbnNpdGlvbjogbm9uZTtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgZmlsbDogZ3JheTtcbiAgICB9XG5cbiAgICAuc2VsZWN0aW9uLWJveCxcbiAgICBsaW5lLnJvIHtcbiAgICAgIHN0cm9rZTogdmFyKC0tc2VsZWN0aW9uLWNvbG9yKTtcbiAgICAgIHN0cm9rZS13aWR0aDogMXB4O1xuICAgICAgZmlsdGVyOiBkcm9wLXNoYWRvdygwcHggMHB4IDJweCB2YXIoLS1zZWxlY3Rpb24tY29sb3IpKTtcbiAgICAgIGZpbGw6IHRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIC5zZWxlY3Rpb24tYm94IHtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgLnJuLFxuICAgIC5ycyxcbiAgICAucmUsXG4gICAgLnJ3IHtcbiAgICAgIHN0cm9rZS13aWR0aDogJHtIQU5ETEVfU0laRX07XG4gICAgICB2ZWN0b3ItZWZmZWN0OiBub24tc2NhbGluZy1zdHJva2U7XG4gICAgICBzdHJva2U6IHRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIC5oYW5kbGUge1xuICAgICAgc3Ryb2tlLXdpZHRoOiAxcHg7XG4gICAgICBmaWxsOiB2YXIoLS1zZWxlY3Rpb24tY29sb3IpO1xuICAgICAgc3Ryb2tlOiB3aGl0ZTtcbiAgICB9XG5cbiAgICAuc2VsZWN0aW9uLWRyYWctdGFyZ2V0IHtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBmaWxsO1xuICAgICAgY3Vyc29yOiBtb3ZlO1xuICAgIH1cblxuICAgIHJlY3QuaGFuZGxlIHtcbiAgICAgIHdpZHRoOiAke0hBTkRMRV9TSVpFfXB4O1xuICAgICAgaGVpZ2h0OiAke0hBTkRMRV9TSVpFfXB4O1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoJHstSEFORExFX1NJWkUgLyAyfXB4LCAkey1IQU5ETEVfU0laRSAvIDJ9cHgpO1xuICAgIH1cblxuICAgIC5yby5oYW5kbGUge1xuICAgICAgY3Vyc29yOiBjcm9zc2hhaXI7XG4gICAgfVxuXG4gICAgLnJuLnJlLFxuICAgIC5ycy5ydyB7XG4gICAgICBjdXJzb3I6IG5lc3ctcmVzaXplO1xuICAgIH1cblxuICAgIC5ybi5ydyxcbiAgICAucnMucmUge1xuICAgICAgY3Vyc29yOiBud3NlLXJlc2l6ZTtcbiAgICB9XG5cbiAgICAucm4sXG4gICAgLnJzIHtcbiAgICAgIGN1cnNvcjogcm93LXJlc2l6ZTtcbiAgICB9XG5cbiAgICAucmUsXG4gICAgLnJ3IHtcbiAgICAgIGN1cnNvcjogY29sLXJlc2l6ZTtcbiAgICB9XG5cbiAgICBwLXAteiB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRlZGYwO1xuICAgIH1cblxuICAgIC50b2tlbiB7XG4gICAgICB0cmFuc2Zvcm0tYm94OiBmaWxsLWJveDtcbiAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcbiAgICAgIGZpbGw6IHRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIC50b2tlbiArIC5sb2FkaW5nIHtcbiAgICAgIGZpbGw6IHVybCgjbG9hZGluZyk7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICB9XG5cbiAgICAudG9rZW4ubG9hZGVkICsgLmxvYWRpbmcge1xuICAgICAgZmlsbDogdHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgI3NlbGVjdGlvbiB7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICB9XG5cbiAgICAjc2VsZWN0aW9uICoge1xuICAgICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgfVxuICBgO1xufVxuXG5leHBvcnQgdHlwZSBUb2tlbkRyb3BFdmVudCA9IEN1c3RvbUV2ZW50PHsgbG9jOiBQb2ludDsgZGltOiBQb2ludDsgaW1nOiBMb2NhbE9yUmVtb3RlSW1hZ2UgfT47XG5leHBvcnQgdHlwZSBCZ0Ryb3BFdmVudCA9IEN1c3RvbUV2ZW50PExvY2FsT3JSZW1vdGVJbWFnZT47XG5leHBvcnQgdHlwZSBUb2tlblNlbGVjdEV2ZW50ID0gQ3VzdG9tRXZlbnQ8c3RyaW5nW10+O1xuZXhwb3J0IHR5cGUgVG9rZW5EZWxldGVFdmVudCA9IEN1c3RvbUV2ZW50PHN0cmluZz47XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvd0V2ZW50TWFwIHtcbiAgICBcInRva2VuLWRyb3BcIjogVG9rZW5Ecm9wRXZlbnQ7XG4gICAgXCJiZy1kcm9wXCI6IEJnRHJvcEV2ZW50O1xuICAgIFwidG9rZW4tc2VsZWN0XCI6IFRva2VuU2VsZWN0RXZlbnQ7XG4gIH1cbn1cblxuY29uc3QgbmVhcmVzdF9jb3JuZXIgPSAobjogbnVtYmVyKSA9PiBNYXRoLnJvdW5kKG4gLyBHUklEX1NJWkUpICogR1JJRF9TSVpFO1xuY29uc3Qgb2NjdXBpZWRfY2VsbCA9IChuOiBudW1iZXIpID0+IG4gLSAobiAlIEdSSURfU0laRSk7XG5jb25zdCBtYXJrX2xvYWRlZCA9IChldjogYW55KSA9PiBldi50YXJnZXQuY2xhc3NMaXN0LmFkZChcImxvYWRlZFwiKTtcbiIsImltcG9ydCB7IGNzcywgQ1NTUmVzdWx0R3JvdXAsIGh0bWwsIExpdEVsZW1lbnQgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBzdGF0ZSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgc3RvcF9ldiB9IGZyb20gXCIuLi91dGlsL2V2ZW50c1wiO1xuXG5AY3VzdG9tRWxlbWVudChcImJ1eS1tZS1hLWNvZmZlZVwiKVxuZXhwb3J0IGNsYXNzIEJ1eU1lQUNvZmZlZSBleHRlbmRzIExpdEVsZW1lbnQge1xuICBAc3RhdGUoKVxuICBfc3RhdGUgPSBmYWxzZTtcblxuICBAc3RhdGUoKVxuICBfbG9hZGVkID0gZmFsc2U7XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGJ1dHRvbiBAY2xpY2s9JHt0aGlzLl9idXl9PkJ1eSBNZSBBIENvZmZlZTwvYnV0dG9uPlxuICAgICAgJHt0aGlzLl9zdGF0ZVxuICAgICAgICA/IGh0bWxgXG4gICAgICAgICAgICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgIDxpZnJhbWVcbiAgICAgICAgICAgICAgICBjbGFzcz0ke3RoaXMuX2xvYWRlZCA/IFwibG9hZGVkXCIgOiBcIlwifVxuICAgICAgICAgICAgICAgIGFsbG93PVwicGF5bWVudFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9rby1maS5jb20vZGpyZW5yZW4vP2hpZGVmZWVkPXRydWUmd2lkZ2V0PXRydWUmZW1iZWQ9dHJ1ZSZwcmV2aWV3PXRydWVcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiZGpyZW5yZW5cIlxuICAgICAgICAgICAgICAgIEBsb2FkPSR7dGhpcy4jaWZyYW1lX2xvYWR9XG4gICAgICAgICAgICAgID48L2lmcmFtZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIGBcbiAgICAgICAgOiBudWxsfVxuICAgIGA7XG4gIH1cblxuICBfYnV5ID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJDTElDS1wiKTtcbiAgICBzdG9wX2V2KGV2KTtcbiAgICB0aGlzLl9zdGF0ZSA9IHRydWU7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuI2Nsb3NlLCB7IGNhcHR1cmU6IHRydWUgfSk7XG4gIH07XG5cbiAgI2Nsb3NlID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgc3RvcF9ldihldik7XG4gICAgdGhpcy5fc3RhdGUgPSBmYWxzZTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy4jY2xvc2UsIHsgY2FwdHVyZTogdHJ1ZSB9KTtcbiAgfTtcblxuICAjaWZyYW1lX2xvYWQgPSAoZXY6IEV2ZW50KSA9PiB7XG4gICAgdGhpcy5fbG9hZGVkID0gdHJ1ZTtcbiAgfTtcblxuICBzdGF0aWMgc3R5bGVzID0gY3NzYFxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbiAgICBpZnJhbWUge1xuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNXMgbGluZWFyO1xuICAgIH1cblxuICAgICNjb250YWluZXIge1xuICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgYm94LXNoYWRvdzogMCAwIDZweCByZ2JhKDAsIDAsIDAsIDAuNyk7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB3aWR0aDogMzUwcHg7XG4gICAgICBoZWlnaHQ6IDUyNXB4O1xuICAgICAgYm90dG9tOiAtNTM1cHg7XG4gICAgICByaWdodDogMDtcbiAgICAgIGFuaW1hdGlvbi1uYW1lOiBmYWRlO1xuICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjVzO1xuICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogYmFja3dhcmRzO1xuICAgICAgYmFja2dyb3VuZDogdXJsKFwiYXNzZXRzL2xvYWRpbmcuc3ZnXCIpIGNlbnRlci8xMDBweCBuby1yZXBlYXQsICNlZGVkZjA7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIH1cblxuICAgIGlmcmFtZS5sb2FkZWQge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG5cbiAgICBAa2V5ZnJhbWVzIGZhZGUge1xuICAgICAgMCUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgfVxuICAgICAgMTAwJSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB9XG4gICAgfVxuICBgO1xufVxuIiwiaW1wb3J0IHsgcmVhZEJ1aWxkZXJQcm9ncmFtLCByZXNvbHZlTW9kdWxlTmFtZSB9IGZyb20gXCJ0eXBlc2NyaXB0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwaXBlPFQ+KCk6IFtSZWFkYWJsZVdyaXRhYmxlUGFpcjxULCBUPiwgUmVhZGFibGVXcml0YWJsZVBhaXI8VCwgVD5dIHtcbiAgbGV0IGxlZnRfdG9fcmlnaHQgPSBuZXcgVHJhbnNmb3JtU3RyZWFtKCk7XG4gIGxldCByaWdodF90b19sZWZ0ID0gbmV3IFRyYW5zZm9ybVN0cmVhbSgpO1xuXG4gIHJldHVybiBbXG4gICAge1xuICAgICAgcmVhZGFibGU6IHJpZ2h0X3RvX2xlZnQucmVhZGFibGUsXG4gICAgICB3cml0YWJsZTogbGVmdF90b19yaWdodC53cml0YWJsZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlYWRhYmxlOiBsZWZ0X3RvX3JpZ2h0LnJlYWRhYmxlLFxuICAgICAgd3JpdGFibGU6IHJpZ2h0X3RvX2xlZnQud3JpdGFibGUsXG4gICAgfSxcbiAgXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBpdGVyPFI+KHI6IFJlYWRhYmxlU3RyZWFtPFI+KTogQXN5bmNJdGVyYWJsZTxSPiB7XG4gIGxldCBkb25lLFxuICAgIHZhbHVlLFxuICAgIHJlYWRlciA9IHIuZ2V0UmVhZGVyKCk7XG5cbiAgd2hpbGUgKCh7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpKSAmJiAhZG9uZSkge1xuICAgIHlpZWxkIHZhbHVlITtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29uc3VtZTxSPihyOiBSZWFkYWJsZVN0cmVhbTxSPiwgd3JpdGU6IChjaHVuazogUikgPT4gYW55LCBzaWduYWw/OiBBYm9ydFNpZ25hbCk6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gci5waXBlVG8obmV3IFdyaXRhYmxlU3RyZWFtKHsgd3JpdGUgfSksIHsgc2lnbmFsIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24ganNvbjxUPihyOiBSZWFkYWJsZVdyaXRhYmxlUGFpcjxzdHJpbmcsIHN0cmluZz4pOiBSZWFkYWJsZVdyaXRhYmxlUGFpcjxULCBUPiB7XG4gIGxldCBlbmNvZGUgPSBuZXcgVHJhbnNmb3JtU3RyZWFtPFQsIHN0cmluZz4oe1xuICAgIHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuICAgICAgY29udHJvbGxlci5lbnF1ZXVlKEpTT04uc3RyaW5naWZ5KGNodW5rKSk7XG4gICAgfSxcbiAgfSk7XG4gIGVuY29kZS5yZWFkYWJsZS5waXBlVG8oci53cml0YWJsZSk7XG5cbiAgcmV0dXJuIHtcbiAgICByZWFkYWJsZTogci5yZWFkYWJsZS5waXBlVGhyb3VnaChcbiAgICAgIG5ldyBUcmFuc2Zvcm1TdHJlYW08c3RyaW5nLCBUPih7XG4gICAgICAgIHRyYW5zZm9ybShjaHVuaywgY29udHJvbGxlcikge1xuICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShKU09OLnBhcnNlKGNodW5rKSk7XG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICksXG5cbiAgICB3cml0YWJsZTogZW5jb2RlLndyaXRhYmxlLFxuICB9O1xufVxuXG5leHBvcnQgdHlwZSBTdGF0dXMgPSBcImNvbm5lY3RlZFwiIHwgXCJjb25uZWN0aW5nXCIgfCBcImNsb3NlZFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFib3J0YWJsZVN0cmVhbTxSLCBXPiBleHRlbmRzIFJlYWRhYmxlV3JpdGFibGVQYWlyPFIsIFc+IHtcbiAgYWJvcnQoKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuLy8gZXhwb3J0IGZ1bmN0aW9uIHBpcCgpOiBSZWFkYWJsZVdyaXRhYmxlUGFpcjxhbnksIGFueT4ge1xuLy8gICBsZXQgcmVhZGVyO1xuLy8gICBsZXQgd3JpdGVyO1xuLy8gICBsZXQgY29udHJvbGxlcjogUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcjtcbi8vICAgcmVhZGVyID0gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbi8vICAgICBzdGFydChjb250cm9sbGVyKSB7Y29udHJvbGxlciA9IGNvbnRyb2xsZXJ9XG4vLyAgIH0pO1xuLy8gICB3cml0ZXIgPSBuZXcgV3JpdGFibGVTdHJlYW0oe1xuLy8gICAgIHdyaXRlKGNodW5rKSB7XG4vLyAgICAgICBjb250cm9sbGVyLmVucXVldWVcbi8vICAgICB9XG4vLyAgIH0pXG4vLyB9XG5cbi8vIC8qKlxuLy8gICogQ3JlYXRlcyBhIGEgc3RhYmxlIHN0cmVhbSBieSByZXByb2R1Y2luZyBhbiB1bmRlcmx5aW5nIHN0cmVhbSB3aGVuZXZlciBpdCBjbG9zZXNcbi8vICAqIEBwYXJhbSBidWlsZGVyIHRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIHVuZGVybHlpbmcgc3RyZWFtXG4vLyAgKiBAcmV0dXJucyBBIHN0cmVhbVxuLy8gICovXG4vLyBleHBvcnQgZnVuY3Rpb24gZHVyYWJsZTxSLCBXPihidWlsZGVyOiAoKSA9PiBQcm9taXNlPFJlYWRhYmxlV3JpdGFibGVQYWlyPFIsIFc+Pik6IFJlYWRhYmxlV3JpdGFibGVQYWlyPFIsIFc+IHtcbi8vICAgbGV0IHVuZGVybHlpbmc6IFByb21pc2U8e1xuLy8gICAgIHdyaXRlcjogV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLFxuLy8gICAgIHJlYWRlcjogUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLFxuLy8gICB9PlxuXG4vLyAgIGxldCB0aW1lb3V0OiBQcm9taXNlPHZvaWQ+ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4vLyAgIGxldCBub2J1ZmZlciA9IG5ldyBDb3VudFF1ZXVpbmdTdHJhdGVneSh7aGlnaFdhdGVyTWFyazogMH0pO1xuLy8gICBsZXQgbG9hZGluZyA9IGZhbHNlO1xuLy8gICBsZXQgcmVsb2FkID0gKCkgPT4ge1xuLy8gICAgIGNvbnNvbGUubG9nKCdyZXF1ZXN0aW5nIGEgcmVsb2FkJyk7XG4vLyAgICAgaWYgKGxvYWRpbmcpIHsgcmV0dXJuOyB9XG4vLyAgICAgY29uc29sZS5sb2coJ3BlcmZvcm1pbmcgYSByZWxvYWQnKTtcbi8vICAgICBsb2FkaW5nID0gdHJ1ZTtcbi8vICAgICB1bmRlcmx5aW5nPy50aGVuKHUgPT4ge1xuLy8gICAgICAgdS5yZWFkZXIuY2xvc2VkIHx8IHUucmVhZGVyLmNhbmNlbChcIlJlc3RhcnRpbmcgc3RyZWFtXCIpO1xuLy8gICAgICAgdS53cml0ZXIuY2xvc2VkIHx8IHUud3JpdGVyLmNsb3NlKCk7XG4vLyAgICAgfSlcblxuLy8gICAgIHVuZGVybHlpbmcgPSB0aW1lb3V0LnRoZW4oKCkgPT4gYnVpbGRlcigpKS50aGVuKCh7cmVhZGFibGUsIHdyaXRhYmxlfSkgPT4gKHtcbi8vICAgICAgIHJlYWRlcjogcmVhZGFibGUuZ2V0UmVhZGVyKCksXG4vLyAgICAgICB3cml0ZXI6IHdyaXRhYmxlLmdldFdyaXRlcigpLFxuLy8gICAgIH0pKVxuLy8gICAgIHRpbWVvdXQgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xuLy8gICAgIHVuZGVybHlpbmcuZmluYWxseSgoKSA9PiBsb2FkaW5nID0gZmFsc2UpO1xuLy8gICB9XG5cbi8vICAgcmVsb2FkKCk7XG5cbi8vICAgbGV0IHdyaXRhYmxlID0gbmV3IFdyaXRhYmxlU3RyZWFtKHtcbi8vICAgICBhc3luYyB3cml0ZShjaHVuaykge1xuLy8gICAgICAgd2hpbGUodHJ1ZSkge1xuLy8gICAgICAgICB0cnkge1xuLy8gICAgICAgICAgIGNvbnNvbGUubG9nKFwiV1JJVElORyBDSFVOS1wiLCBjaHVuayk7XG4vLyAgICAgICAgICAgYXdhaXQgKChhd2FpdCB1bmRlcmx5aW5nKS53cml0ZXIpLndyaXRlKGNodW5rKTtcbi8vICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNIVU5LIFdSSVRURU5cIik7XG4vLyAgICAgICAgICAgcmV0dXJuO1xuLy8gICAgICAgICB9IGNhdGNoIChlKXtcbi8vICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd3JpdGluZzogXCIsIGUsIFwiLi4uIHJlbG9hZGluZ1wiKTtcbi8vICAgICAgICAgICByZWxvYWQoKTtcbi8vICAgICAgICAgfVxuLy8gICAgICAgfVxuLy8gICAgIH0sXG4vLyAgICAgYXN5bmMgYWJvcnQocmVhc29uKSB7XG4vLyAgICAgICBjb25zb2xlLmxvZyhcIndyaXRhYmxlIGFib3J0ZWRcIik7O1xuLy8gICAgICAgdHJ5IHtcbi8vICAgICAgICAgYXdhaXQgKChhd2FpdCB1bmRlcmx5aW5nKS53cml0ZXIpLmFib3J0KHJlYXNvbik7XG5cbi8vICAgICAgIH0gY2F0Y2gge31cbi8vICAgICB9LFxuXG4vLyAgICAgYXN5bmMgY2xvc2UoKSB7XG4vLyAgICAgICBjb25zb2xlLmxvZyhcIndyaXRhYmxlIGNsb3NlZFwiKTs7XG4vLyAgICAgICB0cnkge1xuLy8gICAgICAgICBhd2FpdCAoKGF3YWl0IHVuZGVybHlpbmcpLndyaXRlcikuY2xvc2UoKTtcbi8vICAgICAgIH0gY2F0Y2gge31cbi8vICAgICB9XG4vLyAgIH0sIG5vYnVmZmVyKVxuXG4vLyAgIGxldCBjYW5jZWxlZCA9IGZhbHNlO1xuLy8gICBsZXQgcmVhZGFibGUgPSBuZXcgUmVhZGFibGVTdHJlYW0oe1xuLy8gICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuLy8gICAgICAgd2hpbGUoIWNhbmNlbGVkKSB7XG4vLyAgICAgICAgIHRyeSB7XG4vLyAgICAgICAgICAgbGV0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCAoKGF3YWl0IHVuZGVybHlpbmcpLnJlYWRlcikucmVhZCgpO1xuLy8gICAgICAgICAgIGlmICghZG9uZSkge1xuLy8gICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKTtcbi8vICAgICAgICAgICAgIHJldHVybjtcbi8vICAgICAgICAgICB9XG4vLyAgICAgICAgIH0gY2F0Y2gge31cblxuLy8gICAgICAgICByZWxvYWQoKTtcbi8vICAgICAgIH1cbi8vICAgICB9LFxuXG4vLyAgICAgYXN5bmMgY2FuY2VsKHJlYXNvbikge1xuLy8gICAgICAgY2FuY2VsZWQgPSB0cnVlO1xuLy8gICAgICAgY29uc29sZS5sb2coXCJyZWFkYWJsZSBjYW5jZWxlZFwiKTtcbi8vICAgICAgIHRyeSB7XG4vLyAgICAgICAgIGF3YWl0ICgoYXdhaXQgdW5kZXJseWluZykucmVhZGVyKS5jYW5jZWwocmVhc29uKTtcbi8vICAgICAgIH0gY2F0Y2gge31cbi8vICAgICB9XG4vLyAgIH0sIG5vYnVmZmVyKTtcblxuLy8gICByZXR1cm4ge1xuLy8gICAgIHJlYWRhYmxlLFxuLy8gICAgIHdyaXRhYmxlLFxuLy8gICB9O1xuLy8gfVxuIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSBcIi4uL3V0aWwvaXRlclwiO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiLi4vdXRpbC9tYXRoXCI7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSBcIi4uL3V0aWwvb3JkZXJlZG1hcFwiO1xuaW1wb3J0IHsgQnJhbmRlZCB9IGZyb20gXCIuLi91dGlsL3N0cmluZ1wiO1xuaW1wb3J0IHsgVG9rZW5EYXRhIH0gZnJvbSBcIi4vZ2FtZS1ldmVudHNcIjtcblxuZXhwb3J0IHR5cGUgVGFibGV0b3AgPSB7XG4gIHRva2VuczogT3JkZXJlZE1hcDxzdHJpbmcsIFRva2VuRGF0YT47XG4gIGdyaWRfZGltOiBQb2ludDtcbiAgYmc6IHN0cmluZyB8IG51bGw7XG59O1xuXG5leHBvcnQgdHlwZSBTZXJpYWxpemVkVGFibGV0b3AgPSBCcmFuZGVkPFwidGFibGV0b3BcIj47XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0X3RhYmxldG9wID0gKCk6IFRhYmxldG9wID0+ICh7XG4gIHRva2VuczogbmV3IE9yZGVyZWRNYXAoKSxcbiAgZ3JpZF9kaW06IFszMCwgMjBdIGFzIFBvaW50LFxuICBiZzogbnVsbCxcbn0pO1xuXG5leHBvcnQgY29uc3Qgc2VyaWFsaXplX3RidCA9ICh0OiBUYWJsZXRvcCk6IFNlcmlhbGl6ZWRUYWJsZXRvcCA9PlxuICBKU09OLnN0cmluZ2lmeSh7XG4gICAgLi4udCxcbiAgICB0b2tlbnM6IFsuLi5tYXAodC50b2tlbnMudmFsdWVzKCksICh0KSA9PiAoeyAuLi50IH0pKV0sXG4gIH0pIGFzIFNlcmlhbGl6ZWRUYWJsZXRvcDtcblxuZXhwb3J0IGNvbnN0IGRlc2VyaWFsaXplX3RidCA9ICh0OiBTZXJpYWxpemVkVGFibGV0b3ApOiBUYWJsZXRvcCA9PiB7XG4gIGxldCBwID0gSlNPTi5wYXJzZSh0KSBhcyBhbnk7XG4gIGxldCBvbSA9IG5ldyBPcmRlcmVkTWFwKCk7XG4gIHAudG9rZW5zLmZvckVhY2goKHQ6IFRva2VuRGF0YSkgPT4gb20uYWRkKHQuaWQsIHQpKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5wLFxuICAgIHRva2Vuczogb20sXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIi4uL3V0aWwvZXZlbnRzXCI7XG5pbXBvcnQgeyBMb2NhbE9yUmVtb3RlSW1hZ2UgfSBmcm9tIFwiLi4vdXRpbC9maWxlc1wiO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiLi4vdXRpbC9tYXRoXCI7XG5pbXBvcnQgeyBjb25zdW1lIH0gZnJvbSBcIi4uL3V0aWwvc3RyZWFtc1wiO1xuaW1wb3J0IHsgR2FtZUV2ZW50LCBnYW1lX2V2ZW50LCBUb2tlbkRhdGEgfSBmcm9tIFwiLi9nYW1lLWV2ZW50c1wiO1xuaW1wb3J0IHsgZGVmYXVsdF90YWJsZXRvcCwgZGVzZXJpYWxpemVfdGJ0IH0gZnJvbSBcIi4vdGFibGV0b3BcIjtcblxuY29uc3QgQ0FMTE9VVF9USU1FUiA9IDE1MDA7XG5cbnR5cGUgRXZlbnRNYXAgPSB7XG4gIFwiZ2FtZS1ldmVudFwiOiBDdXN0b21FdmVudDxHYW1lRXZlbnQ+O1xufTtcbmV4cG9ydCBjbGFzcyBHYW1lIGV4dGVuZHMgRXZlbnRUYXJnZXQgaW1wbGVtZW50cyBFdmVudEVtaXR0ZXI8RXZlbnRNYXA+IHtcbiAgdGFibGV0b3AgPSBkZWZhdWx0X3RhYmxldG9wKCk7XG4gIGNhbGxvdXRzID0gbmV3IFNldDxQb2ludD4oKTtcblxuICAjZXZlbnRfd3JpdGVyOiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXI8R2FtZUV2ZW50PjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8gVXNlIGEgc3RyZWFtIHNvIHRoYXQgZ2FtZSBldmVudCBwcm9jZXNzaW5nIGlzIGFsbG93ZWQgdG8gYmUgYXN5bmNcbiAgICAvLyBidXQgcmVtYWlucyBvcmRlcmVkLlxuICAgIGNvbnN0IGV2ZW50cyA9IG5ldyBUcmFuc2Zvcm1TdHJlYW08R2FtZUV2ZW50LCBHYW1lRXZlbnQ+KCk7XG4gICAgdGhpcy4jZXZlbnRfd3JpdGVyID0gZXZlbnRzLndyaXRhYmxlLmdldFdyaXRlcigpO1xuXG4gICAgY29uc3VtZShldmVudHMucmVhZGFibGUsIChldikgPT4gdGhpcy4jaGFuZGxlX2V2ZW50KGV2KSk7XG4gIH1cblxuICBhc3luYyBzZXRfYmcoaW1nOiBMb2NhbE9yUmVtb3RlSW1hZ2UgfCB1bmRlZmluZWQpIHtcbiAgICBjb25zdCB1cmwgPSBpbWcgPyBhd2FpdCB0aGlzLiNyZWdpc3Rlcl9yZXNvdXJjZShpbWcpIDogbnVsbDtcbiAgICB0aGlzLmFwcGx5KHtcbiAgICAgIHR5cGU6IFwiYmdcIixcbiAgICAgIHVybCxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGFkZF90b2tlbihpbWc6IExvY2FsT3JSZW1vdGVJbWFnZSwgdDogT21pdDxUb2tlbkRhdGEsIFwidXJsXCIgfCBcImlkXCI+KSB7XG4gICAgY29uc3QgaWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICAgIGNvbnN0IHVybCA9IGF3YWl0IHRoaXMuI3JlZ2lzdGVyX3Jlc291cmNlKGltZyk7XG4gICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICBpZCxcbiAgICAgIHVybCxcbiAgICAgIC4uLnQsXG4gICAgfTtcblxuICAgIHRoaXMuYXBwbHkoe1xuICAgICAgdHlwZTogXCJ0b2tlbi1hZGRlZFwiLFxuICAgICAgLi4udG9rZW4sXG4gICAgfSk7XG4gIH1cblxuICBzZXRfZGltKGRpbTogUG9pbnQpIHtcbiAgICB0aGlzLmFwcGx5KHtcbiAgICAgIHR5cGU6IFwiZ3JpZC1yZXNpemVkXCIsXG4gICAgICBkaW0sXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBhcHBseShldjogR2FtZUV2ZW50KSB7XG4gICAgYXdhaXQgdGhpcy4jZXZlbnRfd3JpdGVyLndyaXRlKGV2KTtcbiAgfVxuXG4gIGFzeW5jICNoYW5kbGVfZXZlbnQoZXY6IEdhbWVFdmVudCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHN3aXRjaCAoZXYudHlwZSkge1xuICAgICAgY2FzZSBcInRva2VuLW1hbmlwdWxhdGVkXCI6XG4gICAgICAgIGZvciAobGV0IHQgb2YgZXYudG9rZW5zKSB7XG4gICAgICAgICAgbGV0IGV4X3Rva2VuID0gdGhpcy50YWJsZXRvcC50b2tlbnMuZ2V0KHQuaWQpO1xuICAgICAgICAgIGlmICghZXhfdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVcGRhdGUgcmVjZWl2ZWQgZm9yIG5vbmV4aXN0YW50IHRva2VuXCIsIHQuaWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBPYmplY3QuYXNzaWduKGV4X3Rva2VuLCB7IGRpbTogdC5kaW0sIGxvYzogdC5sb2MsIHI6IHQuciB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInRva2VuLWFkZGVkXCI6XG4gICAgICAgIGxldCB0b2tlbiA9IHsgaWQ6IGV2LmlkLCBkaW06IGV2LmRpbSwgbG9jOiBldi5sb2MsIHVybDogZXYudXJsLCByOiAwIH07XG4gICAgICAgIHRoaXMudGFibGV0b3AudG9rZW5zLmFkZChldi5pZCwgdG9rZW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJncmlkLXJlc2l6ZWRcIjpcbiAgICAgICAgdGhpcy50YWJsZXRvcC5ncmlkX2RpbSA9IGV2LmRpbTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidG9rZW4tcmVtb3ZlZFwiOlxuICAgICAgICBmb3IgKGxldCBpZCBvZiBldi5pZHMpIHtcbiAgICAgICAgICBjb25zdCByZW1fdG9rZW4gPSB0aGlzLnRhYmxldG9wLnRva2Vucy5nZXQoaWQpO1xuICAgICAgICAgIGlmICghcmVtX3Rva2VuKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVHJpZWQgdG8gcmVtb3ZlIG5vbmV4aXN0YW50IHRva2VuXCIsIGlkKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy50YWJsZXRvcC50b2tlbnMuZGVsZXRlKHJlbV90b2tlbi5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzdGF0ZS1zeW5jXCI6XG4gICAgICAgIHRoaXMudGFibGV0b3AgPSBkZXNlcmlhbGl6ZV90YnQoZXYudGFibGV0b3ApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInRva2VuLXJlb3JkZXJcIjpcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy50YWJsZXRvcC50b2tlbnMuaW5kZXgoZXYuaWQpO1xuICAgICAgICBpZiAoaWR4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVHJpZWQgdG8gcmVvcmRlciBub24tZXhpc3RhbnQgdG9rZW5cIiwgZXYuaWQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0YXJnZXQ7XG4gICAgICAgIGlmIChldi5pZHggPT09IFwidG9wXCIpIHtcbiAgICAgICAgICB0YXJnZXQgPSB0aGlzLnRhYmxldG9wLnRva2Vucy5zaXplIC0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5pZHggPT09IFwiYm90dG9tXCIpIHtcbiAgICAgICAgICB0YXJnZXQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2LmlkeCA9PT0gXCJ1cFwiKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gTWF0aC5taW4odGhpcy50YWJsZXRvcC50b2tlbnMuc2l6ZSAtIDEsIGlkeCArIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldCA9IE1hdGgubWF4KDAsIGlkeCAtIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50YWJsZXRvcC50b2tlbnMuc2V0X2luZGV4KGV2LmlkLCB0YXJnZXQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJiZ1wiOlxuICAgICAgICB0aGlzLnRhYmxldG9wLmJnID0gZXYudXJsO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImNhbGxvdXRcIjpcbiAgICAgICAgdGhpcy5jYWxsb3V0cy5hZGQoZXYubG9jKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jYWxsb3V0cy5kZWxldGUoZXYubG9jKTtcbiAgICAgICAgfSwgQ0FMTE9VVF9USU1FUik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIE5vdGlmeSB0aGF0IHRoZSBnYW1lIHN0YXRlIGhhcyBiZWVuIGFsdGVyZWRcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZ2FtZV9ldmVudChldikpO1xuICB9XG5cbiAgYXN5bmMgI3JlZ2lzdGVyX3Jlc291cmNlKGltZzogTG9jYWxPclJlbW90ZUltYWdlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvLyBVUkxzIGFyZSB2YWxpZCByZXNvdXJjZXNcbiAgICBpZiAodHlwZW9mIGltZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIGltZyBhcyBzdHJpbmc7XG4gICAgfVxuXG4gICAgbGV0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkpO1xuICAgIHVybC5zZWFyY2ggPSBcIlwiO1xuICAgIGxldCBpZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgdXJsLnBhdGhuYW1lID0gYC9yZXNvdXJjZXMvJHtpZH1gO1xuICAgIGxldCBjYWNoZSA9IGF3YWl0IGNhY2hlcy5vcGVuKFwicmVzb3VyY2VzXCIpO1xuICAgIGF3YWl0IGNhY2hlLnB1dCh1cmwsIG5ldyBSZXNwb25zZShpbWcpKTtcbiAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBHYW1lIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICBhZGRFdmVudExpc3RlbmVyKHR5cGU6IFwiZ2FtZS1ldmVudFwiLCBsaXN0ZW5lcjogKGV2OiBDdXN0b21FdmVudDxHYW1lRXZlbnQ+KSA9PiBhbnksIGNhcHR1cmU/OiBib29sZWFuKTogdm9pZDtcbiAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlOiBzdHJpbmcsIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyIHwgRXZlbnRMaXN0ZW5lck9iamVjdCwgdXNlQ2FwdHVyZT86IGJvb2xlYW4pOiB2b2lkO1xufVxuIiwiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCB3YWl0Rm9yIH0gZnJvbSBcIi4vZXZlbnRzXCI7XG5cbmV4cG9ydCB0eXBlIFN0YXR1cyA9IFwib3BlblwiIHwgXCJjbG9zZWRcIiB8IFwib3BlbmluZ1wiO1xuXG5leHBvcnQgdHlwZSBIYXNTdGF0dXMgPSB7IHN0YXR1czogU3RhdHVzIH0gJiBFdmVudEVtaXR0ZXI8e1xuICBzdGF0dXM6IEN1c3RvbUV2ZW50PFN0YXR1cz47XG59PjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RlZChpOiBIYXNTdGF0dXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgaGFuZGxlciA9ICh7IGRldGFpbDogc3RhdHVzIH06IHsgZGV0YWlsOiBTdGF0dXMgfSkgPT4ge1xuICAgICAgc3RhdHVzID09PSBcIm9wZW5cIiAmJiByZXNvbHZlKCk7XG4gICAgICBzdGF0dXMgPT09IFwiY2xvc2VkXCIgJiYgcmVqZWN0KCk7XG4gICAgICBpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdGF0dXNcIiwgaGFuZGxlcik7XG4gICAgfTtcbiAgICBpLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0dXNcIiwgaGFuZGxlcik7XG4gICAgaGFuZGxlcih7IGRldGFpbDogaS5zdGF0dXMgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgY2xhc3MgU3RhdHVzRW1pdHRlclxuICBleHRlbmRzIEV2ZW50VGFyZ2V0XG4gIGltcGxlbWVudHNcbiAgICBFdmVudEVtaXR0ZXI8e1xuICAgICAgc3RhdHVzOiBDdXN0b21FdmVudDxTdGF0dXM+O1xuICAgIH0+XG57XG4gICN2YWx1ZTogU3RhdHVzID0gXCJvcGVuaW5nXCI7XG4gIGdldCBjdXJyZW50KCkge1xuICAgIHJldHVybiB0aGlzLiN2YWx1ZTtcbiAgfVxuXG4gIHNldChzOiBTdGF0dXMpIHtcbiAgICB0aGlzLiN2YWx1ZSA9IHM7XG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLm9uc3RhdHVzICYmIHRoaXMub25zdGF0dXMocyksIDApO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJzdGF0dXNcIiwgeyBkZXRhaWw6IHMgfSkpO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdGVkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLiN2YWx1ZSA9PT0gXCJjbG9zZWRcIikgdGhyb3cgXCJjbG9zZWRcIjtcbiAgICBpZiAodGhpcy4jdmFsdWUgPT09IFwib3BlblwiKSByZXR1cm47XG4gICAgaWYgKHRoaXMuI3ZhbHVlID09PSBcIm9wZW5pbmdcIikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbGV0IGhhbmRsZXI6IEV2ZW50TGlzdGVuZXIgPSAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICBsZXQgcyA9IChlIGFzIEN1c3RvbUV2ZW50KS5kZXRhaWw7XG4gICAgICAgICAgaWYgKHMgPT09IFwib3BlbmluZ1wiKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAocyA9PT0gXCJjbG9zZWRcIikge1xuICAgICAgICAgICAgcmVqZWN0KFwiY2xvc2VkXCIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocyA9PT0gXCJvcGVuXCIpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdGF0dXNcIiwgaGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInN0YXR1c1wiLCBoYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uc3RhdHVzPzogKHM6IFN0YXR1cykgPT4gdm9pZDtcbn1cbiIsImltcG9ydCB7IFN0YXR1cyB9IGZyb20gXCIuL25ldFwiO1xuXG5leHBvcnQgdHlwZSBSVENNZXNzYWdlID0gc3RyaW5nIHwgQXJyYXlCdWZmZXIgfCBBcnJheUJ1ZmZlclZpZXcgfCBCbG9iO1xuXG5leHBvcnQgY29uc3Qgc3RyZWFtcyA9IDxSIGV4dGVuZHMgUlRDTWVzc2FnZSwgVyBleHRlbmRzIFJUQ01lc3NhZ2U+KGRjOiBSVENEYXRhQ2hhbm5lbCk6IFJlYWRhYmxlV3JpdGFibGVQYWlyPFIsIFc+ID0+ICh7XG4gIHJlYWRhYmxlOiByZWFkX3N0cmVhbShkYykgYXMgUmVhZGFibGVTdHJlYW08Uj4sXG4gIHdyaXRhYmxlOiB3cml0ZV9zdHJlYW0oZGMpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBvcGVuID0gYXN5bmMgKGNvbm46IFJUQ1BlZXJDb25uZWN0aW9uKTogUHJvbWlzZTxSVENQZWVyQ29ubmVjdGlvbj4gPT4ge1xuICBjb25zb2xlLmxvZyhcIk9QRU5cIik7XG4gIGlmIChjb25uLmljZUNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJjb25uZWN0ZWRcIikge1xuICAgIGNvbnNvbGUubG9nKFwiV0FUXCIpO1xuICAgIHJldHVybiBjb25uO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlBcIiwgY29ubi5pY2VDb25uZWN0aW9uU3RhdGUpO1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJPUEVOXCIsIGNvbm4uaWNlQ29ubmVjdGlvblN0YXRlKTtcbiAgICAgIGlmIChbXCJmYWlsZWRcIiwgXCJjbG9zZWRcIl0uaW5jbHVkZXMoY29ubi5pY2VDb25uZWN0aW9uU3RhdGUpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTkFJTEVEIElUXCIpO1xuICAgICAgICByZWplY3QoXCJGYWlsZWQgdG8gY29ubmVjdFwiKTtcbiAgICAgICAgY29ubi5yZW1vdmVFdmVudExpc3RlbmVyKFwiaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsIGxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoY29ubi5pY2VDb25uZWN0aW9uU3RhdGUgPT09IFwiY29ubmVjdGVkXCIpIHtcbiAgICAgICAgcmVzb2x2ZShjb25uKTtcbiAgICAgICAgY29ubi5yZW1vdmVFdmVudExpc3RlbmVyKFwiaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbm4uYWRkRXZlbnRMaXN0ZW5lcihcInNpZ25hbGluZ3N0YXRlY2hhbmdlXCIsIChldikgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJTSUdOQUxcIiwgZXYpO1xuICAgIH0pO1xuICAgIGNvbm4uYWRkRXZlbnRMaXN0ZW5lcihcImljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiLCBsaXN0ZW5lcik7XG4gIH0pO1xufTtcblxuY29uc3QgcmVhZF9zdHJlYW0gPSAoZGM6IFJUQ0RhdGFDaGFubmVsKTogUmVhZGFibGVTdHJlYW08UlRDTWVzc2FnZT4gPT4ge1xuICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICBkYy5vbm1lc3NhZ2UgPSAoeyBkYXRhIH0pID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJSRUNFSVZFRFwiLCBkYXRhKTtcbiAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGRhdGEpO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IG9uY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gY29udHJvbGxlci5jbG9zZSgpLCAzMDAwKTtcbiAgICAgICAgZGMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgICAgfTtcbiAgICAgIGRjLmFkZEV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICB9LFxuXG4gICAgY2FuY2VsKCkge1xuICAgICAgZGMuY2xvc2UoKTtcbiAgICB9LFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBkY19zdGF0dXMgPSAoZGM6IFJUQ0RhdGFDaGFubmVsKTogU3RhdHVzID0+IHtcbiAgc3dpdGNoIChkYy5yZWFkeVN0YXRlKSB7XG4gICAgY2FzZSBcIm9wZW5cIjpcbiAgICBjYXNlIFwiY2xvc2VkXCI6XG4gICAgICByZXR1cm4gZGMucmVhZHlTdGF0ZTtcbiAgICBjYXNlIFwiY2xvc2luZ1wiOlxuICAgICAgcmV0dXJuIFwiY2xvc2VkXCI7XG4gICAgY2FzZSBcImNvbm5lY3RpbmdcIjpcbiAgICAgIHJldHVybiBcIm9wZW5pbmdcIjtcbiAgfVxufTtcblxuY29uc3Qgd3JpdGVfc3RyZWFtID0gKGRjOiBSVENEYXRhQ2hhbm5lbCk6IFdyaXRhYmxlU3RyZWFtPFJUQ01lc3NhZ2U+ID0+IHtcbiAgbGV0IHJlc3VtZTogKCgpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuICBkYy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgKGVycikgPT4gY29uc29sZS5sb2coXCJEQyBFUlJPUlwiLCBlcnIpKTtcbiAgcmV0dXJuIG5ldyBXcml0YWJsZVN0cmVhbShcbiAgICB7XG4gICAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnN0IG9uY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJzdHJlYW0gY2xvc2VkIGJ5IGRjIGVuZGluZ1wiLCBkYy5sYWJlbCk7XG4gICAgICAgICAgY29udHJvbGxlci5lcnJvcihcIkNsb3NlZCBmb29cIik7XG4gICAgICAgICAgZGMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgICAgICB9O1xuICAgICAgICBkYy5hZGRFdmVudExpc3RlbmVyKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgICAgIGRjLm9ub3BlbiA9ICgpID0+IHJlc3VtZSAmJiByZXN1bWUoKTtcbiAgICAgICAgZGMub25idWZmZXJlZGFtb3VudGxvdyA9ICgpID0+IHJlc3VtZSAmJiByZXN1bWUoKTtcbiAgICAgIH0sXG4gICAgICBhc3luYyB3cml0ZShjaHVuaykge1xuICAgICAgICBpZiAoZGMucmVhZHlTdGF0ZSA9PT0gXCJjb25uZWN0aW5nXCIgfHwgZGMuYnVmZmVyZWRBbW91bnQgPiBkYy5idWZmZXJlZEFtb3VudExvd1RocmVzaG9sZCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwid2FpdGluZyBmb3IgcmVzdW1wdG9pbi4uLlwiKTtcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigociwgXykgPT4gKHJlc3VtZSA9IHIpKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInJlc3VtZWQhXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwid3JpdGluZ1wiLCBjaHVuayk7XG4gICAgICAgIGRjLnNlbmQoY2h1bmspO1xuICAgICAgfSxcbiAgICAgIGFib3J0KCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImFib3J0ZWQgZGMgYnkgc3RyZWFtXCIpO1xuICAgICAgICBkYy5jbG9zZSgpO1xuICAgICAgfSxcbiAgICAgIGNsb3NlKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNsb3NlZCBkYyBieSBzdHJlYW1cIik7XG4gICAgICAgIGRjLmNsb3NlKCk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgLy8gRG9uJ3QgbGV0IHRoZSBvdXRwdXQgc3RyZWFtIGNvbnN1bWUgbW9yZSB0aGFuIG9uZSBtZXNzYWdlIGluIGNhc2UgaXQgZ2V0cyBzaHV0ZG93blxuICAgIG5ldyBDb3VudFF1ZXVpbmdTdHJhdGVneSh7IGhpZ2hXYXRlck1hcms6IDEgfSlcbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBHYW1lRXZlbnQgfSBmcm9tIFwiLi4vZ2FtZS9nYW1lLWV2ZW50c1wiO1xuaW1wb3J0IHsgc3RyZWFtcyB9IGZyb20gXCIuLi91dGlsL3J0Y1wiO1xuaW1wb3J0IHsganNvbiwgcGlwZSB9IGZyb20gXCIuLi91dGlsL3N0cmVhbXNcIjtcblxuZXhwb3J0IHR5cGUgUGVlcklkID0gc3RyaW5nICYgeyBfX2JyYW5kOiBcIlBlZXJJZFwiIH07XG5cbmV4cG9ydCBjbGFzcyBQZWVyIHtcbiAgaWQ6IFBlZXJJZDtcbiAgcnRjOiBSVENQZWVyQ29ubmVjdGlvbjtcbiAgZXZlbnRzOiBSZWFkYWJsZVN0cmVhbTxHYW1lRXZlbnQ+O1xuICBldmVudHNfZGM6IFJUQ0RhdGFDaGFubmVsO1xuICAjZXZlbnRfd3JpdGVyOiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXI8R2FtZUV2ZW50PjtcblxuICBjb25zdHJ1Y3RvcihpZDogUGVlcklkLCBydGM6IFJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMucnRjID0gcnRjO1xuXG4gICAgdGhpcy5ldmVudHNfZGMgPSBydGMuY3JlYXRlRGF0YUNoYW5uZWwoXCJldmVudHNcIiwgeyBuZWdvdGlhdGVkOiB0cnVlLCBpZDogMSB9KTtcbiAgICBsZXQgeyByZWFkYWJsZSwgd3JpdGFibGUgfSA9IGpzb248R2FtZUV2ZW50PihzdHJlYW1zKHRoaXMuZXZlbnRzX2RjKSBhcyBSZWFkYWJsZVdyaXRhYmxlUGFpcjxzdHJpbmcsIHN0cmluZz4pO1xuICAgIHRoaXMuZXZlbnRzID0gcmVhZGFibGU7XG4gICAgdGhpcy4jZXZlbnRfd3JpdGVyID0gd3JpdGFibGUuZ2V0V3JpdGVyKCk7XG4gICAgdGhpcy5ydGMub25kYXRhY2hhbm5lbCA9IChldikgPT4gdGhpcy5vbmRhdGFjaGFubmVsKGV2KTtcbiAgfVxuXG4gIHdyaXRlX2V2ZW50KGV2OiBHYW1lRXZlbnQpIHtcbiAgICBldi5yZW1vdGUgPSB0aGlzLmlkO1xuICAgIHJldHVybiB0aGlzLiNldmVudF93cml0ZXIud3JpdGUoZXYpO1xuICB9XG5cbiAgb25kYXRhY2hhbm5lbCA9IChldjogUlRDRGF0YUNoYW5uZWxFdmVudCkgPT4ge307XG5cbiAgZGF0YWNoYW5uZWwobmFtZTogc3RyaW5nLCBpbml0PzogUlRDRGF0YUNoYW5uZWxJbml0KTogUHJvbWlzZTxSVENEYXRhQ2hhbm5lbD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgZGMgPSB0aGlzLnJ0Yy5jcmVhdGVEYXRhQ2hhbm5lbChuYW1lLCBpbml0KTtcbiAgICAgIGRjLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwib3BlblwiLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgZGMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHJlamVjdCk7XG4gICAgICAgICAgcmVzb2x2ZShkYyk7XG4gICAgICAgIH0sXG4gICAgICAgIHsgb25jZTogdHJ1ZSB9XG4gICAgICApO1xuICAgICAgZGMuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHJlamVjdCwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiLi4vdXRpbC9ldmVudHNcIjtcbmltcG9ydCB7IFN0YXR1c0VtaXR0ZXIgfSBmcm9tIFwiLi4vdXRpbC9uZXRcIjtcbmltcG9ydCB7IHdpdGhfaGVhcnRiZWF0IH0gZnJvbSBcIi4uL3V0aWwvc29ja2V0XCI7XG5pbXBvcnQgeyBQZWVyLCBQZWVySWQgfSBmcm9tIFwiLi9wZWVyXCI7XG5cbmNvbnN0IERFRkFVTFRfU0lHTkFMRVIgPSBcIndzczovL2JhdHRsZWdyaWQtc2lnbmFsaW5nLmhlcm9rdWFwcC5jb21cIjtcbmNvbnN0IFBFRVJfQ09ORklHID0geyBpY2VTZXJ2ZXJzOiBbeyB1cmxzOiBcInN0dW46c3R1bi5sLmdvb2dsZS5jb206MTkzMDJcIiB9XSB9O1xuY29uc3QgUkVDT05ORUNUX1RJTUVPVVQgPSAxMDAwOyAvL21zXG5cbmV4cG9ydCBjbGFzcyBTaWduYWxlciBleHRlbmRzIEV2ZW50VGFyZ2V0IGltcGxlbWVudHMgRXZlbnRFbWl0dGVyPHsgcGVlcjogQ3VzdG9tRXZlbnQ8UGVlcj4gfT4ge1xuICBzdGF0dXMgPSBuZXcgU3RhdHVzRW1pdHRlcigpO1xuICBwZWVyX2lkOiBQZWVySWQ7XG5cbiAgI3NvY2tldDogV2ViU29ja2V0O1xuICAjc2lnbmFsX3VybDogc3RyaW5nO1xuICAjYWxsb3dfY29ubmVjdGlvbnM6IGJvb2xlYW47XG4gICNjb25ucyA9IG5ldyBNYXA8UGVlcklkLCBQZWVyPigpO1xuICAjc2h1dHRpbmdfZG93biA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHBlZXJfaWQ6IFBlZXJJZCwgYWxsb3dfY29ubmVjdGlvbnMgPSBmYWxzZSwgc2lnbmFsX3VybCA9IERFRkFVTFRfU0lHTkFMRVIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucGVlcl9pZCA9IHBlZXJfaWQ7XG4gICAgdGhpcy4jYWxsb3dfY29ubmVjdGlvbnMgPSBhbGxvd19jb25uZWN0aW9ucztcbiAgICB0aGlzLiNzaWduYWxfdXJsID0gc2lnbmFsX3VybDtcbiAgICB0aGlzLiNzb2NrZXQgPSB0aGlzLiNlc3RhYmxpc2hfc29ja2V0KCk7XG4gIH1cblxuICBpbml0aWF0ZShyZW1vdGVfaWQ6IFBlZXJJZCk6IFBlZXIge1xuICAgIGxldCBwZWVyID0gdGhpcy4jaW5pdF9jb25uZWN0aW9uKHJlbW90ZV9pZCk7XG5cbiAgICBwZWVyLnJ0Y1xuICAgICAgLmNyZWF0ZU9mZmVyKClcbiAgICAgIC50aGVuKGFzeW5jIChvZmZlcikgPT4ge1xuICAgICAgICBhd2FpdCBwZWVyLnJ0Yy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3NlbmQoe1xuICAgICAgICAgIHR5cGU6IFwib2ZmZXJcIixcbiAgICAgICAgICBmcm9tOiB0aGlzLnBlZXJfaWQsXG4gICAgICAgICAgdG86IHJlbW90ZV9pZCxcbiAgICAgICAgICBvZmZlcixcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlKSA9PiBjb25zb2xlLmVycm9yKFwiSW50aWF0aW9uIGVycm9yOiBcIiwgZSkpO1xuXG4gICAgcmV0dXJuIHBlZXI7XG4gIH1cblxuICAjZXN0YWJsaXNoX3NvY2tldCgpOiBXZWJTb2NrZXQge1xuICAgIHRoaXMuc3RhdHVzLnNldChcIm9wZW5pbmdcIik7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwodGhpcy4jc2lnbmFsX3VybCk7XG4gICAgdXJsLnBhdGhuYW1lID0gdGhpcy5wZWVyX2lkO1xuICAgIHRoaXMuI3NvY2tldCA9IHdpdGhfaGVhcnRiZWF0KG5ldyBXZWJTb2NrZXQodXJsKSk7XG4gICAgdGhpcy4jc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsICgpID0+IHRoaXMuc3RhdHVzLnNldChcIm9wZW5cIiksIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB0aGlzLiNzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsIHRoaXMuI3NvY2tldF9zaHV0ZG93bik7XG4gICAgdGhpcy4jc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJoYXJkLWRpc2Nvbm5lY3RcIiwgdGhpcy4jc29ja2V0X3NodXRkb3duKTtcbiAgICB0aGlzLiNzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy4jaGFuZGxlX21lc3NhZ2UpO1xuICAgIHJldHVybiB0aGlzLiNzb2NrZXQ7XG4gIH1cblxuICAjc29ja2V0X3NodXRkb3duID0gKCkgPT4ge1xuICAgIHRoaXMuc3RhdHVzLnNldChcIm9wZW5pbmdcIik7XG4gICAgdGhpcy4jc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCB0aGlzLiNzb2NrZXRfc2h1dGRvd24pO1xuICAgIHRoaXMuI3NvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKFwiaGFyZC1kaXNjb25uZWN0XCIsIHRoaXMuI3NvY2tldF9zaHV0ZG93bik7XG4gICAgdGhpcy4jc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuI2hhbmRsZV9tZXNzYWdlKTtcblxuICAgICF0aGlzLiNzaHV0dGluZ19kb3duICYmIHRoaXMuI3JlY29ubmVjdCgpO1xuICB9O1xuXG4gIGFzeW5jICNzZW5kKG1zZzogU2lnbmFsKSB7XG4gICAgYXdhaXQgdGhpcy5zdGF0dXMuY29ubmVjdGVkKCk7XG4gICAgdGhpcy4jc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkobXNnKSk7XG4gIH1cblxuICAjaW5pdF9jb25uZWN0aW9uKHJlbW90ZV9pZDogUGVlcklkKTogUGVlciB7XG4gICAgbGV0IHBlZXIgPSBuZXcgUGVlcihyZW1vdGVfaWQsIG5ldyBSVENQZWVyQ29ubmVjdGlvbihQRUVSX0NPTkZJRykpO1xuICAgIHRoaXMuI2Nvbm5zLnNldChyZW1vdGVfaWQsIHBlZXIpO1xuXG4gICAgY29uc3Qgb25pY2VjYW5kaWRhdGUgPSAoeyBjYW5kaWRhdGUgfTogUlRDUGVlckNvbm5lY3Rpb25JY2VFdmVudCkgPT4ge1xuICAgICAgaWYgKGNhbmRpZGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLiNzZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImljZWNhbmRpZGF0ZVwiLFxuICAgICAgICAgIGZyb206IHRoaXMucGVlcl9pZCxcbiAgICAgICAgICB0bzogcmVtb3RlX2lkLFxuICAgICAgICAgIGNhbmRpZGF0ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEZvcndhcmQgYWxsIGljZSBjYW5kaWRhdGVzXG4gICAgcGVlci5ydGMuYWRkRXZlbnRMaXN0ZW5lcihcImljZWNhbmRpZGF0ZVwiLCBvbmljZWNhbmRpZGF0ZSk7XG5cbiAgICBwZWVyLmV2ZW50c19kYy5hZGRFdmVudExpc3RlbmVyKFwiY2xvc2VcIiwgKCkgPT4ge1xuICAgICAgcGVlci5ydGMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImljZWNhbmRpZGF0ZVwiLCBvbmljZWNhbmRpZGF0ZSk7XG4gICAgICB0aGlzLiNjb25ucy5kZWxldGUocmVtb3RlX2lkKTtcbiAgICB9KTtcblxuICAgIHBlZXIuZXZlbnRzX2RjLmFkZEV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJwZWVyXCIsIHsgZGV0YWlsOiBwZWVyIH0pKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwZWVyO1xuICB9XG5cbiAgI2hhbmRsZV9tZXNzYWdlID0gYXN5bmMgKHsgZGF0YSB9OiBNZXNzYWdlRXZlbnQ8c3RyaW5nPikgPT4ge1xuICAgIGxldCBzaWcgPSBKU09OLnBhcnNlKGRhdGEpO1xuXG4gICAgaWYgKHNpZy50eXBlID09PSBcImVycm9yLW5vdC1leGlzdHNcIikge1xuICAgICAgbGV0IHBlZXIgPSB0aGlzLiNjb25ucy5nZXQoc2lnLmRlc3RpbmF0aW9uKTtcbiAgICAgIHBlZXI/LnJ0Yy5jbG9zZSgpO1xuICAgICAgY29uc29sZS5sb2coXCJjbG9zaW5nXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCByZW1vdGUgPSB0aGlzLiNjb25ucy5nZXQoc2lnLmZyb20pO1xuXG4gICAgc3dpdGNoIChzaWcudHlwZSkge1xuICAgICAgLy8gQSByZW1vdGUgcGVlciBpcyB0cnlpbmcgdG8gY29ubmVjdCB0byB1c1xuICAgICAgY2FzZSBcIm9mZmVyXCI6XG4gICAgICAgIGlmICghdGhpcy4jYWxsb3dfY29ubmVjdGlvbnMpIHJldHVybjtcbiAgICAgICAgcmVtb3RlID0gdGhpcy4jaW5pdF9jb25uZWN0aW9uKHNpZy5mcm9tKTtcbiAgICAgICAgcmVtb3RlLnJ0Yy5zZXRSZW1vdGVEZXNjcmlwdGlvbihuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHNpZy5vZmZlcikpO1xuICAgICAgICBsZXQgYW5zd2VyID0gYXdhaXQgcmVtb3RlLnJ0Yy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgYXdhaXQgcmVtb3RlLnJ0Yy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG5cbiAgICAgICAgdGhpcy4jc29ja2V0LnNlbmQoXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgdHlwZTogXCJhbnN3ZXJcIixcbiAgICAgICAgICAgIGZyb206IHRoaXMucGVlcl9pZCxcbiAgICAgICAgICAgIHRvOiBzaWcuZnJvbSxcbiAgICAgICAgICAgIGFuc3dlcixcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiYW5zd2VyXCI6XG4gICAgICAgIHJlbW90ZT8ucnRjLnNldFJlbW90ZURlc2NyaXB0aW9uKG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oc2lnLmFuc3dlcikpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImljZWNhbmRpZGF0ZVwiOlxuICAgICAgICBhd2FpdCByZW1vdGU/LnJ0Yy5hZGRJY2VDYW5kaWRhdGUoc2lnLmNhbmRpZGF0ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICAjcmVjb25uZWN0KCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy4jZXN0YWJsaXNoX3NvY2tldCgpLCBSRUNPTk5FQ1RfVElNRU9VVCk7XG4gIH1cblxuICBzaHV0ZG93bigpIHtcbiAgICB0aGlzLiNzaHV0dGluZ19kb3duID0gdHJ1ZTtcbiAgICB0aGlzLiNzb2NrZXQuY2xvc2UoKTtcbiAgICB0aGlzLiNjb25ucy5jbGVhcigpO1xuICB9XG59XG5cbnR5cGUgU2lnbmFsRGF0YSA9IHsgZnJvbTogUGVlcklkOyB0bzogUGVlcklkIH0gJiAoXG4gIHwge1xuICAgICAgdHlwZTogXCJhbnN3ZXJcIjtcbiAgICAgIGFuc3dlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdDtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogXCJvZmZlclwiO1xuICAgICAgb2ZmZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQ7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IFwiaWNlY2FuZGlkYXRlXCI7XG4gICAgICBjYW5kaWRhdGU6IFJUQ0ljZUNhbmRpZGF0ZTtcbiAgICB9XG4pO1xuXG50eXBlIFNpZ25hbEVycm9yID0ge1xuICB0eXBlOiBcImVycm9yLW5vdC1leGlzdHNcIjtcbiAgZGVzdGluYXRpb246IFBlZXJJZDtcbn07XG5cbnR5cGUgU2lnbmFsID0gU2lnbmFsRGF0YSB8IFNpZ25hbEVycm9yO1xuIiwiY29uc3QgSEVBUlRCRUFUX0lOVEVSVkFMID0gMzAwMDtcbmV4cG9ydCBmdW5jdGlvbiB3aXRoX2hlYXJ0YmVhdCh3czogV2ViU29ja2V0KTogV2ViU29ja2V0IHtcbiAgbGV0IGxpdmUgPSB0cnVlO1xuICBsZXQgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgaWYgKCFsaXZlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiU2VydmVyIGZhaWxlZCB0byByZXNwb25kIHRvIGhlYXJ0YmVhdFwiKTtcbiAgICAgIHdzLmNsb3NlKDEwMDAsIFwiSGVhcnRiZWF0IGZhaWx1cmVcIik7XG4gICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgIHdzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaGFyZC1kaXNjb25uZWN0XCIpKTtcbiAgICB9XG4gICAgbGl2ZSA9IGZhbHNlO1xuICAgIHdzLnNlbmQoXCJfX3BpbmdfX1wiKTtcbiAgfSwgSEVBUlRCRUFUX0lOVEVSVkFMKTtcblxuICB3cy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAobXNnKSA9PiB7XG4gICAgaWYgKG1zZy5kYXRhID09PSBcIl9fcG9uZ19fXCIpIHtcbiAgICAgIG1zZy5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIGNvbnNvbGUubG9nKFwicG9uZ2luZ1wiKTtcbiAgICAgIGxpdmUgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgd3MuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBcImVycm9yXCIsXG4gICAgKCkgPT4ge1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgfSxcbiAgICB7IG9uY2U6IHRydWUgfVxuICApO1xuICB3cy5hZGRFdmVudExpc3RlbmVyKFxuICAgIFwiY2xvc2VcIixcbiAgICAoKSA9PiB7XG4gICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICB9LFxuICAgIHsgb25jZTogdHJ1ZSB9XG4gICk7XG5cbiAgcmV0dXJuIHdzO1xufVxuIiwiaW1wb3J0IHsgY29uc3VtZSB9IGZyb20gXCIuLi8uLi91dGlsL3N0cmVhbXNcIjtcblxuZXhwb3J0IGNvbnN0IFJFU09VUkNFX1BST1RPQ09MID0gXCJyZXF1ZXN0LXJlc291cmNlXCI7XG5cbmV4cG9ydCB0eXBlIFJlc291cmNlID0ge1xuICBibG9iOiBCbG9iO1xufTtcblxudHlwZSBIZWFkZXIgPSB7XG4gIHR5cGU6IHN0cmluZztcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1ZXN0KGNoYW5uZWw6IFJlYWRhYmxlV3JpdGFibGVQYWlyPEFycmF5QnVmZmVyIHwgc3RyaW5nLCBBcnJheUJ1ZmZlciB8IHN0cmluZz4pOiBQcm9taXNlPFJlc291cmNlPiB7XG4gIGxldCBidWZmZXI6IEFycmF5QnVmZmVyW10gPSBbXTtcbiAgbGV0IGhlYWRlcjogSGVhZGVyIHwgdW5kZWZpbmVkO1xuICB0cnkge1xuICAgIGF3YWl0IGNvbnN1bWUoY2hhbm5lbC5yZWFkYWJsZSwgKGNodW5rKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGhlYWRlciA9IEpTT04ucGFyc2UoY2h1bmspO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhcIlJFQURJTkcgcmVzb3VyY2UgQ0hVTktcIik7XG4gICAgICBidWZmZXIucHVzaChjaHVuayk7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY29uc3VtaW5nXCIsIGUpO1xuICB9XG5cbiAgY29uc29sZS5sb2coYnVmZmVyKTtcbiAgbGV0IGJsb2IgPSBuZXcgQmxvYihidWZmZXIsIHsgdHlwZTogaGVhZGVyPy50eXBlIH0pO1xuXG4gIGNvbnNvbGUubG9nKFwiR09UIEVNIEFMTCFcIiwgYmxvYik7XG4gIHJldHVybiB7XG4gICAgYmxvYixcbiAgfTtcbn1cblxuY29uc3QgTUFYX01FU1NBR0VfU0laRSA9IDY0ICogMTAwMDtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXNwb25zZShkYzogUmVhZGFibGVXcml0YWJsZVBhaXI8QXJyYXlCdWZmZXIgfCBzdHJpbmcsIEFycmF5QnVmZmVyIHwgc3RyaW5nPiwgcmVzb3VyY2U6IFJlc291cmNlKSB7XG4gIGxldCBibG9iID0gcmVzb3VyY2UuYmxvYjtcbiAgbGV0IHdyaXRlciA9IGRjLndyaXRhYmxlLmdldFdyaXRlcigpO1xuICBjb25zb2xlLmxvZyhcIkJMT0JMXCIsIGJsb2IpO1xuXG4gIHdyaXRlci53cml0ZShKU09OLnN0cmluZ2lmeSh7IHR5cGU6IGJsb2IudHlwZSB9KSk7XG4gIC8vIFRoZW4gc2VuZCB0aGUgY2h1bmtzXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvYi5zaXplOyBpICs9IE1BWF9NRVNTQUdFX1NJWkUpIHtcbiAgICBjb25zb2xlLmxvZyhcIldSSVRJTkcgRklSU1QgQ2hVTktcIik7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgYXdhaXQgd3JpdGVyLndyaXRlKGF3YWl0IGJsb2Iuc2xpY2UoaSwgTWF0aC5taW4oaSArIE1BWF9NRVNTQUdFX1NJWkUsIGJsb2Iuc2l6ZSkpLmFycmF5QnVmZmVyKCkpO1xuICB9XG5cbiAgY29uc29sZS5lcnJvcihcImNsb3NpbmdcIik7XG4gIGF3YWl0IHdyaXRlci5jbG9zZSgpO1xufVxuIiwiaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuLi9nYW1lL2dhbWVcIjtcbmltcG9ydCB7IEdhbWVFdmVudCB9IGZyb20gXCIuLi9nYW1lL2dhbWUtZXZlbnRzXCI7XG5pbXBvcnQgeyBjb25zdW1lIH0gZnJvbSBcIi4uL3V0aWwvc3RyZWFtc1wiO1xuaW1wb3J0IHsgUGVlciwgUGVlcklkIH0gZnJvbSBcIi4vcGVlclwiO1xuaW1wb3J0IHsgU2lnbmFsZXIgfSBmcm9tIFwiLi9zaWduYWxlclwiO1xuaW1wb3J0IHsgUkVTT1VSQ0VfUFJPVE9DT0wsIHJlcXVlc3QgfSBmcm9tIFwiLi9yZXNvdXJjZXMvcHJvdG9jb2xcIjtcbmltcG9ydCB7IGRjX3N0YXR1cywgc3RyZWFtcyB9IGZyb20gXCIuLi91dGlsL3J0Y1wiO1xuaW1wb3J0IHsgUmVzb3VyY2VJZCwgUmVzb3VyY2VNZXNzYWdlLCBSZXNvdXJjZVJlcXVlc3QgfSBmcm9tIFwiLi9yZXNvdXJjZXMvc2VydmljZS13b3JrZXItcHJvdG9jb2xcIjtcbmltcG9ydCB7IFN0YXR1c0VtaXR0ZXIgfSBmcm9tIFwiLi4vdXRpbC9uZXRcIjtcbmltcG9ydCB7IHByZVByb2Nlc3NGaWxlIH0gZnJvbSBcInR5cGVzY3JpcHRcIjtcblxuZXhwb3J0IGNsYXNzIENsaWVudCB7XG4gICNnYW1lOiBHYW1lO1xuICAjcGVlcjogUGVlcjtcbiAgI2dhbWVfaWQ6IFBlZXJJZFxuICAjc2lnbmFsZXI6IFNpZ25hbGVyO1xuICBzdGF0dXMgPSBuZXcgU3RhdHVzRW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKGdhbWVfaWQ6IFBlZXJJZCwgZ2FtZTogR2FtZSkge1xuICAgIHRoaXMuI3NpZ25hbGVyID0gbmV3IFNpZ25hbGVyKGNyeXB0by5yYW5kb21VVUlEKCkgYXMgUGVlcklkKTtcbiAgICB0aGlzLiNnYW1lID0gZ2FtZTtcbiAgICB0aGlzLiNnYW1lX2lkID0gZ2FtZV9pZDtcbiAgICB0aGlzLiNnYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2dhbWUtZXZlbnQnLCB0aGlzLmZvcndhcmRfZXZlbnRzKTtcbiAgICB0aGlzLiNwZWVyID0gdGhpcy4jc2V0dXBfcGVlcigpO1xuXG4gICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIub25tZXNzYWdlID0gYXN5bmMgKGV2OiBNZXNzYWdlRXZlbnQ8UmVzb3VyY2VSZXF1ZXN0PikgPT4ge1xuICAgICAgbGV0IGlkID0gZXYuZGF0YS5pZCBhcyBSZXNvdXJjZUlkO1xuICAgICAgY29uc29sZS5sb2coXCJDTElFTlQgQVRURU1QVElORyBUTyBGRVRDSFwiLCB0aGlzLiNwZWVyLmV2ZW50c19kYy5yZWFkeVN0YXRlKTtcbiAgICAgIGF3YWl0IHRoaXMuI3BlZXIuZGF0YWNoYW5uZWwoaWQsIHtwcm90b2NvbDogUkVTT1VSQ0VfUFJPVE9DT0x9KVxuICAgICAgICAudGhlbihzdHJlYW1zPEFycmF5QnVmZmVyLCBBcnJheUJ1ZmZlcj4pXG4gICAgICAgIC50aGVuKHJlcXVlc3QpXG4gICAgICAgIC50aGVuKGFzeW5jICh7YmxvYn0pID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkNPTU1VTklDQVRJTkcgV0lUSCBTRVJWSUNFIFdPUktFUlwiKTtcbiAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyIS5wb3N0TWVzc2FnZSh7dHlwZTogJ2ZvdW5kJywgaWQsIGJsb2J9IGFzIFJlc291cmNlTWVzc2FnZSlcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyByZXNvdXJjZTogXCIsIGUpO1xuICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIhLnBvc3RNZXNzYWdlKHt0eXBlOiAnbm90Zm91bmQnLCBpZCwgZXJyb3I6IGV9IGFzIFJlc291cmNlTWVzc2FnZSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgfVxuXG4gIGZvcndhcmRfZXZlbnRzID0gKHtkZXRhaWw6IGV2fTogQ3VzdG9tRXZlbnQ8R2FtZUV2ZW50PikgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiQ0FMTEJBQ0tcIiwgZXYpO1xuICAgIGlmIChldi5yZW1vdGUpIHJldHVybjtcbiAgICB0aGlzLiNwZWVyLndyaXRlX2V2ZW50KGV2KTtcbiAgfVxuXG5cbiAgYXN5bmMgcmVjb25uZWN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuI3BlZXIgPSB0aGlzLiNzZXR1cF9wZWVyKCk7XG4gIH1cblxuICBhc3luYyBzaHV0ZG93bigpIHtcbiAgICB0aGlzLiNwZWVyLnJ0Yy5jbG9zZSgpO1xuICAgIGNvbnNvbGUubG9nKFwiV2FpdGluZyBmb3Igc2lnbmFsZXIgc2h1dGRvd25cIik7XG4gICAgYXdhaXQgdGhpcy4jc2lnbmFsZXIuc2h1dGRvd24oKTtcbiAgICBjb25zb2xlLmxvZyhcInNpZ25hbGVyIGRlYWRcIik7XG4gICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIub25tZXNzYWdlID0gbnVsbDtcbiAgfVxuXG4gICNzZXR1cF9wZWVyKCk6IFBlZXIge1xuICAgIGxldCBwZWVyID0gdGhpcy4jc2lnbmFsZXIuaW5pdGlhdGUodGhpcy4jZ2FtZV9pZCk7XG4gICAgcGVlci5ydGMuYWRkRXZlbnRMaXN0ZW5lcignaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJDT05OIFNUQVRFIENIQU5HRURcIik7XG4gICAgICBpZiAocGVlci5ydGMuaWNlQ29ubmVjdGlvblN0YXRlID09PSBcImNvbm5lY3RlZFwiKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzLnNldCgnb3BlbicpO1xuICAgICAgfVxuICAgIH0pXG4gICAgcGVlci5ldmVudHNfZGMuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB0aGlzLnN0YXR1cy5zZXQoJ2Nsb3NlZCcpKTtcbiAgICBwZWVyLmV2ZW50c19kYy5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKCkgPT4gdGhpcy5zdGF0dXMuc2V0KCdvcGVuJykpO1xuICAgIHRoaXMuc3RhdHVzLnNldChkY19zdGF0dXMocGVlci5ldmVudHNfZGMpKTtcblxuICAgIGNvbnN1bWUocGVlci5ldmVudHMsIChldikgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuI2dhbWUuYXBwbHkoZXYpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcGVlcjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuLi9nYW1lL2dhbWVcIjtcbmltcG9ydCB7IHNlcmlhbGl6ZV90YnQgfSBmcm9tIFwiLi4vZ2FtZS90YWJsZXRvcFwiO1xuaW1wb3J0IHsgd2FpdEZvciB9IGZyb20gXCIuLi91dGlsL2V2ZW50c1wiO1xuaW1wb3J0IHsgU3RhdHVzRW1pdHRlciB9IGZyb20gXCIuLi91dGlsL25ldFwiO1xuaW1wb3J0IHsgc3RyZWFtcyB9IGZyb20gXCIuLi91dGlsL3J0Y1wiO1xuaW1wb3J0IHsgY29uc3VtZSB9IGZyb20gXCIuLi91dGlsL3N0cmVhbXNcIjtcbmltcG9ydCB7IFBlZXIsIFBlZXJJZCB9IGZyb20gXCIuL3BlZXJcIjtcbmltcG9ydCB7IFJlc291cmNlLCBSRVNPVVJDRV9QUk9UT0NPTCwgcmVzcG9uc2UgfSBmcm9tIFwiLi9yZXNvdXJjZXMvcHJvdG9jb2xcIjtcbmltcG9ydCB7IFJlc291cmNlSWQgfSBmcm9tIFwiLi9yZXNvdXJjZXMvc2VydmljZS13b3JrZXItcHJvdG9jb2xcIjtcbmltcG9ydCB7IFNpZ25hbGVyIH0gZnJvbSBcIi4vc2lnbmFsZXJcIjtcblxuZXhwb3J0IGNsYXNzIFNlcnZlciB7XG4gIHNpZ25hbGVyOiBTaWduYWxlcjtcbiAgI2dhbWU6IEdhbWU7XG4gICNjbGllbnRzOiBTZXQ8UGVlcj4gPSBuZXcgU2V0KCk7XG4gICNhYm9ydDogQWJvcnRDb250cm9sbGVyO1xuXG4gIGNvbnN0cnVjdG9yKGdhbWU6IEdhbWUpIHtcbiAgICB0aGlzLnNpZ25hbGVyID0gbmV3IFNpZ25hbGVyKGNyeXB0by5yYW5kb21VVUlEKCkgYXMgUGVlcklkLCB0cnVlKTtcbiAgICB0aGlzLiNnYW1lID0gZ2FtZTtcbiAgICB0aGlzLiNhYm9ydCA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICB0aGlzLnNpZ25hbGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJwZWVyXCIsICh7IGRldGFpbDogcGVlciB9OiBDdXN0b21FdmVudDxQZWVyPikgPT4gdGhpcy4jYWRkX2NsaWVudChwZWVyKSk7XG4gICAgdGhpcy4jZ2FtZS5hZGRFdmVudExpc3RlbmVyKFwiZ2FtZS1ldmVudFwiLCAoeyBkZXRhaWw6IGV2IH0pID0+IHtcbiAgICAgIGZvciAobGV0IGNsaWVudCBvZiB0aGlzLiNjbGllbnRzKSB7XG4gICAgICAgIGlmIChjbGllbnQuaWQgPT09IGV2LnJlbW90ZSkgY29udGludWU7XG4gICAgICAgIGNsaWVudC53cml0ZV9ldmVudChldik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAjYWRkX2NsaWVudChwZWVyOiBQZWVyKSB7XG4gICAgdGhpcy4jY2xpZW50cy5hZGQocGVlcik7XG5cbiAgICAvLyBJdCdzIGEgbGl0dGxlIHdlaXJkIHRoYXQgd2UncmUgc2VuZGluZyB0aGUgSlNPTiBlbmNvZGluZ1xuICAgIC8vIGFzIGEgc3RyaW5nLiBCdXQgd2UgbmVlZCB0byBjYXB0dXJlIHRoZSBzdGF0ZSBvZiB0aGUgdGFibGV0b3BcbiAgICAvLyBhdCB0aGlzIGV4YWN0IG1vbWVudC4gSWYgd2UgZGlkbid0IEpTT04gZW5jb2RlIG5vdywgdGhlIHRhYmxldG9wXG4gICAgLy8gY291bGQgYmUgbXV0YXRlZCBiZWZvcmUgYmVpbmcgd3JpdHRlbiB0byB0aGUgd2lyZS5cbiAgICAvL1xuICAgIC8vIFdlIGFpbSBmb3IgaWRlbXBvdGVuY3kgc28gdGhpcyAqc2hvdWxkbid0KiBiZSBhIHByb2JsZW0sIGJ1dCBsZXRzXG4gICAgLy8ganVzdCBhdm9pZCBpdFxuICAgIHBlZXIud3JpdGVfZXZlbnQoe1xuICAgICAgdHlwZTogXCJzdGF0ZS1zeW5jXCIsXG4gICAgICB0YWJsZXRvcDogc2VyaWFsaXplX3RidCh0aGlzLiNnYW1lLnRhYmxldG9wKSxcbiAgICB9KTtcblxuICAgIGNvbnN1bWUocGVlci5ldmVudHMsIChldikgPT4ge1xuICAgICAgZXYucmVtb3RlID0gcGVlci5pZDtcbiAgICAgIHJldHVybiB0aGlzLiNnYW1lLmFwcGx5KGV2KTtcbiAgICB9KTtcblxuICAgIHBlZXIuZXZlbnRzX2RjLmFkZEV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIlBFRUVSIEVWRU5UIERDXCIpO1xuICAgICAgdGhpcy4jY2xpZW50cy5kZWxldGUocGVlcik7XG4gICAgfSk7XG5cbiAgICBwZWVyLm9uZGF0YWNoYW5uZWwgPSBhc3luYyAoZXYpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiSU5DT01JTkcgRENcIiwgZXYuY2hhbm5lbCk7XG4gICAgICBjb25zdCBjaGFubmVsID0gZXYuY2hhbm5lbDtcbiAgICAgIGF3YWl0IHdhaXRGb3IoXCJvcGVuXCIsIGNoYW5uZWwpO1xuICAgICAgY29uc29sZS5sb2coXCJuZXcgZGNcIiwgY2hhbm5lbCk7XG4gICAgICBpZiAoY2hhbm5lbC5wcm90b2NvbCA9PT0gUkVTT1VSQ0VfUFJPVE9DT0wpIHtcbiAgICAgICAgcmVzcG9uc2Uoc3RyZWFtczxBcnJheUJ1ZmZlciwgQXJyYXlCdWZmZXI+KGNoYW5uZWwpLCBhd2FpdCB0aGlzLiNnZXRfcmVzb3VyY2UoY2hhbm5lbC5sYWJlbCBhcyBSZXNvdXJjZUlkKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jICNnZXRfcmVzb3VyY2UoaWQ6IFJlc291cmNlSWQpOiBQcm9taXNlPFJlc291cmNlPiB7XG4gICAgbGV0IHJlc3AgPSBhd2FpdCBmZXRjaChgL3Jlc291cmNlcy8ke2lkfWApO1xuICAgIHJldHVybiB7IGJsb2I6IGF3YWl0IHJlc3AuYmxvYigpIH07XG4gIH1cblxuICBhc3luYyBzaHV0ZG93bigpIHtcbiAgICBmb3IgKGxldCBjIG9mIHRoaXMuI2NsaWVudHMpIHtcbiAgICAgIGMucnRjLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgdGhpcy4jY2xpZW50cy5jbGVhcigpO1xuICAgIHRoaXMuI2Fib3J0LmFib3J0KFwiU2VydmVyIHNodXR0aW5nIGRvd25cIik7XG4gICAgYXdhaXQgdGhpcy5zaWduYWxlci5zaHV0ZG93bigpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjc3MsIENTU1Jlc3VsdEdyb3VwLCBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSBcImxpdFwiO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHksIHN0YXRlIH0gZnJvbSBcImxpdC9kZWNvcmF0b3JzLmpzXCI7XG5pbXBvcnQgeyBzdHlsZU1hcCB9IGZyb20gXCJsaXQvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanNcIjtcblxuQGN1c3RvbUVsZW1lbnQoXCJ3aXRoLXRvb2x0aXBcIilcbmNsYXNzIFdpdGhUb29sdGlwIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIEBwcm9wZXJ0eSgpXG4gIHRleHQgPSBcIlwiO1xuXG4gIEBzdGF0ZSgpXG4gIG1vdXNleDogbnVtYmVyID0gMDtcblxuICBAc3RhdGUoKVxuICBtb3VzZXk6IG51bWJlciA9IDA7XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLiNtb3VzZW1vdmUpO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuI21vdXNlbW92ZSk7XG4gIH1cblxuICAjbW91c2Vtb3ZlID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgdGhpcy5tb3VzZXggPSBldi5wYWdlWDtcbiAgICB0aGlzLm1vdXNleSA9IGV2LnBhZ2VZO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zb2xlLmxvZyhcIlJlbmRlcmluZ1wiKTtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9XCJtZXNzYWdlXCJcbiAgICAgICAgc3R5bGU9JHtzdHlsZU1hcCh7XG4gICAgICAgICAgbGVmdDogYCR7dGhpcy5tb3VzZXggKyA4fXB4YCxcbiAgICAgICAgICB0b3A6IGAke3RoaXMubW91c2V5ICsgMTB9cHhgLFxuICAgICAgICB9KX1cbiAgICAgID5cbiAgICAgICAgJHt0aGlzLnRleHR9XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG5cbiAgc3RhdGljIHN0eWxlcz86IENTU1Jlc3VsdEdyb3VwIHwgdW5kZWZpbmVkID0gY3NzYFxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XG4gICAgfVxuXG4gICAgZGl2IHtcbiAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgIGJhY2tncm91bmQ6IGJsYWNrO1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgICAgcGFkZGluZzogMC4yNWVtIDAuNWVtO1xuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgIHdpZHRoOiBtYXgtY29udGVudDtcbiAgICB9XG5cbiAgICBAa2V5ZnJhbWVzIGFwcGVhciB7XG4gICAgICAwJSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB9XG5cbiAgICAgIDEwMCUge1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIDpob3N0KDpob3ZlcikgZGl2IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgYW5pbWF0aW9uOiBhcHBlYXIgMjUwbXMgbGluZWFyIGZvcndhcmRzIDc1MG1zO1xuICAgIH1cbiAgYDtcbn1cbiIsImltcG9ydCB7IGNzcywgQ1NTUmVzdWx0R3JvdXAsIGh0bWwsIExpdEVsZW1lbnQgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50IH0gZnJvbSBcImxpdC9kZWNvcmF0b3JzLmpzXCI7XG5cbkBjdXN0b21FbGVtZW50KFwiYmctdG9nZ2xlXCIpXG5jbGFzcyBUb2dnbGUgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPCEtLSBSZWN0YW5ndWxhciBzd2l0Y2ggLS0+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJzd2l0Y2hcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIC8+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwic2xpZGVyIHJvdW5kXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJvbi10ZXh0XCI+SG9zdGluZzwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIm9mZi10ZXh0XCI+T2ZmbGluZTwvc3Bhbj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZG90LXdyYXBwZXJcIj48ZGl2IGNsYXNzPVwiZG90XCI+PC9kaXY+PC9kaXY+XG4gICAgICA8L2xhYmVsPlxuICAgIGA7XG4gIH1cblxuICBzdGF0aWMgc3R5bGVzPzogQ1NTUmVzdWx0R3JvdXAgfCB1bmRlZmluZWQgPSBjc3NgXG4gICAgLyogVGhlIHN3aXRjaCAtIHRoZSBib3ggYXJvdW5kIHRoZSBzbGlkZXIgKi9cbiAgICAuc3dpdGNoIHtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIGhlaWdodDogMWVtO1xuICAgICAgd2lkdGg6IDQuNWVtO1xuICAgICAgcGFkZGluZzogMC4xZW07XG4gICAgfVxuXG4gICAgLyogSGlkZSBkZWZhdWx0IEhUTUwgY2hlY2tib3ggKi9cbiAgICAuc3dpdGNoIGlucHV0IHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgLyogVGhlIHNsaWRlciAqL1xuICAgIC5zbGlkZXIge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwO1xuICAgICAgYm90dG9tOiAwO1xuICAgICAgbGVmdDogMDtcbiAgICAgIHJpZ2h0OiAwO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcbiAgICAgIHRyYW5zaXRpb246IDAuNHM7XG4gICAgfVxuXG4gICAgLnNsaWRlciA+IHNwYW4ge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgIHRvcDogMC4xZW07XG4gICAgfVxuXG4gICAgaW5wdXQ6Y2hlY2tlZCArIC5zbGlkZXIgPiAub24tdGV4dCB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cblxuICAgIGlucHV0OmNoZWNrZWQgKyAuc2xpZGVyID4gLm9mZi10ZXh0IHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgaW5wdXQgKyAuc2xpZGVyID4gLm9mZi10ZXh0IHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHJpZ2h0OiAwLjhlbTtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgfVxuXG4gICAgaW5wdXQgKyAuc2xpZGVyID4gLm9uLXRleHQge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIGxlZnQ6IDAuNWVtO1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgIH1cblxuICAgIC5kb3Qtd3JhcHBlciB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBsZWZ0OiAwLjFlbTtcbiAgICAgIHRvcDogMC4xZW07XG4gICAgICByaWdodDogMC4xZW07XG4gICAgICBib3R0b206IDAuMWVtO1xuICAgICAgdHJhbnNpdGlvbjogMC40cztcbiAgICB9XG5cbiAgICBpbnB1dDpjaGVja2VkICsgLnNsaWRlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjE5NmYzO1xuICAgIH1cblxuICAgIGlucHV0OmZvY3VzICsgLnNsaWRlciB7XG4gICAgICBib3gtc2hhZG93OiAwIDAgMXB4ICMyMTk2ZjM7XG4gICAgfVxuXG4gICAgaW5wdXQ6Y2hlY2tlZCArIC5zbGlkZXIgKyAuZG90LXdyYXBwZXIge1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKGNhbGMoMTAwJSAtIDEuMmVtKSk7XG4gICAgfVxuXG4gICAgLyogUm91bmRlZCBzbGlkZXJzICovXG4gICAgLnNsaWRlci5yb3VuZCB7XG4gICAgICBib3JkZXItcmFkaXVzOiAzNHB4O1xuICAgIH1cblxuICAgIC5kb3Qge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgIGFzcGVjdC1yYXRpbzogMS8xO1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIH1cbiAgYDtcbn1cbiIsImltcG9ydCB7IGNzcywgaHRtbCwgTGl0RWxlbWVudCB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5IH0gZnJvbSBcImxpdC9kZWNvcmF0b3JzLmpzXCI7XG5pbXBvcnQgeyBTdGF0dXMgfSBmcm9tIFwiLi4vdXRpbC9uZXRcIjtcbmltcG9ydCBcIi4vdXRpbC93aXRoLXRvb2x0aXBcIjtcblxuQGN1c3RvbUVsZW1lbnQoXCJob3N0LXRvZ2dsZVwiKVxuY2xhc3MgSG9zdFRvZ2dsZSBleHRlbmRzIExpdEVsZW1lbnQge1xuICBAcHJvcGVydHkoKVxuICBzdGF0dXM6IFN0YXR1cyB8IFwibG9jYWxcIiA9IFwibG9jYWxcIjtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8IS0tIFJlY3Rhbmd1bGFyIHN3aXRjaCAtLT5cbiAgICAgIDxsYWJlbCBjbGFzcz1cInN3aXRjaFwiPlxuICAgICAgICA8d2l0aC10b29sdGlwIHRleHQ9JHtodW1hbih0aGlzLnN0YXR1cyl9PlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBAaW5wdXQ9JHt0aGlzLnRvZ2dsZX0gP2NoZWNrZWQ9JHt0aGlzLnN0YXR1cyAhPT0gXCJsb2NhbFwifSAvPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2xpZGVyIHJvdW5kICR7dGhpcy5zdGF0dXN9XCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm9uLXNwYWNlXCI+SG9zdGluZzwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZG90XCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJvZmYtc3BhY2VcIj5PZmZsaW5lPC9zcGFuPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC93aXRoLXRvb2x0aXA+XG4gICAgICA8L2xhYmVsPlxuICAgIGA7XG4gIH1cblxuICB0b2dnbGUgPSAoZXY6IElucHV0RXZlbnQpID0+IHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKChldi50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCkge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImVuYWJsZVwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJkaXNhYmxlXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgc3RhdGljIHN0eWxlcyA9IGNzc2BcbiAgICAuc2xpZGVyIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgZmxleC13cmFwOiBub3dyYXA7XG4gICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgIHRyYW5zaXRpb246IDAuNHM7XG4gICAgICBwYWRkaW5nOiAwLjJlbTtcbiAgICAgIG1pbi13aWR0aDogNC41ZW07XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBiYWNrZ3JvdW5kOiAjY2NjO1xuICAgIH1cblxuICAgIC5vcGVuIHtcbiAgICAgIGJhY2tncm91bmQ6ICMyMTk2ZjM7XG4gICAgfVxuXG4gICAgLm9wZW5pbmcge1xuICAgICAgYmFja2dyb3VuZDogI2ZkY2IxODtcbiAgICB9XG5cbiAgICAub3BlbmluZyA+IC5vbi1zcGFjZSB7XG4gICAgICBjb2xvcjogYmxhY2s7XG4gICAgfVxuXG4gICAgaW5wdXQge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgICBpbnB1dDpjaGVja2VkICsgLnNsaWRlciB7XG4gICAgfVxuXG4gICAgaW5wdXQ6Y2hlY2tlZCArIC5zbGlkZXIgPiAub24tc3BhY2Uge1xuICAgICAgZmxleC1ncm93OiAxO1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG5cbiAgICBpbnB1dDpjaGVja2VkICsgLnNsaWRlciA+IC5vZmYtc3BhY2Uge1xuICAgICAgZmxleC1ncm93OiAwICFpbXBvcnRhbnQ7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIC5vZmYtc3BhY2Uge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICAgIGZsZXgtZ3JvdzogMSAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgIC5vbi1zcGFjZSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgd2lkdGg6IDA7XG4gICAgfVxuXG4gICAgLm9uLXNwYWNlLFxuICAgIC5vZmYtc3BhY2Uge1xuICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICB9XG5cbiAgICAuc2xpZGVyID4gc3BhbiB7XG4gICAgICBmbGV4LWdyb3c6IDA7XG4gICAgICBmbGV4LWJhc2lzOiAwO1xuICAgICAgdHJhbnNpdGlvbjogMC40cztcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgfVxuXG4gICAgLnJvdW5kIHtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDFlbTtcbiAgICB9XG4gICAgLmRvdCB7XG4gICAgICBib3JkZXItcmFkaXVzOiAxZW07XG4gICAgICBtaW4td2lkdGg6IDFlbTtcbiAgICAgIGhlaWdodDogMWVtO1xuICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgfVxuICBgO1xufVxuXG5mdW5jdGlvbiBodW1hbihzOiBTdGF0dXMgfCBcImxvY2FsXCIpIHtcbiAgc3dpdGNoIChzKSB7XG4gICAgY2FzZSBcIm9wZW5cIjpcbiAgICAgIHJldHVybiBcIkpvaW5hYmxlXCI7XG4gICAgY2FzZSBcImNsb3NlZFwiOlxuICAgICAgcmV0dXJuIFwiT2ZmbGluZVwiO1xuICAgIGNhc2UgXCJvcGVuaW5nXCI6XG4gICAgICByZXR1cm4gXCJOb3QgSm9pbmFibGVcIjtcbiAgICBjYXNlIFwibG9jYWxcIjpcbiAgICAgIHJldHVybiBcIlN0YXJ0IGhvc3RpbmdcIjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY3NzLCBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSBcImxpdFwiO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHkgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcbmltcG9ydCB7IFN0YXR1cyB9IGZyb20gXCIuLi91dGlsL25ldFwiO1xuaW1wb3J0IFwiLi91dGlsL3dpdGgtdG9vbHRpcFwiO1xuXG5AY3VzdG9tRWxlbWVudChcImNsaWVudC1zdGF0dXNcIilcbmNsYXNzIENsaWVudFN0YXR1cyBleHRlbmRzIExpdEVsZW1lbnQge1xuICBAcHJvcGVydHkoKVxuICBzdGF0dXM6IFN0YXR1cyA9IFwib3BlbmluZ1wiO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDwhLS0gUmVjdGFuZ3VsYXIgc3dpdGNoIC0tPlxuICAgICAgPHNwYW4gY2xhc3M9XCJzbGlkZXIgcm91bmQgJHt0aGlzLnN0YXR1c31cIj4gJHtodW1hbih0aGlzLnN0YXR1cyl9IDwvc3Bhbj5cbiAgICBgO1xuICB9XG5cbiAgdG9nZ2xlID0gKGV2OiBJbnB1dEV2ZW50KSA9PiB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICgoZXYudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJlbmFibGVcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiZGlzYWJsZVwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgXG4gICAgLnNsaWRlciB7XG4gICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgIHRyYW5zaXRpb246IDAuNHM7XG4gICAgICBwYWRkaW5nOiAwLjJlbTtcbiAgICAgIG1pbi13aWR0aDogNWVtO1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcbiAgICB9XG5cbiAgICAub3BlbiB7XG4gICAgICBiYWNrZ3JvdW5kOiAjMjE5NmYzO1xuICAgIH1cblxuICAgIC5vcGVuaW5nIHtcbiAgICAgIGJhY2tncm91bmQ6ICNmZGNiMTg7XG4gICAgfVxuXG4gICAgLnJvdW5kIHtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDFlbTtcbiAgICB9XG4gIGA7XG59XG5cbmZ1bmN0aW9uIGh1bWFuKHM6IFN0YXR1cyB8IFwibG9jYWxcIikge1xuICBzd2l0Y2ggKHMpIHtcbiAgICBjYXNlIFwib3BlblwiOlxuICAgICAgcmV0dXJuIFwiQ29ubmVjdGVkXCI7XG4gICAgY2FzZSBcImNsb3NlZFwiOlxuICAgICAgcmV0dXJuIFwiRGlzY29ubmVjdGVkXCI7XG4gICAgY2FzZSBcIm9wZW5pbmdcIjpcbiAgICAgIHJldHVybiBcIkNvbm5lY3RpbmdcIjtcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IHRpbWVvdXQgPSA8VD4ocHJvbTogUHJvbWlzZTxUPiwgdGltZTogbnVtYmVyKTogUHJvbWlzZTxUPiA9PlxuICBQcm9taXNlLnJhY2UoW3Byb20sIG5ldyBQcm9taXNlKChfciwgcmVqKSA9PiBzZXRUaW1lb3V0KHJlaiwgdGltZSkpIGFzIFByb21pc2U8VD5dKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJldHJ5PFQ+KHRpbWVzOiBudW1iZXIsIHByb206ICgpID0+IFByb21pc2U8VD4pOiBQcm9taXNlPFQ+IHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHByb20oKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAodGltZXMtLSA9PSAwKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBjc3MsIGh0bWwsIExpdEVsZW1lbnQgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSwgcXVlcnksIHN0YXRlIH0gZnJvbSBcImxpdC9kZWNvcmF0b3JzLmpzXCI7XG5pbXBvcnQgeyBHYW1lRXZlbnQgfSBmcm9tIFwiLi4vZ2FtZS9nYW1lLWV2ZW50c1wiO1xuaW1wb3J0IHsgQmdEcm9wRXZlbnQsIENhbnZhcywgVG9rZW5Ecm9wRXZlbnQsIFRva2VuU2VsZWN0RXZlbnQgfSBmcm9tIFwiLi9jYW52YXNcIjtcbmltcG9ydCBcIi4vYnV5bWVhY29mZmVlXCI7XG5pbXBvcnQgeyBHYW1lIH0gZnJvbSBcIi4uL2dhbWUvZ2FtZVwiO1xuaW1wb3J0IHsgaWZEZWZpbmVkIH0gZnJvbSBcImxpdC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanNcIjtcbmltcG9ydCB7IG1heF9wIH0gZnJvbSBcIi4uL3V0aWwvbWF0aFwiO1xuaW1wb3J0IHsgZmlyc3QgfSBmcm9tIFwiLi4vdXRpbC9pdGVyXCI7XG5pbXBvcnQgeyBDbGllbnQgfSBmcm9tIFwiLi4vbmV0L2NsaWVudFwiO1xuaW1wb3J0IHsgU2VydmVyIH0gZnJvbSBcIi4uL25ldC9zZXJ2ZXJcIjtcbmltcG9ydCB7IFBlZXJJZCB9IGZyb20gXCIuLi9uZXQvcGVlclwiO1xuaW1wb3J0IFwiLi91dGlsL3dpdGgtdG9vbHRpcFwiO1xuaW1wb3J0IFwiLi91dGlsL3RvZ2dsZVwiO1xuaW1wb3J0IFwiLi9ob3N0LXRvZ2dsZVwiO1xuaW1wb3J0IFwiLi9jbGllbnQtc3RhdHVzXCI7XG5pbXBvcnQgeyB0aW1lb3V0IH0gZnJvbSBcIi4uL3V0aWwvcHJvbWlzZXNcIjtcblxuQGN1c3RvbUVsZW1lbnQoXCJiZy1hcHBcIilcbmNsYXNzIEFwcCBleHRlbmRzIExpdEVsZW1lbnQge1xuICBAcXVlcnkoXCIjd2lkdGhcIiwgdHJ1ZSlcbiAgd2lkdGg/OiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gIEBxdWVyeShcIiNoZWlnaHRcIiwgdHJ1ZSlcbiAgaGVpZ2h0PzogSFRNTElucHV0RWxlbWVudDtcblxuICBAcXVlcnkoXCJiZy1jYW52YXNcIiwgdHJ1ZSlcbiAgY2FudmFzPzogQ2FudmFzO1xuXG4gIEBzdGF0ZSgpXG4gIGNsaWVudD86IENsaWVudDtcblxuICBAc3RhdGUoKVxuICBzZXJ2ZXI/OiBTZXJ2ZXI7XG5cbiAgQHN0YXRlKClcbiAgc2VsZWN0aW9uOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcblxuICBAc3RhdGUoKVxuICBob3N0X3BlbmRpbmcgPSBmYWxzZTtcblxuICBnYW1lOiBHYW1lID0gbmV3IEdhbWUoKTtcblxuICByZW5kZXIoKSB7XG4gICAgbGV0IGVycm9yID1cbiAgICAgIHRoaXMuY2xpZW50Py5zdGF0dXMuY3VycmVudCA9PT0gXCJjbG9zZWRcIlxuICAgICAgICA/IGh0bWxgIDxkaXYgY2xhc3M9XCJtZXNzYWdlIGVycm9yXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8aDE+RXJyb3IgY29ubmVjdGluZyB0byByZW1vdGUgZ3JpZDwvaDE+XG4gICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPSR7dGhpcy4jbmV3X2xvY2FsfT5OZXcgbG9jYWwgZ3JpZDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+YFxuICAgICAgICA6IG51bGw7XG4gICAgbGV0IGNvbm5lY3RpbmcgPVxuICAgICAgdGhpcy5jbGllbnQ/LnN0YXR1cy5jdXJyZW50ID09PSBcIm9wZW5pbmdcIlxuICAgICAgICA/IGh0bWxgIDxkaXYgY2xhc3M9XCJtZXNzYWdlXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8aDE+Q29ubmVjdGluZyB0byBncmlkLi4uPC9oMT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PmBcbiAgICAgICAgOiBudWxsO1xuICAgIGxldCBkaXNjb25uZWN0ZWQgPVxuICAgICAgdGhpcy5jbGllbnQ/LnN0YXR1cy5jdXJyZW50ID09PSBcImNsb3NlZFwiXG4gICAgICAgID8gaHRtbGAgPGRpdiBjbGFzcz1cIm1lc3NhZ2VcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxoMT5EaXNjb25uZWN0ZWQgZnJvbSBob3N0PC9oMT5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9JHt0aGlzLiNuZXdfbG9jYWx9PkNvbnRpbnVlIGxvY2FsbHk8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PmBcbiAgICAgICAgOiBudWxsO1xuXG4gICAgbGV0IG92ZXJsYXkgPSBlcnJvciB8fCBjb25uZWN0aW5nIHx8IGRpc2Nvbm5lY3RlZDtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxzZWN0aW9uIGlkPVwidG9vbGJhclwiIGNsYXNzPVwiZ3JvdXBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImdyb3VwXCI+XG4gICAgICAgICAgJHt0aGlzLmNsaWVudFxuICAgICAgICAgICAgPyBodG1sYDxjbGllbnQtc3RhdHVzIHN0YXR1cz0ke3RoaXMuY2xpZW50LnN0YXR1cy5jdXJyZW50fT48L2NsaWVudC1zdGF0dXM+YFxuICAgICAgICAgICAgOiBodG1sYDxob3N0LXRvZ2dsZVxuICAgICAgICAgICAgICAgIHN0YXR1cz0ke3RoaXMuc2VydmVyPy5zaWduYWxlci5zdGF0dXMuY3VycmVudCA/PyBcImxvY2FsXCJ9XG4gICAgICAgICAgICAgICAgQGVuYWJsZT0ke3RoaXMuI2hvc3R9XG4gICAgICAgICAgICAgICAgQGRpc2FibGU9JHt0aGlzLiN1bmhvc3R9XG4gICAgICAgICAgICAgID48L2hvc3QtdG9nZ2xlPmB9XG4gICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICBHcmlkOlxuICAgICAgICAgICAgPGlucHV0IGlkPVwid2lkdGhcIiB0eXBlPVwibnVtYmVyXCIgbWluPVwiMVwiIEBpbnB1dD0ke3RoaXMuI3VwZGF0ZURpbX0gLnZhbHVlPSR7dGhpcy5nYW1lLnRhYmxldG9wLmdyaWRfZGltWzBdICsgXCJcIn0gLz4geFxuICAgICAgICAgICAgPGlucHV0IGlkPVwiaGVpZ2h0XCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjFcIiBAaW5wdXQ9JHt0aGlzLiN1cGRhdGVEaW19IC52YWx1ZT0ke3RoaXMuZ2FtZS50YWJsZXRvcC5ncmlkX2RpbVsxXSArIFwiXCJ9IC8+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICR7dGhpcy5zZWxlY3Rpb24uc2l6ZSA9PT0gMVxuICAgICAgICAgICAgPyBodG1sYFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIEBjbGljaz0keygpID0+IHRoaXMuZ2FtZS5hcHBseSh7IHR5cGU6IFwidG9rZW4tcmVvcmRlclwiLCBpZDogZmlyc3QodGhpcy5zZWxlY3Rpb24pISwgaWR4OiBcImRvd25cIiB9KX1cbiAgICAgICAgICAgICAgICAgICAgP2Rpc2FibGVkPSR7dGhpcy5nYW1lLnRhYmxldG9wLnRva2Vucy5pbmRleChmaXJzdCh0aGlzLnNlbGVjdGlvbikhKSA9PT0gMH1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgTW92ZSBEb3duXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSR7KCkgPT4gdGhpcy5nYW1lLmFwcGx5KHsgdHlwZTogXCJ0b2tlbi1yZW9yZGVyXCIsIGlkOiBmaXJzdCh0aGlzLnNlbGVjdGlvbikhLCBpZHg6IFwidXBcIiB9KX1cbiAgICAgICAgICAgICAgICAgICAgP2Rpc2FibGVkPSR7dGhpcy5nYW1lLnRhYmxldG9wLnRva2Vucy5pbmRleChmaXJzdCh0aGlzLnNlbGVjdGlvbikhKSA9PT0gdGhpcy5nYW1lLnRhYmxldG9wLnRva2Vucy5zaXplIC0gMX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgTW92ZSBVcFxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIDogbnVsbH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJncm91cFwiPlxuICAgICAgICAgIDxidXktbWUtYS1jb2ZmZWUgY2xhc3M9XCJyaWdodFwiPjwvYnV5LW1lLWEtY29mZmVlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICAgIDxiZy1jYW52YXNcbiAgICAgICAgYmc9JHtpZkRlZmluZWQodGhpcy5nYW1lLnRhYmxldG9wLmJnID8/IHVuZGVmaW5lZCl9XG4gICAgICAgIC5zZWxlY3Rpb249JHt0aGlzLnNlbGVjdGlvbn1cbiAgICAgICAgd2lkdGg9JHt0aGlzLmdhbWUudGFibGV0b3AuZ3JpZF9kaW1bMF19XG4gICAgICAgIGhlaWdodD0ke3RoaXMuZ2FtZS50YWJsZXRvcC5ncmlkX2RpbVsxXX1cbiAgICAgICAgLnRva2Vucz0ke3RoaXMuZ2FtZS50YWJsZXRvcC50b2tlbnN9XG4gICAgICAgIC5jYWxsb3V0cz0ke3RoaXMuZ2FtZS5jYWxsb3V0c31cbiAgICAgICAgQHRva2VuLWRyb3A9JHsoeyBkZXRhaWwgfTogVG9rZW5Ecm9wRXZlbnQpID0+IHRoaXMuZ2FtZS5hZGRfdG9rZW4oZGV0YWlsLmltZywgeyBsb2M6IGRldGFpbC5sb2MsIHI6IDAsIGRpbTogZGV0YWlsLmRpbSB9KX1cbiAgICAgICAgQGJnLWRyb3A9JHsoeyBkZXRhaWwgfTogQmdEcm9wRXZlbnQpID0+IHRoaXMuZ2FtZS5zZXRfYmcoZGV0YWlsKX1cbiAgICAgICAgQHRva2VuLXNlbGVjdD0keyh7IGRldGFpbCB9OiBUb2tlblNlbGVjdEV2ZW50KSA9PiB7XG4gICAgICAgICAgdGhpcy5zZWxlY3Rpb24gPSBuZXcgU2V0KGRldGFpbCk7XG4gICAgICAgIH19XG4gICAgICAgIEBnYW1lLWV2ZW50PSR7KHsgZGV0YWlsIH06IEN1c3RvbUV2ZW50PEdhbWVFdmVudD4pID0+IHRoaXMuZ2FtZS5hcHBseShkZXRhaWwpfVxuICAgICAgPjwvYmctY2FudmFzPlxuICAgICAgJHtvdmVybGF5fVxuICAgIGA7XG4gIH1cblxuICB1cGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzOiBNYXA8c3RyaW5nLCBhbnk+KSB7XG4gICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcyhcImNsaWVudFwiKSkge1xuICAgICAgZG9jdW1lbnQudGl0bGUgPSBgQmF0dGxlR3JpZCR7dGhpcy5jbGllbnQgJiYgdGhpcy5jbGllbnQuc3RhdHVzLmN1cnJlbnQgPT09IFwib3BlblwiID8gKHRoaXMuc2VydmVyID8gXCItIEhvc3RpbmdcIiA6IFwiLSBDb25uZWN0ZWRcIikgOiBcIlwifWA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHN0eWxlcyA9IGNzc2BcbiAgICA6aG9zdCB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBncmlkOlxuICAgICAgICBcInRvb2xiYXJcIiAzMHB4XG4gICAgICAgIFwidmlld3BvcnRcIiBtaW5tYXgoMCwgMWZyKVxuICAgICAgICAvIG1pbm1heCgwLCAxZnIpO1xuICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gICAgICAtLXVpLWJnOiAjZjlmOWZhO1xuICAgIH1cblxuICAgIC5tZXNzYWdlIHtcbiAgICAgIGdyaWQtYXJlYTogMSAvIDEgLyAzIC8gMTtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1pdGVtczogY2VudGVyO1xuICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICB6LWluZGV4OiAyO1xuICAgIH1cblxuICAgIC5yaWdodCB7XG4gICAgICBqdXN0aWZ5LXNlbGY6IGVuZDtcbiAgICB9XG5cbiAgICBiZy1jYW52YXMge1xuICAgICAgZ3JpZC1hcmVhOiB2aWV3cG9ydDtcbiAgICAgIHotaW5kZXg6IDE7XG4gICAgfVxuXG4gICAgaW5wdXRbdHlwZT1cIm51bWJlclwiXSB7XG4gICAgICB3aWR0aDogM2VtO1xuICAgIH1cblxuICAgIC5ncm91cCB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIGZsZXgtd3JhcDogbm93cmFwO1xuICAgIH1cblxuICAgICN0b29sYmFyIHtcbiAgICAgIGdyaWQtYXJlYTogdG9vbGJhcjtcbiAgICAgIGJveC1zaGFkb3c6IDAgMCA0cHggZ3JheTtcbiAgICAgIHotaW5kZXg6IDI7XG4gICAgICBiYWNrZ3JvdW5kOiB2YXIoLS11aS1iZyk7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICBwYWRkaW5nOiAwIDFlbTtcbiAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogdW5zZXQ7XG4gICAgfVxuICAgIC5ncm91cCBpbWcge1xuICAgICAgd2lkdGg6IDFlbTtcbiAgICAgIGhlaWdodDogMWVtO1xuICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgfVxuICBgO1xuXG4gICN1cGRhdGVEaW0gPSAoKSA9PiB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgdGhpcy5nYW1lLnNldF9kaW0obWF4X3AoWzEsIDFdLCBbcGFyc2VJbnQodGhpcy53aWR0aD8udmFsdWUpID8/IDAsIHBhcnNlSW50KHRoaXMuaGVpZ2h0Py52YWx1ZSkgPz8gMF0pKTtcbiAgfTtcblxuICBhc3luYyBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIHRoaXMuZ2FtZS5hZGRFdmVudExpc3RlbmVyKFwiZ2FtZS1ldmVudFwiLCAoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGlkIG9mIHRoaXMuc2VsZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuZ2FtZS50YWJsZXRvcC50b2tlbnMuaGFzKGlkKSB8fCB0aGlzLnNlbGVjdGlvbi5kZWxldGUoaWQpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gICAgICB0aGlzLmNhbnZhcz8ucmVxdWVzdFVwZGF0ZSgpO1xuICAgIH0pO1xuICAgIC8vIHNldFRpbWVvdXQoIGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcImRlYnVnIG5vdyBwbGVhc2VcIik7XG5cbiAgICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICBsZXQgZ2FtZV9pZCA9IHBhcmFtcy5nZXQoXCJnYW1lXCIpIGFzIFBlZXJJZCB8IHVuZGVmaW5lZDtcbiAgICBpZiAoIWdhbWVfaWQpIHJldHVybiBhd2FpdCB0aGlzLiNuZXdfbG9jYWwoKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZyhcIm5ldyBjbGllbnRcIik7XG4gICAgICB0aGlzLmNsaWVudCA9IG5ldyBDbGllbnQoZ2FtZV9pZCwgdGhpcy5nYW1lKTtcbiAgICAgIHRoaXMuY2xpZW50LnN0YXR1cy5vbnN0YXR1cyA9ICgpID0+IHRoaXMucmVxdWVzdFVwZGF0ZSgpO1xuICAgICAgY29uc29sZS5sb2coXCJ3YWl0aW5nIGZvciBjb25uZWN0aW9uXCIpO1xuICAgICAgYXdhaXQgdGltZW91dCh0aGlzLmNsaWVudC5zdGF0dXMuY29ubmVjdGVkKCksIDUwMDApO1xuICAgICAgY29uc29sZS5sb2coXCJjb25uZWN0ZWRcIik7XG4gICAgfSBjYXRjaCB7XG4gICAgICBjb25zb2xlLmxvZyhcImdpdmluZyB1cFwiKTtcbiAgICAgIGF3YWl0IHRoaXMuI25ld19sb2NhbCgpO1xuICAgIH1cblxuICAgIC8vIH0sIDIwMDApO1xuICB9XG5cbiAgI25ld19sb2NhbCA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIm5ldyBsb2NhbC4uLlwiKTtcbiAgICBhd2FpdCB0aGlzLmNsaWVudD8uc2h1dGRvd24oKTtcbiAgICAvLyB0aGlzLmNsaWVudCAmJiAodGhpcy5jbGllbnQuc3RhdHVzLm9uc3RhdHVzID0gdW5kZWZpbmVkKTtcbiAgICB0aGlzLmNsaWVudCA9IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgXCJcIiwgd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoXCI/XCIpWzBdKTtcbiAgfTtcblxuICAjaG9zdCA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5jbGllbnQ/LnNodXRkb3duKCk7XG4gICAgICB0aGlzLmNsaWVudCA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy5ob3N0X3BlbmRpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5zZXJ2ZXIgPSBuZXcgU2VydmVyKHRoaXMuZ2FtZSk7XG4gICAgICB0aGlzLnNlcnZlci5zaWduYWxlci5zdGF0dXMub25zdGF0dXMgPSAoKSA9PiB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiV0FJVElOR1wiKTtcbiAgICAgIGF3YWl0IHRpbWVvdXQodGhpcy5zZXJ2ZXIuc2lnbmFsZXIuc3RhdHVzLmNvbm5lY3RlZCgpLCA1MDAwKTtcblxuICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHt9LCBcIlwiLCBcIj9nYW1lPVwiICsgdGhpcy5zZXJ2ZXIuc2lnbmFsZXIucGVlcl9pZCk7XG4gICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh3aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIGF3YWl0IHRoaXMuI3VuaG9zdDtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5ob3N0X3BlbmRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgI3VuaG9zdCA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgcyA9IHRoaXMuc2VydmVyO1xuICAgIHRoaXMuc2VydmVyID0gdW5kZWZpbmVkO1xuXG4gICAgcyAmJiAocy5zaWduYWxlci5zdGF0dXMub25zdGF0dXMgPSB1bmRlZmluZWQpO1xuICAgIGF3YWl0IHM/LnNodXRkb3duKCk7XG5cbiAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIFwiXCIsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSk7XG4gIH07XG59XG4iLCJpbXBvcnR7bm90aGluZyBhcyB0fWZyb21cIi4uL2xpdC1odG1sLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBsPWw9Pm51bGwhPWw/bDp0O2V4cG9ydHtsIGFzIGlmRGVmaW5lZH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZi1kZWZpbmVkLmpzLm1hcFxuIiwiaW1wb3J0IHsgc3RvcF9ldiB9IGZyb20gXCIuLi91dGlsL2V2ZW50c1wiO1xuaW1wb3J0IHsgYWRkX3AsIGRpdl9jLCBkaXZfcCwgbWF4X3AsIG11bF9jLCBtdWxfcCwgUG9pbnQsIHN1Yl9wIH0gZnJvbSBcIi4uL3V0aWwvbWF0aFwiO1xuXG50eXBlIFN0YXRlID0ge1xuICBvZmZzZXQ6IFswLCAwXTtcbiAgejogbnVtYmVyO1xufTtcblxuY29uc3QgTUFYX1NDQUxFID0gNDtcbmNvbnN0IE1JTl9TQ0FMRSA9IDE7XG5jb25zdCBBVVRPX1pPT01fRklMTCA9IDAuOTU7IC8vIFBlcmNlbnRhZ2Ugb2YgdGhlIHZpZXdwb3J0IHRvIGZpbGwgb24gZmlyc3QgbG9hZFxuXG5jb25zdCBTUEVFRCA9IDAuMDAyOyAvLyAxMDAgcHggcGVyIHNlY29uZFxuXG5leHBvcnQgY2xhc3MgUFBaIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICByb290OiBTaGFkb3dSb290O1xuICBjb250YWluZXI6IEhUTUxEaXZFbGVtZW50O1xuXG4gIHN0YXRlID0geyB6OiAxLCBzY3JvbGxfcG9zOiBbMCwgMF0gYXMgW251bWJlciwgbnVtYmVyXSB9O1xuICBkZXNpcmVkX3N0YXRlID0geyB6OiAxIH07XG5cbiAgLy8gVE9ETzogcmVwbGFjZSB3aXRoIGEgYGRlc2lyZWRfc3RhdGUuc2Nyb2xsX3Bvc2AgdGhhdCB3ZSBpbnRlcnBvbGF0ZVxuXG4gIC8qKiBUaGUgcG9pbnQgYXJvdW5kIHdoaWNoIGFuIGFuaW1hdGVkIHpvb20gb3BlcmF0ZXMgKi9cbiAgb3JpZ2luID0gWzAsIDBdIGFzIFtudW1iZXIsIG51bWJlcl07XG5cbiAgLyoqIExvY2F0aW9uIG9mIHRoZSB2aWV3cG9ydCBpbiBjbGllbnQgc3BhY2UgKi9cbiAgdmxvYzogUG9pbnQgPSBbMCwgMF0gYXMgUG9pbnQ7XG5cbiAgLyoqIERpbWVuc2lvbnMgb2YgdGhlIHZpZXdwb3J0ICovXG4gIHZkaW06IFBvaW50ID0gWzAsIDBdIGFzIFBvaW50O1xuXG4gIC8qKiBEaW1lbnNpb25zIG9mIHRoZSBjbGllbnQgKi9cbiAgY2RpbTogUG9pbnQgPSBbMCwgMF0gYXMgUG9pbnQ7XG5cbiAgLyoqIE9mZnNldCBvZiB0aGUgY2xpZW50IHdpdGhpbiB0aGUgaW50ZXJpb3Igc2Nyb2xsYWJsZSBzcGFjZS4gVXNlZCB0byBjZW50ZXIgY29udGVudCAqL1xuICBvZmZzZXQ6IFBvaW50ID0gWzAsIDBdIGFzIFBvaW50O1xuXG4gIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB6b29taW5nIHNob3VsZCBiZSBhbmltYXRlZCBvciBpbW1lZGlhdGUgKi9cbiAgc21vb3RoOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnJvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6IFwib3BlblwiIH0pO1xuICAgIHRoaXMucm9vdC5hcHBlbmRDaGlsZChQUFoudGVtcGxhdGUoKS5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLnJvb3QuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJcIikgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgdGhpcy4jcmVzaXplX29ic2VydmVyLm9ic2VydmUodGhpcyk7XG4gICAgdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoXCJzbG90XCIpIS5vbnNsb3RjaGFuZ2UgPSAoeyB0YXJnZXQgfSkgPT4ge1xuICAgICAgbGV0IHNsb3QgPSB0YXJnZXQgYXMgSFRNTFNsb3RFbGVtZW50O1xuICAgICAgbGV0IHN2ZyA9IHNsb3QuYXNzaWduZWRFbGVtZW50cygpWzBdIGFzIFNWR1NWR0VsZW1lbnQ7XG4gICAgICB0aGlzLiNyZXNpemVfb2JzZXJ2ZXIub2JzZXJ2ZShzdmcpO1xuXG4gICAgICB0aGlzLnNtb290aCA9IGZhbHNlO1xuICAgICAgdGhpcy4jem9vbV90b19maXQoKTtcbiAgICB9O1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCAoKSA9PiAodGhpcy5zdGF0ZS5zY3JvbGxfcG9zID0gW3RoaXMuc2Nyb2xsTGVmdCwgdGhpcy5zY3JvbGxUb3BdKSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiZ2VzdHVyZXN0YXJ0XCIsIHRoaXMuI2dlc3R1cmUuc3RhcnQpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImdlc3R1cmVjaGFuZ2VcIiwgdGhpcy4jZ2VzdHVyZS5jaGFuZ2UpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuI2tleWJvYXJkX3pvb20sIHtwYXNzaXZlOiBmYWxzZX0pO1xuICB9XG5cbiAgI3pvb21fdG9fZml0KCkge1xuICAgICAgbGV0IHN2ZyA9ICh0aGlzLnJvb3QucXVlcnlTZWxlY3Rvcignc2xvdCcpIGFzIEhUTUxTbG90RWxlbWVudCkuYXNzaWduZWRFbGVtZW50cygpWzBdIGFzIFNWR1NWR0VsZW1lbnQ7XG4gICAgICBsZXQgZGltID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGxldCB2ZGltID0gW2RpbS53aWR0aCwgZGltLmhlaWdodF0gYXMgUG9pbnQ7XG4gICAgICBsZXQgY2RpbSA9IFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXSBhcyBQb2ludDtcbiAgICAgIGNvbnN0IHpvb20gPSBNYXRoLm1heChNSU5fU0NBTEUsIE1hdGgubWluKE1BWF9TQ0FMRSwgLi4ubXVsX2MoZGl2X3AodmRpbSwgY2RpbSksIEFVVE9fWk9PTV9GSUxMKSkpO1xuICAgICAgdGhpcy56b29tKFswLCAwXSwgem9vbSAtIHRoaXMuc3RhdGUueik7XG4gIH1cblxuXG4gICNyZXNpemVfb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICBmb3IgKGxldCBlIG9mIGVudHJpZXMpIHtcbiAgICAgIGlmIChlLnRhcmdldCA9PT0gdGhpcykge1xuICAgICAgICB0aGlzLnZkaW0gPSBbZS5jb250ZW50UmVjdC53aWR0aCwgZS5jb250ZW50UmVjdC5oZWlnaHRdO1xuICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdGhpcy52bG9jID0gW3JlY3QueCwgcmVjdC55XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vQHRzLWlnbm9yZTtcbiAgICAgICAgdGhpcy5jZGltID0gW2UudGFyZ2V0LndpZHRoLmJhc2VWYWwudmFsdWUsIGUudGFyZ2V0LmhlaWdodC5iYXNlVmFsLnZhbHVlXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNlbnRlcigpO1xuICB9KTtcblxuICBsb29wID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCBwcnY7XG4gICAgbGV0IHRzO1xuICAgIHdoaWxlICgoKHBydiA9IHRzKSB8fCB0cnVlKSAmJiAodHMgPSBhd2FpdCBuZXh0X2ZyYW1lKCkpKSB7XG4gICAgICBpZiAoIXBydikgY29udGludWU7XG4gICAgICBsZXQgZGVsdGEgPSB0aGlzLmRlc2lyZWRfc3RhdGUueiAtIHRoaXMuc3RhdGUuejtcbiAgICAgIGlmIChkZWx0YSA9PT0gMCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGxldCBlbGFwc2VkID0gdHMgLSBwcnY7XG5cbiAgICAgIC8vIElmIGl0J3Mgc21vb3RoLCB3ZSdsbCBtb3ZlIGluIGluY3JlbWVudHMsIG90aGVyd2lzZSBwZXJmb3JtIGFsbCBhZGp1c3RtZW50cyBpbiBvbmUgZnJhbWVcbiAgICAgIGxldCBkZWx0YV9zY2FsZSA9IHRoaXMuc21vb3RoID8gTWF0aC5zaWduKGRlbHRhKSAqIE1hdGgubWluKGVsYXBzZWQgKiBTUEVFRCAqIHRoaXMuc3RhdGUueiwgTWF0aC5hYnMoZGVsdGEpKSA6IGRlbHRhO1xuXG4gICAgICAvLyBSZWNvcmQgdGhlIG5ldyB6XG4gICAgICB0aGlzLnN0YXRlLnogKz0gZGVsdGFfc2NhbGU7XG5cbiAgICAgIHRoaXMuY2VudGVyKCk7XG5cbiAgICAgIC8vIEJlIHN1cmUgdG8gcHJldmVudCBuZWdhdGl2ZSBzY3JvbGwgcG9zaXRpb25zXG4gICAgICB0aGlzLnN0YXRlLnNjcm9sbF9wb3MgPSBtYXhfcChbMCwgMF0sIGFkZF9wKG11bF9jKHRoaXMub3JpZ2luLCBkZWx0YV9zY2FsZSksIHRoaXMuc3RhdGUuc2Nyb2xsX3BvcykpO1xuICAgICAgdGhpcy5zY3JvbGxUbyh7IGxlZnQ6IHRoaXMuc3RhdGUuc2Nyb2xsX3Bvc1swXSwgdG9wOiB0aGlzLnN0YXRlLnNjcm9sbF9wb3NbMV0gfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDZW50ZXJzIHRoZSBjb250ZW50IG9uIHRoZSBzY3JlZW4gaWYgaXQgaXMgc21hbGxlciB0aGFuIHRoZSB2aWV3cG9ydC5cbiAgICogVGhpcyB1cGRhdGVzIHRoZSBgb2Zmc2V0YCBtZW1iZXIgYWNjb3JkaW5nbHlcbiAgICovXG4gIGNlbnRlcigpIHtcbiAgICB0aGlzLm9mZnNldCA9IG1heF9wKFswLCAwXSwgbXVsX2Moc3ViX3AodGhpcy52ZGltLCBtdWxfYyh0aGlzLmNkaW0sIHRoaXMuc3RhdGUueikpLCAwLjUpKTtcbiAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7dGhpcy5vZmZzZXRbMF19cHgsICR7dGhpcy5vZmZzZXRbMV19cHgpIHNjYWxlKCR7dGhpcy5zdGF0ZS56fSlgO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGF0dGFjaGVkIHRvIHRoZSBET00uXG4gICAqIFNldHMgdXAgb3VyIGFuaW1hdGlvbiBsb29wIGFuZCBldmVudCBsaXN0ZW5lZXNcbiAgICovXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMubG9vcCgpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIHRoaXMud2hlZWwsIHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IHRydWUgfSk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYW4gaW5jcmVtZW50YWwgem9vbSBvbiBhIGxvY2F0aW9uIChzY3JlZW4gY29vcmRpbmF0ZSlcbiAgICovXG4gIHpvb20gPSAob3JpZ2luOiBbbnVtYmVyLCBudW1iZXJdLCBpbmM6IG51bWJlcikgPT4ge1xuICAgIC8vIFN0ZXAgMTogQm91bmQgdGhlIHByb3Bvc2VkIGRlbHRhIGJ5IHRoZSBtaW4gYW5kIG1heCBzY2FsZVxuICAgIHRoaXMuZGVzaXJlZF9zdGF0ZS56ID0gTWF0aC5taW4oTUFYX1NDQUxFLCBNYXRoLm1heChNSU5fU0NBTEUsIHRoaXMuZGVzaXJlZF9zdGF0ZS56ICsgaW5jKSk7XG5cbiAgICAvLyBTdGVwIDI6IFJlY29yZCB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24uXG4gICAgLy8gICAgICAgICAgVE9ETzogRGV0ZXJtaW5lIGlmIHdlIHN0aWxsIG5lZWQgdGhpcyB3aGVuIHdlIHJlY29yZCBvbiBzY3JvbGwgZXZlbnRcbiAgICB0aGlzLnN0YXRlLnNjcm9sbF9wb3MgPSBbdGhpcy5zY3JvbGxMZWZ0LCB0aGlzLnNjcm9sbFRvcF07XG5cbiAgICAvLyBTdGVwIDM6IFJlY29yZCB0aGUgb3JpZ2luIHRoZSB6b29tIGluIGNvbnRlbnQtbG9jYWwgY29vcmRpbmF0ZXMuXG4gICAgLy8gICAgICAgICAgVGhlIGdvYWwgb2Ygem9vbWluZyBpcyB0byBrZWVwIHRoaXMgY29vcmRpbmF0ZSBpbiB0aGUgc2FtZSBjbGllbnQgbG9jYXRpb25cbiAgICB0aGlzLm9yaWdpbiA9IHRoaXMuY29vcmRUb0xvY2FsKG9yaWdpbik7XG5cbiAgICAvLyBTdGVwIDQ6IERvIHRoZSB6b29taW5nPyBXZSBoYXZlIGFuIGFuaW1hdGlvbiBsb29wIHJ1bm5pbmcgZm9yIHRoYXRcbiAgfTtcblxuICAvKipcbiAgICogUGVyZm9ybXMgYW4gaW5jcmVtZW50YWwgem9vbSBvbiBhIGxvY2F0aW9uIChsb2NhbCBjb29yZGluYXRlIGluIGNvbnRlbnQpXG4gICAqL1xuICB3aGVlbCA9IChldjogV2hlZWxFdmVudCkgPT4ge1xuICAgIGlmICghZXYuY3RybEtleSkgcmV0dXJuO1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAvLyBGaXJlZm94IHNjcm9sbHMgYnkgbGluZXMsIGNocm9tZSBzY3JvbGxzIGJ5IHBpeGVscywgdGhlcmUncyBubyBmb3JtYWxcbiAgICAvLyBkZWZpbml0aW9uIG9mIHdoYXQgYSBcImxpbmVcIiBpcywgYnV0IGxldCdzIGp1c3Qgc2F5IGl0J3MgMTAgcHhcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gZXYuZGVsdGFNb2RlID09PSBXaGVlbEV2ZW50LkRPTV9ERUxUQV9MSU5FID8gMTAgOiAxO1xuXG4gICAgLy8gRG9uJ3QgbGV0IGFueSB3ZWlyZCBpbnB1dHMgY2F1c2UgYSBqdW1wIG9mIG1vcmUgdGhhbiA1MHB4IC8gNSBsaW5lc1xuICAgIGNvbnN0IGRlbHRhID0gTWF0aC5taW4oNTAsIE1hdGgubWF4KC01MCwgLWV2LmRlbHRhWSAqIG11bHRpcGxpZXIpKTtcblxuICAgIC8vIFR1cm4gdGhlIHNjcm9sbCBkZWx0YSBpbnRvIGEgem9vbSBkZWx0YS4gV2UgdXNlIGEgbWFnaWMgc2NhbGFyLFxuICAgIC8vICBidXQgbm90ZSB0aGF0IHdlIHpvb20gKm1vcmUqIHRoZSBtb3JlIHpvb21lZCBpbiB3ZSBhcmUuXG4gICAgY29uc3Qgem9vbSA9IGRlbHRhICogMC4wMDUgKiB0aGlzLnN0YXRlLno7XG5cbiAgICAvLyBPbmx5IGRvIHNtb290aGluZyBpZiB0aGUgZGVsdGEgaXMgbGFyZ2UuXG4gICAgLy8gVGhpcyBzaG91bGQgY29ycmVzcG9uZCB0byB1c2luZyBhIHNjcm9sbCB3aGVlbCBhcyBvcHBvc2VkIHRvIGEgdG91Y2hwYWRcbiAgICB0aGlzLnNtb290aCA9IE1hdGguYWJzKGRlbHRhKSA9PT0gNTA7XG5cbiAgICB0aGlzLnpvb20oW2V2LmNsaWVudFgsIGV2LmNsaWVudFldLCB6b29tKTtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXI7XG4gIH07XG5cblxuXG5cbiAgI2tleWJvYXJkX3pvb20gPSAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcInpvb20hXCIsIGV2LmN0cmxLZXksIGV2LmtleSk7XG4gICAgaWYgKCFldi5jdHJsS2V5KSByZXR1cm47XG4gICAgaWYgKGV2LmtleSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLnNtb290aCA9IHRydWU7XG4gICAgICB0aGlzLnpvb20odGhpcy5jb29yZFRvTG9jYWwoYWRkX3AodGhpcy52bG9jLCBkaXZfYyh0aGlzLnZkaW0sIDIpKSksIC0uMiAqIHRoaXMuc3RhdGUueilcbiAgICAgIHN0b3BfZXYoZXYpO1xuICAgIH0gZWxzZSBpZiAoZXYua2V5ID09PSAnPScpIHtcbiAgICAgIHRoaXMuc21vb3RoID0gdHJ1ZTtcbiAgICAgIHRoaXMuem9vbSh0aGlzLmNvb3JkVG9Mb2NhbChhZGRfcCh0aGlzLnZsb2MsIGRpdl9jKHRoaXMudmRpbSwgMikpKSwgLjIgKiB0aGlzLnN0YXRlLnopXG4gICAgICBzdG9wX2V2KGV2KTtcbiAgICB9IGVsc2UgaWYgKGV2LmtleSA9PT0gJzAnKSB7XG4gICAgICB0aGlzLnNtb290aCA9IHRydWU7XG4gICAgICB0aGlzLiN6b29tX3RvX2ZpdCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdlc3R1cmUtYmFzZWQgc2Nyb2xsaW5nXG4gIC8vIFNhZmFyaSByZWNvcmRzIHBpbmNoZXMgYXMgZ2VzdHVyZSBldmVudHMgcmF0aGVyIHRoYW4gd2hlZWwgZXZlbnRzXG4gIC8vIHNvIHdlIGhhdmUgdG8gbGlzdGVuIGZvciB0aGVzZSBhcyB3ZWxsXG4gICNnZXN0dXJlID0ge1xuICAgIHByZXZfc2NhbGU6IDAsXG4gICAgb3JpZ2luOiBbMCwgMF0gYXMgW251bWJlciwgbnVtYmVyXSxcbiAgICBzdGFydDogKGV2OiBhbnkpID0+IHtcbiAgICAgIHN0b3BfZXYoZXYpO1xuICAgICAgdGhpcy4jZ2VzdHVyZS5vcmlnaW4gPSB0aGlzLmNvb3JkVG9Mb2NhbChbZXYuY2xpZW50WCwgZXYuY2xpZW50WV0pO1xuICAgICAgdGhpcy4jZ2VzdHVyZS5wcmV2X3NjYWxlID0gMTtcbiAgICB9LFxuXG4gICAgY2hhbmdlOiAoZXY6IGFueSkgPT4ge1xuICAgICAgc3RvcF9ldihldik7XG4gICAgICB0aGlzLnpvb20oXG4gICAgICAgIHRoaXMuI2dlc3R1cmUub3JpZ2luLFxuICAgICAgICAvLyBJJ2xsIGJlIHJlYWwgSSdtIG5vdCBlbnRpcmVseSBzdXJlIHdoeSB0aGlzIGlzIHRoZSBtYWdpYyBudW1iZXJcbiAgICAgICAgdGhpcy5zdGF0ZS56ICogKGV2LnNjYWxlIC0gdGhpcy4jZ2VzdHVyZS5wcmV2X3NjYWxlKSAqIDEuNVxuICAgICAgKTtcbiAgICAgIHRoaXMuI2dlc3R1cmUucHJldl9zY2FsZSA9IGV2LnNjYWxlO1xuICAgIH0sXG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGNsaWVudCBjb29yZGluYXRlcyBpbnRvIGNvbnRlbnQgY29vcmRpbmF0ZXMsIGFjY291bnRpbmcgZm9yXG4gICAqIHRoZSB2aWV3cG9ydCdzIG9mZnNldCBhbmQgc2NhbGVcbiAgICovXG4gIGNvb3JkVG9Mb2NhbChjbGllbnRfY29vcmQ6IFtudW1iZXIsIG51bWJlcl0pOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICAvLyB2OiBUaGUgY29vcmRpbmF0ZSBvZiB0aGUgZXZlbnQgd2l0aGluIHRvIHRoZSBpbnRlcmlvciBzY3JvbGxhYmxlIHNwYWNlOlxuICAgIGNvbnN0IHYgPSBhZGRfcChzdWJfcChjbGllbnRfY29vcmQsIHRoaXMudmxvYyksIHRoaXMuc3RhdGUuc2Nyb2xsX3Bvcyk7XG4gICAgLy8gV2Ugd2FudCB0byBqdXN0IGRpdmlkZSBieSBzY2FsZSwgYnV0IGJlZm9yZSB3ZSBjYW4gZG8gdGhhdCwgd2UgaGF2ZSB0byBzdWJ0cmFjdFxuICAgIC8vIGFueSBvZmZzZXQgb24gdGhlIGNvbnRlbnQgKHRoZSByZXN1bHQgb2Ygb3VyIGNlbnRlcmluZyBvcGVyYXRpb24pXG4gICAgY29uc3QgcmVzID0gZGl2X2Moc3ViX3AodiwgdGhpcy5vZmZzZXQpLCB0aGlzLnN0YXRlLnopO1xuICAgIHJldHVybiByZXM7XG4gIH1cblxuICBzdGF0aWMgdGVtcGxhdGUoKTogSFRNTFRlbXBsYXRlRWxlbWVudCB7XG4gICAgbGV0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG4gICAgdC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogYXV0bzsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICNjb250YWluZXIge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9zdHlsZT5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzbG90IGlkPVwiY29udGVudFwiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgIHJldHVybiB0O1xuICB9XG59XG5cbmNvbnN0IG5leHRfZnJhbWUgPSAoKTogUHJvbWlzZTxET01IaWdoUmVzVGltZVN0YW1wPiA9PiBuZXcgUHJvbWlzZSgocmVzKSA9PiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlcykpO1xuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJwLXAtelwiLCBQUFopO1xuIiwiLy8vIDxyZWZlcmVuY2UgbGliPVwiRE9NXCIgLz5cblxuaW1wb3J0IFwiLi91aS9zYWZhcmktZml4XCI7XG5pbXBvcnQgXCIuL3VpL2NhbnZhc1wiO1xuaW1wb3J0IFwiLi91aS9hcHBcIjtcbmltcG9ydCBcIi4vdWkvYXBwXCI7XG5pbXBvcnQgXCIuL3VpL3BwcFwiO1xuXG5hd2FpdCBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcihcIi4vc2VydmljZS13b3JrZXIuanNcIik7XG5cbmRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcbiAgXCJ3aGVlbFwiLFxuICAoZXYpID0+IHtcbiAgICBpZiAoZXYuY3RybEtleSkgZXYucHJldmVudERlZmF1bHQoKTtcbiAgfSxcbiAgeyBwYXNzaXZlOiBmYWxzZSB9XG4pO1xuIl0sIm5hbWVzIjpbImFwcEhlaWdodCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsIndpbmRvdyIsImlubmVySGVpZ2h0IiwiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJrZXkiLCJkZXNjIiwiZCIsImMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiaSIsImRlZmluZVByb3BlcnR5IiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwic3RhdGUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsImNhbGwiLCJ2YWx1ZSIsImdldCIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJzZXQiLCJhZGRFdmVudExpc3RlbmVyIiwidCIsIlNoYWRvd1Jvb3QiLCJTaGFkeUNTUyIsIm5hdGl2ZVNoYWRvdyIsIkRvY3VtZW50IiwicHJvdG90eXBlIiwiQ1NTU3R5bGVTaGVldCIsImUiLCJTeW1ib2wiLCJuIiwiV2Vha01hcCIsInMiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJfJGNzc1Jlc3VsdCQiLCJFcnJvciIsImNzc1RleHQiLCJzdHlsZVNoZWV0IiwibyIsInJlcGxhY2VTeW5jIiwidG9TdHJpbmciLCJyZWR1Y2UiLCJTIiwiY3NzUnVsZXMiLCJ0cnVzdGVkVHlwZXMiLCJlbXB0eVNjcmlwdCIsImgiLCJyZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQiLCJ0b0F0dHJpYnV0ZSIsIkJvb2xlYW4iLCJBcnJheSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmcm9tQXR0cmlidXRlIiwiTnVtYmVyIiwicGFyc2UiLCJsIiwiYXR0cmlidXRlIiwidHlwZSIsIlN0cmluZyIsImNvbnZlcnRlciIsInJlZmxlY3QiLCJoYXNDaGFuZ2VkIiwiYSIsIkhUTUxFbGVtZW50Iiwic3VwZXIiLCJfJEVpIiwiTWFwIiwiaXNVcGRhdGVQZW5kaW5nIiwiaGFzVXBkYXRlZCIsIl8kRWwiLCJ1Iiwic3RhdGljIiwicHVzaCIsIm9ic2VydmVkQXR0cmlidXRlcyIsImZpbmFsaXplIiwiZWxlbWVudFByb3BlcnRpZXMiLCJmb3JFYWNoIiwiXyRFcCIsIl8kRXYiLCJub0FjY2Vzc29yIiwiaGFzT3duUHJvcGVydHkiLCJnZXRQcm9wZXJ0eURlc2NyaXB0b3IiLCJyZXF1ZXN0VXBkYXRlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImZpbmFsaXplZCIsImdldFByb3RvdHlwZU9mIiwicHJvcGVydGllcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjcmVhdGVQcm9wZXJ0eSIsImVsZW1lbnRTdHlsZXMiLCJmaW5hbGl6ZVN0eWxlcyIsInN0eWxlcyIsImlzQXJyYXkiLCJTZXQiLCJmbGF0IiwicmV2ZXJzZSIsInVuc2hpZnQiLCJ0b0xvd2VyQ2FzZSIsIl8kRV8iLCJQcm9taXNlIiwiZW5hYmxlVXBkYXRpbmciLCJfJEFMIiwiXyRFZyIsImFkZENvbnRyb2xsZXIiLCJfJEVTIiwicmVuZGVyUm9vdCIsImlzQ29ubmVjdGVkIiwiaG9zdENvbm5lY3RlZCIsInJlbW92ZUNvbnRyb2xsZXIiLCJzcGxpY2UiLCJpbmRleE9mIiwiY3JlYXRlUmVuZGVyUm9vdCIsInNoYWRvd1Jvb3QiLCJhdHRhY2hTaGFkb3ciLCJzaGFkb3dSb290T3B0aW9ucyIsImFkb3B0ZWRTdHlsZVNoZWV0cyIsIm1hcCIsImNyZWF0ZUVsZW1lbnQiLCJsaXROb25jZSIsInNldEF0dHJpYnV0ZSIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJjb25uZWN0ZWRDYWxsYmFjayIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiaG9zdERpc2Nvbm5lY3RlZCIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIl8kQUsiLCJfJEVPIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0UHJvcGVydHlPcHRpb25zIiwiXyRFQyIsIl8kRWoiLCJhc3luYyIsInJlamVjdCIsInNjaGVkdWxlVXBkYXRlIiwicGVyZm9ybVVwZGF0ZSIsInNob3VsZFVwZGF0ZSIsIndpbGxVcGRhdGUiLCJob3N0VXBkYXRlIiwidXBkYXRlIiwiXyRFayIsIl8kQUUiLCJob3N0VXBkYXRlZCIsImZpcnN0VXBkYXRlZCIsInVwZGF0ZWQiLCJ1cGRhdGVDb21wbGV0ZSIsImdldFVwZGF0ZUNvbXBsZXRlIiwibW9kZSIsIlJlYWN0aXZlRWxlbWVudCIsImdsb2JhbFRoaXMiLCJyZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucyIsImNyZWF0ZVBvbGljeSIsImNyZWF0ZUhUTUwiLCJNYXRoIiwicmFuZG9tIiwic2xpY2UiLCJjcmVhdGVDb21tZW50IiwiaXRlcmF0b3IiLCJ2IiwiXyIsIm0iLCJnIiwicCIsIl8kbGl0VHlwZSQiLCJzdHJpbmdzIiwidmFsdWVzIiwiJCIsInkiLCJiIiwiZm9yIiwidyIsIlQiLCJBIiwiY3JlYXRlVHJlZVdhbGtlciIsIkMiLCJsYXN0SW5kZXgiLCJleGVjIiwidGVzdCIsIlJlZ0V4cCIsInN0YXJ0c1dpdGgiLCJFIiwicGFydHMiLCJlbCIsImN1cnJlbnROb2RlIiwiY29udGVudCIsImZpcnN0Q2hpbGQiLCJyZW1vdmUiLCJhcHBlbmQiLCJjaGlsZE5vZGVzIiwibmV4dE5vZGUiLCJub2RlVHlwZSIsImhhc0F0dHJpYnV0ZXMiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsImVuZHNXaXRoIiwiZ2V0QXR0cmlidXRlIiwic3BsaXQiLCJpbmRleCIsIm5hbWUiLCJjdG9yIiwiTSIsIkgiLCJJIiwidGFnTmFtZSIsImRhdGEiLCJpbm5lckhUTUwiLCJQIiwiXyRDbCIsIl8kQ3UiLCJfJGxpdERpcmVjdGl2ZSQiLCJfJEFPIiwiXyRBVCIsIl8kQVMiLCJWIiwiXyRBTiIsIl8kQUQiLCJfJEFNIiwicGFyZW50Tm9kZSIsIl8kQVUiLCJjcmVhdGlvblNjb3BlIiwiaW1wb3J0Tm9kZSIsIk4iLCJuZXh0U2libGluZyIsIkwiLCJfJEFJIiwiXyRBSCIsIl8kQUEiLCJfJEFCIiwib3B0aW9ucyIsIl8kQ2ciLCJzdGFydE5vZGUiLCJlbmROb2RlIiwiXyRBUiIsImsiLCJpbnNlcnRCZWZvcmUiLCJjcmVhdGVUZXh0Tm9kZSIsIl8kQUMiLCJfJEFQIiwic2V0Q29ubmVjdGVkIiwiZWxlbWVudCIsImZpbGwiLCJjYXB0dXJlIiwib25jZSIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFuZGxlRXZlbnQiLCJob3N0IiwiUiIsImoiLCJEIiwiRiIsIk8iLCJXIiwiQiIsIloiLCJ6IiwibGl0SHRtbFBvbHlmaWxsU3VwcG9ydCIsImxpdEh0bWxWZXJzaW9ucyIsInJlbmRlck9wdGlvbnMiLCJfJERvIiwicmVuZGVyQmVmb3JlIiwicmVuZGVyIiwiXyRsaXRQYXJ0JCIsIl8kbGl0RWxlbWVudCQiLCJsaXRFbGVtZW50SHlkcmF0ZVN1cHBvcnQiLCJMaXRFbGVtZW50IiwibGl0RWxlbWVudFBvbHlmaWxsU3VwcG9ydCIsImxpdEVsZW1lbnRWZXJzaW9ucyIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiZWxlbWVudHMiLCJmaW5pc2hlciIsImRlc2NyaXB0b3IiLCJwbGFjZW1lbnQiLCJvcmlnaW5hbEtleSIsImluaXRpYWxpemVyIiwiYXNzaWduIiwicXVlcnlTZWxlY3RvciIsIkhUTUxTbG90RWxlbWVudCIsImFzc2lnbmVkRWxlbWVudHMiLCJfJEN0IiwiXyRDaSIsIl8kQVEiLCJkdCIsImtleXMiLCJ1dCIsIngiLCJhZGRfcCIsImFkZF9jIiwic3ViX3AiLCJtdWxfYyIsImRpdl9jIiwibWF4X3AiLCJtYXgiLCJtaW5fcCIsIm1pbiIsImNsYW1wX3AiLCJlcV9wIiwiaXNfcHJpbWFyeV9kb3duIiwiZXYiLCJpc1ByaW1hcnkiLCJwb2ludGVyVHlwZSIsInByZXNzdXJlIiwiaXNfbW91c2VfZG93biIsImJ1dHRvbnMiLCJzdG9wX2V2IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJ3aW5kb3dfZXYiLCJkZXRhaWwiLCJDdXN0b21FdmVudCIsImdldEltYWdlIiwiZGF0YUl0ZW1zIiwiZGF0YVRyYW5zZmVyIiwiaXRlbXMiLCJyZXNvbHZlIiwiY29uc29sZSIsImxvZyIsImdldEFzRmlsZSIsImdldEFzU3RyaW5nIiwiZXh0cmFjdFVSTEZyb21IVE1MIiwiaHRtbCIsInVybCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInNyYyIsImdhbWVfZXZlbnQiLCJPcmRlcmVkTWFwIiwib3JkZXIiLCJpZHgiLCJ1bmRlZmluZWQiLCJhZGQiLCJzZXRfaW5kZXgiLCJkZWxldGUiLCJ2YWwiLCJzaXplIiwiZmlyc3QiLCJpdGVyIiwibmV4dCIsIml0ZW0iLCJyZXBsYWNlIiwiY3QiLCJpbmNsdWRlcyIsInJlbW92ZVByb3BlcnR5IiwiQ2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJ0b2tlbnMiLCJzZWxlY3Rpb24iLCJjYWxsb3V0cyIsIl9DYW52YXNfc2JveCIsIl9DYW52YXNfbW91c2VfbG9jIiwiX0NhbnZhc19kcmFnX2RlcHRoIiwiX0NhbnZhc19kcmFnX2VudGVyIiwiX2EiLCJfQ2FudmFzX2RyYWdfb3ZlciIsImNlbGwiLCJfQ2FudmFzX3NjcmVlbl90b19zdmciLCJvY2N1cGllZF9jZWxsIiwiX2Ryb3BfaGludCIsImhvdmVyaW5nIiwiX0NhbnZhc19kcmFnX2xlYXZlIiwiX0NhbnZhc19iZ19kcmFnX292ZXIiLCJfQ2FudmFzX2JnX2Ryb3AiLCJpbWciLCJkaXNwYXRjaEV2ZW50IiwiX0NhbnZhc19kcm9wIiwibG9jIiwiZGltIiwiX0NhbnZhc19tb3VzZV9mb2N1cyIsIl9DYW52YXNfZm9jdXMiLCJfQ2FudmFzX3RvdWNoX2ZvY3VzIiwiaXNfcHJpbWFyeV90b3VjaCIsImlkIiwic2hpZnRLZXkiLCJjdHJsS2V5IiwiZmlsdGVyIiwiX0NhbnZhc19kcmFnX29mZnNldCIsIl9DYW52YXNfc2VsZWN0aW9uX3RyYW5zZm9ybSIsIm1vdmUiLCJyZXNpemUiLCJ2aWV3cG9ydCIsImNvb3JkVG9Mb2NhbCIsImNsaWVudFgiLCJjbGllbnRZIiwiX0NhbnZhc19rZXlkb3duIiwia2V5Q29kZSIsImlkcyIsImZyb20iLCJBcnJvd1VwIiwiQXJyb3dEb3duIiwiQXJyb3dMZWZ0IiwiQXJyb3dSaWdodCIsIl9DYW52YXNfaW5zdGFuY2VzIiwiX0NhbnZhc19kaW1fZ2V0Iiwic2Jib3giLCJzZWxlY3RlZCIsIl9DYW52YXNfc2JveF9zdGFydCIsIl9DYW52YXNfc2JveF9tb3ZlIiwiX0NhbnZhc19zYm94X3N0b3AiLCJQQURESU5HIiwic3R5bGVNYXAiLCJiZyIsInN2ZyIsInJlcGVhdCIsIkxJTkVfV0lEVEgiLCJtYXJrX2xvYWRlZCIsImJib3giLCJzdGFydCIsImVuZCIsInByZXZlbnRfc2FmYXJpX3Njcm9sbCIsInNlbGVjdGlvbl9kcmFnX3N0YXJ0Iiwic2VsZWN0aW9uX2RyYWciLCJzZWxlY3Rpb25fZHJhZ19lbmQiLCJwaW4iLCJtb3VzZSIsImFicyIsInBvaW50IiwiQ0FMTE9VVF9ESU0iLCJzaWduIiwiUk9UQVRFX1NJWkUiLCJzdmdfY29vcmQiLCJzZXRQb2ludGVyQ2FwdHVyZSIsInBvaW50ZXJJZCIsImdyaWRfbG9jIiwiY2xhc3NlcyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwibmVhcmVzdF9jb3JuZXIiLCJjZW50ZXIiLCJyZWwiLCJkZWciLCJhdGFuMiIsIlBJIiwicm91bmQiLCJsb2NhbCIsImFic19wIiwiYm94Iiwic2VsIiwiaW50ZXJzZWN0IiwiX0NhbnZhc19zZWxlY3Rpb25fYmJveCIsImNzcyIsInByb3BlcnR5IiwicXVlcnkiLCJldmVudE9wdGlvbnMiLCJjdXN0b21FbGVtZW50IiwiQnV5TWVBQ29mZmVlIiwiX3N0YXRlIiwiX2xvYWRlZCIsIl9idXkiLCJfQnV5TWVBQ29mZmVlX2Nsb3NlIiwiX0J1eU1lQUNvZmZlZV9pZnJhbWVfbG9hZCIsImNvbnN1bWUiLCJ3cml0ZSIsInNpZ25hbCIsInBpcGVUbyIsIldyaXRhYmxlU3RyZWFtIiwic2VyaWFsaXplX3RidCIsIkdhbWUiLCJFdmVudFRhcmdldCIsInRhYmxldG9wIiwiZ3JpZF9kaW0iLCJfR2FtZV9ldmVudF93cml0ZXIiLCJldmVudHMiLCJUcmFuc2Zvcm1TdHJlYW0iLCJ3cml0YWJsZSIsImdldFdyaXRlciIsInJlYWRhYmxlIiwiYXBwbHkiLCJ0b2tlbiIsImNyeXB0byIsInJhbmRvbVVVSUQiLCJfR2FtZV9pbnN0YW5jZXMiLCJfR2FtZV9yZWdpc3Rlcl9yZXNvdXJjZSIsInNldF9kaW0iLCJXZWFrU2V0IiwiX0dhbWVfaGFuZGxlX2V2ZW50IiwiZXhfdG9rZW4iLCJlcnJvciIsInJlbV90b2tlbiIsIm9tIiwiZGVzZXJpYWxpemVfdGJ0Iiwic2V0VGltZW91dCIsIlVSTCIsImxvY2F0aW9uIiwic2VhcmNoIiwicGF0aG5hbWUiLCJjYWNoZSIsImNhY2hlcyIsIm9wZW4iLCJwdXQiLCJSZXNwb25zZSIsIlN0YXR1c0VtaXR0ZXIiLCJfU3RhdHVzRW1pdHRlcl92YWx1ZSIsImN1cnJlbnQiLCJvbnN0YXR1cyIsImhhbmRsZXIiLCJzdHJlYW1zIiwiZGMiLCJyZWFkX3N0cmVhbSIsIndyaXRlX3N0cmVhbSIsIlJlYWRhYmxlU3RyZWFtIiwiY29udHJvbGxlciIsIm9ubWVzc2FnZSIsImVucXVldWUiLCJvbmNsb3NlIiwiY2xvc2UiLCJjYW5jZWwiLCJyZXN1bWUiLCJlcnIiLCJsYWJlbCIsIm9ub3BlbiIsIm9uYnVmZmVyZWRhbW91bnRsb3ciLCJjaHVuayIsInJlYWR5U3RhdGUiLCJidWZmZXJlZEFtb3VudCIsImJ1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkIiwic2VuZCIsImFib3J0IiwiQ291bnRRdWV1aW5nU3RyYXRlZ3kiLCJoaWdoV2F0ZXJNYXJrIiwiUGVlciIsInJ0YyIsIl9QZWVyX2V2ZW50X3dyaXRlciIsIm9uZGF0YWNoYW5uZWwiLCJldmVudHNfZGMiLCJjcmVhdGVEYXRhQ2hhbm5lbCIsIm5lZ290aWF0ZWQiLCJlbmNvZGUiLCJ0cmFuc2Zvcm0iLCJwaXBlVGhyb3VnaCIsImpzb24iLCJ3cml0ZV9ldmVudCIsInJlbW90ZSIsImRhdGFjaGFubmVsIiwiaW5pdCIsIlBFRVJfQ09ORklHIiwiaWNlU2VydmVycyIsInVybHMiLCJTaWduYWxlciIsInBlZXJfaWQiLCJhbGxvd19jb25uZWN0aW9ucyIsInNpZ25hbF91cmwiLCJzdGF0dXMiLCJfU2lnbmFsZXJfc29ja2V0IiwiX1NpZ25hbGVyX3NpZ25hbF91cmwiLCJfU2lnbmFsZXJfYWxsb3dfY29ubmVjdGlvbnMiLCJfU2lnbmFsZXJfY29ubnMiLCJfU2lnbmFsZXJfc2h1dHRpbmdfZG93biIsIl9TaWduYWxlcl9zb2NrZXRfc2h1dGRvd24iLCJfU2lnbmFsZXJfaGFuZGxlX21lc3NhZ2UiLCJfU2lnbmFsZXJfaW5zdGFuY2VzIiwiX1NpZ25hbGVyX3JlY29ubmVjdCIsInNpZyIsImRlc3RpbmF0aW9uIiwiX1NpZ25hbGVyX2luaXRfY29ubmVjdGlvbiIsInNldFJlbW90ZURlc2NyaXB0aW9uIiwiUlRDU2Vzc2lvbkRlc2NyaXB0aW9uIiwib2ZmZXIiLCJhbnN3ZXIiLCJjcmVhdGVBbnN3ZXIiLCJzZXRMb2NhbERlc2NyaXB0aW9uIiwidG8iLCJhZGRJY2VDYW5kaWRhdGUiLCJjYW5kaWRhdGUiLCJpbml0aWF0ZSIsInJlbW90ZV9pZCIsInBlZXIiLCJjcmVhdGVPZmZlciIsInRoZW4iLCJfU2lnbmFsZXJfc2VuZCIsImNhdGNoIiwic2h1dGRvd24iLCJjbGVhciIsIndzIiwibGl2ZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiRXZlbnQiLCJtc2ciLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJ3aXRoX2hlYXJ0YmVhdCIsIldlYlNvY2tldCIsImNvbm5lY3RlZCIsIlJUQ1BlZXJDb25uZWN0aW9uIiwib25pY2VjYW5kaWRhdGUiLCJfU2lnbmFsZXJfZXN0YWJsaXNoX3NvY2tldCIsInJlcXVlc3QiLCJjaGFubmVsIiwiaGVhZGVyIiwiYnVmZmVyIiwiYmxvYiIsIkJsb2IiLCJDbGllbnQiLCJnYW1lX2lkIiwiZ2FtZSIsIl9DbGllbnRfZ2FtZSIsIl9DbGllbnRfcGVlciIsIl9DbGllbnRfZ2FtZV9pZCIsIl9DbGllbnRfc2lnbmFsZXIiLCJmb3J3YXJkX2V2ZW50cyIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJwcm90b2NvbCIsInBvc3RNZXNzYWdlIiwiaWNlQ29ubmVjdGlvblN0YXRlIiwiZGNfc3RhdHVzIiwiU2VydmVyIiwiX1NlcnZlcl9nYW1lIiwiX1NlcnZlcl9jbGllbnRzIiwiX1NlcnZlcl9hYm9ydCIsInNpZ25hbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiX1NlcnZlcl9pbnN0YW5jZXMiLCJfU2VydmVyX2FkZF9jbGllbnQiLCJjbGllbnQiLCJyZXNvdXJjZSIsIndyaXRlciIsImFycmF5QnVmZmVyIiwicmVzcG9uc2UiLCJfU2VydmVyX2dldF9yZXNvdXJjZSIsInJlc3AiLCJmZXRjaCIsIldpdGhUb29sdGlwIiwidGV4dCIsIm1vdXNleCIsIm1vdXNleSIsIl9XaXRoVG9vbHRpcF9tb3VzZW1vdmUiLCJwYWdlWCIsInBhZ2VZIiwibGVmdCIsInRvcCIsIlRvZ2dsZSIsIkhvc3RUb2dnbGUiLCJ0b2dnbGUiLCJjaGVja2VkIiwiaHVtYW4iLCJDbGllbnRTdGF0dXMiLCJ0aW1lb3V0IiwicHJvbSIsInRpbWUiLCJyYWNlIiwiX3IiLCJyZWoiLCJBcHAiLCJob3N0X3BlbmRpbmciLCJfQXBwX3VwZGF0ZURpbSIsInBhcnNlSW50IiwiX0FwcF9uZXdfbG9jYWwiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiaHJlZiIsIl9BcHBfaG9zdCIsInNlcnZlciIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsIl9BcHBfdW5ob3N0IiwicmVwbGFjZVN0YXRlIiwiY29ubmVjdGluZyIsImRpc2Nvbm5lY3RlZCIsIm92ZXJsYXkiLCJpZkRlZmluZWQiLCJhZGRfdG9rZW4iLCJzZXRfYmciLCJjaGFuZ2VkUHJvcGVydGllcyIsInRpdGxlIiwiY2FudmFzIiwiVVJMU2VhcmNoUGFyYW1zIiwiUFBaIiwic2Nyb2xsX3BvcyIsImRlc2lyZWRfc3RhdGUiLCJvcmlnaW4iLCJ2bG9jIiwidmRpbSIsImNkaW0iLCJvZmZzZXQiLCJzbW9vdGgiLCJfUFBaX3Jlc2l6ZV9vYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwiZW50cmllcyIsImNvbnRlbnRSZWN0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJhc2VWYWwiLCJsb29wIiwicHJ2IiwidHMiLCJuZXh0X2ZyYW1lIiwiZGVsdGEiLCJlbGFwc2VkIiwiZGVsdGFfc2NhbGUiLCJzY3JvbGxUbyIsInpvb20iLCJpbmMiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwid2hlZWwiLCJtdWx0aXBsaWVyIiwiZGVsdGFNb2RlIiwiV2hlZWxFdmVudCIsIkRPTV9ERUxUQV9MSU5FIiwiZGVsdGFZIiwiX1BQWl9rZXlib2FyZF96b29tIiwiX1BQWl9pbnN0YW5jZXMiLCJfUFBaX3pvb21fdG9fZml0IiwiX1BQWl9nZXN0dXJlIiwicHJldl9zY2FsZSIsImNoYW5nZSIsInNjYWxlIiwicm9vdCIsInRlbXBsYXRlIiwiY2xvbmVOb2RlIiwiY29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJvYnNlcnZlIiwib25zbG90Y2hhbmdlIiwiY2xpZW50X2Nvb3JkIiwiZGl2X3AiLCJyZXMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZWdpc3RlciIsImJvZHkiXSwibWFwcGluZ3MiOiJBQUNBLE1BQU1BLEVBQVksS0FDSkMsU0FBU0MsZ0JBQ2pCQyxNQUFNQyxZQUFZLGVBQWdCLEdBQUdDLE9BQU9DLGtCQ21EM0MsU0FBU0MsRUFBV0MsRUFBWUMsRUFBUUMsRUFBS0MsR0FDaEQsSUFBMkhDLEVBQXZIQyxFQUFJQyxVQUFVQyxPQUFRQyxFQUFJSCxFQUFJLEVBQUlKLEVBQWtCLE9BQVRFLEVBQWdCQSxFQUFPTSxPQUFPQyx5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
