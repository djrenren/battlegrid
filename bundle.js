import{WebsocketClient as t}from"lib0/websocket";import{Observable as e}from"lib0/observable";const i=()=>{document.documentElement.style.setProperty("--app-height",`${window.innerHeight}px`)};function s(t,e,i,s){var n,o=arguments.length,r=o<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,s);else for(var h=t.length-1;h>=0;h--)(n=t[h])&&(r=(o<3?n(r):o>3?n(e,i,r):n(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}function n(t,e,i,s){if("a"===i&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?s:"a"===i?s.call(t):s?s.value:e.get(t)}function o(t,e,i,s,n){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?n.call(t,i):n?n.value=i:e.set(t,i),i
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}window.addEventListener("resize",i),i();const r=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,h=Symbol(),a=new WeakMap;class l{constructor(t,e,i){if(this._$cssResult$=!0,i!==h)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(r&&void 0===t){const i=void 0!==e&&1===e.length;i&&(t=a.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),i&&a.set(e,t))}return t}toString(){return this.cssText}}const c=(t,...e)=>{const i=1===t.length?t[0]:e.reduce(((e,i,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[s+1]),t[0]);return new l(i,t,h)},d=r?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new l("string"==typeof t?t:t+"",void 0,h))(e)})(t):t
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;var u;const p=window.trustedTypes,f=p?p.emptyScript:"",v=window.reactiveElementPolyfillSupport,w={toAttribute(t,e){switch(e){case Boolean:t=t?f:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},g=(t,e)=>e!==t&&(e==e||t==t),m={attribute:!0,type:String,converter:w,reflect:!1,hasChanged:g};class b extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;null!==(e=this.h)&&void 0!==e||(this.h=[]),this.h.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const s=this._$Ep(i,e);void 0!==s&&(this._$Ev.set(s,i),t.push(s))})),t}static createProperty(t,e=m){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(s){const n=this[t];this[e]=s,this.requestUpdate(t,n,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||m}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(d(t))}else void 0!==t&&e.push(d(t));return e}static _$Ep(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{r?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const i=document.createElement("style"),s=window.litNonce;void 0!==s&&i.setAttribute("nonce",s),i.textContent=e.cssText,t.appendChild(i)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=m){var s,n;const o=this.constructor._$Ep(t,i);if(void 0!==o&&!0===i.reflect){const r=(null!==(n=null===(s=i.converter)||void 0===s?void 0:s.toAttribute)&&void 0!==n?n:w.toAttribute)(e,i.type);this._$El=t,null==r?this.removeAttribute(o):this.setAttribute(o,r),this._$El=null}}_$AK(t,e){var i,s;const n=this.constructor,o=n._$Ev.get(t);if(void 0!==o&&this._$El!==o){const t=n.getPropertyOptions(o),r=t.converter,h=null!==(s=null!==(i=null==r?void 0:r.fromAttribute)&&void 0!==i?i:"function"==typeof r?r:null)&&void 0!==s?s:w.fromAttribute;this._$El=o,this[o]=h(e,t.type),this._$El=null}}requestUpdate(t,e,i){let s=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||g)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):s=!1),!this.isUpdatePending&&s&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var y;b.finalized=!0,b.elementProperties=new Map,b.elementStyles=[],b.shadowRootOptions={mode:"open"},null==v||v({ReactiveElement:b}),(null!==(u=globalThis.reactiveElementVersions)&&void 0!==u?u:globalThis.reactiveElementVersions=[]).push("1.3.3");const $=globalThis.trustedTypes,k=$?$.createPolicy("lit-html",{createHTML:t=>t}):void 0,x=`lit$${(Math.random()+"").slice(9)}$`,M="?"+x,S=`<${M}>`,C=document,_=(t="")=>C.createComment(t),W=t=>null===t||"object"!=typeof t&&"function"!=typeof t,A=Array.isArray,E=t=>{var e;return A(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])},R=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,z=/-->/g,T=/>/g,O=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,U=/'/g,N=/"/g,j=/^(?:script|style|textarea|title)$/i,P=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),I=P(1),L=P(2),D=Symbol.for("lit-noChange"),H=Symbol.for("lit-nothing"),B=new WeakMap,J=C.createTreeWalker(C,129,null,!1),G=(t,e)=>{const i=t.length-1,s=[];let n,o=2===e?"<svg>":"",r=R;for(let e=0;e<i;e++){const i=t[e];let h,a,l=-1,c=0;for(;c<i.length&&(r.lastIndex=c,a=r.exec(i),null!==a);)c=r.lastIndex,r===R?"!--"===a[1]?r=z:void 0!==a[1]?r=T:void 0!==a[2]?(j.test(a[2])&&(n=RegExp("</"+a[2],"g")),r=O):void 0!==a[3]&&(r=O):r===O?">"===a[0]?(r=null!=n?n:R,l=-1):void 0===a[1]?l=-2:(l=r.lastIndex-a[2].length,h=a[1],r=void 0===a[3]?O:'"'===a[3]?N:U):r===N||r===U?r=O:r===z||r===T?r=R:(r=O,n=void 0);const d=r===O&&t[e+1].startsWith("/>")?" ":"";o+=r===R?i+S:l>=0?(s.push(h),i.slice(0,l)+"$lit$"+i.slice(l)+x+d):i+x+(-2===l?(s.push(void 0),e):d)}const h=o+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==k?k.createHTML(h):h,s]};class q{constructor({strings:t,_$litType$:e},i){let s;this.parts=[];let n=0,o=0;const r=t.length-1,h=this.parts,[a,l]=G(t,e);if(this.el=q.createElement(a,i),J.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(s=J.nextNode())&&h.length<r;){if(1===s.nodeType){if(s.hasAttributes()){const t=[];for(const e of s.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith(x)){const i=l[o++];if(t.push(e),void 0!==i){const t=s.getAttribute(i.toLowerCase()+"$lit$").split(x),e=/([.?@])?(.*)/.exec(i);h.push({type:1,index:n,name:e[2],strings:t,ctor:"."===e[1]?Q:"?"===e[1]?Y:"@"===e[1]?tt:F})}else h.push({type:6,index:n})}for(const e of t)s.removeAttribute(e)}if(j.test(s.tagName)){const t=s.textContent.split(x),e=t.length-1;if(e>0){s.textContent=$?$.emptyScript:"";for(let i=0;i<e;i++)s.append(t[i],_()),J.nextNode(),h.push({type:2,index:++n});s.append(t[e],_())}}}else if(8===s.nodeType)if(s.data===M)h.push({type:2,index:n});else{let t=-1;for(;-1!==(t=s.data.indexOf(x,t+1));)h.push({type:7,index:n}),t+=x.length-1}n++}}static createElement(t,e){const i=C.createElement("template");return i.innerHTML=t,i}}function K(t,e,i=t,s){var n,o,r,h;if(e===D)return e;let a=void 0!==s?null===(n=i._$Cl)||void 0===n?void 0:n[s]:i._$Cu;const l=W(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==l&&(null===(o=null==a?void 0:a._$AO)||void 0===o||o.call(a,!1),void 0===l?a=void 0:(a=new l(t),a._$AT(t,i,s)),void 0!==s?(null!==(r=(h=i)._$Cl)&&void 0!==r?r:h._$Cl=[])[s]=a:i._$Cu=a),void 0!==a&&(e=K(t,a._$AS(t,e.values),a,s)),e}class Z{constructor(t,e){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var e;const{el:{content:i},parts:s}=this._$AD,n=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:C).importNode(i,!0);J.currentNode=n;let o=J.nextNode(),r=0,h=0,a=s[0];for(;void 0!==a;){if(r===a.index){let e;2===a.type?e=new V(o,o.nextSibling,this,t):1===a.type?e=new a.ctor(o,a.name,a.strings,this,t):6===a.type&&(e=new et(o,this,t)),this.v.push(e),a=s[++h]}r!==(null==a?void 0:a.index)&&(o=J.nextNode(),r++)}return n}m(t){let e=0;for(const i of this.v)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class V{constructor(t,e,i,s){var n;this.type=2,this._$AH=H,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=s,this._$Cg=null===(n=null==s?void 0:s.isConnected)||void 0===n||n}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=K(this,t,e),W(t)?t===H||null==t||""===t?(this._$AH!==H&&this._$AR(),this._$AH=H):t!==this._$AH&&t!==D&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.k(t):E(t)?this.S(t):this.$(t)}M(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}k(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t))}$(t){this._$AH!==H&&W(this._$AH)?this._$AA.nextSibling.data=t:this.k(C.createTextNode(t)),this._$AH=t}T(t){var e;const{values:i,_$litType$:s}=t,n="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=q.createElement(s.h,this.options)),s);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===n)this._$AH.m(i);else{const t=new Z(n,this),e=t.p(this.options);t.m(i),this.k(e),this._$AH=t}}_$AC(t){let e=B.get(t.strings);return void 0===e&&B.set(t.strings,e=new q(t)),e}S(t){A(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,s=0;for(const n of t)s===e.length?e.push(i=new V(this.M(_()),this.M(_()),this,this.options)):i=e[s],i._$AI(n),s++;s<e.length&&(this._$AR(i&&i._$AB.nextSibling,s),e.length=s)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cg=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class F{constructor(t,e,i,s,n){this.type=1,this._$AH=H,this._$AN=void 0,this.element=t,this.name=e,this._$AM=s,this.options=n,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=H}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,s){const n=this.strings;let o=!1;if(void 0===n)t=K(this,t,e,0),o=!W(t)||t!==this._$AH&&t!==D,o&&(this._$AH=t);else{const s=t;let r,h;for(t=n[0],r=0;r<n.length-1;r++)h=K(this,s[i+r],e,r),h===D&&(h=this._$AH[r]),o||(o=!W(h)||h!==this._$AH[r]),h===H?t=H:t!==H&&(t+=(null!=h?h:"")+n[r+1]),this._$AH[r]=h}o&&!s&&this.C(t)}C(t){t===H?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class Q extends F{constructor(){super(...arguments),this.type=3}C(t){this.element[this.name]=t===H?void 0:t}}const X=$?$.emptyScript:"";class Y extends F{constructor(){super(...arguments),this.type=4}C(t){t&&t!==H?this.element.setAttribute(this.name,X):this.element.removeAttribute(this.name)}}class tt extends F{constructor(t,e,i,s,n){super(t,e,i,s,n),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=K(this,t,e,0))&&void 0!==i?i:H)===D)return;const s=this._$AH,n=t===H&&s!==H||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,o=t!==H&&(s===H||n);n&&this.element.removeEventListener(this.name,this,s),o&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class et{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){K(this,t)}}const it={L:"$lit$",P:x,V:M,I:1,N:G,R:Z,j:E,D:K,H:V,F,O:Y,W:tt,B:Q,Z:et},st=window.litHtmlPolyfillSupport;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var nt,ot;null==st||st(q,V),(null!==(y=globalThis.litHtmlVersions)&&void 0!==y?y:globalThis.litHtmlVersions=[]).push("2.2.6");class rt extends b{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,i)=>{var s,n;const o=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:e;let r=o._$litPart$;if(void 0===r){const t=null!==(n=null==i?void 0:i.renderBefore)&&void 0!==n?n:null;o._$litPart$=r=new V(e.insertBefore(_(),t),t,void 0,null!=i?i:{})}return r._$AI(t),r})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return D}}rt.finalized=!0,rt._$litElement$=!0,null===(nt=globalThis.litElementHydrateSupport)||void 0===nt||nt.call(globalThis,{LitElement:rt});const ht=globalThis.litElementPolyfillSupport;null==ht||ht({LitElement:rt}),(null!==(ot=globalThis.litElementVersions)&&void 0!==ot?ot:globalThis.litElementVersions=[]).push("3.2.1");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const at=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(e){window.customElements.define(t,e)}}})(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */,lt=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(i){i.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function ct(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):lt(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}function dt(t){return ct({...t,state:!0})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const ut=({finisher:t,descriptor:e})=>(i,s)=>{var n;if(void 0===s){const s=null!==(n=i.originalKey)&&void 0!==n?n:i.key,o=null!=e?{kind:"method",placement:"prototype",key:s,descriptor:e(i.key)}:{...i,key:s};return null!=t&&(o.finisher=function(e){t(e,s)}),o}{const n=i.constructor;void 0!==e&&Object.defineProperty(i,s,e(s)),null==t||t(n,s)}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;function pt(t){return ut({finisher:(e,i)=>{Object.assign(e.prototype[i],t)}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function ft(t,e){return ut({descriptor:i=>{const s={get(){var e,i;return null!==(i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(t))&&void 0!==i?i:null},enumerable:!0,configurable:!0};if(e){const e="symbol"==typeof i?Symbol():"__"+i;s.get=function(){var i,s;return void 0===this[e]&&(this[e]=null!==(s=null===(i=this.renderRoot)||void 0===i?void 0:i.querySelector(t))&&void 0!==s?s:null),this[e]}}return s}})}
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var vt;null===(vt=window.HTMLSlotElement)||void 0===vt||vt.prototype.assignedElements;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const wt=1,gt=2,mt=t=>(...e)=>({_$litDirective$:t,values:e});class bt{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const{H:yt}=it,$t=()=>document.createComment(""),kt=(t,e,i)=>{var s;const n=t._$AA.parentNode,o=void 0===e?t._$AB:e._$AA;if(void 0===i){const e=n.insertBefore($t(),o),s=n.insertBefore($t(),o);i=new yt(e,s,t,t.options)}else{const e=i._$AB.nextSibling,r=i._$AM,h=r!==t;if(h){let e;null===(s=i._$AQ)||void 0===s||s.call(i,t),i._$AM=t,void 0!==i._$AP&&(e=t._$AU)!==r._$AU&&i._$AP(e)}if(e!==o||h){let t=i._$AA;for(;t!==e;){const e=t.nextSibling;n.insertBefore(t,o),t=e}}}return i},xt=(t,e,i=t)=>(t._$AI(e,i),t),Mt={},St=t=>{var e;null===(e=t._$AP)||void 0===e||e.call(t,!1,!0);let i=t._$AA;const s=t._$AB.nextSibling;for(;i!==s;){const t=i.nextSibling;i.remove(),i=t}},Ct=(t,e,i)=>{const s=new Map;for(let n=e;n<=i;n++)s.set(t[n],n);return s},_t=mt(class extends bt{constructor(t){if(super(t),t.type!==gt)throw Error("repeat() can only be used in text expressions")}dt(t,e,i){let s;void 0===i?i=e:void 0!==e&&(s=e);const n=[],o=[];let r=0;for(const e of t)n[r]=s?s(e,r):r,o[r]=i(e,r),r++;return{values:o,keys:n}}render(t,e,i){return this.dt(t,e,i).values}update(t,[e,i,s]){var n;const o=(t=>t._$AH)(t),{values:r,keys:h}=this.dt(e,i,s);if(!Array.isArray(o))return this.ut=h,r;const a=null!==(n=this.ut)&&void 0!==n?n:this.ut=[],l=[];let c,d,u=0,p=o.length-1,f=0,v=r.length-1;for(;u<=p&&f<=v;)if(null===o[u])u++;else if(null===o[p])p--;else if(a[u]===h[f])l[f]=xt(o[u],r[f]),u++,f++;else if(a[p]===h[v])l[v]=xt(o[p],r[v]),p--,v--;else if(a[u]===h[v])l[v]=xt(o[u],r[v]),kt(t,l[v+1],o[u]),u++,v--;else if(a[p]===h[f])l[f]=xt(o[p],r[f]),kt(t,o[u],o[p]),p--,f++;else if(void 0===c&&(c=Ct(h,f,v),d=Ct(a,u,p)),c.has(a[u]))if(c.has(a[p])){const e=d.get(h[f]),i=void 0!==e?o[e]:null;if(null===i){const e=kt(t,o[u]);xt(e,r[f]),l[f]=e}else l[f]=xt(i,r[f]),kt(t,o[u],i),o[e]=null;f++}else St(o[p]),p--;else St(o[u]),u++;for(;f<=v;){const e=kt(t,l[v+1]);xt(e,r[f]),l[f++]=e}for(;u<=p;){const t=o[u++];null!==t&&St(t)}return this.ut=h,((t,e=Mt)=>{t._$AH=e})(t,l),D}}),Wt=(t,e)=>[t[0]+e[0],t[1]+e[1]],At=(t,e)=>Wt(t,[e,e]),Et=(t,e)=>[t[0]-e[0],t[1]-e[1]],Rt=(t,e)=>[t[0]*e,t[1]*e],zt=(t,e)=>[t[0]/e,t[1]/e],Tt=(t,e)=>[Math.max(t[0],e[0]),Math.max(t[1],e[1])],Ot=(t,e)=>[Math.min(t[0],e[0]),Math.min(t[1],e[1])],Ut=(t,e,i)=>Tt(t,Ot(e,i)),Nt=(t,e)=>t[0]===e[0]&&t[1]===e[1],jt=t=>t.isPrimary&&("touch"===t.pointerType||t.pressure>0),Pt=t=>"mouse"===t.pointerType&&1===t.buttons&&t.pressure>0,It=t=>{t.preventDefault(),t.stopPropagation()},Lt=(t,e)=>new CustomEvent(t,{detail:e});
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const Dt=async t=>{let e=t.dataTransfer?.items??[];return new Promise((async(t,i)=>{console.log("DataItems",e.length);for(let i=0;i<e.length;i++){if(console.log(e[i].type),e[i].type.startsWith("image/"))return t(e[i].getAsFile());if("text/html"===e[i].type)return void e[i].getAsString((e=>t(Ht(e))));if("string"===e[i].kind){let t=e[i].type;e[i].getAsString((e=>console.log(t,e)))}}return i("No compatible drop type found")}))};function Ht(t){const e=(new DOMParser).parseFromString(t,"text/html").querySelector("img")?.src;return e??null}const Bt=t=>new CustomEvent("game-event",{detail:t});class Jt{constructor(){this.order=[],this.map=new Map}get(t){return this.map.get(t)}has(t){return this.map.has(t)}add(t,e){this.map.has(t)?this.set_index(t,this.order.length-1):(this.map.set(t,e),this.order.push(t))}delete(t){if(void 0===this.map.get(t))return!1;let e=this.map.delete(t),i=this.order.indexOf(t);return-1===i||this.order.splice(i,1),e}index(t){return this.order.indexOf(t)}set_index(t,e){const i=this.order.indexOf(t);return-1!==i&&(this.order.splice(e,0,...this.order.splice(i,1)),!0)}*values(){for(let t of this.order)yield this.map.get(t)}get size(){return this.map.size}}const Gt=t=>t[Symbol.iterator]().next().value;function*qt(t,e){for(let i of t)yield e(i)}
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Kt=mt(class extends bt{constructor(t){var e;if(super(t),t.type!==wt||"style"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce(((e,i)=>{const s=t[i];return null==s?e:e+`${i=i.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${s};`}),"")}update(t,[e]){const{style:i}=t.element;if(void 0===this.ct){this.ct=new Set;for(const t in e)this.ct.add(t);return this.render(e)}this.ct.forEach((t=>{null==e[t]&&(this.ct.delete(t),t.includes("-")?i.removeProperty(t):i[t]="")}));for(const t in e){const s=e[t];null!=s&&(this.ct.add(t),t.includes("-")?i.setProperty(t,s):i[t]=s)}return D}});var Zt,Vt,Ft,Qt,Xt,Yt,te,ee,ie,se,ne,oe,re,he,ae,le,ce,de,ue,pe,fe,ve;let we=class extends rt{constructor(){super(),Zt.add(this),this.width=30,this.height=40,this.tokens=new Jt,this.selection=new Set,this.callouts=new Set,Vt.set(this,void 0),Ft.set(this,void 0),Xt.set(this,0),Yt.set(this,(t=>{var e;It(t),o(this,Xt,(e=n(this,Xt,"f"),++e),"f")})),te.set(this,(t=>{It(t);const e=n(this,fe,"f").call(this,t).map(me),i=Rt(At([this.width,this.height],-1),24);this._drop_hint=Ut([0,0],i,e),this.hovering="canvas"})),ee.set(this,(t=>{var e;o(this,Xt,(e=n(this,Xt,"f"),--e),"f")<=0&&(this._drop_hint=void 0,this.hovering=void 0)})),ie.set(this,(t=>{It(t),this._drop_hint=void 0,this.hovering="bg"})),se.set(this,(async t=>{It(t);try{const e=await Dt(t);this.dispatchEvent(Lt("bg-drop",e))}catch(t){}o(this,Xt,0,"f"),this.hovering=void 0})),ne.set(this,(async t=>{It(t);try{const e=await Dt(t);this.dispatchEvent(Lt("token-drop",{loc:this._drop_hint,dim:[24,24],img:e}))}catch(t){}this._drop_hint=void 0,this.hovering=void 0})),oe.set(this,(t=>{Pt(t)&&n(this,he,"f").call(this,t)})),re.set(this,(t=>{(t=>t.isPrimary&&"touch"===t.pointerType)(t)&&n(this,he,"f").call(this,t)})),he.set(this,(t=>{t.preventDefault(),t.stopPropagation();const e=t.target.id;t.shiftKey||t.ctrlKey?this.dispatchEvent(Lt("token-select",[e,...this.selection].filter((t=>t!==e||!this.selection.has(e))))):this.dispatchEvent(Lt("token-select",[t.target.id]))})),ue.set(this,void 0),pe.set(this,{move:[0,0],resize:[0,0],r:0}),fe.set(this,(t=>Et(this.viewport.coordToLocal([t.clientX,t.clientY]),[20,20]))),ve.set(this,(t=>{if(!this.selection)return;if(8===t.keyCode)return this.dispatchEvent(Bt({type:"token-removed",ids:Array.from(this.selection)})),void It(t);"z"===t.key&&n(this,Ft,"f")&&this.dispatchEvent(Bt({type:"callout",loc:n(this,fe,"f").call(this,n(this,Ft,"f"))})),this.tokens.get(this.selection.values().next().value);let e={ArrowUp:[0,-24],ArrowDown:[0,24],ArrowLeft:[-24,0],ArrowRight:[24,0]}[t.key];e&&(this.dispatchEvent(Bt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{const i=this.tokens.get(t),s=Ut([0,0],Et(n(this,Zt,"a",Qt),i.dim),Wt(i.loc,e));return{id:i.id,loc:s,dim:i.dim,r:i.r}}))})),It(t))}))}connectedCallback(){super.connectedCallback(),document.addEventListener("keydown",n(this,ve,"f"))}disconnectedCallback(){super.disconnectedCallback(),document.removeEventListener("keydown",n(this,ve,"f"))}render(){let[t,e]=n(this,Zt,"a",Qt),i=n(this,Zt,"m",de).call(this),s=1===this.selection.size?this.tokens.get(this.selection.values().next().value):void 0;return I`
      <p-p-z
        @pointerdown=${n(this,Zt,"m",ae)}
        @pointermove=${n(this,Zt,"m",le)}
        @pointerup=${n(this,Zt,"m",ce)}
        @pointerleave=${()=>o(this,Ft,void 0,"f")}
        @dragstart=${It}
        @dragenter=${n(this,Yt,"f")}
        @dragleave=${n(this,ee,"f")}
        @dragstop=${n(this,ee,"f")}
        @dragover=${n(this,te,"f")}
        @drop=${n(this,ne,"f")}
      >
        <svg
          id="root"
          width=${t+40}
          height=${e+40}
          style=${Kt({width:`${t+40}px`,height:`${e+40}px`})}
        >
          <defs>
            <clipPath id="canvasClip">
              <rect width=${t} height=${e} rx=${5}></rect>
            </clipPath>
            <pattern id="horiz" x=${-.25} y=${-.25} width="100%" height=${24} patternUnits="userSpaceOnUse">
              <rect class="gridline" width="100%" height=${.5} fill="#d3d3d3" shape-rendering="geometricPrecision"></rect>
            </pattern>
            <pattern id="vert" x=${-.25} y=${-.25} width=${24} height="100%" patternUnits="userSpaceOnUse">
              <rect class="gridline" width=${.5} height="100%" fill="#d3d3d3" shape-rendering="geometric precision"></rect>
            </pattern>
            <pattern id="loading" patternUnits="userSpaceOnUse" width="1" height="1">
              <rect width="1" height="1" fill="white"></rect>
              <image href="assets/loading.svg" width="1" height="1" />
            </pattern>
          </defs>
          <svg x=${20} y=${20} width=${t} height=${e} id="surface">
            <rect class="shadow" width="100%" height="100%" fill="white" rx=${5}></rect>
            <svg clip-path="url(#canvasClip)">
              ${this.bg?L`<image href=${this.bg} width="100%" height="100%" preserveAspectRatio="none" style="will-change: transform"></image>`:null}
              <rect width="100%" height="100%" fill="url(#horiz)" opacity="0.75" pointer-events="none"></rect>
              <rect width="100%" height="100%" fill="url(#vert)" opacity="0.75" pointer-events="none"></rect>
              <svg id="tokens">
                ${_t(this.tokens.values(),(t=>t.id),((t,e)=>{const[s,o]=At(t.dim,-.5),[r,h]=At(t.loc,.25);return I`
                      <svg
                        viewBox="0 0 1 1"
                        x=${r}
                        y=${h}
                        width=${s}
                        height=${o}
                        fill="transparent"
                        preserveAspectRatio="none"
                        @pointerdown=${n(this,oe,"f")}
                        @pointerup=${n(this,re,"f")}
                      >
                        <image
                          id=${t.id}
                          class="token"
                          width="1"
                          height="1"
                          href=${t.url}
                          style=${`transform: rotate(${t.r}deg)`}
                          preserveAspectRatio="none"
                          @load=${be}
                        ></image>
                        <rect width="1" height="1" class="loading"></rect>
                      </svg>

                      ${i?.index===e?L`<rect
                            class="selection-drag-target"
                            x=${i.bbox.start[0]}
                            y=${i.bbox.start[1]}
                            width=${i.bbox.end[0]-i.bbox.start[0]}
                            height=${i.bbox.end[1]-i.bbox.start[1]}
                            fill="transparent"
                            @touchmove=${this.prevent_safari_scroll}
                            @pointerdown=${this.selection_drag_start}
                            @pointermove=${this.selection_drag}
                            @pointerup=${this.selection_drag_end}
                        ></rect>`:null}
                    `}))}
              </svg>
              ${this._drop_hint?L`
            <rect
                class="drop_hint"
                x=${this._drop_hint[0]}
                y=${this._drop_hint[1]}
                width=${24}
                height=${24}
                ></rect>
          `:null}
            </svg>
            ${n(this,Vt,"f")?L`
              <rect id="sbox"
                x=${Math.min(n(this,Vt,"f").pin[0],n(this,Vt,"f").mouse[0])}
                y=${Math.min(n(this,Vt,"f").pin[1],n(this,Vt,"f").mouse[1])}
                width=${Math.abs(n(this,Vt,"f").pin[0]-n(this,Vt,"f").mouse[0])}
                height=${Math.abs(n(this,Vt,"f").pin[1]-n(this,Vt,"f").mouse[1])}
                ></rect>
              `:null}
            ${_t(this.callouts,(t=>t),(t=>{const[e,i]=Et(t,[12,12]);return L`
                  <image href="assets/callout.svg" x=${e} y=${i} width=${24} height=${24}></image>
                `}))}
            ${i?L`
            <svg
              id="selection"
              x=${i.bbox.start[0]}
              y=${i.bbox.start[1]}
              width=${i.bbox.end[0]-i.bbox.start[0]}
              height=${i.bbox.end[1]-i.bbox.start[1]}
              @touchmove=${this.prevent_safari_scroll}
              @pointerdown=${this.selection_drag_start}
              @pointermove=${this.selection_drag}
              @pointerup=${this.selection_drag_end}>
              <rect class="selection-box" width="100%" height="100%"  ></rect>
            ${s?L`
            <g style=${`transform-origin: center; transform: rotate(${s.r}deg) translateY(${Math.sign((s.r-180)%180)*(s.dim[0]-s.dim[1])/2}px)`}>
              <line class="ro" x1="50%" x2="50%" y2=${-10}></line>
              <circle class="ro handle" cx="50%" cy=${-10} r=${2}></circle>
            </g>
            <line class="rn" x2="100%"></line>
            <line class="rw" y2="100%"></line>
            <line class="re" x1="100%" x2="100%" y2="100%"></line>
            <line class="rs" y1="100%" x2="100%" y2="100%"></line>
            <rect class="handle rn rw"></rect>
            <rect class="handle rn re" x="100%"></rect>
            <rect class="handle rs rw" y="100%"></rect>
            <rect class="handle rs re" x="100%" y="100%"></rect>
            </g>
            </svg>`:null}`:null}
          </svg>
        </svg>
      </p-p-z>
      <div
        id="bg-drop"
        class=${this.hovering??""}
        @dragenter=${n(this,Yt,"f")}
        @dragover=${n(this,ie,"f")}
        @dragleave=${n(this,ee,"f")}
        @drop=${n(this,se,"f")}
      >
        <div id="bg-drop-label" @drop=${n(this,se,"f")}>Set Background</div>
      </div>
    `}createRenderRoot(){return super.createRenderRoot()}prevent_safari_scroll(t){It(t)}selection_drag_start(t){if(!jt(t))return;const e=n(this,fe,"f").call(this,t);It(t),t.target.setPointerCapture(t.pointerId),o(this,ue,e,"f")}selection_drag(t){if(console.log("drag fired"),!jt(t))return;n(this,ue,"f")||this.selection_drag_start(t),It(t);const e=Ut([0,0],n(this,Zt,"a",Qt),n(this,fe,"f").call(this,t)),i=this.tokens.get(this.selection.values().next().value),s=i.dim,r=i.loc,h=t.target.classList;let a=[0,0],l=[0,0],c=0;if(h.contains("rn")&&(l[1]=r[1]-ge(e[1]),a[1]=ge(e[1])-r[1]),h.contains("rw")&&(l[0]=r[0]-ge(e[0]),a[0]=ge(e[0])-r[0]),h.contains("rs")&&(l[1]=ge(e[1])-s[1]-r[1]),h.contains("re")&&(l[0]=ge(e[0])-s[0]-r[0]),h.contains("ro")){const t=Wt(r,zt(s,2)),n=Et(e,t),o=180*Math.atan2(n[0],-n[1])/Math.PI;c=90*Math.round(o/90)-i.r%360}h.contains("selection-drag-target")?(console.log("move"),a=Et(e,n(this,ue,"f")).map(ge)):(a=Ot(At(s,-24),a),l=Tt(At(Rt(s,-1),24),l)),c===n(this,pe,"f").r&&Nt(a,n(this,pe,"f").move)&&Nt(l,n(this,pe,"f").resize)||(o(this,ue,Wt(n(this,ue,"f"),a),"f"),o(this,pe,{move:[0,0],resize:[0,0],r:0},"f"),this.dispatchEvent(Bt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{let e=this.tokens.get(t);return{id:e.id,loc:Wt(e.loc,a),dim:Wt(e.dim,l),r:e.r+c}}))})))}selection_drag_end(t){It(t),o(this,ue,void 0,"f")}};Vt=new WeakMap,Ft=new WeakMap,Xt=new WeakMap,Yt=new WeakMap,te=new WeakMap,ee=new WeakMap,ie=new WeakMap,se=new WeakMap,ne=new WeakMap,oe=new WeakMap,re=new WeakMap,he=new WeakMap,ue=new WeakMap,pe=new WeakMap,fe=new WeakMap,ve=new WeakMap,Zt=new WeakSet,Qt=function(){return Rt([this.width,this.height],24)},ae=function(t){if(!Pt(t))return;t.target.setPointerCapture(t.pointerId);const e=n(this,fe,"f").call(this,t);o(this,Vt,{pin:e,mouse:e},"f")},le=function(t){o(this,Ft,{clientX:t.clientX,clientY:t.clientY},"f"),n(this,Vt,"f")&&(n(this,Vt,"f").mouse=n(this,fe,"f").call(this,t),this.requestUpdate())},ce=function(t){if(!n(this,Vt,"f"))return this.dispatchEvent(Lt("token-select",[]));t.target.setPointerCapture(t.pointerId);const e=Ot(n(this,Vt,"f").pin,n(this,Vt,"f").mouse),i=(t=>[Math.abs(t[0]),Math.abs(t[1])])(Et(n(this,Vt,"f").pin,n(this,Vt,"f").mouse)),s={start:e,end:Wt(e,i)},r=qt(function*(t,e){for(let i of t)e(i)&&(yield i)}(this.tokens.values(),(t=>((t,e)=>!(e.start[0]>t.end[0]||e.end[0]<t.start[0]||e.start[1]>t.end[1]||e.end[1]<t.start[1]))(s,{start:t.loc,end:Wt(t.loc,t.dim)}))),(t=>t.id));o(this,Vt,void 0,"f"),this.dispatchEvent(Lt("token-select",[...r])),this.requestUpdate()},de=function(){if(0===this.selection.size)return;const t=Array.from(this.selection,(t=>this.tokens.get(t))).filter((t=>t)),e=Math.max(...qt(this.selection.values(),(t=>this.tokens.index(t))));let i=t[0].loc,s=Wt(t[0].loc,t[0].dim);return t.forEach((t=>{i=Ot(i,t.loc),s=Tt(s,Wt(t.loc,t.dim))})),{index:e,bbox:{start:i,end:s}}},we.styles=c`
    :host {
      position: relative;
      display: block;
      --selection-color: cornflowerblue;
      overflow: hidden;
    }

    p-p-z {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
    #root {
      backface-visibility: hidden;
    }

    #sbox {
      stroke: var(--selection-color);
      stroke-width: 1px;
      fill: var(--selection-color);
      fill-opacity: 0.2;
    }

    #bg-drop {
      position: absolute;
      right: 5px;
      bottom: -60px;
      display: inline-block;
      height: 50px;
      transition: bottom 250ms;
      background: var(--ui-bg);
      border-radius: 5px 5px 0 0;
      display: grid;
      padding: 5px;
      grid: 1fr 1fr;
      text-align: center;
      display: none;
    }

    #bg-drop.canvas,
    #bg-drop.bg {
      bottom: 0;
      box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.3);
      display: block;
    }

    #bg-drop-label {
      --color: gray;
      padding: 0 1em;
      border: 2px solid var(--color);
      color: var(--color);
      border-radius: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }

    .bg > #bg-drop-label {
      --color: blue;
    }

    svg {
      overflow: visible;
    }

    #surface {
      clip-path: rect(100%);
    }

    .shadow {
      stroke-width: ${.5};
      stroke: rgba(0, 0, 0, 0.2);
      filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));
    }

    .drop_hint {
      transition: none;
      pointer-events: none;
      fill: gray;
    }

    .selection-box,
    line.ro {
      stroke: var(--selection-color);
      stroke-width: 1px;
      filter: drop-shadow(0px 0px 2px var(--selection-color));
      fill: transparent;
    }

    .selection-box {
      pointer-events: none !important;
    }

    .rn,
    .rs,
    .re,
    .rw {
      stroke-width: ${8};
      vector-effect: non-scaling-stroke;
      stroke: transparent;
    }

    .handle {
      stroke-width: 1px;
      fill: var(--selection-color);
      stroke: white;
    }

    .selection-drag-target {
      pointer-events: fill;
      cursor: move;
    }

    rect.handle {
      width: ${8}px;
      height: ${8}px;
      transform: translate(${-4}px, ${-4}px);
    }

    .ro.handle {
      cursor: crosshair;
    }

    .rn.re,
    .rs.rw {
      cursor: nesw-resize;
    }

    .rn.rw,
    .rs.re {
      cursor: nwse-resize;
    }

    .rn,
    .rs {
      cursor: row-resize;
    }

    .re,
    .rw {
      cursor: col-resize;
    }

    p-p-z {
      background-color: #ededf0;
    }

    .token {
      transform-box: fill-box;
      transform-origin: center;
      fill: transparent;
    }

    .token + .loading {
      fill: url(#loading);
      pointer-events: none;
    }

    .token.loaded + .loading {
      fill: transparent;
    }

    #selection {
      pointer-events: none;
    }

    #selection * {
      pointer-events: auto;
    }
  `,s([ct({type:Number})],we.prototype,"width",void 0),s([ct({type:Number})],we.prototype,"height",void 0),s([ct()],we.prototype,"bg",void 0),s([ct({attribute:!1})],we.prototype,"tokens",void 0),s([ct({attribute:!1})],we.prototype,"selection",void 0),s([ct({attribute:!1})],we.prototype,"callouts",void 0),s([ct({attribute:!1})],we.prototype,"sel_bbox",void 0),s([ft("root",!0)],we.prototype,"root",void 0),s([ft("p-p-z",!0)],we.prototype,"viewport",void 0),s([dt()],we.prototype,"_drop_hint",void 0),s([dt()],we.prototype,"hovering",void 0),s([pt({capture:!0,passive:!1})],we.prototype,"prevent_safari_scroll",null),s([pt({capture:!0,passive:!1})],we.prototype,"selection_drag_start",null),s([pt({capture:!0,passive:!1})],we.prototype,"selection_drag",null),s([pt({capture:!0,passive:!1})],we.prototype,"selection_drag_end",null),we=s([at("bg-canvas")],we);const ge=t=>24*Math.round(t/24),me=t=>t-t%24,be=t=>t.target.classList.add("loaded");var ye,$e;let ke=class extends rt{constructor(){super(...arguments),this._state=!1,this._loaded=!1,this._buy=t=>{console.log("CLICK"),It(t),this._state=!0,document.addEventListener("click",n(this,ye,"f"),{capture:!0})},ye.set(this,(t=>{It(t),this._state=!1,document.removeEventListener("click",n(this,ye,"f"),{capture:!0})})),$e.set(this,(t=>{this._loaded=!0}))}render(){return I`<button @click="${this._buy}">Buy Me A Coffee</button> ${this._state?I`<div id="container"><iframe class="${this._loaded?"loaded":""}" allow="payment" src="https://ko-fi.com/djrenren/?hidefeed=true&widget=true&embed=true&preview=true" title="djrenren" @load="${n(this,$e,"f")}"></iframe></div>`:null}`}};async function xe(t,e,i){return t.pipeTo(new WritableStream({write:e}),{signal:i})}ye=new WeakMap,$e=new WeakMap,ke.styles=c`:host{display:block;position:relative}iframe{border:none;display:block;opacity:0;width:100%;height:100%;transition:opacity .5s linear}#container{border-radius:5px;box-shadow:0 0 6px rgba(0,0,0,.7);position:absolute;width:350px;height:525px;bottom:-535px;right:0;animation-name:fade;animation-duration:.5s;animation-direction:backwards;background:url(assets/loading.svg) center/100px no-repeat,#ededf0;overflow:hidden}iframe.loaded{opacity:1}@keyframes fade{0%{opacity:0}100%{opacity:1}}`,s([dt()],ke.prototype,"_state",void 0),s([dt()],ke.prototype,"_loaded",void 0),ke=s([at("buy-me-a-coffee")],ke);const Me=t=>JSON.stringify({...t,tokens:[...qt(t.tokens.values(),(t=>({...t})))]});var Se,Ce,_e,We;class Ae extends EventTarget{constructor(){super(),Se.add(this),this.tabletop={tokens:new Jt,grid_dim:[30,20],bg:null},this.callouts=new Set,Ce.set(this,void 0);const t=new TransformStream;o(this,Ce,t.writable.getWriter(),"f"),xe(t.readable,(t=>n(this,Se,"m",_e).call(this,t)))}async set_bg(t){const e=t?await n(this,Se,"m",We).call(this,t):null;this.apply({type:"bg",url:e})}async add_token(t,e){const i={id:crypto.randomUUID(),url:await n(this,Se,"m",We).call(this,t),...e};this.apply({type:"token-added",...i})}set_dim(t){this.apply({type:"grid-resized",dim:t})}async apply(t){await n(this,Ce,"f").write(t)}}Ce=new WeakMap,Se=new WeakSet,_e=async function(t){switch(t.type){case"token-manipulated":for(let e of t.tokens){let t=this.tabletop.tokens.get(e.id);if(!t)return void console.error("Update received for nonexistant token",e.id);Object.assign(t,{dim:e.dim,loc:e.loc,r:e.r})}break;case"token-added":let e={id:t.id,dim:t.dim,loc:t.loc,url:t.url,r:0};this.tabletop.tokens.add(t.id,e);break;case"grid-resized":this.tabletop.grid_dim=t.dim;break;case"token-removed":for(let e of t.ids){const t=this.tabletop.tokens.get(e);if(!t)return void console.error("Tried to remove nonexistant token",e);this.tabletop.tokens.delete(t.id)}break;case"state-sync":this.tabletop=(t=>{let e=JSON.parse(t),i=new Jt;return e.tokens.forEach((t=>i.add(t.id,t))),{...e,tokens:i}})(t.tabletop);break;case"token-reorder":const i=this.tabletop.tokens.index(t.id);if(void 0===i)return void console.error("Tried to reorder non-existant token",t.id);let s;s="top"===t.idx?this.tabletop.tokens.size-1:"bottom"===t.idx?0:"up"===t.idx?Math.min(this.tabletop.tokens.size-1,i+1):Math.max(0,i-1),this.tabletop.tokens.set_index(t.id,s);break;case"bg":this.tabletop.bg=t.url;break;case"callout":this.callouts.add(t.loc),setTimeout((()=>{this.callouts.delete(t.loc)}),1500)}this.dispatchEvent(Bt(t))},We=async function(t){if("string"==typeof t)return t;let e=new URL(window.location.toString());e.search="";let i=await crypto.subtle.digest("SHA-1",await t.arrayBuffer()),s=btoa(String.fromCharCode(...new Uint8Array(i)));console.log("RESOURCE ID: ",s),e.pathname=`/resources/${s}`;let n=await caches.open("resources");return await n.put(e,new Response(t)),e.toString()};var Ee,Re,ze,Te,Oe;class Ue extends e{constructor(){super(...arguments),Ee.set(this,"opening")}get current(){return n(this,Ee,"f")}set(t){let e=n(this,Ee,"f")!==t;o(this,Ee,t,"f"),e&&this.emit("status",[])}connected(){return new Promise(((t,e)=>{let i=()=>{"closed"===n(this,Ee,"f")&&e("closed"),"open"===n(this,Ee,"f")&&t()};"opening"===n(this,Ee,"f")?this.once("status",i):i()}))}}Ee=new WeakMap;const Ne={iceServers:[{urls:["stun:stun1.l.google.com:19302","stun:stun2.l.google.com:19302"]}]};class je extends e{constructor(e,i=!1,s="wss://battlegrid-signaling.herokuapp.com"){super(),Re.add(this),this.peers=new Map,this.status=new Ue,Oe.set(this,(async t=>{if(console.log("ONMESSAGE",t),"error-not-exists"===t.type){return this.peers.get(t.destination)?.peer.close(),void console.log("closing")}let e=this.peers.get(t.from);if(!e){if("offer"!==t.description?.type)return;e=n(this,Re,"m",ze).call(this,t.from,!1)}let i=e.peer;if(t.description){const s=!e.making_offer&&("stable"==i.signalingState||e.isSettingRemoteAnswerPending),o="offer"==t.description.type&&!s;if(e.ignore_offer=!e.polite&&o,e.ignore_offer)return;e.isSettingRemoteAnswerPending="answer"===t.description.type,await i.setRemoteDescription(t.description),e.isSettingRemoteAnswerPending=!1,"offer"===t.description.type&&(await i.setLocalDescription(),await n(this,Re,"m",Te).call(this,{type:"signal",from:this.peer_id,to:t.from,description:i.localDescription})),this.emit("peer",[t.from,i])}else if(t.candidate)try{await i.addIceCandidate(t.candidate)}catch(t){if(!e.ignore_offer)throw t}}));let o=new URL(s);o.pathname=e,this.allow_connections=i,this.peer_id=e,this.socket=new t(o.toString()),this.status.set("opening"),this.socket.on("connect",(()=>this.status.set("open"))),this.socket.on("disconnect",(()=>this.status.set("opening"))),this.socket.on("message",n(this,Oe,"f"))}initiate(t){return n(this,Re,"m",ze).call(this,t,!1).peer}shutdown(){this.socket.destroy(),this.peers.clear()}}Oe=new WeakMap,Re=new WeakSet,ze=function(t,e){let i=new RTCPeerConnection(Ne),s={polite:e,making_offer:!1,ignore_offer:!1,isSettingRemoteAnswerPending:!1,peer:i};return this.peers.set(t,s),i.onicecandidate=async({candidate:e})=>{await n(this,Re,"m",Te).call(this,{type:"signal",from:this.peer_id,to:t,candidate:e})},i.onnegotiationneeded=async()=>{console.log("negotiation needed!");try{s.making_offer=!0,await i.setLocalDescription(),await n(this,Re,"m",Te).call(this,{type:"signal",from:this.peer_id,to:t,description:i.localDescription})}finally{s.making_offer=!1}},i.addEventListener("iceconnectionstatechange",(()=>{console.log("iceConnectionState",i.iceConnectionState),"closed"===i.iceConnectionState&&this.peers.delete(t)})),s},Te=async function(t){await this.status.connected(),await this.socket.send(t)};const Pe=t=>({readable:Ie(t),writable:Le(t)}),Ie=t=>new ReadableStream({start(e){t.onmessage=({data:t})=>{e.enqueue(t)};t.addEventListener("close",(()=>{0===t.bufferedAmount?(console.log("Underlying datachannel closed"),e.close()):t.addEventListener("bufferedamountlow",(()=>{console.log("Underlying datachannel closed"),e.close()}))}),{once:!0})},cancel(){t.close()}}),Le=t=>{let e;return t.addEventListener("error",(t=>console.log("DC ERROR",t))),new WritableStream({start(i){const s=()=>{console.log("stream closed by dc ending",t.label),i.error("Closed foo"),t.removeEventListener("close",s)};t.addEventListener("close",s),t.onopen=()=>e&&e(),t.onbufferedamountlow=()=>e&&e()},async write(i){("connecting"===t.readyState||t.bufferedAmount>t.bufferedAmountLowThreshold)&&(console.log("waiting for resumptoin..."),await new Promise(((t,i)=>e=t)),console.log("resumed!")),t.send(i)},abort(){console.log("aborted dc by stream"),t.close()},close(){console.log("closed dc by stream"),t.close()}},new CountQueuingStrategy({highWaterMark:1}))};async function De(t){let e=t.readable.getReader(),i=await e.read();console.log("header? ",i);let s=JSON.parse(i.value);e.releaseLock();let n=await async function(t,e){let i=[];return console.log("collectin blob"),await xe(t,(t=>{console.log("CHUNK?"),i.push(t)})),console.log("got all bytes"),new Blob(i,{type:e})}(t.readable,s?.type);return{blob:n}}async function He(t,e,i=262144){console.log("USING MAX MESSAGE SIZE: ",i);let s=t.writable.getWriter();await s.write(JSON.stringify({type:e.blob.type})),s.releaseLock(),await function(t,e){let i=0;return new ReadableStream({async pull(s){if(i>=t.size)return s.close();try{s.enqueue(new Uint8Array(await t.slice(i,Math.min(i+e,t.size)).arrayBuffer()))}catch(t){console.log("Error enqueue slice",t)}i+=e}},new CountQueuingStrategy({highWaterMark:5}))}(e.blob,i).pipeTo(t.writable,{preventClose:!0})}var Be,Je,Ge,qe,Ke,Ze,Ve,Fe,Qe,Xe,Ye,ti,ei;class ii{constructor(t,e){this.status=new Ue,Be.set(this,void 0),this.ondatachannel=t=>{},this.id=t,this.peer=e;let i=e.createDataChannel("events",{negotiated:!0,id:1}),{readable:s,writable:n}=function(t){let e=new TransformStream({transform(t,e){e.enqueue(JSON.stringify(t))}});return e.readable.pipeTo(t.writable),{readable:t.readable.pipeThrough(new TransformStream({transform(t,e){e.enqueue(JSON.parse(t))}})),writable:e.writable}}(Pe(i));this.events=s,o(this,Be,n.getWriter(),"f"),e.addEventListener("iceconnectionstatechange",(()=>{switch(console.log(e.iceConnectionState),e.iceConnectionState){case"closed":this.status.set("closed");break;case"connected":this.status.set("open");break;default:this.status.set("opening")}})),e.ondatachannel=t=>this.ondatachannel(t)}write_event(t){return t.remote=this.id,n(this,Be,"f").write(t)}request(t){return this.datachannel(t,{protocol:"request-resource"}).then(Pe).then(De)}datachannel(t,e){return new Promise(((i,s)=>{let n=this.peer.createDataChannel(t,e);n.addEventListener("open",(()=>{n.removeEventListener("error",s),i(n)}),{once:!0}),n.addEventListener("error",s,{once:!0})}))}}Be=new WeakMap;class si{constructor(t,e){Je.add(this),Ge.set(this,void 0),qe.set(this,void 0),Ke.set(this,void 0),Ze.set(this,void 0),this.forward_events=({detail:t})=>{console.log("CALLBACK",t),t.remote||n(this,qe,"f").write_event(t)},o(this,Ze,new je(crypto.randomUUID()),"f"),o(this,Ge,e,"f"),o(this,Ke,t,"f"),n(this,Ge,"f").addEventListener("game-event",this.forward_events),o(this,qe,n(this,Je,"m",Ve).call(this),"f");let i=caches.open("resources");navigator.serviceWorker.onmessage=async t=>{let e=t.data.id;try{let t=await n(this,qe,"f").request(e),s=new Response(t.blob);await(await i).put(`/resources/${e}`,s),console.log("COMMUNICATING WITH SERVICE WORKER"),navigator.serviceWorker.controller.postMessage({type:"found",id:e})}catch(t){console.error("Error fetching resource: ",t),navigator.serviceWorker.controller.postMessage({type:"notfound",id:e,error:t})}}}get status(){return n(this,qe,"f").status}async reconnect(){o(this,qe,n(this,Je,"m",Ve).call(this),"f")}async shutdown(){n(this,Ge,"f").removeEventListener("game-event",this.forward_events),n(this,qe,"f").peer.close(),console.log("Waiting for signaler shutdown"),await n(this,Ze,"f").shutdown(),console.log("signaler dead"),navigator.serviceWorker.onmessage=null}}Ge=new WeakMap,qe=new WeakMap,Ke=new WeakMap,Ze=new WeakMap,Je=new WeakSet,Ve=function(){let t=new ii(n(this,Ze,"f").peer_id,n(this,Ze,"f").initiate(n(this,Ke,"f")));return xe(t.events,(t=>n(this,Ge,"f").apply(t))),t};class ni{constructor(t){Fe.add(this),Qe.set(this,void 0),this.clients=new Set,Xe.set(this,void 0),Ye.set(this,((t,e)=>{let i=new ii(t,e);this.clients.add(i),i.write_event({type:"state-sync",tabletop:Me(n(this,Qe,"f").tabletop)}),xe(i.events,(t=>(t.remote=e.id,n(this,Qe,"f").apply(t)))),e.ondatachannel=async t=>{console.log("INCOMING DC",t.channel);const i=t.channel;try{await(o="open",r=i,new Promise((t=>{r.addEventListener(o,(e=>t(e)),{once:!0})}))),console.log("new dc",i),"request-resource"===i.protocol&&(await He(Pe(i),await n(this,Fe,"m",ti).call(this,i.label),e.sctp?.maxMessageSize||262144),console.log("FLUSHING"),await(s=i,new Promise(((t,e)=>{const i=()=>0===s.bufferedAmount?t():"closed"===s.readyState||"closing"===s.readyState?e("Buffer closed before flushing"):void 0;s.bufferedAmountLowThreshold=0,s.addEventListener("bufferedamountlow",i),i()}))))}finally{i.close()}var s,o,r}})),this.signaler=new je(crypto.randomUUID(),!0),o(this,Qe,t,"f"),o(this,Xe,new AbortController,"f"),this.signaler.on("peer",n(this,Ye,"f")),n(this,Qe,"f").addEventListener("game-event",(({detail:t})=>{for(let e of this.clients)e.id!==t.remote&&e.write_event(t)}))}async shutdown(){for(let t of this.clients)t.peer.close();this.clients.clear(),n(this,Xe,"f").abort("Server shutting down"),await this.signaler.shutdown()}}Qe=new WeakMap,Xe=new WeakMap,Ye=new WeakMap,Fe=new WeakSet,ti=async function(t){let e=await(await caches.open("resources")).match(`/resources/${t}`);if(!e)throw`Requested unknown resource ${t}`;return{blob:await e.blob()}};let oi=class extends rt{constructor(){super(...arguments),this.text="",this.mousex=0,this.mousey=0,ei.set(this,(t=>{this.mousex=t.pageX,this.mousey=t.pageY}))}connectedCallback(){super.connectedCallback(),this.addEventListener("mousemove",n(this,ei,"f"))}disconnectedCallback(){this.removeEventListener("mousemove",n(this,ei,"f"))}render(){return console.log("Rendering"),I`<slot></slot><div id="message" style="${Kt({left:`${this.mousex+8}px`,top:`${this.mousey+10}px`})}">${this.text}</div>`}};ei=new WeakMap,oi.styles=c`:host{display:inline-block;position:relative;width:fit-content;height:fit-content}div{font-size:.8em;display:none;opacity:0;position:fixed;background:#000;color:#fff;border-radius:3px;padding:.25em .5em;white-space:nowrap;width:max-content}@keyframes appear{0%{opacity:0}100%{opacity:1}}:host(:hover) div{display:block;animation:appear 250ms linear forwards 750ms}`,s([ct()],oi.prototype,"text",void 0),s([dt()],oi.prototype,"mousex",void 0),s([dt()],oi.prototype,"mousey",void 0),oi=s([at("with-tooltip")],oi);let ri=class extends rt{constructor(){super(...arguments),this.status="local",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return I`<label class="switch"><with-tooltip text="${function(t){switch(t){case"open":return"Joinable";case"closed":return"Offline";case"opening":return"Not Joinable";case"local":return"Start hosting"}}(this.status)}"><input type="checkbox" @input="${this.toggle}" ?checked="${"local"!==this.status}"> <span class="slider round ${this.status}"><span class="on-space">Hosting</span> <span class="dot"></span> <span class="off-space">Offline</span></span></with-tooltip></label>`}};ri.styles=c`.slider{display:inline-flex;flex-wrap:nowrap;height:1em;transition:.4s;padding:.2em;min-width:4.5em;cursor:pointer;background:#ccc}.open{background:#2196f3}.opening{background:#fdcb18}.opening>.on-space{color:#000}input{display:none}input:checked+.slider>.on-space{flex-grow:1;opacity:1}input:checked+.slider>.off-space{flex-grow:0!important;opacity:0}.off-space{opacity:1;flex-grow:1!important}.on-space{opacity:0;color:#fff;width:0}.off-space,.on-space{font-size:.8em}.slider>span{flex-grow:0;flex-basis:0;transition:.4s;overflow:hidden;text-align:center}.round{border-radius:1em}.dot{border-radius:1em;min-width:1em;height:1em;background:#fff}`,s([ct()],ri.prototype,"status",void 0),ri=s([at("host-toggle")],ri);let hi=class extends rt{constructor(){super(...arguments),this.status="opening",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return I`<span class="slider round ${this.status}">${function(t){switch(t){case"open":return"Connected";case"closed":return"Disconnected";case"opening":return"Connecting"}}(this.status)}</span>`}};hi.styles=c`.slider{height:1em;transition:.4s;padding:.2em;min-width:5em;cursor:pointer;color:#fff;font-size:.8em;align-items:baseline}.open{background:#2196f3}.opening{background:#fdcb18}.round{border-radius:1em}`,s([ct()],hi.prototype,"status",void 0),hi=s([at("client-status")],hi);const ai=(t,e)=>Promise.race([t,new Promise(((t,i)=>setTimeout(i,e)))]);var li,ci,di,ui;let pi=class extends rt{constructor(){super(...arguments),this.selection=new Set,this.host_pending=!1,this.game=new Ae,li.set(this,(()=>{this.game.set_dim(Tt([1,1],[parseInt(this.width?.value)??0,parseInt(this.height?.value)??0]))})),ci.set(this,(async()=>{console.log("new local..."),await(this.client?.shutdown()),this.client=void 0,window.history.pushState(null,"",window.location.href.split("?")[0])})),di.set(this,(async()=>{try{this.client?.shutdown(),this.client=void 0,this.host_pending=!0,this.server=new ni(this.game),this.server.signaler.status.onstatus=()=>this.requestUpdate(),console.log("WAITING"),await ai(this.server.signaler.status.connected(),5e3),window.history.pushState({},"","?game="+this.server.signaler.peer_id),navigator.clipboard.writeText(window.location.toString())}catch(t){console.error(t),await n(this,ui,"f")}finally{this.host_pending=!1}})),ui.set(this,(async()=>{let t=this.server;this.server=void 0,t&&(t.signaler.status.onstatus=void 0),await(t?.shutdown()),window.history.replaceState({},"",window.location.pathname)}))}render(){let t="closed"===this.client?.status.current?I`<div class="message error"><div><h1>Error connecting to remote grid</h1><button @click="${n(this,ci,"f")}">New local grid</button></div></div>`:null,e="opening"===this.client?.status.current?I`<div class="message"><div><h1>Connecting to grid...</h1></div></div>`:null,i="closed"===this.client?.status.current?I`<div class="message"><div><h1>Disconnected from host</h1><button @click="${n(this,ci,"f")}">Continue locally</button></div></div>`:null,s=t||e||i;return I`<section id="toolbar" class="group"><div class="group">${this.client?I`<client-status status="${this.client.status.current}"></client-status>`:I`<host-toggle status="${this.server?.signaler.status.current??"local"}" @enable="${n(this,di,"f")}" @disable="${n(this,ui,"f")}"></host-toggle>`} <span>Grid: <input id="width" type="number" min="1" @input="${n(this,li,"f")}" .value="${this.game.tabletop.grid_dim[0]+""}"> x <input id="height" type="number" min="1" @input="${n(this,li,"f")}" .value="${this.game.tabletop.grid_dim[1]+""}"> </span>${1===this.selection.size?I`<div><button @click="${()=>this.game.apply({type:"token-reorder",id:Gt(this.selection),idx:"down"})}" ?disabled="${0===this.game.tabletop.tokens.index(Gt(this.selection))}">Move Down</button> <button @click="${()=>this.game.apply({type:"token-reorder",id:Gt(this.selection),idx:"up"})}" ?disabled="${this.game.tabletop.tokens.index(Gt(this.selection))===this.game.tabletop.tokens.size-1}">Move Up</button></div>`:null}</div><div class="group"><buy-me-a-coffee class="right"></buy-me-a-coffee></div></section><bg-canvas bg="${(t=>null!=t?t:H)(this.game.tabletop.bg??void 0)}" .selection="${this.selection}" width="${this.game.tabletop.grid_dim[0]}" height="${this.game.tabletop.grid_dim[1]}" .tokens="${this.game.tabletop.tokens}" .callouts="${this.game.callouts}" @token-drop="${({detail:t})=>this.game.add_token(t.img,{loc:t.loc,r:0,dim:t.dim})}" @bg-drop="${({detail:t})=>this.game.set_bg(t)}" @token-select="${({detail:t})=>{this.selection=new Set(t)}}" @game-event="${({detail:t})=>this.game.apply(t)}"></bg-canvas>${s}`}updated(t){t.has("client")&&(document.title="BattleGrid"+(this.client&&"open"===this.client.status.current?this.server?"- Hosting":"- Connected":""))}async connectedCallback(){super.connectedCallback(),this.game.addEventListener("game-event",(()=>{for(const t of this.selection)this.game.tabletop.tokens.has(t)||this.selection.delete(t);this.requestUpdate(),this.canvas?.requestUpdate()})),console.log("debug now please");let t=new URLSearchParams(window.location.search).get("game");if(!t)return await n(this,ci,"f").call(this);try{console.log("new client"),this.client=new si(t,this.game),this.client.status.on("status",(()=>this.requestUpdate())),console.log("waiting for connection"),await ai(this.client.status.connected(),5e3),console.log("connected")}catch{console.log("giving up"),await n(this,ci,"f").call(this)}}};var fi,vi,wi,gi,mi;li=new WeakMap,ci=new WeakMap,di=new WeakMap,ui=new WeakMap,pi.styles=c`:host{width:100%;height:100%;display:grid;grid:"toolbar" 30px "viewport" minmax(0,1fr)/minmax(0,1fr);font-family:inherit;--ui-bg:#f9f9fa}.message{grid-area:1/1/3/1;display:grid;align-items:center;justify-items:center;background:#fff;z-index:2}.right{justify-self:end}bg-canvas{grid-area:viewport;z-index:1}input[type=number]{width:3em}.group{display:flex;align-items:center;height:100%;flex-wrap:nowrap}#toolbar{grid-area:toolbar;box-shadow:0 0 4px gray;z-index:2;background:var(--ui-bg);justify-content:space-between;padding:0 1em;grid-template-rows:unset}.group img{width:1em;height:1em;object-fit:cover;display:inline-block}`,s([ft("#width",!0)],pi.prototype,"width",void 0),s([ft("#height",!0)],pi.prototype,"height",void 0),s([ft("bg-canvas",!0)],pi.prototype,"canvas",void 0),s([dt()],pi.prototype,"client",void 0),s([dt()],pi.prototype,"server",void 0),s([dt()],pi.prototype,"selection",void 0),s([dt()],pi.prototype,"host_pending",void 0),pi=s([at("bg-app")],pi);class bi extends HTMLElement{constructor(){super(),fi.add(this),this.state={z:1,scroll_pos:[0,0]},this.desired_state={z:1},this.origin=[0,0],this.vloc=[0,0],this.vdim=[0,0],this.cdim=[0,0],this.offset=[0,0],this.smooth=!1,wi.set(this,new ResizeObserver((t=>{for(let e of t)if(e.target===this){this.vdim=[e.contentRect.width,e.contentRect.height];const t=this.getBoundingClientRect();this.vloc=[t.x,t.y]}else this.cdim=[e.target.width.baseVal.value,e.target.height.baseVal.value];this.center()}))),this.loop=async()=>{let t,e;for(;t=e,e=await yi();){if(!t)continue;let i=this.desired_state.z-this.state.z;if(0===i)continue;let s=e-t,n=this.smooth?Math.sign(i)*Math.min(.002*s*this.state.z,Math.abs(i)):i;this.state.z+=n,this.center(),this.state.scroll_pos=Tt([0,0],Wt(Rt(this.origin,n),this.state.scroll_pos)),this.scrollTo({left:this.state.scroll_pos[0],top:this.state.scroll_pos[1]})}},this.zoom=(t,e)=>{this.desired_state.z=Math.min(4,Math.max(1,this.desired_state.z+e)),this.state.scroll_pos=[this.scrollLeft,this.scrollTop],this.origin=this.coordToLocal(t)},this.wheel=t=>{if(!t.ctrlKey)return;t.preventDefault();const e=t.deltaMode===WheelEvent.DOM_DELTA_LINE?10:1,i=Math.min(50,Math.max(-50,-t.deltaY*e)),s=.005*i*this.state.z;this.smooth=50===Math.abs(i),this.zoom([t.clientX,t.clientY],s),this.addEventListener},gi.set(this,(t=>{console.log("zoom!",t.ctrlKey,t.key),t.ctrlKey&&("-"===t.key?(this.smooth=!0,this.zoom(this.coordToLocal(Wt(this.vloc,zt(this.vdim,2))),-.2*this.state.z),It(t)):"="===t.key?(this.smooth=!0,this.zoom(this.coordToLocal(Wt(this.vloc,zt(this.vdim,2))),.2*this.state.z),It(t)):"0"===t.key&&(this.smooth=!0,n(this,fi,"m",vi).call(this)))})),mi.set(this,{prev_scale:0,origin:[0,0],start:t=>{It(t),n(this,mi,"f").origin=this.coordToLocal([t.clientX,t.clientY]),n(this,mi,"f").prev_scale=1},change:t=>{It(t),this.zoom(n(this,mi,"f").origin,this.state.z*(t.scale-n(this,mi,"f").prev_scale)*1.5),n(this,mi,"f").prev_scale=t.scale}}),this.root=this.attachShadow({mode:"open"}),this.root.appendChild(bi.template().content.cloneNode(!0)),this.container=this.root.getElementById("container"),n(this,wi,"f").observe(this),this.root.querySelector("slot").onslotchange=({target:t})=>{let e=t.assignedElements()[0];n(this,wi,"f").observe(e),this.smooth=!1,n(this,fi,"m",vi).call(this)},this.addEventListener("scroll",(()=>this.state.scroll_pos=[this.scrollLeft,this.scrollTop])),this.addEventListener("gesturestart",n(this,mi,"f").start),this.addEventListener("gesturechange",n(this,mi,"f").change),document.addEventListener("keydown",n(this,gi,"f"),{passive:!1})}center(){this.offset=Tt([0,0],Rt(Et(this.vdim,Rt(this.cdim,this.state.z)),.5)),this.container.style.transform=`translate(${this.offset[0]}px, ${this.offset[1]}px) scale(${this.state.z})`}connectedCallback(){this.loop(),this.addEventListener("wheel",this.wheel,{passive:!1,capture:!0})}coordToLocal(t){const e=Wt(Et(t,this.vloc),this.state.scroll_pos);return zt(Et(e,this.offset),this.state.z)}static template(){let t=document.createElement("template");return t.innerHTML='\n            <style>\n                :host {\n                    position: relative;\n                    display: block;\n                    overflow: auto; \n                }\n                #container {\n                    transform-origin: 0 0;\n                    display: block;\n                    width: fit-content;\n                    height: fit-content;\n                }\n            </style>\n                <div id="container">\n                    <slot id="content"></slot>\n                </div>\n            </div>\n        ',t}}wi=new WeakMap,gi=new WeakMap,mi=new WeakMap,fi=new WeakSet,vi=function(){let t=this.root.querySelector("slot").assignedElements()[0],e=this.getBoundingClientRect(),i=[e.width,e.height],s=[t.width.baseVal.value,t.height.baseVal.value];const n=Math.max(1,Math.min(4,...Rt(((t,e)=>[t[0]/e[0],t[1]/e[1]])(i,s),.95)));this.zoom([0,0],n-this.state.z)};const yi=()=>new Promise((t=>window.requestAnimationFrame(t)));customElements.define("p-p-z",bi),await navigator.serviceWorker.register("./service-worker.js"),document.body.addEventListener("wheel",(t=>{t.ctrlKey&&t.preventDefault()}),{passive:!1});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
