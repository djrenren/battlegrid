const t=()=>{document.documentElement.style.setProperty("--app-height",`${window.innerHeight}px`)};function e(t,e,s,i){var n,r=arguments.length,o=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,s):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,s,i);else for(var h=t.length-1;h>=0;h--)(n=t[h])&&(o=(r<3?n(o):r>3?n(e,s,o):n(e,s))||o);return r>3&&o&&Object.defineProperty(e,s,o),o}function s(t,e,s,i){if("a"===s&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===s?i:"a"===s?i.call(t):i?i.value:e.get(t)}function i(t,e,s,i,n){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?n.call(t,s):n?n.value=s:e.set(t,s),s
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}window.addEventListener("resize",t),t();const n=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,r=Symbol(),o=new WeakMap;class h{constructor(t,e,s){if(this._$cssResult$=!0,s!==r)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(n&&void 0===t){const s=void 0!==e&&1===e.length;s&&(t=o.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),s&&o.set(e,t))}return t}toString(){return this.cssText}}const l=t=>new h("string"==typeof t?t:t+"",void 0,r),c=(t,...e)=>{const s=1===t.length?t[0]:e.reduce(((e,s,i)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(s)+t[i+1]),t[0]);return new h(s,t,r)},a=n?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const s of t.cssRules)e+=s.cssText;return l(e)})(t):t
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;var u;const d=window.trustedTypes,f=d?d.emptyScript:"",w=window.reactiveElementPolyfillSupport,p={toAttribute(t,e){switch(e){case Boolean:t=t?f:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let s=t;switch(e){case Boolean:s=null!==t;break;case Number:s=null===t?null:Number(t);break;case Object:case Array:try{s=JSON.parse(t)}catch(t){s=null}}return s}},g=(t,e)=>e!==t&&(e==e||t==t),v={attribute:!0,type:String,converter:p,reflect:!1,hasChanged:g};class b extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;null!==(e=this.h)&&void 0!==e||(this.h=[]),this.h.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,s)=>{const i=this._$Ep(s,e);void 0!==i&&(this._$Ev.set(i,s),t.push(i))})),t}static createProperty(t,e=v){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const s="symbol"==typeof t?Symbol():"__"+t,i=this.getPropertyDescriptor(t,s,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}}static getPropertyDescriptor(t,e,s){return{get(){return this[e]},set(i){const n=this[t];this[e]=i,this.requestUpdate(t,n,s)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||v}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const s of e)this.createProperty(s,t[s])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const s=new Set(t.flat(1/0).reverse());for(const t of s)e.unshift(a(t))}else void 0!==t&&e.push(a(t));return e}static _$Ep(t,e){const s=e.attribute;return!1===s?void 0:"string"==typeof s?s:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,s;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(s=t.hostConnected)||void 0===s||s.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{n?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const s=document.createElement("style"),i=window.litNonce;void 0!==i&&s.setAttribute("nonce",i),s.textContent=e.cssText,t.appendChild(s)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,s){this._$AK(t,s)}_$EO(t,e,s=v){var i,n;const r=this.constructor._$Ep(t,s);if(void 0!==r&&!0===s.reflect){const o=(null!==(n=null===(i=s.converter)||void 0===i?void 0:i.toAttribute)&&void 0!==n?n:p.toAttribute)(e,s.type);this._$El=t,null==o?this.removeAttribute(r):this.setAttribute(r,o),this._$El=null}}_$AK(t,e){var s,i;const n=this.constructor,r=n._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=n.getPropertyOptions(r),o=t.converter,h=null!==(i=null!==(s=null==o?void 0:o.fromAttribute)&&void 0!==s?s:"function"==typeof o?o:null)&&void 0!==i?i:p.fromAttribute;this._$El=r,this[r]=h(e,t.type),this._$El=null}}requestUpdate(t,e,s){let i=!0;void 0!==t&&(((s=s||this.constructor.getPropertyOptions(t)).hasChanged||g)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===s.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,s))):i=!1),!this.isUpdatePending&&i&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const s=this._$AL;try{e=this.shouldUpdate(s),e?(this.willUpdate(s),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(s)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(s)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var y;b.finalized=!0,b.elementProperties=new Map,b.elementStyles=[],b.shadowRootOptions={mode:"open"},null==w||w({ReactiveElement:b}),(null!==(u=globalThis.reactiveElementVersions)&&void 0!==u?u:globalThis.reactiveElementVersions=[]).push("1.3.3");const m=globalThis.trustedTypes,k=m?m.createPolicy("lit-html",{createHTML:t=>t}):void 0,$=`lit$${(Math.random()+"").slice(9)}$`,x="?"+$,S=`<${x}>`,M=document,A=(t="")=>M.createComment(t),C=t=>null===t||"object"!=typeof t&&"function"!=typeof t,_=Array.isArray,W=t=>{var e;return _(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])},O=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,E=/-->/g,U=/>/g,T=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,N=/'/g,R=/"/g,D=/^(?:script|style|textarea|title)$/i,I=t=>(e,...s)=>({_$litType$:t,strings:e,values:s}),z=I(1),j=I(2),L=Symbol.for("lit-noChange"),P=Symbol.for("lit-nothing"),J=new WeakMap,B=M.createTreeWalker(M,129,null,!1),H=(t,e)=>{const s=t.length-1,i=[];let n,r=2===e?"<svg>":"",o=O;for(let e=0;e<s;e++){const s=t[e];let h,l,c=-1,a=0;for(;a<s.length&&(o.lastIndex=a,l=o.exec(s),null!==l);)a=o.lastIndex,o===O?"!--"===l[1]?o=E:void 0!==l[1]?o=U:void 0!==l[2]?(D.test(l[2])&&(n=RegExp("</"+l[2],"g")),o=T):void 0!==l[3]&&(o=T):o===T?">"===l[0]?(o=null!=n?n:O,c=-1):void 0===l[1]?c=-2:(c=o.lastIndex-l[2].length,h=l[1],o=void 0===l[3]?T:'"'===l[3]?R:N):o===R||o===N?o=T:o===E||o===U?o=O:(o=T,n=void 0);const u=o===T&&t[e+1].startsWith("/>")?" ":"";r+=o===O?s+S:c>=0?(i.push(h),s.slice(0,c)+"$lit$"+s.slice(c)+$+u):s+$+(-2===c?(i.push(void 0),e):u)}const h=r+(t[s]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==k?k.createHTML(h):h,i]};class V{constructor({strings:t,_$litType$:e},s){let i;this.parts=[];let n=0,r=0;const o=t.length-1,h=this.parts,[l,c]=H(t,e);if(this.el=V.createElement(l,s),B.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(i=B.nextNode())&&h.length<o;){if(1===i.nodeType){if(i.hasAttributes()){const t=[];for(const e of i.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith($)){const s=c[r++];if(t.push(e),void 0!==s){const t=i.getAttribute(s.toLowerCase()+"$lit$").split($),e=/([.?@])?(.*)/.exec(s);h.push({type:1,index:n,name:e[2],strings:t,ctor:"."===e[1]?Z:"?"===e[1]?X:"@"===e[1]?Q:F})}else h.push({type:6,index:n})}for(const e of t)i.removeAttribute(e)}if(D.test(i.tagName)){const t=i.textContent.split($),e=t.length-1;if(e>0){i.textContent=m?m.emptyScript:"";for(let s=0;s<e;s++)i.append(t[s],A()),B.nextNode(),h.push({type:2,index:++n});i.append(t[e],A())}}}else if(8===i.nodeType)if(i.data===x)h.push({type:2,index:n});else{let t=-1;for(;-1!==(t=i.data.indexOf($,t+1));)h.push({type:7,index:n}),t+=$.length-1}n++}}static createElement(t,e){const s=M.createElement("template");return s.innerHTML=t,s}}function G(t,e,s=t,i){var n,r,o,h;if(e===L)return e;let l=void 0!==i?null===(n=s._$Cl)||void 0===n?void 0:n[i]:s._$Cu;const c=C(e)?void 0:e._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(r=null==l?void 0:l._$AO)||void 0===r||r.call(l,!1),void 0===c?l=void 0:(l=new c(t),l._$AT(t,s,i)),void 0!==i?(null!==(o=(h=s)._$Cl)&&void 0!==o?o:h._$Cl=[])[i]=l:s._$Cu=l),void 0!==l&&(e=G(t,l._$AS(t,e.values),l,i)),e}class K{constructor(t,e){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var e;const{el:{content:s},parts:i}=this._$AD,n=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:M).importNode(s,!0);B.currentNode=n;let r=B.nextNode(),o=0,h=0,l=i[0];for(;void 0!==l;){if(o===l.index){let e;2===l.type?e=new q(r,r.nextSibling,this,t):1===l.type?e=new l.ctor(r,l.name,l.strings,this,t):6===l.type&&(e=new tt(r,this,t)),this.v.push(e),l=i[++h]}o!==(null==l?void 0:l.index)&&(r=B.nextNode(),o++)}return n}m(t){let e=0;for(const s of this.v)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,e),e+=s.strings.length-2):s._$AI(t[e])),e++}}class q{constructor(t,e,s,i){var n;this.type=2,this._$AH=P,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=s,this.options=i,this._$Cg=null===(n=null==i?void 0:i.isConnected)||void 0===n||n}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=G(this,t,e),C(t)?t===P||null==t||""===t?(this._$AH!==P&&this._$AR(),this._$AH=P):t!==this._$AH&&t!==L&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.k(t):W(t)?this.S(t):this.$(t)}M(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}k(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t))}$(t){this._$AH!==P&&C(this._$AH)?this._$AA.nextSibling.data=t:this.k(M.createTextNode(t)),this._$AH=t}T(t){var e;const{values:s,_$litType$:i}=t,n="number"==typeof i?this._$AC(t):(void 0===i.el&&(i.el=V.createElement(i.h,this.options)),i);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===n)this._$AH.m(s);else{const t=new K(n,this),e=t.p(this.options);t.m(s),this.k(e),this._$AH=t}}_$AC(t){let e=J.get(t.strings);return void 0===e&&J.set(t.strings,e=new V(t)),e}S(t){_(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let s,i=0;for(const n of t)i===e.length?e.push(s=new q(this.M(A()),this.M(A()),this,this.options)):s=e[i],s._$AI(n),i++;i<e.length&&(this._$AR(s&&s._$AB.nextSibling,i),e.length=i)}_$AR(t=this._$AA.nextSibling,e){var s;for(null===(s=this._$AP)||void 0===s||s.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cg=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class F{constructor(t,e,s,i,n){this.type=1,this._$AH=P,this._$AN=void 0,this.element=t,this.name=e,this._$AM=i,this.options=n,s.length>2||""!==s[0]||""!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=P}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,s,i){const n=this.strings;let r=!1;if(void 0===n)t=G(this,t,e,0),r=!C(t)||t!==this._$AH&&t!==L,r&&(this._$AH=t);else{const i=t;let o,h;for(t=n[0],o=0;o<n.length-1;o++)h=G(this,i[s+o],e,o),h===L&&(h=this._$AH[o]),r||(r=!C(h)||h!==this._$AH[o]),h===P?t=P:t!==P&&(t+=(null!=h?h:"")+n[o+1]),this._$AH[o]=h}r&&!i&&this.C(t)}C(t){t===P?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class Z extends F{constructor(){super(...arguments),this.type=3}C(t){this.element[this.name]=t===P?void 0:t}}const Y=m?m.emptyScript:"";class X extends F{constructor(){super(...arguments),this.type=4}C(t){t&&t!==P?this.element.setAttribute(this.name,Y):this.element.removeAttribute(this.name)}}class Q extends F{constructor(t,e,s,i,n){super(t,e,s,i,n),this.type=5}_$AI(t,e=this){var s;if((t=null!==(s=G(this,t,e,0))&&void 0!==s?s:P)===L)return;const i=this._$AH,n=t===P&&i!==P||t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive,r=t!==P&&(i===P||n);n&&this.element.removeEventListener(this.name,this,i),r&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,s;"function"==typeof this._$AH?this._$AH.call(null!==(s=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==s?s:this.element,t):this._$AH.handleEvent(t)}}class tt{constructor(t,e,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){G(this,t)}}const et={L:"$lit$",P:$,V:x,I:1,N:H,R:K,j:W,D:G,H:q,F,O:X,W:Q,B:Z,Z:tt},st=window.litHtmlPolyfillSupport;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var it,nt;null==st||st(V,q),(null!==(y=globalThis.litHtmlVersions)&&void 0!==y?y:globalThis.litHtmlVersions=[]).push("2.2.6");class rt extends b{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const s=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=s.firstChild),s}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,s)=>{var i,n;const r=null!==(i=null==s?void 0:s.renderBefore)&&void 0!==i?i:e;let o=r._$litPart$;if(void 0===o){const t=null!==(n=null==s?void 0:s.renderBefore)&&void 0!==n?n:null;r._$litPart$=o=new q(e.insertBefore(A(),t),t,void 0,null!=s?s:{})}return o._$AI(t),o})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return L}}rt.finalized=!0,rt._$litElement$=!0,null===(it=globalThis.litElementHydrateSupport)||void 0===it||it.call(globalThis,{LitElement:rt});const ot=globalThis.litElementPolyfillSupport;null==ot||ot({LitElement:rt}),(null!==(nt=globalThis.litElementVersions)&&void 0!==nt?nt:globalThis.litElementVersions=[]).push("3.2.1");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const ht=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:s,elements:i}=e;return{kind:s,elements:i,finisher(e){window.customElements.define(t,e)}}})(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */,lt=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(s){s.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(s){s.createProperty(e.key,t)}};function ct(t){return(e,s)=>void 0!==s?((t,e,s)=>{e.constructor.createProperty(s,t)})(t,e,s):lt(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}function at(t){return ct({...t,state:!0})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const ut=({finisher:t,descriptor:e})=>(s,i)=>{var n;if(void 0===i){const i=null!==(n=s.originalKey)&&void 0!==n?n:s.key,r=null!=e?{kind:"method",placement:"prototype",key:i,descriptor:e(s.key)}:{...s,key:i};return null!=t&&(r.finisher=function(e){t(e,i)}),r}{const n=s.constructor;void 0!==e&&Object.defineProperty(s,i,e(i)),null==t||t(n,i)}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;function dt(t){return ut({finisher:(e,s)=>{Object.assign(e.prototype[s],t)}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function ft(t,e){return ut({descriptor:s=>{const i={get(){var e,s;return null!==(s=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(t))&&void 0!==s?s:null},enumerable:!0,configurable:!0};if(e){const e="symbol"==typeof s?Symbol():"__"+s;i.get=function(){var s,i;return void 0===this[e]&&(this[e]=null!==(i=null===(s=this.renderRoot)||void 0===s?void 0:s.querySelector(t))&&void 0!==i?i:null),this[e]}}return i}})}
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var wt;null===(wt=window.HTMLSlotElement)||void 0===wt||wt.prototype.assignedElements;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const pt=1,gt=2,vt=t=>(...e)=>({_$litDirective$:t,values:e});class bt{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,s){this._$Ct=t,this._$AM=e,this._$Ci=s}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const{H:yt}=et,mt=()=>document.createComment(""),kt=(t,e,s)=>{var i;const n=t._$AA.parentNode,r=void 0===e?t._$AB:e._$AA;if(void 0===s){const e=n.insertBefore(mt(),r),i=n.insertBefore(mt(),r);s=new yt(e,i,t,t.options)}else{const e=s._$AB.nextSibling,o=s._$AM,h=o!==t;if(h){let e;null===(i=s._$AQ)||void 0===i||i.call(s,t),s._$AM=t,void 0!==s._$AP&&(e=t._$AU)!==o._$AU&&s._$AP(e)}if(e!==r||h){let t=s._$AA;for(;t!==e;){const e=t.nextSibling;n.insertBefore(t,r),t=e}}}return s},$t=(t,e,s=t)=>(t._$AI(e,s),t),xt={},St=t=>{var e;null===(e=t._$AP)||void 0===e||e.call(t,!1,!0);let s=t._$AA;const i=t._$AB.nextSibling;for(;s!==i;){const t=s.nextSibling;s.remove(),s=t}},Mt=(t,e,s)=>{const i=new Map;for(let n=e;n<=s;n++)i.set(t[n],n);return i},At=vt(class extends bt{constructor(t){if(super(t),t.type!==gt)throw Error("repeat() can only be used in text expressions")}dt(t,e,s){let i;void 0===s?s=e:void 0!==e&&(i=e);const n=[],r=[];let o=0;for(const e of t)n[o]=i?i(e,o):o,r[o]=s(e,o),o++;return{values:r,keys:n}}render(t,e,s){return this.dt(t,e,s).values}update(t,[e,s,i]){var n;const r=(t=>t._$AH)(t),{values:o,keys:h}=this.dt(e,s,i);if(!Array.isArray(r))return this.ut=h,o;const l=null!==(n=this.ut)&&void 0!==n?n:this.ut=[],c=[];let a,u,d=0,f=r.length-1,w=0,p=o.length-1;for(;d<=f&&w<=p;)if(null===r[d])d++;else if(null===r[f])f--;else if(l[d]===h[w])c[w]=$t(r[d],o[w]),d++,w++;else if(l[f]===h[p])c[p]=$t(r[f],o[p]),f--,p--;else if(l[d]===h[p])c[p]=$t(r[d],o[p]),kt(t,c[p+1],r[d]),d++,p--;else if(l[f]===h[w])c[w]=$t(r[f],o[w]),kt(t,r[d],r[f]),f--,w++;else if(void 0===a&&(a=Mt(h,w,p),u=Mt(l,d,f)),a.has(l[d]))if(a.has(l[f])){const e=u.get(h[w]),s=void 0!==e?r[e]:null;if(null===s){const e=kt(t,r[d]);$t(e,o[w]),c[w]=e}else c[w]=$t(s,o[w]),kt(t,r[d],s),r[e]=null;w++}else St(r[f]),f--;else St(r[d]),d++;for(;w<=p;){const e=kt(t,c[p+1]);$t(e,o[w]),c[w++]=e}for(;d<=f;){const t=r[d++];null!==t&&St(t)}return this.ut=h,((t,e=xt)=>{t._$AH=e})(t,c),L}}),Ct=(t,e)=>[t[0]+e[0],t[1]+e[1]],_t=(t,e)=>Ct(t,[e,e]),Wt=(t,e)=>[t[0]-e[0],t[1]-e[1]],Ot=(t,e)=>[t[0]*e,t[1]*e],Et=(t,e)=>[t[0]/e[0],t[1]/e[1]],Ut=(t,e)=>[t[0]/e,t[1]/e],Tt=(t,e)=>[Math.max(t[0],e[0]),Math.max(t[1],e[1])],Nt=(t,e)=>[Math.min(t[0],e[0]),Math.min(t[1],e[1])],Rt=(t,e,s)=>Tt(t,Nt(e,s)),Dt=(t,e)=>t[0]===e[0]&&t[1]===e[1],It=t=>t.isPrimary&&("touch"===t.pointerType||t.pressure>0),zt=t=>"mouse"===t.pointerType&&1===t.buttons&&t.pressure>0,jt=t=>{t.preventDefault(),t.stopPropagation()},Lt=(t,e)=>new CustomEvent(t,{detail:e,cancelable:!0,bubbles:!0,composed:!0});
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const Pt=async t=>{if(!t.dataTransfer)throw"No compatible drop type found";let e=t.dataTransfer?.items??[];return new Promise((async(t,s)=>{console.log("DataItems",e.length);for(let s=0;s<e.length;s++){if(console.log(e[s].type),e[s].type.startsWith("image/"))return t(e[s].getAsFile());if("text/html"===e[s].type)return void e[s].getAsString((e=>t(Jt(e))));if("application/x-moz-file-promise-url"===e[s].type)return void e[s].getAsString((t=>{}));if("string"===e[s].kind){let t=e[s].type;e[s].getAsString((e=>console.log(t,e)))}}return s("No compatible drop type found")}))};function Jt(t){const e=(new DOMParser).parseFromString(t,"text/html").querySelector("img")?.src;return e??null}const Bt=t=>new CustomEvent("game-event",{detail:t}),Ht=t=>t[Symbol.iterator]().next().value;function*Vt(t,e){for(let s of t)yield e(s)}
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Gt=vt(class extends bt{constructor(t){var e;if(super(t),t.type!==pt||"style"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce(((e,s)=>{const i=t[s];return null==i?e:e+`${s=s.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${i};`}),"")}update(t,[e]){const{style:s}=t.element;if(void 0===this.ct){this.ct=new Set;for(const t in e)this.ct.add(t);return this.render(e)}this.ct.forEach((t=>{null==e[t]&&(this.ct.delete(t),t.includes("-")?s.removeProperty(t):s[t]="")}));for(const t in e){const i=e[t];null!=i&&(this.ct.add(t),t.includes("-")?s.setProperty(t,i):s[t]=i)}return L}});var Kt,qt,Ft,Zt,Yt,Xt,Qt,te,ee,se,ie,ne,re,oe,he,le,ce,ae,ue,de,fe,we;let pe=class extends rt{constructor(){super(),Kt.add(this),this.width=30,this.height=40,this.selection=new Set,this.callouts=new Set,qt.set(this,void 0),Ft.set(this,void 0),Yt.set(this,0),Xt.set(this,(t=>{var e;jt(t),i(this,Yt,(e=s(this,Yt,"f"),++e),"f")})),Qt.set(this,(t=>{jt(t);const e=s(this,fe,"f").call(this,t).map(ve),i=Ot(_t([this.width,this.height],-1),72);this._drop_hint=Rt([0,0],i,e),this.hovering="canvas"})),te.set(this,(t=>{var e;i(this,Yt,(e=s(this,Yt,"f"),--e),"f")<=0&&(this._drop_hint=void 0,this.hovering=void 0)})),ee.set(this,(t=>{jt(t),this._drop_hint=void 0,this.hovering="bg"})),se.set(this,(async t=>{jt(t);try{const e=await Pt(t);this.dispatchEvent(Lt("bg-drop",e))}catch(t){}i(this,Yt,0,"f"),this.hovering=void 0})),ie.set(this,(async t=>{jt(t);try{const e=await Pt(t);console.log("Emitting drop"),this.dispatchEvent(Lt("token-drop",{loc:this._drop_hint,dim:[72,72],img:e}))}catch(t){}this._drop_hint=void 0,this.hovering=void 0})),ne.set(this,(t=>{zt(t)&&s(this,oe,"f").call(this,t)})),re.set(this,(t=>{(t=>t.isPrimary&&"touch"===t.pointerType)(t)&&s(this,oe,"f").call(this,t)})),oe.set(this,(t=>{t.preventDefault(),t.stopPropagation();const e=t.target.id;t.shiftKey||t.ctrlKey?this.dispatchEvent(Lt("token-select",[e,...this.selection].filter((t=>t!==e||!this.selection.has(e))))):this.dispatchEvent(Lt("token-select",[t.target.id]))})),ue.set(this,void 0),de.set(this,{move:[0,0],resize:[0,0],r:0}),fe.set(this,(t=>Wt(this.viewport.coordToLocal([t.clientX,t.clientY]),[20,20]))),we.set(this,(t=>{if(!this.selection)return;if(8===t.keyCode)return this.dispatchEvent(Bt({type:"token-removed",ids:Array.from(this.selection)})),void jt(t);"z"===t.key&&s(this,Ft,"f")&&this.dispatchEvent(Bt({type:"callout",loc:s(this,fe,"f").call(this,s(this,Ft,"f"))})),this.board.get("tokens").get(this.selection.values().next().value);let e={ArrowUp:[0,-72],ArrowDown:[0,72],ArrowLeft:[-72,0],ArrowRight:[72,0]}[t.key];e&&(this.dispatchEvent(Bt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{const i=this.board.get("tokens").get(t),n=Rt([0,0],Wt(s(this,Kt,"a",Zt),i.get("dim")),Ct(i.get("loc"),e));return{id:i.get("id"),loc:n,dim:i.get("dim"),r:i.get("r")}}))})),jt(t))}))}connectedCallback(){super.connectedCallback(),document.addEventListener("keydown",s(this,we,"f"))}disconnectedCallback(){super.disconnectedCallback(),document.removeEventListener("keydown",s(this,we,"f"))}render(){if(console.log("canvas render"),!this.board)return z``;let[t,e]=s(this,Kt,"a",Zt),n=s(this,Kt,"m",ae).call(this),r=1===this.selection.size?this.board.get("tokens").get(this.selection.values().next().value):void 0;return z`
      <p-p-z
        @pointerdown=${s(this,Kt,"m",he)}
        @pointermove=${s(this,Kt,"m",le)}
        @pointerup=${s(this,Kt,"m",ce)}
        @pointerleave=${()=>i(this,Ft,void 0,"f")}
        @dragstart=${jt}
        @dragenter=${s(this,Xt,"f")}
        @dragleave=${s(this,te,"f")}
        @dragstop=${s(this,te,"f")}
        @dragover=${s(this,Qt,"f")}
        @drop=${s(this,ie,"f")}
      >
        <svg
          id="root"
          width=${t+40}
          height=${e+40}
          style=${Gt({width:`${t+40}px`,height:`${e+40}px`})}
        >
          <defs>
            <clipPath id="canvasClip">
              <rect width=${t} height=${e} rx=${5}></rect>
            </clipPath>
            <pattern id="horiz" x=${-.25} y=${-.25} width="100%" height=${72} patternUnits="userSpaceOnUse">
              <rect class="gridline" width="100%" height=${.5} fill="#d3d3d3" shape-rendering="geometricPrecision"></rect>
            </pattern>
            <pattern id="vert" x=${-.25} y=${-.25} width=${72} height="100%" patternUnits="userSpaceOnUse">
              <rect class="gridline" width=${.5} height="100%" fill="#d3d3d3" shape-rendering="geometric precision"></rect>
            </pattern>
            <pattern id="loading" patternUnits="userSpaceOnUse" width="1" height="1">
              <rect width="1" height="1" fill="white"></rect>
              <image href="assets/loading.svg" width="1" height="1" />
            </pattern>
          </defs>
          <svg x=${20} y=${20} width=${t} height=${e} id="surface">
            <rect class="shadow" width="100%" height="100%" fill="white" rx=${5}></rect>
            <svg clip-path="url(#canvasClip)">
              ${this.bg?j`<image href=${this.bg} width="100%" height="100%" preserveAspectRatio="none" style="will-change: transform"></image>`:null}
              <rect width="100%" height="100%" fill="url(#horiz)" opacity="0.75" pointer-events="none"></rect>
              <rect width="100%" height="100%" fill="url(#vert)" opacity="0.75" pointer-events="none"></rect>
              <svg id="tokens">
                ${At(this.board.get("order")??[],(t=>t),((t,e)=>{const i=this.board.get("tokens").get(t),[r,o]=_t(i.get("dim"),-.5),[h,l]=_t(i.get("loc"),.25);return z`
                      <svg
                        viewBox="0 0 1 1"
                        x=${h}
                        y=${l}
                        width=${r}
                        height=${o}
                        fill="transparent"
                        preserveAspectRatio="none"
                        @pointerdown=${s(this,ne,"f")}
                        @pointerup=${s(this,re,"f")}
                      >
                        <image
                          id=${t}
                          class="token"
                          width="1"
                          height="1"
                          href=${i.get("url")}
                          style=${`transform: rotate(${i.get("r")}deg)`}
                          preserveAspectRatio="none"
                          @load=${be}
                        ></image>
                        <rect width="1" height="1" class="loading"></rect>
                      </svg>

                      ${n?.index===e?j`<rect
                            class="selection-drag-target"
                            x=${n.bbox.start[0]}
                            y=${n.bbox.start[1]}
                            width=${n.bbox.end[0]-n.bbox.start[0]}
                            height=${n.bbox.end[1]-n.bbox.start[1]}
                            fill="transparent"
                            @touchmove=${this.prevent_safari_scroll}
                            @pointerdown=${this.selection_drag_start}
                            @pointermove=${this.selection_drag}
                            @pointerup=${this.selection_drag_end}
                        ></rect>`:null}
                    `}))}
              </svg>
              ${this._drop_hint?j`
            <rect
                class="drop_hint"
                x=${this._drop_hint[0]}
                y=${this._drop_hint[1]}
                width=${72}
                height=${72}
                ></rect>
          `:null}
            </svg>
            ${s(this,qt,"f")?j`
              <rect id="sbox"
                x=${Math.min(s(this,qt,"f").pin[0],s(this,qt,"f").mouse[0])}
                y=${Math.min(s(this,qt,"f").pin[1],s(this,qt,"f").mouse[1])}
                width=${Math.abs(s(this,qt,"f").pin[0]-s(this,qt,"f").mouse[0])}
                height=${Math.abs(s(this,qt,"f").pin[1]-s(this,qt,"f").mouse[1])}
                ></rect>
              `:null}
            ${At(this.callouts,(t=>t),(t=>{const[e,s]=Wt(t,[36,36]);return j`
                  <image href="assets/callout.svg" x=${e} y=${s} width=${72} height=${72}></image>
                `}))}
            ${n?j`
            <svg
              id="selection"
              x=${n.bbox.start[0]}
              y=${n.bbox.start[1]}
              width=${n.bbox.end[0]-n.bbox.start[0]}
              height=${n.bbox.end[1]-n.bbox.start[1]}
              @touchmove=${this.prevent_safari_scroll}
              @pointerdown=${this.selection_drag_start}
              @pointermove=${this.selection_drag}
              @pointerup=${this.selection_drag_end}>
              <rect class="selection-box" width="100%" height="100%"  ></rect>
            ${r?j`
            <g style=${`transform-origin: center; transform: rotate(${r.get("r")}deg) translateY(${Math.sign((r.get("r")-180)%180)*(r.get("dim")[0]-r.get("dim")[1])/2}px)`}>
              <line class="ro" x1="50%" x2="50%" y2=${-10}></line>
              <circle class="ro handle" cx="50%" cy=${-10} r=${2}></circle>
            </g>
            <line class="rn" x2="100%"></line>
            <line class="rw" y2="100%"></line>
            <line class="re" x1="100%" x2="100%" y2="100%"></line>
            <line class="rs" y1="100%" x2="100%" y2="100%"></line>
            <rect class="handle rn rw"></rect>
            <rect class="handle rn re" x="100%"></rect>
            <rect class="handle rs rw" y="100%"></rect>
            <rect class="handle rs re" x="100%" y="100%"></rect>
            </g>
            </svg>`:null}`:null}
          </svg>
        </svg>
      </p-p-z>
      <div
        id="bg-drop"
        class=${this.hovering??""}
        @dragenter=${s(this,Xt,"f")}
        @dragover=${s(this,ee,"f")}
        @dragleave=${s(this,te,"f")}
        @drop=${s(this,se,"f")}
      >
        <div id="bg-drop-label" @drop=${s(this,se,"f")}>Set Background</div>
      </div>
    `}createRenderRoot(){return super.createRenderRoot()}prevent_safari_scroll(t){jt(t)}selection_drag_start(t){if(!It(t))return;const e=s(this,fe,"f").call(this,t);jt(t),t.target.setPointerCapture(t.pointerId),i(this,ue,e,"f")}selection_drag(t){if(!It(t))return;s(this,ue,"f")||this.selection_drag_start(t),jt(t);const e=Rt([0,0],s(this,Kt,"a",Zt),s(this,fe,"f").call(this,t)),n=this.board.get("tokens").get(this.selection.values().next().value),r=n.get("dim"),o=n.get("loc"),h=t.target.classList;let l=[0,0],c=[0,0],a=0;if(h.contains("rn")&&(c[1]=o[1]-ge(e[1]),l[1]=ge(e[1])-o[1]),h.contains("rw")&&(c[0]=o[0]-ge(e[0]),l[0]=ge(e[0])-o[0]),h.contains("rs")&&(c[1]=ge(e[1])-r[1]-o[1]),h.contains("re")&&(c[0]=ge(e[0])-r[0]-o[0]),h.contains("ro")){const t=Ct(o,Ut(r,2)),s=Wt(e,t),i=180*Math.atan2(s[0],-s[1])/Math.PI;a=90*Math.round(i/90)-n.get("r")%360}h.contains("selection-drag-target")?l=Wt(e,s(this,ue,"f")).map(ge):(l=Nt(_t(r,-72),l),c=Tt(_t(Ot(r,-1),72),c)),a===s(this,de,"f").r&&Dt(l,s(this,de,"f").move)&&Dt(c,s(this,de,"f").resize)||(i(this,ue,Ct(s(this,ue,"f"),l),"f"),i(this,de,{move:[0,0],resize:[0,0],r:0},"f"),this.dispatchEvent(Bt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{let e=this.board.get("tokens").get(t);return{id:e.get("id"),loc:Ct(e.get("loc"),l),dim:Ct(e.get("dim"),c),r:e.get("r")+a}}))})))}selection_drag_end(t){jt(t),i(this,ue,void 0,"f")}};qt=new WeakMap,Ft=new WeakMap,Yt=new WeakMap,Xt=new WeakMap,Qt=new WeakMap,te=new WeakMap,ee=new WeakMap,se=new WeakMap,ie=new WeakMap,ne=new WeakMap,re=new WeakMap,oe=new WeakMap,ue=new WeakMap,de=new WeakMap,fe=new WeakMap,we=new WeakMap,Kt=new WeakSet,Zt=function(){return Ot([this.width,this.height],72)},he=function(t){if(!zt(t))return;t.target.setPointerCapture(t.pointerId);const e=s(this,fe,"f").call(this,t);i(this,qt,{pin:e,mouse:e},"f")},le=function(t){i(this,Ft,{clientX:t.clientX,clientY:t.clientY},"f"),s(this,qt,"f")&&(s(this,qt,"f").mouse=s(this,fe,"f").call(this,t),this.requestUpdate())},ce=function(t){if(!s(this,qt,"f"))return this.dispatchEvent(Lt("token-select",[]));t.target.setPointerCapture(t.pointerId);const e=Nt(s(this,qt,"f").pin,s(this,qt,"f").mouse),n=(t=>[Math.abs(t[0]),Math.abs(t[1])])(Wt(s(this,qt,"f").pin,s(this,qt,"f").mouse)),r={start:e,end:Ct(e,n)},o=Vt(function*(t,e){for(let s of t)e(s)&&(yield s)}(this.board.get("tokens").values(),(t=>((t,e)=>!(e.start[0]>t.end[0]||e.end[0]<t.start[0]||e.start[1]>t.end[1]||e.end[1]<t.start[1]))(r,{start:t.get("loc"),end:Ct(t.get("loc"),t.get("dim"))}))),(t=>t.get("id")));i(this,qt,void 0,"f"),this.dispatchEvent(Lt("token-select",[...o])),this.requestUpdate()},ae=function(){if(0===this.selection.size)return;const t=Array.from(this.selection,(t=>this.board.get("tokens").get(t))).filter((t=>t)),e=Math.max(...Vt(this.selection.values(),(t=>this.board.get("order").toJSON().indexOf(t))));let s=t[0].get("loc"),i=Ct(t[0].get("loc"),t[0].get("dim"));return t.forEach((t=>{s=Nt(s,t.get("loc")),i=Tt(i,Ct(t.get("loc"),t.get("dim")))})),{index:e,bbox:{start:s,end:i}}},pe.styles=c`
    :host {
      position: relative;
      display: block;
      --selection-color: cornflowerblue;
      overflow: hidden;
    }

    p-p-z {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      max-width: 100%;
      max-height: 100%;
    }
    #root {
      backface-visibility: hidden;
    }

    #sbox {
      stroke: var(--selection-color);
      stroke-width: 1px;
      fill: var(--selection-color);
      fill-opacity: 0.2;
    }

    #bg-drop {
      position: absolute;
      right: 5px;
      bottom: -60px;
      display: inline-block;
      height: 50px;
      transition: bottom 250ms;
      background: var(--ui-bg);
      border-radius: 5px 5px 0 0;
      display: grid;
      padding: 5px;
      grid: 1fr 1fr;
      text-align: center;
      display: none;
    }

    #bg-drop.canvas,
    #bg-drop.bg {
      bottom: 0;
      box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.3);
      display: block;
    }

    #bg-drop-label {
      --color: gray;
      padding: 0 1em;
      border: 2px solid var(--color);
      color: var(--color);
      border-radius: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }

    .bg > #bg-drop-label {
      --color: blue;
    }

    svg {
      overflow: visible;
    }

    #surface {
      clip-path: rect(100%);
    }

    .shadow {
      stroke-width: ${.5};
      stroke: rgba(0, 0, 0, 0.2);
      filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));
    }

    .drop_hint {
      transition: none;
      pointer-events: none;
      fill: gray;
    }

    .selection-box,
    line.ro {
      stroke: var(--selection-color);
      stroke-width: 1px;
      filter: drop-shadow(0px 0px 2px var(--selection-color));
      fill: transparent;
    }

    .selection-box {
      pointer-events: none !important;
    }

    .rn,
    .rs,
    .re,
    .rw {
      stroke-width: ${8};
      vector-effect: non-scaling-stroke;
      stroke: transparent;
    }

    .handle {
      stroke-width: 1px;
      fill: var(--selection-color);
      stroke: white;
    }

    .selection-drag-target {
      pointer-events: fill;
      cursor: move;
    }

    rect.handle {
      width: ${8}px;
      height: ${8}px;
      transform: translate(${-4}px, ${-4}px);
    }

    .ro.handle {
      cursor: crosshair;
    }

    .rn.re,
    .rs.rw {
      cursor: nesw-resize;
    }

    .rn.rw,
    .rs.re {
      cursor: nwse-resize;
    }

    .rn,
    .rs {
      cursor: row-resize;
    }

    .re,
    .rw {
      cursor: col-resize;
    }

    p-p-z {
      background-color: #ededf0;
    }

    .token {
      transform-box: fill-box;
      transform-origin: center;
      fill: transparent;
    }

    .token + .loading {
      fill: url(#loading);
      pointer-events: none;
    }

    .token.loaded + .loading {
      fill: transparent;
    }

    #selection {
      pointer-events: none;
    }

    #selection * {
      pointer-events: auto;
    }
  `,e([ct({type:Number})],pe.prototype,"width",void 0),e([ct({type:Number})],pe.prototype,"height",void 0),e([ct()],pe.prototype,"bg",void 0),e([ct({attribute:!1})],pe.prototype,"board",void 0),e([ct({attribute:!1})],pe.prototype,"selection",void 0),e([ct({attribute:!1})],pe.prototype,"callouts",void 0),e([ct({attribute:!1})],pe.prototype,"sel_bbox",void 0),e([ft("root",!0)],pe.prototype,"root",void 0),e([ft("p-p-z",!0)],pe.prototype,"viewport",void 0),e([at()],pe.prototype,"_drop_hint",void 0),e([at()],pe.prototype,"hovering",void 0),e([dt({capture:!0,passive:!1})],pe.prototype,"prevent_safari_scroll",null),e([dt({capture:!0,passive:!1})],pe.prototype,"selection_drag_start",null),e([dt({capture:!0,passive:!1})],pe.prototype,"selection_drag",null),e([dt({capture:!0,passive:!1})],pe.prototype,"selection_drag_end",null),pe=e([ht("bg-canvas")],pe);const ge=t=>72*Math.round(t/72),ve=t=>t-t%72,be=t=>t.target.classList.add("loaded");var ye,me;let ke=class extends rt{constructor(){super(...arguments),this._state=!1,this._loaded=!1,this._buy=t=>{console.log("CLICK"),jt(t),this._state=!0,document.addEventListener("click",s(this,ye,"f"),{capture:!0})},ye.set(this,(t=>{jt(t),this._state=!1,document.removeEventListener("click",s(this,ye,"f"),{capture:!0})})),me.set(this,(t=>{this._loaded=!0}))}render(){return z`<button @click="${this._buy}">Buy Me A Coffee</button> ${this._state?z`<div id="container"><iframe class="${this._loaded?"loaded":""}" allow="payment" src="https://ko-fi.com/djrenren/?hidefeed=true&widget=true&embed=true&preview=true" title="djrenren" @load="${s(this,me,"f")}"></iframe></div>`:null}`}};ye=new WeakMap,me=new WeakMap,ke.styles=c`:host{display:block;position:relative}iframe{border:none;display:block;opacity:0;width:100%;height:100%;transition:opacity .5s linear}#container{border-radius:5px;box-shadow:0 0 6px rgba(0,0,0,.7);position:absolute;width:350px;height:525px;bottom:-535px;right:0;animation-name:fade;animation-duration:.5s;animation-direction:backwards;background:url(assets/loading.svg) center/100px no-repeat,#ededf0;overflow:hidden}iframe.loaded{opacity:1}@keyframes fade{0%{opacity:0}100%{opacity:1}}`,e([at()],ke.prototype,"_state",void 0),e([at()],ke.prototype,"_loaded",void 0),ke=e([ht("buy-me-a-coffee")],ke);const $e=()=>new Map,xe=t=>{const e=$e();return t.forEach(((t,s)=>{e.set(s,t)})),e},Se=(t,e,s)=>{let i=t.get(e);return void 0===i&&t.set(e,i=s()),i},Me=()=>new Set,Ae=t=>t[t.length-1],Ce=(t,e)=>{for(let s=0;s<e.length;s++)t.push(e[s])},_e=Array.from;class We{constructor(){this._observers=$e()}on(t,e){Se(this._observers,t,Me).add(e)}once(t,e){const s=(...i)=>{this.off(t,s),e(...i)};this.on(t,s)}off(t,e){const s=this._observers.get(t);void 0!==s&&(s.delete(e),0===s.size&&this._observers.delete(t))}emit(t,e){return _e((this._observers.get(t)||$e()).values()).forEach((t=>t(...e)))}destroy(){this._observers=$e()}}const Oe=Math.floor,Ee=Math.abs,Ue=Math.log10,Te=(t,e)=>t<e?t:e,Ne=(t,e)=>t>e?t:e,Re=t=>0!==t?t<0:1/t<0,De=/^\s*/g,Ie=/([A-Z])/g,ze=(t,e)=>(t=>t.replace(De,""))(t.replace(Ie,(t=>`${e}${(t=>t.toLowerCase())(t)}`)));"undefined"!=typeof TextEncoder&&new TextEncoder;let je="undefined"==typeof TextDecoder?null:new TextDecoder("utf-8",{fatal:!0,ignoreBOM:!0});je&&1===je.decode(new Uint8Array).length&&(je=null);const Le=t=>void 0===t?null:t;let Pe=new class{constructor(){this.map=new Map}setItem(t,e){this.map.set(t,e)}getItem(t){return this.map.get(t)}},Je=!0;try{"undefined"!=typeof localStorage&&(Pe=localStorage,Je=!1)}catch(mt){}const Be=Pe,He="undefined"!=typeof process&&process.release&&/node|io\.js/.test(process.release.name);let Ve;"undefined"!=typeof navigator&&/Mac/.test(navigator.platform);const Ge=t=>(()=>{if(void 0===Ve)if(He){Ve=$e();const t=process.argv;let e=null;for(let s=0;s<t.length;s++){const i=t[s];"-"===i[0]?(null!==e&&Ve.set(e,""),e=i):null!==e&&(Ve.set(e,i),e=null)}null!==e&&Ve.set(e,"")}else"object"==typeof location?(Ve=$e(),(location.search||"?").slice(1).split("&").forEach((t=>{if(0!==t.length){const[e,s]=t.split("=");Ve.set(`--${ze(e,"-")}`,s),Ve.set(`-${ze(e,"-")}`,s)}}))):Ve=$e();return Ve})().has(t);var Ke;Ge("--"+(Ke="production"))||(t=>{Le(He?process.env[t.toUpperCase()]:Be.getItem(t))})(Ke);class qe{constructor(t){this.arr=t,this.pos=0}}const Fe=t=>new qe(t),Ze=t=>((t,e)=>{const s=ls(t.arr.buffer,t.pos+t.arr.byteOffset,e);return t.pos+=e,s})(t,Xe(t)),Ye=t=>t.arr[t.pos++],Xe=t=>{let e=0,s=0;for(;;){const i=t.arr[t.pos++];if(e|=(127&i)<<s,s+=7,i<128)return e>>>0;if(s>53)throw new Error("Integer out of range!")}},Qe=t=>{let e=t.arr[t.pos++],s=63&e,i=6;const n=(64&e)>0?-1:1;if(0==(128&e))return n*s;for(;;){if(e=t.arr[t.pos++],s|=(127&e)<<i,i+=7,e<128)return n*(s>>>0);if(i>53)throw new Error("Integer out of range!")}},ts=t=>{let e=Xe(t);if(0===e)return"";{let s=String.fromCodePoint(Ye(t));if(--e<100)for(;e--;)s+=String.fromCodePoint(Ye(t));else for(;e>0;){const i=e<1e4?e:1e4,n=t.arr.subarray(t.pos,t.pos+i);t.pos+=i,s+=String.fromCodePoint.apply(null,n),e-=i}return decodeURIComponent(escape(s))}},es=(t,e)=>{const s=new DataView(t.arr.buffer,t.arr.byteOffset+t.pos,e);return t.pos+=e,s},ss=[t=>{},t=>null,Qe,t=>es(t,4).getFloat32(0,!1),t=>es(t,8).getFloat64(0,!1),t=>es(t,8).getBigInt64(0,!1),t=>!1,t=>!0,ts,t=>{const e=Xe(t),s={};for(let i=0;i<e;i++){s[ts(t)]=is(t)}return s},t=>{const e=Xe(t),s=[];for(let i=0;i<e;i++)s.push(is(t));return s},Ze],is=t=>ss[127-Ye(t)](t);class ns extends qe{constructor(t,e){super(t),this.reader=e,this.s=null,this.count=0}read(){var t;return 0===this.count&&(this.s=this.reader(this),(t=this).pos!==t.arr.length?this.count=Xe(this)+1:this.count=-1),this.count--,this.s}}class rs extends qe{constructor(t){super(t),this.s=0,this.count=0}read(){if(0===this.count){this.s=Qe(this);const t=Re(this.s);this.count=1,t&&(this.s=-this.s,this.count=Xe(this)+2)}return this.count--,this.s}}class os extends qe{constructor(t){super(t),this.s=0,this.count=0,this.diff=0}read(){if(0===this.count){const t=Qe(this),e=1&t;this.diff=t>>1,this.count=1,e&&(this.count=Xe(this)+2)}return this.s+=this.diff,this.count--,this.s}}class hs{constructor(t){this.decoder=new rs(t),this.str=ts(this.decoder),this.spos=0}read(){const t=this.spos+this.decoder.read(),e=this.str.slice(this.spos,t);return this.spos=t,e}}const ls=(t,e,s)=>new Uint8Array(t,e,s),cs=t=>{const e=(s=t.byteLength,new Uint8Array(s));var s;return e.set(t),e},as=Number.isInteger||(t=>"number"==typeof t&&isFinite(t)&&Oe(t)===t);class us{constructor(){this.cpos=0,this.cbuf=new Uint8Array(100),this.bufs=[]}}const ds=()=>new us,fs=t=>{const e=new Uint8Array((t=>{let e=t.cpos;for(let s=0;s<t.bufs.length;s++)e+=t.bufs[s].length;return e})(t));let s=0;for(let i=0;i<t.bufs.length;i++){const n=t.bufs[i];e.set(n,s),s+=n.length}return e.set(ls(t.cbuf.buffer,0,t.cpos),s),e},ws=(t,e)=>{const s=t.cbuf.length;t.cpos===s&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(2*s),t.cpos=0),t.cbuf[t.cpos++]=e},ps=ws,gs=(t,e)=>{for(;e>127;)ws(t,128|127&e),e>>>=7;ws(t,127&e)},vs=(t,e)=>{const s=Re(e);for(s&&(e=-e),ws(t,(e>63?128:0)|(s?64:0)|63&e),e>>>=6;e>0;)ws(t,(e>127?128:0)|127&e),e>>>=7},bs=(t,e)=>{const s=unescape(encodeURIComponent(e)),i=s.length;gs(t,i);for(let e=0;e<i;e++)ws(t,s.codePointAt(e))},ys=(t,e)=>{const s=t.cbuf.length,i=t.cpos,n=Te(s-i,e.length),r=e.length-n;t.cbuf.set(e.subarray(0,n),i),t.cpos+=n,r>0&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(Ne(2*s,r)),t.cbuf.set(e.subarray(n)),t.cpos=r)},ms=(t,e)=>{gs(t,e.byteLength),ys(t,e)},ks=(t,e)=>{((t,e)=>{const s=t.cbuf.length;s-t.cpos<e&&(t.bufs.push(ls(t.cbuf.buffer,0,t.cpos)),t.cbuf=new Uint8Array(2*Ne(s,e)),t.cpos=0)})(t,e);const s=new DataView(t.cbuf.buffer,t.cpos,e);return t.cpos+=e,s},$s=new DataView(new ArrayBuffer(4)),xs=(t,e)=>{switch(typeof e){case"string":ws(t,119),bs(t,e);break;case"number":as(e)&&Ee(e)<=2147483647?(ws(t,125),vs(t,e)):(s=e,$s.setFloat32(0,s),$s.getFloat32(0)===s?(ws(t,124),((t,e)=>{ks(t,4).setFloat32(0,e,!1)})(t,e)):(ws(t,123),((t,e)=>{ks(t,8).setFloat64(0,e,!1)})(t,e)));break;case"bigint":ws(t,122),((t,e)=>{ks(t,8).setBigInt64(0,e,!1)})(t,e);break;case"object":if(null===e)ws(t,126);else if(e instanceof Array){ws(t,117),gs(t,e.length);for(let s=0;s<e.length;s++)xs(t,e[s])}else if(e instanceof Uint8Array)ws(t,116),ms(t,e);else{ws(t,118);const s=Object.keys(e);gs(t,s.length);for(let i=0;i<s.length;i++){const n=s[i];bs(t,n),xs(t,e[n])}}break;case"boolean":ws(t,e?120:121);break;default:ws(t,127)}var s};class Ss extends us{constructor(t){super(),this.w=t,this.s=null,this.count=0}write(t){this.s===t?this.count++:(this.count>0&&gs(this,this.count-1),this.count=1,this.w(this,t),this.s=t)}}const Ms=t=>{t.count>0&&(vs(t.encoder,1===t.count?t.s:-t.s),t.count>1&&gs(t.encoder,t.count-2))};class As{constructor(){this.encoder=new us,this.s=0,this.count=0}write(t){this.s===t?this.count++:(Ms(this),this.count=1,this.s=t)}toUint8Array(){return Ms(this),fs(this.encoder)}}const Cs=t=>{if(t.count>0){const e=t.diff<<1|(1===t.count?0:1);vs(t.encoder,e),t.count>1&&gs(t.encoder,t.count-2)}};class _s{constructor(){this.encoder=new us,this.s=0,this.count=0,this.diff=0}write(t){this.diff===t-this.s?(this.s=t,this.count++):(Cs(this),this.count=1,this.diff=t-this.s,this.s=t)}toUint8Array(){return Cs(this),fs(this.encoder)}}class Ws{constructor(){this.sarr=[],this.s="",this.lensE=new As}write(t){this.s+=t,this.s.length>19&&(this.sarr.push(this.s),this.s=""),this.lensE.write(t.length)}toUint8Array(){const t=new us;return this.sarr.push(this.s),this.s="",bs(t,this.sarr.join("")),ys(t,this.lensE.toUint8Array()),fs(t)}}const Os="undefined"==typeof crypto?null:crypto,Es=null!==Os?t=>{const e=new ArrayBuffer(t),s=new Uint8Array(e);return Os.getRandomValues(s),e}:t=>{const e=new ArrayBuffer(t),s=new Uint8Array(e);for(let e=0;e<t;e++)s[e]=Math.ceil(4294967295*Math.random()>>>0);return e},Us=()=>new Uint32Array(Es(4))[0],Ts=[1e7]+-1e3+-4e3+-8e3+-1e11,Ns=()=>Ts.replace(/[018]/g,(t=>(t^Us()&15>>t/4).toString(16))),Rs=Date.now,Ds=t=>new Error(t),Is=()=>{throw Ds("Method unimplemented")},zs=()=>{throw Ds("Unexpected case")},js=Object.keys,Ls=t=>js(t).length,Ps=(t,e)=>t===e||Ls(t)===Ls(e)&&((t,e)=>{for(const s in t)if(!e(t[s],s))return!1;return!0})(t,((t,s)=>(void 0!==t||((t,e)=>Object.prototype.hasOwnProperty.call(t,e))(e,s))&&e[s]===t)),Js=(t,e,s=0)=>{try{for(;s<t.length;s++)t[s](...e)}finally{s<t.length&&Js(t,e,s+1)}},Bs=Symbol;class Hs{constructor(t,e){this.left=t,this.right=e}}const Vs=(t,e)=>new Hs(t,e),Gs="undefined"!=typeof document?document:{};"undefined"!=typeof DOMParser&&new DOMParser;const Ks=t=>((t,e)=>{const s=[];for(const[i,n]of t)s.push(e(n,i));return s})(t,((t,e)=>`${e}:${t};`)).join("");Gs.ELEMENT_NODE,Gs.TEXT_NODE,Gs.CDATA_SECTION_NODE,Gs.COMMENT_NODE,Gs.DOCUMENT_NODE,Gs.DOCUMENT_TYPE_NODE,Gs.DOCUMENT_FRAGMENT_NODE;const qs=Bs(),Fs=Bs(),Zs=Bs(),Ys=Bs(),Xs=Bs(),Qs=Bs(),ti=Bs(),ei=Bs(),si=Bs(),ii={[qs]:Vs("font-weight","bold"),[Fs]:Vs("font-weight","normal"),[Zs]:Vs("color","blue"),[Xs]:Vs("color","green"),[Ys]:Vs("color","grey"),[Qs]:Vs("color","red"),[ti]:Vs("color","purple"),[ei]:Vs("color","orange"),[si]:Vs("color","black")},ni={[qs]:"[1m",[Fs]:"[2m",[Zs]:"[34m",[Xs]:"[32m",[Ys]:"[37m",[Qs]:"[31m",[ti]:"[35m",[ei]:"[38;5;208m",[si]:"[0m"},ri=He?t=>{const e=[],s=[];let i=0;for(;i<t.length;i++){const s=t[i],n=ni[s];if(void 0!==n)e.push(n);else{if(s.constructor!==String&&s.constructor!==Number)break;e.push(s)}}for(i>0&&(e.push("[0m"),s.push(e.join("")));i<t.length;i++){const e=t[i];e instanceof Symbol||s.push(e)}return s}:t=>{const e=[],s=[],i=$e();let n=[],r=0;for(;r<t.length;r++){const n=t[r],o=ii[n];if(void 0!==o)i.set(o.left,o.right);else{if(n.constructor!==String&&n.constructor!==Number)break;{const t=Ks(i);r>0||t.length>0?(e.push("%c"+n),s.push(t)):e.push(n)}}}for(r>0&&(n=s,n.unshift(e.join("")));r<t.length;r++){const e=t[r];e instanceof Symbol||n.push(e)}return n},oi=new Set,hi=t=>({[Symbol.iterator](){return this},next:t}),li=(t,e)=>hi((()=>{const{done:s,value:i}=t.next();return{done:s,value:s?void 0:e(i)}}));class ci{constructor(t,e){this.clock=t,this.len=e}}class ai{constructor(){this.clients=new Map}}const ui=(t,e,s)=>e.clients.forEach(((e,i)=>{const n=t.doc.store.clients.get(i);for(let i=0;i<e.length;i++){const r=e[i];en(t,n,r.clock,r.len,s)}})),di=(t,e)=>{const s=t.clients.get(e.client);return void 0!==s&&null!==((t,e)=>{let s=0,i=t.length-1;for(;s<=i;){const n=Oe((s+i)/2),r=t[n],o=r.clock;if(o<=e){if(e<o+r.len)return n;s=n+1}else i=n-1}return null})(s,e.clock)},fi=t=>{t.clients.forEach((t=>{let e,s;for(t.sort(((t,e)=>t.clock-e.clock)),e=1,s=1;e<t.length;e++){const i=t[s-1],n=t[e];i.clock+i.len>=n.clock?i.len=Ne(i.len,n.clock+n.len-i.clock):(s<e&&(t[s]=n),s++)}t.length=s}))},wi=(t,e,s,i)=>{Se(t.clients,e,(()=>[])).push(new ci(s,i))},pi=()=>new ai,gi=(t,e)=>{gs(t.restEncoder,e.clients.size),e.clients.forEach(((e,s)=>{t.resetDsCurVal(),gs(t.restEncoder,s);const i=e.length;gs(t.restEncoder,i);for(let s=0;s<i;s++){const i=e[s];t.writeDsClock(i.clock),t.writeDsLen(i.len)}}))},vi=t=>{const e=new ai,s=Xe(t.restDecoder);for(let i=0;i<s;i++){t.resetDsCurVal();const s=Xe(t.restDecoder),i=Xe(t.restDecoder);if(i>0){const n=Se(e.clients,s,(()=>[]));for(let e=0;e<i;e++)n.push(new ci(t.readDsClock(),t.readDsLen()))}}return e},bi=(t,e,s)=>{const i=new ai,n=Xe(t.restDecoder);for(let r=0;r<n;r++){t.resetDsCurVal();const n=Xe(t.restDecoder),r=Xe(t.restDecoder),o=s.clients.get(n)||[],h=qi(s,n);for(let s=0;s<r;s++){const s=t.readDsClock(),r=s+t.readDsLen();if(s<h){h<r&&wi(i,n,h,r-h);let t=Zi(o,s),l=o[t];for(!l.deleted&&l.id.clock<s&&(o.splice(t+1,0,Nr(e,l,s-l.id.clock)),t++);t<o.length&&(l=o[t++],l.id.clock<r);)l.deleted||(r<l.id.clock+l.length&&o.splice(t,0,Nr(e,l,r-l.id.clock)),l.delete(e))}else wi(i,n,s,r-s)}}if(i.clients.size>0){const t=new Mi;return gs(t.restEncoder,0),gi(t,i),t.toUint8Array()}return null},yi=Us;class mi extends We{constructor({guid:t=Ns(),collectionid:e=null,gc:s=!0,gcFilter:i=(()=>!0),meta:n=null,autoLoad:r=!1,shouldLoad:o=!0}={}){super(),this.gc=s,this.gcFilter=i,this.clientID=yi(),this.guid=t,this.collectionid=e,this.share=new Map,this.store=new Gi,this._transaction=null,this._transactionCleanups=[],this.subdocs=new Set,this._item=null,this.shouldLoad=o,this.autoLoad=r,this.meta=n,this.isLoaded=!1,this.whenLoaded=(t=>new Promise(t))((t=>{this.on("load",(()=>{this.isLoaded=!0,t(this)}))}))}load(){const t=this._item;null===t||this.shouldLoad||ln(t.parent.doc,(t=>{t.subdocsLoaded.add(this)}),null,!0),this.shouldLoad=!0}getSubdocs(){return this.subdocs}getSubdocGuids(){return new Set(Array.from(this.subdocs).map((t=>t.guid)))}transact(t,e=null){ln(this,t,e)}get(t,e=Cn){const s=Se(this.share,t,(()=>{const t=new e;return t._integrate(this,null),t})),i=s.constructor;if(e!==Cn&&i!==e){if(i===Cn){const i=new e;i._map=s._map,s._map.forEach((t=>{for(;null!==t;t=t.left)t.parent=i})),i._start=s._start;for(let t=i._start;null!==t;t=t.right)t.parent=i;return i._length=s._length,this.share.set(t,i),i._integrate(this,null),i}throw new Error(`Type with the name ${t} has already been defined with a different constructor`)}return s}getArray(t=""){return this.get(t,Vn)}getText(t=""){return this.get(t,hr)}getMap(t=""){return this.get(t,Kn)}getXmlFragment(t=""){return this.get(t,cr)}toJSON(){const t={};return this.share.forEach(((e,s)=>{t[s]=e.toJSON()})),t}destroy(){_e(this.subdocs).forEach((t=>t.destroy()));const t=this._item;if(null!==t){this._item=null;const e=t.content;e.doc=new mi({guid:this.guid,...e.opts,shouldLoad:!1}),e.doc._item=t,ln(t.parent.doc,(s=>{const i=e.doc;t.deleted||s.subdocsAdded.add(i),s.subdocsRemoved.add(this)}),null,!0)}this.emit("destroyed",[!0]),this.emit("destroy",[this]),super.destroy()}on(t,e){super.on(t,e)}off(t,e){super.off(t,e)}}class ki{constructor(t){this.restDecoder=t}resetDsCurVal(){}readDsClock(){return Xe(this.restDecoder)}readDsLen(){return Xe(this.restDecoder)}}class $i extends ki{readLeftID(){return Li(Xe(this.restDecoder),Xe(this.restDecoder))}readRightID(){return Li(Xe(this.restDecoder),Xe(this.restDecoder))}readClient(){return Xe(this.restDecoder)}readInfo(){return Ye(this.restDecoder)}readString(){return ts(this.restDecoder)}readParentInfo(){return 1===Xe(this.restDecoder)}readTypeRef(){return Xe(this.restDecoder)}readLen(){return Xe(this.restDecoder)}readAny(){return is(this.restDecoder)}readBuf(){return cs(Ze(this.restDecoder))}readJSON(){return JSON.parse(ts(this.restDecoder))}readKey(){return ts(this.restDecoder)}}class xi extends class{constructor(t){this.dsCurrVal=0,this.restDecoder=t}resetDsCurVal(){this.dsCurrVal=0}readDsClock(){return this.dsCurrVal+=Xe(this.restDecoder),this.dsCurrVal}readDsLen(){const t=Xe(this.restDecoder)+1;return this.dsCurrVal+=t,t}}{constructor(t){super(t),this.keys=[],Xe(t),this.keyClockDecoder=new os(Ze(t)),this.clientDecoder=new rs(Ze(t)),this.leftClockDecoder=new os(Ze(t)),this.rightClockDecoder=new os(Ze(t)),this.infoDecoder=new ns(Ze(t),Ye),this.stringDecoder=new hs(Ze(t)),this.parentInfoDecoder=new ns(Ze(t),Ye),this.typeRefDecoder=new rs(Ze(t)),this.lenDecoder=new rs(Ze(t))}readLeftID(){return new zi(this.clientDecoder.read(),this.leftClockDecoder.read())}readRightID(){return new zi(this.clientDecoder.read(),this.rightClockDecoder.read())}readClient(){return this.clientDecoder.read()}readInfo(){return this.infoDecoder.read()}readString(){return this.stringDecoder.read()}readParentInfo(){return 1===this.parentInfoDecoder.read()}readTypeRef(){return this.typeRefDecoder.read()}readLen(){return this.lenDecoder.read()}readAny(){return is(this.restDecoder)}readBuf(){return Ze(this.restDecoder)}readJSON(){return is(this.restDecoder)}readKey(){const t=this.keyClockDecoder.read();if(t<this.keys.length)return this.keys[t];{const t=this.stringDecoder.read();return this.keys.push(t),t}}}class Si extends class{constructor(){this.restEncoder=ds()}toUint8Array(){return fs(this.restEncoder)}resetDsCurVal(){}writeDsClock(t){gs(this.restEncoder,t)}writeDsLen(t){gs(this.restEncoder,t)}}{writeLeftID(t){gs(this.restEncoder,t.client),gs(this.restEncoder,t.clock)}writeRightID(t){gs(this.restEncoder,t.client),gs(this.restEncoder,t.clock)}writeClient(t){gs(this.restEncoder,t)}writeInfo(t){ps(this.restEncoder,t)}writeString(t){bs(this.restEncoder,t)}writeParentInfo(t){gs(this.restEncoder,t?1:0)}writeTypeRef(t){gs(this.restEncoder,t)}writeLen(t){gs(this.restEncoder,t)}writeAny(t){xs(this.restEncoder,t)}writeBuf(t){ms(this.restEncoder,t)}writeJSON(t){bs(this.restEncoder,JSON.stringify(t))}writeKey(t){bs(this.restEncoder,t)}}class Mi extends class{constructor(){this.restEncoder=ds(),this.dsCurrVal=0}toUint8Array(){return fs(this.restEncoder)}resetDsCurVal(){this.dsCurrVal=0}writeDsClock(t){const e=t-this.dsCurrVal;this.dsCurrVal=t,gs(this.restEncoder,e)}writeDsLen(t){0===t&&zs(),gs(this.restEncoder,t-1),this.dsCurrVal+=t}}{constructor(){super(),this.keyMap=new Map,this.keyClock=0,this.keyClockEncoder=new _s,this.clientEncoder=new As,this.leftClockEncoder=new _s,this.rightClockEncoder=new _s,this.infoEncoder=new Ss(ps),this.stringEncoder=new Ws,this.parentInfoEncoder=new Ss(ps),this.typeRefEncoder=new As,this.lenEncoder=new As}toUint8Array(){const t=ds();return gs(t,0),ms(t,this.keyClockEncoder.toUint8Array()),ms(t,this.clientEncoder.toUint8Array()),ms(t,this.leftClockEncoder.toUint8Array()),ms(t,this.rightClockEncoder.toUint8Array()),ms(t,fs(this.infoEncoder)),ms(t,this.stringEncoder.toUint8Array()),ms(t,fs(this.parentInfoEncoder)),ms(t,this.typeRefEncoder.toUint8Array()),ms(t,this.lenEncoder.toUint8Array()),ys(t,fs(this.restEncoder)),fs(t)}writeLeftID(t){this.clientEncoder.write(t.client),this.leftClockEncoder.write(t.clock)}writeRightID(t){this.clientEncoder.write(t.client),this.rightClockEncoder.write(t.clock)}writeClient(t){this.clientEncoder.write(t)}writeInfo(t){this.infoEncoder.write(t)}writeString(t){this.stringEncoder.write(t)}writeParentInfo(t){this.parentInfoEncoder.write(t?1:0)}writeTypeRef(t){this.typeRefEncoder.write(t)}writeLen(t){this.lenEncoder.write(t)}writeAny(t){xs(this.restEncoder,t)}writeBuf(t){ms(this.restEncoder,t)}writeJSON(t){xs(this.restEncoder,t)}writeKey(t){const e=this.keyMap.get(t);void 0===e?(this.keyClockEncoder.write(this.keyClock++),this.stringEncoder.write(t)):this.keyClockEncoder.write(e)}}const Ai=(t,e,s)=>{const i=new Map;s.forEach(((t,s)=>{qi(e,s)>t&&i.set(s,t)})),Ki(e).forEach(((t,e)=>{s.has(e)||i.set(e,0)})),gs(t.restEncoder,i.size),Array.from(i.entries()).sort(((t,e)=>e[0]-t[0])).forEach((([s,i])=>{((t,e,s,i)=>{i=Ne(i,e[0].id.clock);const n=Zi(e,i);gs(t.restEncoder,e.length-n),t.writeClient(s),gs(t.restEncoder,i);const r=e[n];r.write(t,i-r.id.clock);for(let s=n+1;s<e.length;s++)e[s].write(t,0)})(t,e.clients.get(s),s,i)}))},Ci=(t,e,s,i=new xi(t))=>ln(e,(t=>{t.local=!1;let e=!1;const s=t.doc,n=s.store,r=((t,e)=>{const s=$e(),i=Xe(t.restDecoder);for(let n=0;n<i;n++){const i=Xe(t.restDecoder),n=new Array(i),r=t.readClient();let o=Xe(t.restDecoder);s.set(r,{i:0,refs:n});for(let s=0;s<i;s++){const i=t.readInfo();switch(31&i){case 0:{const e=t.readLen();n[s]=new pr(Li(r,o),e),o+=e;break}case 10:{const e=Xe(t.restDecoder);n[s]=new zr(Li(r,o),e),o+=e;break}default:{const h=0==(192&i),l=new Rr(Li(r,o),null,128==(128&i)?t.readLeftID():null,null,64==(64&i)?t.readRightID():null,h?t.readParentInfo()?e.get(t.readString()):t.readLeftID():null,h&&32==(32&i)?t.readString():null,Dr(t,i));n[s]=l,o+=l.length}}}}return s})(i,s),o=((t,e,s)=>{const i=[];let n=Array.from(s.keys()).sort(((t,e)=>t-e));if(0===n.length)return null;const r=()=>{if(0===n.length)return null;let t=s.get(n[n.length-1]);for(;t.refs.length===t.i;){if(n.pop(),!(n.length>0))return null;t=s.get(n[n.length-1])}return t};let o=r();if(null===o&&0===i.length)return null;const h=new Gi,l=new Map,c=(t,e)=>{const s=l.get(t);(null==s||s>e)&&l.set(t,e)};let a=o.refs[o.i++];const u=new Map,d=()=>{for(const t of i){const e=t.id.client,i=s.get(e);i?(i.i--,h.clients.set(e,i.refs.slice(i.i)),s.delete(e),i.i=0,i.refs=[]):h.clients.set(e,[t]),n=n.filter((t=>t!==e))}i.length=0};for(;;){if(a.constructor!==zr){const n=Se(u,a.id.client,(()=>qi(e,a.id.client)))-a.id.clock;if(n<0)i.push(a),c(a.id.client,a.id.clock-1),d();else{const r=a.getMissing(t,e);if(null!==r){i.push(a);const t=s.get(r)||{refs:[],i:0};if(t.refs.length!==t.i){a=t.refs[t.i++];continue}c(r,qi(e,r)),d()}else(0===n||n<a.length)&&(a.integrate(t,n),u.set(a.id.client,a.id.clock+a.length))}}if(i.length>0)a=i.pop();else if(null!==o&&o.i<o.refs.length)a=o.refs[o.i++];else{if(o=r(),null===o)break;a=o.refs[o.i++]}}if(h.clients.size>0){const t=new Mi;return Ai(t,h,new Map),gs(t.restEncoder,0),{missing:l,update:t.toUint8Array()}}return null})(t,n,r),h=n.pendingStructs;if(h){for(const[t,s]of h.missing)if(s<qi(n,t)){e=!0;break}if(o){for(const[t,e]of o.missing){const s=h.missing.get(t);(null==s||s>e)&&h.missing.set(t,e)}h.update=fn([h.update,o.update])}}else n.pendingStructs=o;const l=bi(i,t,n);if(n.pendingDs){const e=new xi(Fe(n.pendingDs));Xe(e.restDecoder);const s=bi(e,t,n);n.pendingDs=l&&s?fn([l,s]):l||s}else n.pendingDs=l;if(e){const e=n.pendingStructs.update;n.pendingStructs=null,_i(t.doc,e)}}),s,!1),_i=(t,e,s,i=xi)=>{const n=Fe(e);Ci(n,t,s,new i(n))},Wi=(t,e,s)=>_i(t,e,s,$i),Oi=(t,e,s=new Map)=>{Ai(t,e.store,s),gi(t,(t=>{const e=pi();return t.clients.forEach(((t,s)=>{const i=[];for(let e=0;e<t.length;e++){const s=t[e];if(s.deleted){const n=s.id.clock;let r=s.length;if(e+1<t.length)for(let s=t[e+1];e+1<t.length&&s.deleted;s=t[1+ ++e])r+=s.length;i.push(new ci(n,r))}}i.length>0&&e.clients.set(s,i)})),e})(e.store))},Ei=(t,e)=>((t,e=new Uint8Array([0]),s=new Mi)=>{const i=Ui(e);Oi(s,t,i);const n=[s.toUint8Array()];if(t.store.pendingDs&&n.push(t.store.pendingDs),t.store.pendingStructs&&n.push(wn(t.store.pendingStructs.update,e)),n.length>1){if(s.constructor===Si)return un(n.map(((t,e)=>0===e?t:bn(t))));if(s.constructor===Mi)return fn(n)}return n[0]})(t,e,new Si),Ui=t=>(t=>{const e=new Map,s=Xe(t.restDecoder);for(let i=0;i<s;i++){const s=Xe(t.restDecoder),i=Xe(t.restDecoder);e.set(s,i)}return e})(new ki(Fe(t)));class Ti{constructor(){this.l=[]}}const Ni=()=>new Ti,Ri=(t,e)=>t.l.push(e),Di=(t,e)=>{const s=t.l,i=s.length;t.l=s.filter((t=>e!==t)),i===t.l.length&&console.error("[yjs] Tried to remove event handler that doesn't exist.")},Ii=(t,e,s)=>Js(t.l,[e,s]);class zi{constructor(t,e){this.client=t,this.clock=e}}const ji=(t,e)=>t===e||null!==t&&null!==e&&t.client===e.client&&t.clock===e.clock,Li=(t,e)=>new zi(t,e);class Pi{constructor(t,e){this.ds=t,this.sv=e}}var Ji,Bi;Ji=pi(),Bi=new Map,new Pi(Ji,Bi);const Hi=(t,e)=>void 0===e?!t.deleted:e.sv.has(t.id.client)&&(e.sv.get(t.id.client)||0)>t.id.clock&&!di(e.ds,t.id),Vi=(t,e)=>{const s=Se(t.meta,Vi,Me),i=t.doc.store;s.has(e)||(e.sv.forEach(((e,s)=>{e<qi(i,s)&&Qi(t,Li(s,e))})),ui(t,e.ds,(t=>{})),s.add(e))};class Gi{constructor(){this.clients=new Map,this.pendingStructs=null,this.pendingDs=null}}const Ki=t=>{const e=new Map;return t.clients.forEach(((t,s)=>{const i=t[t.length-1];e.set(s,i.id.clock+i.length)})),e},qi=(t,e)=>{const s=t.clients.get(e);if(void 0===s)return 0;const i=s[s.length-1];return i.id.clock+i.length},Fi=(t,e)=>{let s=t.clients.get(e.id.client);if(void 0===s)s=[],t.clients.set(e.id.client,s);else{const t=s[s.length-1];if(t.id.clock+t.length!==e.id.clock)throw zs()}s.push(e)},Zi=(t,e)=>{let s=0,i=t.length-1,n=t[i],r=n.id.clock;if(r===e)return i;let o=Oe(e/(r+n.length-1)*i);for(;s<=i;){if(n=t[o],r=n.id.clock,r<=e){if(e<r+n.length)return o;s=o+1}else i=o-1;o=Oe((s+i)/2)}throw zs()},Yi=(t,e)=>{const s=t.clients.get(e.client);return s[Zi(s,e.clock)]},Xi=(t,e,s)=>{const i=Zi(e,s),n=e[i];return n.id.clock<s&&n instanceof Rr?(e.splice(i+1,0,Nr(t,n,s-n.id.clock)),i+1):i},Qi=(t,e)=>{const s=t.doc.store.clients.get(e.client);return s[Xi(t,s,e.clock)]},tn=(t,e,s)=>{const i=e.clients.get(s.client),n=Zi(i,s.clock),r=i[n];return s.clock!==r.id.clock+r.length-1&&r.constructor!==pr&&i.splice(n+1,0,Nr(t,r,s.clock-r.id.clock+1)),r},en=(t,e,s,i,n)=>{if(0===i)return;const r=s+i;let o,h=Xi(t,e,s);do{o=e[h++],r<o.id.clock+o.length&&Xi(t,e,r),n(o)}while(h<e.length&&e[h].id.clock<r)};class sn{constructor(t,e,s){this.doc=t,this.deleteSet=new ai,this.beforeState=Ki(t.store),this.afterState=new Map,this.changed=new Map,this.changedParentTypes=new Map,this._mergeStructs=[],this.origin=e,this.meta=new Map,this.local=s,this.subdocsAdded=new Set,this.subdocsRemoved=new Set,this.subdocsLoaded=new Set}}const nn=(t,e)=>!(0===e.deleteSet.clients.size&&!((t,e)=>{for(const[s,i]of t)if(e(i,s))return!0;return!1})(e.afterState,((t,s)=>e.beforeState.get(s)!==t)))&&(fi(e.deleteSet),((t,e)=>{Ai(t,e.doc.store,e.beforeState)})(t,e),gi(t,e.deleteSet),!0),rn=(t,e,s)=>{const i=e._item;(null===i||i.id.clock<(t.beforeState.get(i.id.client)||0)&&!i.deleted)&&Se(t.changed,e,Me).add(s)},on=(t,e)=>{const s=t[e-1],i=t[e];s.deleted===i.deleted&&s.constructor===i.constructor&&s.mergeWith(i)&&(t.splice(e,1),i instanceof Rr&&null!==i.parentSub&&i.parent._map.get(i.parentSub)===i&&i.parent._map.set(i.parentSub,s))},hn=(t,e)=>{if(e<t.length){const s=t[e],i=s.doc,n=i.store,r=s.deleteSet,o=s._mergeStructs;try{fi(r),s.afterState=Ki(s.doc.store),i._transaction=null,i.emit("beforeObserverCalls",[s,i]);const h=[];s.changed.forEach(((t,e)=>h.push((()=>{null!==e._item&&e._item.deleted||e._callObserver(s,t)})))),h.push((()=>{s.changedParentTypes.forEach(((t,e)=>h.push((()=>{null!==e._item&&e._item.deleted||((t=t.filter((t=>null===t.target._item||!t.target._item.deleted))).forEach((t=>{t.currentTarget=e})),t.sort(((t,e)=>t.path.length-e.path.length)),Ii(e._dEH,t,s))})))),h.push((()=>i.emit("afterTransaction",[s,i])))})),Js(h,[])}finally{i.gc&&((t,e,s)=>{for(const[i,n]of t.clients.entries()){const t=e.clients.get(i);for(let i=n.length-1;i>=0;i--){const r=n[i],o=r.clock+r.len;for(let i=Zi(t,r.clock),n=t[i];i<t.length&&n.id.clock<o;n=t[++i]){const n=t[i];if(r.clock+r.len<=n.id.clock)break;n instanceof Rr&&n.deleted&&!n.keep&&s(n)&&n.gc(e,!1)}}}})(r,n,i.gcFilter),((t,e)=>{t.clients.forEach(((t,s)=>{const i=e.clients.get(s);for(let e=t.length-1;e>=0;e--){const s=t[e];for(let t=Te(i.length-1,1+Zi(i,s.clock+s.len-1)),e=i[t];t>0&&e.id.clock>=s.clock;e=i[--t])on(i,t)}}))})(r,n),s.afterState.forEach(((t,e)=>{const i=s.beforeState.get(e)||0;if(i!==t){const t=n.clients.get(e),s=Ne(Zi(t,i),1);for(let e=t.length-1;e>=s;e--)on(t,e)}}));for(let t=0;t<o.length;t++){const{client:e,clock:s}=o[t].id,i=n.clients.get(e),r=Zi(i,s);r+1<i.length&&on(i,r+1),r>0&&on(i,r)}if(s.local||s.afterState.get(i.clientID)===s.beforeState.get(i.clientID)||(((...t)=>{console.log(...ri(t)),oi.forEach((e=>e.print(t)))})(ei,qs,"[yjs] ",Fs,Qs,"Changed the client-id because another client seems to be using it."),i.clientID=yi()),i.emit("afterTransactionCleanup",[s,i]),i._observers.has("update")){const t=new Si;nn(t,s)&&i.emit("update",[t.toUint8Array(),s.origin,i,s])}if(i._observers.has("updateV2")){const t=new Mi;nn(t,s)&&i.emit("updateV2",[t.toUint8Array(),s.origin,i,s])}const{subdocsAdded:h,subdocsLoaded:l,subdocsRemoved:c}=s;(h.size>0||c.size>0||l.size>0)&&(h.forEach((t=>{t.clientID=i.clientID,null==t.collectionid&&(t.collectionid=i.collectionid),i.subdocs.add(t)})),c.forEach((t=>i.subdocs.delete(t))),i.emit("subdocs",[{loaded:l,added:h,removed:c},i,s]),c.forEach((t=>t.destroy()))),t.length<=e+1?(i._transactionCleanups=[],i.emit("afterAllTransactions",[i,t])):hn(t,e+1)}}},ln=(t,e,s=null,i=!0)=>{const n=t._transactionCleanups;let r=!1;null===t._transaction&&(r=!0,t._transaction=new sn(t,s,i),n.push(t._transaction),1===n.length&&t.emit("beforeAllTransactions",[t]),t.emit("beforeTransaction",[t._transaction,t]));try{e(t._transaction)}finally{r&&n[0]===t._transaction&&hn(n,0)}};class cn{constructor(t,e){this.gen=function*(t){const e=Xe(t.restDecoder);for(let s=0;s<e;s++){const e=Xe(t.restDecoder),s=t.readClient();let i=Xe(t.restDecoder);for(let n=0;n<e;n++){const e=t.readInfo();if(10===e){const e=Xe(t.restDecoder);yield new zr(Li(s,i),e),i+=e}else if(0!=(31&e)){const n=0==(192&e),r=new Rr(Li(s,i),null,128==(128&e)?t.readLeftID():null,null,64==(64&e)?t.readRightID():null,n?t.readParentInfo()?t.readString():t.readLeftID():null,n&&32==(32&e)?t.readString():null,Dr(t,e));yield r,i+=r.length}else{const e=t.readLen();yield new pr(Li(s,i),e),i+=e}}}}(t),this.curr=null,this.done=!1,this.filterSkips=e,this.next()}next(){do{this.curr=this.gen.next().value||null}while(this.filterSkips&&null!==this.curr&&this.curr.constructor===zr);return this.curr}}class an{constructor(t){this.currClient=0,this.startClock=0,this.written=0,this.encoder=t,this.clientStructs=[]}}const un=t=>fn(t,$i,Si),dn=(t,e)=>{if(t.constructor===pr){const{client:s,clock:i}=t.id;return new pr(Li(s,i+e),t.length-e)}if(t.constructor===zr){const{client:s,clock:i}=t.id;return new zr(Li(s,i+e),t.length-e)}{const s=t,{client:i,clock:n}=s.id;return new Rr(Li(i,n+e),null,Li(i,n+e-1),null,s.rightOrigin,s.parent,s.parentSub,s.content.splice(e))}},fn=(t,e=xi,s=Mi)=>{if(1===t.length)return t[0];const i=t.map((t=>new e(Fe(t))));let n=i.map((t=>new cn(t,!0))),r=null;const o=new s,h=new an(o);for(;n=n.filter((t=>null!==t.curr)),n.sort(((t,e)=>{if(t.curr.id.client===e.curr.id.client){const s=t.curr.id.clock-e.curr.id.clock;return 0===s?t.curr.constructor===e.curr.constructor?0:t.curr.constructor===zr?1:-1:s}return e.curr.id.client-t.curr.id.client})),0!==n.length;){const t=n[0],e=t.curr.id.client;if(null!==r){let s=t.curr,i=!1;for(;null!==s&&s.id.clock+s.length<=r.struct.id.clock+r.struct.length&&s.id.client>=r.struct.id.client;)s=t.next(),i=!0;if(null===s||s.id.client!==e||i&&s.id.clock>r.struct.id.clock+r.struct.length)continue;if(e!==r.struct.id.client)gn(h,r.struct,r.offset),r={struct:s,offset:0},t.next();else if(r.struct.id.clock+r.struct.length<s.id.clock)if(r.struct.constructor===zr)r.struct.length=s.id.clock+s.length-r.struct.id.clock;else{gn(h,r.struct,r.offset);const t=s.id.clock-r.struct.id.clock-r.struct.length;r={struct:new zr(Li(e,r.struct.id.clock+r.struct.length),t),offset:0}}else{const e=r.struct.id.clock+r.struct.length-s.id.clock;e>0&&(r.struct.constructor===zr?r.struct.length-=e:s=dn(s,e)),r.struct.mergeWith(s)||(gn(h,r.struct,r.offset),r={struct:s,offset:0},t.next())}}else r={struct:t.curr,offset:0},t.next();for(let s=t.curr;null!==s&&s.id.client===e&&s.id.clock===r.struct.id.clock+r.struct.length&&s.constructor!==zr;s=t.next())gn(h,r.struct,r.offset),r={struct:s,offset:0}}null!==r&&(gn(h,r.struct,r.offset),r=null),vn(h);const l=(t=>{const e=new ai;for(let s=0;s<t.length;s++)t[s].clients.forEach(((i,n)=>{if(!e.clients.has(n)){const r=i.slice();for(let e=s+1;e<t.length;e++)Ce(r,t[e].clients.get(n)||[]);e.clients.set(n,r)}}));return fi(e),e})(i.map((t=>vi(t))));return gi(o,l),o.toUint8Array()},wn=(t,e,s=xi,i=Mi)=>{const n=Ui(e),r=new i,o=new an(r),h=new s(Fe(t)),l=new cn(h,!1);for(;l.curr;){const t=l.curr,e=t.id.client,s=n.get(e)||0;if(l.curr.constructor!==zr)if(t.id.clock+t.length>s)for(gn(o,t,Ne(s-t.id.clock,0)),l.next();l.curr&&l.curr.id.client===e;)gn(o,l.curr,0),l.next();else for(;l.curr&&l.curr.id.client===e&&l.curr.id.clock+l.curr.length<=s;)l.next();else l.next()}vn(o);const c=vi(h);return gi(r,c),r.toUint8Array()},pn=t=>{t.written>0&&(t.clientStructs.push({written:t.written,restEncoder:fs(t.encoder.restEncoder)}),t.encoder.restEncoder=ds(),t.written=0)},gn=(t,e,s)=>{t.written>0&&t.currClient!==e.id.client&&pn(t),0===t.written&&(t.currClient=e.id.client,t.encoder.writeClient(e.id.client),gs(t.encoder.restEncoder,e.id.clock+s)),e.write(t.encoder,s),t.written++},vn=t=>{pn(t);const e=t.encoder.restEncoder;gs(e,t.clientStructs.length);for(let s=0;s<t.clientStructs.length;s++){const i=t.clientStructs[s];gs(e,i.written),ys(e,i.restEncoder)}},bn=t=>((t,e,s)=>{const i=new e(Fe(t)),n=new cn(i,!1),r=new s,o=new an(r);for(let t=n.curr;null!==t;t=n.next())gn(o,t,0);vn(o);const h=vi(i);return gi(r,h),r.toUint8Array()})(t,xi,Si);class yn{constructor(t,e){this.target=t,this.currentTarget=t,this.transaction=e,this._changes=null,this._keys=null,this._delta=null}get path(){return mn(this.currentTarget,this.target)}deletes(t){return di(this.transaction.deleteSet,t.id)}get keys(){if(null===this._keys){const t=new Map,e=this.target;this.transaction.changed.get(e).forEach((s=>{if(null!==s){const i=e._map.get(s);let n,r;if(this.adds(i)){let t=i.left;for(;null!==t&&this.adds(t);)t=t.left;if(this.deletes(i)){if(null===t||!this.deletes(t))return;n="delete",r=Ae(t.content.getContent())}else null!==t&&this.deletes(t)?(n="update",r=Ae(t.content.getContent())):(n="add",r=void 0)}else{if(!this.deletes(i))return;n="delete",r=Ae(i.content.getContent())}t.set(s,{action:n,oldValue:r})}})),this._keys=t}return this._keys}get delta(){return this.changes.delta}adds(t){return t.id.clock>=(this.transaction.beforeState.get(t.id.client)||0)}get changes(){let t=this._changes;if(null===t){const e=this.target,s=Me(),i=Me(),n=[];t={added:s,deleted:i,delta:n,keys:this.keys};if(this.transaction.changed.get(e).has(null)){let t=null;const r=()=>{t&&n.push(t)};for(let n=e._start;null!==n;n=n.right)n.deleted?this.deletes(n)&&!this.adds(n)&&(null!==t&&void 0!==t.delete||(r(),t={delete:0}),t.delete+=n.length,i.add(n)):this.adds(n)?(null!==t&&void 0!==t.insert||(r(),t={insert:[]}),t.insert=t.insert.concat(n.content.getContent()),s.add(n)):(null!==t&&void 0!==t.retain||(r(),t={retain:0}),t.retain+=n.length);null!==t&&void 0===t.retain&&r()}this._changes=t}return t}}const mn=(t,e)=>{const s=[];for(;null!==e._item&&e!==t;){if(null!==e._item.parentSub)s.unshift(e._item.parentSub);else{let t=0,i=e._item.parent._start;for(;i!==e._item&&null!==i;)i.deleted||t++,i=i.right;s.unshift(t)}e=e._item.parent}return s};let kn=0;class $n{constructor(t,e){t.marker=!0,this.p=t,this.index=e,this.timestamp=kn++}}const xn=(t,e,s)=>{t.p.marker=!1,t.p=e,e.marker=!0,t.index=s,t.timestamp=kn++},Sn=(t,e)=>{if(null===t._start||0===e||null===t._searchMarker)return null;const s=0===t._searchMarker.length?null:t._searchMarker.reduce(((t,s)=>Ee(e-t.index)<Ee(e-s.index)?t:s));let i=t._start,n=0;for(null!==s&&(i=s.p,n=s.index,(t=>{t.timestamp=kn++})(s));null!==i.right&&n<e;){if(!i.deleted&&i.countable){if(e<n+i.length)break;n+=i.length}i=i.right}for(;null!==i.left&&n>e;)i=i.left,!i.deleted&&i.countable&&(n-=i.length);for(;null!==i.left&&i.left.id.client===i.id.client&&i.left.id.clock+i.left.length===i.id.clock;)i=i.left,!i.deleted&&i.countable&&(n-=i.length);return null!==s&&Ee(s.index-n)<i.parent.length/80?(xn(s,i,n),s):((t,e,s)=>{if(t.length>=80){const i=t.reduce(((t,e)=>t.timestamp<e.timestamp?t:e));return xn(i,e,s),i}{const i=new $n(e,s);return t.push(i),i}})(t._searchMarker,i,n)},Mn=(t,e,s)=>{for(let i=t.length-1;i>=0;i--){const n=t[i];if(s>0){let e=n.p;for(e.marker=!1;e&&(e.deleted||!e.countable);)e=e.left,e&&!e.deleted&&e.countable&&(n.index-=e.length);if(null===e||!0===e.marker){t.splice(i,1);continue}n.p=e,e.marker=!0}(e<n.index||s>0&&e===n.index)&&(n.index=Ne(e,n.index+s))}},An=(t,e,s)=>{const i=t,n=e.changedParentTypes;for(;Se(n,t,(()=>[])).push(s),null!==t._item;)t=t._item.parent;Ii(i._eH,s,e)};class Cn{constructor(){this._item=null,this._map=new Map,this._start=null,this.doc=null,this._length=0,this._eH=Ni(),this._dEH=Ni(),this._searchMarker=null}get parent(){return this._item?this._item.parent:null}_integrate(t,e){this.doc=t,this._item=e}_copy(){throw Is()}clone(){throw Is()}_write(t){}get _first(){let t=this._start;for(;null!==t&&t.deleted;)t=t.right;return t}_callObserver(t,e){!t.local&&this._searchMarker&&(this._searchMarker.length=0)}observe(t){Ri(this._eH,t)}observeDeep(t){Ri(this._dEH,t)}unobserve(t){Di(this._eH,t)}unobserveDeep(t){Di(this._dEH,t)}toJSON(){}}const _n=(t,e,s)=>{e<0&&(e=t._length+e),s<0&&(s=t._length+s);let i=s-e;const n=[];let r=t._start;for(;null!==r&&i>0;){if(r.countable&&!r.deleted){const t=r.content.getContent();if(t.length<=e)e-=t.length;else{for(let s=e;s<t.length&&i>0;s++)n.push(t[s]),i--;e=0}}r=r.right}return n},Wn=t=>{const e=[];let s=t._start;for(;null!==s;){if(s.countable&&!s.deleted){const t=s.content.getContent();for(let s=0;s<t.length;s++)e.push(t[s])}s=s.right}return e},On=(t,e)=>{let s=0,i=t._start;for(;null!==i;){if(i.countable&&!i.deleted){const n=i.content.getContent();for(let i=0;i<n.length;i++)e(n[i],s++,t)}i=i.right}},En=(t,e)=>{const s=[];return On(t,((i,n)=>{s.push(e(i,n,t))})),s},Un=t=>{let e=t._start,s=null,i=0;return{[Symbol.iterator](){return this},next:()=>{if(null===s){for(;null!==e&&e.deleted;)e=e.right;if(null===e)return{done:!0,value:void 0};s=e.content.getContent(),i=0,e=e.right}const t=s[i++];return s.length<=i&&(s=null),{done:!1,value:t}}}},Tn=(t,e)=>{const s=Sn(t,e);let i=t._start;for(null!==s&&(i=s.p,e-=s.index);null!==i;i=i.right)if(!i.deleted&&i.countable){if(e<i.length)return i.content.getContent()[e];e-=i.length}},Nn=(t,e,s,i)=>{let n=s;const r=t.doc,o=r.clientID,h=r.store,l=null===s?e._start:s.right;let c=[];const a=()=>{c.length>0&&(n=new Rr(Li(o,qi(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new xr(c)),n.integrate(t,0),c=[])};i.forEach((s=>{if(null===s)c.push(s);else switch(s.constructor){case Number:case Object:case Boolean:case Array:case String:c.push(s);break;default:switch(a(),s.constructor){case Uint8Array:case ArrayBuffer:n=new Rr(Li(o,qi(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new gr(new Uint8Array(s))),n.integrate(t,0);break;case mi:n=new Rr(Li(o,qi(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new yr(s)),n.integrate(t,0);break;default:if(!(s instanceof Cn))throw new Error("Unexpected content type in insert operation");n=new Rr(Li(o,qi(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new Tr(s)),n.integrate(t,0)}}})),a()},Rn=Ds("Length exceeded!"),Dn=(t,e,s,i)=>{if(s>e._length)throw Rn;if(0===s)return e._searchMarker&&Mn(e._searchMarker,s,i.length),Nn(t,e,null,i);const n=s,r=Sn(e,s);let o=e._start;for(null!==r&&(o=r.p,0===(s-=r.index)&&(o=o.prev,s+=o&&o.countable&&!o.deleted?o.length:0));null!==o;o=o.right)if(!o.deleted&&o.countable){if(s<=o.length){s<o.length&&Qi(t,Li(o.id.client,o.id.clock+s));break}s-=o.length}return e._searchMarker&&Mn(e._searchMarker,n,i.length),Nn(t,e,o,i)},In=(t,e,s,i)=>{if(0===i)return;const n=s,r=i,o=Sn(e,s);let h=e._start;for(null!==o&&(h=o.p,s-=o.index);null!==h&&s>0;h=h.right)!h.deleted&&h.countable&&(s<h.length&&Qi(t,Li(h.id.client,h.id.clock+s)),s-=h.length);for(;i>0&&null!==h;)h.deleted||(i<h.length&&Qi(t,Li(h.id.client,h.id.clock+i)),h.delete(t),i-=h.length),h=h.right;if(i>0)throw Rn;e._searchMarker&&Mn(e._searchMarker,n,-r+i)},zn=(t,e,s)=>{const i=e._map.get(s);void 0!==i&&i.delete(t)},jn=(t,e,s,i)=>{const n=e._map.get(s)||null,r=t.doc,o=r.clientID;let h;if(null==i)h=new xr([i]);else switch(i.constructor){case Number:case Object:case Boolean:case Array:case String:h=new xr([i]);break;case Uint8Array:h=new gr(i);break;case mi:h=new yr(i);break;default:if(!(i instanceof Cn))throw new Error("Unexpected content type");h=new Tr(i)}new Rr(Li(o,qi(r.store,o)),n,n&&n.lastId,null,null,e,s,h).integrate(t,0)},Ln=(t,e)=>{const s=t._map.get(e);return void 0===s||s.deleted?void 0:s.content.getContent()[s.length-1]},Pn=t=>{const e={};return t._map.forEach(((t,s)=>{t.deleted||(e[s]=t.content.getContent()[t.length-1])})),e},Jn=(t,e)=>{const s=t._map.get(e);return void 0!==s&&!s.deleted},Bn=t=>((t,e)=>hi((()=>{let s;do{s=t.next()}while(!s.done&&!e(s.value));return s})))(t.entries(),(t=>!t[1].deleted));class Hn extends yn{constructor(t,e){super(t,e),this._transaction=e}}class Vn extends Cn{constructor(){super(),this._prelimContent=[],this._searchMarker=[]}static from(t){const e=new Vn;return e.push(t),e}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new Vn}clone(){const t=new Vn;return t.insert(0,this.toArray().map((t=>t instanceof Cn?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}_callObserver(t,e){super._callObserver(t,e),An(this,t,new Hn(this,t))}insert(t,e){null!==this.doc?ln(this.doc,(s=>{Dn(s,this,t,e)})):this._prelimContent.splice(t,0,...e)}push(t){null!==this.doc?ln(this.doc,(e=>{((t,e,s)=>{let i=(e._searchMarker||[]).reduce(((t,e)=>e.index>t.index?e:t),{index:0,p:e._start}).p;if(i)for(;i.right;)i=i.right;Nn(t,e,i,s)})(e,this,t)})):this._prelimContent.push(...t)}unshift(t){this.insert(0,t)}delete(t,e=1){null!==this.doc?ln(this.doc,(s=>{In(s,this,t,e)})):this._prelimContent.splice(t,e)}get(t){return Tn(this,t)}toArray(){return Wn(this)}slice(t=0,e=this.length){return _n(this,t,e)}toJSON(){return this.map((t=>t instanceof Cn?t.toJSON():t))}map(t){return En(this,t)}forEach(t){On(this,t)}[Symbol.iterator](){return Un(this)}_write(t){t.writeTypeRef(Ar)}}class Gn extends yn{constructor(t,e,s){super(t,e),this.keysChanged=s}}class Kn extends Cn{constructor(t){super(),this._prelimContent=null,this._prelimContent=void 0===t?new Map:new Map(t)}_integrate(t,e){super._integrate(t,e),this._prelimContent.forEach(((t,e)=>{this.set(e,t)})),this._prelimContent=null}_copy(){return new Kn}clone(){const t=new Kn;return this.forEach(((e,s)=>{t.set(s,e instanceof Cn?e.clone():e)})),t}_callObserver(t,e){An(this,t,new Gn(this,t,e))}toJSON(){const t={};return this._map.forEach(((e,s)=>{if(!e.deleted){const i=e.content.getContent()[e.length-1];t[s]=i instanceof Cn?i.toJSON():i}})),t}get size(){return[...Bn(this._map)].length}keys(){return li(Bn(this._map),(t=>t[0]))}values(){return li(Bn(this._map),(t=>t[1].content.getContent()[t[1].length-1]))}entries(){return li(Bn(this._map),(t=>[t[0],t[1].content.getContent()[t[1].length-1]]))}forEach(t){return this._map.forEach(((e,s)=>{e.deleted||t(e.content.getContent()[e.length-1],s,this)})),{}}[Symbol.iterator](){return this.entries()}delete(t){null!==this.doc?ln(this.doc,(e=>{zn(e,this,t)})):this._prelimContent.delete(t)}set(t,e){return null!==this.doc?ln(this.doc,(s=>{jn(s,this,t,e)})):this._prelimContent.set(t,e),e}get(t){return Ln(this,t)}has(t){return Jn(this,t)}clear(){null!==this.doc?ln(this.doc,(t=>{this.forEach((function(e,s,i){zn(t,i,s)}))})):this._prelimContent.clear()}_write(t){t.writeTypeRef(Cr)}}const qn=(t,e)=>t===e||"object"==typeof t&&"object"==typeof e&&t&&e&&Ps(t,e);class Fn{constructor(t,e,s,i){this.left=t,this.right=e,this.index=s,this.currentAttributes=i}forward(){if(null===this.right&&zs(),this.right.content.constructor===kr)this.right.deleted||Qn(this.currentAttributes,this.right.content);else this.right.deleted||(this.index+=this.right.length);this.left=this.right,this.right=this.right.right}}const Zn=(t,e,s)=>{for(;null!==e.right&&s>0;){if(e.right.content.constructor===kr)e.right.deleted||Qn(e.currentAttributes,e.right.content);else e.right.deleted||(s<e.right.length&&Qi(t,Li(e.right.id.client,e.right.id.clock+s)),e.index+=e.right.length,s-=e.right.length);e.left=e.right,e.right=e.right.right}return e},Yn=(t,e,s)=>{const i=new Map,n=Sn(e,s);if(n){const e=new Fn(n.p.left,n.p,n.index,i);return Zn(t,e,s-n.index)}{const n=new Fn(null,e._start,0,i);return Zn(t,n,s)}},Xn=(t,e,s,i)=>{for(;null!==s.right&&(!0===s.right.deleted||s.right.content.constructor===kr&&qn(i.get(s.right.content.key),s.right.content.value));)s.right.deleted||i.delete(s.right.content.key),s.forward();const n=t.doc,r=n.clientID;i.forEach(((i,o)=>{const h=s.left,l=s.right,c=new Rr(Li(r,qi(n.store,r)),h,h&&h.lastId,l,l&&l.id,e,null,new kr(o,i));c.integrate(t,0),s.right=c,s.forward()}))},Qn=(t,e)=>{const{key:s,value:i}=e;null===i?t.delete(s):t.set(s,i)},tr=(t,e)=>{for(;null!==t.right&&(t.right.deleted||t.right.content.constructor===kr&&qn(e[t.right.content.key]||null,t.right.content.value));)t.forward()},er=(t,e,s,i)=>{const n=t.doc,r=n.clientID,o=new Map;for(const h in i){const l=i[h],c=s.currentAttributes.get(h)||null;if(!qn(c,l)){o.set(h,c);const{left:i,right:a}=s;s.right=new Rr(Li(r,qi(n.store,r)),i,i&&i.lastId,a,a&&a.id,e,null,new kr(h,l)),s.right.integrate(t,0),s.forward()}}return o},sr=(t,e,s,i,n)=>{s.currentAttributes.forEach(((t,e)=>{void 0===n[e]&&(n[e]=null)}));const r=t.doc,o=r.clientID;tr(s,n);const h=er(t,e,s,n),l=i.constructor===String?new Sr(i):i instanceof Cn?new Tr(i):new mr(i);let{left:c,right:a,index:u}=s;e._searchMarker&&Mn(e._searchMarker,s.index,l.getLength()),a=new Rr(Li(o,qi(r.store,o)),c,c&&c.lastId,a,a&&a.id,e,null,l),a.integrate(t,0),s.right=a,s.index=u,s.forward(),Xn(t,e,s,h)},ir=(t,e,s,i,n)=>{const r=t.doc,o=r.clientID;tr(s,n);const h=er(t,e,s,n);t:for(;null!==s.right&&(i>0||h.size>0&&(s.right.deleted||s.right.content.constructor===kr));){if(!s.right.deleted)switch(s.right.content.constructor){case kr:{const{key:e,value:r}=s.right.content,o=n[e];if(void 0!==o){if(qn(o,r))h.delete(e);else{if(0===i)break t;h.set(e,r)}s.right.delete(t)}else s.currentAttributes.set(e,r);break}default:i<s.right.length&&Qi(t,Li(s.right.id.client,s.right.id.clock+i)),i-=s.right.length}s.forward()}if(i>0){let n="";for(;i>0;i--)n+="\n";s.right=new Rr(Li(o,qi(r.store,o)),s.left,s.left&&s.left.lastId,s.right,s.right&&s.right.id,e,null,new Sr(n)),s.right.integrate(t,0),s.forward()}Xn(t,e,s,h)},nr=(t,e,s,i,n)=>{let r=s;const o=xe(n);for(;r&&(!r.countable||r.deleted);)r.deleted||r.content.constructor!==kr||Qn(o,r.content),r=r.right;let h=0,l=!1;for(;e!==r;){if(s===e&&(l=!0),!e.deleted){const s=e.content;switch(s.constructor){case kr:{const{key:r,value:c}=s;(o.get(r)||null)===c&&(i.get(r)||null)!==c||(e.delete(t),h++,l||(n.get(r)||null)!==c||(i.get(r)||null)===c||n.delete(r));break}}}e=e.right}return h},rr=(t,e,s)=>{const i=s,n=xe(e.currentAttributes),r=e.right;for(;s>0&&null!==e.right;){if(!1===e.right.deleted)switch(e.right.content.constructor){case Tr:case mr:case Sr:s<e.right.length&&Qi(t,Li(e.right.id.client,e.right.id.clock+s)),s-=e.right.length,e.right.delete(t)}e.forward()}r&&nr(t,r,e.right,n,e.currentAttributes);const o=(e.left||e.right).parent;return o._searchMarker&&Mn(o._searchMarker,e.index,-i+s),e};class or extends yn{constructor(t,e,s){super(t,e),this.childListChanged=!1,this.keysChanged=new Set,s.forEach((t=>{null===t?this.childListChanged=!0:this.keysChanged.add(t)}))}get changes(){if(null===this._changes){const t={keys:this.keys,delta:this.delta,added:new Set,deleted:new Set};this._changes=t}return this._changes}get delta(){if(null===this._delta){const t=this.target.doc,e=[];ln(t,(t=>{const s=new Map,i=new Map;let n=this.target._start,r=null;const o={};let h="",l=0,c=0;const a=()=>{if(null!==r){let t;switch(r){case"delete":t={delete:c},c=0;break;case"insert":t={insert:h},s.size>0&&(t.attributes={},s.forEach(((e,s)=>{null!==e&&(t.attributes[s]=e)}))),h="";break;case"retain":if(t={retain:l},Object.keys(o).length>0){t.attributes={};for(const e in o)t.attributes[e]=o[e]}l=0}e.push(t),r=null}};for(;null!==n;){switch(n.content.constructor){case Tr:case mr:this.adds(n)?this.deletes(n)||(a(),r="insert",h=n.content.getContent()[0],a()):this.deletes(n)?("delete"!==r&&(a(),r="delete"),c+=1):n.deleted||("retain"!==r&&(a(),r="retain"),l+=1);break;case Sr:this.adds(n)?this.deletes(n)||("insert"!==r&&(a(),r="insert"),h+=n.content.str):this.deletes(n)?("delete"!==r&&(a(),r="delete"),c+=n.length):n.deleted||("retain"!==r&&(a(),r="retain"),l+=n.length);break;case kr:{const{key:e,value:h}=n.content;if(this.adds(n)){if(!this.deletes(n)){const l=s.get(e)||null;qn(l,h)?null!==h&&n.delete(t):("retain"===r&&a(),qn(h,i.get(e)||null)?delete o[e]:o[e]=h)}}else if(this.deletes(n)){i.set(e,h);const t=s.get(e)||null;qn(t,h)||("retain"===r&&a(),o[e]=t)}else if(!n.deleted){i.set(e,h);const s=o[e];void 0!==s&&(qn(s,h)?null!==s&&n.delete(t):("retain"===r&&a(),null===h?delete o[e]:o[e]=h))}n.deleted||("insert"===r&&a(),Qn(s,n.content));break}}n=n.right}for(a();e.length>0;){const t=e[e.length-1];if(void 0===t.retain||void 0!==t.attributes)break;e.pop()}})),this._delta=e}return this._delta}}class hr extends Cn{constructor(t){super(),this._pending=void 0!==t?[()=>this.insert(0,t)]:[],this._searchMarker=[]}get length(){return this._length}_integrate(t,e){super._integrate(t,e);try{this._pending.forEach((t=>t()))}catch(t){console.error(t)}this._pending=null}_copy(){return new hr}clone(){const t=new hr;return t.applyDelta(this.toDelta()),t}_callObserver(t,e){super._callObserver(t,e);const s=new or(this,t,e),i=t.doc;if(An(this,t,s),!t.local){let e=!1;for(const[s,n]of t.afterState.entries()){const r=t.beforeState.get(s)||0;if(n!==r&&(en(t,i.store.clients.get(s),r,n,(t=>{t.deleted||t.content.constructor!==kr||(e=!0)})),e))break}e||ui(t,t.deleteSet,(t=>{t instanceof pr||e||t.parent===this&&t.content.constructor===kr&&(e=!0)})),ln(i,(t=>{e?(t=>{let e=0;ln(t.doc,(s=>{let i=t._start,n=t._start,r=$e();const o=xe(r);for(;n;)!1===n.deleted&&(n.content.constructor===kr?Qn(o,n.content):(e+=nr(s,i,n,r,o),r=xe(o),i=n)),n=n.right}))})(this):ui(t,t.deleteSet,(e=>{e instanceof pr||e.parent===this&&((t,e)=>{for(;e&&e.right&&(e.right.deleted||!e.right.countable);)e=e.right;const s=new Set;for(;e&&(e.deleted||!e.countable);){if(!e.deleted&&e.content.constructor===kr){const i=e.content.key;s.has(i)?e.delete(t):s.add(i)}e=e.left}})(t,e)}))}))}}toString(){let t="",e=this._start;for(;null!==e;)!e.deleted&&e.countable&&e.content.constructor===Sr&&(t+=e.content.str),e=e.right;return t}toJSON(){return this.toString()}applyDelta(t,{sanitize:e=!0}={}){null!==this.doc?ln(this.doc,(s=>{const i=new Fn(null,this._start,0,new Map);for(let n=0;n<t.length;n++){const r=t[n];if(void 0!==r.insert){const o=e||"string"!=typeof r.insert||n!==t.length-1||null!==i.right||"\n"!==r.insert.slice(-1)?r.insert:r.insert.slice(0,-1);("string"!=typeof o||o.length>0)&&sr(s,this,i,o,r.attributes||{})}else void 0!==r.retain?ir(s,this,i,r.retain,r.attributes||{}):void 0!==r.delete&&rr(s,i,r.delete)}})):this._pending.push((()=>this.applyDelta(t)))}toDelta(t,e,s){const i=[],n=new Map,r=this.doc;let o="",h=this._start;function l(){if(o.length>0){const t={};let e=!1;n.forEach(((s,i)=>{e=!0,t[i]=s}));const s={insert:o};e&&(s.attributes=t),i.push(s),o=""}}return ln(r,(r=>{for(t&&Vi(r,t),e&&Vi(r,e);null!==h;){if(Hi(h,t)||void 0!==e&&Hi(h,e))switch(h.content.constructor){case Sr:{const i=n.get("ychange");void 0===t||Hi(h,t)?void 0===e||Hi(h,e)?void 0!==i&&(l(),n.delete("ychange")):void 0!==i&&i.user===h.id.client&&"added"===i.state||(l(),n.set("ychange",s?s("added",h.id):{type:"added"})):void 0!==i&&i.user===h.id.client&&"removed"===i.state||(l(),n.set("ychange",s?s("removed",h.id):{type:"removed"})),o+=h.content.str;break}case Tr:case mr:{l();const t={insert:h.content.getContent()[0]};if(n.size>0){const e={};t.attributes=e,n.forEach(((t,s)=>{e[s]=t}))}i.push(t);break}case kr:Hi(h,t)&&(l(),Qn(n,h.content))}h=h.right}l()}),Vi),i}insert(t,e,s){if(e.length<=0)return;const i=this.doc;null!==i?ln(i,(i=>{const n=Yn(i,this,t);s||(s={},n.currentAttributes.forEach(((t,e)=>{s[e]=t}))),sr(i,this,n,e,s)})):this._pending.push((()=>this.insert(t,e,s)))}insertEmbed(t,e,s={}){const i=this.doc;null!==i?ln(i,(i=>{const n=Yn(i,this,t);sr(i,this,n,e,s)})):this._pending.push((()=>this.insertEmbed(t,e,s)))}delete(t,e){if(0===e)return;const s=this.doc;null!==s?ln(s,(s=>{rr(s,Yn(s,this,t),e)})):this._pending.push((()=>this.delete(t,e)))}format(t,e,s){if(0===e)return;const i=this.doc;null!==i?ln(i,(i=>{const n=Yn(i,this,t);null!==n.right&&ir(i,this,n,e,s)})):this._pending.push((()=>this.format(t,e,s)))}removeAttribute(t){null!==this.doc?ln(this.doc,(e=>{zn(e,this,t)})):this._pending.push((()=>this.removeAttribute(t)))}setAttribute(t,e){null!==this.doc?ln(this.doc,(s=>{jn(s,this,t,e)})):this._pending.push((()=>this.setAttribute(t,e)))}getAttribute(t){return Ln(this,t)}getAttributes(t){return Pn(this)}_write(t){t.writeTypeRef(_r)}}class lr{constructor(t,e=(()=>!0)){this._filter=e,this._root=t,this._currentNode=t._start,this._firstCall=!0}[Symbol.iterator](){return this}next(){let t=this._currentNode,e=t&&t.content&&t.content.type;if(null!==t&&(!this._firstCall||t.deleted||!this._filter(e)))do{if(e=t.content.type,t.deleted||e.constructor!==ar&&e.constructor!==cr||null===e._start)for(;null!==t;){if(null!==t.right){t=t.right;break}t=t.parent===this._root?null:t.parent._item}else t=e._start}while(null!==t&&(t.deleted||!this._filter(t.content.type)));return this._firstCall=!1,null===t?{value:void 0,done:!0}:(this._currentNode=t,{value:t.content.type,done:!1})}}class cr extends Cn{constructor(){super(),this._prelimContent=[]}get firstChild(){const t=this._first;return t?t.content.getContent()[0]:null}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new cr}clone(){const t=new cr;return t.insert(0,this.toArray().map((t=>t instanceof Cn?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}createTreeWalker(t){return new lr(this,t)}querySelector(t){t=t.toUpperCase();const e=new lr(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)).next();return e.done?null:e.value}querySelectorAll(t){return t=t.toUpperCase(),Array.from(new lr(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)))}_callObserver(t,e){An(this,t,new ur(this,e,t))}toString(){return En(this,(t=>t.toString())).join("")}toJSON(){return this.toString()}toDOM(t=document,e={},s){const i=t.createDocumentFragment();return void 0!==s&&s._createAssociation(i,this),On(this,(n=>{i.insertBefore(n.toDOM(t,e,s),null)})),i}insert(t,e){null!==this.doc?ln(this.doc,(s=>{Dn(s,this,t,e)})):this._prelimContent.splice(t,0,...e)}insertAfter(t,e){if(null!==this.doc)ln(this.doc,(s=>{const i=t&&t instanceof Cn?t._item:t;Nn(s,this,i,e)}));else{const s=this._prelimContent,i=null===t?0:s.findIndex((e=>e===t))+1;if(0===i&&null!==t)throw Ds("Reference item not found");s.splice(i,0,...e)}}delete(t,e=1){null!==this.doc?ln(this.doc,(s=>{In(s,this,t,e)})):this._prelimContent.splice(t,e)}toArray(){return Wn(this)}push(t){this.insert(this.length,t)}unshift(t){this.insert(0,t)}get(t){return Tn(this,t)}slice(t=0,e=this.length){return _n(this,t,e)}forEach(t){On(this,t)}_write(t){t.writeTypeRef(Or)}}class ar extends cr{constructor(t="UNDEFINED"){super(),this.nodeName=t,this._prelimAttrs=new Map}get nextSibling(){const t=this._item?this._item.next:null;return t?t.content.type:null}get prevSibling(){const t=this._item?this._item.prev:null;return t?t.content.type:null}_integrate(t,e){super._integrate(t,e),this._prelimAttrs.forEach(((t,e)=>{this.setAttribute(e,t)})),this._prelimAttrs=null}_copy(){return new ar(this.nodeName)}clone(){const t=new ar(this.nodeName),e=this.getAttributes();for(const s in e)t.setAttribute(s,e[s]);return t.insert(0,this.toArray().map((t=>t instanceof Cn?t.clone():t))),t}toString(){const t=this.getAttributes(),e=[],s=[];for(const e in t)s.push(e);s.sort();const i=s.length;for(let n=0;n<i;n++){const i=s[n];e.push(i+'="'+t[i]+'"')}const n=this.nodeName.toLocaleLowerCase();return`<${n}${e.length>0?" "+e.join(" "):""}>${super.toString()}</${n}>`}removeAttribute(t){null!==this.doc?ln(this.doc,(e=>{zn(e,this,t)})):this._prelimAttrs.delete(t)}setAttribute(t,e){null!==this.doc?ln(this.doc,(s=>{jn(s,this,t,e)})):this._prelimAttrs.set(t,e)}getAttribute(t){return Ln(this,t)}hasAttribute(t){return Jn(this,t)}getAttributes(t){return Pn(this)}toDOM(t=document,e={},s){const i=t.createElement(this.nodeName),n=this.getAttributes();for(const t in n)i.setAttribute(t,n[t]);return On(this,(n=>{i.appendChild(n.toDOM(t,e,s))})),void 0!==s&&s._createAssociation(i,this),i}_write(t){t.writeTypeRef(Wr),t.writeKey(this.nodeName)}}class ur extends yn{constructor(t,e,s){super(t,s),this.childListChanged=!1,this.attributesChanged=new Set,e.forEach((t=>{null===t?this.childListChanged=!0:this.attributesChanged.add(t)}))}}class dr extends Kn{constructor(t){super(),this.hookName=t}_copy(){return new dr(this.hookName)}clone(){const t=new dr(this.hookName);return this.forEach(((e,s)=>{t.set(s,e)})),t}toDOM(t=document,e={},s){const i=e[this.hookName];let n;return n=void 0!==i?i.createDom(this):document.createElement(this.hookName),n.setAttribute("data-yjs-hook",this.hookName),void 0!==s&&s._createAssociation(n,this),n}_write(t){t.writeTypeRef(Er),t.writeKey(this.hookName)}}class fr extends hr{get nextSibling(){const t=this._item?this._item.next:null;return t?t.content.type:null}get prevSibling(){const t=this._item?this._item.prev:null;return t?t.content.type:null}_copy(){return new fr}clone(){const t=new fr;return t.applyDelta(this.toDelta()),t}toDOM(t=document,e,s){const i=t.createTextNode(this.toString());return void 0!==s&&s._createAssociation(i,this),i}toString(){return this.toDelta().map((t=>{const e=[];for(const s in t.attributes){const i=[];for(const e in t.attributes[s])i.push({key:e,value:t.attributes[s][e]});i.sort(((t,e)=>t.key<e.key?-1:1)),e.push({nodeName:s,attrs:i})}e.sort(((t,e)=>t.nodeName<e.nodeName?-1:1));let s="";for(let t=0;t<e.length;t++){const i=e[t];s+=`<${i.nodeName}`;for(let t=0;t<i.attrs.length;t++){const e=i.attrs[t];s+=` ${e.key}="${e.value}"`}s+=">"}s+=t.insert;for(let t=e.length-1;t>=0;t--)s+=`</${e[t].nodeName}>`;return s})).join("")}toJSON(){return this.toString()}_write(t){t.writeTypeRef(Ur)}}class wr{constructor(t,e){this.id=t,this.length=e}get deleted(){throw Is()}mergeWith(t){return!1}write(t,e,s){throw Is()}integrate(t,e){throw Is()}}class pr extends wr{get deleted(){return!0}delete(){}mergeWith(t){return this.constructor===t.constructor&&(this.length+=t.length,!0)}integrate(t,e){e>0&&(this.id.clock+=e,this.length-=e),Fi(t.doc.store,this)}write(t,e){t.writeInfo(0),t.writeLen(this.length-e)}getMissing(t,e){return null}}class gr{constructor(t){this.content=t}getLength(){return 1}getContent(){return[this.content]}isCountable(){return!0}copy(){return new gr(this.content)}splice(t){throw Is()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeBuf(this.content)}getRef(){return 3}}class vr{constructor(t){this.len=t}getLength(){return this.len}getContent(){return[]}isCountable(){return!1}copy(){return new vr(this.len)}splice(t){const e=new vr(this.len-t);return this.len=t,e}mergeWith(t){return this.len+=t.len,!0}integrate(t,e){wi(t.deleteSet,e.id.client,e.id.clock,this.len),e.markDeleted()}delete(t){}gc(t){}write(t,e){t.writeLen(this.len-e)}getRef(){return 1}}const br=(t,e)=>new mi({guid:t,...e,shouldLoad:e.shouldLoad||e.autoLoad||!1});class yr{constructor(t){t._item&&console.error("This document was already integrated as a sub-document. You should create a second instance instead with the same guid."),this.doc=t;const e={};this.opts=e,t.gc||(e.gc=!1),t.autoLoad&&(e.autoLoad=!0),null!==t.meta&&(e.meta=t.meta)}getLength(){return 1}getContent(){return[this.doc]}isCountable(){return!0}copy(){return new yr(br(this.doc.guid,this.opts))}splice(t){throw Is()}mergeWith(t){return!1}integrate(t,e){this.doc._item=e,t.subdocsAdded.add(this.doc),this.doc.shouldLoad&&t.subdocsLoaded.add(this.doc)}delete(t){t.subdocsAdded.has(this.doc)?t.subdocsAdded.delete(this.doc):t.subdocsRemoved.add(this.doc)}gc(t){}write(t,e){t.writeString(this.doc.guid),t.writeAny(this.opts)}getRef(){return 9}}class mr{constructor(t){this.embed=t}getLength(){return 1}getContent(){return[this.embed]}isCountable(){return!0}copy(){return new mr(this.embed)}splice(t){throw Is()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeJSON(this.embed)}getRef(){return 5}}class kr{constructor(t,e){this.key=t,this.value=e}getLength(){return 1}getContent(){return[]}isCountable(){return!1}copy(){return new kr(this.key,this.value)}splice(t){throw Is()}mergeWith(t){return!1}integrate(t,e){e.parent._searchMarker=null}delete(t){}gc(t){}write(t,e){t.writeKey(this.key),t.writeJSON(this.value)}getRef(){return 6}}class $r{constructor(t){this.arr=t}getLength(){return this.arr.length}getContent(){return this.arr}isCountable(){return!0}copy(){return new $r(this.arr)}splice(t){const e=new $r(this.arr.slice(t));return this.arr=this.arr.slice(0,t),e}mergeWith(t){return this.arr=this.arr.concat(t.arr),!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){const s=this.arr.length;t.writeLen(s-e);for(let i=e;i<s;i++){const e=this.arr[i];t.writeString(void 0===e?"undefined":JSON.stringify(e))}}getRef(){return 2}}class xr{constructor(t){this.arr=t}getLength(){return this.arr.length}getContent(){return this.arr}isCountable(){return!0}copy(){return new xr(this.arr)}splice(t){const e=new xr(this.arr.slice(t));return this.arr=this.arr.slice(0,t),e}mergeWith(t){return this.arr=this.arr.concat(t.arr),!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){const s=this.arr.length;t.writeLen(s-e);for(let i=e;i<s;i++){const e=this.arr[i];t.writeAny(e)}}getRef(){return 8}}class Sr{constructor(t){this.str=t}getLength(){return this.str.length}getContent(){return this.str.split("")}isCountable(){return!0}copy(){return new Sr(this.str)}splice(t){const e=new Sr(this.str.slice(t));this.str=this.str.slice(0,t);const s=this.str.charCodeAt(t-1);return s>=55296&&s<=56319&&(this.str=this.str.slice(0,t-1)+"�",e.str="�"+e.str.slice(1)),e}mergeWith(t){return this.str+=t.str,!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeString(0===e?this.str:this.str.slice(e))}getRef(){return 4}}const Mr=[t=>new Vn,t=>new Kn,t=>new hr,t=>new ar(t.readKey()),t=>new cr,t=>new dr(t.readKey()),t=>new fr],Ar=0,Cr=1,_r=2,Wr=3,Or=4,Er=5,Ur=6;class Tr{constructor(t){this.type=t}getLength(){return 1}getContent(){return[this.type]}isCountable(){return!0}copy(){return new Tr(this.type._copy())}splice(t){throw Is()}mergeWith(t){return!1}integrate(t,e){this.type._integrate(t.doc,e)}delete(t){let e=this.type._start;for(;null!==e;)e.deleted?t._mergeStructs.push(e):e.delete(t),e=e.right;this.type._map.forEach((e=>{e.deleted?t._mergeStructs.push(e):e.delete(t)})),t.changed.delete(this.type)}gc(t){let e=this.type._start;for(;null!==e;)e.gc(t,!0),e=e.right;this.type._start=null,this.type._map.forEach((e=>{for(;null!==e;)e.gc(t,!0),e=e.left})),this.type._map=new Map}write(t,e){this.type._write(t)}getRef(){return 7}}const Nr=(t,e,s)=>{const{client:i,clock:n}=e.id,r=new Rr(Li(i,n+s),e,Li(i,n+s-1),e.right,e.rightOrigin,e.parent,e.parentSub,e.content.splice(s));return e.deleted&&r.markDeleted(),e.keep&&(r.keep=!0),null!==e.redone&&(r.redone=Li(e.redone.client,e.redone.clock+s)),e.right=r,null!==r.right&&(r.right.left=r),t._mergeStructs.push(r),null!==r.parentSub&&null===r.right&&r.parent._map.set(r.parentSub,r),e.length=s,r};class Rr extends wr{constructor(t,e,s,i,n,r,o,h){super(t,h.getLength()),this.origin=s,this.left=e,this.right=i,this.rightOrigin=n,this.parent=r,this.parentSub=o,this.redone=null,this.content=h,this.info=this.content.isCountable()?2:0}set marker(t){(8&this.info)>0!==t&&(this.info^=8)}get marker(){return(8&this.info)>0}get keep(){return(1&this.info)>0}set keep(t){this.keep!==t&&(this.info^=1)}get countable(){return(2&this.info)>0}get deleted(){return(4&this.info)>0}set deleted(t){this.deleted!==t&&(this.info^=4)}markDeleted(){this.info|=4}getMissing(t,e){if(this.origin&&this.origin.client!==this.id.client&&this.origin.clock>=qi(e,this.origin.client))return this.origin.client;if(this.rightOrigin&&this.rightOrigin.client!==this.id.client&&this.rightOrigin.clock>=qi(e,this.rightOrigin.client))return this.rightOrigin.client;if(this.parent&&this.parent.constructor===zi&&this.id.client!==this.parent.client&&this.parent.clock>=qi(e,this.parent.client))return this.parent.client;if(this.origin&&(this.left=tn(t,e,this.origin),this.origin=this.left.lastId),this.rightOrigin&&(this.right=Qi(t,this.rightOrigin),this.rightOrigin=this.right.id),(this.left&&this.left.constructor===pr||this.right&&this.right.constructor===pr)&&(this.parent=null),this.parent){if(this.parent.constructor===zi){const t=Yi(e,this.parent);t.constructor===pr?this.parent=null:this.parent=t.content.type}}else this.left&&this.left.constructor===Rr&&(this.parent=this.left.parent,this.parentSub=this.left.parentSub),this.right&&this.right.constructor===Rr&&(this.parent=this.right.parent,this.parentSub=this.right.parentSub);return null}integrate(t,e){if(e>0&&(this.id.clock+=e,this.left=tn(t,t.doc.store,Li(this.id.client,this.id.clock-1)),this.origin=this.left.lastId,this.content=this.content.splice(e),this.length-=e),this.parent){if(!this.left&&(!this.right||null!==this.right.left)||this.left&&this.left.right!==this.right){let e,s=this.left;if(null!==s)e=s.right;else if(null!==this.parentSub)for(e=this.parent._map.get(this.parentSub)||null;null!==e&&null!==e.left;)e=e.left;else e=this.parent._start;const i=new Set,n=new Set;for(;null!==e&&e!==this.right;){if(n.add(e),i.add(e),ji(this.origin,e.origin)){if(e.id.client<this.id.client)s=e,i.clear();else if(ji(this.rightOrigin,e.rightOrigin))break}else{if(null===e.origin||!n.has(Yi(t.doc.store,e.origin)))break;i.has(Yi(t.doc.store,e.origin))||(s=e,i.clear())}e=e.right}this.left=s}if(null!==this.left){const t=this.left.right;this.right=t,this.left.right=this}else{let t;if(null!==this.parentSub)for(t=this.parent._map.get(this.parentSub)||null;null!==t&&null!==t.left;)t=t.left;else t=this.parent._start,this.parent._start=this;this.right=t}null!==this.right?this.right.left=this:null!==this.parentSub&&(this.parent._map.set(this.parentSub,this),null!==this.left&&this.left.delete(t)),null===this.parentSub&&this.countable&&!this.deleted&&(this.parent._length+=this.length),Fi(t.doc.store,this),this.content.integrate(t,this),rn(t,this.parent,this.parentSub),(null!==this.parent._item&&this.parent._item.deleted||null!==this.parentSub&&null!==this.right)&&this.delete(t)}else new pr(this.id,this.length).integrate(t,0)}get next(){let t=this.right;for(;null!==t&&t.deleted;)t=t.right;return t}get prev(){let t=this.left;for(;null!==t&&t.deleted;)t=t.left;return t}get lastId(){return 1===this.length?this.id:Li(this.id.client,this.id.clock+this.length-1)}mergeWith(t){if(this.constructor===t.constructor&&ji(t.origin,this.lastId)&&this.right===t&&ji(this.rightOrigin,t.rightOrigin)&&this.id.client===t.id.client&&this.id.clock+this.length===t.id.clock&&this.deleted===t.deleted&&null===this.redone&&null===t.redone&&this.content.constructor===t.content.constructor&&this.content.mergeWith(t.content)){const e=this.parent._searchMarker;return e&&e.forEach((e=>{e.p===t&&(e.p=this,!this.deleted&&this.countable&&(e.index-=this.length))})),t.keep&&(this.keep=!0),this.right=t.right,null!==this.right&&(this.right.left=this),this.length+=t.length,!0}return!1}delete(t){if(!this.deleted){const e=this.parent;this.countable&&null===this.parentSub&&(e._length-=this.length),this.markDeleted(),wi(t.deleteSet,this.id.client,this.id.clock,this.length),rn(t,e,this.parentSub),this.content.delete(t)}}gc(t,e){if(!this.deleted)throw zs();this.content.gc(t),e?((t,e,s)=>{const i=t.clients.get(e.id.client);i[Zi(i,e.id.clock)]=s})(t,this,new pr(this.id,this.length)):this.content=new vr(this.length)}write(t,e){const s=e>0?Li(this.id.client,this.id.clock+e-1):this.origin,i=this.rightOrigin,n=this.parentSub,r=31&this.content.getRef()|(null===s?0:128)|(null===i?0:64)|(null===n?0:32);if(t.writeInfo(r),null!==s&&t.writeLeftID(s),null!==i&&t.writeRightID(i),null===s&&null===i){const e=this.parent;if(void 0!==e._item){const s=e._item;if(null===s){const s=(t=>{for(const[e,s]of t.doc.share.entries())if(s===t)return e;throw zs()})(e);t.writeParentInfo(!0),t.writeString(s)}else t.writeParentInfo(!1),t.writeLeftID(s.id)}else e.constructor===String?(t.writeParentInfo(!0),t.writeString(e)):e.constructor===zi?(t.writeParentInfo(!1),t.writeLeftID(e)):zs();null!==n&&t.writeString(n)}this.content.write(t,e)}}const Dr=(t,e)=>Ir[31&e](t),Ir=[()=>{zs()},t=>new vr(t.readLen()),t=>{const e=t.readLen(),s=[];for(let i=0;i<e;i++){const e=t.readString();"undefined"===e?s.push(void 0):s.push(JSON.parse(e))}return new $r(s)},t=>new gr(t.readBuf()),t=>new Sr(t.readString()),t=>new mr(t.readJSON()),t=>new kr(t.readKey(),t.readJSON()),t=>new Tr(Mr[t.readTypeRef()](t)),t=>{const e=t.readLen(),s=[];for(let i=0;i<e;i++)s.push(t.readAny());return new xr(s)},t=>new yr(br(t.readString(),t.readAny())),()=>{zs()}];class zr extends wr{get deleted(){return!0}delete(){}mergeWith(t){return this.constructor===t.constructor&&(this.length+=t.length,!0)}integrate(t,e){zs()}write(t,e){t.writeInfo(10),gs(t.restEncoder,this.length-e)}getMissing(t,e){return null}}const jr="undefined"!=typeof window?window:"undefined"!=typeof global?global:{};async function Lr(t,e,s){return t.pipeTo(new WritableStream({write:e}),{signal:s})}var Pr,Jr,Br,Hr;!0===jr["g"]&&console.error("Yjs was already imported. This breaks constructor checks and will lead to isssues!"),jr["g"]=!0;class Vr extends EventTarget{constructor(){super(),Pr.add(this),this.callouts=new Set,Jr.set(this,void 0),this.doc=new mi;const t=new TransformStream;i(this,Jr,t.writable.getWriter(),"f"),Lr(t.readable,(t=>s(this,Pr,"m",Br).call(this,t)))}get board(){return this.doc.getMap("board")}initialize_board(){this.doc.transact((()=>{this.board.set("width",30),this.board.set("height",30),this.board.set("bg",null),this.board.set("tokens",new Kn([])),this.board.set("order",new Vn)}))}async set_bg(t){const e=t?await s(this,Pr,"m",Hr).call(this,t):null;this.apply({type:"bg",url:e})}async add_token(t,e){console.log("ADDING TOKEN");const i={id:crypto.randomUUID(),url:await s(this,Pr,"m",Hr).call(this,t),...e};this.apply({type:"token-added",...i})}set_dim(t){this.apply({type:"grid-resized",dim:t})}async apply(t){await s(this,Jr,"f").write(t)}}Jr=new WeakMap,Pr=new WeakSet,Br=function(t){console.log("handling event",t),this.doc.transact((()=>{switch(t.type){case"token-manipulated":for(let e of t.tokens){let t=this.board.get("tokens").get(e.id);if(void 0===t)return void console.error("Update received for nonexistant token",e.id);t.set("dim",e.dim),t.set("r",e.r),t.set("loc",e.loc)}break;case"token-added":let e={id:t.id,dim:t.dim,loc:t.loc,url:t.url,r:0};console.log(e),this.board.get("tokens").set(t.id,function(t){let e=new Kn;for(let[s,i]of Object.entries(t))e.set(s,i);return e}(e)),this.board.get("order").push([t.id]);break;case"grid-resized":this.board.set("width",t.dim[0]),this.board.set("height",t.dim[1]);break;case"token-removed":for(let e of t.ids)this.board.get("tokens").delete(e);let s=[];this.board.get("order").forEach(((e,i)=>t.ids.includes(e)&&s.push(i))),s.sort().reverse().forEach((t=>{this.board.get("order").delete(t)}));break;case"state-sync":case"token-reorder":break;case"bg":this.board.set("bg",t.url);break;case"callout":this.callouts.add(t.loc),setTimeout((()=>{this.callouts.delete(t.loc)}),1500)}}))},Hr=async function(t){if("string"==typeof t)return t;let e=new URL(window.location.toString());e.search="";let s=await crypto.subtle.digest("SHA-1",await t.arrayBuffer()),i=btoa(String.fromCharCode(...new Uint8Array(s)));console.log("RESOURCE ID: ",i),e.pathname=`/resources/${i}`;let n=await caches.open("resources");return await n.put(e,new Response(t)),e.toString()};
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Gr=t=>{if(t.shouldConnect&&null===t.ws){const e=new WebSocket(t.url),s=t.binaryType;let i=null;s&&(e.binaryType=s),t.ws=e,t.connecting=!0,t.connected=!1,e.onmessage=e=>{t.lastMessageReceived=Rs();const s=e.data,n="string"==typeof s?JSON.parse(s):s;n&&"pong"===n.type&&(clearTimeout(i),i=setTimeout(r,15e3)),t.emit("message",[n,t])};const n=e=>{null!==t.ws&&(t.ws=null,t.connecting=!1,t.connected?(t.connected=!1,t.emit("disconnect",[{type:"disconnect",error:e},t])):t.unsuccessfulReconnects++,setTimeout(Gr,Te(1200*Ue(t.unsuccessfulReconnects+1),2500),t)),clearTimeout(i)},r=()=>{t.ws===e&&t.send({type:"ping"})};e.onclose=()=>n(null),e.onerror=t=>n(t),e.onopen=()=>{t.lastMessageReceived=Rs(),t.connecting=!1,t.connected=!0,t.unsuccessfulReconnects=0,t.emit("connect",[{type:"connect"},t]),i=setTimeout(r,15e3)}}};class Kr extends We{constructor(t,{binaryType:e}={}){super(),this.url=t,this.ws=null,this.binaryType=e||null,this.connected=!1,this.connecting=!1,this.unsuccessfulReconnects=0,this.lastMessageReceived=0,this.shouldConnect=!0,this._checkInterval=setInterval((()=>{this.connected&&3e4<Rs()-this.lastMessageReceived&&this.ws.close()}),15e3),Gr(this)}send(t){this.ws&&this.ws.send(JSON.stringify(t))}destroy(){clearInterval(this._checkInterval),this.disconnect(),super.destroy()}disconnect(){this.shouldConnect=!1,null!==this.ws&&this.ws.close()}connect(){this.shouldConnect=!0,this.connected||null!==this.ws||Gr(this)}}var qr,Fr,Zr,Yr,Xr;class Qr extends We{constructor(){super(...arguments),qr.set(this,"opening")}get current(){return s(this,qr,"f")}set(t){let e=s(this,qr,"f")!==t;i(this,qr,t,"f"),e&&this.emit("status",[])}connected(){return new Promise(((t,e)=>{let i=()=>{"closed"===s(this,qr,"f")&&e("closed"),"open"===s(this,qr,"f")&&t()};"opening"===s(this,qr,"f")?this.once("status",i):i()}))}}qr=new WeakMap;const to={iceServers:[{urls:["stun:stun1.l.google.com:19302","stun:stun2.l.google.com:19302"]}]};class eo extends We{constructor(t,e=!1,i="wss://battlegrid-signaling.herokuapp.com"){super(),Fr.add(this),this.peers=new Map,this.status=new Qr,Xr.set(this,(async t=>{if(console.log("ONMESSAGE",t),"error-not-exists"===t.type){return this.peers.get(t.destination)?.peer.close(),void console.log("closing")}let e=this.peers.get(t.from);if(!e){if("offer"!==t.description?.type)return;e=s(this,Fr,"m",Zr).call(this,t.from,!1)}let i=e.peer;if(t.description){const n=!e.making_offer&&("stable"==i.signalingState||e.isSettingRemoteAnswerPending),r="offer"==t.description.type&&!n;if(e.ignore_offer=!e.polite&&r,e.ignore_offer)return;e.isSettingRemoteAnswerPending="answer"===t.description.type,await i.setRemoteDescription(t.description),e.isSettingRemoteAnswerPending=!1,"offer"===t.description.type&&(await i.setLocalDescription(),await s(this,Fr,"m",Yr).call(this,{type:"signal",from:this.peer_id,to:t.from,description:i.localDescription})),this.emit("peer",[t.from,i])}else if(t.candidate)try{await i.addIceCandidate(t.candidate)}catch(t){if(!e.ignore_offer)throw t}}));let n=new URL(i);n.pathname=t,this.allow_connections=e,this.peer_id=t,this.socket=new Kr(n.toString()),this.status.set("opening"),this.socket.on("connect",(()=>this.status.set("open"))),this.socket.on("disconnect",(()=>this.status.set("opening"))),this.socket.on("message",s(this,Xr,"f"))}initiate(t){return s(this,Fr,"m",Zr).call(this,t,!1).peer}shutdown(){this.socket.destroy(),this.peers.clear(),this.status.destroy()}}Xr=new WeakMap,Fr=new WeakSet,Zr=function(t,e){let i=new RTCPeerConnection(to),n={polite:e,making_offer:!1,ignore_offer:!1,isSettingRemoteAnswerPending:!1,peer:i};return this.peers.set(t,n),i.onicecandidate=async({candidate:e})=>{await s(this,Fr,"m",Yr).call(this,{type:"signal",from:this.peer_id,to:t,candidate:e})},i.onnegotiationneeded=async()=>{console.log("negotiation needed!");try{n.making_offer=!0,await i.setLocalDescription(),await s(this,Fr,"m",Yr).call(this,{type:"signal",from:this.peer_id,to:t,description:i.localDescription})}finally{n.making_offer=!1}},i.addEventListener("iceconnectionstatechange",(()=>{console.log("iceConnectionState",i.iceConnectionState),"closed"===i.iceConnectionState&&this.peers.delete(t)})),n},Yr=async function(t){await this.status.connected(),await this.socket.send(t)};const so=t=>({readable:io(t),writable:no(t)}),io=t=>new ReadableStream({start(e){t.onmessage=({data:t})=>{e.enqueue(t)};t.addEventListener("close",(()=>{0===t.bufferedAmount?(console.log("Underlying datachannel closed"),e.close()):t.addEventListener("bufferedamountlow",(()=>{console.log("Underlying datachannel closed"),e.close()}))}),{once:!0})},cancel(){t.close()}}),no=t=>{let e;return t.addEventListener("error",(t=>console.log("DC ERROR",t))),new WritableStream({start(s){const i=()=>{console.log("stream closed by dc ending",t.label),s.error("Closed foo"),t.removeEventListener("close",i)};t.addEventListener("close",i),t.onopen=()=>e&&e(),t.onbufferedamountlow=()=>e&&e()},async write(s){("connecting"===t.readyState||t.bufferedAmount>t.bufferedAmountLowThreshold)&&(console.log("waiting for resumptoin..."),await new Promise(((t,s)=>e=t)),console.log("resumed!")),t.send(s)},abort(){console.log("aborted dc by stream"),t.close()},close(){console.log("closed dc by stream"),t.close()}},new CountQueuingStrategy({highWaterMark:1}))};async function ro(t){let e=t.readable.getReader(),s=await e.read();console.log("header? ",s);let i=JSON.parse(s.value);e.releaseLock();let n=await async function(t,e){let s=[];return console.log("collectin blob"),await Lr(t,(t=>{console.log("CHUNK?"),s.push(t)})),console.log("got all bytes"),new Blob(s,{type:e})}(t.readable,i?.type);return{blob:n}}async function oo(t,e,s=262144){console.log("USING MAX MESSAGE SIZE: ",s);let i=t.writable.getWriter();await i.write(JSON.stringify({type:e.blob.type})),i.releaseLock(),await function(t,e){let s=0;return new ReadableStream({async pull(i){if(s>=t.size)return i.close();try{i.enqueue(new Uint8Array(await t.slice(s,Math.min(s+e,t.size)).arrayBuffer()))}catch(t){console.log("Error enqueue slice",t)}s+=e}},new CountQueuingStrategy({highWaterMark:5}))}(e.blob,s).pipeTo(t.writable,{preventClose:!0})}var ho,lo,co,ao,uo,fo,wo,po,go,vo,bo,yo,mo;class ko{constructor(t,e){this.status=new Qr,ho.set(this,void 0),this.ondatachannel=t=>{},this.id=t,this.peer=e;let s=e.createDataChannel("events",{negotiated:!0,id:1});s.binaryType="arraybuffer";let{readable:n,writable:r}=so(s);this.events=n.pipeThrough(new TransformStream({transform(t,e){console.log("chunk",t),e.enqueue(new Uint8Array(t))}})),i(this,ho,r.getWriter(),"f");let o=e.close;e.close=()=>{this.status.set("closed"),o.bind(e)()},e.addEventListener("iceconnectionstatechange",(()=>{switch(console.log("STATE CHANGE"),e.iceConnectionState){case"closed":this.status.set("closed");break;case"connected":this.status.set("open");break;default:this.status.set("opening")}})),e.ondatachannel=t=>this.ondatachannel(t)}write_event(t){return s(this,ho,"f").write(t)}request(t){return this.datachannel(t,{protocol:"request-resource"}).then(so).then(ro)}datachannel(t,e){return new Promise(((s,i)=>{let n=this.peer.createDataChannel(t,e);n.addEventListener("open",(()=>{n.removeEventListener("error",i),s(n)}),{once:!0}),n.addEventListener("error",i,{once:!0})}))}}ho=new WeakMap;class $o{constructor(t,e){lo.add(this),co.set(this,void 0),ao.set(this,void 0),uo.set(this,void 0),fo.set(this,void 0),this.forward_updates=(t,e)=>{"remote"!==e&&s(this,ao,"f").write_event(t)},i(this,fo,new eo(crypto.randomUUID()),"f"),i(this,co,e,"f"),i(this,uo,t,"f"),s(this,co,"f").doc.on("update",this.forward_updates),i(this,ao,s(this,lo,"m",wo).call(this),"f");let n=caches.open("resources");navigator.serviceWorker.onmessage=async t=>{let e=t.data.id;try{let t=await s(this,ao,"f").request(e),i=new Response(t.blob);await(await n).put(`/resources/${e}`,i),console.log("COMMUNICATING WITH SERVICE WORKER"),navigator.serviceWorker.controller.postMessage({type:"found",id:e})}catch(t){console.error("Error fetching resource: ",t),navigator.serviceWorker.controller.postMessage({type:"notfound",id:e,error:t})}}}get status(){return s(this,ao,"f").status}async reconnect(){i(this,ao,s(this,lo,"m",wo).call(this),"f")}async shutdown(){s(this,co,"f").doc.off("update",this.forward_updates),s(this,ao,"f").peer.close(),console.log("Waiting for signaler shutdown"),await s(this,fo,"f").shutdown(),console.log("signaler dead"),navigator.serviceWorker.onmessage=null}}co=new WeakMap,ao=new WeakMap,uo=new WeakMap,fo=new WeakMap,lo=new WeakSet,wo=function(){let t=new ko(s(this,fo,"f").peer_id,s(this,fo,"f").initiate(s(this,uo,"f")));return Lr(t.events,(t=>Wi(s(this,co,"f").doc,t,"remote"))),t};class xo{constructor(t){po.add(this),go.set(this,void 0),this.clients=new Set,vo.set(this,void 0),bo.set(this,((t,e)=>{let i=new ko(t,e);this.clients.add(i),i.write_event(Ei(s(this,go,"f").doc)),Lr(i.events,(e=>{Wi(s(this,go,"f").doc,e,t)})),e.ondatachannel=async t=>{console.log("INCOMING DC",t.channel);const i=t.channel;try{await(r="open",o=i,new Promise((t=>{o.addEventListener(r,(e=>t(e)),{once:!0})}))),console.log("new dc",i),"request-resource"===i.protocol&&(await oo(so(i),await s(this,po,"m",yo).call(this,i.label),e.sctp?.maxMessageSize||262144),console.log("FLUSHING"),await(n=i,new Promise(((t,e)=>{const s=()=>0===n.bufferedAmount?t():"closed"===n.readyState||"closing"===n.readyState?e("Buffer closed before flushing"):void 0;n.bufferedAmountLowThreshold=0,n.addEventListener("bufferedamountlow",s),s()}))))}finally{i.close()}var n,r,o}})),this.signaler=new eo(crypto.randomUUID(),!0),i(this,go,t,"f"),i(this,vo,new AbortController,"f"),this.signaler.on("peer",s(this,bo,"f")),s(this,go,"f").doc.on("update",((t,e)=>{for(let s of this.clients)console.log("ECHO",s.id,e),s.id!==e&&s.write_event(t)}))}async shutdown(){for(let t of this.clients)t.peer.close();this.clients.clear(),s(this,vo,"f").abort("Server shutting down"),await this.signaler.shutdown()}}go=new WeakMap,vo=new WeakMap,bo=new WeakMap,po=new WeakSet,yo=async function(t){let e=await(await caches.open("resources")).match(`/resources/${t}`);if(!e)throw`Requested unknown resource ${t}`;return{blob:await e.blob()}};let So=class extends rt{constructor(){super(...arguments),this.text="",this.mousex=0,this.mousey=0,mo.set(this,(t=>{this.mousex=t.pageX,this.mousey=t.pageY}))}connectedCallback(){super.connectedCallback(),this.addEventListener("mousemove",s(this,mo,"f"))}disconnectedCallback(){this.removeEventListener("mousemove",s(this,mo,"f"))}render(){return console.log("Rendering"),z`<slot></slot><div id="message" style="${Gt({left:`${this.mousex+8}px`,top:`${this.mousey+10}px`})}">${this.text}</div>`}};mo=new WeakMap,So.styles=c`:host{display:inline-block;position:relative;width:fit-content;height:fit-content}div{font-size:.8em;display:none;opacity:0;position:fixed;background:#000;color:#fff;border-radius:3px;padding:.25em .5em;white-space:nowrap;width:max-content}@keyframes appear{0%{opacity:0}100%{opacity:1}}:host(:hover) div{display:block;animation:appear 250ms linear forwards 750ms}`,e([ct()],So.prototype,"text",void 0),e([at()],So.prototype,"mousex",void 0),e([at()],So.prototype,"mousey",void 0),So=e([ht("with-tooltip")],So);let Mo=class extends rt{constructor(){super(...arguments),this.status="local",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return z`<label class="switch"><with-tooltip text="${function(t){switch(t){case"open":return"Joinable";case"closed":return"Offline";case"opening":return"Not Joinable";case"local":return"Start hosting"}}(this.status)}"><input type="checkbox" @input="${this.toggle}" ?checked="${"local"!==this.status}"> <span class="slider round ${this.status}"><span class="on-space">Hosting</span> <span class="dot"></span> <span class="off-space">Offline</span></span></with-tooltip></label>`}};Mo.styles=c`.slider{display:inline-flex;flex-wrap:nowrap;height:1em;transition:.4s;padding:.2em;min-width:4.5em;cursor:pointer;background:#ccc}.open{background:#2196f3}.opening{background:#fdcb18}.opening>.on-space{color:#000}input{display:none}input:checked+.slider>.on-space{flex-grow:1;opacity:1}input:checked+.slider>.off-space{flex-grow:0!important;opacity:0}.off-space{opacity:1;flex-grow:1!important}.on-space{opacity:0;color:#fff;width:0}.off-space,.on-space{font-size:.8em}.slider>span{flex-grow:0;flex-basis:0;transition:.4s;overflow:hidden;text-align:center}.round{border-radius:1em}.dot{border-radius:1em;min-width:1em;height:1em;background:#fff}`,e([ct()],Mo.prototype,"status",void 0),Mo=e([ht("host-toggle")],Mo);let Ao=class extends rt{constructor(){super(...arguments),this.status="opening",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return z`<span class="slider round ${this.status}">${function(t){switch(t){case"open":return"Connected";case"closed":return"Disconnected";case"opening":return"Connecting"}}(this.status)}</span>`}};Ao.styles=c`.slider{height:1em;transition:.4s;padding:.2em;min-width:5em;cursor:pointer;color:#fff;font-size:.8em;align-items:baseline}.open{background:#2196f3}.opening{background:#fdcb18}.round{border-radius:1em}`,e([ct()],Ao.prototype,"status",void 0),Ao=e([ht("client-status")],Ao);let Co=class extends rt{constructor(){super(...arguments),this.width=0,this.height=0,this.grid_size=0,this.image=new Image}render(){return z`<style>:host{width:${l(this.grid_size*this.width+"px")};height:${l(this.grid_size*this.height+"px")};display:block}</style><canvas id="line-canvas" width="${this.grid_size*this.width}" height="${this.grid_size*this.height}"></canvas>`}draw(){let t=this.canvas?.getContext("2d",{alpha:!1});if(t){t.strokeStyle="#dddddddd",t.drawImage(this.image,0,0,this.grid_size*this.width,this.grid_size*this.height);for(let e=this.grid_size;e<this.width*this.grid_size-1;e+=this.grid_size)t.beginPath(),t.setLineDash([0,6,6,6]),t.moveTo(e,0),t.lineTo(e,this.height*this.grid_size),t.stroke();for(let e=this.grid_size;e<this.height*this.grid_size-1;e+=this.grid_size)t.beginPath(),t.setLineDash([0,6,6,6]),t.moveTo(0,e),t.lineTo(this.width*this.grid_size,e),t.stroke()}}updated(t){t.has("background")&&this.background&&(this.image.src=this.background,this.image.onload=()=>{this.draw()}),this.draw()}};Co.styles=c`canvas{width:100%;height:100%}`,e([ct({type:Number})],Co.prototype,"width",void 0),e([ct({type:Number})],Co.prototype,"height",void 0),e([ct({type:Number})],Co.prototype,"grid_size",void 0),e([ct({type:String})],Co.prototype,"background",void 0),e([ft("#line-canvas",!1)],Co.prototype,"canvas",void 0),Co=e([ht("grid-lines")],Co);const _o=t=>{var i,n;class r extends t{constructor(){super(...arguments),i.set(this,(t=>{this.drag_location=[t.offsetX,t.offsetY],t.preventDefault()})),n.set(this,(t=>{this.drag_location=void 0}))}connectedCallback(){super.connectedCallback(),this.addEventListener("dragenter",s(this,i,"f")),this.addEventListener("dragover",s(this,i,"f")),this.addEventListener("drop",s(this,n,"f")),this.addEventListener("dragleave",s(this,n,"f"))}disconnectedCallback(){this.addEventListener("dragenter",s(this,i,"f")),this.removeEventListener("dragover",s(this,i,"f")),this.removeEventListener("dragleave",s(this,n,"f")),this.removeEventListener("drop",s(this,n,"f"))}}return i=new WeakMap,n=new WeakMap,e([at()],r.prototype,"drag_location",void 0),r};var Wo;let Oo=class extends(_o(rt)){constructor(){super(...arguments),Wo.set(this,(async t=>{jt(t);try{const e=await Pt(t);console.log("Emitting drop");let s=this.dispatchEvent(Lt("token-drop",{loc:this.grid.snap([t.offsetX,t.offsetY]),dim:_t([this.grid.dim,this.grid.dim],-this.grid.line),img:e}));console.log("DISPATCH?",s)}catch(t){console.error(t)}}))}connectedCallback(){super.connectedCallback(),this.addEventListener("drop",s(this,Wo,"f"))}render(){let t=this.drag_location?this.grid.snap(this.drag_location):void 0;return z`<div id="drop-hint" style="${Gt({visibility:void 0===t?"hidden":"visible",transform:t?`translate(${t[0]}px, ${t[1]}px)`:""})}"></div>`}};var Eo,Uo;Wo=new WeakMap,Oo.styles=c`:host{width:100%;height:100%;position:relative}#drop-hint{width:1em;height:1em;background:grey;position:absolute}`,Oo=e([ht("drop-layer")],Oo);let To=class extends rt{constructor(){super(...arguments),Eo.add(this),Uo.set(this,{snap:t=>[No(t[0]),No(t[1])],dim:72,line:1})}get screen_dim(){return _t(Ot(this.grid_dim,72),-1)}get grid_dim(){return[this.board.get("width"),this.board.get("height")]}render(){let[t,e]=this.grid_dim,[i,n]=this.screen_dim;return z`<p-p-z><div id="root" style="${Gt({width:`${i}px`,height:`${n}px`,padding:"20px",fontSize:"72px",filter:"drop-shadow(0 0  20px gray)"})}"><div id="board"><grid-lines class="full-bleed" background="assets/thornwood.jpg" width="${t}" height="${e}" grid_size="${72}"></grid-lines>${At(this.board.get("order").toJSON()??[],(t=>t),((t,e)=>{console.log("repeat!",t);let s=this.board.get("tokens").get(t);const[i,n]=_t(s.get("dim"),0),[r,o]=_t(s.get("loc"),0);return z`<div class="token" style="${Gt({width:i-1+"px",height:n-1+"px",backgroundImage:`url("${s.get("url")}")`,transform:`translate(${r+1}px, ${o+1}px)`})}"></div>`}))}<drop-layer class="full-bleed" .grid="${s(this,Uo,"f")}" @token-drop="${t=>console.log(t)}"></drop-layer></div></div></p-p-z>`}};Uo=new WeakMap,Eo=new WeakSet,To.styles=c`p-p-z{position:absolute;background-color:#ededf0;top:0;left:0;right:0;bottom:0}#grid{background-image:${l("\n        repeating-linear-gradient(#ccc 0 1px, transparent 1px 100%),\n        repeating-linear-gradient(90deg, #ccc 0 1px, transparent 1px 100%);\n      ")};background-size:${l("72px 72px")};background-position:${l("-1px -1px")};width:100%;height:100%;position:absolute}#board{width:100%;height:100%;border-radius:${l("18px")};isolation:isolate;background:#fff;background-size:cover;position:relative;overflow:hidden;box-shadow:0 0 20px #ddddddff}svg{position:absolute;display:block;width:100%;height:100%}.token{position:absolute;background-size:100% 100%;filter:drop-shadow(0 0 2px #333)}.full-bleed{position:absolute;width:100%;height:100%}.line{background-color:#d3d3d3;position:absolute;contain:none}.vert{height:100%;width:${l("1px")}}.horiz{width:100%;height:${l("1px")}}:host{position:relative;display:block;--selection-color:cornflowerblue;overflow:hidden}`,e([ct({attribute:!1})],To.prototype,"board",void 0),To=e([ht("html-canvas")],To);const No=t=>t-t%72,Ro=(t,e)=>Promise.race([t,new Promise(((t,s)=>setTimeout(s,e)))]);var Do,Io,zo,jo,Lo;let Po=class extends rt{constructor(){super(...arguments),this.selection=new Set,this.host_pending=!1,this.client_pending=!1,this.game=new Vr,Do.set(this,(()=>{this.game.set_dim(Tt([1,1],[parseInt(this.width?.value)??0,parseInt(this.height?.value)??0]))})),Io.set(this,(async()=>{console.log("new local..."),this.game.initialize_board(),await(this.client?.shutdown()),this.client&&this.client.status.off("status",this.requestUpdate),this.client=void 0,window.history.pushState(null,"",window.location.href.split("?")[0])})),zo.set(this,(()=>this.requestUpdate())),jo.set(this,(async()=>{try{this.client?.shutdown(),this.client=void 0,this.host_pending=!0,this.server=new xo(this.game),this.server.signaler.status.on("status",s(this,zo,"f")),console.log("WAITING"),await Ro(this.server.signaler.status.connected(),5e3),window.history.pushState({},"","?game="+this.server.signaler.peer_id),navigator.clipboard.writeText(window.location.toString())}catch(t){console.error(t),await s(this,Lo,"f")}finally{this.host_pending=!1}})),Lo.set(this,(async()=>{let t=this.server;this.server=void 0,await(t?.shutdown()),window.history.replaceState({},"",window.location.pathname)}))}render(){let t="closed"===this.client?.status.current?z`<div class="message error"><div><h1>Error connecting to remote grid</h1><button @click="${s(this,Io,"f")}">New local grid</button></div></div>`:null,e=this.client_pending?z`<div class="message"><div><h1>Connecting to grid...</h1></div></div>`:null,i="closed"===this.client?.status.current?z`<div class="message"><div><h1>Disconnected from host</h1><button @click="${s(this,Io,"f")}">Continue locally</button></div></div>`:null,n=t||e||i;return z`<section id="toolbar" class="group"><div class="group">${this.client?z`<client-status status="${this.client.status.current}"></client-status>`:z`<host-toggle status="${this.server?.signaler.status.current??"local"}" @enable="${s(this,jo,"f")}" @disable="${s(this,Lo,"f")}"></host-toggle>`} <span>Grid: <input id="width" type="number" min="1" @input="${s(this,Do,"f")}" .value="${this.game.board.get("width")+""}"> x <input id="height" type="number" min="1" @input="${s(this,Do,"f")}" .value="${this.game.board.get("height")+""}"> </span>${1===this.selection.size?z`<div><button @click="${()=>this.game.apply({type:"token-reorder",id:Ht(this.selection),idx:"down"})}" ?disabled="${!0}">Move Down</button> <button @click="${()=>this.game.apply({type:"token-reorder",id:Ht(this.selection),idx:"up"})}" ?disabled="${!0}">Move Up</button></div>`:null}</div><div class="group"><buy-me-a-coffee class="right"></buy-me-a-coffee></div></section><html-canvas bg="${(t=>null!=t?t:P)(this.game.board.get("bg")??void 0)}" .selection="${this.selection}" width="${this.game.board.get("width")}" height="${this.game.board.get("height")}" .board="${this.game.board}" .callouts="${this.game.callouts}" @token-drop="${({detail:t})=>this.game.add_token(t.img,{loc:t.loc,r:0,dim:t.dim})}" @bg-drop="${({detail:t})=>this.game.set_bg(t)}" @token-select="${({detail:t})=>{this.selection=new Set(t)}}" @game-event="${({detail:t})=>this.game.apply(t)}"></html-canvas>${n}`}updated(t){t.has("client")&&(document.title="BattleGrid"+(this.client&&"open"===this.client.status.current?this.server?"- Hosting":"- Connected":""))}async connectedCallback(){super.connectedCallback(),console.log(this.game.board),this.game.doc.on("update",(()=>{console.log("UPDATEING");for(const t of this.selection)this.game.board.get("tokens").has(t)||this.selection.delete(t);this.requestUpdate(),console.log("CANVAS",this.canvas),this.canvas?.requestUpdate()})),this.game.doc.on("afterTransaction",(()=>{this.canvas?.requestUpdate()})),console.log("debug now please");let t=new URLSearchParams(window.location.search).get("game");if(!t)return await s(this,Io,"f").call(this);try{console.log("new client"),this.client=new $o(t,this.game),this.client.status.on("status",(()=>this.requestUpdate())),console.log("waiting for connection"),this.client_pending=!0,await Ro(this.client.status.connected(),5e3),console.log("connected")}catch{console.log("giving up"),await s(this,Io,"f").call(this)}finally{this.client_pending=!1}}};var Jo,Bo,Ho,Vo,Go,Ko;Do=new WeakMap,Io=new WeakMap,zo=new WeakMap,jo=new WeakMap,Lo=new WeakMap,Po.styles=c`:host{width:100%;height:100%;display:grid;grid:"toolbar" 30px "viewport" minmax(0,1fr)/minmax(0,1fr);font-family:inherit;--ui-bg:#f9f9fa}.message{grid-area:1/1/3/1;display:grid;align-items:center;justify-items:center;background:#fff;z-index:2}.right{justify-self:end}html-canvas{grid-area:viewport;z-index:1}input[type=number]{width:3em}.group{display:flex;align-items:center;height:100%;flex-wrap:nowrap}#toolbar{grid-area:toolbar;box-shadow:0 0 4px gray;z-index:2;background:var(--ui-bg);justify-content:space-between;padding:0 1em;grid-template-rows:unset}.group img{width:1em;height:1em;object-fit:cover;display:inline-block}`,e([ft("#width",!0)],Po.prototype,"width",void 0),e([ft("#height",!0)],Po.prototype,"height",void 0),e([ft("html-canvas",!1)],Po.prototype,"canvas",void 0),e([at()],Po.prototype,"client",void 0),e([at()],Po.prototype,"server",void 0),e([at()],Po.prototype,"selection",void 0),e([at()],Po.prototype,"host_pending",void 0),e([at()],Po.prototype,"client_pending",void 0),Po=e([ht("bg-app")],Po);class qo extends HTMLElement{constructor(){super(),Jo.add(this),this.state={z:1,scroll_pos:[0,0]},this.desired_state={z:1},this.origin=[0,0],this.vloc=[0,0],this.vdim=[0,0],this.cdim=[0,0],this.offset=[0,0],this.smooth=!1,Ho.set(this,new ResizeObserver((t=>{for(let e of t)if(e.target===this){this.vdim=[e.contentRect.width,e.contentRect.height];const t=this.getBoundingClientRect();this.vloc=[t.x,t.y]}else this.cdim=[e.target.offsetWidth,e.target.offsetHeight],s(this,Jo,"m",Bo).call(this);this.center()}))),Vo.set(this,void 0),this.loop=t=>{let e=this.desired_state.z-this.state.z;if(0!==e){let n=s(this,Vo,"f")?t-s(this,Vo,"f"):16;i(this,Vo,t,"f");let r=this.smooth?Math.sign(e)*Math.min(.005*n*this.state.z,Math.abs(e)):e;this.state.z+=r,this.center(),this.state.scroll_pos=Tt([0,0],Ct(Ot(this.origin,r),this.state.scroll_pos)),this.scrollTo({left:this.state.scroll_pos[0],top:this.state.scroll_pos[1]})}else i(this,Vo,void 0,"f");window.requestAnimationFrame(this.loop)},this.zoom=(t,e)=>{this.desired_state.z=Fo(Math.min(this.max_scale,Math.max(this.min_scale,this.desired_state.z+e))),this.origin=this.coordToLocal(t)},this.wheel=t=>{if(!t.ctrlKey)return;const e=t.deltaMode===WheelEvent.DOM_DELTA_LINE?10:1,s=.005*Math.min(30,Math.max(-30,-t.deltaY*e))*this.state.z;this.smooth=!0,this.zoom([t.clientX,t.clientY],s)},Go.set(this,(t=>{console.log("zoom!",t.ctrlKey,t.key),t.ctrlKey&&("-"===t.key?(this.smooth=!0,this.zoom(Ct(this.vloc,Ut(this.vdim,2)),-.4*this.state.z),jt(t)):"="===t.key?(this.smooth=!0,this.zoom(Ct(this.vloc,Ut(this.vdim,2)),.4*this.state.z),jt(t)):"0"===t.key&&(this.smooth=!0,s(this,Jo,"m",Bo).call(this)))})),Ko.set(this,{prev_scale:0,origin:[0,0],start:t=>{jt(t),s(this,Ko,"f").origin=[t.clientX,t.clientY],s(this,Ko,"f").prev_scale=1},change:t=>{jt(t),this.zoom(s(this,Ko,"f").origin,this.state.z*(t.scale-s(this,Ko,"f").prev_scale)*1.5),s(this,Ko,"f").prev_scale=t.scale}}),this.root=this.attachShadow({mode:"open"}),this.root.appendChild(qo.template().content.cloneNode(!0)),this.container=this.root.getElementById("container"),s(this,Ho,"f").observe(this),this.root.querySelector("slot").onslotchange=({target:t})=>{let e=t.assignedElements()[0];console.log("svg",e),s(this,Ho,"f").observe(e),this.smooth=!1},this.addEventListener("scroll",(()=>this.state.scroll_pos=[this.scrollLeft,this.scrollTop])),this.addEventListener("gesturestart",s(this,Ko,"f").start),this.addEventListener("gesturechange",s(this,Ko,"f").change),document.addEventListener("keydown",s(this,Go,"f"),{passive:!1})}get max_scale(){return 1}get min_scale(){return.75*Math.min(...Et(this.vdim,this.cdim))}center(){this.offset=Zo(Tt([0,0],Ot(Wt(this.vdim,Ot(this.cdim,this.state.z)),.5))),this.container.style.transform=`translate(${this.offset[0]}px, ${this.offset[1]}px) scale(${this.state.z})`}connectedCallback(){window.requestAnimationFrame(this.loop),this.addEventListener("wheel",this.wheel,{passive:!0,capture:!0})}coordToLocal(t){const e=Ct(Wt(t,this.vloc),this.state.scroll_pos);return Ut(Wt(e,this.offset),this.state.z)}static template(){let t=document.createElement("template");return t.innerHTML='\n            <style>\n                :host {\n                    position: relative;\n                    display: block;\n                    overflow: scroll; \n                }\n                #container {\n                    transform-origin: 0 0;\n                    display: block;\n                    width: fit-content;\n                    height: fit-content;\n                    position: absolute;\n                }\n            </style>\n                <div id="container">\n                    <slot id="content"></slot>\n                </div>\n            </div>\n        ',t}}Ho=new WeakMap,Vo=new WeakMap,Go=new WeakMap,Ko=new WeakMap,Jo=new WeakSet,Bo=function(){let t=this.root.querySelector("slot").assignedElements()[0],e=this.getBoundingClientRect();this.vdim=[e.width,e.height],this.cdim=[t.offsetWidth,t.offsetHeight];const s=Math.max(this.min_scale,Math.min(this.max_scale,...Ot(Et(this.vdim,this.cdim),.95)));this.zoom([0,0],s-this.state.z)};const Fo=t=>Math.round(100*(t+Number.EPSILON))/100,Zo=([t,e])=>[Fo(t),Fo(e)];customElements.define("p-p-z",qo),await navigator.serviceWorker.register("./service-worker.js"),document.body.addEventListener("wheel",(t=>{t.ctrlKey&&t.preventDefault()}),{passive:!1});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvdWkvc2FmYXJpLWZpeC50cyIsIi4uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2Nzcy10YWcuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L3JlYWN0aXZlLWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvbGl0LWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvY3VzdG9tLWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvc3RhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvYmFzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9ldmVudC1vcHRpb25zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LWFzc2lnbmVkLWVsZW1lbnRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmUtaGVscGVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3JlcGVhdC5qcyIsIi4uL3NyYy91dGlsL21hdGgudHMiLCIuLi9zcmMvdXRpbC9ldmVudHMudHMiLCIuLi9zcmMvdXRpbC9maWxlcy50cyIsIi4uL3NyYy9nYW1lL2dhbWUtZXZlbnRzLnRzIiwiLi4vc3JjL3V0aWwvaXRlci50cyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyIsIi4uL3NyYy91aS9jYW52YXMudHMiLCIuLi9zcmMvdWkvYnV5bWVhY29mZmVlLnRzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvc2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9vYnNlcnZhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvbWF0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL3N0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL2NvbmRpdGlvbnMuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9zdG9yYWdlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvZW52aXJvbm1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9kZWNvZGluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL2JpbmFyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL2J1ZmZlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL251bWJlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL2VuY29kaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2lzb21vcnBoaWMuanMvYnJvd3Nlci5tanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9yYW5kb20uanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC90aW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvZXJyb3IuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9vYmplY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9mdW5jdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL3N5bWJvbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL3BhaXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9kb20uanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9sb2dnaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvaXRlcmF0b3IuanMiLCIuLi9ub2RlX21vZHVsZXMveWpzL2Rpc3QveWpzLm1qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL3Byb21pc2UuanMiLCIuLi9zcmMvdXRpbC9zdHJlYW1zLnRzIiwiLi4vc3JjL2dhbWUvZ2FtZS50cyIsIi4uL3NyYy91dGlsL3lqcy50cyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC93ZWJzb2NrZXQuanMiLCIuLi9zcmMvdXRpbC9uZXQudHMiLCIuLi9zcmMvbmV0L3J0Yy9zaWduYWxlci50cyIsIi4uL3NyYy91dGlsL3J0Yy50cyIsIi4uL3NyYy9uZXQvcmVzb3VyY2VzL3Byb3RvY29sLnRzIiwiLi4vc3JjL25ldC9nYW1lX3BlZXIudHMiLCIuLi9zcmMvbmV0L2NsaWVudC50cyIsIi4uL3NyYy9uZXQvc2VydmVyLnRzIiwiLi4vc3JjL3VpL3V0aWwvd2l0aC10b29sdGlwLnRzIiwiLi4vc3JjL3VpL2hvc3QtdG9nZ2xlLnRzIiwiLi4vc3JjL3VpL2NsaWVudC1zdGF0dXMudHMiLCIuLi9zcmMvdWkvaHRtbC1jYW52YXMvZ3JpZC1saW5lcy50cyIsIi4uL3NyYy91aS91dGlsL2RyYWctYW5kLWRyb3AtbWl4aW4udHMiLCIuLi9zcmMvdWkvaHRtbC1jYW52YXMvZHJvcC1sYXllci50cyIsIi4uL3NyYy91aS9odG1sLWNhbnZhcy50cyIsIi4uL3NyYy91dGlsL3Byb21pc2VzLnRzIiwiLi4vc3JjL3VpL2FwcC50cyIsIi4uL3NyYy91aS9wcHAudHMiLCIuLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGwsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcclxuICAgIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcclxufVxyXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHQ9d2luZG93LlNoYWRvd1Jvb3QmJih2b2lkIDA9PT13aW5kb3cuU2hhZHlDU1N8fHdpbmRvdy5TaGFkeUNTUy5uYXRpdmVTaGFkb3cpJiZcImFkb3B0ZWRTdHlsZVNoZWV0c1wiaW4gRG9jdW1lbnQucHJvdG90eXBlJiZcInJlcGxhY2VcImluIENTU1N0eWxlU2hlZXQucHJvdG90eXBlLGU9U3ltYm9sKCksbj1uZXcgV2Vha01hcDtjbGFzcyBze2NvbnN0cnVjdG9yKHQsbixzKXtpZih0aGlzLl8kY3NzUmVzdWx0JD0hMCxzIT09ZSl0aHJvdyBFcnJvcihcIkNTU1Jlc3VsdCBpcyBub3QgY29uc3RydWN0YWJsZS4gVXNlIGB1bnNhZmVDU1NgIG9yIGBjc3NgIGluc3RlYWQuXCIpO3RoaXMuY3NzVGV4dD10LHRoaXMudD1ufWdldCBzdHlsZVNoZWV0KCl7bGV0IGU9dGhpcy5vO2NvbnN0IHM9dGhpcy50O2lmKHQmJnZvaWQgMD09PWUpe2NvbnN0IHQ9dm9pZCAwIT09cyYmMT09PXMubGVuZ3RoO3QmJihlPW4uZ2V0KHMpKSx2b2lkIDA9PT1lJiYoKHRoaXMubz1lPW5ldyBDU1NTdHlsZVNoZWV0KS5yZXBsYWNlU3luYyh0aGlzLmNzc1RleHQpLHQmJm4uc2V0KHMsZSkpfXJldHVybiBlfXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMuY3NzVGV4dH19Y29uc3Qgbz10PT5uZXcgcyhcInN0cmluZ1wiPT10eXBlb2YgdD90OnQrXCJcIix2b2lkIDAsZSkscj0odCwuLi5uKT0+e2NvbnN0IG89MT09PXQubGVuZ3RoP3RbMF06bi5yZWR1Y2UoKChlLG4scyk9PmUrKHQ9PntpZighMD09PXQuXyRjc3NSZXN1bHQkKXJldHVybiB0LmNzc1RleHQ7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpcmV0dXJuIHQ7dGhyb3cgRXJyb3IoXCJWYWx1ZSBwYXNzZWQgdG8gJ2NzcycgZnVuY3Rpb24gbXVzdCBiZSBhICdjc3MnIGZ1bmN0aW9uIHJlc3VsdDogXCIrdCtcIi4gVXNlICd1bnNhZmVDU1MnIHRvIHBhc3Mgbm9uLWxpdGVyYWwgdmFsdWVzLCBidXQgdGFrZSBjYXJlIHRvIGVuc3VyZSBwYWdlIHNlY3VyaXR5LlwiKX0pKG4pK3RbcysxXSksdFswXSk7cmV0dXJuIG5ldyBzKG8sdCxlKX0saT0oZSxuKT0+e3Q/ZS5hZG9wdGVkU3R5bGVTaGVldHM9bi5tYXAoKHQ9PnQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0P3Q6dC5zdHlsZVNoZWV0KSk6bi5mb3JFYWNoKCh0PT57Y29uc3Qgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIikscz13aW5kb3cubGl0Tm9uY2U7dm9pZCAwIT09cyYmbi5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLHMpLG4udGV4dENvbnRlbnQ9dC5jc3NUZXh0LGUuYXBwZW5kQ2hpbGQobil9KSl9LFM9dD90PT50OnQ9PnQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0Pyh0PT57bGV0IGU9XCJcIjtmb3IoY29uc3QgbiBvZiB0LmNzc1J1bGVzKWUrPW4uY3NzVGV4dDtyZXR1cm4gbyhlKX0pKHQpOnQ7ZXhwb3J0e3MgYXMgQ1NTUmVzdWx0LGkgYXMgYWRvcHRTdHlsZXMsciBhcyBjc3MsUyBhcyBnZXRDb21wYXRpYmxlU3R5bGUsdCBhcyBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsbyBhcyB1bnNhZmVDU1N9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLXRhZy5qcy5tYXBcbiIsImltcG9ydHtnZXRDb21wYXRpYmxlU3R5bGUgYXMgdCxhZG9wdFN0eWxlcyBhcyBpfWZyb21cIi4vY3NzLXRhZy5qc1wiO2V4cG9ydHtDU1NSZXN1bHQsYWRvcHRTdHlsZXMsY3NzLGdldENvbXBhdGlibGVTdHlsZSxzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsdW5zYWZlQ1NTfWZyb21cIi4vY3NzLXRhZy5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIHM7Y29uc3QgZT13aW5kb3cudHJ1c3RlZFR5cGVzLHI9ZT9lLmVtcHR5U2NyaXB0OlwiXCIsaD13aW5kb3cucmVhY3RpdmVFbGVtZW50UG9seWZpbGxTdXBwb3J0LG89e3RvQXR0cmlidXRlKHQsaSl7c3dpdGNoKGkpe2Nhc2UgQm9vbGVhbjp0PXQ/cjpudWxsO2JyZWFrO2Nhc2UgT2JqZWN0OmNhc2UgQXJyYXk6dD1udWxsPT10P3Q6SlNPTi5zdHJpbmdpZnkodCl9cmV0dXJuIHR9LGZyb21BdHRyaWJ1dGUodCxpKXtsZXQgcz10O3N3aXRjaChpKXtjYXNlIEJvb2xlYW46cz1udWxsIT09dDticmVhaztjYXNlIE51bWJlcjpzPW51bGw9PT10P251bGw6TnVtYmVyKHQpO2JyZWFrO2Nhc2UgT2JqZWN0OmNhc2UgQXJyYXk6dHJ5e3M9SlNPTi5wYXJzZSh0KX1jYXRjaCh0KXtzPW51bGx9fXJldHVybiBzfX0sbj0odCxpKT0+aSE9PXQmJihpPT1pfHx0PT10KSxsPXthdHRyaWJ1dGU6ITAsdHlwZTpTdHJpbmcsY29udmVydGVyOm8scmVmbGVjdDohMSxoYXNDaGFuZ2VkOm59O2NsYXNzIGEgZXh0ZW5kcyBIVE1MRWxlbWVudHtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5fJEVpPW5ldyBNYXAsdGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITEsdGhpcy5oYXNVcGRhdGVkPSExLHRoaXMuXyRFbD1udWxsLHRoaXMudSgpfXN0YXRpYyBhZGRJbml0aWFsaXplcih0KXt2YXIgaTtudWxsIT09KGk9dGhpcy5oKSYmdm9pZCAwIT09aXx8KHRoaXMuaD1bXSksdGhpcy5oLnB1c2godCl9c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKXt0aGlzLmZpbmFsaXplKCk7Y29uc3QgdD1bXTtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgoaSxzKT0+e2NvbnN0IGU9dGhpcy5fJEVwKHMsaSk7dm9pZCAwIT09ZSYmKHRoaXMuXyRFdi5zZXQoZSxzKSx0LnB1c2goZSkpfSkpLHR9c3RhdGljIGNyZWF0ZVByb3BlcnR5KHQsaT1sKXtpZihpLnN0YXRlJiYoaS5hdHRyaWJ1dGU9ITEpLHRoaXMuZmluYWxpemUoKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLnNldCh0LGkpLCFpLm5vQWNjZXNzb3ImJiF0aGlzLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSh0KSl7Y29uc3Qgcz1cInN5bWJvbFwiPT10eXBlb2YgdD9TeW1ib2woKTpcIl9fXCIrdCxlPXRoaXMuZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQscyxpKTt2b2lkIDAhPT1lJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5wcm90b3R5cGUsdCxlKX19c3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcih0LGkscyl7cmV0dXJue2dldCgpe3JldHVybiB0aGlzW2ldfSxzZXQoZSl7Y29uc3Qgcj10aGlzW3RdO3RoaXNbaV09ZSx0aGlzLnJlcXVlc3RVcGRhdGUodCxyLHMpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH19c3RhdGljIGdldFByb3BlcnR5T3B0aW9ucyh0KXtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5nZXQodCl8fGx9c3RhdGljIGZpbmFsaXplKCl7aWYodGhpcy5oYXNPd25Qcm9wZXJ0eShcImZpbmFsaXplZFwiKSlyZXR1cm4hMTt0aGlzLmZpbmFsaXplZD0hMDtjb25zdCB0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTtpZih0LmZpbmFsaXplKCksdGhpcy5lbGVtZW50UHJvcGVydGllcz1uZXcgTWFwKHQuZWxlbWVudFByb3BlcnRpZXMpLHRoaXMuXyRFdj1uZXcgTWFwLHRoaXMuaGFzT3duUHJvcGVydHkoXCJwcm9wZXJ0aWVzXCIpKXtjb25zdCB0PXRoaXMucHJvcGVydGllcyxpPVsuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KSwuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpXTtmb3IoY29uc3QgcyBvZiBpKXRoaXMuY3JlYXRlUHJvcGVydHkocyx0W3NdKX1yZXR1cm4gdGhpcy5lbGVtZW50U3R5bGVzPXRoaXMuZmluYWxpemVTdHlsZXModGhpcy5zdHlsZXMpLCEwfXN0YXRpYyBmaW5hbGl6ZVN0eWxlcyhpKXtjb25zdCBzPVtdO2lmKEFycmF5LmlzQXJyYXkoaSkpe2NvbnN0IGU9bmV3IFNldChpLmZsYXQoMS8wKS5yZXZlcnNlKCkpO2Zvcihjb25zdCBpIG9mIGUpcy51bnNoaWZ0KHQoaSkpfWVsc2Ugdm9pZCAwIT09aSYmcy5wdXNoKHQoaSkpO3JldHVybiBzfXN0YXRpYyBfJEVwKHQsaSl7Y29uc3Qgcz1pLmF0dHJpYnV0ZTtyZXR1cm4hMT09PXM/dm9pZCAwOlwic3RyaW5nXCI9PXR5cGVvZiBzP3M6XCJzdHJpbmdcIj09dHlwZW9mIHQ/dC50b0xvd2VyQ2FzZSgpOnZvaWQgMH11KCl7dmFyIHQ7dGhpcy5fJEVfPW5ldyBQcm9taXNlKCh0PT50aGlzLmVuYWJsZVVwZGF0aW5nPXQpKSx0aGlzLl8kQUw9bmV3IE1hcCx0aGlzLl8kRWcoKSx0aGlzLnJlcXVlc3RVcGRhdGUoKSxudWxsPT09KHQ9dGhpcy5jb25zdHJ1Y3Rvci5oKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT50KHRoaXMpKSl9YWRkQ29udHJvbGxlcih0KXt2YXIgaSxzOyhudWxsIT09KGk9dGhpcy5fJEVTKSYmdm9pZCAwIT09aT9pOnRoaXMuXyRFUz1bXSkucHVzaCh0KSx2b2lkIDAhPT10aGlzLnJlbmRlclJvb3QmJnRoaXMuaXNDb25uZWN0ZWQmJihudWxsPT09KHM9dC5ob3N0Q29ubmVjdGVkKXx8dm9pZCAwPT09c3x8cy5jYWxsKHQpKX1yZW1vdmVDb250cm9sbGVyKHQpe3ZhciBpO251bGw9PT0oaT10aGlzLl8kRVMpfHx2b2lkIDA9PT1pfHxpLnNwbGljZSh0aGlzLl8kRVMuaW5kZXhPZih0KT4+PjAsMSl9XyRFZygpe3RoaXMuY29uc3RydWN0b3IuZWxlbWVudFByb3BlcnRpZXMuZm9yRWFjaCgoKHQsaSk9Pnt0aGlzLmhhc093blByb3BlcnR5KGkpJiYodGhpcy5fJEVpLnNldChpLHRoaXNbaV0pLGRlbGV0ZSB0aGlzW2ldKX0pKX1jcmVhdGVSZW5kZXJSb290KCl7dmFyIHQ7Y29uc3Qgcz1udWxsIT09KHQ9dGhpcy5zaGFkb3dSb290KSYmdm9pZCAwIT09dD90OnRoaXMuYXR0YWNoU2hhZG93KHRoaXMuY29uc3RydWN0b3Iuc2hhZG93Um9vdE9wdGlvbnMpO3JldHVybiBpKHMsdGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50U3R5bGVzKSxzfWNvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7dm9pZCAwPT09dGhpcy5yZW5kZXJSb290JiYodGhpcy5yZW5kZXJSb290PXRoaXMuY3JlYXRlUmVuZGVyUm9vdCgpKSx0aGlzLmVuYWJsZVVwZGF0aW5nKCEwKSxudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RDb25uZWN0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSl9ZW5hYmxlVXBkYXRpbmcodCl7fWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7bnVsbD09PSh0PXRoaXMuXyRFUyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0RGlzY29ubmVjdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpfWF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0LGkscyl7dGhpcy5fJEFLKHQscyl9XyRFTyh0LGkscz1sKXt2YXIgZSxyO2NvbnN0IGg9dGhpcy5jb25zdHJ1Y3Rvci5fJEVwKHQscyk7aWYodm9pZCAwIT09aCYmITA9PT1zLnJlZmxlY3Qpe2NvbnN0IG49KG51bGwhPT0ocj1udWxsPT09KGU9cy5jb252ZXJ0ZXIpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnRvQXR0cmlidXRlKSYmdm9pZCAwIT09cj9yOm8udG9BdHRyaWJ1dGUpKGkscy50eXBlKTt0aGlzLl8kRWw9dCxudWxsPT1uP3RoaXMucmVtb3ZlQXR0cmlidXRlKGgpOnRoaXMuc2V0QXR0cmlidXRlKGgsbiksdGhpcy5fJEVsPW51bGx9fV8kQUsodCxpKXt2YXIgcyxlO2NvbnN0IHI9dGhpcy5jb25zdHJ1Y3RvcixoPXIuXyRFdi5nZXQodCk7aWYodm9pZCAwIT09aCYmdGhpcy5fJEVsIT09aCl7Y29uc3QgdD1yLmdldFByb3BlcnR5T3B0aW9ucyhoKSxuPXQuY29udmVydGVyLGw9bnVsbCE9PShlPW51bGwhPT0ocz1udWxsPT1uP3ZvaWQgMDpuLmZyb21BdHRyaWJ1dGUpJiZ2b2lkIDAhPT1zP3M6XCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uOm51bGwpJiZ2b2lkIDAhPT1lP2U6by5mcm9tQXR0cmlidXRlO3RoaXMuXyRFbD1oLHRoaXNbaF09bChpLHQudHlwZSksdGhpcy5fJEVsPW51bGx9fXJlcXVlc3RVcGRhdGUodCxpLHMpe2xldCBlPSEwO3ZvaWQgMCE9PXQmJigoKHM9c3x8dGhpcy5jb25zdHJ1Y3Rvci5nZXRQcm9wZXJ0eU9wdGlvbnModCkpLmhhc0NoYW5nZWR8fG4pKHRoaXNbdF0saSk/KHRoaXMuXyRBTC5oYXModCl8fHRoaXMuXyRBTC5zZXQodCxpKSwhMD09PXMucmVmbGVjdCYmdGhpcy5fJEVsIT09dCYmKHZvaWQgMD09PXRoaXMuXyRFQyYmKHRoaXMuXyRFQz1uZXcgTWFwKSx0aGlzLl8kRUMuc2V0KHQscykpKTplPSExKSwhdGhpcy5pc1VwZGF0ZVBlbmRpbmcmJmUmJih0aGlzLl8kRV89dGhpcy5fJEVqKCkpfWFzeW5jIF8kRWooKXt0aGlzLmlzVXBkYXRlUGVuZGluZz0hMDt0cnl7YXdhaXQgdGhpcy5fJEVffWNhdGNoKHQpe1Byb21pc2UucmVqZWN0KHQpfWNvbnN0IHQ9dGhpcy5zY2hlZHVsZVVwZGF0ZSgpO3JldHVybiBudWxsIT10JiZhd2FpdCB0LCF0aGlzLmlzVXBkYXRlUGVuZGluZ31zY2hlZHVsZVVwZGF0ZSgpe3JldHVybiB0aGlzLnBlcmZvcm1VcGRhdGUoKX1wZXJmb3JtVXBkYXRlKCl7dmFyIHQ7aWYoIXRoaXMuaXNVcGRhdGVQZW5kaW5nKXJldHVybjt0aGlzLmhhc1VwZGF0ZWQsdGhpcy5fJEVpJiYodGhpcy5fJEVpLmZvckVhY2goKCh0LGkpPT50aGlzW2ldPXQpKSx0aGlzLl8kRWk9dm9pZCAwKTtsZXQgaT0hMTtjb25zdCBzPXRoaXMuXyRBTDt0cnl7aT10aGlzLnNob3VsZFVwZGF0ZShzKSxpPyh0aGlzLndpbGxVcGRhdGUocyksbnVsbD09PSh0PXRoaXMuXyRFUyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0VXBkYXRlKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpLHRoaXMudXBkYXRlKHMpKTp0aGlzLl8kRWsoKX1jYXRjaCh0KXt0aHJvdyBpPSExLHRoaXMuXyRFaygpLHR9aSYmdGhpcy5fJEFFKHMpfXdpbGxVcGRhdGUodCl7fV8kQUUodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFUyl8fHZvaWQgMD09PWl8fGkuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0VXBkYXRlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKSx0aGlzLmhhc1VwZGF0ZWR8fCh0aGlzLmhhc1VwZGF0ZWQ9ITAsdGhpcy5maXJzdFVwZGF0ZWQodCkpLHRoaXMudXBkYXRlZCh0KX1fJEVrKCl7dGhpcy5fJEFMPW5ldyBNYXAsdGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITF9Z2V0IHVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuZ2V0VXBkYXRlQ29tcGxldGUoKX1nZXRVcGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLl8kRV99c2hvdWxkVXBkYXRlKHQpe3JldHVybiEwfXVwZGF0ZSh0KXt2b2lkIDAhPT10aGlzLl8kRUMmJih0aGlzLl8kRUMuZm9yRWFjaCgoKHQsaSk9PnRoaXMuXyRFTyhpLHRoaXNbaV0sdCkpKSx0aGlzLl8kRUM9dm9pZCAwKSx0aGlzLl8kRWsoKX11cGRhdGVkKHQpe31maXJzdFVwZGF0ZWQodCl7fX1hLmZpbmFsaXplZD0hMCxhLmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAsYS5lbGVtZW50U3R5bGVzPVtdLGEuc2hhZG93Um9vdE9wdGlvbnM9e21vZGU6XCJvcGVuXCJ9LG51bGw9PWh8fGgoe1JlYWN0aXZlRWxlbWVudDphfSksKG51bGwhPT0ocz1nbG9iYWxUaGlzLnJlYWN0aXZlRWxlbWVudFZlcnNpb25zKSYmdm9pZCAwIT09cz9zOmdsb2JhbFRoaXMucmVhY3RpdmVFbGVtZW50VmVyc2lvbnM9W10pLnB1c2goXCIxLjMuM1wiKTtleHBvcnR7YSBhcyBSZWFjdGl2ZUVsZW1lbnQsbyBhcyBkZWZhdWx0Q29udmVydGVyLG4gYXMgbm90RXF1YWx9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3RpdmUtZWxlbWVudC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xudmFyIHQ7Y29uc3QgaT1nbG9iYWxUaGlzLnRydXN0ZWRUeXBlcyxzPWk/aS5jcmVhdGVQb2xpY3koXCJsaXQtaHRtbFwiLHtjcmVhdGVIVE1MOnQ9PnR9KTp2b2lkIDAsZT1gbGl0JCR7KE1hdGgucmFuZG9tKCkrXCJcIikuc2xpY2UoOSl9JGAsbz1cIj9cIitlLG49YDwke299PmAsbD1kb2N1bWVudCxoPSh0PVwiXCIpPT5sLmNyZWF0ZUNvbW1lbnQodCkscj10PT5udWxsPT09dHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQsZD1BcnJheS5pc0FycmF5LHU9dD0+e3ZhciBpO3JldHVybiBkKHQpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZihudWxsPT09KGk9dCl8fHZvaWQgMD09PWk/dm9pZCAwOmlbU3ltYm9sLml0ZXJhdG9yXSl9LGM9LzwoPzooIS0tfFxcL1teYS16QS1aXSl8KFxcLz9bYS16QS1aXVtePlxcc10qKXwoXFwvPyQpKS9nLHY9Ly0tPi9nLGE9Lz4vZyxmPS8+fFsgXHRcXG5cZlxccl0oPzooW15cXHNcIic+PS9dKykoWyBcdFxcblxmXFxyXSo9WyBcdFxcblxmXFxyXSooPzpbXiBcdFxcblxmXFxyXCInYDw+PV18KFwifCcpfCkpfCQpL2csXz0vJy9nLG09L1wiL2csZz0vXig/OnNjcmlwdHxzdHlsZXx0ZXh0YXJlYXx0aXRsZSkkL2kscD10PT4oaSwuLi5zKT0+KHtfJGxpdFR5cGUkOnQsc3RyaW5nczppLHZhbHVlczpzfSksJD1wKDEpLHk9cCgyKSxiPVN5bWJvbC5mb3IoXCJsaXQtbm9DaGFuZ2VcIiksdz1TeW1ib2wuZm9yKFwibGl0LW5vdGhpbmdcIiksVD1uZXcgV2Vha01hcCx4PSh0LGkscyk9Pnt2YXIgZSxvO2NvbnN0IG49bnVsbCE9PShlPW51bGw9PXM/dm9pZCAwOnMucmVuZGVyQmVmb3JlKSYmdm9pZCAwIT09ZT9lOmk7bGV0IGw9bi5fJGxpdFBhcnQkO2lmKHZvaWQgMD09PWwpe2NvbnN0IHQ9bnVsbCE9PShvPW51bGw9PXM/dm9pZCAwOnMucmVuZGVyQmVmb3JlKSYmdm9pZCAwIT09bz9vOm51bGw7bi5fJGxpdFBhcnQkPWw9bmV3IE4oaS5pbnNlcnRCZWZvcmUoaCgpLHQpLHQsdm9pZCAwLG51bGwhPXM/czp7fSl9cmV0dXJuIGwuXyRBSSh0KSxsfSxBPWwuY3JlYXRlVHJlZVdhbGtlcihsLDEyOSxudWxsLCExKSxDPSh0LGkpPT57Y29uc3Qgbz10Lmxlbmd0aC0xLGw9W107bGV0IGgscj0yPT09aT9cIjxzdmc+XCI6XCJcIixkPWM7Zm9yKGxldCBpPTA7aTxvO2krKyl7Y29uc3Qgcz10W2ldO2xldCBvLHUscD0tMSwkPTA7Zm9yKDskPHMubGVuZ3RoJiYoZC5sYXN0SW5kZXg9JCx1PWQuZXhlYyhzKSxudWxsIT09dSk7KSQ9ZC5sYXN0SW5kZXgsZD09PWM/XCIhLS1cIj09PXVbMV0/ZD12OnZvaWQgMCE9PXVbMV0/ZD1hOnZvaWQgMCE9PXVbMl0/KGcudGVzdCh1WzJdKSYmKGg9UmVnRXhwKFwiPC9cIit1WzJdLFwiZ1wiKSksZD1mKTp2b2lkIDAhPT11WzNdJiYoZD1mKTpkPT09Zj9cIj5cIj09PXVbMF0/KGQ9bnVsbCE9aD9oOmMscD0tMSk6dm9pZCAwPT09dVsxXT9wPS0yOihwPWQubGFzdEluZGV4LXVbMl0ubGVuZ3RoLG89dVsxXSxkPXZvaWQgMD09PXVbM10/ZjonXCInPT09dVszXT9tOl8pOmQ9PT1tfHxkPT09Xz9kPWY6ZD09PXZ8fGQ9PT1hP2Q9YzooZD1mLGg9dm9pZCAwKTtjb25zdCB5PWQ9PT1mJiZ0W2krMV0uc3RhcnRzV2l0aChcIi8+XCIpP1wiIFwiOlwiXCI7cis9ZD09PWM/cytuOnA+PTA/KGwucHVzaChvKSxzLnNsaWNlKDAscCkrXCIkbGl0JFwiK3Muc2xpY2UocCkrZSt5KTpzK2UrKC0yPT09cD8obC5wdXNoKHZvaWQgMCksaSk6eSl9Y29uc3QgdT1yKyh0W29dfHxcIjw/PlwiKSsoMj09PWk/XCI8L3N2Zz5cIjpcIlwiKTtpZighQXJyYXkuaXNBcnJheSh0KXx8IXQuaGFzT3duUHJvcGVydHkoXCJyYXdcIikpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHRlbXBsYXRlIHN0cmluZ3MgYXJyYXlcIik7cmV0dXJuW3ZvaWQgMCE9PXM/cy5jcmVhdGVIVE1MKHUpOnUsbF19O2NsYXNzIEV7Y29uc3RydWN0b3Ioe3N0cmluZ3M6dCxfJGxpdFR5cGUkOnN9LG4pe2xldCBsO3RoaXMucGFydHM9W107bGV0IHI9MCxkPTA7Y29uc3QgdT10Lmxlbmd0aC0xLGM9dGhpcy5wYXJ0cyxbdixhXT1DKHQscyk7aWYodGhpcy5lbD1FLmNyZWF0ZUVsZW1lbnQodixuKSxBLmN1cnJlbnROb2RlPXRoaXMuZWwuY29udGVudCwyPT09cyl7Y29uc3QgdD10aGlzLmVsLmNvbnRlbnQsaT10LmZpcnN0Q2hpbGQ7aS5yZW1vdmUoKSx0LmFwcGVuZCguLi5pLmNoaWxkTm9kZXMpfWZvcig7bnVsbCE9PShsPUEubmV4dE5vZGUoKSkmJmMubGVuZ3RoPHU7KXtpZigxPT09bC5ub2RlVHlwZSl7aWYobC5oYXNBdHRyaWJ1dGVzKCkpe2NvbnN0IHQ9W107Zm9yKGNvbnN0IGkgb2YgbC5nZXRBdHRyaWJ1dGVOYW1lcygpKWlmKGkuZW5kc1dpdGgoXCIkbGl0JFwiKXx8aS5zdGFydHNXaXRoKGUpKXtjb25zdCBzPWFbZCsrXTtpZih0LnB1c2goaSksdm9pZCAwIT09cyl7Y29uc3QgdD1sLmdldEF0dHJpYnV0ZShzLnRvTG93ZXJDYXNlKCkrXCIkbGl0JFwiKS5zcGxpdChlKSxpPS8oWy4/QF0pPyguKikvLmV4ZWMocyk7Yy5wdXNoKHt0eXBlOjEsaW5kZXg6cixuYW1lOmlbMl0sc3RyaW5nczp0LGN0b3I6XCIuXCI9PT1pWzFdP006XCI/XCI9PT1pWzFdP0g6XCJAXCI9PT1pWzFdP0k6U30pfWVsc2UgYy5wdXNoKHt0eXBlOjYsaW5kZXg6cn0pfWZvcihjb25zdCBpIG9mIHQpbC5yZW1vdmVBdHRyaWJ1dGUoaSl9aWYoZy50ZXN0KGwudGFnTmFtZSkpe2NvbnN0IHQ9bC50ZXh0Q29udGVudC5zcGxpdChlKSxzPXQubGVuZ3RoLTE7aWYocz4wKXtsLnRleHRDb250ZW50PWk/aS5lbXB0eVNjcmlwdDpcIlwiO2ZvcihsZXQgaT0wO2k8cztpKyspbC5hcHBlbmQodFtpXSxoKCkpLEEubmV4dE5vZGUoKSxjLnB1c2goe3R5cGU6MixpbmRleDorK3J9KTtsLmFwcGVuZCh0W3NdLGgoKSl9fX1lbHNlIGlmKDg9PT1sLm5vZGVUeXBlKWlmKGwuZGF0YT09PW8pYy5wdXNoKHt0eXBlOjIsaW5kZXg6cn0pO2Vsc2V7bGV0IHQ9LTE7Zm9yKDstMSE9PSh0PWwuZGF0YS5pbmRleE9mKGUsdCsxKSk7KWMucHVzaCh7dHlwZTo3LGluZGV4OnJ9KSx0Kz1lLmxlbmd0aC0xfXIrK319c3RhdGljIGNyZWF0ZUVsZW1lbnQodCxpKXtjb25zdCBzPWwuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO3JldHVybiBzLmlubmVySFRNTD10LHN9fWZ1bmN0aW9uIFAodCxpLHM9dCxlKXt2YXIgbyxuLGwsaDtpZihpPT09YilyZXR1cm4gaTtsZXQgZD12b2lkIDAhPT1lP251bGw9PT0obz1zLl8kQ2wpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvW2VdOnMuXyRDdTtjb25zdCB1PXIoaSk/dm9pZCAwOmkuXyRsaXREaXJlY3RpdmUkO3JldHVybihudWxsPT1kP3ZvaWQgMDpkLmNvbnN0cnVjdG9yKSE9PXUmJihudWxsPT09KG49bnVsbD09ZD92b2lkIDA6ZC5fJEFPKXx8dm9pZCAwPT09bnx8bi5jYWxsKGQsITEpLHZvaWQgMD09PXU/ZD12b2lkIDA6KGQ9bmV3IHUodCksZC5fJEFUKHQscyxlKSksdm9pZCAwIT09ZT8obnVsbCE9PShsPShoPXMpLl8kQ2wpJiZ2b2lkIDAhPT1sP2w6aC5fJENsPVtdKVtlXT1kOnMuXyRDdT1kKSx2b2lkIDAhPT1kJiYoaT1QKHQsZC5fJEFTKHQsaS52YWx1ZXMpLGQsZSkpLGl9Y2xhc3MgVntjb25zdHJ1Y3Rvcih0LGkpe3RoaXMudj1bXSx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBRD10LHRoaXMuXyRBTT1pfWdldCBwYXJlbnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBTS5wYXJlbnROb2RlfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfXAodCl7dmFyIGk7Y29uc3R7ZWw6e2NvbnRlbnQ6c30scGFydHM6ZX09dGhpcy5fJEFELG89KG51bGwhPT0oaT1udWxsPT10P3ZvaWQgMDp0LmNyZWF0aW9uU2NvcGUpJiZ2b2lkIDAhPT1pP2k6bCkuaW1wb3J0Tm9kZShzLCEwKTtBLmN1cnJlbnROb2RlPW87bGV0IG49QS5uZXh0Tm9kZSgpLGg9MCxyPTAsZD1lWzBdO2Zvcig7dm9pZCAwIT09ZDspe2lmKGg9PT1kLmluZGV4KXtsZXQgaTsyPT09ZC50eXBlP2k9bmV3IE4obixuLm5leHRTaWJsaW5nLHRoaXMsdCk6MT09PWQudHlwZT9pPW5ldyBkLmN0b3IobixkLm5hbWUsZC5zdHJpbmdzLHRoaXMsdCk6Nj09PWQudHlwZSYmKGk9bmV3IEwobix0aGlzLHQpKSx0aGlzLnYucHVzaChpKSxkPWVbKytyXX1oIT09KG51bGw9PWQ/dm9pZCAwOmQuaW5kZXgpJiYobj1BLm5leHROb2RlKCksaCsrKX1yZXR1cm4gb31tKHQpe2xldCBpPTA7Zm9yKGNvbnN0IHMgb2YgdGhpcy52KXZvaWQgMCE9PXMmJih2b2lkIDAhPT1zLnN0cmluZ3M/KHMuXyRBSSh0LHMsaSksaSs9cy5zdHJpbmdzLmxlbmd0aC0yKTpzLl8kQUkodFtpXSkpLGkrK319Y2xhc3MgTntjb25zdHJ1Y3Rvcih0LGkscyxlKXt2YXIgbzt0aGlzLnR5cGU9Mix0aGlzLl8kQUg9dyx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBQT10LHRoaXMuXyRBQj1pLHRoaXMuXyRBTT1zLHRoaXMub3B0aW9ucz1lLHRoaXMuXyRDZz1udWxsPT09KG89bnVsbD09ZT92b2lkIDA6ZS5pc0Nvbm5lY3RlZCl8fHZvaWQgMD09PW98fG99Z2V0IF8kQVUoKXt2YXIgdCxpO3JldHVybiBudWxsIT09KGk9bnVsbD09PSh0PXRoaXMuXyRBTSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuXyRBVSkmJnZvaWQgMCE9PWk/aTp0aGlzLl8kQ2d9Z2V0IHBhcmVudE5vZGUoKXtsZXQgdD10aGlzLl8kQUEucGFyZW50Tm9kZTtjb25zdCBpPXRoaXMuXyRBTTtyZXR1cm4gdm9pZCAwIT09aSYmMTE9PT10Lm5vZGVUeXBlJiYodD1pLnBhcmVudE5vZGUpLHR9Z2V0IHN0YXJ0Tm9kZSgpe3JldHVybiB0aGlzLl8kQUF9Z2V0IGVuZE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFCfV8kQUkodCxpPXRoaXMpe3Q9UCh0aGlzLHQsaSkscih0KT90PT09d3x8bnVsbD09dHx8XCJcIj09PXQ/KHRoaXMuXyRBSCE9PXcmJnRoaXMuXyRBUigpLHRoaXMuXyRBSD13KTp0IT09dGhpcy5fJEFIJiZ0IT09YiYmdGhpcy4kKHQpOnZvaWQgMCE9PXQuXyRsaXRUeXBlJD90aGlzLlQodCk6dm9pZCAwIT09dC5ub2RlVHlwZT90aGlzLmsodCk6dSh0KT90aGlzLlModCk6dGhpcy4kKHQpfU0odCxpPXRoaXMuXyRBQil7cmV0dXJuIHRoaXMuXyRBQS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LGkpfWsodCl7dGhpcy5fJEFIIT09dCYmKHRoaXMuXyRBUigpLHRoaXMuXyRBSD10aGlzLk0odCkpfSQodCl7dGhpcy5fJEFIIT09dyYmcih0aGlzLl8kQUgpP3RoaXMuXyRBQS5uZXh0U2libGluZy5kYXRhPXQ6dGhpcy5rKGwuY3JlYXRlVGV4dE5vZGUodCkpLHRoaXMuXyRBSD10fVQodCl7dmFyIGk7Y29uc3R7dmFsdWVzOnMsXyRsaXRUeXBlJDplfT10LG89XCJudW1iZXJcIj09dHlwZW9mIGU/dGhpcy5fJEFDKHQpOih2b2lkIDA9PT1lLmVsJiYoZS5lbD1FLmNyZWF0ZUVsZW1lbnQoZS5oLHRoaXMub3B0aW9ucykpLGUpO2lmKChudWxsPT09KGk9dGhpcy5fJEFIKXx8dm9pZCAwPT09aT92b2lkIDA6aS5fJEFEKT09PW8pdGhpcy5fJEFILm0ocyk7ZWxzZXtjb25zdCB0PW5ldyBWKG8sdGhpcyksaT10LnAodGhpcy5vcHRpb25zKTt0Lm0ocyksdGhpcy5rKGkpLHRoaXMuXyRBSD10fX1fJEFDKHQpe2xldCBpPVQuZ2V0KHQuc3RyaW5ncyk7cmV0dXJuIHZvaWQgMD09PWkmJlQuc2V0KHQuc3RyaW5ncyxpPW5ldyBFKHQpKSxpfVModCl7ZCh0aGlzLl8kQUgpfHwodGhpcy5fJEFIPVtdLHRoaXMuXyRBUigpKTtjb25zdCBpPXRoaXMuXyRBSDtsZXQgcyxlPTA7Zm9yKGNvbnN0IG8gb2YgdCllPT09aS5sZW5ndGg/aS5wdXNoKHM9bmV3IE4odGhpcy5NKGgoKSksdGhpcy5NKGgoKSksdGhpcyx0aGlzLm9wdGlvbnMpKTpzPWlbZV0scy5fJEFJKG8pLGUrKztlPGkubGVuZ3RoJiYodGhpcy5fJEFSKHMmJnMuXyRBQi5uZXh0U2libGluZyxlKSxpLmxlbmd0aD1lKX1fJEFSKHQ9dGhpcy5fJEFBLm5leHRTaWJsaW5nLGkpe3ZhciBzO2ZvcihudWxsPT09KHM9dGhpcy5fJEFQKXx8dm9pZCAwPT09c3x8cy5jYWxsKHRoaXMsITEsITAsaSk7dCYmdCE9PXRoaXMuXyRBQjspe2NvbnN0IGk9dC5uZXh0U2libGluZzt0LnJlbW92ZSgpLHQ9aX19c2V0Q29ubmVjdGVkKHQpe3ZhciBpO3ZvaWQgMD09PXRoaXMuXyRBTSYmKHRoaXMuXyRDZz10LG51bGw9PT0oaT10aGlzLl8kQVApfHx2b2lkIDA9PT1pfHxpLmNhbGwodGhpcyx0KSl9fWNsYXNzIFN7Y29uc3RydWN0b3IodCxpLHMsZSxvKXt0aGlzLnR5cGU9MSx0aGlzLl8kQUg9dyx0aGlzLl8kQU49dm9pZCAwLHRoaXMuZWxlbWVudD10LHRoaXMubmFtZT1pLHRoaXMuXyRBTT1lLHRoaXMub3B0aW9ucz1vLHMubGVuZ3RoPjJ8fFwiXCIhPT1zWzBdfHxcIlwiIT09c1sxXT8odGhpcy5fJEFIPUFycmF5KHMubGVuZ3RoLTEpLmZpbGwobmV3IFN0cmluZyksdGhpcy5zdHJpbmdzPXMpOnRoaXMuXyRBSD13fWdldCB0YWdOYW1lKCl7cmV0dXJuIHRoaXMuZWxlbWVudC50YWdOYW1lfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQUkodCxpPXRoaXMscyxlKXtjb25zdCBvPXRoaXMuc3RyaW5ncztsZXQgbj0hMTtpZih2b2lkIDA9PT1vKXQ9UCh0aGlzLHQsaSwwKSxuPSFyKHQpfHx0IT09dGhpcy5fJEFIJiZ0IT09YixuJiYodGhpcy5fJEFIPXQpO2Vsc2V7Y29uc3QgZT10O2xldCBsLGg7Zm9yKHQ9b1swXSxsPTA7bDxvLmxlbmd0aC0xO2wrKyloPVAodGhpcyxlW3MrbF0saSxsKSxoPT09YiYmKGg9dGhpcy5fJEFIW2xdKSxufHwobj0hcihoKXx8aCE9PXRoaXMuXyRBSFtsXSksaD09PXc/dD13OnQhPT13JiYodCs9KG51bGwhPWg/aDpcIlwiKStvW2wrMV0pLHRoaXMuXyRBSFtsXT1ofW4mJiFlJiZ0aGlzLkModCl9Qyh0KXt0PT09dz90aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSk6dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsbnVsbCE9dD90OlwiXCIpfX1jbGFzcyBNIGV4dGVuZHMgU3tjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy50eXBlPTN9Qyh0KXt0aGlzLmVsZW1lbnRbdGhpcy5uYW1lXT10PT09dz92b2lkIDA6dH19Y29uc3Qgaz1pP2kuZW1wdHlTY3JpcHQ6XCJcIjtjbGFzcyBIIGV4dGVuZHMgU3tjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy50eXBlPTR9Qyh0KXt0JiZ0IT09dz90aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSxrKTp0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSl9fWNsYXNzIEkgZXh0ZW5kcyBTe2NvbnN0cnVjdG9yKHQsaSxzLGUsbyl7c3VwZXIodCxpLHMsZSxvKSx0aGlzLnR5cGU9NX1fJEFJKHQsaT10aGlzKXt2YXIgcztpZigodD1udWxsIT09KHM9UCh0aGlzLHQsaSwwKSkmJnZvaWQgMCE9PXM/czp3KT09PWIpcmV0dXJuO2NvbnN0IGU9dGhpcy5fJEFILG89dD09PXcmJmUhPT13fHx0LmNhcHR1cmUhPT1lLmNhcHR1cmV8fHQub25jZSE9PWUub25jZXx8dC5wYXNzaXZlIT09ZS5wYXNzaXZlLG49dCE9PXcmJihlPT09d3x8byk7byYmdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMsZSksbiYmdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMsdCksdGhpcy5fJEFIPXR9aGFuZGxlRXZlbnQodCl7dmFyIGkscztcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLl8kQUg/dGhpcy5fJEFILmNhbGwobnVsbCE9PShzPW51bGw9PT0oaT10aGlzLm9wdGlvbnMpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmhvc3QpJiZ2b2lkIDAhPT1zP3M6dGhpcy5lbGVtZW50LHQpOnRoaXMuXyRBSC5oYW5kbGVFdmVudCh0KX19Y2xhc3MgTHtjb25zdHJ1Y3Rvcih0LGkscyl7dGhpcy5lbGVtZW50PXQsdGhpcy50eXBlPTYsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQU09aSx0aGlzLm9wdGlvbnM9c31nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFJKHQpe1AodGhpcyx0KX19Y29uc3QgUj17TDpcIiRsaXQkXCIsUDplLFY6byxJOjEsTjpDLFI6VixqOnUsRDpQLEg6TixGOlMsTzpILFc6SSxCOk0sWjpMfSx6PXdpbmRvdy5saXRIdG1sUG9seWZpbGxTdXBwb3J0O251bGw9PXp8fHooRSxOKSwobnVsbCE9PSh0PWdsb2JhbFRoaXMubGl0SHRtbFZlcnNpb25zKSYmdm9pZCAwIT09dD90Omdsb2JhbFRoaXMubGl0SHRtbFZlcnNpb25zPVtdKS5wdXNoKFwiMi4yLjZcIik7ZXhwb3J0e1IgYXMgXyRMSCwkIGFzIGh0bWwsYiBhcyBub0NoYW5nZSx3IGFzIG5vdGhpbmcseCBhcyByZW5kZXIseSBhcyBzdmd9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWh0bWwuanMubWFwXG4iLCJpbXBvcnR7UmVhY3RpdmVFbGVtZW50IGFzIHR9ZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2ltcG9ydHtyZW5kZXIgYXMgZSxub0NoYW5nZSBhcyBpfWZyb21cImxpdC1odG1sXCI7ZXhwb3J0KmZyb21cImxpdC1odG1sXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgbCxvO2NvbnN0IHI9dDtjbGFzcyBzIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5yZW5kZXJPcHRpb25zPXtob3N0OnRoaXN9LHRoaXMuXyREbz12b2lkIDB9Y3JlYXRlUmVuZGVyUm9vdCgpe3ZhciB0LGU7Y29uc3QgaT1zdXBlci5jcmVhdGVSZW5kZXJSb290KCk7cmV0dXJuIG51bGwhPT0odD0oZT10aGlzLnJlbmRlck9wdGlvbnMpLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PXR8fChlLnJlbmRlckJlZm9yZT1pLmZpcnN0Q2hpbGQpLGl9dXBkYXRlKHQpe2NvbnN0IGk9dGhpcy5yZW5kZXIoKTt0aGlzLmhhc1VwZGF0ZWR8fCh0aGlzLnJlbmRlck9wdGlvbnMuaXNDb25uZWN0ZWQ9dGhpcy5pc0Nvbm5lY3RlZCksc3VwZXIudXBkYXRlKHQpLHRoaXMuXyREbz1lKGksdGhpcy5yZW5kZXJSb290LHRoaXMucmVuZGVyT3B0aW9ucyl9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRG8pfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMCl9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRG8pfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMSl9cmVuZGVyKCl7cmV0dXJuIGl9fXMuZmluYWxpemVkPSEwLHMuXyRsaXRFbGVtZW50JD0hMCxudWxsPT09KGw9Z2xvYmFsVGhpcy5saXRFbGVtZW50SHlkcmF0ZVN1cHBvcnQpfHx2b2lkIDA9PT1sfHxsLmNhbGwoZ2xvYmFsVGhpcyx7TGl0RWxlbWVudDpzfSk7Y29uc3Qgbj1nbG9iYWxUaGlzLmxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQ7bnVsbD09bnx8bih7TGl0RWxlbWVudDpzfSk7Y29uc3QgaD17XyRBSzoodCxlLGkpPT57dC5fJEFLKGUsaSl9LF8kQUw6dD0+dC5fJEFMfTsobnVsbCE9PShvPWdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zKSYmdm9pZCAwIT09bz9vOmdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zPVtdKS5wdXNoKFwiMy4yLjFcIik7ZXhwb3J0e3MgYXMgTGl0RWxlbWVudCxyIGFzIFVwZGF0aW5nRWxlbWVudCxoIGFzIF8kTEV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IG49bj0+ZT0+XCJmdW5jdGlvblwiPT10eXBlb2YgZT8oKG4sZSk9Pih3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKG4sZSksZSkpKG4sZSk6KChuLGUpPT57Y29uc3R7a2luZDp0LGVsZW1lbnRzOml9PWU7cmV0dXJue2tpbmQ6dCxlbGVtZW50czppLGZpbmlzaGVyKGUpe3dpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUobixlKX19fSkobixlKTtleHBvcnR7biBhcyBjdXN0b21FbGVtZW50fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1c3RvbS1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCBpPShpLGUpPT5cIm1ldGhvZFwiPT09ZS5raW5kJiZlLmRlc2NyaXB0b3ImJiEoXCJ2YWx1ZVwiaW4gZS5kZXNjcmlwdG9yKT97Li4uZSxmaW5pc2hlcihuKXtuLmNyZWF0ZVByb3BlcnR5KGUua2V5LGkpfX06e2tpbmQ6XCJmaWVsZFwiLGtleTpTeW1ib2woKSxwbGFjZW1lbnQ6XCJvd25cIixkZXNjcmlwdG9yOnt9LG9yaWdpbmFsS2V5OmUua2V5LGluaXRpYWxpemVyKCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZS5pbml0aWFsaXplciYmKHRoaXNbZS5rZXldPWUuaW5pdGlhbGl6ZXIuY2FsbCh0aGlzKSl9LGZpbmlzaGVyKG4pe24uY3JlYXRlUHJvcGVydHkoZS5rZXksaSl9fTtmdW5jdGlvbiBlKGUpe3JldHVybihuLHQpPT52b2lkIDAhPT10PygoaSxlLG4pPT57ZS5jb25zdHJ1Y3Rvci5jcmVhdGVQcm9wZXJ0eShuLGkpfSkoZSxuLHQpOmkoZSxuKX1leHBvcnR7ZSBhcyBwcm9wZXJ0eX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0eS5qcy5tYXBcbiIsImltcG9ydHtwcm9wZXJ0eSBhcyByfWZyb21cIi4vcHJvcGVydHkuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2Z1bmN0aW9uIHQodCl7cmV0dXJuIHIoey4uLnQsc3RhdGU6ITB9KX1leHBvcnR7dCBhcyBzdGF0ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0ZS5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgZT0oZSx0LG8pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbyxlKX0sdD0oZSx0KT0+KHtraW5kOlwibWV0aG9kXCIscGxhY2VtZW50OlwicHJvdG90eXBlXCIsa2V5OnQua2V5LGRlc2NyaXB0b3I6ZX0pLG89KHtmaW5pc2hlcjplLGRlc2NyaXB0b3I6dH0pPT4obyxuKT0+e3ZhciByO2lmKHZvaWQgMD09PW4pe2NvbnN0IG49bnVsbCE9PShyPW8ub3JpZ2luYWxLZXkpJiZ2b2lkIDAhPT1yP3I6by5rZXksaT1udWxsIT10P3traW5kOlwibWV0aG9kXCIscGxhY2VtZW50OlwicHJvdG90eXBlXCIsa2V5Om4sZGVzY3JpcHRvcjp0KG8ua2V5KX06ey4uLm8sa2V5Om59O3JldHVybiBudWxsIT1lJiYoaS5maW5pc2hlcj1mdW5jdGlvbih0KXtlKHQsbil9KSxpfXtjb25zdCByPW8uY29uc3RydWN0b3I7dm9pZCAwIT09dCYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sbix0KG4pKSxudWxsPT1lfHxlKHIsbil9fTtleHBvcnR7byBhcyBkZWNvcmF0ZVByb3BlcnR5LGUgYXMgbGVnYWN5UHJvdG90eXBlTWV0aG9kLHQgYXMgc3RhbmRhcmRQcm90b3R5cGVNZXRob2R9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5qcy5tYXBcbiIsImltcG9ydHtkZWNvcmF0ZVByb3BlcnR5IGFzIHJ9ZnJvbVwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9mdW5jdGlvbiBlKGUpe3JldHVybiByKHtmaW5pc2hlcjoocix0KT0+e09iamVjdC5hc3NpZ24oci5wcm90b3R5cGVbdF0sZSl9fSl9ZXhwb3J0e2UgYXMgZXZlbnRPcHRpb25zfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50LW9wdGlvbnMuanMubWFwXG4iLCJpbXBvcnR7ZGVjb3JhdGVQcm9wZXJ0eSBhcyBvfWZyb21cIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovZnVuY3Rpb24gaShpLG4pe3JldHVybiBvKHtkZXNjcmlwdG9yOm89Pntjb25zdCB0PXtnZXQoKXt2YXIgbyxuO3JldHVybiBudWxsIT09KG49bnVsbD09PShvPXRoaXMucmVuZGVyUm9vdCl8fHZvaWQgMD09PW8/dm9pZCAwOm8ucXVlcnlTZWxlY3RvcihpKSkmJnZvaWQgMCE9PW4/bjpudWxsfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH07aWYobil7Y29uc3Qgbj1cInN5bWJvbFwiPT10eXBlb2Ygbz9TeW1ib2woKTpcIl9fXCIrbzt0LmdldD1mdW5jdGlvbigpe3ZhciBvLHQ7cmV0dXJuIHZvaWQgMD09PXRoaXNbbl0mJih0aGlzW25dPW51bGwhPT0odD1udWxsPT09KG89dGhpcy5yZW5kZXJSb290KXx8dm9pZCAwPT09bz92b2lkIDA6by5xdWVyeVNlbGVjdG9yKGkpKSYmdm9pZCAwIT09dD90Om51bGwpLHRoaXNbbl19fXJldHVybiB0fX0pfWV4cG9ydHtpIGFzIHF1ZXJ5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5LmpzLm1hcFxuIiwiaW1wb3J0e2RlY29yYXRlUHJvcGVydHkgYXMgb31mcm9tXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL3ZhciBuO2NvbnN0IGU9bnVsbCE9KG51bGw9PT0obj13aW5kb3cuSFRNTFNsb3RFbGVtZW50KXx8dm9pZCAwPT09bj92b2lkIDA6bi5wcm90b3R5cGUuYXNzaWduZWRFbGVtZW50cyk/KG8sbik9Pm8uYXNzaWduZWRFbGVtZW50cyhuKToobyxuKT0+by5hc3NpZ25lZE5vZGVzKG4pLmZpbHRlcigobz0+by5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFKSk7ZnVuY3Rpb24gbChuKXtjb25zdHtzbG90Omwsc2VsZWN0b3I6dH09bnVsbCE9bj9uOnt9O3JldHVybiBvKHtkZXNjcmlwdG9yOm89Pih7Z2V0KCl7dmFyIG87Y29uc3Qgcj1cInNsb3RcIisobD9gW25hbWU9JHtsfV1gOlwiOm5vdChbbmFtZV0pXCIpLGk9bnVsbD09PShvPXRoaXMucmVuZGVyUm9vdCl8fHZvaWQgMD09PW8/dm9pZCAwOm8ucXVlcnlTZWxlY3RvcihyKSxzPW51bGwhPWk/ZShpLG4pOltdO3JldHVybiB0P3MuZmlsdGVyKChvPT5vLm1hdGNoZXModCkpKTpzfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfSl9ZXhwb3J0e2wgYXMgcXVlcnlBc3NpZ25lZEVsZW1lbnRzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5LWFzc2lnbmVkLWVsZW1lbnRzLmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PXtBVFRSSUJVVEU6MSxDSElMRDoyLFBST1BFUlRZOjMsQk9PTEVBTl9BVFRSSUJVVEU6NCxFVkVOVDo1LEVMRU1FTlQ6Nn0sZT10PT4oLi4uZSk9Pih7XyRsaXREaXJlY3RpdmUkOnQsdmFsdWVzOmV9KTtjbGFzcyBpe2NvbnN0cnVjdG9yKHQpe31nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFUKHQsZSxpKXt0aGlzLl8kQ3Q9dCx0aGlzLl8kQU09ZSx0aGlzLl8kQ2k9aX1fJEFTKHQsZSl7cmV0dXJuIHRoaXMudXBkYXRlKHQsZSl9dXBkYXRlKHQsZSl7cmV0dXJuIHRoaXMucmVuZGVyKC4uLmUpfX1leHBvcnR7aSBhcyBEaXJlY3RpdmUsdCBhcyBQYXJ0VHlwZSxlIGFzIGRpcmVjdGl2ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJlY3RpdmUuanMubWFwXG4iLCJpbXBvcnR7XyRMSCBhcyBvfWZyb21cIi4vbGl0LWh0bWwuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0e0g6aX09byx0PW89Pm51bGw9PT1vfHxcIm9iamVjdFwiIT10eXBlb2YgbyYmXCJmdW5jdGlvblwiIT10eXBlb2YgbyxuPXtIVE1MOjEsU1ZHOjJ9LHY9KG8saSk9Pnt2YXIgdCxuO3JldHVybiB2b2lkIDA9PT1pP3ZvaWQgMCE9PShudWxsPT09KHQ9byl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuXyRsaXRUeXBlJCk6KG51bGw9PT0obj1vKXx8dm9pZCAwPT09bj92b2lkIDA6bi5fJGxpdFR5cGUkKT09PWl9LGw9bz0+e3ZhciBpO3JldHVybiB2b2lkIDAhPT0obnVsbD09PShpPW8pfHx2b2lkIDA9PT1pP3ZvaWQgMDppLl8kbGl0RGlyZWN0aXZlJCl9LGQ9bz0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9byl8fHZvaWQgMD09PWk/dm9pZCAwOmkuXyRsaXREaXJlY3RpdmUkfSxyPW89PnZvaWQgMD09PW8uc3RyaW5ncyxlPSgpPT5kb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpLHU9KG8sdCxuKT0+e3ZhciB2O2NvbnN0IGw9by5fJEFBLnBhcmVudE5vZGUsZD12b2lkIDA9PT10P28uXyRBQjp0Ll8kQUE7aWYodm9pZCAwPT09bil7Y29uc3QgdD1sLmluc2VydEJlZm9yZShlKCksZCksdj1sLmluc2VydEJlZm9yZShlKCksZCk7bj1uZXcgaSh0LHYsbyxvLm9wdGlvbnMpfWVsc2V7Y29uc3QgaT1uLl8kQUIubmV4dFNpYmxpbmcsdD1uLl8kQU0scj10IT09bztpZihyKXtsZXQgaTtudWxsPT09KHY9bi5fJEFRKXx8dm9pZCAwPT09dnx8di5jYWxsKG4sbyksbi5fJEFNPW8sdm9pZCAwIT09bi5fJEFQJiYoaT1vLl8kQVUpIT09dC5fJEFVJiZuLl8kQVAoaSl9aWYoaSE9PWR8fHIpe2xldCBvPW4uXyRBQTtmb3IoO28hPT1pOyl7Y29uc3QgaT1vLm5leHRTaWJsaW5nO2wuaW5zZXJ0QmVmb3JlKG8sZCksbz1pfX19cmV0dXJuIG59LGM9KG8saSx0PW8pPT4oby5fJEFJKGksdCksbyksZj17fSxzPShvLGk9Zik9Pm8uXyRBSD1pLGE9bz0+by5fJEFILG09bz0+e3ZhciBpO251bGw9PT0oaT1vLl8kQVApfHx2b2lkIDA9PT1pfHxpLmNhbGwobywhMSwhMCk7bGV0IHQ9by5fJEFBO2NvbnN0IG49by5fJEFCLm5leHRTaWJsaW5nO2Zvcig7dCE9PW47KXtjb25zdCBvPXQubmV4dFNpYmxpbmc7dC5yZW1vdmUoKSx0PW99fSxwPW89PntvLl8kQVIoKX07ZXhwb3J0e24gYXMgVGVtcGxhdGVSZXN1bHRUeXBlLHAgYXMgY2xlYXJQYXJ0LGEgYXMgZ2V0Q29tbWl0dGVkVmFsdWUsZCBhcyBnZXREaXJlY3RpdmVDbGFzcyx1IGFzIGluc2VydFBhcnQsbCBhcyBpc0RpcmVjdGl2ZVJlc3VsdCx0IGFzIGlzUHJpbWl0aXZlLHIgYXMgaXNTaW5nbGVFeHByZXNzaW9uLHYgYXMgaXNUZW1wbGF0ZVJlc3VsdCxtIGFzIHJlbW92ZVBhcnQsYyBhcyBzZXRDaGlsZFBhcnRWYWx1ZSxzIGFzIHNldENvbW1pdHRlZFZhbHVlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZS1oZWxwZXJzLmpzLm1hcFxuIiwiaW1wb3J0e25vQ2hhbmdlIGFzIGV9ZnJvbVwiLi4vbGl0LWh0bWwuanNcIjtpbXBvcnR7ZGlyZWN0aXZlIGFzIHMsRGlyZWN0aXZlIGFzIHQsUGFydFR5cGUgYXMgcn1mcm9tXCIuLi9kaXJlY3RpdmUuanNcIjtpbXBvcnR7Z2V0Q29tbWl0dGVkVmFsdWUgYXMgbCxzZXRDaGlsZFBhcnRWYWx1ZSBhcyBvLGluc2VydFBhcnQgYXMgaSxyZW1vdmVQYXJ0IGFzIG4sc2V0Q29tbWl0dGVkVmFsdWUgYXMgZn1mcm9tXCIuLi9kaXJlY3RpdmUtaGVscGVycy5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB1PShlLHMsdCk9Pntjb25zdCByPW5ldyBNYXA7Zm9yKGxldCBsPXM7bDw9dDtsKyspci5zZXQoZVtsXSxsKTtyZXR1cm4gcn0sYz1zKGNsYXNzIGV4dGVuZHMgdHtjb25zdHJ1Y3RvcihlKXtpZihzdXBlcihlKSxlLnR5cGUhPT1yLkNISUxEKXRocm93IEVycm9yKFwicmVwZWF0KCkgY2FuIG9ubHkgYmUgdXNlZCBpbiB0ZXh0IGV4cHJlc3Npb25zXCIpfWR0KGUscyx0KXtsZXQgcjt2b2lkIDA9PT10P3Q9czp2b2lkIDAhPT1zJiYocj1zKTtjb25zdCBsPVtdLG89W107bGV0IGk9MDtmb3IoY29uc3QgcyBvZiBlKWxbaV09cj9yKHMsaSk6aSxvW2ldPXQocyxpKSxpKys7cmV0dXJue3ZhbHVlczpvLGtleXM6bH19cmVuZGVyKGUscyx0KXtyZXR1cm4gdGhpcy5kdChlLHMsdCkudmFsdWVzfXVwZGF0ZShzLFt0LHIsY10pe3ZhciBkO2NvbnN0IGE9bChzKSx7dmFsdWVzOnAsa2V5czp2fT10aGlzLmR0KHQscixjKTtpZighQXJyYXkuaXNBcnJheShhKSlyZXR1cm4gdGhpcy51dD12LHA7Y29uc3QgaD1udWxsIT09KGQ9dGhpcy51dCkmJnZvaWQgMCE9PWQ/ZDp0aGlzLnV0PVtdLG09W107bGV0IHkseCxqPTAsaz1hLmxlbmd0aC0xLHc9MCxBPXAubGVuZ3RoLTE7Zm9yKDtqPD1rJiZ3PD1BOylpZihudWxsPT09YVtqXSlqKys7ZWxzZSBpZihudWxsPT09YVtrXSlrLS07ZWxzZSBpZihoW2pdPT09dlt3XSltW3ddPW8oYVtqXSxwW3ddKSxqKyssdysrO2Vsc2UgaWYoaFtrXT09PXZbQV0pbVtBXT1vKGFba10scFtBXSksay0tLEEtLTtlbHNlIGlmKGhbal09PT12W0FdKW1bQV09byhhW2pdLHBbQV0pLGkocyxtW0ErMV0sYVtqXSksaisrLEEtLTtlbHNlIGlmKGhba109PT12W3ddKW1bd109byhhW2tdLHBbd10pLGkocyxhW2pdLGFba10pLGstLSx3Kys7ZWxzZSBpZih2b2lkIDA9PT15JiYoeT11KHYsdyxBKSx4PXUoaCxqLGspKSx5LmhhcyhoW2pdKSlpZih5LmhhcyhoW2tdKSl7Y29uc3QgZT14LmdldCh2W3ddKSx0PXZvaWQgMCE9PWU/YVtlXTpudWxsO2lmKG51bGw9PT10KXtjb25zdCBlPWkocyxhW2pdKTtvKGUscFt3XSksbVt3XT1lfWVsc2UgbVt3XT1vKHQscFt3XSksaShzLGFbal0sdCksYVtlXT1udWxsO3crK31lbHNlIG4oYVtrXSksay0tO2Vsc2UgbihhW2pdKSxqKys7Zm9yKDt3PD1BOyl7Y29uc3QgZT1pKHMsbVtBKzFdKTtvKGUscFt3XSksbVt3KytdPWV9Zm9yKDtqPD1rOyl7Y29uc3QgZT1hW2orK107bnVsbCE9PWUmJm4oZSl9cmV0dXJuIHRoaXMudXQ9dixmKHMsbSksZX19KTtleHBvcnR7YyBhcyByZXBlYXR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwZWF0LmpzLm1hcFxuIixudWxsLG51bGwsbnVsbCxudWxsLG51bGwsImltcG9ydHtub0NoYW5nZSBhcyB0fWZyb21cIi4uL2xpdC1odG1sLmpzXCI7aW1wb3J0e2RpcmVjdGl2ZSBhcyBlLERpcmVjdGl2ZSBhcyByLFBhcnRUeXBlIGFzIHN9ZnJvbVwiLi4vZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBpPWUoY2xhc3MgZXh0ZW5kcyBye2NvbnN0cnVjdG9yKHQpe3ZhciBlO2lmKHN1cGVyKHQpLHQudHlwZSE9PXMuQVRUUklCVVRFfHxcInN0eWxlXCIhPT10Lm5hbWV8fChudWxsPT09KGU9dC5zdHJpbmdzKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5sZW5ndGgpPjIpdGhyb3cgRXJyb3IoXCJUaGUgYHN0eWxlTWFwYCBkaXJlY3RpdmUgbXVzdCBiZSB1c2VkIGluIHRoZSBgc3R5bGVgIGF0dHJpYnV0ZSBhbmQgbXVzdCBiZSB0aGUgb25seSBwYXJ0IGluIHRoZSBhdHRyaWJ1dGUuXCIpfXJlbmRlcih0KXtyZXR1cm4gT2JqZWN0LmtleXModCkucmVkdWNlKCgoZSxyKT0+e2NvbnN0IHM9dFtyXTtyZXR1cm4gbnVsbD09cz9lOmUrYCR7cj1yLnJlcGxhY2UoLyg/Ol4od2Via2l0fG1venxtc3xvKXwpKD89W0EtWl0pL2csXCItJCZcIikudG9Mb3dlckNhc2UoKX06JHtzfTtgfSksXCJcIil9dXBkYXRlKGUsW3JdKXtjb25zdHtzdHlsZTpzfT1lLmVsZW1lbnQ7aWYodm9pZCAwPT09dGhpcy5jdCl7dGhpcy5jdD1uZXcgU2V0O2Zvcihjb25zdCB0IGluIHIpdGhpcy5jdC5hZGQodCk7cmV0dXJuIHRoaXMucmVuZGVyKHIpfXRoaXMuY3QuZm9yRWFjaCgodD0+e251bGw9PXJbdF0mJih0aGlzLmN0LmRlbGV0ZSh0KSx0LmluY2x1ZGVzKFwiLVwiKT9zLnJlbW92ZVByb3BlcnR5KHQpOnNbdF09XCJcIil9KSk7Zm9yKGNvbnN0IHQgaW4gcil7Y29uc3QgZT1yW3RdO251bGwhPWUmJih0aGlzLmN0LmFkZCh0KSx0LmluY2x1ZGVzKFwiLVwiKT9zLnNldFByb3BlcnR5KHQsZSk6c1t0XT1lKX1yZXR1cm4gdH19KTtleHBvcnR7aSBhcyBzdHlsZU1hcH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZS1tYXAuanMubWFwXG4iLG51bGwsbnVsbCwiLyoqXG4gKiBVdGlsaXR5IG1vZHVsZSB0byB3b3JrIHdpdGgga2V5LXZhbHVlIHN0b3Jlcy5cbiAqXG4gKiBAbW9kdWxlIG1hcFxuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBNYXAgaW5zdGFuY2UuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJuIHtNYXA8YW55LCBhbnk+fVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gKCkgPT4gbmV3IE1hcCgpXG5cbi8qKlxuICogQ29weSBhIE1hcCBvYmplY3QgaW50byBhIGZyZXNoIE1hcCBvYmplY3QuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgWCxZXG4gKiBAcGFyYW0ge01hcDxYLFk+fSBtXG4gKiBAcmV0dXJuIHtNYXA8WCxZPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvcHkgPSBtID0+IHtcbiAgY29uc3QgciA9IGNyZWF0ZSgpXG4gIG0uZm9yRWFjaCgodiwgaykgPT4geyByLnNldChrLCB2KSB9KVxuICByZXR1cm4gclxufVxuXG4vKipcbiAqIEdldCBtYXAgcHJvcGVydHkuIENyZWF0ZSBUIGlmIHByb3BlcnR5IGlzIHVuZGVmaW5lZCBhbmQgc2V0IFQgb24gbWFwLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBsaXN0ZW5lcnMgPSBtYXAuc2V0SWZVbmRlZmluZWQoZXZlbnRzLCAnZXZlbnROYW1lJywgc2V0LmNyZWF0ZSlcbiAqIGxpc3RlbmVycy5hZGQobGlzdGVuZXIpXG4gKiBgYGBcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBULEtcbiAqIEBwYXJhbSB7TWFwPEssIFQ+fSBtYXBcbiAqIEBwYXJhbSB7S30ga2V5XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6VH0gY3JlYXRlVFxuICogQHJldHVybiB7VH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldElmVW5kZWZpbmVkID0gKG1hcCwga2V5LCBjcmVhdGVUKSA9PiB7XG4gIGxldCBzZXQgPSBtYXAuZ2V0KGtleSlcbiAgaWYgKHNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWFwLnNldChrZXksIHNldCA9IGNyZWF0ZVQoKSlcbiAgfVxuICByZXR1cm4gc2V0XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBBcnJheSBhbmQgcG9wdWxhdGVzIGl0IHdpdGggdGhlIGNvbnRlbnQgb2YgYWxsIGtleS12YWx1ZSBwYWlycyB1c2luZyB0aGUgYGYodmFsdWUsIGtleSlgIGZ1bmN0aW9uLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIEtcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAdGVtcGxhdGUgUlxuICogQHBhcmFtIHtNYXA8SyxWPn0gbVxuICogQHBhcmFtIHtmdW5jdGlvbihWLEspOlJ9IGZcbiAqIEByZXR1cm4ge0FycmF5PFI+fVxuICovXG5leHBvcnQgY29uc3QgbWFwID0gKG0sIGYpID0+IHtcbiAgY29uc3QgcmVzID0gW11cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgbSkge1xuICAgIHJlcy5wdXNoKGYodmFsdWUsIGtleSkpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgYW55IGtleS12YWx1ZSBwYWlycyBwYXNzIHRoZSB0ZXN0IGltcGxlbWVudGVkIGJ5IGBmKHZhbHVlLCBrZXkpYC5cbiAqXG4gKiBAdG9kbyBzaG91bGQgcmVuYW1lIHRvIHNvbWUgLSBzaW1pbGFybHkgdG8gQXJyYXkuc29tZVxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIEtcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge01hcDxLLFY+fSBtXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFYsSyk6Ym9vbGVhbn0gZlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGFueSA9IChtLCBmKSA9PiB7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG0pIHtcbiAgICBpZiAoZih2YWx1ZSwga2V5KSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogVGVzdHMgd2hldGhlciBhbGwga2V5LXZhbHVlIHBhaXJzIHBhc3MgdGhlIHRlc3QgaW1wbGVtZW50ZWQgYnkgYGYodmFsdWUsIGtleSlgLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIEtcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge01hcDxLLFY+fSBtXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFYsSyk6Ym9vbGVhbn0gZlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGFsbCA9IChtLCBmKSA9PiB7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG0pIHtcbiAgICBpZiAoIWYodmFsdWUsIGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuIiwiLyoqXG4gKiBVdGlsaXR5IG1vZHVsZSB0byB3b3JrIHdpdGggc2V0cy5cbiAqXG4gKiBAbW9kdWxlIHNldFxuICovXG5cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSAoKSA9PiBuZXcgU2V0KClcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtTZXQ8VD59IHNldFxuICogQHJldHVybiB7QXJyYXk8VD59XG4gKi9cbmV4cG9ydCBjb25zdCB0b0FycmF5ID0gc2V0ID0+IEFycmF5LmZyb20oc2V0KVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1NldDxUPn0gc2V0XG4gKiBAcmV0dXJuIHtUfVxuICovXG5leHBvcnQgY29uc3QgZmlyc3QgPSBzZXQgPT4ge1xuICByZXR1cm4gc2V0LnZhbHVlcygpLm5leHQoKS52YWx1ZSB8fCB1bmRlZmluZWRcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtJdGVyYWJsZTxUPn0gZW50cmllc1xuICogQHJldHVybiB7U2V0PFQ+fVxuICovXG5leHBvcnQgY29uc3QgZnJvbSA9IGVudHJpZXMgPT4ge1xuICByZXR1cm4gbmV3IFNldChlbnRyaWVzKVxufVxuIiwiLyoqXG4gKiBVdGlsaXR5IG1vZHVsZSB0byB3b3JrIHdpdGggQXJyYXlzLlxuICpcbiAqIEBtb2R1bGUgYXJyYXlcbiAqL1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBUaGUgZWxlbWVudCBtdXN0IGV4aXN0XG4gKlxuICogQHRlbXBsYXRlIExcbiAqIEBwYXJhbSB7QXJyYXk8TD59IGFyclxuICogQHJldHVybiB7TH1cbiAqL1xuZXhwb3J0IGNvbnN0IGxhc3QgPSBhcnIgPT4gYXJyW2Fyci5sZW5ndGggLSAxXVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBDXG4gKiBAcmV0dXJuIHtBcnJheTxDPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9ICgpID0+IC8qKiBAdHlwZSB7QXJyYXk8Qz59ICovIChbXSlcblxuLyoqXG4gKiBAdGVtcGxhdGUgRFxuICogQHBhcmFtIHtBcnJheTxEPn0gYVxuICogQHJldHVybiB7QXJyYXk8RD59XG4gKi9cbmV4cG9ydCBjb25zdCBjb3B5ID0gYSA9PiAvKiogQHR5cGUge0FycmF5PEQ+fSAqLyAoYS5zbGljZSgpKVxuXG4vKipcbiAqIEFwcGVuZCBlbGVtZW50cyBmcm9tIHNyYyB0byBkZXN0XG4gKlxuICogQHRlbXBsYXRlIE1cbiAqIEBwYXJhbSB7QXJyYXk8TT59IGRlc3RcbiAqIEBwYXJhbSB7QXJyYXk8TT59IHNyY1xuICovXG5leHBvcnQgY29uc3QgYXBwZW5kVG8gPSAoZGVzdCwgc3JjKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3JjLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVzdC5wdXNoKHNyY1tpXSlcbiAgfVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgc29tZXRoaW5nIGFycmF5LWxpa2UgdG8gYW4gYWN0dWFsIEFycmF5LlxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7QXJyYXlMaWtlPFQ+fEl0ZXJhYmxlPFQ+fSBhcnJheWxpa2VcbiAqIEByZXR1cm4ge1R9XG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tID0gQXJyYXkuZnJvbVxuXG4vKipcbiAqIFRydWUgaWZmIGNvbmRpdGlvbiBob2xkcyBvbiBldmVyeSBlbGVtZW50IGluIHRoZSBBcnJheS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBJVEVNXG4gKlxuICogQHBhcmFtIHtBcnJheTxJVEVNPn0gYXJyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKElURU0sIG51bWJlciwgQXJyYXk8SVRFTT4pOmJvb2xlYW59IGZcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBldmVyeSA9IChhcnIsIGYpID0+IGFyci5ldmVyeShmKVxuXG4vKipcbiAqIFRydWUgaWZmIGNvbmRpdGlvbiBob2xkcyBvbiBzb21lIGVsZW1lbnQgaW4gdGhlIEFycmF5LlxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIFNcbiAqIEBwYXJhbSB7QXJyYXk8Uz59IGFyclxuICogQHBhcmFtIHtmdW5jdGlvbihTLCBudW1iZXIsIEFycmF5PFM+KTpib29sZWFufSBmXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3Qgc29tZSA9IChhcnIsIGYpID0+IGFyci5zb21lKGYpXG5cbi8qKlxuICogQHRlbXBsYXRlIEVMRU1cbiAqXG4gKiBAcGFyYW0ge0FycmF5PEVMRU0+fSBhXG4gKiBAcGFyYW0ge0FycmF5PEVMRU0+fSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgZXF1YWxGbGF0ID0gKGEsIGIpID0+IGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBldmVyeShhLCAoaXRlbSwgaW5kZXgpID0+IGl0ZW0gPT09IGJbaW5kZXhdKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBFTEVNXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PEVMRU0+Pn0gYXJyXG4gKiBAcmV0dXJuIHtBcnJheTxFTEVNPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGZsYXR0ZW4gPSBhcnIgPT4gYXJyLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYy5jb25jYXQodmFsKSwgW10pXG5cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheVxuIiwiLyoqXG4gKiBPYnNlcnZhYmxlIGNsYXNzIHByb3RvdHlwZS5cbiAqXG4gKiBAbW9kdWxlIG9ic2VydmFibGVcbiAqL1xuXG5pbXBvcnQgKiBhcyBtYXAgZnJvbSAnLi9tYXAuanMnXG5pbXBvcnQgKiBhcyBzZXQgZnJvbSAnLi9zZXQuanMnXG5pbXBvcnQgKiBhcyBhcnJheSBmcm9tICcuL2FycmF5LmpzJ1xuXG4vKipcbiAqIEhhbmRsZXMgbmFtZWQgZXZlbnRzLlxuICpcbiAqIEB0ZW1wbGF0ZSBOXG4gKi9cbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8qKlxuICAgICAqIFNvbWUgZGVzYy5cbiAgICAgKiBAdHlwZSB7TWFwPE4sIGFueT59XG4gICAgICovXG4gICAgdGhpcy5fb2JzZXJ2ZXJzID0gbWFwLmNyZWF0ZSgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtOfSBuYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZcbiAgICovXG4gIG9uIChuYW1lLCBmKSB7XG4gICAgbWFwLnNldElmVW5kZWZpbmVkKHRoaXMuX29ic2VydmVycywgbmFtZSwgc2V0LmNyZWF0ZSkuYWRkKGYpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtOfSBuYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZcbiAgICovXG4gIG9uY2UgKG5hbWUsIGYpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gIHsuLi5hbnl9IGFyZ3NcbiAgICAgKi9cbiAgICBjb25zdCBfZiA9ICguLi5hcmdzKSA9PiB7XG4gICAgICB0aGlzLm9mZihuYW1lLCBfZilcbiAgICAgIGYoLi4uYXJncylcbiAgICB9XG4gICAgdGhpcy5vbihuYW1lLCBfZilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge059IG5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZlxuICAgKi9cbiAgb2ZmIChuYW1lLCBmKSB7XG4gICAgY29uc3Qgb2JzZXJ2ZXJzID0gdGhpcy5fb2JzZXJ2ZXJzLmdldChuYW1lKVxuICAgIGlmIChvYnNlcnZlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JzZXJ2ZXJzLmRlbGV0ZShmKVxuICAgICAgaWYgKG9ic2VydmVycy5zaXplID09PSAwKSB7XG4gICAgICAgIHRoaXMuX29ic2VydmVycy5kZWxldGUobmFtZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW1pdCBhIG5hbWVkIGV2ZW50LiBBbGwgcmVnaXN0ZXJlZCBldmVudCBsaXN0ZW5lcnMgdGhhdCBsaXN0ZW4gdG8gdGhlXG4gICAqIHNwZWNpZmllZCBuYW1lIHdpbGwgcmVjZWl2ZSB0aGUgZXZlbnQuXG4gICAqXG4gICAqIEB0b2RvIFRoaXMgc2hvdWxkIGNhdGNoIGV4Y2VwdGlvbnNcbiAgICpcbiAgICogQHBhcmFtIHtOfSBuYW1lIFRoZSBldmVudCBuYW1lLlxuICAgKiBAcGFyYW0ge0FycmF5PGFueT59IGFyZ3MgVGhlIGFyZ3VtZW50cyB0aGF0IGFyZSBhcHBsaWVkIHRvIHRoZSBldmVudCBsaXN0ZW5lci5cbiAgICovXG4gIGVtaXQgKG5hbWUsIGFyZ3MpIHtcbiAgICAvLyBjb3B5IGFsbCBsaXN0ZW5lcnMgdG8gYW4gYXJyYXkgZmlyc3QgdG8gbWFrZSBzdXJlIHRoYXQgbm8gZXZlbnQgaXMgZW1pdHRlZCB0byBsaXN0ZW5lcnMgdGhhdCBhcmUgc3Vic2NyaWJlZCB3aGlsZSB0aGUgZXZlbnQgaGFuZGxlciBpcyBjYWxsZWQuXG4gICAgcmV0dXJuIGFycmF5LmZyb20oKHRoaXMuX29ic2VydmVycy5nZXQobmFtZSkgfHwgbWFwLmNyZWF0ZSgpKS52YWx1ZXMoKSkuZm9yRWFjaChmID0+IGYoLi4uYXJncykpXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLl9vYnNlcnZlcnMgPSBtYXAuY3JlYXRlKClcbiAgfVxufVxuIiwiLyoqXG4gKiBDb21tb24gTWF0aCBleHByZXNzaW9ucy5cbiAqXG4gKiBAbW9kdWxlIG1hdGhcbiAqL1xuXG5leHBvcnQgY29uc3QgZmxvb3IgPSBNYXRoLmZsb29yXG5leHBvcnQgY29uc3QgY2VpbCA9IE1hdGguY2VpbFxuZXhwb3J0IGNvbnN0IGFicyA9IE1hdGguYWJzXG5leHBvcnQgY29uc3QgaW11bCA9IE1hdGguaW11bFxuZXhwb3J0IGNvbnN0IHJvdW5kID0gTWF0aC5yb3VuZFxuZXhwb3J0IGNvbnN0IGxvZzEwID0gTWF0aC5sb2cxMFxuZXhwb3J0IGNvbnN0IGxvZzIgPSBNYXRoLmxvZzJcbmV4cG9ydCBjb25zdCBsb2cgPSBNYXRoLmxvZ1xuZXhwb3J0IGNvbnN0IHNxcnQgPSBNYXRoLnNxcnRcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBhXG4gKiBAcGFyYW0ge251bWJlcn0gYlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgc3VtIG9mIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGNvbnN0IGFkZCA9IChhLCBiKSA9PiBhICsgYlxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBiXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzbWFsbGVyIGVsZW1lbnQgb2YgYSBhbmQgYlxuICovXG5leHBvcnQgY29uc3QgbWluID0gKGEsIGIpID0+IGEgPCBiID8gYSA6IGJcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBhXG4gKiBAcGFyYW0ge251bWJlcn0gYlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgYmlnZ2VyIGVsZW1lbnQgb2YgYSBhbmQgYlxuICovXG5leHBvcnQgY29uc3QgbWF4ID0gKGEsIGIpID0+IGEgPiBiID8gYSA6IGJcblxuZXhwb3J0IGNvbnN0IGlzTmFOID0gTnVtYmVyLmlzTmFOXG5cbmV4cG9ydCBjb25zdCBwb3cgPSBNYXRoLnBvd1xuLyoqXG4gKiBCYXNlIDEwIGV4cG9uZW50aWFsIGZ1bmN0aW9uLiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiAxMCByYWlzZWQgdG8gdGhlIHBvd2VyIG9mIHBvdy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gZXhwXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBleHAxMCA9IGV4cCA9PiBNYXRoLnBvdygxMCwgZXhwKVxuXG5leHBvcnQgY29uc3Qgc2lnbiA9IE1hdGguc2lnblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXZXRoZXIgbiBpcyBuZWdhdGl2ZS4gVGhpcyBmdW5jdGlvbiBhbHNvIGRpZmZlcmVudGlhdGVzIGJldHdlZW4gLTAgYW5kICswXG4gKi9cbmV4cG9ydCBjb25zdCBpc05lZ2F0aXZlWmVybyA9IG4gPT4gbiAhPT0gMCA/IG4gPCAwIDogMSAvIG4gPCAwXG4iLCIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIHdvcmsgd2l0aCBzdHJpbmdzLlxuICpcbiAqIEBtb2R1bGUgc3RyaW5nXG4gKi9cblxuZXhwb3J0IGNvbnN0IGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbmV4cG9ydCBjb25zdCBmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnRcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCB0b0xvd2VyQ2FzZSA9IHMgPT4gcy50b0xvd2VyQ2FzZSgpXG5cbmNvbnN0IHRyaW1MZWZ0UmVnZXggPSAvXlxccyovZ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCB0cmltTGVmdCA9IHMgPT4gcy5yZXBsYWNlKHRyaW1MZWZ0UmVnZXgsICcnKVxuXG5jb25zdCBmcm9tQ2FtZWxDYXNlUmVnZXggPSAvKFtBLVpdKS9nXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZXBhcmF0b3JcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb21DYW1lbENhc2UgPSAocywgc2VwYXJhdG9yKSA9PiB0cmltTGVmdChzLnJlcGxhY2UoZnJvbUNhbWVsQ2FzZVJlZ2V4LCBtYXRjaCA9PiBgJHtzZXBhcmF0b3J9JHt0b0xvd2VyQ2FzZShtYXRjaCl9YCkpXG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgdXRmOEJ5dGVMZW5ndGhcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IHV0ZjhCeXRlTGVuZ3RoID0gc3RyID0+IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKS5sZW5ndGhcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5leHBvcnQgY29uc3QgX2VuY29kZVV0ZjhQb2x5ZmlsbCA9IHN0ciA9PiB7XG4gIGNvbnN0IGVuY29kZWRTdHJpbmcgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSlcbiAgY29uc3QgbGVuID0gZW5jb2RlZFN0cmluZy5sZW5ndGhcbiAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYnVmW2ldID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChlbmNvZGVkU3RyaW5nLmNvZGVQb2ludEF0KGkpKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCB1dGY4VGV4dEVuY29kZXIgPSAvKiogQHR5cGUge1RleHRFbmNvZGVyfSAqLyAodHlwZW9mIFRleHRFbmNvZGVyICE9PSAndW5kZWZpbmVkJyA/IG5ldyBUZXh0RW5jb2RlcigpIDogbnVsbClcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5leHBvcnQgY29uc3QgX2VuY29kZVV0ZjhOYXRpdmUgPSBzdHIgPT4gdXRmOFRleHRFbmNvZGVyLmVuY29kZShzdHIpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVVdGY4ID0gdXRmOFRleHRFbmNvZGVyID8gX2VuY29kZVV0ZjhOYXRpdmUgOiBfZW5jb2RlVXRmOFBvbHlmaWxsXG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IF9kZWNvZGVVdGY4UG9seWZpbGwgPSBidWYgPT4ge1xuICBsZXQgcmVtYWluaW5nTGVuID0gYnVmLmxlbmd0aFxuICBsZXQgZW5jb2RlZFN0cmluZyA9ICcnXG4gIGxldCBidWZQb3MgPSAwXG4gIHdoaWxlIChyZW1haW5pbmdMZW4gPiAwKSB7XG4gICAgY29uc3QgbmV4dExlbiA9IHJlbWFpbmluZ0xlbiA8IDEwMDAwID8gcmVtYWluaW5nTGVuIDogMTAwMDBcbiAgICBjb25zdCBieXRlcyA9IGJ1Zi5zdWJhcnJheShidWZQb3MsIGJ1ZlBvcyArIG5leHRMZW4pXG4gICAgYnVmUG9zICs9IG5leHRMZW5cbiAgICAvLyBTdGFydGluZyB3aXRoIEVTNS4xIHdlIGNhbiBzdXBwbHkgYSBnZW5lcmljIGFycmF5LWxpa2Ugb2JqZWN0IGFzIGFyZ3VtZW50c1xuICAgIGVuY29kZWRTdHJpbmcgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQuYXBwbHkobnVsbCwgLyoqIEB0eXBlIHthbnl9ICovIChieXRlcykpXG4gICAgcmVtYWluaW5nTGVuIC09IG5leHRMZW5cbiAgfVxuICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShlbmNvZGVkU3RyaW5nKSlcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBsZXQgdXRmOFRleHREZWNvZGVyID0gdHlwZW9mIFRleHREZWNvZGVyID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiBuZXcgVGV4dERlY29kZXIoJ3V0Zi04JywgeyBmYXRhbDogdHJ1ZSwgaWdub3JlQk9NOiB0cnVlIH0pXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAodXRmOFRleHREZWNvZGVyICYmIHV0ZjhUZXh0RGVjb2Rlci5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSkubGVuZ3RoID09PSAxKSB7XG4gIC8vIFNhZmFyaSBkb2Vzbid0IGhhbmRsZSBCT00gY29ycmVjdGx5LlxuICAvLyBUaGlzIGZpeGVzIGEgYnVnIGluIFNhZmFyaSAxMy4wLjUgd2hlcmUgaXQgcHJvZHVjZXMgYSBCT00gdGhlIGZpcnN0IHRpbWUgaXQgaXMgY2FsbGVkLlxuICAvLyB1dGY4VGV4dERlY29kZXIuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpLmxlbmd0aCA9PT0gMSBvbiB0aGUgZmlyc3QgY2FsbCBhbmRcbiAgLy8gdXRmOFRleHREZWNvZGVyLmRlY29kZShuZXcgVWludDhBcnJheSgpKS5sZW5ndGggPT09IDEgb24gdGhlIHNlY29uZCBjYWxsXG4gIC8vIEFub3RoZXIgaXNzdWUgaXMgdGhhdCBmcm9tIHRoZW4gb24gbm8gQk9NIGNoYXJzIGFyZSByZWNvZ25pemVkIGFueW1vcmVcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdXRmOFRleHREZWNvZGVyID0gbnVsbFxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBfZGVjb2RlVXRmOE5hdGl2ZSA9IGJ1ZiA9PiAvKiogQHR5cGUge1RleHREZWNvZGVyfSAqLyAodXRmOFRleHREZWNvZGVyKS5kZWNvZGUoYnVmKVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZGVjb2RlVXRmOCA9IHV0ZjhUZXh0RGVjb2RlciA/IF9kZWNvZGVVdGY4TmF0aXZlIDogX2RlY29kZVV0ZjhQb2x5ZmlsbFxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIGluaXRpYWwgc3RyaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggU3RhcnRpbmcgcG9zaXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSByZW1vdmUgTnVtYmVyIG9mIGNoYXJhY3RlcnMgdG8gcmVtb3ZlXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5zZXJ0IE5ldyBjb250ZW50IHRvIGluc2VydFxuICovXG5leHBvcnQgY29uc3Qgc3BsaWNlID0gKHN0ciwgaW5kZXgsIHJlbW92ZSwgaW5zZXJ0ID0gJycpID0+IHN0ci5zbGljZSgwLCBpbmRleCkgKyBpbnNlcnQgKyBzdHIuc2xpY2UoaW5kZXggKyByZW1vdmUpXG4iLCIvKipcbiAqIE9mdGVuIHVzZWQgY29uZGl0aW9ucy5cbiAqXG4gKiBAbW9kdWxlIGNvbmRpdGlvbnNcbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R8bnVsbHx1bmRlZmluZWR9IHZcbiAqIEByZXR1cm4ge1R8bnVsbH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCB1bmRlZmluZWRUb051bGwgPSB2ID0+IHYgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB2XG4iLCIvKiBnbG9iYWwgbG9jYWxTdG9yYWdlLCBhZGRFdmVudExpc3RlbmVyICovXG5cbi8qKlxuICogSXNvbW9ycGhpYyB2YXJpYWJsZSBzdG9yYWdlLlxuICpcbiAqIFVzZXMgTG9jYWxTdG9yYWdlIGluIHRoZSBicm93c2VyIGFuZCBmYWxscyBiYWNrIHRvIGluLW1lbW9yeSBzdG9yYWdlLlxuICpcbiAqIEBtb2R1bGUgc3RvcmFnZVxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5jbGFzcyBWYXJTdG9yYWdlUG9seWZpbGwge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5tYXAgPSBuZXcgTWFwKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7YW55fSBuZXdWYWx1ZVxuICAgKi9cbiAgc2V0SXRlbSAoa2V5LCBuZXdWYWx1ZSkge1xuICAgIHRoaXMubWFwLnNldChrZXksIG5ld1ZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICovXG4gIGdldEl0ZW0gKGtleSkge1xuICAgIHJldHVybiB0aGlzLm1hcC5nZXQoa2V5KVxuICB9XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEB0eXBlIHthbnl9XG4gKi9cbmxldCBfbG9jYWxTdG9yYWdlID0gbmV3IFZhclN0b3JhZ2VQb2x5ZmlsbCgpXG5sZXQgdXNlUG9seWZpbGwgPSB0cnVlXG5cbnRyeSB7XG4gIC8vIGlmIHRoZSBzYW1lLW9yaWdpbiBydWxlIGlzIHZpb2xhdGVkLCBhY2Nlc3NpbmcgbG9jYWxTdG9yYWdlIG1pZ2h0IHRocm93biBhbiBlcnJvclxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBfbG9jYWxTdG9yYWdlID0gbG9jYWxTdG9yYWdlXG4gICAgdXNlUG9seWZpbGwgPSBmYWxzZVxuICB9XG59IGNhdGNoIChlKSB7IH1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogVGhpcyBpcyBiYXNpY2FsbHkgbG9jYWxTdG9yYWdlIGluIGJyb3dzZXIsIG9yIGEgcG9seWZpbGwgaW4gbm9kZWpzXG4gKi9cbmV4cG9ydCBjb25zdCB2YXJTdG9yYWdlID0gX2xvY2FsU3RvcmFnZVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBBIHBvbHlmaWxsIGZvciBgYWRkRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIGV2ZW50ID0+IHsuLn0pYCB0aGF0IGRvZXMgbm90aGluZyBpZiB0aGUgcG9seWZpbGwgaXMgYmVpbmcgdXNlZC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHsga2V5OiBzdHJpbmcsIG5ld1ZhbHVlOiBzdHJpbmcsIG9sZFZhbHVlOiBzdHJpbmcgfSk6IHZvaWR9IGV2ZW50SGFuZGxlclxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBvbkNoYW5nZSA9IGV2ZW50SGFuZGxlciA9PiB1c2VQb2x5ZmlsbCB8fCBhZGRFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgLyoqIEB0eXBlIHthbnl9ICovIChldmVudEhhbmRsZXIpKVxuIiwiLyoqXG4gKiBJc29tb3JwaGljIG1vZHVsZSB0byB3b3JrIGFjY2VzcyB0aGUgZW52aXJvbm1lbnQgKHF1ZXJ5IHBhcmFtcywgZW52IHZhcmlhYmxlcykuXG4gKlxuICogQG1vZHVsZSBtYXBcbiAqL1xuXG5pbXBvcnQgKiBhcyBtYXAgZnJvbSAnLi9tYXAuanMnXG5pbXBvcnQgKiBhcyBzdHJpbmcgZnJvbSAnLi9zdHJpbmcuanMnXG5pbXBvcnQgKiBhcyBjb25kaXRpb25zIGZyb20gJy4vY29uZGl0aW9ucy5qcydcbmltcG9ydCAqIGFzIHN0b3JhZ2UgZnJvbSAnLi9zdG9yYWdlLmpzJ1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLy8gQHRzLWlnbm9yZVxuZXhwb3J0IGNvbnN0IGlzTm9kZSA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLnJlbGVhc2UgJiYgL25vZGV8aW9cXC5qcy8udGVzdChwcm9jZXNzLnJlbGVhc2UubmFtZSlcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgIWlzTm9kZVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc01hYyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnID8gL01hYy8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pIDogZmFsc2VcblxuLyoqXG4gKiBAdHlwZSB7TWFwPHN0cmluZyxzdHJpbmc+fVxuICovXG5sZXQgcGFyYW1zXG5jb25zdCBhcmdzID0gW11cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmNvbnN0IGNvbXB1dGVQYXJhbXMgPSAoKSA9PiB7XG4gIGlmIChwYXJhbXMgPT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHBhcmFtcyA9IG1hcC5jcmVhdGUoKVxuICAgICAgY29uc3QgcGFyZ3MgPSBwcm9jZXNzLmFyZ3ZcbiAgICAgIGxldCBjdXJyUGFyYW1OYW1lID0gbnVsbFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcGFyZyA9IHBhcmdzW2ldXG4gICAgICAgIGlmIChwYXJnWzBdID09PSAnLScpIHtcbiAgICAgICAgICBpZiAoY3VyclBhcmFtTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGFyYW1zLnNldChjdXJyUGFyYW1OYW1lLCAnJylcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VyclBhcmFtTmFtZSA9IHBhcmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY3VyclBhcmFtTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGFyYW1zLnNldChjdXJyUGFyYW1OYW1lLCBwYXJnKVxuICAgICAgICAgICAgY3VyclBhcmFtTmFtZSA9IG51bGxcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJncy5wdXNoKHBhcmcpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VyclBhcmFtTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICBwYXJhbXMuc2V0KGN1cnJQYXJhbU5hbWUsICcnKVxuICAgICAgfVxuICAgIC8vIGluIFJlYWN0TmF0aXZlIGZvciBleGFtcGxlIHRoaXMgd291bGQgbm90IGJlIHRydWUgKHVubGVzcyBjb25uZWN0ZWQgdG8gdGhlIFJlbW90ZSBEZWJ1Z2dlcilcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBsb2NhdGlvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHBhcmFtcyA9IG1hcC5jcmVhdGUoKVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICA7KGxvY2F0aW9uLnNlYXJjaCB8fCAnPycpLnNsaWNlKDEpLnNwbGl0KCcmJykuZm9yRWFjaChrdiA9PiB7XG4gICAgICAgIGlmIChrdi5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBrdi5zcGxpdCgnPScpXG4gICAgICAgICAgcGFyYW1zLnNldChgLS0ke3N0cmluZy5mcm9tQ2FtZWxDYXNlKGtleSwgJy0nKX1gLCB2YWx1ZSlcbiAgICAgICAgICBwYXJhbXMuc2V0KGAtJHtzdHJpbmcuZnJvbUNhbWVsQ2FzZShrZXksICctJyl9YCwgdmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmFtcyA9IG1hcC5jcmVhdGUoKVxuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyYW1zXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgaGFzUGFyYW0gPSBuYW1lID0+IGNvbXB1dGVQYXJhbXMoKS5oYXMobmFtZSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGRlZmF1bHRWYWxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBnZXRQYXJhbSA9IChuYW1lLCBkZWZhdWx0VmFsKSA9PiBjb21wdXRlUGFyYW1zKCkuZ2V0KG5hbWUpIHx8IGRlZmF1bHRWYWxcbi8vIGV4cG9ydCBjb25zdCBnZXRBcmdzID0gbmFtZSA9PiBjb21wdXRlUGFyYW1zKCkgJiYgYXJnc1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBnZXRWYXJpYWJsZSA9IG5hbWUgPT4gaXNOb2RlID8gY29uZGl0aW9ucy51bmRlZmluZWRUb051bGwocHJvY2Vzcy5lbnZbbmFtZS50b1VwcGVyQ2FzZSgpXSkgOiBjb25kaXRpb25zLnVuZGVmaW5lZFRvTnVsbChzdG9yYWdlLnZhclN0b3JhZ2UuZ2V0SXRlbShuYW1lKSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybiB7c3RyaW5nfG51bGx9XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRDb25mID0gbmFtZSA9PiBjb21wdXRlUGFyYW1zKCkuZ2V0KCctLScgKyBuYW1lKSB8fCBnZXRWYXJpYWJsZShuYW1lKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGhhc0NvbmYgPSBuYW1lID0+IGhhc1BhcmFtKCctLScgKyBuYW1lKSB8fCBnZXRWYXJpYWJsZShuYW1lKSAhPT0gbnVsbFxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHByb2R1Y3Rpb24gPSBoYXNDb25mKCdwcm9kdWN0aW9uJylcbiIsIi8qKlxuICogRWZmaWNpZW50IHNjaGVtYS1sZXNzIGJpbmFyeSBkZWNvZGluZyB3aXRoIHN1cHBvcnQgZm9yIHZhcmlhYmxlIGxlbmd0aCBlbmNvZGluZy5cbiAqXG4gKiBVc2UgW2xpYjAvZGVjb2RpbmddIHdpdGggW2xpYjAvZW5jb2RpbmddLiBFdmVyeSBlbmNvZGluZyBmdW5jdGlvbiBoYXMgYSBjb3JyZXNwb25kaW5nIGRlY29kaW5nIGZ1bmN0aW9uLlxuICpcbiAqIEVuY29kZXMgbnVtYmVycyBpbiBsaXR0bGUtZW5kaWFuIG9yZGVyIChsZWFzdCB0byBtb3N0IHNpZ25pZmljYW50IGJ5dGUgb3JkZXIpXG4gKiBhbmQgaXMgY29tcGF0aWJsZSB3aXRoIEdvbGFuZydzIGJpbmFyeSBlbmNvZGluZyAoaHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9lbmNvZGluZy9iaW5hcnkvKVxuICogd2hpY2ggaXMgYWxzbyB1c2VkIGluIFByb3RvY29sIEJ1ZmZlcnMuXG4gKlxuICogYGBganNcbiAqIC8vIGVuY29kaW5nIHN0ZXBcbiAqIGNvbnN0IGVuY29kZXIgPSBuZXcgZW5jb2RpbmcuY3JlYXRlRW5jb2RlcigpXG4gKiBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2RlciwgMjU2KVxuICogZW5jb2Rpbmcud3JpdGVWYXJTdHJpbmcoZW5jb2RlciwgJ0hlbGxvIHdvcmxkIScpXG4gKiBjb25zdCBidWYgPSBlbmNvZGluZy50b1VpbnQ4QXJyYXkoZW5jb2RlcilcbiAqIGBgYFxuICpcbiAqIGBgYGpzXG4gKiAvLyBkZWNvZGluZyBzdGVwXG4gKiBjb25zdCBkZWNvZGVyID0gbmV3IGRlY29kaW5nLmNyZWF0ZURlY29kZXIoYnVmKVxuICogZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2RlcikgLy8gPT4gMjU2XG4gKiBkZWNvZGluZy5yZWFkVmFyU3RyaW5nKGRlY29kZXIpIC8vID0+ICdIZWxsbyB3b3JsZCEnXG4gKiBkZWNvZGluZy5oYXNDb250ZW50KGRlY29kZXIpIC8vID0+IGZhbHNlIC0gYWxsIGRhdGEgaXMgcmVhZFxuICogYGBgXG4gKlxuICogQG1vZHVsZSBkZWNvZGluZ1xuICovXG5cbmltcG9ydCAqIGFzIGJ1ZmZlciBmcm9tICcuL2J1ZmZlci5qcydcbmltcG9ydCAqIGFzIGJpbmFyeSBmcm9tICcuL2JpbmFyeS5qcydcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi9tYXRoLmpzJ1xuXG4vKipcbiAqIEEgRGVjb2RlciBoYW5kbGVzIHRoZSBkZWNvZGluZyBvZiBhbiBVaW50OEFycmF5LlxuICovXG5leHBvcnQgY2xhc3MgRGVjb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXkgQmluYXJ5IGRhdGEgdG8gZGVjb2RlXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodWludDhBcnJheSkge1xuICAgIC8qKlxuICAgICAqIERlY29kaW5nIHRhcmdldC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtVaW50OEFycmF5fVxuICAgICAqL1xuICAgIHRoaXMuYXJyID0gdWludDhBcnJheVxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgZGVjb2RpbmcgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucG9zID0gMFxuICB9XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAqIEByZXR1cm4ge0RlY29kZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVEZWNvZGVyID0gdWludDhBcnJheSA9PiBuZXcgRGVjb2Rlcih1aW50OEFycmF5KVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgaGFzQ29udGVudCA9IGRlY29kZXIgPT4gZGVjb2Rlci5wb3MgIT09IGRlY29kZXIuYXJyLmxlbmd0aFxuXG4vKipcbiAqIENsb25lIGEgZGVjb2RlciBpbnN0YW5jZS5cbiAqIE9wdGlvbmFsbHkgc2V0IGEgbmV3IHBvc2l0aW9uIHBhcmFtZXRlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlciBUaGUgZGVjb2RlciBpbnN0YW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IFtuZXdQb3NdIERlZmF1bHRzIHRvIGN1cnJlbnQgcG9zaXRpb25cbiAqIEByZXR1cm4ge0RlY29kZXJ9IEEgY2xvbmUgb2YgYGRlY29kZXJgXG4gKi9cbmV4cG9ydCBjb25zdCBjbG9uZSA9IChkZWNvZGVyLCBuZXdQb3MgPSBkZWNvZGVyLnBvcykgPT4ge1xuICBjb25zdCBfZGVjb2RlciA9IGNyZWF0ZURlY29kZXIoZGVjb2Rlci5hcnIpXG4gIF9kZWNvZGVyLnBvcyA9IG5ld1Bvc1xuICByZXR1cm4gX2RlY29kZXJcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gVWludDhBcnJheSB2aWV3IG9mIHRoZSBuZXh0IGBsZW5gIGJ5dGVzIGFuZCBhZHZhbmNlIHRoZSBwb3NpdGlvbiBieSBgbGVuYC5cbiAqXG4gKiBJbXBvcnRhbnQ6IFRoZSBVaW50OEFycmF5IHN0aWxsIHBvaW50cyB0byB0aGUgdW5kZXJseWluZyBBcnJheUJ1ZmZlci4gTWFrZSBzdXJlIHRvIGRpc2NhcmQgdGhlIHJlc3VsdCBhcyBzb29uIGFzIHBvc3NpYmxlIHRvIHByZXZlbnQgYW55IG1lbW9yeSBsZWFrcy5cbiAqICAgICAgICAgICAgVXNlIGBidWZmZXIuY29weVVpbnQ4QXJyYXlgIHRvIGNvcHkgdGhlIHJlc3VsdCBpbnRvIGEgbmV3IFVpbnQ4QXJyYXkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXIgVGhlIGRlY29kZXIgaW5zdGFuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVGhlIGxlbmd0aCBvZiBieXRlcyB0byByZWFkXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5leHBvcnQgY29uc3QgcmVhZFVpbnQ4QXJyYXkgPSAoZGVjb2RlciwgbGVuKSA9PiB7XG4gIGNvbnN0IHZpZXcgPSBidWZmZXIuY3JlYXRlVWludDhBcnJheVZpZXdGcm9tQXJyYXlCdWZmZXIoZGVjb2Rlci5hcnIuYnVmZmVyLCBkZWNvZGVyLnBvcyArIGRlY29kZXIuYXJyLmJ5dGVPZmZzZXQsIGxlbilcbiAgZGVjb2Rlci5wb3MgKz0gbGVuXG4gIHJldHVybiB2aWV3XG59XG5cbi8qKlxuICogUmVhZCB2YXJpYWJsZSBsZW5ndGggVWludDhBcnJheS5cbiAqXG4gKiBJbXBvcnRhbnQ6IFRoZSBVaW50OEFycmF5IHN0aWxsIHBvaW50cyB0byB0aGUgdW5kZXJseWluZyBBcnJheUJ1ZmZlci4gTWFrZSBzdXJlIHRvIGRpc2NhcmQgdGhlIHJlc3VsdCBhcyBzb29uIGFzIHBvc3NpYmxlIHRvIHByZXZlbnQgYW55IG1lbW9yeSBsZWFrcy5cbiAqICAgICAgICAgICAgVXNlIGBidWZmZXIuY29weVVpbnQ4QXJyYXlgIHRvIGNvcHkgdGhlIHJlc3VsdCBpbnRvIGEgbmV3IFVpbnQ4QXJyYXkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVmFyVWludDhBcnJheSA9IGRlY29kZXIgPT4gcmVhZFVpbnQ4QXJyYXkoZGVjb2RlciwgcmVhZFZhclVpbnQoZGVjb2RlcikpXG5cbi8qKlxuICogUmVhZCB0aGUgcmVzdCBvZiB0aGUgY29udGVudCBhcyBhbiBBcnJheUJ1ZmZlclxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVGFpbEFzVWludDhBcnJheSA9IGRlY29kZXIgPT4gcmVhZFVpbnQ4QXJyYXkoZGVjb2RlciwgZGVjb2Rlci5hcnIubGVuZ3RoIC0gZGVjb2Rlci5wb3MpXG5cbi8qKlxuICogU2tpcCBvbmUgYnl0ZSwganVtcCB0byB0aGUgbmV4dCBwb3NpdGlvbi5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyIFRoZSBkZWNvZGVyIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBuZXh0IHBvc2l0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBza2lwOCA9IGRlY29kZXIgPT4gZGVjb2Rlci5wb3MrK1xuXG4vKipcbiAqIFJlYWQgb25lIGJ5dGUgYXMgdW5zaWduZWQgaW50ZWdlci5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyIFRoZSBkZWNvZGVyIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRVaW50OCA9IGRlY29kZXIgPT4gZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MrK11cblxuLyoqXG4gKiBSZWFkIDIgYnl0ZXMgYXMgdW5zaWduZWQgaW50ZWdlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICovXG5leHBvcnQgY29uc3QgcmVhZFVpbnQxNiA9IGRlY29kZXIgPT4ge1xuICBjb25zdCB1aW50ID1cbiAgICBkZWNvZGVyLmFycltkZWNvZGVyLnBvc10gK1xuICAgIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDFdIDw8IDgpXG4gIGRlY29kZXIucG9zICs9IDJcbiAgcmV0dXJuIHVpbnRcbn1cblxuLyoqXG4gKiBSZWFkIDQgYnl0ZXMgYXMgdW5zaWduZWQgaW50ZWdlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICovXG5leHBvcnQgY29uc3QgcmVhZFVpbnQzMiA9IGRlY29kZXIgPT4ge1xuICBjb25zdCB1aW50ID1cbiAgICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3NdICtcbiAgICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MgKyAxXSA8PCA4KSArXG4gICAgKGRlY29kZXIuYXJyW2RlY29kZXIucG9zICsgMl0gPDwgMTYpICtcbiAgICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MgKyAzXSA8PCAyNCkpID4+PiAwXG4gIGRlY29kZXIucG9zICs9IDRcbiAgcmV0dXJuIHVpbnRcbn1cblxuLyoqXG4gKiBSZWFkIDQgYnl0ZXMgYXMgdW5zaWduZWQgaW50ZWdlciBpbiBiaWcgZW5kaWFuIG9yZGVyLlxuICogKG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBmaXJzdClcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICovXG5leHBvcnQgY29uc3QgcmVhZFVpbnQzMkJpZ0VuZGlhbiA9IGRlY29kZXIgPT4ge1xuICBjb25zdCB1aW50ID1cbiAgICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MgKyAzXSArXG4gICAgKGRlY29kZXIuYXJyW2RlY29kZXIucG9zICsgMl0gPDwgOCkgK1xuICAgIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDFdIDw8IDE2KSArXG4gICAgKGRlY29kZXIuYXJyW2RlY29kZXIucG9zXSA8PCAyNCkpID4+PiAwXG4gIGRlY29kZXIucG9zICs9IDRcbiAgcmV0dXJuIHVpbnRcbn1cblxuLyoqXG4gKiBMb29rIGFoZWFkIHdpdGhvdXQgaW5jcmVtZW50aW5nIHRoZSBwb3NpdGlvblxuICogdG8gdGhlIG5leHQgYnl0ZSBhbmQgcmVhZCBpdCBhcyB1bnNpZ25lZCBpbnRlZ2VyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEFuIHVuc2lnbmVkIGludGVnZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBwZWVrVWludDggPSBkZWNvZGVyID0+IGRlY29kZXIuYXJyW2RlY29kZXIucG9zXVxuXG4vKipcbiAqIExvb2sgYWhlYWQgd2l0aG91dCBpbmNyZW1lbnRpbmcgdGhlIHBvc2l0aW9uXG4gKiB0byB0aGUgbmV4dCBieXRlIGFuZCByZWFkIGl0IGFzIHVuc2lnbmVkIGludGVnZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge251bWJlcn0gQW4gdW5zaWduZWQgaW50ZWdlci5cbiAqL1xuZXhwb3J0IGNvbnN0IHBlZWtVaW50MTYgPSBkZWNvZGVyID0+XG4gIGRlY29kZXIuYXJyW2RlY29kZXIucG9zXSArXG4gIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDFdIDw8IDgpXG5cbi8qKlxuICogTG9vayBhaGVhZCB3aXRob3V0IGluY3JlbWVudGluZyB0aGUgcG9zaXRpb25cbiAqIHRvIHRoZSBuZXh0IGJ5dGUgYW5kIHJlYWQgaXQgYXMgdW5zaWduZWQgaW50ZWdlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICovXG5leHBvcnQgY29uc3QgcGVla1VpbnQzMiA9IGRlY29kZXIgPT4gKFxuICBkZWNvZGVyLmFycltkZWNvZGVyLnBvc10gK1xuICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MgKyAxXSA8PCA4KSArXG4gIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDJdIDw8IDE2KSArXG4gIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDNdIDw8IDI0KVxuKSA+Pj4gMFxuXG4vKipcbiAqIFJlYWQgdW5zaWduZWQgaW50ZWdlciAoMzJiaXQpIHdpdGggdmFyaWFibGUgbGVuZ3RoLlxuICogMS84dGggb2YgdGhlIHN0b3JhZ2UgaXMgdXNlZCBhcyBlbmNvZGluZyBvdmVyaGVhZC5cbiAqICAqIG51bWJlcnMgPCAyXjcgaXMgc3RvcmVkIGluIG9uZSBieXRsZW5ndGhcbiAqICAqIG51bWJlcnMgPCAyXjE0IGlzIHN0b3JlZCBpbiB0d28gYnlsZW5ndGhcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCBpbnRlZ2VyLmxlbmd0aFxuICovXG5leHBvcnQgY29uc3QgcmVhZFZhclVpbnQgPSBkZWNvZGVyID0+IHtcbiAgbGV0IG51bSA9IDBcbiAgbGV0IGxlbiA9IDBcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCByID0gZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MrK11cbiAgICBudW0gPSBudW0gfCAoKHIgJiBiaW5hcnkuQklUUzcpIDw8IGxlbilcbiAgICBsZW4gKz0gN1xuICAgIGlmIChyIDwgYmluYXJ5LkJJVDgpIHtcbiAgICAgIHJldHVybiBudW0gPj4+IDAgLy8gcmV0dXJuIHVuc2lnbmVkIG51bWJlciFcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGxlbiA+IDUzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludGVnZXIgb3V0IG9mIHJhbmdlIScpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVhZCBzaWduZWQgaW50ZWdlciAoMzJiaXQpIHdpdGggdmFyaWFibGUgbGVuZ3RoLlxuICogMS84dGggb2YgdGhlIHN0b3JhZ2UgaXMgdXNlZCBhcyBlbmNvZGluZyBvdmVyaGVhZC5cbiAqICAqIG51bWJlcnMgPCAyXjcgaXMgc3RvcmVkIGluIG9uZSBieXRsZW5ndGhcbiAqICAqIG51bWJlcnMgPCAyXjE0IGlzIHN0b3JlZCBpbiB0d28gYnlsZW5ndGhcbiAqIEB0b2RvIFRoaXMgc2hvdWxkIHByb2JhYmx5IGNyZWF0ZSB0aGUgaW52ZXJzZSB+bnVtIGlmIG51bWJlciBpcyBuZWdhdGl2ZSAtIGJ1dCB0aGlzIHdvdWxkIGJlIGEgYnJlYWtpbmcgY2hhbmdlLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEFuIHVuc2lnbmVkIGludGVnZXIubGVuZ3RoXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVmFySW50ID0gZGVjb2RlciA9PiB7XG4gIGxldCByID0gZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MrK11cbiAgbGV0IG51bSA9IHIgJiBiaW5hcnkuQklUUzZcbiAgbGV0IGxlbiA9IDZcbiAgY29uc3Qgc2lnbiA9IChyICYgYmluYXJ5LkJJVDcpID4gMCA/IC0xIDogMVxuICBpZiAoKHIgJiBiaW5hcnkuQklUOCkgPT09IDApIHtcbiAgICAvLyBkb24ndCBjb250aW51ZSByZWFkaW5nXG4gICAgcmV0dXJuIHNpZ24gKiBudW1cbiAgfVxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHIgPSBkZWNvZGVyLmFycltkZWNvZGVyLnBvcysrXVxuICAgIG51bSA9IG51bSB8ICgociAmIGJpbmFyeS5CSVRTNykgPDwgbGVuKVxuICAgIGxlbiArPSA3XG4gICAgaWYgKHIgPCBiaW5hcnkuQklUOCkge1xuICAgICAgcmV0dXJuIHNpZ24gKiAobnVtID4+PiAwKVxuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAobGVuID4gNTMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW50ZWdlciBvdXQgb2YgcmFuZ2UhJylcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBMb29rIGFoZWFkIGFuZCByZWFkIHZhclVpbnQgd2l0aG91dCBpbmNyZW1lbnRpbmcgcG9zaXRpb25cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgcGVla1ZhclVpbnQgPSBkZWNvZGVyID0+IHtcbiAgY29uc3QgcG9zID0gZGVjb2Rlci5wb3NcbiAgY29uc3QgcyA9IHJlYWRWYXJVaW50KGRlY29kZXIpXG4gIGRlY29kZXIucG9zID0gcG9zXG4gIHJldHVybiBzXG59XG5cbi8qKlxuICogTG9vayBhaGVhZCBhbmQgcmVhZCB2YXJVaW50IHdpdGhvdXQgaW5jcmVtZW50aW5nIHBvc2l0aW9uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IHBlZWtWYXJJbnQgPSBkZWNvZGVyID0+IHtcbiAgY29uc3QgcG9zID0gZGVjb2Rlci5wb3NcbiAgY29uc3QgcyA9IHJlYWRWYXJJbnQoZGVjb2RlcilcbiAgZGVjb2Rlci5wb3MgPSBwb3NcbiAgcmV0dXJuIHNcbn1cblxuLyoqXG4gKiBSZWFkIHN0cmluZyBvZiB2YXJpYWJsZSBsZW5ndGhcbiAqICogdmFyVWludCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBsZW5ndGggb2YgdGhlIHN0cmluZ1xuICpcbiAqIFRyYW5zZm9ybWluZyB1dGY4IHRvIGEgc3RyaW5nIGlzIHByZXR0eSBleHBlbnNpdmUuIFRoZSBjb2RlIHBlcmZvcm1zIDEweCBiZXR0ZXJcbiAqIHdoZW4gU3RyaW5nLmZyb21Db2RlUG9pbnQgaXMgZmVkIHdpdGggYWxsIGNoYXJhY3RlcnMgYXMgYXJndW1lbnRzLlxuICogQnV0IG1vc3QgZW52aXJvbm1lbnRzIGhhdmUgYSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudHMgcGVyIGZ1bmN0aW9ucy5cbiAqIEZvciBlZmZpZW5jeSByZWFzb25zIHdlIGFwcGx5IGEgbWF4aW11bSBvZiAxMDAwMCBjaGFyYWN0ZXJzIGF0IG9uY2UuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHJlYWQgU3RyaW5nLlxuICovXG5leHBvcnQgY29uc3QgcmVhZFZhclN0cmluZyA9IGRlY29kZXIgPT4ge1xuICBsZXQgcmVtYWluaW5nTGVuID0gcmVhZFZhclVpbnQoZGVjb2RlcilcbiAgaWYgKHJlbWFpbmluZ0xlbiA9PT0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9IGVsc2Uge1xuICAgIGxldCBlbmNvZGVkU3RyaW5nID0gU3RyaW5nLmZyb21Db2RlUG9pbnQocmVhZFVpbnQ4KGRlY29kZXIpKSAvLyByZW1lbWJlciB0byBkZWNyZWFzZSByZW1haW5pbmdMZW5cbiAgICBpZiAoLS1yZW1haW5pbmdMZW4gPCAxMDApIHsgLy8gZG8gbm90IGNyZWF0ZSBhIFVpbnQ4QXJyYXkgZm9yIHNtYWxsIHN0cmluZ3NcbiAgICAgIHdoaWxlIChyZW1haW5pbmdMZW4tLSkge1xuICAgICAgICBlbmNvZGVkU3RyaW5nICs9IFN0cmluZy5mcm9tQ29kZVBvaW50KHJlYWRVaW50OChkZWNvZGVyKSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKHJlbWFpbmluZ0xlbiA+IDApIHtcbiAgICAgICAgY29uc3QgbmV4dExlbiA9IHJlbWFpbmluZ0xlbiA8IDEwMDAwID8gcmVtYWluaW5nTGVuIDogMTAwMDBcbiAgICAgICAgLy8gdGhpcyBpcyBkYW5nZXJvdXMsIHdlIGNyZWF0ZSBhIGZyZXNoIGFycmF5IHZpZXcgZnJvbSB0aGUgZXhpc3RpbmcgYnVmZmVyXG4gICAgICAgIGNvbnN0IGJ5dGVzID0gZGVjb2Rlci5hcnIuc3ViYXJyYXkoZGVjb2Rlci5wb3MsIGRlY29kZXIucG9zICsgbmV4dExlbilcbiAgICAgICAgZGVjb2Rlci5wb3MgKz0gbmV4dExlblxuICAgICAgICAvLyBTdGFydGluZyB3aXRoIEVTNS4xIHdlIGNhbiBzdXBwbHkgYSBnZW5lcmljIGFycmF5LWxpa2Ugb2JqZWN0IGFzIGFyZ3VtZW50c1xuICAgICAgICBlbmNvZGVkU3RyaW5nICs9IFN0cmluZy5mcm9tQ29kZVBvaW50LmFwcGx5KG51bGwsIC8qKiBAdHlwZSB7YW55fSAqLyAoYnl0ZXMpKVxuICAgICAgICByZW1haW5pbmdMZW4gLT0gbmV4dExlblxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShlbmNvZGVkU3RyaW5nKSlcbiAgfVxufVxuXG4vKipcbiAqIExvb2sgYWhlYWQgYW5kIHJlYWQgdmFyU3RyaW5nIHdpdGhvdXQgaW5jcmVtZW50aW5nIHBvc2l0aW9uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IHBlZWtWYXJTdHJpbmcgPSBkZWNvZGVyID0+IHtcbiAgY29uc3QgcG9zID0gZGVjb2Rlci5wb3NcbiAgY29uc3QgcyA9IHJlYWRWYXJTdHJpbmcoZGVjb2RlcilcbiAgZGVjb2Rlci5wb3MgPSBwb3NcbiAgcmV0dXJuIHNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAqIEByZXR1cm4ge0RhdGFWaWV3fVxuICovXG5leHBvcnQgY29uc3QgcmVhZEZyb21EYXRhVmlldyA9IChkZWNvZGVyLCBsZW4pID0+IHtcbiAgY29uc3QgZHYgPSBuZXcgRGF0YVZpZXcoZGVjb2Rlci5hcnIuYnVmZmVyLCBkZWNvZGVyLmFyci5ieXRlT2Zmc2V0ICsgZGVjb2Rlci5wb3MsIGxlbilcbiAgZGVjb2Rlci5wb3MgKz0gbGVuXG4gIHJldHVybiBkdlxufVxuXG4vKipcbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICovXG5leHBvcnQgY29uc3QgcmVhZEZsb2F0MzIgPSBkZWNvZGVyID0+IHJlYWRGcm9tRGF0YVZpZXcoZGVjb2RlciwgNCkuZ2V0RmxvYXQzMigwLCBmYWxzZSlcblxuLyoqXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRGbG9hdDY0ID0gZGVjb2RlciA9PiByZWFkRnJvbURhdGFWaWV3KGRlY29kZXIsIDgpLmdldEZsb2F0NjQoMCwgZmFsc2UpXG5cbi8qKlxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkQmlnSW50NjQgPSBkZWNvZGVyID0+IC8qKiBAdHlwZSB7YW55fSAqLyAocmVhZEZyb21EYXRhVmlldyhkZWNvZGVyLCA4KSkuZ2V0QmlnSW50NjQoMCwgZmFsc2UpXG5cbi8qKlxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkQmlnVWludDY0ID0gZGVjb2RlciA9PiAvKiogQHR5cGUge2FueX0gKi8gKHJlYWRGcm9tRGF0YVZpZXcoZGVjb2RlciwgOCkpLmdldEJpZ1VpbnQ2NCgwLCBmYWxzZSlcblxuLyoqXG4gKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24oRGVjb2Rlcik6YW55Pn1cbiAqL1xuY29uc3QgcmVhZEFueUxvb2t1cFRhYmxlID0gW1xuICBkZWNvZGVyID0+IHVuZGVmaW5lZCwgLy8gQ0FTRSAxMjc6IHVuZGVmaW5lZFxuICBkZWNvZGVyID0+IG51bGwsIC8vIENBU0UgMTI2OiBudWxsXG4gIHJlYWRWYXJJbnQsIC8vIENBU0UgMTI1OiBpbnRlZ2VyXG4gIHJlYWRGbG9hdDMyLCAvLyBDQVNFIDEyNDogZmxvYXQzMlxuICByZWFkRmxvYXQ2NCwgLy8gQ0FTRSAxMjM6IGZsb2F0NjRcbiAgcmVhZEJpZ0ludDY0LCAvLyBDQVNFIDEyMjogYmlnaW50XG4gIGRlY29kZXIgPT4gZmFsc2UsIC8vIENBU0UgMTIxOiBib29sZWFuIChmYWxzZSlcbiAgZGVjb2RlciA9PiB0cnVlLCAvLyBDQVNFIDEyMDogYm9vbGVhbiAodHJ1ZSlcbiAgcmVhZFZhclN0cmluZywgLy8gQ0FTRSAxMTk6IHN0cmluZ1xuICBkZWNvZGVyID0+IHsgLy8gQ0FTRSAxMTg6IG9iamVjdDxzdHJpbmcsYW55PlxuICAgIGNvbnN0IGxlbiA9IHJlYWRWYXJVaW50KGRlY29kZXIpXG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdDxzdHJpbmcsYW55Pn1cbiAgICAgKi9cbiAgICBjb25zdCBvYmogPSB7fVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IHJlYWRWYXJTdHJpbmcoZGVjb2RlcilcbiAgICAgIG9ialtrZXldID0gcmVhZEFueShkZWNvZGVyKVxuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH0sXG4gIGRlY29kZXIgPT4geyAvLyBDQVNFIDExNzogYXJyYXk8YW55PlxuICAgIGNvbnN0IGxlbiA9IHJlYWRWYXJVaW50KGRlY29kZXIpXG4gICAgY29uc3QgYXJyID0gW11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcnIucHVzaChyZWFkQW55KGRlY29kZXIpKVxuICAgIH1cbiAgICByZXR1cm4gYXJyXG4gIH0sXG4gIHJlYWRWYXJVaW50OEFycmF5IC8vIENBU0UgMTE2OiBVaW50OEFycmF5XG5dXG5cbi8qKlxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkQW55ID0gZGVjb2RlciA9PiByZWFkQW55TG9va3VwVGFibGVbMTI3IC0gcmVhZFVpbnQ4KGRlY29kZXIpXShkZWNvZGVyKVxuXG4vKipcbiAqIFQgbXVzdCBub3QgYmUgbnVsbC5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgY2xhc3MgUmxlRGVjb2RlciBleHRlbmRzIERlY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oRGVjb2Rlcik6VH0gcmVhZGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodWludDhBcnJheSwgcmVhZGVyKSB7XG4gICAgc3VwZXIodWludDhBcnJheSlcbiAgICAvKipcbiAgICAgKiBUaGUgcmVhZGVyXG4gICAgICovXG4gICAgdGhpcy5yZWFkZXIgPSByZWFkZXJcbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHN0YXRlXG4gICAgICogQHR5cGUge1R8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSBudWxsXG4gICAgdGhpcy5jb3VudCA9IDBcbiAgfVxuXG4gIHJlYWQgKCkge1xuICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICB0aGlzLnMgPSB0aGlzLnJlYWRlcih0aGlzKVxuICAgICAgaWYgKGhhc0NvbnRlbnQodGhpcykpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IHJlYWRWYXJVaW50KHRoaXMpICsgMSAvLyBzZWUgZW5jb2RlciBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIHJlYXNvbiB3aHkgdGhpcyBpcyBpbmNyZW1lbnRlZFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IC0xIC8vIHJlYWQgdGhlIGN1cnJlbnQgdmFsdWUgZm9yZXZlclxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNvdW50LS1cbiAgICByZXR1cm4gLyoqIEB0eXBlIHtUfSAqLyAodGhpcy5zKVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnREaWZmRGVjb2RlciBleHRlbmRzIERlY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICAgKi9cbiAgY29uc3RydWN0b3IgKHVpbnQ4QXJyYXksIHN0YXJ0KSB7XG4gICAgc3VwZXIodWludDhBcnJheSlcbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHN0YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSBzdGFydFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHJlYWQgKCkge1xuICAgIHRoaXMucyArPSByZWFkVmFySW50KHRoaXMpXG4gICAgcmV0dXJuIHRoaXMuc1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSbGVJbnREaWZmRGVjb2RlciBleHRlbmRzIERlY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICAgKi9cbiAgY29uc3RydWN0b3IgKHVpbnQ4QXJyYXksIHN0YXJ0KSB7XG4gICAgc3VwZXIodWludDhBcnJheSlcbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHN0YXRlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSBzdGFydFxuICAgIHRoaXMuY291bnQgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgcmVhZCAoKSB7XG4gICAgaWYgKHRoaXMuY291bnQgPT09IDApIHtcbiAgICAgIHRoaXMucyArPSByZWFkVmFySW50KHRoaXMpXG4gICAgICBpZiAoaGFzQ29udGVudCh0aGlzKSkge1xuICAgICAgICB0aGlzLmNvdW50ID0gcmVhZFZhclVpbnQodGhpcykgKyAxIC8vIHNlZSBlbmNvZGVyIGltcGxlbWVudGF0aW9uIGZvciB0aGUgcmVhc29uIHdoeSB0aGlzIGlzIGluY3JlbWVudGVkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvdW50ID0gLTEgLy8gcmVhZCB0aGUgY3VycmVudCB2YWx1ZSBmb3JldmVyXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuY291bnQtLVxuICAgIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKHRoaXMucylcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVWludE9wdFJsZURlY29kZXIgZXh0ZW5kcyBEZWNvZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHVpbnQ4QXJyYXkpIHtcbiAgICBzdXBlcih1aW50OEFycmF5KVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zID0gMFxuICAgIHRoaXMuY291bnQgPSAwXG4gIH1cblxuICByZWFkICgpIHtcbiAgICBpZiAodGhpcy5jb3VudCA9PT0gMCkge1xuICAgICAgdGhpcy5zID0gcmVhZFZhckludCh0aGlzKVxuICAgICAgLy8gaWYgdGhlIHNpZ24gaXMgbmVnYXRpdmUsIHdlIHJlYWQgdGhlIGNvdW50IHRvbywgb3RoZXJ3aXNlIGNvdW50IGlzIDFcbiAgICAgIGNvbnN0IGlzTmVnYXRpdmUgPSBtYXRoLmlzTmVnYXRpdmVaZXJvKHRoaXMucylcbiAgICAgIHRoaXMuY291bnQgPSAxXG4gICAgICBpZiAoaXNOZWdhdGl2ZSkge1xuICAgICAgICB0aGlzLnMgPSAtdGhpcy5zXG4gICAgICAgIHRoaXMuY291bnQgPSByZWFkVmFyVWludCh0aGlzKSArIDJcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb3VudC0tXG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAodGhpcy5zKVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbmNVaW50T3B0UmxlRGVjb2RlciBleHRlbmRzIERlY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gICAqL1xuICBjb25zdHJ1Y3RvciAodWludDhBcnJheSkge1xuICAgIHN1cGVyKHVpbnQ4QXJyYXkpXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSAwXG4gICAgdGhpcy5jb3VudCA9IDBcbiAgfVxuXG4gIHJlYWQgKCkge1xuICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICB0aGlzLnMgPSByZWFkVmFySW50KHRoaXMpXG4gICAgICAvLyBpZiB0aGUgc2lnbiBpcyBuZWdhdGl2ZSwgd2UgcmVhZCB0aGUgY291bnQgdG9vLCBvdGhlcndpc2UgY291bnQgaXMgMVxuICAgICAgY29uc3QgaXNOZWdhdGl2ZSA9IG1hdGguaXNOZWdhdGl2ZVplcm8odGhpcy5zKVxuICAgICAgdGhpcy5jb3VudCA9IDFcbiAgICAgIGlmIChpc05lZ2F0aXZlKSB7XG4gICAgICAgIHRoaXMucyA9IC10aGlzLnNcbiAgICAgICAgdGhpcy5jb3VudCA9IHJlYWRWYXJVaW50KHRoaXMpICsgMlxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNvdW50LS1cbiAgICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovICh0aGlzLnMrKylcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW50RGlmZk9wdFJsZURlY29kZXIgZXh0ZW5kcyBEZWNvZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHVpbnQ4QXJyYXkpIHtcbiAgICBzdXBlcih1aW50OEFycmF5KVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zID0gMFxuICAgIHRoaXMuY291bnQgPSAwXG4gICAgdGhpcy5kaWZmID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHJlYWQgKCkge1xuICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICBjb25zdCBkaWZmID0gcmVhZFZhckludCh0aGlzKVxuICAgICAgLy8gaWYgdGhlIGZpcnN0IGJpdCBpcyBzZXQsIHdlIHJlYWQgbW9yZSBkYXRhXG4gICAgICBjb25zdCBoYXNDb3VudCA9IGRpZmYgJiAxXG4gICAgICB0aGlzLmRpZmYgPSBkaWZmID4+IDFcbiAgICAgIHRoaXMuY291bnQgPSAxXG4gICAgICBpZiAoaGFzQ291bnQpIHtcbiAgICAgICAgdGhpcy5jb3VudCA9IHJlYWRWYXJVaW50KHRoaXMpICsgMlxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnMgKz0gdGhpcy5kaWZmXG4gICAgdGhpcy5jb3VudC0tXG4gICAgcmV0dXJuIHRoaXMuc1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdHJpbmdEZWNvZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHVpbnQ4QXJyYXkpIHtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgVWludE9wdFJsZURlY29kZXIodWludDhBcnJheSlcbiAgICB0aGlzLnN0ciA9IHJlYWRWYXJTdHJpbmcodGhpcy5kZWNvZGVyKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zcG9zID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHJlYWQgKCkge1xuICAgIGNvbnN0IGVuZCA9IHRoaXMuc3BvcyArIHRoaXMuZGVjb2Rlci5yZWFkKClcbiAgICBjb25zdCByZXMgPSB0aGlzLnN0ci5zbGljZSh0aGlzLnNwb3MsIGVuZClcbiAgICB0aGlzLnNwb3MgPSBlbmRcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIEJpbmFyeSBkYXRhIGNvbnN0YW50cy5cbiAqXG4gKiBAbW9kdWxlIGJpbmFyeVxuICovXG5cbi8qKlxuICogbi10aCBiaXQgYWN0aXZhdGVkLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCSVQxID0gMVxuZXhwb3J0IGNvbnN0IEJJVDIgPSAyXG5leHBvcnQgY29uc3QgQklUMyA9IDRcbmV4cG9ydCBjb25zdCBCSVQ0ID0gOFxuZXhwb3J0IGNvbnN0IEJJVDUgPSAxNlxuZXhwb3J0IGNvbnN0IEJJVDYgPSAzMlxuZXhwb3J0IGNvbnN0IEJJVDcgPSA2NFxuZXhwb3J0IGNvbnN0IEJJVDggPSAxMjhcbmV4cG9ydCBjb25zdCBCSVQ5ID0gMjU2XG5leHBvcnQgY29uc3QgQklUMTAgPSA1MTJcbmV4cG9ydCBjb25zdCBCSVQxMSA9IDEwMjRcbmV4cG9ydCBjb25zdCBCSVQxMiA9IDIwNDhcbmV4cG9ydCBjb25zdCBCSVQxMyA9IDQwOTZcbmV4cG9ydCBjb25zdCBCSVQxNCA9IDgxOTJcbmV4cG9ydCBjb25zdCBCSVQxNSA9IDE2Mzg0XG5leHBvcnQgY29uc3QgQklUMTYgPSAzMjc2OFxuZXhwb3J0IGNvbnN0IEJJVDE3ID0gNjU1MzZcbmV4cG9ydCBjb25zdCBCSVQxOCA9IDEgPDwgMTdcbmV4cG9ydCBjb25zdCBCSVQxOSA9IDEgPDwgMThcbmV4cG9ydCBjb25zdCBCSVQyMCA9IDEgPDwgMTlcbmV4cG9ydCBjb25zdCBCSVQyMSA9IDEgPDwgMjBcbmV4cG9ydCBjb25zdCBCSVQyMiA9IDEgPDwgMjFcbmV4cG9ydCBjb25zdCBCSVQyMyA9IDEgPDwgMjJcbmV4cG9ydCBjb25zdCBCSVQyNCA9IDEgPDwgMjNcbmV4cG9ydCBjb25zdCBCSVQyNSA9IDEgPDwgMjRcbmV4cG9ydCBjb25zdCBCSVQyNiA9IDEgPDwgMjVcbmV4cG9ydCBjb25zdCBCSVQyNyA9IDEgPDwgMjZcbmV4cG9ydCBjb25zdCBCSVQyOCA9IDEgPDwgMjdcbmV4cG9ydCBjb25zdCBCSVQyOSA9IDEgPDwgMjhcbmV4cG9ydCBjb25zdCBCSVQzMCA9IDEgPDwgMjlcbmV4cG9ydCBjb25zdCBCSVQzMSA9IDEgPDwgMzBcbmV4cG9ydCBjb25zdCBCSVQzMiA9IDEgPDwgMzFcblxuLyoqXG4gKiBGaXJzdCBuIGJpdHMgYWN0aXZhdGVkLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCSVRTMCA9IDBcbmV4cG9ydCBjb25zdCBCSVRTMSA9IDFcbmV4cG9ydCBjb25zdCBCSVRTMiA9IDNcbmV4cG9ydCBjb25zdCBCSVRTMyA9IDdcbmV4cG9ydCBjb25zdCBCSVRTNCA9IDE1XG5leHBvcnQgY29uc3QgQklUUzUgPSAzMVxuZXhwb3J0IGNvbnN0IEJJVFM2ID0gNjNcbmV4cG9ydCBjb25zdCBCSVRTNyA9IDEyN1xuZXhwb3J0IGNvbnN0IEJJVFM4ID0gMjU1XG5leHBvcnQgY29uc3QgQklUUzkgPSA1MTFcbmV4cG9ydCBjb25zdCBCSVRTMTAgPSAxMDIzXG5leHBvcnQgY29uc3QgQklUUzExID0gMjA0N1xuZXhwb3J0IGNvbnN0IEJJVFMxMiA9IDQwOTVcbmV4cG9ydCBjb25zdCBCSVRTMTMgPSA4MTkxXG5leHBvcnQgY29uc3QgQklUUzE0ID0gMTYzODNcbmV4cG9ydCBjb25zdCBCSVRTMTUgPSAzMjc2N1xuZXhwb3J0IGNvbnN0IEJJVFMxNiA9IDY1NTM1XG5leHBvcnQgY29uc3QgQklUUzE3ID0gQklUMTggLSAxXG5leHBvcnQgY29uc3QgQklUUzE4ID0gQklUMTkgLSAxXG5leHBvcnQgY29uc3QgQklUUzE5ID0gQklUMjAgLSAxXG5leHBvcnQgY29uc3QgQklUUzIwID0gQklUMjEgLSAxXG5leHBvcnQgY29uc3QgQklUUzIxID0gQklUMjIgLSAxXG5leHBvcnQgY29uc3QgQklUUzIyID0gQklUMjMgLSAxXG5leHBvcnQgY29uc3QgQklUUzIzID0gQklUMjQgLSAxXG5leHBvcnQgY29uc3QgQklUUzI0ID0gQklUMjUgLSAxXG5leHBvcnQgY29uc3QgQklUUzI1ID0gQklUMjYgLSAxXG5leHBvcnQgY29uc3QgQklUUzI2ID0gQklUMjcgLSAxXG5leHBvcnQgY29uc3QgQklUUzI3ID0gQklUMjggLSAxXG5leHBvcnQgY29uc3QgQklUUzI4ID0gQklUMjkgLSAxXG5leHBvcnQgY29uc3QgQklUUzI5ID0gQklUMzAgLSAxXG5leHBvcnQgY29uc3QgQklUUzMwID0gQklUMzEgLSAxXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCSVRTMzEgPSAweDdGRkZGRkZGXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBCSVRTMzIgPSAweEZGRkZGRkZGXG4iLCIvKipcbiAqIFV0aWxpdHkgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aCBidWZmZXJzIChVaW50OEFycmF5KS5cbiAqXG4gKiBAbW9kdWxlIGJ1ZmZlclxuICovXG5cbmltcG9ydCAqIGFzIHN0cmluZyBmcm9tICcuL3N0cmluZy5qcydcbmltcG9ydCAqIGFzIGVudiBmcm9tICcuL2Vudmlyb25tZW50LmpzJ1xuaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSAnLi9lbmNvZGluZy5qcydcbmltcG9ydCAqIGFzIGRlY29kaW5nIGZyb20gJy4vZGVjb2RpbmcuanMnXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVWludDhBcnJheUZyb21MZW4gPSBsZW4gPT4gbmV3IFVpbnQ4QXJyYXkobGVuKVxuXG4vKipcbiAqIENyZWF0ZSBVaW50OEFycmF5IHdpdGggaW5pdGlhbCBjb250ZW50IGZyb20gYnVmZmVyXG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyXG4gKiBAcGFyYW0ge251bWJlcn0gYnl0ZU9mZnNldFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVWludDhBcnJheVZpZXdGcm9tQXJyYXlCdWZmZXIgPSAoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpID0+IG5ldyBVaW50OEFycmF5KGJ1ZmZlciwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuXG4vKipcbiAqIENyZWF0ZSBVaW50OEFycmF5IHdpdGggaW5pdGlhbCBjb250ZW50IGZyb20gYnVmZmVyXG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVVaW50OEFycmF5RnJvbUFycmF5QnVmZmVyID0gYnVmZmVyID0+IG5ldyBVaW50OEFycmF5KGJ1ZmZlcilcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBieXRlc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCB0b0Jhc2U2NEJyb3dzZXIgPSBieXRlcyA9PiB7XG4gIGxldCBzID0gJydcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICBzICs9IHN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pXG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiBidG9hKHMpXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBieXRlc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5jb25zdCB0b0Jhc2U2NE5vZGUgPSBieXRlcyA9PiBCdWZmZXIuZnJvbShieXRlcy5idWZmZXIsIGJ5dGVzLmJ5dGVPZmZzZXQsIGJ5dGVzLmJ5dGVMZW5ndGgpLnRvU3RyaW5nKCdiYXNlNjQnKVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgZnJvbUJhc2U2NEJyb3dzZXIgPSBzID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNvbnN0IGEgPSBhdG9iKHMpXG4gIGNvbnN0IGJ5dGVzID0gY3JlYXRlVWludDhBcnJheUZyb21MZW4oYS5sZW5ndGgpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIGJ5dGVzW2ldID0gYS5jaGFyQ29kZUF0KGkpXG4gIH1cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqL1xuY29uc3QgZnJvbUJhc2U2NE5vZGUgPSBzID0+IHtcbiAgY29uc3QgYnVmID0gQnVmZmVyLmZyb20ocywgJ2Jhc2U2NCcpXG4gIHJldHVybiBuZXcgVWludDhBcnJheShidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGgpXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgdG9CYXNlNjQgPSBlbnYuaXNCcm93c2VyID8gdG9CYXNlNjRCcm93c2VyIDogdG9CYXNlNjROb2RlXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZnJvbUJhc2U2NCA9IGVudi5pc0Jyb3dzZXIgPyBmcm9tQmFzZTY0QnJvd3NlciA6IGZyb21CYXNlNjROb2RlXG5cbi8qKlxuICogQ29weSB0aGUgY29udGVudCBvZiBhbiBVaW50OEFycmF5IHZpZXcgdG8gYSBuZXcgQXJyYXlCdWZmZXIuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5leHBvcnQgY29uc3QgY29weVVpbnQ4QXJyYXkgPSB1aW50OEFycmF5ID0+IHtcbiAgY29uc3QgbmV3QnVmID0gY3JlYXRlVWludDhBcnJheUZyb21MZW4odWludDhBcnJheS5ieXRlTGVuZ3RoKVxuICBuZXdCdWYuc2V0KHVpbnQ4QXJyYXkpXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLyoqXG4gKiBFbmNvZGUgYW55dGhpbmcgYXMgYSBVSW50OEFycmF5LiBJdCdzIGEgcHVuIG9uIHR5cGVzY3JpcHRzJ3MgYGFueWAgdHlwZS5cbiAqIFNlZSBlbmNvZGluZy53cml0ZUFueSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAcGFyYW0ge2FueX0gZGF0YVxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZUFueSA9IGRhdGEgPT4ge1xuICBjb25zdCBlbmNvZGVyID0gZW5jb2RpbmcuY3JlYXRlRW5jb2RlcigpXG4gIGVuY29kaW5nLndyaXRlQW55KGVuY29kZXIsIGRhdGEpXG4gIHJldHVybiBlbmNvZGluZy50b1VpbnQ4QXJyYXkoZW5jb2Rlcilcbn1cblxuLyoqXG4gKiBEZWNvZGUgYW4gYW55LWVuY29kZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZUFueSA9IGJ1ZiA9PiBkZWNvZGluZy5yZWFkQW55KGRlY29kaW5nLmNyZWF0ZURlY29kZXIoYnVmKSlcbiIsIi8qKlxuICogVXRpbGl0eSBoZWxwZXJzIGZvciB3b3JraW5nIHdpdGggbnVtYmVycy5cbiAqXG4gKiBAbW9kdWxlIG51bWJlclxuICovXG5cbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi9tYXRoLmpzJ1xuaW1wb3J0ICogYXMgYmluYXJ5IGZyb20gJy4vYmluYXJ5LmpzJ1xuXG5leHBvcnQgY29uc3QgTUFYX1NBRkVfSU5URUdFUiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG5leHBvcnQgY29uc3QgTUlOX1NBRkVfSU5URUdFUiA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG5cbmV4cG9ydCBjb25zdCBMT1dFU1RfSU5UMzIgPSAxIDw8IDMxXG4vKipcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBISUdIRVNUX0lOVDMyID0gYmluYXJ5LkJJVFMzMVxuXG4vKipcbiAqIEBtb2R1bGUgbnVtYmVyXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IChudW0gPT4gdHlwZW9mIG51bSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUobnVtKSAmJiBtYXRoLmZsb29yKG51bSkgPT09IG51bSlcbmV4cG9ydCBjb25zdCBpc05hTiA9IE51bWJlci5pc05hTlxuZXhwb3J0IGNvbnN0IHBhcnNlSW50ID0gTnVtYmVyLnBhcnNlSW50XG4iLCIvKipcbiAqIEVmZmljaWVudCBzY2hlbWEtbGVzcyBiaW5hcnkgZW5jb2Rpbmcgd2l0aCBzdXBwb3J0IGZvciB2YXJpYWJsZSBsZW5ndGggZW5jb2RpbmcuXG4gKlxuICogVXNlIFtsaWIwL2VuY29kaW5nXSB3aXRoIFtsaWIwL2RlY29kaW5nXS4gRXZlcnkgZW5jb2RpbmcgZnVuY3Rpb24gaGFzIGEgY29ycmVzcG9uZGluZyBkZWNvZGluZyBmdW5jdGlvbi5cbiAqXG4gKiBFbmNvZGVzIG51bWJlcnMgaW4gbGl0dGxlLWVuZGlhbiBvcmRlciAobGVhc3QgdG8gbW9zdCBzaWduaWZpY2FudCBieXRlIG9yZGVyKVxuICogYW5kIGlzIGNvbXBhdGlibGUgd2l0aCBHb2xhbmcncyBiaW5hcnkgZW5jb2RpbmcgKGh0dHBzOi8vZ29sYW5nLm9yZy9wa2cvZW5jb2RpbmcvYmluYXJ5LylcbiAqIHdoaWNoIGlzIGFsc28gdXNlZCBpbiBQcm90b2NvbCBCdWZmZXJzLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBlbmNvZGluZyBzdGVwXG4gKiBjb25zdCBlbmNvZGVyID0gbmV3IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKVxuICogZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIsIDI1NilcbiAqIGVuY29kaW5nLndyaXRlVmFyU3RyaW5nKGVuY29kZXIsICdIZWxsbyB3b3JsZCEnKVxuICogY29uc3QgYnVmID0gZW5jb2RpbmcudG9VaW50OEFycmF5KGVuY29kZXIpXG4gKiBgYGBcbiAqXG4gKiBgYGBqc1xuICogLy8gZGVjb2Rpbmcgc3RlcFxuICogY29uc3QgZGVjb2RlciA9IG5ldyBkZWNvZGluZy5jcmVhdGVEZWNvZGVyKGJ1ZilcbiAqIGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIpIC8vID0+IDI1NlxuICogZGVjb2RpbmcucmVhZFZhclN0cmluZyhkZWNvZGVyKSAvLyA9PiAnSGVsbG8gd29ybGQhJ1xuICogZGVjb2RpbmcuaGFzQ29udGVudChkZWNvZGVyKSAvLyA9PiBmYWxzZSAtIGFsbCBkYXRhIGlzIHJlYWRcbiAqIGBgYFxuICpcbiAqIEBtb2R1bGUgZW5jb2RpbmdcbiAqL1xuXG5pbXBvcnQgKiBhcyBidWZmZXIgZnJvbSAnLi9idWZmZXIuanMnXG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJy4vbWF0aC5qcydcbmltcG9ydCAqIGFzIG51bWJlciBmcm9tICcuL251bWJlci5qcydcbmltcG9ydCAqIGFzIGJpbmFyeSBmcm9tICcuL2JpbmFyeS5qcydcblxuLyoqXG4gKiBBIEJpbmFyeUVuY29kZXIgaGFuZGxlcyB0aGUgZW5jb2RpbmcgdG8gYW4gVWludDhBcnJheS5cbiAqL1xuZXhwb3J0IGNsYXNzIEVuY29kZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5jcG9zID0gMFxuICAgIHRoaXMuY2J1ZiA9IG5ldyBVaW50OEFycmF5KDEwMClcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8VWludDhBcnJheT59XG4gICAgICovXG4gICAgdGhpcy5idWZzID0gW11cbiAgfVxufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHJldHVybiB7RW5jb2Rlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUVuY29kZXIgPSAoKSA9PiBuZXcgRW5jb2RlcigpXG5cbi8qKlxuICogVGhlIGN1cnJlbnQgbGVuZ3RoIG9mIHRoZSBlbmNvZGVkIGRhdGEuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGxlbmd0aCA9IGVuY29kZXIgPT4ge1xuICBsZXQgbGVuID0gZW5jb2Rlci5jcG9zXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2Rlci5idWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGVuICs9IGVuY29kZXIuYnVmc1tpXS5sZW5ndGhcbiAgfVxuICByZXR1cm4gbGVuXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIHRvIFVpbnQ4QXJyYXkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9IFRoZSBjcmVhdGVkIEFycmF5QnVmZmVyLlxuICovXG5leHBvcnQgY29uc3QgdG9VaW50OEFycmF5ID0gZW5jb2RlciA9PiB7XG4gIGNvbnN0IHVpbnQ4YXJyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKGVuY29kZXIpKVxuICBsZXQgY3VyUG9zID0gMFxuICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZXIuYnVmcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGQgPSBlbmNvZGVyLmJ1ZnNbaV1cbiAgICB1aW50OGFyci5zZXQoZCwgY3VyUG9zKVxuICAgIGN1clBvcyArPSBkLmxlbmd0aFxuICB9XG4gIHVpbnQ4YXJyLnNldChidWZmZXIuY3JlYXRlVWludDhBcnJheVZpZXdGcm9tQXJyYXlCdWZmZXIoZW5jb2Rlci5jYnVmLmJ1ZmZlciwgMCwgZW5jb2Rlci5jcG9zKSwgY3VyUG9zKVxuICByZXR1cm4gdWludDhhcnJcbn1cblxuLyoqXG4gKiBWZXJpZnkgdGhhdCBpdCBpcyBwb3NzaWJsZSB0byB3cml0ZSBgbGVuYCBieXRlcyB3dGlob3V0IGNoZWNraW5nLiBJZlxuICogbmVjZXNzYXJ5LCBhIG5ldyBCdWZmZXIgd2l0aCB0aGUgcmVxdWlyZWQgbGVuZ3RoIGlzIGF0dGFjaGVkLlxuICpcbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICovXG5jb25zdCB2ZXJpZnlMZW4gPSAoZW5jb2RlciwgbGVuKSA9PiB7XG4gIGNvbnN0IGJ1ZmZlckxlbiA9IGVuY29kZXIuY2J1Zi5sZW5ndGhcbiAgaWYgKGJ1ZmZlckxlbiAtIGVuY29kZXIuY3BvcyA8IGxlbikge1xuICAgIGVuY29kZXIuYnVmcy5wdXNoKGJ1ZmZlci5jcmVhdGVVaW50OEFycmF5Vmlld0Zyb21BcnJheUJ1ZmZlcihlbmNvZGVyLmNidWYuYnVmZmVyLCAwLCBlbmNvZGVyLmNwb3MpKVxuICAgIGVuY29kZXIuY2J1ZiA9IG5ldyBVaW50OEFycmF5KG1hdGgubWF4KGJ1ZmZlckxlbiwgbGVuKSAqIDIpXG4gICAgZW5jb2Rlci5jcG9zID0gMFxuICB9XG59XG5cbi8qKlxuICogV3JpdGUgb25lIGJ5dGUgdG8gdGhlIGVuY29kZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIGJ5dGUgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGUgPSAoZW5jb2RlciwgbnVtKSA9PiB7XG4gIGNvbnN0IGJ1ZmZlckxlbiA9IGVuY29kZXIuY2J1Zi5sZW5ndGhcbiAgaWYgKGVuY29kZXIuY3BvcyA9PT0gYnVmZmVyTGVuKSB7XG4gICAgZW5jb2Rlci5idWZzLnB1c2goZW5jb2Rlci5jYnVmKVxuICAgIGVuY29kZXIuY2J1ZiA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlckxlbiAqIDIpXG4gICAgZW5jb2Rlci5jcG9zID0gMFxuICB9XG4gIGVuY29kZXIuY2J1ZltlbmNvZGVyLmNwb3MrK10gPSBudW1cbn1cblxuLyoqXG4gKiBXcml0ZSBvbmUgYnl0ZSBhdCBhIHNwZWNpZmljIHBvc2l0aW9uLlxuICogUG9zaXRpb24gbXVzdCBhbHJlYWR5IGJlIHdyaXR0ZW4gKGkuZS4gZW5jb2Rlci5sZW5ndGggPiBwb3MpXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgUG9zaXRpb24gdG8gd2hpY2ggdG8gd3JpdGUgZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBVbnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gKi9cbmV4cG9ydCBjb25zdCBzZXQgPSAoZW5jb2RlciwgcG9zLCBudW0pID0+IHtcbiAgbGV0IGJ1ZmZlciA9IG51bGxcbiAgLy8gaXRlcmF0ZSBhbGwgYnVmZmVycyBhbmQgYWRqdXN0IHBvc2l0aW9uXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2Rlci5idWZzLmxlbmd0aCAmJiBidWZmZXIgPT09IG51bGw7IGkrKykge1xuICAgIGNvbnN0IGIgPSBlbmNvZGVyLmJ1ZnNbaV1cbiAgICBpZiAocG9zIDwgYi5sZW5ndGgpIHtcbiAgICAgIGJ1ZmZlciA9IGIgLy8gZm91bmQgYnVmZmVyXG4gICAgfSBlbHNlIHtcbiAgICAgIHBvcyAtPSBiLmxlbmd0aFxuICAgIH1cbiAgfVxuICBpZiAoYnVmZmVyID09PSBudWxsKSB7XG4gICAgLy8gdXNlIGN1cnJlbnQgYnVmZmVyXG4gICAgYnVmZmVyID0gZW5jb2Rlci5jYnVmXG4gIH1cbiAgYnVmZmVyW3Bvc10gPSBudW1cbn1cblxuLyoqXG4gKiBXcml0ZSBvbmUgYnl0ZSBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVVaW50OCA9IHdyaXRlXG5cbi8qKlxuICogV3JpdGUgb25lIGJ5dGUgYXMgYW4gdW5zaWduZWQgSW50ZWdlciBhdCBhIHNwZWNpZmljIGxvY2F0aW9uLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zIFRoZSBsb2NhdGlvbiB3aGVyZSB0aGUgZGF0YSB3aWxsIGJlIHdyaXR0ZW4uXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgc2V0VWludDggPSBzZXRcblxuLyoqXG4gKiBXcml0ZSB0d28gYnl0ZXMgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlVWludDE2ID0gKGVuY29kZXIsIG51bSkgPT4ge1xuICB3cml0ZShlbmNvZGVyLCBudW0gJiBiaW5hcnkuQklUUzgpXG4gIHdyaXRlKGVuY29kZXIsIChudW0gPj4+IDgpICYgYmluYXJ5LkJJVFM4KVxufVxuLyoqXG4gKiBXcml0ZSB0d28gYnl0ZXMgYXMgYW4gdW5zaWduZWQgaW50ZWdlciBhdCBhIHNwZWNpZmljIGxvY2F0aW9uLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zIFRoZSBsb2NhdGlvbiB3aGVyZSB0aGUgZGF0YSB3aWxsIGJlIHdyaXR0ZW4uXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgc2V0VWludDE2ID0gKGVuY29kZXIsIHBvcywgbnVtKSA9PiB7XG4gIHNldChlbmNvZGVyLCBwb3MsIG51bSAmIGJpbmFyeS5CSVRTOClcbiAgc2V0KGVuY29kZXIsIHBvcyArIDEsIChudW0gPj4+IDgpICYgYmluYXJ5LkJJVFM4KVxufVxuXG4vKipcbiAqIFdyaXRlIHR3byBieXRlcyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVVpbnQzMiA9IChlbmNvZGVyLCBudW0pID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB3cml0ZShlbmNvZGVyLCBudW0gJiBiaW5hcnkuQklUUzgpXG4gICAgbnVtID4+Pj0gOFxuICB9XG59XG5cbi8qKlxuICogV3JpdGUgdHdvIGJ5dGVzIGFzIGFuIHVuc2lnbmVkIGludGVnZXIgaW4gYmlnIGVuZGlhbiBvcmRlci5cbiAqIChtb3N0IHNpZ25pZmljYW50IGJ5dGUgZmlyc3QpXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVVpbnQzMkJpZ0VuZGlhbiA9IChlbmNvZGVyLCBudW0pID0+IHtcbiAgZm9yIChsZXQgaSA9IDM7IGkgPj0gMDsgaS0tKSB7XG4gICAgd3JpdGUoZW5jb2RlciwgKG51bSA+Pj4gKDggKiBpKSkgJiBiaW5hcnkuQklUUzgpXG4gIH1cbn1cblxuLyoqXG4gKiBXcml0ZSB0d28gYnl0ZXMgYXMgYW4gdW5zaWduZWQgaW50ZWdlciBhdCBhIHNwZWNpZmljIGxvY2F0aW9uLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zIFRoZSBsb2NhdGlvbiB3aGVyZSB0aGUgZGF0YSB3aWxsIGJlIHdyaXR0ZW4uXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgc2V0VWludDMyID0gKGVuY29kZXIsIHBvcywgbnVtKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgc2V0KGVuY29kZXIsIHBvcyArIGksIG51bSAmIGJpbmFyeS5CSVRTOClcbiAgICBudW0gPj4+PSA4XG4gIH1cbn1cblxuLyoqXG4gKiBXcml0ZSBhIHZhcmlhYmxlIGxlbmd0aCB1bnNpZ25lZCBpbnRlZ2VyLlxuICpcbiAqIEVuY29kZXMgaW50ZWdlcnMgaW4gdGhlIHJhbmdlIGZyb20gWzAsIDQyOTQ5NjcyOTVdIC8gWzAsIDB4ZmZmZmZmZmZdLiAobWF4IDMyIGJpdCB1bnNpZ25lZCBpbnRlZ2VyKVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVWYXJVaW50ID0gKGVuY29kZXIsIG51bSkgPT4ge1xuICB3aGlsZSAobnVtID4gYmluYXJ5LkJJVFM3KSB7XG4gICAgd3JpdGUoZW5jb2RlciwgYmluYXJ5LkJJVDggfCAoYmluYXJ5LkJJVFM3ICYgbnVtKSlcbiAgICBudW0gPj4+PSA3XG4gIH1cbiAgd3JpdGUoZW5jb2RlciwgYmluYXJ5LkJJVFM3ICYgbnVtKVxufVxuXG4vKipcbiAqIFdyaXRlIGEgdmFyaWFibGUgbGVuZ3RoIGludGVnZXIuXG4gKlxuICogRW5jb2RlcyBpbnRlZ2VycyBpbiB0aGUgcmFuZ2UgZnJvbSBbLTIxNDc0ODM2NDgsIC0yMTQ3NDgzNjQ3XS5cbiAqXG4gKiBXZSBkb24ndCB1c2UgemlnLXphZyBlbmNvZGluZyBiZWNhdXNlIHdlIHdhbnQgdG8ga2VlcCB0aGUgb3B0aW9uIG9wZW5cbiAqIHRvIHVzZSB0aGUgc2FtZSBmdW5jdGlvbiBmb3IgQmlnSW50IGFuZCA1M2JpdCBpbnRlZ2VycyAoZG91YmxlcykuXG4gKlxuICogV2UgdXNlIHRoZSA3dGggYml0IGluc3RlYWQgZm9yIHNpZ25hbGluZyB0aGF0IHRoaXMgaXMgYSBuZWdhdGl2ZSBudW1iZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVZhckludCA9IChlbmNvZGVyLCBudW0pID0+IHtcbiAgY29uc3QgaXNOZWdhdGl2ZSA9IG1hdGguaXNOZWdhdGl2ZVplcm8obnVtKVxuICBpZiAoaXNOZWdhdGl2ZSkge1xuICAgIG51bSA9IC1udW1cbiAgfVxuICAvLyAgICAgICAgICAgICB8LSB3aGV0aGVyIHRvIGNvbnRpbnVlIHJlYWRpbmcgICAgICAgICB8LSB3aGV0aGVyIGlzIG5lZ2F0aXZlICAgICB8LSBudW1iZXJcbiAgd3JpdGUoZW5jb2RlciwgKG51bSA+IGJpbmFyeS5CSVRTNiA/IGJpbmFyeS5CSVQ4IDogMCkgfCAoaXNOZWdhdGl2ZSA/IGJpbmFyeS5CSVQ3IDogMCkgfCAoYmluYXJ5LkJJVFM2ICYgbnVtKSlcbiAgbnVtID4+Pj0gNlxuICAvLyBXZSBkb24ndCBuZWVkIHRvIGNvbnNpZGVyIHRoZSBjYXNlIG9mIG51bSA9PT0gMCBzbyB3ZSBjYW4gdXNlIGEgZGlmZmVyZW50XG4gIC8vIHBhdHRlcm4gaGVyZSB0aGFuIGFib3ZlLlxuICB3aGlsZSAobnVtID4gMCkge1xuICAgIHdyaXRlKGVuY29kZXIsIChudW0gPiBiaW5hcnkuQklUUzcgPyBiaW5hcnkuQklUOCA6IDApIHwgKGJpbmFyeS5CSVRTNyAmIG51bSkpXG4gICAgbnVtID4+Pj0gN1xuICB9XG59XG5cbi8qKlxuICogV3JpdGUgYSB2YXJpYWJsZSBsZW5ndGggc3RyaW5nLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVWYXJTdHJpbmcgPSAoZW5jb2Rlciwgc3RyKSA9PiB7XG4gIGNvbnN0IGVuY29kZWRTdHJpbmcgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSlcbiAgY29uc3QgbGVuID0gZW5jb2RlZFN0cmluZy5sZW5ndGhcbiAgd3JpdGVWYXJVaW50KGVuY29kZXIsIGxlbilcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHdyaXRlKGVuY29kZXIsIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoZW5jb2RlZFN0cmluZy5jb2RlUG9pbnRBdChpKSkpXG4gIH1cbn1cblxuLyoqXG4gKiBXcml0ZSB0aGUgY29udGVudCBvZiBhbm90aGVyIEVuY29kZXIuXG4gKlxuICogQFRPRE86IGNhbiBiZSBpbXByb3ZlZCFcbiAqICAgICAgICAtIE5vdGU6IFNob3VsZCBjb25zaWRlciB0aGF0IHdoZW4gYXBwZW5kaW5nIGEgbG90IG9mIHNtYWxsIEVuY29kZXJzLCB3ZSBzaG91bGQgcmF0aGVyIGNsb25lIHRoYW4gcmVmZXJlbmNpbmcgdGhlIG9sZCBzdHJ1Y3R1cmUuXG4gKiAgICAgICAgICAgICAgICBFbmNvZGVycyBzdGFydCB3aXRoIGEgcmF0aGVyIGJpZyBpbml0aWFsIGJ1ZmZlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlciBUaGUgZW5VaW50OEFyclxuICogQHBhcmFtIHtFbmNvZGVyfSBhcHBlbmQgVGhlIEJpbmFyeUVuY29kZXIgdG8gYmUgd3JpdHRlbi5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlQmluYXJ5RW5jb2RlciA9IChlbmNvZGVyLCBhcHBlbmQpID0+IHdyaXRlVWludDhBcnJheShlbmNvZGVyLCB0b1VpbnQ4QXJyYXkoYXBwZW5kKSlcblxuLyoqXG4gKiBBcHBlbmQgZml4ZWQtbGVuZ3RoIFVpbnQ4QXJyYXkgdG8gdGhlIGVuY29kZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVVaW50OEFycmF5ID0gKGVuY29kZXIsIHVpbnQ4QXJyYXkpID0+IHtcbiAgY29uc3QgYnVmZmVyTGVuID0gZW5jb2Rlci5jYnVmLmxlbmd0aFxuICBjb25zdCBjcG9zID0gZW5jb2Rlci5jcG9zXG4gIGNvbnN0IGxlZnRDb3B5TGVuID0gbWF0aC5taW4oYnVmZmVyTGVuIC0gY3BvcywgdWludDhBcnJheS5sZW5ndGgpXG4gIGNvbnN0IHJpZ2h0Q29weUxlbiA9IHVpbnQ4QXJyYXkubGVuZ3RoIC0gbGVmdENvcHlMZW5cbiAgZW5jb2Rlci5jYnVmLnNldCh1aW50OEFycmF5LnN1YmFycmF5KDAsIGxlZnRDb3B5TGVuKSwgY3BvcylcbiAgZW5jb2Rlci5jcG9zICs9IGxlZnRDb3B5TGVuXG4gIGlmIChyaWdodENvcHlMZW4gPiAwKSB7XG4gICAgLy8gU3RpbGwgc29tZXRoaW5nIHRvIHdyaXRlLCB3cml0ZSByaWdodCBoYWxmLi5cbiAgICAvLyBBcHBlbmQgbmV3IGJ1ZmZlclxuICAgIGVuY29kZXIuYnVmcy5wdXNoKGVuY29kZXIuY2J1ZilcbiAgICAvLyBtdXN0IGhhdmUgYXQgbGVhc3Qgc2l6ZSBvZiByZW1haW5pbmcgYnVmZmVyXG4gICAgZW5jb2Rlci5jYnVmID0gbmV3IFVpbnQ4QXJyYXkobWF0aC5tYXgoYnVmZmVyTGVuICogMiwgcmlnaHRDb3B5TGVuKSlcbiAgICAvLyBjb3B5IGFycmF5XG4gICAgZW5jb2Rlci5jYnVmLnNldCh1aW50OEFycmF5LnN1YmFycmF5KGxlZnRDb3B5TGVuKSlcbiAgICBlbmNvZGVyLmNwb3MgPSByaWdodENvcHlMZW5cbiAgfVxufVxuXG4vKipcbiAqIEFwcGVuZCBhbiBVaW50OEFycmF5IHRvIEVuY29kZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVWYXJVaW50OEFycmF5ID0gKGVuY29kZXIsIHVpbnQ4QXJyYXkpID0+IHtcbiAgd3JpdGVWYXJVaW50KGVuY29kZXIsIHVpbnQ4QXJyYXkuYnl0ZUxlbmd0aClcbiAgd3JpdGVVaW50OEFycmF5KGVuY29kZXIsIHVpbnQ4QXJyYXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIERhdGFWaWV3IG9mIHRoZSBuZXh0IGBsZW5gIGJ5dGVzLiBVc2UgaXQgdG8gd3JpdGUgZGF0YSBhZnRlclxuICogY2FsbGluZyB0aGlzIGZ1bmN0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiAvLyB3cml0ZSBmbG9hdDMyIHVzaW5nIERhdGFWaWV3XG4gKiBjb25zdCBkdiA9IHdyaXRlT25EYXRhVmlldyhlbmNvZGVyLCA0KVxuICogZHYuc2V0RmxvYXQzMigwLCAxLjEpXG4gKiAvLyByZWFkIGZsb2F0MzIgdXNpbmcgRGF0YVZpZXdcbiAqIGNvbnN0IGR2ID0gcmVhZEZyb21EYXRhVmlldyhlbmNvZGVyLCA0KVxuICogZHYuZ2V0RmxvYXQzMigwKSAvLyA9PiAxLjEwMDAwMDAyMzg0MTg1OCAobGVhdmluZyBpdCB0byB0aGUgcmVhZGVyIHRvIGZpbmQgb3V0IHdoeSB0aGlzIGlzIHRoZSBjb3JyZWN0IHJlc3VsdClcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICogQHJldHVybiB7RGF0YVZpZXd9XG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZU9uRGF0YVZpZXcgPSAoZW5jb2RlciwgbGVuKSA9PiB7XG4gIHZlcmlmeUxlbihlbmNvZGVyLCBsZW4pXG4gIGNvbnN0IGR2aWV3ID0gbmV3IERhdGFWaWV3KGVuY29kZXIuY2J1Zi5idWZmZXIsIGVuY29kZXIuY3BvcywgbGVuKVxuICBlbmNvZGVyLmNwb3MgKz0gbGVuXG4gIHJldHVybiBkdmlld1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVGbG9hdDMyID0gKGVuY29kZXIsIG51bSkgPT4gd3JpdGVPbkRhdGFWaWV3KGVuY29kZXIsIDQpLnNldEZsb2F0MzIoMCwgbnVtLCBmYWxzZSlcblxuLyoqXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlRmxvYXQ2NCA9IChlbmNvZGVyLCBudW0pID0+IHdyaXRlT25EYXRhVmlldyhlbmNvZGVyLCA4KS5zZXRGbG9hdDY0KDAsIG51bSwgZmFsc2UpXG5cbi8qKlxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge2JpZ2ludH0gbnVtXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZUJpZ0ludDY0ID0gKGVuY29kZXIsIG51bSkgPT4gLyoqIEB0eXBlIHthbnl9ICovICh3cml0ZU9uRGF0YVZpZXcoZW5jb2RlciwgOCkpLnNldEJpZ0ludDY0KDAsIG51bSwgZmFsc2UpXG5cbi8qKlxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge2JpZ2ludH0gbnVtXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZUJpZ1VpbnQ2NCA9IChlbmNvZGVyLCBudW0pID0+IC8qKiBAdHlwZSB7YW55fSAqLyAod3JpdGVPbkRhdGFWaWV3KGVuY29kZXIsIDgpKS5zZXRCaWdVaW50NjQoMCwgbnVtLCBmYWxzZSlcblxuY29uc3QgZmxvYXRUZXN0QmVkID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcig0KSlcbi8qKlxuICogQ2hlY2sgaWYgYSBudW1iZXIgY2FuIGJlIGVuY29kZWQgYXMgYSAzMiBiaXQgZmxvYXQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG51bVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaXNGbG9hdDMyID0gbnVtID0+IHtcbiAgZmxvYXRUZXN0QmVkLnNldEZsb2F0MzIoMCwgbnVtKVxuICByZXR1cm4gZmxvYXRUZXN0QmVkLmdldEZsb2F0MzIoMCkgPT09IG51bVxufVxuXG4vKipcbiAqIEVuY29kZSBkYXRhIHdpdGggZWZmaWNpZW50IGJpbmFyeSBmb3JtYXQuXG4gKlxuICogRGlmZmVyZW5jZXMgdG8gSlNPTjpcbiAqIOKAoiBUcmFuc2Zvcm1zIGRhdGEgdG8gYSBiaW5hcnkgZm9ybWF0IChub3QgdG8gYSBzdHJpbmcpXG4gKiDigKIgRW5jb2RlcyB1bmRlZmluZWQsIE5hTiwgYW5kIEFycmF5QnVmZmVyICh0aGVzZSBjYW4ndCBiZSByZXByZXNlbnRlZCBpbiBKU09OKVxuICog4oCiIE51bWJlcnMgYXJlIGVmZmljaWVudGx5IGVuY29kZWQgZWl0aGVyIGFzIGEgdmFyaWFibGUgbGVuZ3RoIGludGVnZXIsIGFzIGFcbiAqICAgMzIgYml0IGZsb2F0LCBhcyBhIDY0IGJpdCBmbG9hdCwgb3IgYXMgYSA2NCBiaXQgYmlnaW50LlxuICpcbiAqIEVuY29kaW5nIHRhYmxlOlxuICpcbiAqIHwgRGF0YSBUeXBlICAgICAgICAgICB8IFByZWZpeCAgIHwgRW5jb2RpbmcgTWV0aG9kICAgIHwgQ29tbWVudCB8XG4gKiB8IC0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0gfFxuICogfCB1bmRlZmluZWQgICAgICAgICAgIHwgMTI3ICAgICAgfCAgICAgICAgICAgICAgICAgICAgfCBGdW5jdGlvbnMsIHN5bWJvbCwgYW5kIGV2ZXJ5dGhpbmcgdGhhdCBjYW5ub3QgYmUgaWRlbnRpZmllZCBpcyBlbmNvZGVkIGFzIHVuZGVmaW5lZCB8XG4gKiB8IG51bGwgICAgICAgICAgICAgICAgfCAxMjYgICAgICB8ICAgICAgICAgICAgICAgICAgICB8IHxcbiAqIHwgaW50ZWdlciAgICAgICAgICAgICB8IDEyNSAgICAgIHwgd3JpdGVWYXJJbnQgICAgICAgIHwgT25seSBlbmNvZGVzIDMyIGJpdCBzaWduZWQgaW50ZWdlcnMgfFxuICogfCBmbG9hdDMyICAgICAgICAgICAgIHwgMTI0ICAgICAgfCB3cml0ZUZsb2F0MzIgICAgICAgfCB8XG4gKiB8IGZsb2F0NjQgICAgICAgICAgICAgfCAxMjMgICAgICB8IHdyaXRlRmxvYXQ2NCAgICAgICB8IHxcbiAqIHwgYmlnaW50ICAgICAgICAgICAgICB8IDEyMiAgICAgIHwgd3JpdGVCaWdJbnQ2NCAgICAgIHwgfFxuICogfCBib29sZWFuIChmYWxzZSkgICAgIHwgMTIxICAgICAgfCAgICAgICAgICAgICAgICAgICAgfCBUcnVlIGFuZCBmYWxzZSBhcmUgZGlmZmVyZW50IGRhdGEgdHlwZXMgc28gd2Ugc2F2ZSB0aGUgZm9sbG93aW5nIGJ5dGUgfFxuICogfCBib29sZWFuICh0cnVlKSAgICAgIHwgMTIwICAgICAgfCAgICAgICAgICAgICAgICAgICAgfCAtIDBiMDExMTEwMDAgc28gdGhlIGxhc3QgYml0IGRldGVybWluZXMgd2hldGhlciB0cnVlIG9yIGZhbHNlIHxcbiAqIHwgc3RyaW5nICAgICAgICAgICAgICB8IDExOSAgICAgIHwgd3JpdGVWYXJTdHJpbmcgICAgIHwgfFxuICogfCBvYmplY3Q8c3RyaW5nLGFueT4gIHwgMTE4ICAgICAgfCBjdXN0b20gICAgICAgICAgICAgfCBXcml0ZXMge2xlbmd0aH0gdGhlbiB7bGVuZ3RofSBrZXktdmFsdWUgcGFpcnMgfFxuICogfCBhcnJheTxhbnk+ICAgICAgICAgIHwgMTE3ICAgICAgfCBjdXN0b20gICAgICAgICAgICAgfCBXcml0ZXMge2xlbmd0aH0gdGhlbiB7bGVuZ3RofSBqc29uIHZhbHVlcyB8XG4gKiB8IFVpbnQ4QXJyYXkgICAgICAgICAgfCAxMTYgICAgICB8IHdyaXRlVmFyVWludDhBcnJheSB8IFdlIHVzZSBVaW50OEFycmF5IGZvciBhbnkga2luZCBvZiBiaW5hcnkgZGF0YSB8XG4gKlxuICogUmVhc29ucyBmb3IgdGhlIGRlY3JlYXNpbmcgcHJlZml4OlxuICogV2UgbmVlZCB0aGUgZmlyc3QgYml0IGZvciBleHRlbmRhYmlsaXR5IChsYXRlciB3ZSBtYXkgd2FudCB0byBlbmNvZGUgdGhlXG4gKiBwcmVmaXggd2l0aCB3cml0ZVZhclVpbnQpLiBUaGUgcmVtYWluaW5nIDcgYml0cyBhcmUgZGl2aWRlZCBhcyBmb2xsb3dzOlxuICogWzAtMzBdICAgdGhlIGJlZ2lubmluZyBvZiB0aGUgZGF0YSByYW5nZSBpcyB1c2VkIGZvciBjdXN0b20gcHVycG9zZXNcbiAqICAgICAgICAgIChkZWZpbmVkIGJ5IHRoZSBmdW5jdGlvbiB0aGF0IHVzZXMgdGhpcyBsaWJyYXJ5KVxuICogWzMxLTEyN10gdGhlIGVuZCBvZiB0aGUgZGF0YSByYW5nZSBpcyB1c2VkIGZvciBkYXRhIGVuY29kaW5nIGJ5XG4gKiAgICAgICAgICBsaWIwL2VuY29kaW5nLmpzXG4gKlxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge3VuZGVmaW5lZHxudWxsfG51bWJlcnxiaWdpbnR8Ym9vbGVhbnxzdHJpbmd8T2JqZWN0PHN0cmluZyxhbnk+fEFycmF5PGFueT58VWludDhBcnJheX0gZGF0YVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVBbnkgPSAoZW5jb2RlciwgZGF0YSkgPT4ge1xuICBzd2l0Y2ggKHR5cGVvZiBkYXRhKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIC8vIFRZUEUgMTE5OiBTVFJJTkdcbiAgICAgIHdyaXRlKGVuY29kZXIsIDExOSlcbiAgICAgIHdyaXRlVmFyU3RyaW5nKGVuY29kZXIsIGRhdGEpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAobnVtYmVyLmlzSW50ZWdlcihkYXRhKSAmJiBtYXRoLmFicyhkYXRhKSA8PSBiaW5hcnkuQklUUzMxKSB7XG4gICAgICAgIC8vIFRZUEUgMTI1OiBJTlRFR0VSXG4gICAgICAgIHdyaXRlKGVuY29kZXIsIDEyNSlcbiAgICAgICAgd3JpdGVWYXJJbnQoZW5jb2RlciwgZGF0YSlcbiAgICAgIH0gZWxzZSBpZiAoaXNGbG9hdDMyKGRhdGEpKSB7XG4gICAgICAgIC8vIFRZUEUgMTI0OiBGTE9BVDMyXG4gICAgICAgIHdyaXRlKGVuY29kZXIsIDEyNClcbiAgICAgICAgd3JpdGVGbG9hdDMyKGVuY29kZXIsIGRhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUWVBFIDEyMzogRkxPQVQ2NFxuICAgICAgICB3cml0ZShlbmNvZGVyLCAxMjMpXG4gICAgICAgIHdyaXRlRmxvYXQ2NChlbmNvZGVyLCBkYXRhKVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiaWdpbnQnOlxuICAgICAgLy8gVFlQRSAxMjI6IEJpZ0ludFxuICAgICAgd3JpdGUoZW5jb2RlciwgMTIyKVxuICAgICAgd3JpdGVCaWdJbnQ2NChlbmNvZGVyLCBkYXRhKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVFlQRSAxMjY6IG51bGxcbiAgICAgICAgd3JpdGUoZW5jb2RlciwgMTI2KVxuICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgLy8gVFlQRSAxMTc6IEFycmF5XG4gICAgICAgIHdyaXRlKGVuY29kZXIsIDExNylcbiAgICAgICAgd3JpdGVWYXJVaW50KGVuY29kZXIsIGRhdGEubGVuZ3RoKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB3cml0ZUFueShlbmNvZGVyLCBkYXRhW2ldKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIC8vIFRZUEUgMTE2OiBBcnJheUJ1ZmZlclxuICAgICAgICB3cml0ZShlbmNvZGVyLCAxMTYpXG4gICAgICAgIHdyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCBkYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVFlQRSAxMTg6IE9iamVjdFxuICAgICAgICB3cml0ZShlbmNvZGVyLCAxMTgpXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKVxuICAgICAgICB3cml0ZVZhclVpbnQoZW5jb2Rlciwga2V5cy5sZW5ndGgpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV1cbiAgICAgICAgICB3cml0ZVZhclN0cmluZyhlbmNvZGVyLCBrZXkpXG4gICAgICAgICAgd3JpdGVBbnkoZW5jb2RlciwgZGF0YVtrZXldKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgLy8gVFlQRSAxMjAvMTIxOiBib29sZWFuICh0cnVlL2ZhbHNlKVxuICAgICAgd3JpdGUoZW5jb2RlciwgZGF0YSA/IDEyMCA6IDEyMSlcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIFRZUEUgMTI3OiB1bmRlZmluZWRcbiAgICAgIHdyaXRlKGVuY29kZXIsIDEyNylcbiAgfVxufVxuXG4vKipcbiAqIE5vdyBjb21lIGEgZmV3IHN0YXRlZnVsIGVuY29kZXIgdGhhdCBoYXZlIHRoZWlyIG93biBjbGFzc2VzLlxuICovXG5cbi8qKlxuICogQmFzaWMgUnVuIExlbmd0aCBFbmNvZGVyIC0gYSBiYXNpYyBjb21wcmVzc2lvbiBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBFbmNvZGVzIFsxLDEsMSw3XSB0byBbMSwzLDcsMV0gKDMgdGltZXMgMSwgMSB0aW1lIDcpLiBUaGlzIGVuY29kZXIgbWlnaHQgZG8gbW9yZSBoYXJtIHRoYW4gZ29vZCBpZiB0aGVyZSBhcmUgYSBsb3Qgb2YgdmFsdWVzIHRoYXQgYXJlIG5vdCByZXBlYXRlZC5cbiAqXG4gKiBJdCB3YXMgb3JpZ2luYWxseSB1c2VkIGZvciBpbWFnZSBjb21wcmVzc2lvbi4gQ29vbCAuLiBhcnRpY2xlIGh0dHA6Ly9jc2JydWNlLmNvbS9jYm0vdHJhbnNhY3Rvci9wZGZzL3RyYW5zX3Y3X2kwNi5wZGZcbiAqXG4gKiBAbm90ZSBUIG11c3Qgbm90IGJlIG51bGwhXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZXhwb3J0IGNsYXNzIFJsZUVuY29kZXIgZXh0ZW5kcyBFbmNvZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oRW5jb2RlciwgVCk6dm9pZH0gd3JpdGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAod3JpdGVyKSB7XG4gICAgc3VwZXIoKVxuICAgIC8qKlxuICAgICAqIFRoZSB3cml0ZXJcbiAgICAgKi9cbiAgICB0aGlzLncgPSB3cml0ZXJcbiAgICAvKipcbiAgICAgKiBDdXJyZW50IHN0YXRlXG4gICAgICogQHR5cGUge1R8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSBudWxsXG4gICAgdGhpcy5jb3VudCA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1R9IHZcbiAgICovXG4gIHdyaXRlICh2KSB7XG4gICAgaWYgKHRoaXMucyA9PT0gdikge1xuICAgICAgdGhpcy5jb3VudCsrXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmNvdW50ID4gMCkge1xuICAgICAgICAvLyBmbHVzaCBjb3VudGVyLCB1bmxlc3MgdGhpcyBpcyB0aGUgZmlyc3QgdmFsdWUgKGNvdW50ID0gMClcbiAgICAgICAgd3JpdGVWYXJVaW50KHRoaXMsIHRoaXMuY291bnQgLSAxKSAvLyBzaW5jZSBjb3VudCBpcyBhbHdheXMgPiAwLCB3ZSBjYW4gZGVjcmVtZW50IGJ5IG9uZS4gbm9uLXN0YW5kYXJkIGVuY29kaW5nIGZ0d1xuICAgICAgfVxuICAgICAgdGhpcy5jb3VudCA9IDFcbiAgICAgIC8vIHdyaXRlIGZpcnN0IHZhbHVlXG4gICAgICB0aGlzLncodGhpcywgdilcbiAgICAgIHRoaXMucyA9IHZcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBCYXNpYyBkaWZmIGRlY29kZXIgdXNpbmcgdmFyaWFibGUgbGVuZ3RoIGVuY29kaW5nLlxuICpcbiAqIEVuY29kZXMgdGhlIHZhbHVlcyBbMywgMTEwMCwgMTEwMSwgMTA1MCwgMF0gdG8gWzMsIDEwOTcsIDEsIC01MSwgLTEwNTBdIHVzaW5nIHdyaXRlVmFySW50LlxuICovXG5leHBvcnQgY2xhc3MgSW50RGlmZkVuY29kZXIgZXh0ZW5kcyBFbmNvZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICAgKi9cbiAgY29uc3RydWN0b3IgKHN0YXJ0KSB7XG4gICAgc3VwZXIoKVxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgc3RhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IHN0YXJ0XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZcbiAgICovXG4gIHdyaXRlICh2KSB7XG4gICAgd3JpdGVWYXJJbnQodGhpcywgdiAtIHRoaXMucylcbiAgICB0aGlzLnMgPSB2XG4gIH1cbn1cblxuLyoqXG4gKiBBIGNvbWJpbmF0aW9uIG9mIEludERpZmZFbmNvZGVyIGFuZCBSbGVFbmNvZGVyLlxuICpcbiAqIEJhc2ljYWxseSBmaXJzdCB3cml0ZXMgdGhlIEludERpZmZFbmNvZGVyIGFuZCB0aGVuIGNvdW50cyBkdXBsaWNhdGUgZGlmZnMgdXNpbmcgUmxlRW5jb2RpbmcuXG4gKlxuICogRW5jb2RlcyB0aGUgdmFsdWVzIFsxLDEsMSwyLDMsNCw1LDZdIGFzIFsxLDEsMCwyLDEsNV0gKFJMRShbMSwwLDAsMSwxLDEsMSwxXSkg4oeSIFJsZUludERpZmZbMSwxLDAsMiwxLDVdKVxuICovXG5leHBvcnQgY2xhc3MgUmxlSW50RGlmZkVuY29kZXIgZXh0ZW5kcyBFbmNvZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICAgKi9cbiAgY29uc3RydWN0b3IgKHN0YXJ0KSB7XG4gICAgc3VwZXIoKVxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgc3RhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IHN0YXJ0XG4gICAgdGhpcy5jb3VudCA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdlxuICAgKi9cbiAgd3JpdGUgKHYpIHtcbiAgICBpZiAodGhpcy5zID09PSB2ICYmIHRoaXMuY291bnQgPiAwKSB7XG4gICAgICB0aGlzLmNvdW50KytcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuY291bnQgPiAwKSB7XG4gICAgICAgIC8vIGZsdXNoIGNvdW50ZXIsIHVubGVzcyB0aGlzIGlzIHRoZSBmaXJzdCB2YWx1ZSAoY291bnQgPSAwKVxuICAgICAgICB3cml0ZVZhclVpbnQodGhpcywgdGhpcy5jb3VudCAtIDEpIC8vIHNpbmNlIGNvdW50IGlzIGFsd2F5cyA+IDAsIHdlIGNhbiBkZWNyZW1lbnQgYnkgb25lLiBub24tc3RhbmRhcmQgZW5jb2RpbmcgZnR3XG4gICAgICB9XG4gICAgICB0aGlzLmNvdW50ID0gMVxuICAgICAgLy8gd3JpdGUgZmlyc3QgdmFsdWVcbiAgICAgIHdyaXRlVmFySW50KHRoaXMsIHYgLSB0aGlzLnMpXG4gICAgICB0aGlzLnMgPSB2XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50T3B0UmxlRW5jb2Rlcn0gZW5jb2RlclxuICovXG5jb25zdCBmbHVzaFVpbnRPcHRSbGVFbmNvZGVyID0gZW5jb2RlciA9PiB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbmNvZGVyLmNvdW50ID4gMCkge1xuICAgIC8vIGZsdXNoIGNvdW50ZXIsIHVubGVzcyB0aGlzIGlzIHRoZSBmaXJzdCB2YWx1ZSAoY291bnQgPSAwKVxuICAgIC8vIGNhc2UgMToganVzdCBhIHNpbmdsZSB2YWx1ZS4gc2V0IHNpZ24gdG8gcG9zaXRpdmVcbiAgICAvLyBjYXNlIDI6IHdyaXRlIHNldmVyYWwgdmFsdWVzLiBzZXQgc2lnbiB0byBuZWdhdGl2ZSB0byBpbmRpY2F0ZSB0aGF0IHRoZXJlIGlzIGEgbGVuZ3RoIGNvbWluZ1xuICAgIHdyaXRlVmFySW50KGVuY29kZXIuZW5jb2RlciwgZW5jb2Rlci5jb3VudCA9PT0gMSA/IGVuY29kZXIucyA6IC1lbmNvZGVyLnMpXG4gICAgaWYgKGVuY29kZXIuY291bnQgPiAxKSB7XG4gICAgICB3cml0ZVZhclVpbnQoZW5jb2Rlci5lbmNvZGVyLCBlbmNvZGVyLmNvdW50IC0gMikgLy8gc2luY2UgY291bnQgaXMgYWx3YXlzID4gMSwgd2UgY2FuIGRlY3JlbWVudCBieSBvbmUuIG5vbi1zdGFuZGFyZCBlbmNvZGluZyBmdHdcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBPcHRpbWl6ZWQgUmxlIGVuY29kZXIgdGhhdCBkb2VzIG5vdCBzdWZmZXIgZnJvbSB0aGUgbWVudGlvbmVkIHByb2JsZW0gb2YgdGhlIGJhc2ljIFJsZSBlbmNvZGVyLlxuICpcbiAqIEludGVybmFsbHkgdXNlcyBWYXJJbnQgZW5jb2RlciB0byB3cml0ZSB1bnNpZ25lZCBpbnRlZ2Vycy4gSWYgdGhlIGlucHV0IG9jY3VycyBtdWx0aXBsZSB0aW1lcywgd2Ugd3JpdGVcbiAqIHdyaXRlIGl0IGFzIGEgbmVnYXRpdmUgbnVtYmVyLiBUaGUgVWludE9wdFJsZURlY29kZXIgdGhlbiB1bmRlcnN0YW5kcyB0aGF0IGl0IG5lZWRzIHRvIHJlYWQgYSBjb3VudC5cbiAqXG4gKiBFbmNvZGVzIFsxLDIsMywzLDNdIGFzIFsxLDIsLTMsM10gKG9uY2UgMSwgb25jZSAyLCB0aHJlZSB0aW1lcyAzKVxuICovXG5leHBvcnQgY2xhc3MgVWludE9wdFJsZUVuY29kZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5lbmNvZGVyID0gbmV3IEVuY29kZXIoKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zID0gMFxuICAgIHRoaXMuY291bnQgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZcbiAgICovXG4gIHdyaXRlICh2KSB7XG4gICAgaWYgKHRoaXMucyA9PT0gdikge1xuICAgICAgdGhpcy5jb3VudCsrXG4gICAgfSBlbHNlIHtcbiAgICAgIGZsdXNoVWludE9wdFJsZUVuY29kZXIodGhpcylcbiAgICAgIHRoaXMuY291bnQgPSAxXG4gICAgICB0aGlzLnMgPSB2XG4gICAgfVxuICB9XG5cbiAgdG9VaW50OEFycmF5ICgpIHtcbiAgICBmbHVzaFVpbnRPcHRSbGVFbmNvZGVyKHRoaXMpXG4gICAgcmV0dXJuIHRvVWludDhBcnJheSh0aGlzLmVuY29kZXIpXG4gIH1cbn1cblxuLyoqXG4gKiBJbmNyZWFzaW5nIFVpbnQgT3B0aW1pemVkIFJMRSBFbmNvZGVyXG4gKlxuICogVGhlIFJMRSBlbmNvZGVyIGNvdW50cyB0aGUgbnVtYmVyIG9mIHNhbWUgb2NjdXJlbmNlcyBvZiB0aGUgc2FtZSB2YWx1ZS5cbiAqIFRoZSBJbmNVaW50T3B0UmxlIGVuY29kZXIgY291bnRzIGlmIHRoZSB2YWx1ZSBpbmNyZWFzZXMuXG4gKiBJLmUuIDcsIDgsIDksIDEwIHdpbGwgYmUgZW5jb2RlZCBhcyBbLTcsIDRdLiAxLCAzLCA1IHdpbGwgYmUgZW5jb2RlZFxuICogYXMgWzEsIDMsIDVdLlxuICovXG5leHBvcnQgY2xhc3MgSW5jVWludE9wdFJsZUVuY29kZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5lbmNvZGVyID0gbmV3IEVuY29kZXIoKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zID0gMFxuICAgIHRoaXMuY291bnQgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZcbiAgICovXG4gIHdyaXRlICh2KSB7XG4gICAgaWYgKHRoaXMucyArIHRoaXMuY291bnQgPT09IHYpIHtcbiAgICAgIHRoaXMuY291bnQrK1xuICAgIH0gZWxzZSB7XG4gICAgICBmbHVzaFVpbnRPcHRSbGVFbmNvZGVyKHRoaXMpXG4gICAgICB0aGlzLmNvdW50ID0gMVxuICAgICAgdGhpcy5zID0gdlxuICAgIH1cbiAgfVxuXG4gIHRvVWludDhBcnJheSAoKSB7XG4gICAgZmx1c2hVaW50T3B0UmxlRW5jb2Rlcih0aGlzKVxuICAgIHJldHVybiB0b1VpbnQ4QXJyYXkodGhpcy5lbmNvZGVyKVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtJbnREaWZmT3B0UmxlRW5jb2Rlcn0gZW5jb2RlclxuICovXG5jb25zdCBmbHVzaEludERpZmZPcHRSbGVFbmNvZGVyID0gZW5jb2RlciA9PiB7XG4gIGlmIChlbmNvZGVyLmNvdW50ID4gMCkge1xuICAgIC8vICAgICAgICAgIDMxIGJpdCBtYWtpbmcgdXAgdGhlIGRpZmYgfCB3ZXRoZXIgdG8gd3JpdGUgdGhlIGNvdW50ZXJcbiAgICBjb25zdCBlbmNvZGVkRGlmZiA9IGVuY29kZXIuZGlmZiA8PCAxIHwgKGVuY29kZXIuY291bnQgPT09IDEgPyAwIDogMSlcbiAgICAvLyBmbHVzaCBjb3VudGVyLCB1bmxlc3MgdGhpcyBpcyB0aGUgZmlyc3QgdmFsdWUgKGNvdW50ID0gMClcbiAgICAvLyBjYXNlIDE6IGp1c3QgYSBzaW5nbGUgdmFsdWUuIHNldCBmaXJzdCBiaXQgdG8gcG9zaXRpdmVcbiAgICAvLyBjYXNlIDI6IHdyaXRlIHNldmVyYWwgdmFsdWVzLiBzZXQgZmlyc3QgYml0IHRvIG5lZ2F0aXZlIHRvIGluZGljYXRlIHRoYXQgdGhlcmUgaXMgYSBsZW5ndGggY29taW5nXG4gICAgd3JpdGVWYXJJbnQoZW5jb2Rlci5lbmNvZGVyLCBlbmNvZGVkRGlmZilcbiAgICBpZiAoZW5jb2Rlci5jb3VudCA+IDEpIHtcbiAgICAgIHdyaXRlVmFyVWludChlbmNvZGVyLmVuY29kZXIsIGVuY29kZXIuY291bnQgLSAyKSAvLyBzaW5jZSBjb3VudCBpcyBhbHdheXMgPiAxLCB3ZSBjYW4gZGVjcmVtZW50IGJ5IG9uZS4gbm9uLXN0YW5kYXJkIGVuY29kaW5nIGZ0d1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEEgY29tYmluYXRpb24gb2YgdGhlIEludERpZmZFbmNvZGVyIGFuZCB0aGUgVWludE9wdFJsZUVuY29kZXIuXG4gKlxuICogVGhlIGNvdW50IGFwcHJvYWNoIGlzIHNpbWlsYXIgdG8gdGhlIFVpbnREaWZmT3B0UmxlRW5jb2RlciwgYnV0IGluc3RlYWQgb2YgdXNpbmcgdGhlIG5lZ2F0aXZlIGJpdGZsYWcsIGl0IGVuY29kZXNcbiAqIGluIHRoZSBMU0Igd2hldGhlciBhIGNvdW50IGlzIHRvIGJlIHJlYWQuIFRoZXJlZm9yZSB0aGlzIEVuY29kZXIgb25seSBzdXBwb3J0cyAzMSBiaXQgaW50ZWdlcnMhXG4gKlxuICogRW5jb2RlcyBbMSwgMiwgMywgMl0gYXMgWzMsIDEsIDYsIC0xXSAobW9yZSBzcGVjaWZpY2FsbHkgWygxIDw8IDEpIHwgMSwgKDMgPDwgMCkgfCAwLCAtMV0pXG4gKlxuICogSW50ZXJuYWxseSB1c2VzIHZhcmlhYmxlIGxlbmd0aCBlbmNvZGluZy4gQ29udHJhcnkgdG8gbm9ybWFsIFVpbnRWYXIgZW5jb2RpbmcsIHRoZSBmaXJzdCBieXRlIGNvbnRhaW5zOlxuICogKiAxIGJpdCB0aGF0IGRlbm90ZXMgd2hldGhlciB0aGUgbmV4dCB2YWx1ZSBpcyBhIGNvdW50IChMU0IpXG4gKiAqIDEgYml0IHRoYXQgZGVub3RlcyB3aGV0aGVyIHRoaXMgdmFsdWUgaXMgbmVnYXRpdmUgKE1TQiAtIDEpXG4gKiAqIDEgYml0IHRoYXQgZGVub3RlcyB3aGV0aGVyIHRvIGNvbnRpbnVlIHJlYWRpbmcgdGhlIHZhcmlhYmxlIGxlbmd0aCBpbnRlZ2VyIChNU0IpXG4gKlxuICogVGhlcmVmb3JlLCBvbmx5IGZpdmUgYml0cyByZW1haW4gdG8gZW5jb2RlIGRpZmYgcmFuZ2VzLlxuICpcbiAqIFVzZSB0aGlzIEVuY29kZXIgb25seSB3aGVuIGFwcHJvcHJpYXRlLiBJbiBtb3N0IGNhc2VzLCB0aGlzIGlzIHByb2JhYmx5IGEgYmFkIGlkZWEuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnREaWZmT3B0UmxlRW5jb2RlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmVuY29kZXIgPSBuZXcgRW5jb2RlcigpXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSAwXG4gICAgdGhpcy5jb3VudCA9IDBcbiAgICB0aGlzLmRpZmYgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZcbiAgICovXG4gIHdyaXRlICh2KSB7XG4gICAgaWYgKHRoaXMuZGlmZiA9PT0gdiAtIHRoaXMucykge1xuICAgICAgdGhpcy5zID0gdlxuICAgICAgdGhpcy5jb3VudCsrXG4gICAgfSBlbHNlIHtcbiAgICAgIGZsdXNoSW50RGlmZk9wdFJsZUVuY29kZXIodGhpcylcbiAgICAgIHRoaXMuY291bnQgPSAxXG4gICAgICB0aGlzLmRpZmYgPSB2IC0gdGhpcy5zXG4gICAgICB0aGlzLnMgPSB2XG4gICAgfVxuICB9XG5cbiAgdG9VaW50OEFycmF5ICgpIHtcbiAgICBmbHVzaEludERpZmZPcHRSbGVFbmNvZGVyKHRoaXMpXG4gICAgcmV0dXJuIHRvVWludDhBcnJheSh0aGlzLmVuY29kZXIpXG4gIH1cbn1cblxuLyoqXG4gKiBPcHRpbWl6ZWQgU3RyaW5nIEVuY29kZXIuXG4gKlxuICogRW5jb2RpbmcgbWFueSBzbWFsbCBzdHJpbmdzIGluIGEgc2ltcGxlIEVuY29kZXIgaXMgbm90IHZlcnkgZWZmaWNpZW50LiBUaGUgZnVuY3Rpb24gY2FsbCB0byBkZWNvZGUgYSBzdHJpbmcgdGFrZXMgc29tZSB0aW1lIGFuZCBjcmVhdGVzIHJlZmVyZW5jZXMgdGhhdCBtdXN0IGJlIGV2ZW50dWFsbHkgZGVsZXRlZC5cbiAqIEluIHByYWN0aWNlLCB3aGVuIGRlY29kaW5nIHNldmVyYWwgbWlsbGlvbiBzbWFsbCBzdHJpbmdzLCB0aGUgR0Mgd2lsbCBraWNrIGluIG1vcmUgYW5kIG1vcmUgb2Z0ZW4gdG8gY29sbGVjdCBvcnBoYW5lZCBzdHJpbmcgb2JqZWN0cyAob3IgbWF5YmUgdGhlcmUgaXMgYW5vdGhlciByZWFzb24/KS5cbiAqXG4gKiBUaGlzIHN0cmluZyBlbmNvZGVyIHNvbHZlcyB0aGUgYWJvdmUgcHJvYmxlbS4gQWxsIHN0cmluZ3MgYXJlIGNvbmNhdGVuYXRlZCBhbmQgd3JpdHRlbiBhcyBhIHNpbmdsZSBzdHJpbmcgdXNpbmcgYSBzaW5nbGUgZW5jb2RpbmcgY2FsbC5cbiAqXG4gKiBUaGUgbGVuZ3RocyBhcmUgZW5jb2RlZCB1c2luZyBhIFVpbnRPcHRSbGVFbmNvZGVyLlxuICovXG5leHBvcnQgY2xhc3MgU3RyaW5nRW5jb2RlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn1cbiAgICAgKi9cbiAgICB0aGlzLnNhcnIgPSBbXVxuICAgIHRoaXMucyA9ICcnXG4gICAgdGhpcy5sZW5zRSA9IG5ldyBVaW50T3B0UmxlRW5jb2RlcigpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgKi9cbiAgd3JpdGUgKHN0cmluZykge1xuICAgIHRoaXMucyArPSBzdHJpbmdcbiAgICBpZiAodGhpcy5zLmxlbmd0aCA+IDE5KSB7XG4gICAgICB0aGlzLnNhcnIucHVzaCh0aGlzLnMpXG4gICAgICB0aGlzLnMgPSAnJ1xuICAgIH1cbiAgICB0aGlzLmxlbnNFLndyaXRlKHN0cmluZy5sZW5ndGgpXG4gIH1cblxuICB0b1VpbnQ4QXJyYXkgKCkge1xuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgRW5jb2RlcigpXG4gICAgdGhpcy5zYXJyLnB1c2godGhpcy5zKVxuICAgIHRoaXMucyA9ICcnXG4gICAgd3JpdGVWYXJTdHJpbmcoZW5jb2RlciwgdGhpcy5zYXJyLmpvaW4oJycpKVxuICAgIHdyaXRlVWludDhBcnJheShlbmNvZGVyLCB0aGlzLmxlbnNFLnRvVWludDhBcnJheSgpKVxuICAgIHJldHVybiB0b1VpbnQ4QXJyYXkoZW5jb2RlcilcbiAgfVxufVxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5leHBvcnQgY29uc3QgcGVyZm9ybWFuY2UgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiAodHlwZW9mIHdpbmRvdy5wZXJmb3JtYW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBlcmZvcm1hbmNlKSB8fCBudWxsXG5cbmNvbnN0IGlzb0NyeXB0byA9IHR5cGVvZiBjcnlwdG8gPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IGNyeXB0b1xuXG4vKipcbiAqIEB0eXBlIHtmdW5jdGlvbihudW1iZXIpOkFycmF5QnVmZmVyfVxuICovXG5leHBvcnQgY29uc3QgY3J5cHRvUmFuZG9tQnVmZmVyID0gaXNvQ3J5cHRvICE9PSBudWxsXG4gID8gbGVuID0+IHtcbiAgICAvLyBicm93c2VyXG4gICAgY29uc3QgYnVmID0gbmV3IEFycmF5QnVmZmVyKGxlbilcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShidWYpXG4gICAgaXNvQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG4gIDogbGVuID0+IHtcbiAgICAvLyBwb2x5ZmlsbFxuICAgIGNvbnN0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihsZW4pXG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFycltpXSA9IE1hdGguY2VpbCgoTWF0aC5yYW5kb20oKSAqIDB4RkZGRkZGRkYpID4+PiAwKVxuICAgIH1cbiAgICByZXR1cm4gYnVmXG4gIH1cbiIsIlxuLyoqXG4gKiBJc29tb3JwaGljIG1vZHVsZSBmb3IgdHJ1ZSByYW5kb20gbnVtYmVycyAvIGJ1ZmZlcnMgLyB1dWlkcy5cbiAqXG4gKiBBdHRlbnRpb246IGZhbGxzIGJhY2sgdG8gTWF0aC5yYW5kb20gaWYgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBjcnlwdG8uXG4gKlxuICogQG1vZHVsZSByYW5kb21cbiAqL1xuXG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJy4vbWF0aC5qcydcbmltcG9ydCB7IGNyeXB0b1JhbmRvbUJ1ZmZlciB9IGZyb20gJy4vaXNvbW9ycGhpYy5qcydcblxuZXhwb3J0IGNvbnN0IHJhbmQgPSBNYXRoLnJhbmRvbVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHVpbnQzMiA9ICgpID0+IG5ldyBVaW50MzJBcnJheShjcnlwdG9SYW5kb21CdWZmZXIoNCkpWzBdXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7QXJyYXk8VD59IGFyclxuICogQHJldHVybiB7VH1cbiAqL1xuZXhwb3J0IGNvbnN0IG9uZU9mID0gYXJyID0+IGFyclttYXRoLmZsb29yKHJhbmQoKSAqIGFyci5sZW5ndGgpXVxuXG4vLyBAdHMtaWdub3JlXG5jb25zdCB1dWlkdjRUZW1wbGF0ZSA9IFsxZTddICsgLTFlMyArIC00ZTMgKyAtOGUzICsgLTFlMTFcbmV4cG9ydCBjb25zdCB1dWlkdjQgPSAoKSA9PiB1dWlkdjRUZW1wbGF0ZS5yZXBsYWNlKC9bMDE4XS9nLCAvKiogQHBhcmFtIHtudW1iZXJ9IGMgKi8gYyA9PlxuICAoYyBeIHVpbnQzMigpICYgMTUgPj4gYyAvIDQpLnRvU3RyaW5nKDE2KVxuKVxuIiwiLyoqXG4gKiBVdGlsaXR5IG1vZHVsZSB0byB3b3JrIHdpdGggdGltZS5cbiAqXG4gKiBAbW9kdWxlIHRpbWVcbiAqL1xuXG5pbXBvcnQgKiBhcyBtZXRyaWMgZnJvbSAnLi9tZXRyaWMuanMnXG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJy4vbWF0aC5qcydcblxuLyoqXG4gKiBSZXR1cm4gY3VycmVudCB0aW1lLlxuICpcbiAqIEByZXR1cm4ge0RhdGV9XG4gKi9cbmV4cG9ydCBjb25zdCBnZXREYXRlID0gKCkgPT4gbmV3IERhdGUoKVxuXG4vKipcbiAqIFJldHVybiBjdXJyZW50IHVuaXggdGltZS5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRVbml4VGltZSA9IERhdGUubm93XG5cbi8qKlxuICogVHJhbnNmb3JtIHRpbWUgKGluIG1zKSB0byBhIGh1bWFuIHJlYWRhYmxlIGZvcm1hdC4gRS5nLiAxMTAwID0+IDEuMXMuIDYwcyA9PiAxbWluLiAuMDAxID0+IDEwzrxzLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBkIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kc1xuICogQHJldHVybiB7c3RyaW5nfSBodW1hbml6ZWQgYXBwcm94aW1hdGlvbiBvZiB0aW1lXG4gKi9cbmV4cG9ydCBjb25zdCBodW1hbml6ZUR1cmF0aW9uID0gZCA9PiB7XG4gIGlmIChkIDwgNjAwMDApIHtcbiAgICBjb25zdCBwID0gbWV0cmljLnByZWZpeChkLCAtMSlcbiAgICByZXR1cm4gbWF0aC5yb3VuZChwLm4gKiAxMDApIC8gMTAwICsgcC5wcmVmaXggKyAncydcbiAgfVxuICBkID0gbWF0aC5mbG9vcihkIC8gMTAwMClcbiAgY29uc3Qgc2Vjb25kcyA9IGQgJSA2MFxuICBjb25zdCBtaW51dGVzID0gbWF0aC5mbG9vcihkIC8gNjApICUgNjBcbiAgY29uc3QgaG91cnMgPSBtYXRoLmZsb29yKGQgLyAzNjAwKSAlIDI0XG4gIGNvbnN0IGRheXMgPSBtYXRoLmZsb29yKGQgLyA4NjQwMClcbiAgaWYgKGRheXMgPiAwKSB7XG4gICAgcmV0dXJuIGRheXMgKyAnZCcgKyAoKGhvdXJzID4gMCB8fCBtaW51dGVzID4gMzApID8gJyAnICsgKG1pbnV0ZXMgPiAzMCA/IGhvdXJzICsgMSA6IGhvdXJzKSArICdoJyA6ICcnKVxuICB9XG4gIGlmIChob3VycyA+IDApIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiBob3VycyArICdoJyArICgobWludXRlcyA+IDAgfHwgc2Vjb25kcyA+IDMwKSA/ICcgJyArIChzZWNvbmRzID4gMzAgPyBtaW51dGVzICsgMSA6IG1pbnV0ZXMpICsgJ21pbicgOiAnJylcbiAgfVxuICByZXR1cm4gbWludXRlcyArICdtaW4nICsgKHNlY29uZHMgPiAwID8gJyAnICsgc2Vjb25kcyArICdzJyA6ICcnKVxufVxuIiwiLyoqXG4gKiBFcnJvciBoZWxwZXJzLlxuICpcbiAqIEBtb2R1bGUgZXJyb3JcbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7RXJyb3J9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSBzID0+IG5ldyBFcnJvcihzKVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAdGhyb3dzIHtFcnJvcn1cbiAqIEByZXR1cm4ge25ldmVyfVxuICovXG5leHBvcnQgY29uc3QgbWV0aG9kVW5pbXBsZW1lbnRlZCA9ICgpID0+IHtcbiAgdGhyb3cgY3JlYXRlKCdNZXRob2QgdW5pbXBsZW1lbnRlZCcpXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEB0aHJvd3Mge0Vycm9yfVxuICogQHJldHVybiB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCB1bmV4cGVjdGVkQ2FzZSA9ICgpID0+IHtcbiAgdGhyb3cgY3JlYXRlKCdVbmV4cGVjdGVkIGNhc2UnKVxufVxuIiwiLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9ucyBmb3Igd29ya2luZyB3aXRoIEVjbWFTY3JpcHQgb2JqZWN0cy5cbiAqXG4gKiBAbW9kdWxlIG9iamVjdFxuICovXG5cbi8qKlxuICogQHJldHVybiB7T2JqZWN0PHN0cmluZyxhbnk+fSBvYmpcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9ICgpID0+IE9iamVjdC5jcmVhdGUobnVsbClcblxuLyoqXG4gKiBPYmplY3QuYXNzaWduXG4gKi9cbmV4cG9ydCBjb25zdCBhc3NpZ24gPSBPYmplY3QuYXNzaWduXG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IG9ialxuICovXG5leHBvcnQgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzXG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IG9ialxuICogQHBhcmFtIHtmdW5jdGlvbihhbnksc3RyaW5nKTphbnl9IGZcbiAqL1xuZXhwb3J0IGNvbnN0IGZvckVhY2ggPSAob2JqLCBmKSA9PiB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGYob2JqW2tleV0sIGtleSlcbiAgfVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBSXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gb2JqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFueSxzdHJpbmcpOlJ9IGZcbiAqIEByZXR1cm4ge0FycmF5PFI+fVxuICovXG5leHBvcnQgY29uc3QgbWFwID0gKG9iaiwgZikgPT4ge1xuICBjb25zdCByZXN1bHRzID0gW11cbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmVzdWx0cy5wdXNoKGYob2JqW2tleV0sIGtleSkpXG4gIH1cbiAgcmV0dXJuIHJlc3VsdHNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gb2JqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBsZW5ndGggPSBvYmogPT4ga2V5cyhvYmopLmxlbmd0aFxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBvYmpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW55LHN0cmluZyk6Ym9vbGVhbn0gZlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IHNvbWUgPSAob2JqLCBmKSA9PiB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmIChmKG9ialtrZXldLCBrZXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gb2JqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFueSxzdHJpbmcpOmJvb2xlYW59IGZcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBldmVyeSA9IChvYmosIGYpID0+IHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKCFmKG9ialtrZXldLCBrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLyoqXG4gKiBDYWxscyBgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eWAuXG4gKlxuICogQHBhcmFtIHthbnl9IG9ialxuICogQHBhcmFtIHtzdHJpbmd8c3ltYm9sfSBrZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBoYXNQcm9wZXJ0eSA9IChvYmosIGtleSkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBhXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFsRmxhdCA9IChhLCBiKSA9PiBhID09PSBiIHx8IChsZW5ndGgoYSkgPT09IGxlbmd0aChiKSAmJiBldmVyeShhLCAodmFsLCBrZXkpID0+ICh2YWwgIT09IHVuZGVmaW5lZCB8fCBoYXNQcm9wZXJ0eShiLCBrZXkpKSAmJiBiW2tleV0gPT09IHZhbCkpXG4iLCIvKipcbiAqIENvbW1vbiBmdW5jdGlvbnMgYW5kIGZ1bmN0aW9uIGNhbGwgaGVscGVycy5cbiAqXG4gKiBAbW9kdWxlIGZ1bmN0aW9uXG4gKi9cblxuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSAnLi9hcnJheS5qcydcbmltcG9ydCAqIGFzIG9iamVjdCBmcm9tICcuL29iamVjdC5qcydcblxuLyoqXG4gKiBDYWxscyBhbGwgZnVuY3Rpb25zIGluIGBmc2Agd2l0aCBhcmdzLiBPbmx5IHRocm93cyBhZnRlciBhbGwgZnVuY3Rpb25zIHdlcmUgY2FsbGVkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8ZnVuY3Rpb24+fSBmc1xuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcmdzXG4gKi9cbmV4cG9ydCBjb25zdCBjYWxsQWxsID0gKGZzLCBhcmdzLCBpID0gMCkgPT4ge1xuICB0cnkge1xuICAgIGZvciAoOyBpIDwgZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZzW2ldKC4uLmFyZ3MpXG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGlmIChpIDwgZnMubGVuZ3RoKSB7XG4gICAgICBjYWxsQWxsKGZzLCBhcmdzLCBpICsgMSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IG5vcCA9ICgpID0+IHt9XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpUfSBmXG4gKiBAcmV0dXJuIHtUfVxuICovXG5leHBvcnQgY29uc3QgYXBwbHkgPSBmID0+IGYoKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBBXG4gKlxuICogQHBhcmFtIHtBfSBhXG4gKiBAcmV0dXJuIHtBfVxuICovXG5leHBvcnQgY29uc3QgaWQgPSBhID0+IGFcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICpcbiAqIEBwYXJhbSB7VH0gYVxuICogQHBhcmFtIHtUfSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgZXF1YWxpdHlTdHJpY3QgPSAoYSwgYikgPT4gYSA9PT0gYlxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKlxuICogQHBhcmFtIHtBcnJheTxUPnxvYmplY3R9IGFcbiAqIEBwYXJhbSB7QXJyYXk8VD58b2JqZWN0fSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgZXF1YWxpdHlGbGF0ID0gKGEsIGIpID0+IGEgPT09IGIgfHwgKGEgIT0gbnVsbCAmJiBiICE9IG51bGwgJiYgYS5jb25zdHJ1Y3RvciA9PT0gYi5jb25zdHJ1Y3RvciAmJiAoKGEgaW5zdGFuY2VvZiBBcnJheSAmJiBhcnJheS5lcXVhbEZsYXQoYSwgLyoqIEB0eXBlIHtBcnJheTxUPn0gKi8gKGIpKSkgfHwgKHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiBvYmplY3QuZXF1YWxGbGF0KGEsIGIpKSkpXG5cbi8qKlxuICogQHBhcmFtIHthbnl9IGFcbiAqIEBwYXJhbSB7YW55fSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgZXF1YWxpdHlEZWVwID0gKGEsIGIpID0+IHtcbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHtcbiAgICByZXR1cm4gZXF1YWxpdHlTdHJpY3QoYSwgYilcbiAgfVxuICBpZiAoYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBzd2l0Y2ggKGEuY29uc3RydWN0b3IpIHtcbiAgICBjYXNlIEFycmF5QnVmZmVyOlxuICAgICAgYSA9IG5ldyBVaW50OEFycmF5KGEpXG4gICAgICBiID0gbmV3IFVpbnQ4QXJyYXkoYilcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcbiAgICBjYXNlIFVpbnQ4QXJyYXk6IHtcbiAgICAgIGlmIChhLmJ5dGVMZW5ndGggIT09IGIuYnl0ZUxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjYXNlIFNldDoge1xuICAgICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBhKSB7XG4gICAgICAgIGlmICghYi5oYXModmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGNhc2UgTWFwOiB7XG4gICAgICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBhLmtleXMoKSkge1xuICAgICAgICBpZiAoIWIuaGFzKGtleSkgfHwgIWVxdWFsaXR5RGVlcChhLmdldChrZXkpLCBiLmdldChrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjYXNlIE9iamVjdDpcbiAgICAgIGlmIChvYmplY3QubGVuZ3RoKGEpICE9PSBvYmplY3QubGVuZ3RoKGIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgICAgICBpZiAoIW9iamVjdC5oYXNQcm9wZXJ0eShhLCBrZXkpIHx8ICFlcXVhbGl0eURlZXAoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSBBcnJheTpcbiAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFlcXVhbGl0eURlZXAoYVtpXSwgYltpXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cbiIsIi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIEVjbWFTY3JpcHQgU3ltYm9scy5cbiAqXG4gKiBAbW9kdWxlIHN5bWJvbFxuICovXG5cbi8qKlxuICogUmV0dXJuIGZyZXNoIHN5bWJvbC5cbiAqXG4gKiBAcmV0dXJuIHtTeW1ib2x9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSBTeW1ib2xcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gc1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzU3ltYm9sID0gcyA9PiB0eXBlb2YgcyA9PT0gJ3N5bWJvbCdcbiIsIi8qKlxuICogV29ya2luZyB3aXRoIHZhbHVlIHBhaXJzLlxuICpcbiAqIEBtb2R1bGUgcGFpclxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIEwsUlxuICovXG5leHBvcnQgY2xhc3MgUGFpciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0x9IGxlZnRcbiAgICogQHBhcmFtIHtSfSByaWdodFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGxlZnQsIHJpZ2h0KSB7XG4gICAgdGhpcy5sZWZ0ID0gbGVmdFxuICAgIHRoaXMucmlnaHQgPSByaWdodFxuICB9XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIEwsUlxuICogQHBhcmFtIHtMfSBsZWZ0XG4gKiBAcGFyYW0ge1J9IHJpZ2h0XG4gKiBAcmV0dXJuIHtQYWlyPEwsUj59XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSAobGVmdCwgcmlnaHQpID0+IG5ldyBQYWlyKGxlZnQsIHJpZ2h0KVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBMLFJcbiAqIEBwYXJhbSB7Un0gcmlnaHRcbiAqIEBwYXJhbSB7TH0gbGVmdFxuICogQHJldHVybiB7UGFpcjxMLFI+fVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlUmV2ZXJzZWQgPSAocmlnaHQsIGxlZnQpID0+IG5ldyBQYWlyKGxlZnQsIHJpZ2h0KVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBMLFJcbiAqIEBwYXJhbSB7QXJyYXk8UGFpcjxMLFI+Pn0gYXJyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEwsIFIpOmFueX0gZlxuICovXG5leHBvcnQgY29uc3QgZm9yRWFjaCA9IChhcnIsIGYpID0+IGFyci5mb3JFYWNoKHAgPT4gZihwLmxlZnQsIHAucmlnaHQpKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBMLFIsWFxuICogQHBhcmFtIHtBcnJheTxQYWlyPEwsUj4+fSBhcnJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oTCwgUik6WH0gZlxuICogQHJldHVybiB7QXJyYXk8WD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXAgPSAoYXJyLCBmKSA9PiBhcnIubWFwKHAgPT4gZihwLmxlZnQsIHAucmlnaHQpKVxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIHRoZSBET00uXG4gKlxuICogQG1vZHVsZSBkb21cbiAqL1xuXG5pbXBvcnQgKiBhcyBwYWlyIGZyb20gJy4vcGFpci5qcydcbmltcG9ydCAqIGFzIG1hcCBmcm9tICcuL21hcC5qcydcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHR5cGUge0RvY3VtZW50fVxuICovXG5leHBvcnQgY29uc3QgZG9jID0gLyoqIEB0eXBlIHtEb2N1bWVudH0gKi8gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9KVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVFbGVtZW50ID0gbmFtZSA9PiBkb2MuY3JlYXRlRWxlbWVudChuYW1lKVxuXG4vKipcbiAqIEByZXR1cm4ge0RvY3VtZW50RnJhZ21lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgY3JlYXRlRG9jdW1lbnRGcmFnbWVudCA9ICgpID0+IGRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KClcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHJldHVybiB7VGV4dH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVUZXh0Tm9kZSA9IHRleHQgPT4gZG9jLmNyZWF0ZVRleHROb2RlKHRleHQpXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZG9tUGFyc2VyID0gLyoqIEB0eXBlIHtET01QYXJzZXJ9ICovICh0eXBlb2YgRE9NUGFyc2VyICE9PSAndW5kZWZpbmVkJyA/IG5ldyBET01QYXJzZXIoKSA6IG51bGwpXG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGVtaXRDdXN0b21FdmVudCA9IChlbCwgbmFtZSwgb3B0cykgPT4gZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQobmFtZSwgb3B0cykpXG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogQHBhcmFtIHtBcnJheTxwYWlyLlBhaXI8c3RyaW5nLHN0cmluZ3xib29sZWFuPj59IGF0dHJzIEFycmF5IG9mIGtleS12YWx1ZSBwYWlyc1xuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBzZXRBdHRyaWJ1dGVzID0gKGVsLCBhdHRycykgPT4ge1xuICBwYWlyLmZvckVhY2goYXR0cnMsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSlcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCAnJylcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpXG4gICAgfVxuICB9KVxuICByZXR1cm4gZWxcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsIHN0cmluZz59IGF0dHJzIEFycmF5IG9mIGtleS12YWx1ZSBwYWlyc1xuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBzZXRBdHRyaWJ1dGVzTWFwID0gKGVsLCBhdHRycykgPT4ge1xuICBhdHRycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7IGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKSB9KVxuICByZXR1cm4gZWxcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PE5vZGU+fEhUTUxDb2xsZWN0aW9ufSBjaGlsZHJlblxuICogQHJldHVybiB7RG9jdW1lbnRGcmFnbWVudH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBmcmFnbWVudCA9IGNoaWxkcmVuID0+IHtcbiAgY29uc3QgZnJhZ21lbnQgPSBjcmVhdGVEb2N1bWVudEZyYWdtZW50KClcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGFwcGVuZENoaWxkKGZyYWdtZW50LCBjaGlsZHJlbltpXSlcbiAgfVxuICByZXR1cm4gZnJhZ21lbnRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHBhcmVudFxuICogQHBhcmFtIHtBcnJheTxOb2RlPn0gbm9kZXNcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgYXBwZW5kID0gKHBhcmVudCwgbm9kZXMpID0+IHtcbiAgYXBwZW5kQ2hpbGQocGFyZW50LCBmcmFnbWVudChub2RlcykpXG4gIHJldHVybiBwYXJlbnRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZSA9IGVsID0+IGVsLnJlbW92ZSgpXG5cbi8qKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge0V2ZW50TGlzdGVuZXJ9IGZcbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBhZGRFdmVudExpc3RlbmVyID0gKGVsLCBuYW1lLCBmKSA9PiBlbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGYpXG5cbi8qKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge0V2ZW50TGlzdGVuZXJ9IGZcbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCByZW1vdmVFdmVudExpc3RlbmVyID0gKGVsLCBuYW1lLCBmKSA9PiBlbC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGYpXG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcGFyYW0ge0FycmF5PHBhaXIuUGFpcjxzdHJpbmcsRXZlbnRMaXN0ZW5lcj4+fSBsaXN0ZW5lcnNcbiAqIEByZXR1cm4ge05vZGV9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgYWRkRXZlbnRMaXN0ZW5lcnMgPSAobm9kZSwgbGlzdGVuZXJzKSA9PiB7XG4gIHBhaXIuZm9yRWFjaChsaXN0ZW5lcnMsIChuYW1lLCBmKSA9PiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIG5hbWUsIGYpKVxuICByZXR1cm4gbm9kZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtBcnJheTxwYWlyLlBhaXI8c3RyaW5nLEV2ZW50TGlzdGVuZXI+Pn0gbGlzdGVuZXJzXG4gKiBAcmV0dXJuIHtOb2RlfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZUV2ZW50TGlzdGVuZXJzID0gKG5vZGUsIGxpc3RlbmVycykgPT4ge1xuICBwYWlyLmZvckVhY2gobGlzdGVuZXJzLCAobmFtZSwgZikgPT4gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBuYW1lLCBmKSlcbiAgcmV0dXJuIG5vZGVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtBcnJheTxwYWlyLlBhaXI8c3RyaW5nLHN0cmluZz58cGFpci5QYWlyPHN0cmluZyxib29sZWFuPj59IGF0dHJzIEFycmF5IG9mIGtleS12YWx1ZSBwYWlyc1xuICogQHBhcmFtIHtBcnJheTxOb2RlPn0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZWxlbWVudCA9IChuYW1lLCBhdHRycyA9IFtdLCBjaGlsZHJlbiA9IFtdKSA9PlxuICBhcHBlbmQoc2V0QXR0cmlidXRlcyhjcmVhdGVFbGVtZW50KG5hbWUpLCBhdHRycyksIGNoaWxkcmVuKVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGNhbnZhcyA9ICh3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gIGNvbnN0IGMgPSAvKiogQHR5cGUge0hUTUxDYW52YXNFbGVtZW50fSAqLyAoY3JlYXRlRWxlbWVudCgnY2FudmFzJykpXG4gIGMuaGVpZ2h0ID0gaGVpZ2h0XG4gIGMud2lkdGggPSB3aWR0aFxuICByZXR1cm4gY1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0XG4gKiBAcmV0dXJuIHtUZXh0fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHRleHQgPSBjcmVhdGVUZXh0Tm9kZVxuXG4vKipcbiAqIEBwYXJhbSB7cGFpci5QYWlyPHN0cmluZyxzdHJpbmc+fSBwYWlyXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgcGFpclRvU3R5bGVTdHJpbmcgPSBwYWlyID0+IGAke3BhaXIubGVmdH06JHtwYWlyLnJpZ2h0fTtgXG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxwYWlyLlBhaXI8c3RyaW5nLHN0cmluZz4+fSBwYWlyc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHBhaXJzVG9TdHlsZVN0cmluZyA9IHBhaXJzID0+IHBhaXJzLm1hcChwYWlyVG9TdHlsZVN0cmluZykuam9pbignJylcblxuLyoqXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsc3RyaW5nPn0gbVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IG1hcFRvU3R5bGVTdHJpbmcgPSBtID0+IG1hcC5tYXAobSwgKHZhbHVlLCBrZXkpID0+IGAke2tleX06JHt2YWx1ZX07YCkuam9pbignJylcblxuLyoqXG4gKiBAdG9kbyBzaG91bGQgYWx3YXlzIHF1ZXJ5IG9uIGEgZG9tIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fFNoYWRvd1Jvb3R9IGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50IHwgbnVsbH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBxdWVyeVNlbGVjdG9yID0gKGVsLCBxdWVyeSkgPT4gZWwucXVlcnlTZWxlY3RvcihxdWVyeSlcblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fFNoYWRvd1Jvb3R9IGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlcbiAqIEByZXR1cm4ge05vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHF1ZXJ5U2VsZWN0b3JBbGwgPSAoZWwsIHF1ZXJ5KSA9PiBlbC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZ2V0RWxlbWVudEJ5SWQgPSBpZCA9PiAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyAoZG9jLmdldEVsZW1lbnRCeUlkKGlkKSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5jb25zdCBfcGFyc2UgPSBodG1sID0+IGRvbVBhcnNlci5wYXJzZUZyb21TdHJpbmcoYDxodG1sPjxib2R5PiR7aHRtbH08L2JvZHk+PC9odG1sPmAsICd0ZXh0L2h0bWwnKS5ib2R5XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEByZXR1cm4ge0RvY3VtZW50RnJhZ21lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgcGFyc2VGcmFnbWVudCA9IGh0bWwgPT4gZnJhZ21lbnQoLyoqIEB0eXBlIHthbnl9ICovIChfcGFyc2UoaHRtbCkuY2hpbGROb2RlcykpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlRWxlbWVudCA9IGh0bWwgPT4gLyoqIEB0eXBlIEhUTUxFbGVtZW50ICovIChfcGFyc2UoaHRtbCkuZmlyc3RFbGVtZW50Q2hpbGQpXG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gb2xkRWxcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8RG9jdW1lbnRGcmFnbWVudH0gbmV3RWxcbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCByZXBsYWNlV2l0aCA9IChvbGRFbCwgbmV3RWwpID0+IG9sZEVsLnJlcGxhY2VXaXRoKG5ld0VsKVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqIEBwYXJhbSB7Tm9kZXxudWxsfSByZWZcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGluc2VydEJlZm9yZSA9IChwYXJlbnQsIGVsLCByZWYpID0+IHBhcmVudC5pbnNlcnRCZWZvcmUoZWwsIHJlZilcblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudFxuICogQHBhcmFtIHtOb2RlfSBjaGlsZFxuICogQHJldHVybiB7Tm9kZX1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBhcHBlbmRDaGlsZCA9IChwYXJlbnQsIGNoaWxkKSA9PiBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG5cbmV4cG9ydCBjb25zdCBFTEVNRU5UX05PREUgPSBkb2MuRUxFTUVOVF9OT0RFXG5leHBvcnQgY29uc3QgVEVYVF9OT0RFID0gZG9jLlRFWFRfTk9ERVxuZXhwb3J0IGNvbnN0IENEQVRBX1NFQ1RJT05fTk9ERSA9IGRvYy5DREFUQV9TRUNUSU9OX05PREVcbmV4cG9ydCBjb25zdCBDT01NRU5UX05PREUgPSBkb2MuQ09NTUVOVF9OT0RFXG5leHBvcnQgY29uc3QgRE9DVU1FTlRfTk9ERSA9IGRvYy5ET0NVTUVOVF9OT0RFXG5leHBvcnQgY29uc3QgRE9DVU1FTlRfVFlQRV9OT0RFID0gZG9jLkRPQ1VNRU5UX1RZUEVfTk9ERVxuZXhwb3J0IGNvbnN0IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgPSBkb2MuRE9DVU1FTlRfRlJBR01FTlRfTk9ERVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBub2RlXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICovXG5leHBvcnQgY29uc3QgY2hlY2tOb2RlVHlwZSA9IChub2RlLCB0eXBlKSA9PiBub2RlLm5vZGVUeXBlID09PSB0eXBlXG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBwYXJlbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNoaWxkXG4gKi9cbmV4cG9ydCBjb25zdCBpc1BhcmVudE9mID0gKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgbGV0IHAgPSBjaGlsZC5wYXJlbnROb2RlXG4gIHdoaWxlIChwICYmIHAgIT09IHBhcmVudCkge1xuICAgIHAgPSBwLnBhcmVudE5vZGVcbiAgfVxuICByZXR1cm4gcCA9PT0gcGFyZW50XG59XG4iLCIvKipcbiAqIElzb21vcnBoaWMgbG9nZ2luZyBtb2R1bGUgd2l0aCBzdXBwb3J0IGZvciBjb2xvcnMhXG4gKlxuICogQG1vZHVsZSBsb2dnaW5nXG4gKi9cblxuaW1wb3J0ICogYXMgZW52IGZyb20gJy4vZW52aXJvbm1lbnQuanMnXG5pbXBvcnQgKiBhcyBzeW1ib2wgZnJvbSAnLi9zeW1ib2wuanMnXG5pbXBvcnQgKiBhcyBwYWlyIGZyb20gJy4vcGFpci5qcydcbmltcG9ydCAqIGFzIGRvbSBmcm9tICcuL2RvbS5qcydcbmltcG9ydCAqIGFzIGpzb24gZnJvbSAnLi9qc29uLmpzJ1xuaW1wb3J0ICogYXMgbWFwIGZyb20gJy4vbWFwLmpzJ1xuaW1wb3J0ICogYXMgZXZlbnRsb29wIGZyb20gJy4vZXZlbnRsb29wLmpzJ1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuL21hdGguanMnXG5pbXBvcnQgKiBhcyB0aW1lIGZyb20gJy4vdGltZS5qcydcbmltcG9ydCAqIGFzIGZ1bmMgZnJvbSAnLi9mdW5jdGlvbi5qcydcblxuZXhwb3J0IGNvbnN0IEJPTEQgPSBzeW1ib2wuY3JlYXRlKClcbmV4cG9ydCBjb25zdCBVTkJPTEQgPSBzeW1ib2wuY3JlYXRlKClcbmV4cG9ydCBjb25zdCBCTFVFID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgR1JFWSA9IHN5bWJvbC5jcmVhdGUoKVxuZXhwb3J0IGNvbnN0IEdSRUVOID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgUkVEID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgUFVSUExFID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgT1JBTkdFID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgVU5DT0xPUiA9IHN5bWJvbC5jcmVhdGUoKVxuXG4vKipcbiAqIEB0eXBlIHtPYmplY3Q8U3ltYm9sLHBhaXIuUGFpcjxzdHJpbmcsc3RyaW5nPj59XG4gKi9cbmNvbnN0IF9icm93c2VyU3R5bGVNYXAgPSB7XG4gIFtCT0xEXTogcGFpci5jcmVhdGUoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKSxcbiAgW1VOQk9MRF06IHBhaXIuY3JlYXRlKCdmb250LXdlaWdodCcsICdub3JtYWwnKSxcbiAgW0JMVUVdOiBwYWlyLmNyZWF0ZSgnY29sb3InLCAnYmx1ZScpLFxuICBbR1JFRU5dOiBwYWlyLmNyZWF0ZSgnY29sb3InLCAnZ3JlZW4nKSxcbiAgW0dSRVldOiBwYWlyLmNyZWF0ZSgnY29sb3InLCAnZ3JleScpLFxuICBbUkVEXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ3JlZCcpLFxuICBbUFVSUExFXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ3B1cnBsZScpLFxuICBbT1JBTkdFXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ29yYW5nZScpLCAvLyBub3Qgd2VsbCBzdXBwb3J0ZWQgaW4gY2hyb21lIHdoZW4gZGVidWdnaW5nIG5vZGUgd2l0aCBpbnNwZWN0b3IgLSBUT0RPOiBkZXByZWNhdGVcbiAgW1VOQ09MT1JdOiBwYWlyLmNyZWF0ZSgnY29sb3InLCAnYmxhY2snKVxufVxuXG5jb25zdCBfbm9kZVN0eWxlTWFwID0ge1xuICBbQk9MRF06ICdcXHUwMDFiWzFtJyxcbiAgW1VOQk9MRF06ICdcXHUwMDFiWzJtJyxcbiAgW0JMVUVdOiAnXFx4MWJbMzRtJyxcbiAgW0dSRUVOXTogJ1xceDFiWzMybScsXG4gIFtHUkVZXTogJ1xcdTAwMWJbMzdtJyxcbiAgW1JFRF06ICdcXHgxYlszMW0nLFxuICBbUFVSUExFXTogJ1xceDFiWzM1bScsXG4gIFtPUkFOR0VdOiAnXFx4MWJbMzg7NTsyMDhtJyxcbiAgW1VOQ09MT1JdOiAnXFx4MWJbMG0nXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICogQHJldHVybiB7QXJyYXk8c3RyaW5nfG9iamVjdHxudW1iZXI+fVxuICovXG5jb25zdCBjb21wdXRlQnJvd3NlckxvZ2dpbmdBcmdzID0gYXJncyA9PiB7XG4gIGNvbnN0IHN0ckJ1aWxkZXIgPSBbXVxuICBjb25zdCBzdHlsZXMgPSBbXVxuICBjb25zdCBjdXJyZW50U3R5bGUgPSBtYXAuY3JlYXRlKClcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxzdHJpbmd8T2JqZWN0fG51bWJlcj59XG4gICAqL1xuICBsZXQgbG9nQXJncyA9IFtdXG4gIC8vIHRyeSB3aXRoIGZvcm1hdHRpbmcgdW50aWwgd2UgZmluZCBzb21ldGhpbmcgdW5zdXBwb3J0ZWRcbiAgbGV0IGkgPSAwXG5cbiAgZm9yICg7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYXJnID0gYXJnc1tpXVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBzdHlsZSA9IF9icm93c2VyU3R5bGVNYXBbYXJnXVxuICAgIGlmIChzdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdXJyZW50U3R5bGUuc2V0KHN0eWxlLmxlZnQsIHN0eWxlLnJpZ2h0KVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXJnLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgfHwgYXJnLmNvbnN0cnVjdG9yID09PSBOdW1iZXIpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBkb20ubWFwVG9TdHlsZVN0cmluZyhjdXJyZW50U3R5bGUpXG4gICAgICAgIGlmIChpID4gMCB8fCBzdHlsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc3RyQnVpbGRlci5wdXNoKCclYycgKyBhcmcpXG4gICAgICAgICAgc3R5bGVzLnB1c2goc3R5bGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyQnVpbGRlci5wdXNoKGFyZylcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoaSA+IDApIHtcbiAgICAvLyBjcmVhdGUgbG9nQXJncyB3aXRoIHdoYXQgd2UgaGF2ZSBzbyBmYXJcbiAgICBsb2dBcmdzID0gc3R5bGVzXG4gICAgbG9nQXJncy51bnNoaWZ0KHN0ckJ1aWxkZXIuam9pbignJykpXG4gIH1cbiAgLy8gYXBwZW5kIHRoZSByZXN0XG4gIGZvciAoOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFyZyA9IGFyZ3NbaV1cbiAgICBpZiAoIShhcmcgaW5zdGFuY2VvZiBTeW1ib2wpKSB7XG4gICAgICBsb2dBcmdzLnB1c2goYXJnKVxuICAgIH1cbiAgfVxuICByZXR1cm4gbG9nQXJnc1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICogQHJldHVybiB7QXJyYXk8c3RyaW5nfG9iamVjdHxudW1iZXI+fVxuICovXG5jb25zdCBjb21wdXRlTm9kZUxvZ2dpbmdBcmdzID0gYXJncyA9PiB7XG4gIGNvbnN0IHN0ckJ1aWxkZXIgPSBbXVxuICBjb25zdCBsb2dBcmdzID0gW11cblxuICAvLyB0cnkgd2l0aCBmb3JtYXR0aW5nIHVudGlsIHdlIGZpbmQgc29tZXRoaW5nIHVuc3VwcG9ydGVkXG4gIGxldCBpID0gMFxuXG4gIGZvciAoOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFyZyA9IGFyZ3NbaV1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qgc3R5bGUgPSBfbm9kZVN0eWxlTWFwW2FyZ11cbiAgICBpZiAoc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3RyQnVpbGRlci5wdXNoKHN0eWxlKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXJnLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgfHwgYXJnLmNvbnN0cnVjdG9yID09PSBOdW1iZXIpIHtcbiAgICAgICAgc3RyQnVpbGRlci5wdXNoKGFyZylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpID4gMCkge1xuICAgIC8vIGNyZWF0ZSBsb2dBcmdzIHdpdGggd2hhdCB3ZSBoYXZlIHNvIGZhclxuICAgIHN0ckJ1aWxkZXIucHVzaCgnXFx4MWJbMG0nKVxuICAgIGxvZ0FyZ3MucHVzaChzdHJCdWlsZGVyLmpvaW4oJycpKVxuICB9XG4gIC8vIGFwcGVuZCB0aGUgcmVzdFxuICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhcmcgPSBhcmdzW2ldXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoIShhcmcgaW5zdGFuY2VvZiBTeW1ib2wpKSB7XG4gICAgICBsb2dBcmdzLnB1c2goYXJnKVxuICAgIH1cbiAgfVxuICByZXR1cm4gbG9nQXJnc1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3QgY29tcHV0ZUxvZ2dpbmdBcmdzID0gZW52LmlzTm9kZSA/IGNvbXB1dGVOb2RlTG9nZ2luZ0FyZ3MgOiBjb21wdXRlQnJvd3NlckxvZ2dpbmdBcmdzXG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gKi9cbmV4cG9ydCBjb25zdCBwcmludCA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnNvbGUubG9nKC4uLmNvbXB1dGVMb2dnaW5nQXJncyhhcmdzKSlcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdmNvbnNvbGVzLmZvckVhY2godmMgPT4gdmMucHJpbnQoYXJncykpXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICovXG5leHBvcnQgY29uc3Qgd2FybiA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnNvbGUud2FybiguLi5jb21wdXRlTG9nZ2luZ0FyZ3MoYXJncykpXG4gIGFyZ3MudW5zaGlmdChPUkFOR0UpXG4gIHZjb25zb2xlcy5mb3JFYWNoKHZjID0+IHZjLnByaW50KGFyZ3MpKVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqL1xuZXhwb3J0IGNvbnN0IHByaW50RXJyb3IgPSBlcnIgPT4ge1xuICBjb25zb2xlLmVycm9yKGVycilcbiAgdmNvbnNvbGVzLmZvckVhY2godmMgPT4gdmMucHJpbnRFcnJvcihlcnIpKVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIGltYWdlIGxvY2F0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IGhlaWdodCBvZiB0aGUgaW1hZ2UgaW4gcGl4ZWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByaW50SW1nID0gKHVybCwgaGVpZ2h0KSA9PiB7XG4gIGlmIChlbnYuaXNCcm93c2VyKSB7XG4gICAgY29uc29sZS5sb2coJyVjICAgICAgICAgICAgICAgICAgICAgICcsIGBmb250LXNpemU6ICR7aGVpZ2h0fXB4OyBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47IGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7IGJhY2tncm91bmQtaW1hZ2U6IHVybCgke3VybH0pYClcbiAgICAvLyBjb25zb2xlLmxvZygnJWMgICAgICAgICAgICAgICAgJywgYGZvbnQtc2l6ZTogJHtoZWlnaHR9eDsgYmFja2dyb3VuZDogdXJsKCR7dXJsfSkgbm8tcmVwZWF0O2ApXG4gIH1cbiAgdmNvbnNvbGVzLmZvckVhY2godmMgPT4gdmMucHJpbnRJbWcodXJsLCBoZWlnaHQpKVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0XG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gKi9cbmV4cG9ydCBjb25zdCBwcmludEltZ0Jhc2U2NCA9IChiYXNlNjQsIGhlaWdodCkgPT4gcHJpbnRJbWcoYGRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCwke2Jhc2U2NH1gLCBoZWlnaHQpXG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gKi9cbmV4cG9ydCBjb25zdCBncm91cCA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnNvbGUuZ3JvdXAoLi4uY29tcHV0ZUxvZ2dpbmdBcmdzKGFyZ3MpKVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB2Y29uc29sZXMuZm9yRWFjaCh2YyA9PiB2Yy5ncm91cChhcmdzKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAqL1xuZXhwb3J0IGNvbnN0IGdyb3VwQ29sbGFwc2VkID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc29sZS5ncm91cENvbGxhcHNlZCguLi5jb21wdXRlTG9nZ2luZ0FyZ3MoYXJncykpXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHZjb25zb2xlcy5mb3JFYWNoKHZjID0+IHZjLmdyb3VwQ29sbGFwc2VkKGFyZ3MpKVxufVxuXG5leHBvcnQgY29uc3QgZ3JvdXBFbmQgPSAoKSA9PiB7XG4gIGNvbnNvbGUuZ3JvdXBFbmQoKVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB2Y29uc29sZXMuZm9yRWFjaCh2YyA9PiB2Yy5ncm91cEVuZCgpKVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6Tm9kZX0gY3JlYXRlTm9kZVxuICovXG5leHBvcnQgY29uc3QgcHJpbnREb20gPSBjcmVhdGVOb2RlID0+XG4gIHZjb25zb2xlcy5mb3JFYWNoKHZjID0+IHZjLnByaW50RG9tKGNyZWF0ZU5vZGUoKSkpXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhc1xuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICovXG5leHBvcnQgY29uc3QgcHJpbnRDYW52YXMgPSAoY2FudmFzLCBoZWlnaHQpID0+IHByaW50SW1nKGNhbnZhcy50b0RhdGFVUkwoKSwgaGVpZ2h0KVxuXG5leHBvcnQgY29uc3QgdmNvbnNvbGVzID0gbmV3IFNldCgpXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICogQHJldHVybiB7QXJyYXk8RWxlbWVudD59XG4gKi9cbmNvbnN0IF9jb21wdXRlTGluZVNwYW5zID0gYXJncyA9PiB7XG4gIGNvbnN0IHNwYW5zID0gW11cbiAgY29uc3QgY3VycmVudFN0eWxlID0gbmV3IE1hcCgpXG4gIC8vIHRyeSB3aXRoIGZvcm1hdHRpbmcgdW50aWwgd2UgZmluZCBzb21ldGhpbmcgdW5zdXBwb3J0ZWRcbiAgbGV0IGkgPSAwXG4gIGZvciAoOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFyZyA9IGFyZ3NbaV1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qgc3R5bGUgPSBfYnJvd3NlclN0eWxlTWFwW2FyZ11cbiAgICBpZiAoc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY3VycmVudFN0eWxlLnNldChzdHlsZS5sZWZ0LCBzdHlsZS5yaWdodClcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGFyZy5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nIHx8IGFyZy5jb25zdHJ1Y3RvciA9PT0gTnVtYmVyKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3Qgc3BhbiA9IGRvbS5lbGVtZW50KCdzcGFuJywgW3BhaXIuY3JlYXRlKCdzdHlsZScsIGRvbS5tYXBUb1N0eWxlU3RyaW5nKGN1cnJlbnRTdHlsZSkpXSwgW2RvbS50ZXh0KGFyZyldKVxuICAgICAgICBpZiAoc3Bhbi5pbm5lckhUTUwgPT09ICcnKSB7XG4gICAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSAnJm5ic3A7J1xuICAgICAgICB9XG4gICAgICAgIHNwYW5zLnB1c2goc3BhbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGFwcGVuZCB0aGUgcmVzdFxuICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY29udGVudCA9IGFyZ3NbaV1cbiAgICBpZiAoIShjb250ZW50IGluc3RhbmNlb2YgU3ltYm9sKSkge1xuICAgICAgaWYgKGNvbnRlbnQuY29uc3RydWN0b3IgIT09IFN0cmluZyAmJiBjb250ZW50LmNvbnN0cnVjdG9yICE9PSBOdW1iZXIpIHtcbiAgICAgICAgY29udGVudCA9ICcgJyArIGpzb24uc3RyaW5naWZ5KGNvbnRlbnQpICsgJyAnXG4gICAgICB9XG4gICAgICBzcGFucy5wdXNoKGRvbS5lbGVtZW50KCdzcGFuJywgW10sIFtkb20udGV4dCgvKiogQHR5cGUge3N0cmluZ30gKi8gKGNvbnRlbnQpKV0pKVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3BhbnNcbn1cblxuY29uc3QgbGluZVN0eWxlID0gJ2ZvbnQtZmFtaWx5Om1vbm9zcGFjZTtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZTJlMmUyO3BhZGRpbmc6MnB4OydcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjbGFzcyBWQ29uc29sZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGRvbVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRvbSkge1xuICAgIHRoaXMuZG9tID0gZG9tXG4gICAgLyoqXG4gICAgICogQHR5cGUge0VsZW1lbnR9XG4gICAgICovXG4gICAgdGhpcy5jY29udGFpbmVyID0gdGhpcy5kb21cbiAgICB0aGlzLmRlcHRoID0gMFxuICAgIHZjb25zb2xlcy5hZGQodGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAgICogQHBhcmFtIHtib29sZWFufSBjb2xsYXBzZWRcbiAgICovXG4gIGdyb3VwIChhcmdzLCBjb2xsYXBzZWQgPSBmYWxzZSkge1xuICAgIGV2ZW50bG9vcC5lbnF1ZXVlKCgpID0+IHtcbiAgICAgIGNvbnN0IHRyaWFuZ2xlRG93biA9IGRvbS5lbGVtZW50KCdzcGFuJywgW3BhaXIuY3JlYXRlKCdoaWRkZW4nLCBjb2xsYXBzZWQpLCBwYWlyLmNyZWF0ZSgnc3R5bGUnLCAnY29sb3I6Z3JleTtmb250LXNpemU6MTIwJTsnKV0sIFtkb20udGV4dCgn4pa8JyldKVxuICAgICAgY29uc3QgdHJpYW5nbGVSaWdodCA9IGRvbS5lbGVtZW50KCdzcGFuJywgW3BhaXIuY3JlYXRlKCdoaWRkZW4nLCAhY29sbGFwc2VkKSwgcGFpci5jcmVhdGUoJ3N0eWxlJywgJ2NvbG9yOmdyZXk7Zm9udC1zaXplOjEyNSU7JyldLCBbZG9tLnRleHQoJ+KWticpXSlcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBkb20uZWxlbWVudCgnZGl2JywgW3BhaXIuY3JlYXRlKCdzdHlsZScsIGAke2xpbmVTdHlsZX07cGFkZGluZy1sZWZ0OiR7dGhpcy5kZXB0aCAqIDEwfXB4YCldLCBbdHJpYW5nbGVEb3duLCB0cmlhbmdsZVJpZ2h0LCBkb20udGV4dCgnICcpXS5jb25jYXQoX2NvbXB1dGVMaW5lU3BhbnMoYXJncykpKVxuICAgICAgY29uc3QgbmV4dENvbnRhaW5lciA9IGRvbS5lbGVtZW50KCdkaXYnLCBbcGFpci5jcmVhdGUoJ2hpZGRlbicsIGNvbGxhcHNlZCldKVxuICAgICAgY29uc3QgbmV4dExpbmUgPSBkb20uZWxlbWVudCgnZGl2JywgW10sIFtjb250ZW50LCBuZXh0Q29udGFpbmVyXSlcbiAgICAgIGRvbS5hcHBlbmQodGhpcy5jY29udGFpbmVyLCBbbmV4dExpbmVdKVxuICAgICAgdGhpcy5jY29udGFpbmVyID0gbmV4dENvbnRhaW5lclxuICAgICAgdGhpcy5kZXB0aCsrXG4gICAgICAvLyB3aGVuIGhlYWRlciBpcyBjbGlja2VkLCBjb2xsYXBzZS91bmNvbGxhcHNlIGNvbnRhaW5lclxuICAgICAgZG9tLmFkZEV2ZW50TGlzdGVuZXIoY29udGVudCwgJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICBuZXh0Q29udGFpbmVyLnRvZ2dsZUF0dHJpYnV0ZSgnaGlkZGVuJylcbiAgICAgICAgdHJpYW5nbGVEb3duLnRvZ2dsZUF0dHJpYnV0ZSgnaGlkZGVuJylcbiAgICAgICAgdHJpYW5nbGVSaWdodC50b2dnbGVBdHRyaWJ1dGUoJ2hpZGRlbicpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gICAqL1xuICBncm91cENvbGxhcHNlZCAoYXJncykge1xuICAgIHRoaXMuZ3JvdXAoYXJncywgdHJ1ZSlcbiAgfVxuXG4gIGdyb3VwRW5kICgpIHtcbiAgICBldmVudGxvb3AuZW5xdWV1ZSgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5kZXB0aCA+IDApIHtcbiAgICAgICAgdGhpcy5kZXB0aC0tXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5jY29udGFpbmVyID0gdGhpcy5jY29udGFpbmVyLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudFxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gICAqL1xuICBwcmludCAoYXJncykge1xuICAgIGV2ZW50bG9vcC5lbnF1ZXVlKCgpID0+IHtcbiAgICAgIGRvbS5hcHBlbmQodGhpcy5jY29udGFpbmVyLCBbZG9tLmVsZW1lbnQoJ2RpdicsIFtwYWlyLmNyZWF0ZSgnc3R5bGUnLCBgJHtsaW5lU3R5bGV9O3BhZGRpbmctbGVmdDoke3RoaXMuZGVwdGggKiAxMH1weGApXSwgX2NvbXB1dGVMaW5lU3BhbnMoYXJncykpXSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXJyb3J9IGVyclxuICAgKi9cbiAgcHJpbnRFcnJvciAoZXJyKSB7XG4gICAgdGhpcy5wcmludChbUkVELCBCT0xELCBlcnIudG9TdHJpbmcoKV0pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqL1xuICBwcmludEltZyAodXJsLCBoZWlnaHQpIHtcbiAgICBldmVudGxvb3AuZW5xdWV1ZSgoKSA9PiB7XG4gICAgICBkb20uYXBwZW5kKHRoaXMuY2NvbnRhaW5lciwgW2RvbS5lbGVtZW50KCdpbWcnLCBbcGFpci5jcmVhdGUoJ3NyYycsIHVybCksIHBhaXIuY3JlYXRlKCdoZWlnaHQnLCBgJHttYXRoLnJvdW5kKGhlaWdodCAqIDEuNSl9cHhgKV0pXSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKi9cbiAgcHJpbnREb20gKG5vZGUpIHtcbiAgICBldmVudGxvb3AuZW5xdWV1ZSgoKSA9PiB7XG4gICAgICBkb20uYXBwZW5kKHRoaXMuY2NvbnRhaW5lciwgW25vZGVdKVxuICAgIH0pXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICBldmVudGxvb3AuZW5xdWV1ZSgoKSA9PiB7XG4gICAgICB2Y29uc29sZXMuZGVsZXRlKHRoaXMpXG4gICAgfSlcbiAgfVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGRvbVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVkNvbnNvbGUgPSBkb20gPT4gbmV3IFZDb25zb2xlKGRvbSlcblxuY29uc3QgbG9nZ2luZ0NvbG9ycyA9IFtHUkVFTiwgUFVSUExFLCBPUkFOR0UsIEJMVUVdXG5sZXQgbmV4dENvbG9yID0gMFxubGV0IGxhc3RMb2dnaW5nVGltZSA9IHRpbWUuZ2V0VW5peFRpbWUoKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lXG4gKiBAcmV0dXJuIHtmdW5jdGlvbiguLi5hbnkpOnZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVNb2R1bGVMb2dnZXIgPSBtb2R1bGVOYW1lID0+IHtcbiAgY29uc3QgY29sb3IgPSBsb2dnaW5nQ29sb3JzW25leHRDb2xvcl1cbiAgY29uc3QgZGVidWdSZWdleFZhciA9IGVudi5nZXRWYXJpYWJsZSgnbG9nJylcbiAgY29uc3QgZG9Mb2dnaW5nID0gZGVidWdSZWdleFZhciAhPT0gbnVsbCAmJiAoZGVidWdSZWdleFZhciA9PT0gJyonIHx8IGRlYnVnUmVnZXhWYXIgPT09ICd0cnVlJyB8fCBuZXcgUmVnRXhwKGRlYnVnUmVnZXhWYXIsICdnaScpLnRlc3QobW9kdWxlTmFtZSkpXG4gIG5leHRDb2xvciA9IChuZXh0Q29sb3IgKyAxKSAlIGxvZ2dpbmdDb2xvcnMubGVuZ3RoXG4gIG1vZHVsZU5hbWUgKz0gJzogJ1xuXG4gIHJldHVybiAhZG9Mb2dnaW5nID8gZnVuYy5ub3AgOiAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IHRpbWVOb3cgPSB0aW1lLmdldFVuaXhUaW1lKClcbiAgICBjb25zdCB0aW1lRGlmZiA9IHRpbWVOb3cgLSBsYXN0TG9nZ2luZ1RpbWVcbiAgICBsYXN0TG9nZ2luZ1RpbWUgPSB0aW1lTm93XG4gICAgcHJpbnQoY29sb3IsIG1vZHVsZU5hbWUsIFVOQ09MT1IsIC4uLmFyZ3MubWFwKGFyZyA9PiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcpID8gYXJnIDogSlNPTi5zdHJpbmdpZnkoYXJnKSksIGNvbG9yLCAnICsnICsgdGltZURpZmYgKyAnbXMnKVxuICB9XG59XG4iLCIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIGNyZWF0ZSBhbmQgbWFuaXB1bGF0ZSBJdGVyYXRvcnMuXG4gKlxuICogQG1vZHVsZSBpdGVyYXRvclxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIFQsUlxuICogQHBhcmFtIHtJdGVyYXRvcjxUPn0gaXRlcmF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCk6Un0gZlxuICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxSPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hcEl0ZXJhdG9yID0gKGl0ZXJhdG9yLCBmKSA9PiAoe1xuICBbU3ltYm9sLml0ZXJhdG9yXSAoKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcbiAgLy8gQHRzLWlnbm9yZVxuICBuZXh0ICgpIHtcbiAgICBjb25zdCByID0gaXRlcmF0b3IubmV4dCgpXG4gICAgcmV0dXJuIHsgdmFsdWU6IHIuZG9uZSA/IHVuZGVmaW5lZCA6IGYoci52YWx1ZSksIGRvbmU6IHIuZG9uZSB9XG4gIH1cbn0pXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpJdGVyYXRvclJlc3VsdDxUPn0gbmV4dFxuICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUl0ZXJhdG9yID0gbmV4dCA9PiAoe1xuICAvKipcbiAgICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxUPn1cbiAgICovXG4gIFtTeW1ib2wuaXRlcmF0b3JdICgpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9LFxuICAvLyBAdHMtaWdub3JlXG4gIG5leHRcbn0pXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7SXRlcmF0b3I8VD59IGl0ZXJhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFQpOmJvb2xlYW59IGZpbHRlclxuICovXG5leHBvcnQgY29uc3QgaXRlcmF0b3JGaWx0ZXIgPSAoaXRlcmF0b3IsIGZpbHRlcikgPT4gY3JlYXRlSXRlcmF0b3IoKCkgPT4ge1xuICBsZXQgcmVzXG4gIGRvIHtcbiAgICByZXMgPSBpdGVyYXRvci5uZXh0KClcbiAgfSB3aGlsZSAoIXJlcy5kb25lICYmICFmaWx0ZXIocmVzLnZhbHVlKSlcbiAgcmV0dXJuIHJlc1xufSlcblxuLyoqXG4gKiBAdGVtcGxhdGUgVCxNXG4gKiBAcGFyYW0ge0l0ZXJhdG9yPFQ+fSBpdGVyYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbihUKTpNfSBmbWFwXG4gKi9cbmV4cG9ydCBjb25zdCBpdGVyYXRvck1hcCA9IChpdGVyYXRvciwgZm1hcCkgPT4gY3JlYXRlSXRlcmF0b3IoKCkgPT4ge1xuICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBpdGVyYXRvci5uZXh0KClcbiAgcmV0dXJuIHsgZG9uZSwgdmFsdWU6IGRvbmUgPyB1bmRlZmluZWQgOiBmbWFwKHZhbHVlKSB9XG59KVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ2xpYjAvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgKiBhcyBhcnJheSBmcm9tICdsaWIwL2FycmF5JztcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnbGliMC9tYXRoJztcbmltcG9ydCAqIGFzIG1hcCBmcm9tICdsaWIwL21hcCc7XG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICdsaWIwL2VuY29kaW5nJztcbmltcG9ydCAqIGFzIGRlY29kaW5nIGZyb20gJ2xpYjAvZGVjb2RpbmcnO1xuaW1wb3J0ICogYXMgcmFuZG9tIGZyb20gJ2xpYjAvcmFuZG9tJztcbmltcG9ydCAqIGFzIHByb21pc2UgZnJvbSAnbGliMC9wcm9taXNlJztcbmltcG9ydCAqIGFzIGJ1ZmZlciBmcm9tICdsaWIwL2J1ZmZlcic7XG5pbXBvcnQgKiBhcyBlcnJvciBmcm9tICdsaWIwL2Vycm9yJztcbmltcG9ydCAqIGFzIGJpbmFyeSBmcm9tICdsaWIwL2JpbmFyeSc7XG5pbXBvcnQgKiBhcyBmIGZyb20gJ2xpYjAvZnVuY3Rpb24nO1xuaW1wb3J0IHsgY2FsbEFsbCB9IGZyb20gJ2xpYjAvZnVuY3Rpb24nO1xuaW1wb3J0ICogYXMgc2V0IGZyb20gJ2xpYjAvc2V0JztcbmltcG9ydCAqIGFzIGxvZ2dpbmcgZnJvbSAnbGliMC9sb2dnaW5nJztcbmltcG9ydCAqIGFzIHRpbWUgZnJvbSAnbGliMC90aW1lJztcbmltcG9ydCAqIGFzIGl0ZXJhdG9yIGZyb20gJ2xpYjAvaXRlcmF0b3InO1xuaW1wb3J0ICogYXMgb2JqZWN0IGZyb20gJ2xpYjAvb2JqZWN0JztcblxuLyoqXG4gKiBUaGlzIGlzIGFuIGFic3RyYWN0IGludGVyZmFjZSB0aGF0IGFsbCBDb25uZWN0b3JzIHNob3VsZCBpbXBsZW1lbnQgdG8ga2VlcCB0aGVtIGludGVyY2hhbmdlYWJsZS5cbiAqXG4gKiBAbm90ZSBUaGlzIGludGVyZmFjZSBpcyBleHBlcmltZW50YWwgYW5kIGl0IGlzIG5vdCBhZHZpc2VkIHRvIGFjdHVhbGx5IGluaGVyaXQgdGhpcyBjbGFzcy5cbiAqICAgICAgIEl0IGp1c3Qgc2VydmVzIGFzIHR5cGluZyBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAZXh0ZW5kcyB7T2JzZXJ2YWJsZTxhbnk+fVxuICovXG5jbGFzcyBBYnN0cmFjdENvbm5lY3RvciBleHRlbmRzIE9ic2VydmFibGUge1xuICAvKipcbiAgICogQHBhcmFtIHtEb2N9IHlkb2NcbiAgICogQHBhcmFtIHthbnl9IGF3YXJlbmVzc1xuICAgKi9cbiAgY29uc3RydWN0b3IgKHlkb2MsIGF3YXJlbmVzcykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kb2MgPSB5ZG9jO1xuICAgIHRoaXMuYXdhcmVuZXNzID0gYXdhcmVuZXNzO1xuICB9XG59XG5cbmNsYXNzIERlbGV0ZUl0ZW0ge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAgICovXG4gIGNvbnN0cnVjdG9yIChjbG9jaywgbGVuKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmNsb2NrID0gY2xvY2s7XG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxlbiA9IGxlbjtcbiAgfVxufVxuXG4vKipcbiAqIFdlIG5vIGxvbmdlciBtYWludGFpbiBhIERlbGV0ZVN0b3JlLiBEZWxldGVTZXQgaXMgYSB0ZW1wb3Jhcnkgb2JqZWN0IHRoYXQgaXMgY3JlYXRlZCB3aGVuIG5lZWRlZC5cbiAqIC0gV2hlbiBjcmVhdGVkIGluIGEgdHJhbnNhY3Rpb24sIGl0IG11c3Qgb25seSBiZSBhY2Nlc3NlZCBhZnRlciBzb3J0aW5nLCBhbmQgbWVyZ2luZ1xuICogICAtIFRoaXMgRGVsZXRlU2V0IGlzIHNlbmQgdG8gb3RoZXIgY2xpZW50c1xuICogLSBXZSBkbyBub3QgY3JlYXRlIGEgRGVsZXRlU2V0IHdoZW4gd2Ugc2VuZCBhIHN5bmMgbWVzc2FnZS4gVGhlIERlbGV0ZVNldCBtZXNzYWdlIGlzIGNyZWF0ZWQgZGlyZWN0bHkgZnJvbSBTdHJ1Y3RTdG9yZVxuICogLSBXZSByZWFkIGEgRGVsZXRlU2V0IGFzIHBhcnQgb2YgYSBzeW5jL3VwZGF0ZSBtZXNzYWdlLiBJbiB0aGlzIGNhc2UgdGhlIERlbGV0ZVNldCBpcyBhbHJlYWR5IHNvcnRlZCBhbmQgbWVyZ2VkLlxuICovXG5jbGFzcyBEZWxldGVTZXQge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxudW1iZXIsQXJyYXk8RGVsZXRlSXRlbT4+fVxuICAgICAqL1xuICAgIHRoaXMuY2xpZW50cyA9IG5ldyBNYXAoKTtcbiAgfVxufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgc3RydWN0cyB0aGF0IHRoZSBEZWxldGVTZXQgZ2Mncy5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEdDfEl0ZW0pOnZvaWR9IGZcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzID0gKHRyYW5zYWN0aW9uLCBkcywgZikgPT5cbiAgZHMuY2xpZW50cy5mb3JFYWNoKChkZWxldGVzLCBjbGllbnRpZCkgPT4ge1xuICAgIGNvbnN0IHN0cnVjdHMgPSAvKiogQHR5cGUge0FycmF5PEdDfEl0ZW0+fSAqLyAodHJhbnNhY3Rpb24uZG9jLnN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudGlkKSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWxldGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkZWwgPSBkZWxldGVzW2ldO1xuICAgICAgaXRlcmF0ZVN0cnVjdHModHJhbnNhY3Rpb24sIHN0cnVjdHMsIGRlbC5jbG9jaywgZGVsLmxlbiwgZik7XG4gICAgfVxuICB9KTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PERlbGV0ZUl0ZW0+fSBkaXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1xuICogQHJldHVybiB7bnVtYmVyfG51bGx9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBmaW5kSW5kZXhEUyA9IChkaXMsIGNsb2NrKSA9PiB7XG4gIGxldCBsZWZ0ID0gMDtcbiAgbGV0IHJpZ2h0ID0gZGlzLmxlbmd0aCAtIDE7XG4gIHdoaWxlIChsZWZ0IDw9IHJpZ2h0KSB7XG4gICAgY29uc3QgbWlkaW5kZXggPSBtYXRoLmZsb29yKChsZWZ0ICsgcmlnaHQpIC8gMik7XG4gICAgY29uc3QgbWlkID0gZGlzW21pZGluZGV4XTtcbiAgICBjb25zdCBtaWRjbG9jayA9IG1pZC5jbG9jaztcbiAgICBpZiAobWlkY2xvY2sgPD0gY2xvY2spIHtcbiAgICAgIGlmIChjbG9jayA8IG1pZGNsb2NrICsgbWlkLmxlbikge1xuICAgICAgICByZXR1cm4gbWlkaW5kZXhcbiAgICAgIH1cbiAgICAgIGxlZnQgPSBtaWRpbmRleCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJpZ2h0ID0gbWlkaW5kZXggLSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqIEBwYXJhbSB7SUR9IGlkXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgaXNEZWxldGVkID0gKGRzLCBpZCkgPT4ge1xuICBjb25zdCBkaXMgPSBkcy5jbGllbnRzLmdldChpZC5jbGllbnQpO1xuICByZXR1cm4gZGlzICE9PSB1bmRlZmluZWQgJiYgZmluZEluZGV4RFMoZGlzLCBpZC5jbG9jaykgIT09IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBzb3J0QW5kTWVyZ2VEZWxldGVTZXQgPSBkcyA9PiB7XG4gIGRzLmNsaWVudHMuZm9yRWFjaChkZWxzID0+IHtcbiAgICBkZWxzLnNvcnQoKGEsIGIpID0+IGEuY2xvY2sgLSBiLmNsb2NrKTtcbiAgICAvLyBtZXJnZSBpdGVtcyB3aXRob3V0IGZpbHRlcmluZyBvciBzcGxpY2luZyB0aGUgYXJyYXlcbiAgICAvLyBpIGlzIHRoZSBjdXJyZW50IHBvaW50ZXJcbiAgICAvLyBqIHJlZmVycyB0byB0aGUgY3VycmVudCBpbnNlcnQgcG9zaXRpb24gZm9yIHRoZSBwb2ludGVkIGl0ZW1cbiAgICAvLyB0cnkgdG8gbWVyZ2UgZGVsc1tpXSBpbnRvIGRlbHNbai0xXSBvciBzZXQgZGVsc1tqXT1kZWxzW2ldXG4gICAgbGV0IGksIGo7XG4gICAgZm9yIChpID0gMSwgaiA9IDE7IGkgPCBkZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsZWZ0ID0gZGVsc1tqIC0gMV07XG4gICAgICBjb25zdCByaWdodCA9IGRlbHNbaV07XG4gICAgICBpZiAobGVmdC5jbG9jayArIGxlZnQubGVuID49IHJpZ2h0LmNsb2NrKSB7XG4gICAgICAgIGxlZnQubGVuID0gbWF0aC5tYXgobGVmdC5sZW4sIHJpZ2h0LmNsb2NrICsgcmlnaHQubGVuIC0gbGVmdC5jbG9jayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaiA8IGkpIHtcbiAgICAgICAgICBkZWxzW2pdID0gcmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgIH1cbiAgICBkZWxzLmxlbmd0aCA9IGo7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PERlbGV0ZVNldD59IGRzc1xuICogQHJldHVybiB7RGVsZXRlU2V0fSBBIGZyZXNoIERlbGV0ZVNldFxuICovXG5jb25zdCBtZXJnZURlbGV0ZVNldHMgPSBkc3MgPT4ge1xuICBjb25zdCBtZXJnZWQgPSBuZXcgRGVsZXRlU2V0KCk7XG4gIGZvciAobGV0IGRzc0kgPSAwOyBkc3NJIDwgZHNzLmxlbmd0aDsgZHNzSSsrKSB7XG4gICAgZHNzW2Rzc0ldLmNsaWVudHMuZm9yRWFjaCgoZGVsc0xlZnQsIGNsaWVudCkgPT4ge1xuICAgICAgaWYgKCFtZXJnZWQuY2xpZW50cy5oYXMoY2xpZW50KSkge1xuICAgICAgICAvLyBXcml0ZSBhbGwgbWlzc2luZyBrZXlzIGZyb20gY3VycmVudCBkcyBhbmQgYWxsIGZvbGxvd2luZy5cbiAgICAgICAgLy8gSWYgbWVyZ2VkIGFscmVhZHkgY29udGFpbnMgYGNsaWVudGAgY3VycmVudCBkcyBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkLlxuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge0FycmF5PERlbGV0ZUl0ZW0+fVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgZGVscyA9IGRlbHNMZWZ0LnNsaWNlKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSBkc3NJICsgMTsgaSA8IGRzcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFycmF5LmFwcGVuZFRvKGRlbHMsIGRzc1tpXS5jbGllbnRzLmdldChjbGllbnQpIHx8IFtdKTtcbiAgICAgICAgfVxuICAgICAgICBtZXJnZWQuY2xpZW50cy5zZXQoY2xpZW50LCBkZWxzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBzb3J0QW5kTWVyZ2VEZWxldGVTZXQobWVyZ2VkKTtcbiAgcmV0dXJuIG1lcmdlZFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1xuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgYWRkVG9EZWxldGVTZXQgPSAoZHMsIGNsaWVudCwgY2xvY2ssIGxlbmd0aCkgPT4ge1xuICBtYXAuc2V0SWZVbmRlZmluZWQoZHMuY2xpZW50cywgY2xpZW50LCAoKSA9PiBbXSkucHVzaChuZXcgRGVsZXRlSXRlbShjbG9jaywgbGVuZ3RoKSk7XG59O1xuXG5jb25zdCBjcmVhdGVEZWxldGVTZXQgPSAoKSA9PiBuZXcgRGVsZXRlU2V0KCk7XG5cbi8qKlxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3NcbiAqIEByZXR1cm4ge0RlbGV0ZVNldH0gTWVyZ2VkIGFuZCBzb3J0ZWQgRGVsZXRlU2V0XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjcmVhdGVEZWxldGVTZXRGcm9tU3RydWN0U3RvcmUgPSBzcyA9PiB7XG4gIGNvbnN0IGRzID0gY3JlYXRlRGVsZXRlU2V0KCk7XG4gIHNzLmNsaWVudHMuZm9yRWFjaCgoc3RydWN0cywgY2xpZW50KSA9PiB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PERlbGV0ZUl0ZW0+fVxuICAgICAqL1xuICAgIGNvbnN0IGRzaXRlbXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cnVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHN0cnVjdCA9IHN0cnVjdHNbaV07XG4gICAgICBpZiAoc3RydWN0LmRlbGV0ZWQpIHtcbiAgICAgICAgY29uc3QgY2xvY2sgPSBzdHJ1Y3QuaWQuY2xvY2s7XG4gICAgICAgIGxldCBsZW4gPSBzdHJ1Y3QubGVuZ3RoO1xuICAgICAgICBpZiAoaSArIDEgPCBzdHJ1Y3RzLmxlbmd0aCkge1xuICAgICAgICAgIGZvciAobGV0IG5leHQgPSBzdHJ1Y3RzW2kgKyAxXTsgaSArIDEgPCBzdHJ1Y3RzLmxlbmd0aCAmJiBuZXh0LmRlbGV0ZWQ7IG5leHQgPSBzdHJ1Y3RzWysraSArIDFdKSB7XG4gICAgICAgICAgICBsZW4gKz0gbmV4dC5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRzaXRlbXMucHVzaChuZXcgRGVsZXRlSXRlbShjbG9jaywgbGVuKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkc2l0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIGRzLmNsaWVudHMuc2V0KGNsaWVudCwgZHNpdGVtcyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRzXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RFNFbmNvZGVyVjEgfCBEU0VuY29kZXJWMn0gZW5jb2RlclxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB3cml0ZURlbGV0ZVNldCA9IChlbmNvZGVyLCBkcykgPT4ge1xuICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgZHMuY2xpZW50cy5zaXplKTtcbiAgZHMuY2xpZW50cy5mb3JFYWNoKChkc2l0ZW1zLCBjbGllbnQpID0+IHtcbiAgICBlbmNvZGVyLnJlc2V0RHNDdXJWYWwoKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgY2xpZW50KTtcbiAgICBjb25zdCBsZW4gPSBkc2l0ZW1zLmxlbmd0aDtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgbGVuKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gZHNpdGVtc1tpXTtcbiAgICAgIGVuY29kZXIud3JpdGVEc0Nsb2NrKGl0ZW0uY2xvY2spO1xuICAgICAgZW5jb2Rlci53cml0ZURzTGVuKGl0ZW0ubGVuKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0RTRGVjb2RlclYxIHwgRFNEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge0RlbGV0ZVNldH1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWREZWxldGVTZXQgPSBkZWNvZGVyID0+IHtcbiAgY29uc3QgZHMgPSBuZXcgRGVsZXRlU2V0KCk7XG4gIGNvbnN0IG51bUNsaWVudHMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1DbGllbnRzOyBpKyspIHtcbiAgICBkZWNvZGVyLnJlc2V0RHNDdXJWYWwoKTtcbiAgICBjb25zdCBjbGllbnQgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICBjb25zdCBudW1iZXJPZkRlbGV0ZXMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICBpZiAobnVtYmVyT2ZEZWxldGVzID4gMCkge1xuICAgICAgY29uc3QgZHNGaWVsZCA9IG1hcC5zZXRJZlVuZGVmaW5lZChkcy5jbGllbnRzLCBjbGllbnQsICgpID0+IFtdKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZEZWxldGVzOyBpKyspIHtcbiAgICAgICAgZHNGaWVsZC5wdXNoKG5ldyBEZWxldGVJdGVtKGRlY29kZXIucmVhZERzQ2xvY2soKSwgZGVjb2Rlci5yZWFkRHNMZW4oKSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZHNcbn07XG5cbi8qKlxuICogQHRvZG8gWURlY29kZXIgYWxzbyBjb250YWlucyByZWZlcmVuY2VzIHRvIFN0cmluZyBhbmQgb3RoZXIgRGVjb2RlcnMuIFdvdWxkIG1ha2Ugc2Vuc2UgdG8gZXhjaGFuZ2UgWURlY29kZXIudG9VaW50OEFycmF5IGZvciBZRGVjb2Rlci5Ec1RvVWludDhBcnJheSgpLi5cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7RFNEZWNvZGVyVjEgfCBEU0RlY29kZXJWMn0gZGVjb2RlclxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fG51bGx9IFJldHVybnMgYSB2MiB1cGRhdGUgY29udGFpbmluZyBhbGwgZGVsZXRlcyB0aGF0IGNvdWxkbid0IGJlIGFwcGxpZWQgeWV0OyBvciBudWxsIGlmIGFsbCBkZWxldGVzIHdlcmUgYXBwbGllZCBzdWNjZXNzZnVsbHkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkQW5kQXBwbHlEZWxldGVTZXQgPSAoZGVjb2RlciwgdHJhbnNhY3Rpb24sIHN0b3JlKSA9PiB7XG4gIGNvbnN0IHVuYXBwbGllZERTID0gbmV3IERlbGV0ZVNldCgpO1xuICBjb25zdCBudW1DbGllbnRzID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ2xpZW50czsgaSsrKSB7XG4gICAgZGVjb2Rlci5yZXNldERzQ3VyVmFsKCk7XG4gICAgY29uc3QgY2xpZW50ID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgY29uc3QgbnVtYmVyT2ZEZWxldGVzID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgY29uc3Qgc3RydWN0cyA9IHN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCkgfHwgW107XG4gICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZShzdG9yZSwgY2xpZW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mRGVsZXRlczsgaSsrKSB7XG4gICAgICBjb25zdCBjbG9jayA9IGRlY29kZXIucmVhZERzQ2xvY2soKTtcbiAgICAgIGNvbnN0IGNsb2NrRW5kID0gY2xvY2sgKyBkZWNvZGVyLnJlYWREc0xlbigpO1xuICAgICAgaWYgKGNsb2NrIDwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlIDwgY2xvY2tFbmQpIHtcbiAgICAgICAgICBhZGRUb0RlbGV0ZVNldCh1bmFwcGxpZWREUywgY2xpZW50LCBzdGF0ZSwgY2xvY2tFbmQgLSBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGluZGV4ID0gZmluZEluZGV4U1Moc3RydWN0cywgY2xvY2spO1xuICAgICAgICAvKipcbiAgICAgICAgICogV2UgY2FuIGlnbm9yZSB0aGUgY2FzZSBvZiBHQyBhbmQgRGVsZXRlIHN0cnVjdHMsIGJlY2F1c2Ugd2UgYXJlIGdvaW5nIHRvIHNraXAgdGhlbVxuICAgICAgICAgKiBAdHlwZSB7SXRlbX1cbiAgICAgICAgICovXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbGV0IHN0cnVjdCA9IHN0cnVjdHNbaW5kZXhdO1xuICAgICAgICAvLyBzcGxpdCB0aGUgZmlyc3QgaXRlbSBpZiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKCFzdHJ1Y3QuZGVsZXRlZCAmJiBzdHJ1Y3QuaWQuY2xvY2sgPCBjbG9jaykge1xuICAgICAgICAgIHN0cnVjdHMuc3BsaWNlKGluZGV4ICsgMSwgMCwgc3BsaXRJdGVtKHRyYW5zYWN0aW9uLCBzdHJ1Y3QsIGNsb2NrIC0gc3RydWN0LmlkLmNsb2NrKSk7XG4gICAgICAgICAgaW5kZXgrKzsgLy8gaW5jcmVhc2Ugd2Ugbm93IHdhbnQgdG8gdXNlIHRoZSBuZXh0IHN0cnVjdFxuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmRleCA8IHN0cnVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIHN0cnVjdCA9IHN0cnVjdHNbaW5kZXgrK107XG4gICAgICAgICAgaWYgKHN0cnVjdC5pZC5jbG9jayA8IGNsb2NrRW5kKSB7XG4gICAgICAgICAgICBpZiAoIXN0cnVjdC5kZWxldGVkKSB7XG4gICAgICAgICAgICAgIGlmIChjbG9ja0VuZCA8IHN0cnVjdC5pZC5jbG9jayArIHN0cnVjdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdHJ1Y3RzLnNwbGljZShpbmRleCwgMCwgc3BsaXRJdGVtKHRyYW5zYWN0aW9uLCBzdHJ1Y3QsIGNsb2NrRW5kIC0gc3RydWN0LmlkLmNsb2NrKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RydWN0LmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRUb0RlbGV0ZVNldCh1bmFwcGxpZWREUywgY2xpZW50LCBjbG9jaywgY2xvY2tFbmQgLSBjbG9jayk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh1bmFwcGxpZWREUy5jbGllbnRzLnNpemUgPiAwKSB7XG4gICAgY29uc3QgZHMgPSBuZXcgVXBkYXRlRW5jb2RlclYyKCk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGRzLnJlc3RFbmNvZGVyLCAwKTsgLy8gZW5jb2RlIDAgc3RydWN0c1xuICAgIHdyaXRlRGVsZXRlU2V0KGRzLCB1bmFwcGxpZWREUyk7XG4gICAgcmV0dXJuIGRzLnRvVWludDhBcnJheSgpXG4gIH1cbiAgcmV0dXJuIG51bGxcbn07XG5cbi8qKlxuICogQG1vZHVsZSBZXG4gKi9cblxuY29uc3QgZ2VuZXJhdGVOZXdDbGllbnRJZCA9IHJhbmRvbS51aW50MzI7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRG9jT3B0c1xuICogQHByb3BlcnR5IHtib29sZWFufSBbRG9jT3B0cy5nYz10cnVlXSBEaXNhYmxlIGdhcmJhZ2UgY29sbGVjdGlvbiAoZGVmYXVsdDogZ2M9dHJ1ZSlcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oSXRlbSk6Ym9vbGVhbn0gW0RvY09wdHMuZ2NGaWx0ZXJdIFdpbGwgYmUgY2FsbGVkIGJlZm9yZSBhbiBJdGVtIGlzIGdhcmJhZ2UgY29sbGVjdGVkLiBSZXR1cm4gZmFsc2UgdG8ga2VlcCB0aGUgSXRlbS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbRG9jT3B0cy5ndWlkXSBEZWZpbmUgYSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBkb2N1bWVudFxuICogQHByb3BlcnR5IHtzdHJpbmcgfCBudWxsfSBbRG9jT3B0cy5jb2xsZWN0aW9uaWRdIEFzc29jaWF0ZSB0aGlzIGRvY3VtZW50IHdpdGggYSBjb2xsZWN0aW9uLiBUaGlzIG9ubHkgcGxheXMgYSByb2xlIGlmIHlvdXIgcHJvdmlkZXIgaGFzIGEgY29uY2VwdCBvZiBjb2xsZWN0aW9uLlxuICogQHByb3BlcnR5IHthbnl9IFtEb2NPcHRzLm1ldGFdIEFueSBraW5kIG9mIG1ldGEgaW5mb3JtYXRpb24geW91IHdhbnQgdG8gYXNzb2NpYXRlIHdpdGggdGhpcyBkb2N1bWVudC4gSWYgdGhpcyBpcyBhIHN1YmRvY3VtZW50LCByZW1vdGUgcGVlcnMgd2lsbCBzdG9yZSB0aGUgbWV0YSBpbmZvcm1hdGlvbiBhcyB3ZWxsLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbRG9jT3B0cy5hdXRvTG9hZF0gSWYgYSBzdWJkb2N1bWVudCwgYXV0b21hdGljYWxseSBsb2FkIGRvY3VtZW50LiBJZiB0aGlzIGlzIGEgc3ViZG9jdW1lbnQsIHJlbW90ZSBwZWVycyB3aWxsIGxvYWQgdGhlIGRvY3VtZW50IGFzIHdlbGwgYXV0b21hdGljYWxseS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW0RvY09wdHMuc2hvdWxkTG9hZF0gV2hldGhlciB0aGUgZG9jdW1lbnQgc2hvdWxkIGJlIHN5bmNlZCBieSB0aGUgcHJvdmlkZXIgbm93LiBUaGlzIGlzIHRvZ2dsZWQgdG8gdHJ1ZSB3aGVuIHlvdSBjYWxsIHlkb2MubG9hZCgpXG4gKi9cblxuLyoqXG4gKiBBIFlqcyBpbnN0YW5jZSBoYW5kbGVzIHRoZSBzdGF0ZSBvZiBzaGFyZWQgZGF0YS5cbiAqIEBleHRlbmRzIE9ic2VydmFibGU8c3RyaW5nPlxuICovXG5jbGFzcyBEb2MgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jT3B0c30gW29wdHNdIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yICh7IGd1aWQgPSByYW5kb20udXVpZHY0KCksIGNvbGxlY3Rpb25pZCA9IG51bGwsIGdjID0gdHJ1ZSwgZ2NGaWx0ZXIgPSAoKSA9PiB0cnVlLCBtZXRhID0gbnVsbCwgYXV0b0xvYWQgPSBmYWxzZSwgc2hvdWxkTG9hZCA9IHRydWUgfSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmdjID0gZ2M7XG4gICAgdGhpcy5nY0ZpbHRlciA9IGdjRmlsdGVyO1xuICAgIHRoaXMuY2xpZW50SUQgPSBnZW5lcmF0ZU5ld0NsaWVudElkKCk7XG4gICAgdGhpcy5ndWlkID0gZ3VpZDtcbiAgICB0aGlzLmNvbGxlY3Rpb25pZCA9IGNvbGxlY3Rpb25pZDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZywgQWJzdHJhY3RUeXBlPFlFdmVudDxhbnk+Pj59XG4gICAgICovXG4gICAgdGhpcy5zaGFyZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnN0b3JlID0gbmV3IFN0cnVjdFN0b3JlKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge1RyYW5zYWN0aW9uIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLl90cmFuc2FjdGlvbiA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PFRyYW5zYWN0aW9uPn1cbiAgICAgKi9cbiAgICB0aGlzLl90cmFuc2FjdGlvbkNsZWFudXBzID0gW107XG4gICAgLyoqXG4gICAgICogQHR5cGUge1NldDxEb2M+fVxuICAgICAqL1xuICAgIHRoaXMuc3ViZG9jcyA9IG5ldyBTZXQoKTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIGRvY3VtZW50IGlzIGEgc3ViZG9jdW1lbnQgLSBhIGRvY3VtZW50IGludGVncmF0ZWQgaW50byBhbm90aGVyIGRvY3VtZW50IC0gdGhlbiBfaXRlbSBpcyBkZWZpbmVkLlxuICAgICAqIEB0eXBlIHtJdGVtP31cbiAgICAgKi9cbiAgICB0aGlzLl9pdGVtID0gbnVsbDtcbiAgICB0aGlzLnNob3VsZExvYWQgPSBzaG91bGRMb2FkO1xuICAgIHRoaXMuYXV0b0xvYWQgPSBhdXRvTG9hZDtcbiAgICB0aGlzLm1ldGEgPSBtZXRhO1xuICAgIHRoaXMuaXNMb2FkZWQgPSBmYWxzZTtcbiAgICB0aGlzLndoZW5Mb2FkZWQgPSBwcm9taXNlLmNyZWF0ZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMub24oJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICByZXNvbHZlKHRoaXMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTm90aWZ5IHRoZSBwYXJlbnQgZG9jdW1lbnQgdGhhdCB5b3UgcmVxdWVzdCB0byBsb2FkIGRhdGEgaW50byB0aGlzIHN1YmRvY3VtZW50IChpZiBpdCBpcyBhIHN1YmRvY3VtZW50KS5cbiAgICpcbiAgICogYGxvYWQoKWAgbWlnaHQgYmUgdXNlZCBpbiB0aGUgZnV0dXJlIHRvIHJlcXVlc3QgYW55IHByb3ZpZGVyIHRvIGxvYWQgdGhlIG1vc3QgY3VycmVudCBkYXRhLlxuICAgKlxuICAgKiBJdCBpcyBzYWZlIHRvIGNhbGwgYGxvYWQoKWAgbXVsdGlwbGUgdGltZXMuXG4gICAqL1xuICBsb2FkICgpIHtcbiAgICBjb25zdCBpdGVtID0gdGhpcy5faXRlbTtcbiAgICBpZiAoaXRlbSAhPT0gbnVsbCAmJiAhdGhpcy5zaG91bGRMb2FkKSB7XG4gICAgICB0cmFuc2FjdCgvKiogQHR5cGUge2FueX0gKi8gKGl0ZW0ucGFyZW50KS5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHJhbnNhY3Rpb24uc3ViZG9jc0xvYWRlZC5hZGQodGhpcyk7XG4gICAgICB9LCBudWxsLCB0cnVlKTtcbiAgICB9XG4gICAgdGhpcy5zaG91bGRMb2FkID0gdHJ1ZTtcbiAgfVxuXG4gIGdldFN1YmRvY3MgKCkge1xuICAgIHJldHVybiB0aGlzLnN1YmRvY3NcbiAgfVxuXG4gIGdldFN1YmRvY0d1aWRzICgpIHtcbiAgICByZXR1cm4gbmV3IFNldChBcnJheS5mcm9tKHRoaXMuc3ViZG9jcykubWFwKGRvYyA9PiBkb2MuZ3VpZCkpXG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlcyB0aGF0IGhhcHBlbiBpbnNpZGUgb2YgYSB0cmFuc2FjdGlvbiBhcmUgYnVuZGxlZC4gVGhpcyBtZWFucyB0aGF0XG4gICAqIHRoZSBvYnNlcnZlciBmaXJlcyBfYWZ0ZXJfIHRoZSB0cmFuc2FjdGlvbiBpcyBmaW5pc2hlZCBhbmQgdGhhdCBhbGwgY2hhbmdlc1xuICAgKiB0aGF0IGhhcHBlbmVkIGluc2lkZSBvZiB0aGUgdHJhbnNhY3Rpb24gYXJlIHNlbnQgYXMgb25lIG1lc3NhZ2UgdG8gdGhlXG4gICAqIG90aGVyIHBlZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKFRyYW5zYWN0aW9uKTp2b2lkfSBmIFRoZSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBleGVjdXRlZCBhcyBhIHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7YW55fSBbb3JpZ2luXSBPcmlnaW4gb2Ygd2hvIHN0YXJ0ZWQgdGhlIHRyYW5zYWN0aW9uLiBXaWxsIGJlIHN0b3JlZCBvbiB0cmFuc2FjdGlvbi5vcmlnaW5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdHJhbnNhY3QgKGYsIG9yaWdpbiA9IG51bGwpIHtcbiAgICB0cmFuc2FjdCh0aGlzLCBmLCBvcmlnaW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZSBhIHNoYXJlZCBkYXRhIHR5cGUuXG4gICAqXG4gICAqIE11bHRpcGxlIGNhbGxzIG9mIGB5LmdldChuYW1lLCBUeXBlQ29uc3RydWN0b3IpYCB5aWVsZCB0aGUgc2FtZSByZXN1bHRcbiAgICogYW5kIGRvIG5vdCBvdmVyd3JpdGUgZWFjaCBvdGhlci4gSS5lLlxuICAgKiBgeS5kZWZpbmUobmFtZSwgWS5BcnJheSkgPT09IHkuZGVmaW5lKG5hbWUsIFkuQXJyYXkpYFxuICAgKlxuICAgKiBBZnRlciB0aGlzIG1ldGhvZCBpcyBjYWxsZWQsIHRoZSB0eXBlIGlzIGFsc28gYXZhaWxhYmxlIG9uIGB5LnNoYXJlLmdldChuYW1lKWAuXG4gICAqXG4gICAqICpCZXN0IFByYWN0aWNlczoqXG4gICAqIERlZmluZSBhbGwgdHlwZXMgcmlnaHQgYWZ0ZXIgdGhlIFlqcyBpbnN0YW5jZSBpcyBjcmVhdGVkIGFuZCBzdG9yZSB0aGVtIGluIGEgc2VwYXJhdGUgb2JqZWN0LlxuICAgKiBBbHNvIHVzZSB0aGUgdHlwZWQgbWV0aG9kcyBgZ2V0VGV4dChuYW1lKWAsIGBnZXRBcnJheShuYW1lKWAsIC4uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAgY29uc3QgeSA9IG5ldyBZKC4uKVxuICAgKiAgIGNvbnN0IGFwcFN0YXRlID0ge1xuICAgKiAgICAgZG9jdW1lbnQ6IHkuZ2V0VGV4dCgnZG9jdW1lbnQnKVxuICAgKiAgICAgY29tbWVudHM6IHkuZ2V0QXJyYXkoJ2NvbW1lbnRzJylcbiAgICogICB9XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFR5cGVDb25zdHJ1Y3RvciBUaGUgY29uc3RydWN0b3Igb2YgdGhlIHR5cGUgZGVmaW5pdGlvbi4gRS5nLiBZLlRleHQsIFkuQXJyYXksIFkuTWFwLCAuLi5cbiAgICogQHJldHVybiB7QWJzdHJhY3RUeXBlPGFueT59IFRoZSBjcmVhdGVkIHR5cGUuIENvbnN0cnVjdGVkIHdpdGggVHlwZUNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldCAobmFtZSwgVHlwZUNvbnN0cnVjdG9yID0gQWJzdHJhY3RUeXBlKSB7XG4gICAgY29uc3QgdHlwZSA9IG1hcC5zZXRJZlVuZGVmaW5lZCh0aGlzLnNoYXJlLCBuYW1lLCAoKSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBjb25zdCB0ID0gbmV3IFR5cGVDb25zdHJ1Y3RvcigpO1xuICAgICAgdC5faW50ZWdyYXRlKHRoaXMsIG51bGwpO1xuICAgICAgcmV0dXJuIHRcbiAgICB9KTtcbiAgICBjb25zdCBDb25zdHIgPSB0eXBlLmNvbnN0cnVjdG9yO1xuICAgIGlmIChUeXBlQ29uc3RydWN0b3IgIT09IEFic3RyYWN0VHlwZSAmJiBDb25zdHIgIT09IFR5cGVDb25zdHJ1Y3Rvcikge1xuICAgICAgaWYgKENvbnN0ciA9PT0gQWJzdHJhY3RUeXBlKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgdCA9IG5ldyBUeXBlQ29uc3RydWN0b3IoKTtcbiAgICAgICAgdC5fbWFwID0gdHlwZS5fbWFwO1xuICAgICAgICB0eXBlLl9tYXAuZm9yRWFjaCgvKiogQHBhcmFtIHtJdGVtP30gbiAqLyBuID0+IHtcbiAgICAgICAgICBmb3IgKDsgbiAhPT0gbnVsbDsgbiA9IG4ubGVmdCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgbi5wYXJlbnQgPSB0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHQuX3N0YXJ0ID0gdHlwZS5fc3RhcnQ7XG4gICAgICAgIGZvciAobGV0IG4gPSB0Ll9zdGFydDsgbiAhPT0gbnVsbDsgbiA9IG4ucmlnaHQpIHtcbiAgICAgICAgICBuLnBhcmVudCA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgdC5fbGVuZ3RoID0gdHlwZS5fbGVuZ3RoO1xuICAgICAgICB0aGlzLnNoYXJlLnNldChuYW1lLCB0KTtcbiAgICAgICAgdC5faW50ZWdyYXRlKHRoaXMsIG51bGwpO1xuICAgICAgICByZXR1cm4gdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUeXBlIHdpdGggdGhlIG5hbWUgJHtuYW1lfSBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgd2l0aCBhIGRpZmZlcmVudCBjb25zdHJ1Y3RvcmApXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0eXBlXG4gIH1cblxuICAvKipcbiAgICogQHRlbXBsYXRlIFRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXVxuICAgKiBAcmV0dXJuIHtZQXJyYXk8VD59XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldEFycmF5IChuYW1lID0gJycpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIHRoaXMuZ2V0KG5hbWUsIFlBcnJheSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25hbWVdXG4gICAqIEByZXR1cm4ge1lUZXh0fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRUZXh0IChuYW1lID0gJycpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIHRoaXMuZ2V0KG5hbWUsIFlUZXh0KVxuICB9XG5cbiAgLyoqXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZV1cbiAgICogQHJldHVybiB7WU1hcDxUPn1cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0TWFwIChuYW1lID0gJycpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIHRoaXMuZ2V0KG5hbWUsIFlNYXApXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXVxuICAgKiBAcmV0dXJuIHtZWG1sRnJhZ21lbnR9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldFhtbEZyYWdtZW50IChuYW1lID0gJycpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIHRoaXMuZ2V0KG5hbWUsIFlYbWxGcmFnbWVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgZW50aXJlIGRvY3VtZW50IGludG8gYSBqcyBvYmplY3QsIHJlY3Vyc2l2ZWx5IHRyYXZlcnNpbmcgZWFjaCB5anMgdHlwZVxuICAgKiBEb2Vzbid0IGxvZyB0eXBlcyB0aGF0IGhhdmUgbm90IGJlZW4gZGVmaW5lZCAodXNpbmcgeWRvYy5nZXRUeXBlKC4uKSkuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIERvIG5vdCB1c2UgdGhpcyBtZXRob2QgYW5kIHJhdGhlciBjYWxsIHRvSlNPTiBkaXJlY3RseSBvbiB0aGUgc2hhcmVkIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLCBhbnk+fVxuICAgKi9cbiAgdG9KU09OICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgYW55Pn1cbiAgICAgKi9cbiAgICBjb25zdCBkb2MgPSB7fTtcblxuICAgIHRoaXMuc2hhcmUuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgZG9jW2tleV0gPSB2YWx1ZS50b0pTT04oKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkb2NcbiAgfVxuXG4gIC8qKlxuICAgKiBFbWl0IGBkZXN0cm95YCBldmVudCBhbmQgdW5yZWdpc3RlciBhbGwgZXZlbnQgaGFuZGxlcnMuXG4gICAqL1xuICBkZXN0cm95ICgpIHtcbiAgICBhcnJheS5mcm9tKHRoaXMuc3ViZG9jcykuZm9yRWFjaChzdWJkb2MgPT4gc3ViZG9jLmRlc3Ryb3koKSk7XG4gICAgY29uc3QgaXRlbSA9IHRoaXMuX2l0ZW07XG4gICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX2l0ZW0gPSBudWxsO1xuICAgICAgY29uc3QgY29udGVudCA9IC8qKiBAdHlwZSB7Q29udGVudERvY30gKi8gKGl0ZW0uY29udGVudCk7XG4gICAgICBjb250ZW50LmRvYyA9IG5ldyBEb2MoeyBndWlkOiB0aGlzLmd1aWQsIC4uLmNvbnRlbnQub3B0cywgc2hvdWxkTG9hZDogZmFsc2UgfSk7XG4gICAgICBjb250ZW50LmRvYy5faXRlbSA9IGl0ZW07XG4gICAgICB0cmFuc2FjdCgvKiogQHR5cGUge2FueX0gKi8gKGl0ZW0pLnBhcmVudC5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgZG9jID0gY29udGVudC5kb2M7XG4gICAgICAgIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb24uc3ViZG9jc0FkZGVkLmFkZChkb2MpO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zYWN0aW9uLnN1YmRvY3NSZW1vdmVkLmFkZCh0aGlzKTtcbiAgICAgIH0sIG51bGwsIHRydWUpO1xuICAgIH1cbiAgICB0aGlzLmVtaXQoJ2Rlc3Ryb3llZCcsIFt0cnVlXSk7XG4gICAgdGhpcy5lbWl0KCdkZXN0cm95JywgW3RoaXNdKTtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLmFueSk6YW55fSBmXG4gICAqL1xuICBvbiAoZXZlbnROYW1lLCBmKSB7XG4gICAgc3VwZXIub24oZXZlbnROYW1lLCBmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZcbiAgICovXG4gIG9mZiAoZXZlbnROYW1lLCBmKSB7XG4gICAgc3VwZXIub2ZmKGV2ZW50TmFtZSwgZik7XG4gIH1cbn1cblxuY2xhc3MgRFNEZWNvZGVyVjEge1xuICAvKipcbiAgICogQHBhcmFtIHtkZWNvZGluZy5EZWNvZGVyfSBkZWNvZGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZGVjb2Rlcikge1xuICAgIHRoaXMucmVzdERlY29kZXIgPSBkZWNvZGVyO1xuICB9XG5cbiAgcmVzZXREc0N1clZhbCAoKSB7XG4gICAgLy8gbm9wXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgcmVhZERzQ2xvY2sgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHJlYWREc0xlbiAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpXG4gIH1cbn1cblxuY2xhc3MgVXBkYXRlRGVjb2RlclYxIGV4dGVuZHMgRFNEZWNvZGVyVjEge1xuICAvKipcbiAgICogQHJldHVybiB7SUR9XG4gICAqL1xuICByZWFkTGVmdElEICgpIHtcbiAgICByZXR1cm4gY3JlYXRlSUQoZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlciksIGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0lEfVxuICAgKi9cbiAgcmVhZFJpZ2h0SUQgKCkge1xuICAgIHJldHVybiBjcmVhdGVJRChkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKSwgZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcikpXG4gIH1cblxuICAvKipcbiAgICogUmVhZCB0aGUgbmV4dCBjbGllbnQgaWQuXG4gICAqIFVzZSB0aGlzIGluIGZhdm9yIG9mIHJlYWRJRCB3aGVuZXZlciBwb3NzaWJsZSB0byByZWR1Y2UgdGhlIG51bWJlciBvZiBvYmplY3RzIGNyZWF0ZWQuXG4gICAqL1xuICByZWFkQ2xpZW50ICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGluZm8gQW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICAgKi9cbiAgcmVhZEluZm8gKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVWludDgodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICByZWFkU3RyaW5nICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclN0cmluZyh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IGlzS2V5XG4gICAqL1xuICByZWFkUGFyZW50SW5mbyAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpID09PSAxXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBpbmZvIEFuIHVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAgICovXG4gIHJlYWRUeXBlUmVmICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBsZW4gb2YgYSBzdHJ1Y3QgLSB3ZWxsIHN1aXRlZCBmb3IgT3B0IFJMRSBlbmNvZGVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGxlblxuICAgKi9cbiAgcmVhZExlbiAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7YW55fVxuICAgKi9cbiAgcmVhZEFueSAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRBbnkodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICAgKi9cbiAgcmVhZEJ1ZiAoKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5jb3B5VWludDhBcnJheShkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheSh0aGlzLnJlc3REZWNvZGVyKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBMZWdhY3kgaW1wbGVtZW50YXRpb24gdXNlcyBKU09OIHBhcnNlLiBXZSB1c2UgYW55LWRlY29kaW5nIGluIHYyLlxuICAgKlxuICAgKiBAcmV0dXJuIHthbnl9XG4gICAqL1xuICByZWFkSlNPTiAoKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RpbmcucmVhZFZhclN0cmluZyh0aGlzLnJlc3REZWNvZGVyKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICByZWFkS2V5ICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclN0cmluZyh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG59XG5cbmNsYXNzIERTRGVjb2RlclYyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZGVjb2RpbmcuRGVjb2Rlcn0gZGVjb2RlclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRlY29kZXIpIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuZHNDdXJyVmFsID0gMDtcbiAgICB0aGlzLnJlc3REZWNvZGVyID0gZGVjb2RlcjtcbiAgfVxuXG4gIHJlc2V0RHNDdXJWYWwgKCkge1xuICAgIHRoaXMuZHNDdXJyVmFsID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByZWFkRHNDbG9jayAoKSB7XG4gICAgdGhpcy5kc0N1cnJWYWwgKz0gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2Rlcik7XG4gICAgcmV0dXJuIHRoaXMuZHNDdXJyVmFsXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgcmVhZERzTGVuICgpIHtcbiAgICBjb25zdCBkaWZmID0gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcikgKyAxO1xuICAgIHRoaXMuZHNDdXJyVmFsICs9IGRpZmY7XG4gICAgcmV0dXJuIGRpZmZcbiAgfVxufVxuXG5jbGFzcyBVcGRhdGVEZWNvZGVyVjIgZXh0ZW5kcyBEU0RlY29kZXJWMiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2RlY29kaW5nLkRlY29kZXJ9IGRlY29kZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkZWNvZGVyKSB7XG4gICAgc3VwZXIoZGVjb2Rlcik7XG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBjYWNoZWQga2V5cy4gSWYgdGhlIGtleXNbaWRdIGRvZXMgbm90IGV4aXN0LCB3ZSByZWFkIGEgbmV3IGtleVxuICAgICAqIGZyb20gc3RyaW5nRW5jb2RlciBhbmQgcHVzaCBpdCB0byBrZXlzLlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5rZXlzID0gW107XG4gICAgZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlcik7IC8vIHJlYWQgZmVhdHVyZSBmbGFnIC0gY3VycmVudGx5IHVudXNlZFxuICAgIHRoaXMua2V5Q2xvY2tEZWNvZGVyID0gbmV3IGRlY29kaW5nLkludERpZmZPcHRSbGVEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpKTtcbiAgICB0aGlzLmNsaWVudERlY29kZXIgPSBuZXcgZGVjb2RpbmcuVWludE9wdFJsZURlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlcikpO1xuICAgIHRoaXMubGVmdENsb2NrRGVjb2RlciA9IG5ldyBkZWNvZGluZy5JbnREaWZmT3B0UmxlRGVjb2RlcihkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheShkZWNvZGVyKSk7XG4gICAgdGhpcy5yaWdodENsb2NrRGVjb2RlciA9IG5ldyBkZWNvZGluZy5JbnREaWZmT3B0UmxlRGVjb2RlcihkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheShkZWNvZGVyKSk7XG4gICAgdGhpcy5pbmZvRGVjb2RlciA9IG5ldyBkZWNvZGluZy5SbGVEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpLCBkZWNvZGluZy5yZWFkVWludDgpO1xuICAgIHRoaXMuc3RyaW5nRGVjb2RlciA9IG5ldyBkZWNvZGluZy5TdHJpbmdEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpKTtcbiAgICB0aGlzLnBhcmVudEluZm9EZWNvZGVyID0gbmV3IGRlY29kaW5nLlJsZURlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlciksIGRlY29kaW5nLnJlYWRVaW50OCk7XG4gICAgdGhpcy50eXBlUmVmRGVjb2RlciA9IG5ldyBkZWNvZGluZy5VaW50T3B0UmxlRGVjb2RlcihkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheShkZWNvZGVyKSk7XG4gICAgdGhpcy5sZW5EZWNvZGVyID0gbmV3IGRlY29kaW5nLlVpbnRPcHRSbGVEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtJRH1cbiAgICovXG4gIHJlYWRMZWZ0SUQgKCkge1xuICAgIHJldHVybiBuZXcgSUQodGhpcy5jbGllbnREZWNvZGVyLnJlYWQoKSwgdGhpcy5sZWZ0Q2xvY2tEZWNvZGVyLnJlYWQoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtJRH1cbiAgICovXG4gIHJlYWRSaWdodElEICgpIHtcbiAgICByZXR1cm4gbmV3IElEKHRoaXMuY2xpZW50RGVjb2Rlci5yZWFkKCksIHRoaXMucmlnaHRDbG9ja0RlY29kZXIucmVhZCgpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgdGhlIG5leHQgY2xpZW50IGlkLlxuICAgKiBVc2UgdGhpcyBpbiBmYXZvciBvZiByZWFkSUQgd2hlbmV2ZXIgcG9zc2libGUgdG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygb2JqZWN0cyBjcmVhdGVkLlxuICAgKi9cbiAgcmVhZENsaWVudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50RGVjb2Rlci5yZWFkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGluZm8gQW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICAgKi9cbiAgcmVhZEluZm8gKCkge1xuICAgIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKHRoaXMuaW5mb0RlY29kZXIucmVhZCgpKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHJlYWRTdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLnN0cmluZ0RlY29kZXIucmVhZCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHJlYWRQYXJlbnRJbmZvICgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnRJbmZvRGVjb2Rlci5yZWFkKCkgPT09IDFcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEFuIHVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAgICovXG4gIHJlYWRUeXBlUmVmICgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlUmVmRGVjb2Rlci5yZWFkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBsZW4gb2YgYSBzdHJ1Y3QgLSB3ZWxsIHN1aXRlZCBmb3IgT3B0IFJMRSBlbmNvZGVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByZWFkTGVuICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5EZWNvZGVyLnJlYWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2FueX1cbiAgICovXG4gIHJlYWRBbnkgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkQW55KHRoaXMucmVzdERlY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7VWludDhBcnJheX1cbiAgICovXG4gIHJlYWRCdWYgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheSh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgbWFpbmx5IGhlcmUgZm9yIGxlZ2FjeSBwdXJwb3Nlcy5cbiAgICpcbiAgICogSW5pdGlhbCB3ZSBpbmNvZGVkIG9iamVjdHMgdXNpbmcgSlNPTi4gTm93IHdlIHVzZSB0aGUgbXVjaCBmYXN0ZXIgbGliMC9hbnktZW5jb2Rlci4gVGhpcyBtZXRob2QgbWFpbmx5IGV4aXN0cyBmb3IgbGVnYWN5IHB1cnBvc2VzIGZvciB0aGUgdjEgZW5jb2Rlci5cbiAgICpcbiAgICogQHJldHVybiB7YW55fVxuICAgKi9cbiAgcmVhZEpTT04gKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkQW55KHRoaXMucmVzdERlY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgcmVhZEtleSAoKSB7XG4gICAgY29uc3Qga2V5Q2xvY2sgPSB0aGlzLmtleUNsb2NrRGVjb2Rlci5yZWFkKCk7XG4gICAgaWYgKGtleUNsb2NrIDwgdGhpcy5rZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMua2V5c1trZXlDbG9ja11cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qga2V5ID0gdGhpcy5zdHJpbmdEZWNvZGVyLnJlYWQoKTtcbiAgICAgIHRoaXMua2V5cy5wdXNoKGtleSk7XG4gICAgICByZXR1cm4ga2V5XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIERTRW5jb2RlclYxIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMucmVzdEVuY29kZXIgPSBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKCk7XG4gIH1cblxuICB0b1VpbnQ4QXJyYXkgKCkge1xuICAgIHJldHVybiBlbmNvZGluZy50b1VpbnQ4QXJyYXkodGhpcy5yZXN0RW5jb2RlcilcbiAgfVxuXG4gIHJlc2V0RHNDdXJWYWwgKCkge1xuICAgIC8vIG5vcFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1xuICAgKi9cbiAgd3JpdGVEc0Nsb2NrIChjbG9jaykge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBjbG9jayk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICAgKi9cbiAgd3JpdGVEc0xlbiAobGVuKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGxlbik7XG4gIH1cbn1cblxuY2xhc3MgVXBkYXRlRW5jb2RlclYxIGV4dGVuZHMgRFNFbmNvZGVyVjEge1xuICAvKipcbiAgICogQHBhcmFtIHtJRH0gaWRcbiAgICovXG4gIHdyaXRlTGVmdElEIChpZCkge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBpZC5jbGllbnQpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBpZC5jbG9jayk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtJRH0gaWRcbiAgICovXG4gIHdyaXRlUmlnaHRJRCAoaWQpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgaWQuY2xpZW50KTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgaWQuY2xvY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZSB3cml0ZUNsaWVudCBhbmQgd3JpdGVDbG9jayBpbnN0ZWFkIG9mIHdyaXRlSUQgaWYgcG9zc2libGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRcbiAgICovXG4gIHdyaXRlQ2xpZW50IChjbGllbnQpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgY2xpZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5mbyBBbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAqL1xuICB3cml0ZUluZm8gKGluZm8pIHtcbiAgICBlbmNvZGluZy53cml0ZVVpbnQ4KHRoaXMucmVzdEVuY29kZXIsIGluZm8pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gICAqL1xuICB3cml0ZVN0cmluZyAocykge1xuICAgIGVuY29kaW5nLndyaXRlVmFyU3RyaW5nKHRoaXMucmVzdEVuY29kZXIsIHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNZS2V5XG4gICAqL1xuICB3cml0ZVBhcmVudEluZm8gKGlzWUtleSkge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBpc1lLZXkgPyAxIDogMCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZm8gQW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICAgKi9cbiAgd3JpdGVUeXBlUmVmIChpbmZvKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGluZm8pO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIGxlbiBvZiBhIHN0cnVjdCAtIHdlbGwgc3VpdGVkIGZvciBPcHQgUkxFIGVuY29kZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAgICovXG4gIHdyaXRlTGVuIChsZW4pIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgbGVuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gYW55XG4gICAqL1xuICB3cml0ZUFueSAoYW55KSB7XG4gICAgZW5jb2Rpbmcud3JpdGVBbnkodGhpcy5yZXN0RW5jb2RlciwgYW55KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZlxuICAgKi9cbiAgd3JpdGVCdWYgKGJ1Zikge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheSh0aGlzLnJlc3RFbmNvZGVyLCBidWYpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBlbWJlZFxuICAgKi9cbiAgd3JpdGVKU09OIChlbWJlZCkge1xuICAgIGVuY29kaW5nLndyaXRlVmFyU3RyaW5nKHRoaXMucmVzdEVuY29kZXIsIEpTT04uc3RyaW5naWZ5KGVtYmVkKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKi9cbiAgd3JpdGVLZXkgKGtleSkge1xuICAgIGVuY29kaW5nLndyaXRlVmFyU3RyaW5nKHRoaXMucmVzdEVuY29kZXIsIGtleSk7XG4gIH1cbn1cblxuY2xhc3MgRFNFbmNvZGVyVjIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5yZXN0RW5jb2RlciA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKTsgLy8gZW5jb2RlcyBhbGwgdGhlIHJlc3QgLyBub24tb3B0aW1pemVkXG4gICAgdGhpcy5kc0N1cnJWYWwgPSAwO1xuICB9XG5cbiAgdG9VaW50OEFycmF5ICgpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcudG9VaW50OEFycmF5KHRoaXMucmVzdEVuY29kZXIpXG4gIH1cblxuICByZXNldERzQ3VyVmFsICgpIHtcbiAgICB0aGlzLmRzQ3VyclZhbCA9IDA7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrXG4gICAqL1xuICB3cml0ZURzQ2xvY2sgKGNsb2NrKSB7XG4gICAgY29uc3QgZGlmZiA9IGNsb2NrIC0gdGhpcy5kc0N1cnJWYWw7XG4gICAgdGhpcy5kc0N1cnJWYWwgPSBjbG9jaztcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgZGlmZik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICAgKi9cbiAgd3JpdGVEc0xlbiAobGVuKSB7XG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgZXJyb3IudW5leHBlY3RlZENhc2UoKTtcbiAgICB9XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGxlbiAtIDEpO1xuICAgIHRoaXMuZHNDdXJyVmFsICs9IGxlbjtcbiAgfVxufVxuXG5jbGFzcyBVcGRhdGVFbmNvZGVyVjIgZXh0ZW5kcyBEU0VuY29kZXJWMiB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLG51bWJlcj59XG4gICAgICovXG4gICAgdGhpcy5rZXlNYXAgPSBuZXcgTWFwKCk7XG4gICAgLyoqXG4gICAgICogUmVmZXJzIHRvIHRoZSBuZXh0IHVuaXFlIGtleS1pZGVudGlmaWVyIHRvIG1lIHVzZWQuXG4gICAgICogU2VlIHdyaXRlS2V5IG1ldGhvZCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5rZXlDbG9jayA9IDA7XG4gICAgdGhpcy5rZXlDbG9ja0VuY29kZXIgPSBuZXcgZW5jb2RpbmcuSW50RGlmZk9wdFJsZUVuY29kZXIoKTtcbiAgICB0aGlzLmNsaWVudEVuY29kZXIgPSBuZXcgZW5jb2RpbmcuVWludE9wdFJsZUVuY29kZXIoKTtcbiAgICB0aGlzLmxlZnRDbG9ja0VuY29kZXIgPSBuZXcgZW5jb2RpbmcuSW50RGlmZk9wdFJsZUVuY29kZXIoKTtcbiAgICB0aGlzLnJpZ2h0Q2xvY2tFbmNvZGVyID0gbmV3IGVuY29kaW5nLkludERpZmZPcHRSbGVFbmNvZGVyKCk7XG4gICAgdGhpcy5pbmZvRW5jb2RlciA9IG5ldyBlbmNvZGluZy5SbGVFbmNvZGVyKGVuY29kaW5nLndyaXRlVWludDgpO1xuICAgIHRoaXMuc3RyaW5nRW5jb2RlciA9IG5ldyBlbmNvZGluZy5TdHJpbmdFbmNvZGVyKCk7XG4gICAgdGhpcy5wYXJlbnRJbmZvRW5jb2RlciA9IG5ldyBlbmNvZGluZy5SbGVFbmNvZGVyKGVuY29kaW5nLndyaXRlVWludDgpO1xuICAgIHRoaXMudHlwZVJlZkVuY29kZXIgPSBuZXcgZW5jb2RpbmcuVWludE9wdFJsZUVuY29kZXIoKTtcbiAgICB0aGlzLmxlbkVuY29kZXIgPSBuZXcgZW5jb2RpbmcuVWludE9wdFJsZUVuY29kZXIoKTtcbiAgfVxuXG4gIHRvVWludDhBcnJheSAoKSB7XG4gICAgY29uc3QgZW5jb2RlciA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2RlciwgMCk7IC8vIHRoaXMgaXMgYSBmZWF0dXJlIGZsYWcgdGhhdCB3ZSBtaWdodCB1c2UgaW4gdGhlIGZ1dHVyZVxuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCB0aGlzLmtleUNsb2NrRW5jb2Rlci50b1VpbnQ4QXJyYXkoKSk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIHRoaXMuY2xpZW50RW5jb2Rlci50b1VpbnQ4QXJyYXkoKSk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIHRoaXMubGVmdENsb2NrRW5jb2Rlci50b1VpbnQ4QXJyYXkoKSk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIHRoaXMucmlnaHRDbG9ja0VuY29kZXIudG9VaW50OEFycmF5KCkpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCBlbmNvZGluZy50b1VpbnQ4QXJyYXkodGhpcy5pbmZvRW5jb2RlcikpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCB0aGlzLnN0cmluZ0VuY29kZXIudG9VaW50OEFycmF5KCkpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCBlbmNvZGluZy50b1VpbnQ4QXJyYXkodGhpcy5wYXJlbnRJbmZvRW5jb2RlcikpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCB0aGlzLnR5cGVSZWZFbmNvZGVyLnRvVWludDhBcnJheSgpKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgdGhpcy5sZW5FbmNvZGVyLnRvVWludDhBcnJheSgpKTtcbiAgICAvLyBAbm90ZSBUaGUgcmVzdCBlbmNvZGVyIGlzIGFwcGVuZGVkISAobm90ZSB0aGUgbWlzc2luZyB2YXIpXG4gICAgZW5jb2Rpbmcud3JpdGVVaW50OEFycmF5KGVuY29kZXIsIGVuY29kaW5nLnRvVWludDhBcnJheSh0aGlzLnJlc3RFbmNvZGVyKSk7XG4gICAgcmV0dXJuIGVuY29kaW5nLnRvVWludDhBcnJheShlbmNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SUR9IGlkXG4gICAqL1xuICB3cml0ZUxlZnRJRCAoaWQpIHtcbiAgICB0aGlzLmNsaWVudEVuY29kZXIud3JpdGUoaWQuY2xpZW50KTtcbiAgICB0aGlzLmxlZnRDbG9ja0VuY29kZXIud3JpdGUoaWQuY2xvY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SUR9IGlkXG4gICAqL1xuICB3cml0ZVJpZ2h0SUQgKGlkKSB7XG4gICAgdGhpcy5jbGllbnRFbmNvZGVyLndyaXRlKGlkLmNsaWVudCk7XG4gICAgdGhpcy5yaWdodENsb2NrRW5jb2Rlci53cml0ZShpZC5jbG9jayk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFxuICAgKi9cbiAgd3JpdGVDbGllbnQgKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50RW5jb2Rlci53cml0ZShjbGllbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmZvIEFuIHVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAgICovXG4gIHdyaXRlSW5mbyAoaW5mbykge1xuICAgIHRoaXMuaW5mb0VuY29kZXIud3JpdGUoaW5mbyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNcbiAgICovXG4gIHdyaXRlU3RyaW5nIChzKSB7XG4gICAgdGhpcy5zdHJpbmdFbmNvZGVyLndyaXRlKHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNZS2V5XG4gICAqL1xuICB3cml0ZVBhcmVudEluZm8gKGlzWUtleSkge1xuICAgIHRoaXMucGFyZW50SW5mb0VuY29kZXIud3JpdGUoaXNZS2V5ID8gMSA6IDApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmZvIEFuIHVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAgICovXG4gIHdyaXRlVHlwZVJlZiAoaW5mbykge1xuICAgIHRoaXMudHlwZVJlZkVuY29kZXIud3JpdGUoaW5mbyk7XG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgbGVuIG9mIGEgc3RydWN0IC0gd2VsbCBzdWl0ZWQgZm9yIE9wdCBSTEUgZW5jb2Rlci5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICAgKi9cbiAgd3JpdGVMZW4gKGxlbikge1xuICAgIHRoaXMubGVuRW5jb2Rlci53cml0ZShsZW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBhbnlcbiAgICovXG4gIHdyaXRlQW55IChhbnkpIHtcbiAgICBlbmNvZGluZy53cml0ZUFueSh0aGlzLnJlc3RFbmNvZGVyLCBhbnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gICAqL1xuICB3cml0ZUJ1ZiAoYnVmKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KHRoaXMucmVzdEVuY29kZXIsIGJ1Zik7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyBtYWlubHkgaGVyZSBmb3IgbGVnYWN5IHB1cnBvc2VzLlxuICAgKlxuICAgKiBJbml0aWFsIHdlIGluY29kZWQgb2JqZWN0cyB1c2luZyBKU09OLiBOb3cgd2UgdXNlIHRoZSBtdWNoIGZhc3RlciBsaWIwL2FueS1lbmNvZGVyLiBUaGlzIG1ldGhvZCBtYWlubHkgZXhpc3RzIGZvciBsZWdhY3kgcHVycG9zZXMgZm9yIHRoZSB2MSBlbmNvZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gZW1iZWRcbiAgICovXG4gIHdyaXRlSlNPTiAoZW1iZWQpIHtcbiAgICBlbmNvZGluZy53cml0ZUFueSh0aGlzLnJlc3RFbmNvZGVyLCBlbWJlZCk7XG4gIH1cblxuICAvKipcbiAgICogUHJvcGVydHkga2V5cyBhcmUgb2Z0ZW4gcmV1c2VkLiBGb3IgZXhhbXBsZSwgaW4geS1wcm9zZW1pcnJvciB0aGUga2V5IGBib2xkYCBtaWdodFxuICAgKiBvY2N1ciB2ZXJ5IG9mdGVuLiBGb3IgYSAzZCBhcHBsaWNhdGlvbiwgdGhlIGtleSBgcG9zaXRpb25gIG1pZ2h0IG9jY3VyIHZlcnkgb2Z0ZW4uXG4gICAqXG4gICAqIFdlIGNhY2hlIHRoZXNlIGtleXMgaW4gYSBNYXAgYW5kIHJlZmVyIHRvIHRoZW0gdmlhIGEgdW5pcXVlIG51bWJlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKi9cbiAgd3JpdGVLZXkgKGtleSkge1xuICAgIGNvbnN0IGNsb2NrID0gdGhpcy5rZXlNYXAuZ2V0KGtleSk7XG4gICAgaWYgKGNsb2NrID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHRvZG8gdW5jb21tZW50IHRvIGludHJvZHVjZSB0aGlzIGZlYXR1cmUgZmluYWxseVxuICAgICAgICpcbiAgICAgICAqIEJhY2tncm91bmQuIFRoZSBDb250ZW50Rm9ybWF0IG9iamVjdCB3YXMgYWx3YXlzIGVuY29kZWQgdXNpbmcgd3JpdGVLZXksIGJ1dCB0aGUgZGVjb2RlciB1c2VkIHRvIHVzZSByZWFkU3RyaW5nLlxuICAgICAgICogRnVydGhlcm1vcmUsIEkgZm9yZ290IHRvIHNldCB0aGUga2V5Y2xvY2suIFNvIGV2ZXJ5dGhpbmcgd2FzIHdvcmtpbmcgZmluZS5cbiAgICAgICAqXG4gICAgICAgKiBIb3dldmVyLCB0aGlzIGZlYXR1cmUgaGVyZSBpcyBiYXNpY2FsbHkgdXNlbGVzcyBhcyBpdCBpcyBub3QgYmVpbmcgdXNlZCAoaXQgYWN0dWFsbHkgb25seSBjb25zdW1lcyBleHRyYSBtZW1vcnkpLlxuICAgICAgICpcbiAgICAgICAqIEkgZG9uJ3Qga25vdyB5ZXQgaG93IHRvIHJlaW50cm9kdWNlIHRoaXMgZmVhdHVyZS4uXG4gICAgICAgKlxuICAgICAgICogT2xkZXIgY2xpZW50cyB3b24ndCBiZSBhYmxlIHRvIHJlYWQgdXBkYXRlcyB3aGVuIHdlIHJlaW50cm9kdWNlIHRoaXMgZmVhdHVyZS4gU28gdGhpcyBzaG91bGQgcHJvYmFibHkgYmUgZG9uZSB1c2luZyBhIGZsYWcuXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICAvLyB0aGlzLmtleU1hcC5zZXQoa2V5LCB0aGlzLmtleUNsb2NrKVxuICAgICAgdGhpcy5rZXlDbG9ja0VuY29kZXIud3JpdGUodGhpcy5rZXlDbG9jaysrKTtcbiAgICAgIHRoaXMuc3RyaW5nRW5jb2Rlci53cml0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmtleUNsb2NrRW5jb2Rlci53cml0ZShjbG9jayk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7QXJyYXk8R0N8SXRlbT59IHN0cnVjdHMgQWxsIHN0cnVjdHMgYnkgYGNsaWVudGBcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbG9jayB3cml0ZSBzdHJ1Y3RzIHN0YXJ0aW5nIHdpdGggYElEKGNsaWVudCxjbG9jaylgXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHdyaXRlU3RydWN0cyA9IChlbmNvZGVyLCBzdHJ1Y3RzLCBjbGllbnQsIGNsb2NrKSA9PiB7XG4gIC8vIHdyaXRlIGZpcnN0IGlkXG4gIGNsb2NrID0gbWF0aC5tYXgoY2xvY2ssIHN0cnVjdHNbMF0uaWQuY2xvY2spOyAvLyBtYWtlIHN1cmUgdGhlIGZpcnN0IGlkIGV4aXN0c1xuICBjb25zdCBzdGFydE5ld1N0cnVjdHMgPSBmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBjbG9jayk7XG4gIC8vIHdyaXRlICMgZW5jb2RlZCBzdHJ1Y3RzXG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBzdHJ1Y3RzLmxlbmd0aCAtIHN0YXJ0TmV3U3RydWN0cyk7XG4gIGVuY29kZXIud3JpdGVDbGllbnQoY2xpZW50KTtcbiAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGNsb2NrKTtcbiAgY29uc3QgZmlyc3RTdHJ1Y3QgPSBzdHJ1Y3RzW3N0YXJ0TmV3U3RydWN0c107XG4gIC8vIHdyaXRlIGZpcnN0IHN0cnVjdCB3aXRoIGFuIG9mZnNldFxuICBmaXJzdFN0cnVjdC53cml0ZShlbmNvZGVyLCBjbG9jayAtIGZpcnN0U3RydWN0LmlkLmNsb2NrKTtcbiAgZm9yIChsZXQgaSA9IHN0YXJ0TmV3U3RydWN0cyArIDE7IGkgPCBzdHJ1Y3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3RydWN0c1tpXS53cml0ZShlbmNvZGVyLCAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7TWFwPG51bWJlcixudW1iZXI+fSBfc21cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHdyaXRlQ2xpZW50c1N0cnVjdHMgPSAoZW5jb2Rlciwgc3RvcmUsIF9zbSkgPT4ge1xuICAvLyB3ZSBmaWx0ZXIgYWxsIHZhbGlkIF9zbSBlbnRyaWVzIGludG8gc21cbiAgY29uc3Qgc20gPSBuZXcgTWFwKCk7XG4gIF9zbS5mb3JFYWNoKChjbG9jaywgY2xpZW50KSA9PiB7XG4gICAgLy8gb25seSB3cml0ZSBpZiBuZXcgc3RydWN0cyBhcmUgYXZhaWxhYmxlXG4gICAgaWYgKGdldFN0YXRlKHN0b3JlLCBjbGllbnQpID4gY2xvY2spIHtcbiAgICAgIHNtLnNldChjbGllbnQsIGNsb2NrKTtcbiAgICB9XG4gIH0pO1xuICBnZXRTdGF0ZVZlY3RvcihzdG9yZSkuZm9yRWFjaCgoY2xvY2ssIGNsaWVudCkgPT4ge1xuICAgIGlmICghX3NtLmhhcyhjbGllbnQpKSB7XG4gICAgICBzbS5zZXQoY2xpZW50LCAwKTtcbiAgICB9XG4gIH0pO1xuICAvLyB3cml0ZSAjIHN0YXRlcyB0aGF0IHdlcmUgdXBkYXRlZFxuICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2Rlciwgc20uc2l6ZSk7XG4gIC8vIFdyaXRlIGl0ZW1zIHdpdGggaGlnaGVyIGNsaWVudCBpZHMgZmlyc3RcbiAgLy8gVGhpcyBoZWF2aWx5IGltcHJvdmVzIHRoZSBjb25mbGljdCBhbGdvcml0aG0uXG4gIEFycmF5LmZyb20oc20uZW50cmllcygpKS5zb3J0KChhLCBiKSA9PiBiWzBdIC0gYVswXSkuZm9yRWFjaCgoW2NsaWVudCwgY2xvY2tdKSA9PiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHdyaXRlU3RydWN0cyhlbmNvZGVyLCBzdG9yZS5jbGllbnRzLmdldChjbGllbnQpLCBjbGllbnQsIGNsb2NrKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyIFRoZSBkZWNvZGVyIG9iamVjdCB0byByZWFkIGRhdGEgZnJvbS5cbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqIEByZXR1cm4ge01hcDxudW1iZXIsIHsgaTogbnVtYmVyLCByZWZzOiBBcnJheTxJdGVtIHwgR0M+IH0+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZENsaWVudHNTdHJ1Y3RSZWZzID0gKGRlY29kZXIsIGRvYykgPT4ge1xuICAvKipcbiAgICogQHR5cGUge01hcDxudW1iZXIsIHsgaTogbnVtYmVyLCByZWZzOiBBcnJheTxJdGVtIHwgR0M+IH0+fVxuICAgKi9cbiAgY29uc3QgY2xpZW50UmVmcyA9IG1hcC5jcmVhdGUoKTtcbiAgY29uc3QgbnVtT2ZTdGF0ZVVwZGF0ZXMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PZlN0YXRlVXBkYXRlczsgaSsrKSB7XG4gICAgY29uc3QgbnVtYmVyT2ZTdHJ1Y3RzID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PEdDfEl0ZW0+fVxuICAgICAqL1xuICAgIGNvbnN0IHJlZnMgPSBuZXcgQXJyYXkobnVtYmVyT2ZTdHJ1Y3RzKTtcbiAgICBjb25zdCBjbGllbnQgPSBkZWNvZGVyLnJlYWRDbGllbnQoKTtcbiAgICBsZXQgY2xvY2sgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICAvLyBjb25zdCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgY2xpZW50UmVmcy5zZXQoY2xpZW50LCB7IGk6IDAsIHJlZnMgfSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZlN0cnVjdHM7IGkrKykge1xuICAgICAgY29uc3QgaW5mbyA9IGRlY29kZXIucmVhZEluZm8oKTtcbiAgICAgIHN3aXRjaCAoYmluYXJ5LkJJVFM1ICYgaW5mbykge1xuICAgICAgICBjYXNlIDA6IHsgLy8gR0NcbiAgICAgICAgICBjb25zdCBsZW4gPSBkZWNvZGVyLnJlYWRMZW4oKTtcbiAgICAgICAgICByZWZzW2ldID0gbmV3IEdDKGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spLCBsZW4pO1xuICAgICAgICAgIGNsb2NrICs9IGxlbjtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTA6IHsgLy8gU2tpcCBTdHJ1Y3QgKG5vdGhpbmcgdG8gYXBwbHkpXG4gICAgICAgICAgLy8gQHRvZG8gd2UgY291bGQgcmVkdWNlIHRoZSBhbW91bnQgb2YgY2hlY2tzIGJ5IGFkZGluZyBTa2lwIHN0cnVjdCB0byBjbGllbnRSZWZzIHNvIHdlIGtub3cgdGhhdCBzb21ldGhpbmcgaXMgbWlzc2luZy5cbiAgICAgICAgICBjb25zdCBsZW4gPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICAgICAgICByZWZzW2ldID0gbmV3IFNraXAoY3JlYXRlSUQoY2xpZW50LCBjbG9jayksIGxlbik7XG4gICAgICAgICAgY2xvY2sgKz0gbGVuO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogeyAvLyBJdGVtIHdpdGggY29udGVudFxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFRoZSBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZG9lc24ndCB1c2UgYW55IHZhcmlhYmxlcyBiZWNhdXNlIGlubGluaW5nIHZhcmlhYmxlcyBpcyBmYXN0ZXIuXG4gICAgICAgICAgICogQmVsb3cgYSBub24tb3B0aW1pemVkIHZlcnNpb24gaXMgc2hvd24gdGhhdCBpbXBsZW1lbnRzIHRoZSBiYXNpYyBhbGdvcml0aG0gd2l0aFxuICAgICAgICAgICAqIGEgZmV3IGNvbW1lbnRzXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uc3QgY2FudENvcHlQYXJlbnRJbmZvID0gKGluZm8gJiAoYmluYXJ5LkJJVDcgfCBiaW5hcnkuQklUOCkpID09PSAwO1xuICAgICAgICAgIC8vIElmIHBhcmVudCA9IG51bGwgYW5kIG5laXRoZXIgbGVmdCBub3IgcmlnaHQgYXJlIGRlZmluZWQsIHRoZW4gd2Uga25vdyB0aGF0IGBwYXJlbnRgIGlzIGNoaWxkIG9mIGB5YFxuICAgICAgICAgIC8vIGFuZCB3ZSByZWFkIHRoZSBuZXh0IHN0cmluZyBhcyBwYXJlbnRZS2V5LlxuICAgICAgICAgIC8vIEl0IGluZGljYXRlcyBob3cgd2Ugc3RvcmUvcmV0cmlldmUgcGFyZW50IGZyb20gYHkuc2hhcmVgXG4gICAgICAgICAgLy8gQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAgICAgIGNvbnN0IHN0cnVjdCA9IG5ldyBJdGVtKFxuICAgICAgICAgICAgY3JlYXRlSUQoY2xpZW50LCBjbG9jayksXG4gICAgICAgICAgICBudWxsLCAvLyBsZWZ0ZFxuICAgICAgICAgICAgKGluZm8gJiBiaW5hcnkuQklUOCkgPT09IGJpbmFyeS5CSVQ4ID8gZGVjb2Rlci5yZWFkTGVmdElEKCkgOiBudWxsLCAvLyBvcmlnaW5cbiAgICAgICAgICAgIG51bGwsIC8vIHJpZ2h0XG4gICAgICAgICAgICAoaW5mbyAmIGJpbmFyeS5CSVQ3KSA9PT0gYmluYXJ5LkJJVDcgPyBkZWNvZGVyLnJlYWRSaWdodElEKCkgOiBudWxsLCAvLyByaWdodCBvcmlnaW5cbiAgICAgICAgICAgIGNhbnRDb3B5UGFyZW50SW5mbyA/IChkZWNvZGVyLnJlYWRQYXJlbnRJbmZvKCkgPyBkb2MuZ2V0KGRlY29kZXIucmVhZFN0cmluZygpKSA6IGRlY29kZXIucmVhZExlZnRJRCgpKSA6IG51bGwsIC8vIHBhcmVudFxuICAgICAgICAgICAgY2FudENvcHlQYXJlbnRJbmZvICYmIChpbmZvICYgYmluYXJ5LkJJVDYpID09PSBiaW5hcnkuQklUNiA/IGRlY29kZXIucmVhZFN0cmluZygpIDogbnVsbCwgLy8gcGFyZW50U3ViXG4gICAgICAgICAgICByZWFkSXRlbUNvbnRlbnQoZGVjb2RlciwgaW5mbykgLy8gaXRlbSBjb250ZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgICAvKiBBIG5vbi1vcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gb2YgdGhlIGFib3ZlIGFsZ29yaXRobTpcblxuICAgICAgICAgIC8vIFRoZSBpdGVtIHRoYXQgd2FzIG9yaWdpbmFsbHkgdG8gdGhlIGxlZnQgb2YgdGhpcyBpdGVtLlxuICAgICAgICAgIGNvbnN0IG9yaWdpbiA9IChpbmZvICYgYmluYXJ5LkJJVDgpID09PSBiaW5hcnkuQklUOCA/IGRlY29kZXIucmVhZExlZnRJRCgpIDogbnVsbFxuICAgICAgICAgIC8vIFRoZSBpdGVtIHRoYXQgd2FzIG9yaWdpbmFsbHkgdG8gdGhlIHJpZ2h0IG9mIHRoaXMgaXRlbS5cbiAgICAgICAgICBjb25zdCByaWdodE9yaWdpbiA9IChpbmZvICYgYmluYXJ5LkJJVDcpID09PSBiaW5hcnkuQklUNyA/IGRlY29kZXIucmVhZFJpZ2h0SUQoKSA6IG51bGxcbiAgICAgICAgICBjb25zdCBjYW50Q29weVBhcmVudEluZm8gPSAoaW5mbyAmIChiaW5hcnkuQklUNyB8IGJpbmFyeS5CSVQ4KSkgPT09IDBcbiAgICAgICAgICBjb25zdCBoYXNQYXJlbnRZS2V5ID0gY2FudENvcHlQYXJlbnRJbmZvID8gZGVjb2Rlci5yZWFkUGFyZW50SW5mbygpIDogZmFsc2VcbiAgICAgICAgICAvLyBJZiBwYXJlbnQgPSBudWxsIGFuZCBuZWl0aGVyIGxlZnQgbm9yIHJpZ2h0IGFyZSBkZWZpbmVkLCB0aGVuIHdlIGtub3cgdGhhdCBgcGFyZW50YCBpcyBjaGlsZCBvZiBgeWBcbiAgICAgICAgICAvLyBhbmQgd2UgcmVhZCB0aGUgbmV4dCBzdHJpbmcgYXMgcGFyZW50WUtleS5cbiAgICAgICAgICAvLyBJdCBpbmRpY2F0ZXMgaG93IHdlIHN0b3JlL3JldHJpZXZlIHBhcmVudCBmcm9tIGB5LnNoYXJlYFxuICAgICAgICAgIC8vIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgICAgICBjb25zdCBwYXJlbnRZS2V5ID0gY2FudENvcHlQYXJlbnRJbmZvICYmIGhhc1BhcmVudFlLZXkgPyBkZWNvZGVyLnJlYWRTdHJpbmcoKSA6IG51bGxcblxuICAgICAgICAgIGNvbnN0IHN0cnVjdCA9IG5ldyBJdGVtKFxuICAgICAgICAgICAgY3JlYXRlSUQoY2xpZW50LCBjbG9jayksXG4gICAgICAgICAgICBudWxsLCAvLyBsZWZ0ZFxuICAgICAgICAgICAgb3JpZ2luLCAvLyBvcmlnaW5cbiAgICAgICAgICAgIG51bGwsIC8vIHJpZ2h0XG4gICAgICAgICAgICByaWdodE9yaWdpbiwgLy8gcmlnaHQgb3JpZ2luXG4gICAgICAgICAgICBjYW50Q29weVBhcmVudEluZm8gJiYgIWhhc1BhcmVudFlLZXkgPyBkZWNvZGVyLnJlYWRMZWZ0SUQoKSA6IChwYXJlbnRZS2V5ICE9PSBudWxsID8gZG9jLmdldChwYXJlbnRZS2V5KSA6IG51bGwpLCAvLyBwYXJlbnRcbiAgICAgICAgICAgIGNhbnRDb3B5UGFyZW50SW5mbyAmJiAoaW5mbyAmIGJpbmFyeS5CSVQ2KSA9PT0gYmluYXJ5LkJJVDYgPyBkZWNvZGVyLnJlYWRTdHJpbmcoKSA6IG51bGwsIC8vIHBhcmVudFN1YlxuICAgICAgICAgICAgcmVhZEl0ZW1Db250ZW50KGRlY29kZXIsIGluZm8pIC8vIGl0ZW0gY29udGVudFxuICAgICAgICAgIClcbiAgICAgICAgICAqL1xuICAgICAgICAgIHJlZnNbaV0gPSBzdHJ1Y3Q7XG4gICAgICAgICAgY2xvY2sgKz0gc3RydWN0Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygndGltZSB0byByZWFkOiAnLCBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSAvLyBAdG9kbyByZW1vdmVcbiAgfVxuICByZXR1cm4gY2xpZW50UmVmc1xufTtcblxuLyoqXG4gKiBSZXN1bWUgY29tcHV0aW5nIHN0cnVjdHMgZ2VuZXJhdGVkIGJ5IHN0cnVjdCByZWFkZXJzLlxuICpcbiAqIFdoaWxlIHRoZXJlIGlzIHNvbWV0aGluZyB0byBkbywgd2UgaW50ZWdyYXRlIHN0cnVjdHMgaW4gdGhpcyBvcmRlclxuICogMS4gdG9wIGVsZW1lbnQgb24gc3RhY2ssIGlmIHN0YWNrIGlzIG5vdCBlbXB0eVxuICogMi4gbmV4dCBlbGVtZW50IGZyb20gY3VycmVudCBzdHJ1Y3QgcmVhZGVyIChpZiBlbXB0eSwgdXNlIG5leHQgc3RydWN0IHJlYWRlcilcbiAqXG4gKiBJZiBzdHJ1Y3QgY2F1c2FsbHkgZGVwZW5kcyBvbiBhbm90aGVyIHN0cnVjdCAocmVmLm1pc3NpbmcpLCB3ZSBwdXQgbmV4dCByZWFkZXIgb2ZcbiAqIGByZWYuaWQuY2xpZW50YCBvbiB0b3Agb2Ygc3RhY2suXG4gKlxuICogQXQgc29tZSBwb2ludCB3ZSBmaW5kIGEgc3RydWN0IHRoYXQgaGFzIG5vIGNhdXNhbCBkZXBlbmRlbmNpZXMsXG4gKiB0aGVuIHdlIHN0YXJ0IGVtcHR5aW5nIHRoZSBzdGFjay5cbiAqXG4gKiBJdCBpcyBub3QgcG9zc2libGUgdG8gaGF2ZSBjaXJjbGVzOiBpLmUuIHN0cnVjdDEgKGZyb20gY2xpZW50MSkgZGVwZW5kcyBvbiBzdHJ1Y3QyIChmcm9tIGNsaWVudDIpXG4gKiBkZXBlbmRzIG9uIHN0cnVjdDMgKGZyb20gY2xpZW50MSkuIFRoZXJlZm9yZSB0aGUgbWF4IHN0YWNrIHNpemUgaXMgZXFhdWwgdG8gYHN0cnVjdFJlYWRlcnMubGVuZ3RoYC5cbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBpbXBsZW1lbnRlZCBpbiBhIHdheSBzbyB0aGF0IHdlIGNhbiByZXN1bWUgY29tcHV0YXRpb24gaWYgdGhpcyB1cGRhdGVcbiAqIGNhdXNhbGx5IGRlcGVuZHMgb24gYW5vdGhlciB1cGRhdGUuXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge01hcDxudW1iZXIsIHsgaTogbnVtYmVyLCByZWZzOiAoR0MgfCBJdGVtKVtdIH0+fSBjbGllbnRzU3RydWN0UmVmc1xuICogQHJldHVybiB7IG51bGwgfCB7IHVwZGF0ZTogVWludDhBcnJheSwgbWlzc2luZzogTWFwPG51bWJlcixudW1iZXI+IH0gfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgaW50ZWdyYXRlU3RydWN0cyA9ICh0cmFuc2FjdGlvbiwgc3RvcmUsIGNsaWVudHNTdHJ1Y3RSZWZzKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8SXRlbSB8IEdDPn1cbiAgICovXG4gIGNvbnN0IHN0YWNrID0gW107XG4gIC8vIHNvcnQgdGhlbSBzbyB0aGF0IHdlIHRha2UgdGhlIGhpZ2hlciBpZCBmaXJzdCwgaW4gY2FzZSBvZiBjb25mbGljdHMgdGhlIGxvd2VyIGlkIHdpbGwgcHJvYmFibHkgbm90IGNvbmZsaWN0IHdpdGggdGhlIGlkIGZyb20gdGhlIGhpZ2hlciB1c2VyLlxuICBsZXQgY2xpZW50c1N0cnVjdFJlZnNJZHMgPSBBcnJheS5mcm9tKGNsaWVudHNTdHJ1Y3RSZWZzLmtleXMoKSkuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICBpZiAoY2xpZW50c1N0cnVjdFJlZnNJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBjb25zdCBnZXROZXh0U3RydWN0VGFyZ2V0ID0gKCkgPT4ge1xuICAgIGlmIChjbGllbnRzU3RydWN0UmVmc0lkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIGxldCBuZXh0U3RydWN0c1RhcmdldCA9IC8qKiBAdHlwZSB7e2k6bnVtYmVyLHJlZnM6QXJyYXk8R0N8SXRlbT59fSAqLyAoY2xpZW50c1N0cnVjdFJlZnMuZ2V0KGNsaWVudHNTdHJ1Y3RSZWZzSWRzW2NsaWVudHNTdHJ1Y3RSZWZzSWRzLmxlbmd0aCAtIDFdKSk7XG4gICAgd2hpbGUgKG5leHRTdHJ1Y3RzVGFyZ2V0LnJlZnMubGVuZ3RoID09PSBuZXh0U3RydWN0c1RhcmdldC5pKSB7XG4gICAgICBjbGllbnRzU3RydWN0UmVmc0lkcy5wb3AoKTtcbiAgICAgIGlmIChjbGllbnRzU3RydWN0UmVmc0lkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIG5leHRTdHJ1Y3RzVGFyZ2V0ID0gLyoqIEB0eXBlIHt7aTpudW1iZXIscmVmczpBcnJheTxHQ3xJdGVtPn19ICovIChjbGllbnRzU3RydWN0UmVmcy5nZXQoY2xpZW50c1N0cnVjdFJlZnNJZHNbY2xpZW50c1N0cnVjdFJlZnNJZHMubGVuZ3RoIC0gMV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXh0U3RydWN0c1RhcmdldFxuICB9O1xuICBsZXQgY3VyU3RydWN0c1RhcmdldCA9IGdldE5leHRTdHJ1Y3RUYXJnZXQoKTtcbiAgaWYgKGN1clN0cnVjdHNUYXJnZXQgPT09IG51bGwgJiYgc3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7U3RydWN0U3RvcmV9XG4gICAqL1xuICBjb25zdCByZXN0U3RydWN0cyA9IG5ldyBTdHJ1Y3RTdG9yZSgpO1xuICBjb25zdCBtaXNzaW5nU1YgPSBuZXcgTWFwKCk7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xpZW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1xuICAgKi9cbiAgY29uc3QgdXBkYXRlTWlzc2luZ1N2ID0gKGNsaWVudCwgY2xvY2spID0+IHtcbiAgICBjb25zdCBtY2xvY2sgPSBtaXNzaW5nU1YuZ2V0KGNsaWVudCk7XG4gICAgaWYgKG1jbG9jayA9PSBudWxsIHx8IG1jbG9jayA+IGNsb2NrKSB7XG4gICAgICBtaXNzaW5nU1Yuc2V0KGNsaWVudCwgY2xvY2spO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIEB0eXBlIHtHQ3xJdGVtfVxuICAgKi9cbiAgbGV0IHN0YWNrSGVhZCA9IC8qKiBAdHlwZSB7YW55fSAqLyAoY3VyU3RydWN0c1RhcmdldCkucmVmc1svKiogQHR5cGUge2FueX0gKi8gKGN1clN0cnVjdHNUYXJnZXQpLmkrK107XG4gIC8vIGNhY2hpbmcgdGhlIHN0YXRlIGJlY2F1c2UgaXQgaXMgdXNlZCB2ZXJ5IG9mdGVuXG4gIGNvbnN0IHN0YXRlID0gbmV3IE1hcCgpO1xuXG4gIGNvbnN0IGFkZFN0YWNrVG9SZXN0U1MgPSAoKSA9PiB7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHN0YWNrKSB7XG4gICAgICBjb25zdCBjbGllbnQgPSBpdGVtLmlkLmNsaWVudDtcbiAgICAgIGNvbnN0IHVuYXBwbGljYWJsZUl0ZW1zID0gY2xpZW50c1N0cnVjdFJlZnMuZ2V0KGNsaWVudCk7XG4gICAgICBpZiAodW5hcHBsaWNhYmxlSXRlbXMpIHtcbiAgICAgICAgLy8gZGVjcmVtZW50IGJlY2F1c2Ugd2Ugd2VyZW4ndCBhYmxlIHRvIGFwcGx5IHByZXZpb3VzIG9wZXJhdGlvblxuICAgICAgICB1bmFwcGxpY2FibGVJdGVtcy5pLS07XG4gICAgICAgIHJlc3RTdHJ1Y3RzLmNsaWVudHMuc2V0KGNsaWVudCwgdW5hcHBsaWNhYmxlSXRlbXMucmVmcy5zbGljZSh1bmFwcGxpY2FibGVJdGVtcy5pKSk7XG4gICAgICAgIGNsaWVudHNTdHJ1Y3RSZWZzLmRlbGV0ZShjbGllbnQpO1xuICAgICAgICB1bmFwcGxpY2FibGVJdGVtcy5pID0gMDtcbiAgICAgICAgdW5hcHBsaWNhYmxlSXRlbXMucmVmcyA9IFtdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaXRlbSB3YXMgdGhlIGxhc3QgaXRlbSBvbiBjbGllbnRzU3RydWN0UmVmcyBhbmQgdGhlIGZpZWxkIHdhcyBhbHJlYWR5IGNsZWFyZWQuIEFkZCBpdGVtIHRvIHJlc3RTdHJ1Y3RzIGFuZCBjb250aW51ZVxuICAgICAgICByZXN0U3RydWN0cy5jbGllbnRzLnNldChjbGllbnQsIFtpdGVtXSk7XG4gICAgICB9XG4gICAgICAvLyByZW1vdmUgY2xpZW50IGZyb20gY2xpZW50c1N0cnVjdFJlZnNJZHMgdG8gcHJldmVudCB1c2VycyBmcm9tIGFwcGx5aW5nIHRoZSBzYW1lIHVwZGF0ZSBhZ2FpblxuICAgICAgY2xpZW50c1N0cnVjdFJlZnNJZHMgPSBjbGllbnRzU3RydWN0UmVmc0lkcy5maWx0ZXIoYyA9PiBjICE9PSBjbGllbnQpO1xuICAgIH1cbiAgICBzdGFjay5sZW5ndGggPSAwO1xuICB9O1xuXG4gIC8vIGl0ZXJhdGUgb3ZlciBhbGwgc3RydWN0IHJlYWRlcnMgdW50aWwgd2UgYXJlIGRvbmVcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoc3RhY2tIZWFkLmNvbnN0cnVjdG9yICE9PSBTa2lwKSB7XG4gICAgICBjb25zdCBsb2NhbENsb2NrID0gbWFwLnNldElmVW5kZWZpbmVkKHN0YXRlLCBzdGFja0hlYWQuaWQuY2xpZW50LCAoKSA9PiBnZXRTdGF0ZShzdG9yZSwgc3RhY2tIZWFkLmlkLmNsaWVudCkpO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gbG9jYWxDbG9jayAtIHN0YWNrSGVhZC5pZC5jbG9jaztcbiAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgIC8vIHVwZGF0ZSBmcm9tIHRoZSBzYW1lIGNsaWVudCBpcyBtaXNzaW5nXG4gICAgICAgIHN0YWNrLnB1c2goc3RhY2tIZWFkKTtcbiAgICAgICAgdXBkYXRlTWlzc2luZ1N2KHN0YWNrSGVhZC5pZC5jbGllbnQsIHN0YWNrSGVhZC5pZC5jbG9jayAtIDEpO1xuICAgICAgICAvLyBoaWQgYSBkZWFkIHdhbGwsIGFkZCBhbGwgaXRlbXMgZnJvbSBzdGFjayB0byByZXN0U1NcbiAgICAgICAgYWRkU3RhY2tUb1Jlc3RTUygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbWlzc2luZyA9IHN0YWNrSGVhZC5nZXRNaXNzaW5nKHRyYW5zYWN0aW9uLCBzdG9yZSk7XG4gICAgICAgIGlmIChtaXNzaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RhY2sucHVzaChzdGFja0hlYWQpO1xuICAgICAgICAgIC8vIGdldCB0aGUgc3RydWN0IHJlYWRlciB0aGF0IGhhcyB0aGUgbWlzc2luZyBzdHJ1Y3RcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAdHlwZSB7eyByZWZzOiBBcnJheTxHQ3xJdGVtPiwgaTogbnVtYmVyIH19XG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uc3Qgc3RydWN0UmVmcyA9IGNsaWVudHNTdHJ1Y3RSZWZzLmdldCgvKiogQHR5cGUge251bWJlcn0gKi8gKG1pc3NpbmcpKSB8fCB7IHJlZnM6IFtdLCBpOiAwIH07XG4gICAgICAgICAgaWYgKHN0cnVjdFJlZnMucmVmcy5sZW5ndGggPT09IHN0cnVjdFJlZnMuaSkge1xuICAgICAgICAgICAgLy8gVGhpcyB1cGRhdGUgbWVzc2FnZSBjYXVzYWxseSBkZXBlbmRzIG9uIGFub3RoZXIgdXBkYXRlIG1lc3NhZ2UgdGhhdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgICAgICAgICAgdXBkYXRlTWlzc2luZ1N2KC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAobWlzc2luZyksIGdldFN0YXRlKHN0b3JlLCBtaXNzaW5nKSk7XG4gICAgICAgICAgICBhZGRTdGFja1RvUmVzdFNTKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YWNrSGVhZCA9IHN0cnVjdFJlZnMucmVmc1tzdHJ1Y3RSZWZzLmkrK107XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvZmZzZXQgPT09IDAgfHwgb2Zmc2V0IDwgc3RhY2tIZWFkLmxlbmd0aCkge1xuICAgICAgICAgIC8vIGFsbCBmaW5lLCBhcHBseSB0aGUgc3RhY2toZWFkXG4gICAgICAgICAgc3RhY2tIZWFkLmludGVncmF0ZSh0cmFuc2FjdGlvbiwgb2Zmc2V0KTtcbiAgICAgICAgICBzdGF0ZS5zZXQoc3RhY2tIZWFkLmlkLmNsaWVudCwgc3RhY2tIZWFkLmlkLmNsb2NrICsgc3RhY2tIZWFkLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gaXRlcmF0ZSB0byBuZXh0IHN0YWNrSGVhZFxuICAgIGlmIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICBzdGFja0hlYWQgPSAvKiogQHR5cGUge0dDfEl0ZW19ICovIChzdGFjay5wb3AoKSk7XG4gICAgfSBlbHNlIGlmIChjdXJTdHJ1Y3RzVGFyZ2V0ICE9PSBudWxsICYmIGN1clN0cnVjdHNUYXJnZXQuaSA8IGN1clN0cnVjdHNUYXJnZXQucmVmcy5sZW5ndGgpIHtcbiAgICAgIHN0YWNrSGVhZCA9IC8qKiBAdHlwZSB7R0N8SXRlbX0gKi8gKGN1clN0cnVjdHNUYXJnZXQucmVmc1tjdXJTdHJ1Y3RzVGFyZ2V0LmkrK10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJTdHJ1Y3RzVGFyZ2V0ID0gZ2V0TmV4dFN0cnVjdFRhcmdldCgpO1xuICAgICAgaWYgKGN1clN0cnVjdHNUYXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gd2UgYXJlIGRvbmUhXG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFja0hlYWQgPSAvKiogQHR5cGUge0dDfEl0ZW19ICovIChjdXJTdHJ1Y3RzVGFyZ2V0LnJlZnNbY3VyU3RydWN0c1RhcmdldC5pKytdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHJlc3RTdHJ1Y3RzLmNsaWVudHMuc2l6ZSA+IDApIHtcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IFVwZGF0ZUVuY29kZXJWMigpO1xuICAgIHdyaXRlQ2xpZW50c1N0cnVjdHMoZW5jb2RlciwgcmVzdFN0cnVjdHMsIG5ldyBNYXAoKSk7XG4gICAgLy8gd3JpdGUgZW1wdHkgZGVsZXRlc2V0XG4gICAgLy8gd3JpdGVEZWxldGVTZXQoZW5jb2RlciwgbmV3IERlbGV0ZVNldCgpKVxuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCAwKTsgLy8gPT4gbm8gbmVlZCBmb3IgYW4gZXh0cmEgZnVuY3Rpb24gY2FsbCwganVzdCB3cml0ZSAwIGRlbGV0ZXNcbiAgICByZXR1cm4geyBtaXNzaW5nOiBtaXNzaW5nU1YsIHVwZGF0ZTogZW5jb2Rlci50b1VpbnQ4QXJyYXkoKSB9XG4gIH1cbiAgcmV0dXJuIG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB3cml0ZVN0cnVjdHNGcm9tVHJhbnNhY3Rpb24gPSAoZW5jb2RlciwgdHJhbnNhY3Rpb24pID0+IHdyaXRlQ2xpZW50c1N0cnVjdHMoZW5jb2RlciwgdHJhbnNhY3Rpb24uZG9jLnN0b3JlLCB0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZSk7XG5cbi8qKlxuICogUmVhZCBhbmQgYXBwbHkgYSBkb2N1bWVudCB1cGRhdGUuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIGBhcHBseVVwZGF0ZWAgYnV0IGFjY2VwdHMgYW4gZGVjb2Rlci5cbiAqXG4gKiBAcGFyYW0ge2RlY29kaW5nLkRlY29kZXJ9IGRlY29kZXJcbiAqIEBwYXJhbSB7RG9jfSB5ZG9jXG4gKiBAcGFyYW0ge2FueX0gW3RyYW5zYWN0aW9uT3JpZ2luXSBUaGlzIHdpbGwgYmUgc3RvcmVkIG9uIGB0cmFuc2FjdGlvbi5vcmlnaW5gIGFuZCBgLm9uKCd1cGRhdGUnLCAodXBkYXRlLCBvcmlnaW4pKWBcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBbc3RydWN0RGVjb2Rlcl1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZFVwZGF0ZVYyID0gKGRlY29kZXIsIHlkb2MsIHRyYW5zYWN0aW9uT3JpZ2luLCBzdHJ1Y3REZWNvZGVyID0gbmV3IFVwZGF0ZURlY29kZXJWMihkZWNvZGVyKSkgPT5cbiAgdHJhbnNhY3QoeWRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgIC8vIGZvcmNlIHRoYXQgdHJhbnNhY3Rpb24ubG9jYWwgaXMgc2V0IHRvIG5vbi1sb2NhbFxuICAgIHRyYW5zYWN0aW9uLmxvY2FsID0gZmFsc2U7XG4gICAgbGV0IHJldHJ5ID0gZmFsc2U7XG4gICAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jO1xuICAgIGNvbnN0IHN0b3JlID0gZG9jLnN0b3JlO1xuICAgIC8vIGxldCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgY29uc3Qgc3MgPSByZWFkQ2xpZW50c1N0cnVjdFJlZnMoc3RydWN0RGVjb2RlciwgZG9jKTtcbiAgICAvLyBjb25zb2xlLmxvZygndGltZSB0byByZWFkIHN0cnVjdHM6ICcsIHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQpIC8vIEB0b2RvIHJlbW92ZVxuICAgIC8vIHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAvLyBjb25zb2xlLmxvZygndGltZSB0byBtZXJnZTogJywgcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydCkgLy8gQHRvZG8gcmVtb3ZlXG4gICAgLy8gc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgIGNvbnN0IHJlc3RTdHJ1Y3RzID0gaW50ZWdyYXRlU3RydWN0cyh0cmFuc2FjdGlvbiwgc3RvcmUsIHNzKTtcbiAgICBjb25zdCBwZW5kaW5nID0gc3RvcmUucGVuZGluZ1N0cnVjdHM7XG4gICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHdlIGNhbiBhcHBseSBzb21ldGhpbmdcbiAgICAgIGZvciAoY29uc3QgW2NsaWVudCwgY2xvY2tdIG9mIHBlbmRpbmcubWlzc2luZykge1xuICAgICAgICBpZiAoY2xvY2sgPCBnZXRTdGF0ZShzdG9yZSwgY2xpZW50KSkge1xuICAgICAgICAgIHJldHJ5ID0gdHJ1ZTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzdFN0cnVjdHMpIHtcbiAgICAgICAgLy8gbWVyZ2UgcmVzdFN0cnVjdHMgaW50byBzdG9yZS5wZW5kaW5nXG4gICAgICAgIGZvciAoY29uc3QgW2NsaWVudCwgY2xvY2tdIG9mIHJlc3RTdHJ1Y3RzLm1pc3NpbmcpIHtcbiAgICAgICAgICBjb25zdCBtY2xvY2sgPSBwZW5kaW5nLm1pc3NpbmcuZ2V0KGNsaWVudCk7XG4gICAgICAgICAgaWYgKG1jbG9jayA9PSBudWxsIHx8IG1jbG9jayA+IGNsb2NrKSB7XG4gICAgICAgICAgICBwZW5kaW5nLm1pc3Npbmcuc2V0KGNsaWVudCwgY2xvY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwZW5kaW5nLnVwZGF0ZSA9IG1lcmdlVXBkYXRlc1YyKFtwZW5kaW5nLnVwZGF0ZSwgcmVzdFN0cnVjdHMudXBkYXRlXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3JlLnBlbmRpbmdTdHJ1Y3RzID0gcmVzdFN0cnVjdHM7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKCd0aW1lIHRvIGludGVncmF0ZTogJywgcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydCkgLy8gQHRvZG8gcmVtb3ZlXG4gICAgLy8gc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgIGNvbnN0IGRzUmVzdCA9IHJlYWRBbmRBcHBseURlbGV0ZVNldChzdHJ1Y3REZWNvZGVyLCB0cmFuc2FjdGlvbiwgc3RvcmUpO1xuICAgIGlmIChzdG9yZS5wZW5kaW5nRHMpIHtcbiAgICAgIC8vIEB0b2RvIHdlIGNvdWxkIG1ha2UgYSBsb3dlci1ib3VuZCBzdGF0ZS12ZWN0b3IgY2hlY2sgYXMgd2UgZG8gYWJvdmVcbiAgICAgIGNvbnN0IHBlbmRpbmdEU1VwZGF0ZSA9IG5ldyBVcGRhdGVEZWNvZGVyVjIoZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihzdG9yZS5wZW5kaW5nRHMpKTtcbiAgICAgIGRlY29kaW5nLnJlYWRWYXJVaW50KHBlbmRpbmdEU1VwZGF0ZS5yZXN0RGVjb2Rlcik7IC8vIHJlYWQgMCBzdHJ1Y3RzLCBiZWNhdXNlIHdlIG9ubHkgZW5jb2RlIGRlbGV0ZXMgaW4gcGVuZGluZ2RzdXBkYXRlXG4gICAgICBjb25zdCBkc1Jlc3QyID0gcmVhZEFuZEFwcGx5RGVsZXRlU2V0KHBlbmRpbmdEU1VwZGF0ZSwgdHJhbnNhY3Rpb24sIHN0b3JlKTtcbiAgICAgIGlmIChkc1Jlc3QgJiYgZHNSZXN0Mikge1xuICAgICAgICAvLyBjYXNlIDE6IGRzMSAhPSBudWxsICYmIGRzMiAhPSBudWxsXG4gICAgICAgIHN0b3JlLnBlbmRpbmdEcyA9IG1lcmdlVXBkYXRlc1YyKFtkc1Jlc3QsIGRzUmVzdDJdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNhc2UgMjogZHMxICE9IG51bGxcbiAgICAgICAgLy8gY2FzZSAzOiBkczIgIT0gbnVsbFxuICAgICAgICAvLyBjYXNlIDQ6IGRzMSA9PSBudWxsICYmIGRzMiA9PSBudWxsXG4gICAgICAgIHN0b3JlLnBlbmRpbmdEcyA9IGRzUmVzdCB8fCBkc1Jlc3QyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFaXRoZXIgZHNSZXN0ID09IG51bGwgJiYgcGVuZGluZ0RzID09IG51bGwgT1IgZHNSZXN0ICE9IG51bGxcbiAgICAgIHN0b3JlLnBlbmRpbmdEcyA9IGRzUmVzdDtcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coJ3RpbWUgdG8gY2xlYW51cDogJywgcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydCkgLy8gQHRvZG8gcmVtb3ZlXG4gICAgLy8gc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuXG4gICAgLy8gY29uc29sZS5sb2coJ3RpbWUgdG8gcmVzdW1lIGRlbGV0ZSByZWFkZXJzOiAnLCBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSAvLyBAdG9kbyByZW1vdmVcbiAgICAvLyBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgaWYgKHJldHJ5KSB7XG4gICAgICBjb25zdCB1cGRhdGUgPSAvKiogQHR5cGUge3t1cGRhdGU6IFVpbnQ4QXJyYXl9fSAqLyAoc3RvcmUucGVuZGluZ1N0cnVjdHMpLnVwZGF0ZTtcbiAgICAgIHN0b3JlLnBlbmRpbmdTdHJ1Y3RzID0gbnVsbDtcbiAgICAgIGFwcGx5VXBkYXRlVjIodHJhbnNhY3Rpb24uZG9jLCB1cGRhdGUpO1xuICAgIH1cbiAgfSwgdHJhbnNhY3Rpb25PcmlnaW4sIGZhbHNlKTtcblxuLyoqXG4gKiBSZWFkIGFuZCBhcHBseSBhIGRvY3VtZW50IHVwZGF0ZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMgYGFwcGx5VXBkYXRlYCBidXQgYWNjZXB0cyBhbiBkZWNvZGVyLlxuICpcbiAqIEBwYXJhbSB7ZGVjb2RpbmcuRGVjb2Rlcn0gZGVjb2RlclxuICogQHBhcmFtIHtEb2N9IHlkb2NcbiAqIEBwYXJhbSB7YW55fSBbdHJhbnNhY3Rpb25PcmlnaW5dIFRoaXMgd2lsbCBiZSBzdG9yZWQgb24gYHRyYW5zYWN0aW9uLm9yaWdpbmAgYW5kIGAub24oJ3VwZGF0ZScsICh1cGRhdGUsIG9yaWdpbikpYFxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkVXBkYXRlID0gKGRlY29kZXIsIHlkb2MsIHRyYW5zYWN0aW9uT3JpZ2luKSA9PiByZWFkVXBkYXRlVjIoZGVjb2RlciwgeWRvYywgdHJhbnNhY3Rpb25PcmlnaW4sIG5ldyBVcGRhdGVEZWNvZGVyVjEoZGVjb2RlcikpO1xuXG4vKipcbiAqIEFwcGx5IGEgZG9jdW1lbnQgdXBkYXRlIGNyZWF0ZWQgYnksIGZvciBleGFtcGxlLCBgeS5vbigndXBkYXRlJywgdXBkYXRlID0+IC4uKWAgb3IgYHVwZGF0ZSA9IGVuY29kZVN0YXRlQXNVcGRhdGUoKWAuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIGByZWFkVXBkYXRlYCBidXQgYWNjZXB0cyBhbiBVaW50OEFycmF5IGluc3RlYWQgb2YgYSBEZWNvZGVyLlxuICpcbiAqIEBwYXJhbSB7RG9jfSB5ZG9jXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHBhcmFtIHthbnl9IFt0cmFuc2FjdGlvbk9yaWdpbl0gVGhpcyB3aWxsIGJlIHN0b3JlZCBvbiBgdHJhbnNhY3Rpb24ub3JpZ2luYCBhbmQgYC5vbigndXBkYXRlJywgKHVwZGF0ZSwgb3JpZ2luKSlgXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVEZWNvZGVyVjEgfCB0eXBlb2YgVXBkYXRlRGVjb2RlclYyfSBbWURlY29kZXJdXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGFwcGx5VXBkYXRlVjIgPSAoeWRvYywgdXBkYXRlLCB0cmFuc2FjdGlvbk9yaWdpbiwgWURlY29kZXIgPSBVcGRhdGVEZWNvZGVyVjIpID0+IHtcbiAgY29uc3QgZGVjb2RlciA9IGRlY29kaW5nLmNyZWF0ZURlY29kZXIodXBkYXRlKTtcbiAgcmVhZFVwZGF0ZVYyKGRlY29kZXIsIHlkb2MsIHRyYW5zYWN0aW9uT3JpZ2luLCBuZXcgWURlY29kZXIoZGVjb2RlcikpO1xufTtcblxuLyoqXG4gKiBBcHBseSBhIGRvY3VtZW50IHVwZGF0ZSBjcmVhdGVkIGJ5LCBmb3IgZXhhbXBsZSwgYHkub24oJ3VwZGF0ZScsIHVwZGF0ZSA9PiAuLilgIG9yIGB1cGRhdGUgPSBlbmNvZGVTdGF0ZUFzVXBkYXRlKClgLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaGFzIHRoZSBzYW1lIGVmZmVjdCBhcyBgcmVhZFVwZGF0ZWAgYnV0IGFjY2VwdHMgYW4gVWludDhBcnJheSBpbnN0ZWFkIG9mIGEgRGVjb2Rlci5cbiAqXG4gKiBAcGFyYW0ge0RvY30geWRvY1xuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7YW55fSBbdHJhbnNhY3Rpb25PcmlnaW5dIFRoaXMgd2lsbCBiZSBzdG9yZWQgb24gYHRyYW5zYWN0aW9uLm9yaWdpbmAgYW5kIGAub24oJ3VwZGF0ZScsICh1cGRhdGUsIG9yaWdpbikpYFxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBhcHBseVVwZGF0ZSA9ICh5ZG9jLCB1cGRhdGUsIHRyYW5zYWN0aW9uT3JpZ2luKSA9PiBhcHBseVVwZGF0ZVYyKHlkb2MsIHVwZGF0ZSwgdHJhbnNhY3Rpb25PcmlnaW4sIFVwZGF0ZURlY29kZXJWMSk7XG5cbi8qKlxuICogV3JpdGUgYWxsIHRoZSBkb2N1bWVudCBhcyBhIHNpbmdsZSB1cGRhdGUgbWVzc2FnZS4gSWYgeW91IHNwZWNpZnkgdGhlIHN0YXRlIG9mIHRoZSByZW1vdGUgY2xpZW50IChgdGFyZ2V0U3RhdGVWZWN0b3JgKSBpdCB3aWxsXG4gKiBvbmx5IHdyaXRlIHRoZSBvcGVyYXRpb25zIHRoYXQgYXJlIG1pc3NpbmcuXG4gKlxuICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqIEBwYXJhbSB7TWFwPG51bWJlcixudW1iZXI+fSBbdGFyZ2V0U3RhdGVWZWN0b3JdIFRoZSBzdGF0ZSBvZiB0aGUgdGFyZ2V0IHRoYXQgcmVjZWl2ZXMgdGhlIHVwZGF0ZS4gTGVhdmUgZW1wdHkgdG8gd3JpdGUgYWxsIGtub3duIHN0cnVjdHNcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3Qgd3JpdGVTdGF0ZUFzVXBkYXRlID0gKGVuY29kZXIsIGRvYywgdGFyZ2V0U3RhdGVWZWN0b3IgPSBuZXcgTWFwKCkpID0+IHtcbiAgd3JpdGVDbGllbnRzU3RydWN0cyhlbmNvZGVyLCBkb2Muc3RvcmUsIHRhcmdldFN0YXRlVmVjdG9yKTtcbiAgd3JpdGVEZWxldGVTZXQoZW5jb2RlciwgY3JlYXRlRGVsZXRlU2V0RnJvbVN0cnVjdFN0b3JlKGRvYy5zdG9yZSkpO1xufTtcblxuLyoqXG4gKiBXcml0ZSBhbGwgdGhlIGRvY3VtZW50IGFzIGEgc2luZ2xlIHVwZGF0ZSBtZXNzYWdlIHRoYXQgY2FuIGJlIGFwcGxpZWQgb24gdGhlIHJlbW90ZSBkb2N1bWVudC4gSWYgeW91IHNwZWNpZnkgdGhlIHN0YXRlIG9mIHRoZSByZW1vdGUgY2xpZW50IChgdGFyZ2V0U3RhdGVgKSBpdCB3aWxsXG4gKiBvbmx5IHdyaXRlIHRoZSBvcGVyYXRpb25zIHRoYXQgYXJlIG1pc3NpbmcuXG4gKlxuICogVXNlIGB3cml0ZVN0YXRlQXNVcGRhdGVgIGluc3RlYWQgaWYgeW91IGFyZSB3b3JraW5nIHdpdGggbGliMC9lbmNvZGluZy5qcyNFbmNvZGVyXG4gKlxuICogQHBhcmFtIHtEb2N9IGRvY1xuICogQHBhcmFtIHtVaW50OEFycmF5fSBbZW5jb2RlZFRhcmdldFN0YXRlVmVjdG9yXSBUaGUgc3RhdGUgb2YgdGhlIHRhcmdldCB0aGF0IHJlY2VpdmVzIHRoZSB1cGRhdGUuIExlYXZlIGVtcHR5IHRvIHdyaXRlIGFsbCBrbm93biBzdHJ1Y3RzXG4gKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gW2VuY29kZXJdXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBlbmNvZGVTdGF0ZUFzVXBkYXRlVjIgPSAoZG9jLCBlbmNvZGVkVGFyZ2V0U3RhdGVWZWN0b3IgPSBuZXcgVWludDhBcnJheShbMF0pLCBlbmNvZGVyID0gbmV3IFVwZGF0ZUVuY29kZXJWMigpKSA9PiB7XG4gIGNvbnN0IHRhcmdldFN0YXRlVmVjdG9yID0gZGVjb2RlU3RhdGVWZWN0b3IoZW5jb2RlZFRhcmdldFN0YXRlVmVjdG9yKTtcbiAgd3JpdGVTdGF0ZUFzVXBkYXRlKGVuY29kZXIsIGRvYywgdGFyZ2V0U3RhdGVWZWN0b3IpO1xuICBjb25zdCB1cGRhdGVzID0gW2VuY29kZXIudG9VaW50OEFycmF5KCldO1xuICAvLyBhbHNvIGFkZCB0aGUgcGVuZGluZyB1cGRhdGVzIChpZiB0aGVyZSBhcmUgYW55KVxuICBpZiAoZG9jLnN0b3JlLnBlbmRpbmdEcykge1xuICAgIHVwZGF0ZXMucHVzaChkb2Muc3RvcmUucGVuZGluZ0RzKTtcbiAgfVxuICBpZiAoZG9jLnN0b3JlLnBlbmRpbmdTdHJ1Y3RzKSB7XG4gICAgdXBkYXRlcy5wdXNoKGRpZmZVcGRhdGVWMihkb2Muc3RvcmUucGVuZGluZ1N0cnVjdHMudXBkYXRlLCBlbmNvZGVkVGFyZ2V0U3RhdGVWZWN0b3IpKTtcbiAgfVxuICBpZiAodXBkYXRlcy5sZW5ndGggPiAxKSB7XG4gICAgaWYgKGVuY29kZXIuY29uc3RydWN0b3IgPT09IFVwZGF0ZUVuY29kZXJWMSkge1xuICAgICAgcmV0dXJuIG1lcmdlVXBkYXRlcyh1cGRhdGVzLm1hcCgodXBkYXRlLCBpKSA9PiBpID09PSAwID8gdXBkYXRlIDogY29udmVydFVwZGF0ZUZvcm1hdFYyVG9WMSh1cGRhdGUpKSlcbiAgICB9IGVsc2UgaWYgKGVuY29kZXIuY29uc3RydWN0b3IgPT09IFVwZGF0ZUVuY29kZXJWMikge1xuICAgICAgcmV0dXJuIG1lcmdlVXBkYXRlc1YyKHVwZGF0ZXMpXG4gICAgfVxuICB9XG4gIHJldHVybiB1cGRhdGVzWzBdXG59O1xuXG4vKipcbiAqIFdyaXRlIGFsbCB0aGUgZG9jdW1lbnQgYXMgYSBzaW5nbGUgdXBkYXRlIG1lc3NhZ2UgdGhhdCBjYW4gYmUgYXBwbGllZCBvbiB0aGUgcmVtb3RlIGRvY3VtZW50LiBJZiB5b3Ugc3BlY2lmeSB0aGUgc3RhdGUgb2YgdGhlIHJlbW90ZSBjbGllbnQgKGB0YXJnZXRTdGF0ZWApIGl0IHdpbGxcbiAqIG9ubHkgd3JpdGUgdGhlIG9wZXJhdGlvbnMgdGhhdCBhcmUgbWlzc2luZy5cbiAqXG4gKiBVc2UgYHdyaXRlU3RhdGVBc1VwZGF0ZWAgaW5zdGVhZCBpZiB5b3UgYXJlIHdvcmtpbmcgd2l0aCBsaWIwL2VuY29kaW5nLmpzI0VuY29kZXJcbiAqXG4gKiBAcGFyYW0ge0RvY30gZG9jXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IFtlbmNvZGVkVGFyZ2V0U3RhdGVWZWN0b3JdIFRoZSBzdGF0ZSBvZiB0aGUgdGFyZ2V0IHRoYXQgcmVjZWl2ZXMgdGhlIHVwZGF0ZS4gTGVhdmUgZW1wdHkgdG8gd3JpdGUgYWxsIGtub3duIHN0cnVjdHNcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGVuY29kZVN0YXRlQXNVcGRhdGUgPSAoZG9jLCBlbmNvZGVkVGFyZ2V0U3RhdGVWZWN0b3IpID0+IGVuY29kZVN0YXRlQXNVcGRhdGVWMihkb2MsIGVuY29kZWRUYXJnZXRTdGF0ZVZlY3RvciwgbmV3IFVwZGF0ZUVuY29kZXJWMSgpKTtcblxuLyoqXG4gKiBSZWFkIHN0YXRlIHZlY3RvciBmcm9tIERlY29kZXIgYW5kIHJldHVybiBhcyBNYXBcbiAqXG4gKiBAcGFyYW0ge0RTRGVjb2RlclYxIHwgRFNEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge01hcDxudW1iZXIsbnVtYmVyPn0gTWFwcyBgY2xpZW50YCB0byB0aGUgbnVtYmVyIG5leHQgZXhwZWN0ZWQgYGNsb2NrYCBmcm9tIHRoYXQgY2xpZW50LlxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkU3RhdGVWZWN0b3IgPSBkZWNvZGVyID0+IHtcbiAgY29uc3Qgc3MgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IHNzTGVuZ3RoID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3NMZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNsaWVudCA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgIGNvbnN0IGNsb2NrID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgc3Muc2V0KGNsaWVudCwgY2xvY2spO1xuICB9XG4gIHJldHVybiBzc1xufTtcblxuLyoqXG4gKiBSZWFkIGRlY29kZWRTdGF0ZSBhbmQgcmV0dXJuIFN0YXRlIGFzIE1hcC5cbiAqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRlY29kZWRTdGF0ZVxuICogQHJldHVybiB7TWFwPG51bWJlcixudW1iZXI+fSBNYXBzIGBjbGllbnRgIHRvIHRoZSBudW1iZXIgbmV4dCBleHBlY3RlZCBgY2xvY2tgIGZyb20gdGhhdCBjbGllbnQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbi8vIGV4cG9ydCBjb25zdCBkZWNvZGVTdGF0ZVZlY3RvclYyID0gZGVjb2RlZFN0YXRlID0+IHJlYWRTdGF0ZVZlY3RvcihuZXcgRFNEZWNvZGVyVjIoZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihkZWNvZGVkU3RhdGUpKSlcblxuLyoqXG4gKiBSZWFkIGRlY29kZWRTdGF0ZSBhbmQgcmV0dXJuIFN0YXRlIGFzIE1hcC5cbiAqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGRlY29kZWRTdGF0ZVxuICogQHJldHVybiB7TWFwPG51bWJlcixudW1iZXI+fSBNYXBzIGBjbGllbnRgIHRvIHRoZSBudW1iZXIgbmV4dCBleHBlY3RlZCBgY2xvY2tgIGZyb20gdGhhdCBjbGllbnQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGRlY29kZVN0YXRlVmVjdG9yID0gZGVjb2RlZFN0YXRlID0+IHJlYWRTdGF0ZVZlY3RvcihuZXcgRFNEZWNvZGVyVjEoZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihkZWNvZGVkU3RhdGUpKSk7XG5cbi8qKlxuICogQHBhcmFtIHtEU0VuY29kZXJWMSB8IERTRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge01hcDxudW1iZXIsbnVtYmVyPn0gc3ZcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB3cml0ZVN0YXRlVmVjdG9yID0gKGVuY29kZXIsIHN2KSA9PiB7XG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBzdi5zaXplKTtcbiAgQXJyYXkuZnJvbShzdi5lbnRyaWVzKCkpLnNvcnQoKGEsIGIpID0+IGJbMF0gLSBhWzBdKS5mb3JFYWNoKChbY2xpZW50LCBjbG9ja10pID0+IHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgY2xpZW50KTsgLy8gQHRvZG8gdXNlIGEgc3BlY2lhbCBjbGllbnQgZGVjb2RlciB0aGF0IGlzIGJhc2VkIG9uIG1hcHBpbmdcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgY2xvY2spO1xuICB9KTtcbiAgcmV0dXJuIGVuY29kZXJcbn07XG5cbi8qKlxuICogQHBhcmFtIHtEU0VuY29kZXJWMSB8IERTRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge0RvY30gZG9jXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHdyaXRlRG9jdW1lbnRTdGF0ZVZlY3RvciA9IChlbmNvZGVyLCBkb2MpID0+IHdyaXRlU3RhdGVWZWN0b3IoZW5jb2RlciwgZ2V0U3RhdGVWZWN0b3IoZG9jLnN0b3JlKSk7XG5cbi8qKlxuICogRW5jb2RlIFN0YXRlIGFzIFVpbnQ4QXJyYXkuXG4gKlxuICogQHBhcmFtIHtEb2N8TWFwPG51bWJlcixudW1iZXI+fSBkb2NcbiAqIEBwYXJhbSB7RFNFbmNvZGVyVjEgfCBEU0VuY29kZXJWMn0gW2VuY29kZXJdXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBlbmNvZGVTdGF0ZVZlY3RvclYyID0gKGRvYywgZW5jb2RlciA9IG5ldyBEU0VuY29kZXJWMigpKSA9PiB7XG4gIGlmIChkb2MgaW5zdGFuY2VvZiBNYXApIHtcbiAgICB3cml0ZVN0YXRlVmVjdG9yKGVuY29kZXIsIGRvYyk7XG4gIH0gZWxzZSB7XG4gICAgd3JpdGVEb2N1bWVudFN0YXRlVmVjdG9yKGVuY29kZXIsIGRvYyk7XG4gIH1cbiAgcmV0dXJuIGVuY29kZXIudG9VaW50OEFycmF5KClcbn07XG5cbi8qKlxuICogRW5jb2RlIFN0YXRlIGFzIFVpbnQ4QXJyYXkuXG4gKlxuICogQHBhcmFtIHtEb2N8TWFwPG51bWJlcixudW1iZXI+fSBkb2NcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGVuY29kZVN0YXRlVmVjdG9yID0gZG9jID0+IGVuY29kZVN0YXRlVmVjdG9yVjIoZG9jLCBuZXcgRFNFbmNvZGVyVjEoKSk7XG5cbi8qKlxuICogR2VuZXJhbCBldmVudCBoYW5kbGVyIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEB0ZW1wbGF0ZSBBUkcwLCBBUkcxXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgRXZlbnRIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxmdW5jdGlvbihBUkcwLCBBUkcxKTp2b2lkPn1cbiAgICAgKi9cbiAgICB0aGlzLmwgPSBbXTtcbiAgfVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBBUkcwLEFSRzFcbiAqIEByZXR1cm5zIHtFdmVudEhhbmRsZXI8QVJHMCxBUkcxPn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNyZWF0ZUV2ZW50SGFuZGxlciA9ICgpID0+IG5ldyBFdmVudEhhbmRsZXIoKTtcblxuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaXMgY2FsbGVkIHdoZW5cbiAqIHtAbGluayBFdmVudEhhbmRsZXIjY2FsbEV2ZW50TGlzdGVuZXJzfSBpcyBjYWxsZWQuXG4gKlxuICogQHRlbXBsYXRlIEFSRzAsQVJHMVxuICogQHBhcmFtIHtFdmVudEhhbmRsZXI8QVJHMCxBUkcxPn0gZXZlbnRIYW5kbGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEFSRzAsQVJHMSk6dm9pZH0gZiBUaGUgZXZlbnQgaGFuZGxlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGFkZEV2ZW50SGFuZGxlckxpc3RlbmVyID0gKGV2ZW50SGFuZGxlciwgZikgPT5cbiAgZXZlbnRIYW5kbGVyLmwucHVzaChmKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEB0ZW1wbGF0ZSBBUkcwLEFSRzFcbiAqIEBwYXJhbSB7RXZlbnRIYW5kbGVyPEFSRzAsQVJHMT59IGV2ZW50SGFuZGxlclxuICogQHBhcmFtIHtmdW5jdGlvbihBUkcwLEFSRzEpOnZvaWR9IGYgVGhlIGV2ZW50IGhhbmRsZXIgdGhhdCB3YXMgYWRkZWQgd2l0aFxuICogICAgICAgICAgICAgICAgICAgICB7QGxpbmsgRXZlbnRIYW5kbGVyI2FkZEV2ZW50TGlzdGVuZXJ9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZW1vdmVFdmVudEhhbmRsZXJMaXN0ZW5lciA9IChldmVudEhhbmRsZXIsIGYpID0+IHtcbiAgY29uc3QgbCA9IGV2ZW50SGFuZGxlci5sO1xuICBjb25zdCBsZW4gPSBsLmxlbmd0aDtcbiAgZXZlbnRIYW5kbGVyLmwgPSBsLmZpbHRlcihnID0+IGYgIT09IGcpO1xuICBpZiAobGVuID09PSBldmVudEhhbmRsZXIubC5sZW5ndGgpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbeWpzXSBUcmllZCB0byByZW1vdmUgZXZlbnQgaGFuZGxlciB0aGF0IGRvZXNuXFwndCBleGlzdC4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsIGFsbCBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkIHZpYVxuICoge0BsaW5rIEV2ZW50SGFuZGxlciNhZGRFdmVudExpc3RlbmVyfS5cbiAqXG4gKiBAdGVtcGxhdGUgQVJHMCxBUkcxXG4gKiBAcGFyYW0ge0V2ZW50SGFuZGxlcjxBUkcwLEFSRzE+fSBldmVudEhhbmRsZXJcbiAqIEBwYXJhbSB7QVJHMH0gYXJnMFxuICogQHBhcmFtIHtBUkcxfSBhcmcxXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjYWxsRXZlbnRIYW5kbGVyTGlzdGVuZXJzID0gKGV2ZW50SGFuZGxlciwgYXJnMCwgYXJnMSkgPT5cbiAgZi5jYWxsQWxsKGV2ZW50SGFuZGxlci5sLCBbYXJnMCwgYXJnMV0pO1xuXG5jbGFzcyBJRCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xpZW50IGNsaWVudCBpZFxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xvY2sgdW5pcXVlIHBlciBjbGllbnQgaWQsIGNvbnRpbnVvdXMgbnVtYmVyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoY2xpZW50LCBjbG9jaykge1xuICAgIC8qKlxuICAgICAqIENsaWVudCBpZFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgLyoqXG4gICAgICogdW5pcXVlIHBlciBjbGllbnQgaWQsIGNvbnRpbnVvdXMgbnVtYmVyXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmNsb2NrID0gY2xvY2s7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0lEIHwgbnVsbH0gYVxuICogQHBhcmFtIHtJRCB8IG51bGx9IGJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNvbXBhcmVJRHMgPSAoYSwgYikgPT4gYSA9PT0gYiB8fCAoYSAhPT0gbnVsbCAmJiBiICE9PSBudWxsICYmIGEuY2xpZW50ID09PSBiLmNsaWVudCAmJiBhLmNsb2NrID09PSBiLmNsb2NrKTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gY2xpZW50XG4gKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNyZWF0ZUlEID0gKGNsaWVudCwgY2xvY2spID0+IG5ldyBJRChjbGllbnQsIGNsb2NrKTtcblxuLyoqXG4gKiBAcGFyYW0ge2VuY29kaW5nLkVuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7SUR9IGlkXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB3cml0ZUlEID0gKGVuY29kZXIsIGlkKSA9PiB7XG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLCBpZC5jbGllbnQpO1xuICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2RlciwgaWQuY2xvY2spO1xufTtcblxuLyoqXG4gKiBSZWFkIElELlxuICogKiBJZiBmaXJzdCB2YXJVaW50IHJlYWQgaXMgMHhGRkZGRkYgYSBSb290SUQgaXMgcmV0dXJuZWQuXG4gKiAqIE90aGVyd2lzZSBhbiBJRCBpcyByZXR1cm5lZFxuICpcbiAqIEBwYXJhbSB7ZGVjb2RpbmcuRGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7SUR9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkSUQgPSBkZWNvZGVyID0+XG4gIGNyZWF0ZUlEKGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIpLCBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyKSk7XG5cbi8qKlxuICogVGhlIHRvcCB0eXBlcyBhcmUgbWFwcGVkIGZyb20geS5zaGFyZS5nZXQoa2V5bmFtZSkgPT4gdHlwZS5cbiAqIGB0eXBlYCBkb2VzIG5vdCBzdG9yZSBhbnkgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGBrZXluYW1lYC5cbiAqIFRoaXMgZnVuY3Rpb24gZmluZHMgdGhlIGNvcnJlY3QgYGtleW5hbWVgIGZvciBgdHlwZWAgYW5kIHRocm93cyBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZmluZFJvb3RUeXBlS2V5ID0gdHlwZSA9PiB7XG4gIC8vIEB0cy1pZ25vcmUgX3kgbXVzdCBiZSBkZWZpbmVkLCBvdGhlcndpc2UgdW5leHBlY3RlZCBjYXNlXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHR5cGUuZG9jLnNoYXJlLmVudHJpZXMoKSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdHlwZSkge1xuICAgICAgcmV0dXJuIGtleVxuICAgIH1cbiAgfVxuICB0aHJvdyBlcnJvci51bmV4cGVjdGVkQ2FzZSgpXG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGBwYXJlbnRgIGlzIGEgcGFyZW50IG9mIGBjaGlsZGAuXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0l0ZW18bnVsbH0gY2hpbGRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFdoZXRoZXIgYHBhcmVudGAgaXMgYSBwYXJlbnQgb2YgYGNoaWxkYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGlzUGFyZW50T2YgPSAocGFyZW50LCBjaGlsZCkgPT4ge1xuICB3aGlsZSAoY2hpbGQgIT09IG51bGwpIHtcbiAgICBpZiAoY2hpbGQucGFyZW50ID09PSBwYXJlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGNoaWxkID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGNoaWxkLnBhcmVudCkuX2l0ZW07XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG4vKipcbiAqIENvbnZlbmllbnQgaGVscGVyIHRvIGxvZyB0eXBlIGluZm9ybWF0aW9uLlxuICpcbiAqIERvIG5vdCB1c2UgaW4gcHJvZHVjdGl2ZSBzeXN0ZW1zIGFzIHRoZSBvdXRwdXQgY2FuIGJlIGltbWVuc2UhXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICovXG5jb25zdCBsb2dUeXBlID0gdHlwZSA9PiB7XG4gIGNvbnN0IHJlcyA9IFtdO1xuICBsZXQgbiA9IHR5cGUuX3N0YXJ0O1xuICB3aGlsZSAobikge1xuICAgIHJlcy5wdXNoKG4pO1xuICAgIG4gPSBuLnJpZ2h0O1xuICB9XG4gIGNvbnNvbGUubG9nKCdDaGlsZHJlbjogJywgcmVzKTtcbiAgY29uc29sZS5sb2coJ0NoaWxkcmVuIGNvbnRlbnQ6ICcsIHJlcy5maWx0ZXIobSA9PiAhbS5kZWxldGVkKS5tYXAobSA9PiBtLmNvbnRlbnQpKTtcbn07XG5cbmNsYXNzIFBlcm1hbmVudFVzZXJEYXRhIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jfSBkb2NcbiAgICogQHBhcmFtIHtZTWFwPGFueT59IFtzdG9yZVR5cGVdXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZG9jLCBzdG9yZVR5cGUgPSBkb2MuZ2V0TWFwKCd1c2VycycpKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsRGVsZXRlU2V0Pn1cbiAgICAgKi9cbiAgICBjb25zdCBkc3MgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy55dXNlcnMgPSBzdG9yZVR5cGU7XG4gICAgdGhpcy5kb2MgPSBkb2M7XG4gICAgLyoqXG4gICAgICogTWFwcyBmcm9tIGNsaWVudGlkIHRvIHVzZXJEZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQHR5cGUge01hcDxudW1iZXIsc3RyaW5nPn1cbiAgICAgKi9cbiAgICB0aGlzLmNsaWVudHMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5kc3MgPSBkc3M7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtZTWFwPGFueT59IHVzZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlckRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgY29uc3QgaW5pdFVzZXIgPSAodXNlciwgdXNlckRlc2NyaXB0aW9uKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtZQXJyYXk8VWludDhBcnJheT59XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGRzID0gdXNlci5nZXQoJ2RzJyk7XG4gICAgICBjb25zdCBpZHMgPSB1c2VyLmdldCgnaWRzJyk7XG4gICAgICBjb25zdCBhZGRDbGllbnRJZCA9IC8qKiBAcGFyYW0ge251bWJlcn0gY2xpZW50aWQgKi8gY2xpZW50aWQgPT4gdGhpcy5jbGllbnRzLnNldChjbGllbnRpZCwgdXNlckRlc2NyaXB0aW9uKTtcbiAgICAgIGRzLm9ic2VydmUoLyoqIEBwYXJhbSB7WUFycmF5RXZlbnQ8YW55Pn0gZXZlbnQgKi8gZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5jaGFuZ2VzLmFkZGVkLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgaXRlbS5jb250ZW50LmdldENvbnRlbnQoKS5mb3JFYWNoKGVuY29kZWREcyA9PiB7XG4gICAgICAgICAgICBpZiAoZW5jb2RlZERzIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgICB0aGlzLmRzcy5zZXQodXNlckRlc2NyaXB0aW9uLCBtZXJnZURlbGV0ZVNldHMoW3RoaXMuZHNzLmdldCh1c2VyRGVzY3JpcHRpb24pIHx8IGNyZWF0ZURlbGV0ZVNldCgpLCByZWFkRGVsZXRlU2V0KG5ldyBEU0RlY29kZXJWMShkZWNvZGluZy5jcmVhdGVEZWNvZGVyKGVuY29kZWREcykpKV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZHNzLnNldCh1c2VyRGVzY3JpcHRpb24sIG1lcmdlRGVsZXRlU2V0cyhkcy5tYXAoZW5jb2RlZERzID0+IHJlYWREZWxldGVTZXQobmV3IERTRGVjb2RlclYxKGRlY29kaW5nLmNyZWF0ZURlY29kZXIoZW5jb2RlZERzKSkpKSkpO1xuICAgICAgaWRzLm9ic2VydmUoLyoqIEBwYXJhbSB7WUFycmF5RXZlbnQ8YW55Pn0gZXZlbnQgKi8gZXZlbnQgPT5cbiAgICAgICAgZXZlbnQuY2hhbmdlcy5hZGRlZC5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5jb250ZW50LmdldENvbnRlbnQoKS5mb3JFYWNoKGFkZENsaWVudElkKSlcbiAgICAgICk7XG4gICAgICBpZHMuZm9yRWFjaChhZGRDbGllbnRJZCk7XG4gICAgfTtcbiAgICAvLyBvYnNlcnZlIHVzZXJzXG4gICAgc3RvcmVUeXBlLm9ic2VydmUoZXZlbnQgPT4ge1xuICAgICAgZXZlbnQua2V5c0NoYW5nZWQuZm9yRWFjaCh1c2VyRGVzY3JpcHRpb24gPT5cbiAgICAgICAgaW5pdFVzZXIoc3RvcmVUeXBlLmdldCh1c2VyRGVzY3JpcHRpb24pLCB1c2VyRGVzY3JpcHRpb24pXG4gICAgICApO1xuICAgIH0pO1xuICAgIC8vIGFkZCBpbnRpYWwgZGF0YVxuICAgIHN0b3JlVHlwZS5mb3JFYWNoKGluaXRVc2VyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY30gZG9jXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRpZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlckRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZl1cbiAgICogQHBhcmFtIHtmdW5jdGlvbihUcmFuc2FjdGlvbiwgRGVsZXRlU2V0KTpib29sZWFufSBbY29uZi5maWx0ZXJdXG4gICAqL1xuICBzZXRVc2VyTWFwcGluZyAoZG9jLCBjbGllbnRpZCwgdXNlckRlc2NyaXB0aW9uLCB7IGZpbHRlciA9ICgpID0+IHRydWUgfSA9IHt9KSB7XG4gICAgY29uc3QgdXNlcnMgPSB0aGlzLnl1c2VycztcbiAgICBsZXQgdXNlciA9IHVzZXJzLmdldCh1c2VyRGVzY3JpcHRpb24pO1xuICAgIGlmICghdXNlcikge1xuICAgICAgdXNlciA9IG5ldyBZTWFwKCk7XG4gICAgICB1c2VyLnNldCgnaWRzJywgbmV3IFlBcnJheSgpKTtcbiAgICAgIHVzZXIuc2V0KCdkcycsIG5ldyBZQXJyYXkoKSk7XG4gICAgICB1c2Vycy5zZXQodXNlckRlc2NyaXB0aW9uLCB1c2VyKTtcbiAgICB9XG4gICAgdXNlci5nZXQoJ2lkcycpLnB1c2goW2NsaWVudGlkXSk7XG4gICAgdXNlcnMub2JzZXJ2ZShldmVudCA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29uc3QgdXNlck92ZXJ3cml0ZSA9IHVzZXJzLmdldCh1c2VyRGVzY3JpcHRpb24pO1xuICAgICAgICBpZiAodXNlck92ZXJ3cml0ZSAhPT0gdXNlcikge1xuICAgICAgICAgIC8vIHVzZXIgd2FzIG92ZXJ3cml0dGVuLCBwb3J0IGFsbCBkYXRhIG92ZXIgdG8gdGhlIG5leHQgdXNlciBvYmplY3RcbiAgICAgICAgICAvLyBAdG9kbyBFeHBlcmltZW50IHdpdGggWS5TZXRzIGhlcmVcbiAgICAgICAgICB1c2VyID0gdXNlck92ZXJ3cml0ZTtcbiAgICAgICAgICAvLyBAdG9kbyBpdGVyYXRlIG92ZXIgb2xkIHR5cGVcbiAgICAgICAgICB0aGlzLmNsaWVudHMuZm9yRWFjaCgoX3VzZXJEZXNjcmlwdGlvbiwgY2xpZW50aWQpID0+IHtcbiAgICAgICAgICAgIGlmICh1c2VyRGVzY3JpcHRpb24gPT09IF91c2VyRGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgdXNlci5nZXQoJ2lkcycpLnB1c2goW2NsaWVudGlkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBEU0VuY29kZXJWMSgpO1xuICAgICAgICAgIGNvbnN0IGRzID0gdGhpcy5kc3MuZ2V0KHVzZXJEZXNjcmlwdGlvbik7XG4gICAgICAgICAgaWYgKGRzKSB7XG4gICAgICAgICAgICB3cml0ZURlbGV0ZVNldChlbmNvZGVyLCBkcyk7XG4gICAgICAgICAgICB1c2VyLmdldCgnZHMnKS5wdXNoKFtlbmNvZGVyLnRvVWludDhBcnJheSgpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAwKTtcbiAgICB9KTtcbiAgICBkb2Mub24oJ2FmdGVyVHJhbnNhY3Rpb24nLCAvKiogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb24gKi8gdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHlkcyA9IHVzZXIuZ2V0KCdkcycpO1xuICAgICAgICBjb25zdCBkcyA9IHRyYW5zYWN0aW9uLmRlbGV0ZVNldDtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLmxvY2FsICYmIGRzLmNsaWVudHMuc2l6ZSA+IDAgJiYgZmlsdGVyKHRyYW5zYWN0aW9uLCBkcykpIHtcbiAgICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IERTRW5jb2RlclYxKCk7XG4gICAgICAgICAgd3JpdGVEZWxldGVTZXQoZW5jb2RlciwgZHMpO1xuICAgICAgICAgIHlkcy5wdXNoKFtlbmNvZGVyLnRvVWludDhBcnJheSgpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRpZFxuICAgKiBAcmV0dXJuIHthbnl9XG4gICAqL1xuICBnZXRVc2VyQnlDbGllbnRJZCAoY2xpZW50aWQpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnRzLmdldChjbGllbnRpZCkgfHwgbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SUR9IGlkXG4gICAqIEByZXR1cm4ge3N0cmluZyB8IG51bGx9XG4gICAqL1xuICBnZXRVc2VyQnlEZWxldGVkSWQgKGlkKSB7XG4gICAgZm9yIChjb25zdCBbdXNlckRlc2NyaXB0aW9uLCBkc10gb2YgdGhpcy5kc3MuZW50cmllcygpKSB7XG4gICAgICBpZiAoaXNEZWxldGVkKGRzLCBpZCkpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJEZXNjcmlwdGlvblxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbi8qKlxuICogQSByZWxhdGl2ZSBwb3NpdGlvbiBpcyBiYXNlZCBvbiB0aGUgWWpzIG1vZGVsIGFuZCBpcyBub3QgYWZmZWN0ZWQgYnkgZG9jdW1lbnQgY2hhbmdlcy5cbiAqIEUuZy4gSWYgeW91IHBsYWNlIGEgcmVsYXRpdmUgcG9zaXRpb24gYmVmb3JlIGEgY2VydGFpbiBjaGFyYWN0ZXIsIGl0IHdpbGwgYWx3YXlzIHBvaW50IHRvIHRoaXMgY2hhcmFjdGVyLlxuICogSWYgeW91IHBsYWNlIGEgcmVsYXRpdmUgcG9zaXRpb24gYXQgdGhlIGVuZCBvZiBhIHR5cGUsIGl0IHdpbGwgYWx3YXlzIHBvaW50IHRvIHRoZSBlbmQgb2YgdGhlIHR5cGUuXG4gKlxuICogQSBudW1lcmljIHBvc2l0aW9uIGlzIG9mdGVuIHVuc3VpdGVkIGZvciB1c2VyIHNlbGVjdGlvbnMsIGJlY2F1c2UgaXQgZG9lcyBub3QgY2hhbmdlIHdoZW4gY29udGVudCBpcyBpbnNlcnRlZFxuICogYmVmb3JlIG9yIGFmdGVyLlxuICpcbiAqIGBgYEluc2VydCgwLCAneCcpKCdhfGJjJykgPSAneGF8YmMnYGBgIFdoZXJlIHwgaXMgdGhlIHJlbGF0aXZlIHBvc2l0aW9uLlxuICpcbiAqIE9uZSBvZiB0aGUgcHJvcGVydGllcyBtdXN0IGJlIGRlZmluZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgLy8gQ3VycmVudCBjdXJzb3IgcG9zaXRpb24gaXMgYXQgcG9zaXRpb24gMTBcbiAqICAgY29uc3QgcmVsYXRpdmVQb3NpdGlvbiA9IGNyZWF0ZVJlbGF0aXZlUG9zaXRpb25Gcm9tSW5kZXgoeVRleHQsIDEwKVxuICogICAvLyBtb2RpZnkgeVRleHRcbiAqICAgeVRleHQuaW5zZXJ0KDAsICdhYmMnKVxuICogICB5VGV4dC5kZWxldGUoMywgMTApXG4gKiAgIC8vIENvbXB1dGUgdGhlIGN1cnNvciBwb3NpdGlvblxuICogICBjb25zdCBhYnNvbHV0ZVBvc2l0aW9uID0gY3JlYXRlQWJzb2x1dGVQb3NpdGlvbkZyb21SZWxhdGl2ZVBvc2l0aW9uKHksIHJlbGF0aXZlUG9zaXRpb24pXG4gKiAgIGFic29sdXRlUG9zaXRpb24udHlwZSA9PT0geVRleHQgLy8gPT4gdHJ1ZVxuICogICBjb25zb2xlLmxvZygnY3Vyc29yIGxvY2F0aW9uIGlzICcgKyBhYnNvbHV0ZVBvc2l0aW9uLmluZGV4KSAvLyA9PiBjdXJzb3IgbG9jYXRpb24gaXMgM1xuICpcbiAqL1xuY2xhc3MgUmVsYXRpdmVQb3NpdGlvbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0lEfG51bGx9IHR5cGVcbiAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gdG5hbWVcbiAgICogQHBhcmFtIHtJRHxudWxsfSBpdGVtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhc3NvY1xuICAgKi9cbiAgY29uc3RydWN0b3IgKHR5cGUsIHRuYW1lLCBpdGVtLCBhc3NvYyA9IDApIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SUR8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnRuYW1lID0gdG5hbWU7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0lEIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLml0ZW0gPSBpdGVtO1xuICAgIC8qKlxuICAgICAqIEEgcmVsYXRpdmUgcG9zaXRpb24gaXMgYXNzb2NpYXRlZCB0byBhIHNwZWNpZmljIGNoYXJhY3Rlci4gQnkgZGVmYXVsdFxuICAgICAqIGFzc29jID49IDAsIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiBpcyBhc3NvY2lhdGVkIHRvIHRoZSBjaGFyYWN0ZXJcbiAgICAgKiBhZnRlciB0aGUgbWVhbnQgcG9zaXRpb24uXG4gICAgICogSS5lLiBwb3NpdGlvbiAxIGluICdhYicgaXMgYXNzb2NpYXRlZCB0byBjaGFyYWN0ZXIgJ2InLlxuICAgICAqXG4gICAgICogSWYgYXNzb2MgPCAwLCB0aGVuIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiBpcyBhc3NvY2lhdGVkIHRvIHRoZSBjYWhhcmFjdGVyXG4gICAgICogYmVmb3JlIHRoZSBtZWFudCBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5hc3NvYyA9IGFzc29jO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWxhdGl2ZVBvc2l0aW9ufSBycG9zXG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmNvbnN0IHJlbGF0aXZlUG9zaXRpb25Ub0pTT04gPSBycG9zID0+IHtcbiAgY29uc3QganNvbiA9IHt9O1xuICBpZiAocnBvcy50eXBlKSB7XG4gICAganNvbi50eXBlID0gcnBvcy50eXBlO1xuICB9XG4gIGlmIChycG9zLnRuYW1lKSB7XG4gICAganNvbi50bmFtZSA9IHJwb3MudG5hbWU7XG4gIH1cbiAgaWYgKHJwb3MuaXRlbSkge1xuICAgIGpzb24uaXRlbSA9IHJwb3MuaXRlbTtcbiAgfVxuICBpZiAocnBvcy5hc3NvYyAhPSBudWxsKSB7XG4gICAganNvbi5hc3NvYyA9IHJwb3MuYXNzb2M7XG4gIH1cbiAgcmV0dXJuIGpzb25cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IGpzb25cbiAqIEByZXR1cm4ge1JlbGF0aXZlUG9zaXRpb259XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNyZWF0ZVJlbGF0aXZlUG9zaXRpb25Gcm9tSlNPTiA9IGpzb24gPT4gbmV3IFJlbGF0aXZlUG9zaXRpb24oanNvbi50eXBlID09IG51bGwgPyBudWxsIDogY3JlYXRlSUQoanNvbi50eXBlLmNsaWVudCwganNvbi50eXBlLmNsb2NrKSwganNvbi50bmFtZSB8fCBudWxsLCBqc29uLml0ZW0gPT0gbnVsbCA/IG51bGwgOiBjcmVhdGVJRChqc29uLml0ZW0uY2xpZW50LCBqc29uLml0ZW0uY2xvY2spLCBqc29uLmFzc29jID09IG51bGwgPyAwIDoganNvbi5hc3NvYyk7XG5cbmNsYXNzIEFic29sdXRlUG9zaXRpb24ge1xuICAvKipcbiAgICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHBhcmFtIHtudW1iZXJ9IFthc3NvY11cbiAgICovXG4gIGNvbnN0cnVjdG9yICh0eXBlLCBpbmRleCwgYXNzb2MgPSAwKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgdGhpcy5hc3NvYyA9IGFzc29jO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gW2Fzc29jXVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjcmVhdGVBYnNvbHV0ZVBvc2l0aW9uID0gKHR5cGUsIGluZGV4LCBhc3NvYyA9IDApID0+IG5ldyBBYnNvbHV0ZVBvc2l0aW9uKHR5cGUsIGluZGV4LCBhc3NvYyk7XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHBhcmFtIHtJRHxudWxsfSBpdGVtXG4gKiBAcGFyYW0ge251bWJlcn0gW2Fzc29jXVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uID0gKHR5cGUsIGl0ZW0sIGFzc29jKSA9PiB7XG4gIGxldCB0eXBlaWQgPSBudWxsO1xuICBsZXQgdG5hbWUgPSBudWxsO1xuICBpZiAodHlwZS5faXRlbSA9PT0gbnVsbCkge1xuICAgIHRuYW1lID0gZmluZFJvb3RUeXBlS2V5KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHR5cGVpZCA9IGNyZWF0ZUlEKHR5cGUuX2l0ZW0uaWQuY2xpZW50LCB0eXBlLl9pdGVtLmlkLmNsb2NrKTtcbiAgfVxuICByZXR1cm4gbmV3IFJlbGF0aXZlUG9zaXRpb24odHlwZWlkLCB0bmFtZSwgaXRlbSwgYXNzb2MpXG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIHJlbGF0aXZlUG9zaXRpb24gYmFzZWQgb24gYSBhYnNvbHV0ZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlIFRoZSBiYXNlIHR5cGUgKGUuZy4gWVRleHQgb3IgWUFycmF5KS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgYWJzb2x1dGUgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2Fzc29jXVxuICogQHJldHVybiB7UmVsYXRpdmVQb3NpdGlvbn1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY3JlYXRlUmVsYXRpdmVQb3NpdGlvbkZyb21UeXBlSW5kZXggPSAodHlwZSwgaW5kZXgsIGFzc29jID0gMCkgPT4ge1xuICBsZXQgdCA9IHR5cGUuX3N0YXJ0O1xuICBpZiAoYXNzb2MgPCAwKSB7XG4gICAgLy8gYXNzb2NpYXRlZCB0byB0aGUgbGVmdCBjaGFyYWN0ZXIgb3IgdGhlIGJlZ2lubmluZyBvZiBhIHR5cGUsIGluY3JlbWVudCBpbmRleCBpZiBwb3NzaWJsZS5cbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIHJldHVybiBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uKHR5cGUsIG51bGwsIGFzc29jKVxuICAgIH1cbiAgICBpbmRleC0tO1xuICB9XG4gIHdoaWxlICh0ICE9PSBudWxsKSB7XG4gICAgaWYgKCF0LmRlbGV0ZWQgJiYgdC5jb3VudGFibGUpIHtcbiAgICAgIGlmICh0Lmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICAgIC8vIGNhc2UgMTogZm91bmQgcG9zaXRpb24gc29tZXdoZXJlIGluIHRoZSBsaW5rZWQgbGlzdFxuICAgICAgICByZXR1cm4gY3JlYXRlUmVsYXRpdmVQb3NpdGlvbih0eXBlLCBjcmVhdGVJRCh0LmlkLmNsaWVudCwgdC5pZC5jbG9jayArIGluZGV4KSwgYXNzb2MpXG4gICAgICB9XG4gICAgICBpbmRleCAtPSB0Lmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKHQucmlnaHQgPT09IG51bGwgJiYgYXNzb2MgPCAwKSB7XG4gICAgICAvLyBsZWZ0LWFzc29jaWF0ZWQgcG9zaXRpb24sIHJldHVybiBsYXN0IGF2YWlsYWJsZSBpZFxuICAgICAgcmV0dXJuIGNyZWF0ZVJlbGF0aXZlUG9zaXRpb24odHlwZSwgdC5sYXN0SWQsIGFzc29jKVxuICAgIH1cbiAgICB0ID0gdC5yaWdodDtcbiAgfVxuICByZXR1cm4gY3JlYXRlUmVsYXRpdmVQb3NpdGlvbih0eXBlLCBudWxsLCBhc3NvYylcbn07XG5cbi8qKlxuICogQHBhcmFtIHtlbmNvZGluZy5FbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge1JlbGF0aXZlUG9zaXRpb259IHJwb3NcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3Qgd3JpdGVSZWxhdGl2ZVBvc2l0aW9uID0gKGVuY29kZXIsIHJwb3MpID0+IHtcbiAgY29uc3QgeyB0eXBlLCB0bmFtZSwgaXRlbSwgYXNzb2MgfSA9IHJwb3M7XG4gIGlmIChpdGVtICE9PSBudWxsKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIsIDApO1xuICAgIHdyaXRlSUQoZW5jb2RlciwgaXRlbSk7XG4gIH0gZWxzZSBpZiAodG5hbWUgIT09IG51bGwpIHtcbiAgICAvLyBjYXNlIDI6IGZvdW5kIHBvc2l0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QgYW5kIHR5cGUgaXMgc3RvcmVkIGluIHkuc2hhcmVcbiAgICBlbmNvZGluZy53cml0ZVVpbnQ4KGVuY29kZXIsIDEpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyU3RyaW5nKGVuY29kZXIsIHRuYW1lKTtcbiAgfSBlbHNlIGlmICh0eXBlICE9PSBudWxsKSB7XG4gICAgLy8gY2FzZSAzOiBmb3VuZCBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0IGFuZCB0eXBlIGlzIGF0dGFjaGVkIHRvIGFuIGl0ZW1cbiAgICBlbmNvZGluZy53cml0ZVVpbnQ4KGVuY29kZXIsIDIpO1xuICAgIHdyaXRlSUQoZW5jb2RlciwgdHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICB9XG4gIGVuY29kaW5nLndyaXRlVmFySW50KGVuY29kZXIsIGFzc29jKTtcbiAgcmV0dXJuIGVuY29kZXJcbn07XG5cbi8qKlxuICogQHBhcmFtIHtSZWxhdGl2ZVBvc2l0aW9ufSBycG9zXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5jb25zdCBlbmNvZGVSZWxhdGl2ZVBvc2l0aW9uID0gcnBvcyA9PiB7XG4gIGNvbnN0IGVuY29kZXIgPSBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKCk7XG4gIHdyaXRlUmVsYXRpdmVQb3NpdGlvbihlbmNvZGVyLCBycG9zKTtcbiAgcmV0dXJuIGVuY29kaW5nLnRvVWludDhBcnJheShlbmNvZGVyKVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2RlY29kaW5nLkRlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1JlbGF0aXZlUG9zaXRpb259XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRSZWxhdGl2ZVBvc2l0aW9uID0gZGVjb2RlciA9PiB7XG4gIGxldCB0eXBlID0gbnVsbDtcbiAgbGV0IHRuYW1lID0gbnVsbDtcbiAgbGV0IGl0ZW1JRCA9IG51bGw7XG4gIHN3aXRjaCAoZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2RlcikpIHtcbiAgICBjYXNlIDA6XG4gICAgICAvLyBjYXNlIDE6IGZvdW5kIHBvc2l0aW9uIHNvbWV3aGVyZSBpbiB0aGUgbGlua2VkIGxpc3RcbiAgICAgIGl0ZW1JRCA9IHJlYWRJRChkZWNvZGVyKTtcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAxOlxuICAgICAgLy8gY2FzZSAyOiBmb3VuZCBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0IGFuZCB0eXBlIGlzIHN0b3JlZCBpbiB5LnNoYXJlXG4gICAgICB0bmFtZSA9IGRlY29kaW5nLnJlYWRWYXJTdHJpbmcoZGVjb2Rlcik7XG4gICAgICBicmVha1xuICAgIGNhc2UgMjoge1xuICAgICAgLy8gY2FzZSAzOiBmb3VuZCBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0IGFuZCB0eXBlIGlzIGF0dGFjaGVkIHRvIGFuIGl0ZW1cbiAgICAgIHR5cGUgPSByZWFkSUQoZGVjb2Rlcik7XG4gICAgfVxuICB9XG4gIGNvbnN0IGFzc29jID0gZGVjb2RpbmcuaGFzQ29udGVudChkZWNvZGVyKSA/IGRlY29kaW5nLnJlYWRWYXJJbnQoZGVjb2RlcikgOiAwO1xuICByZXR1cm4gbmV3IFJlbGF0aXZlUG9zaXRpb24odHlwZSwgdG5hbWUsIGl0ZW1JRCwgYXNzb2MpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICogQHJldHVybiB7UmVsYXRpdmVQb3NpdGlvbn1cbiAqL1xuY29uc3QgZGVjb2RlUmVsYXRpdmVQb3NpdGlvbiA9IHVpbnQ4QXJyYXkgPT4gcmVhZFJlbGF0aXZlUG9zaXRpb24oZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1aW50OEFycmF5KSk7XG5cbi8qKlxuICogQHBhcmFtIHtSZWxhdGl2ZVBvc2l0aW9ufSBycG9zXG4gKiBAcGFyYW0ge0RvY30gZG9jXG4gKiBAcmV0dXJuIHtBYnNvbHV0ZVBvc2l0aW9ufG51bGx9XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNyZWF0ZUFic29sdXRlUG9zaXRpb25Gcm9tUmVsYXRpdmVQb3NpdGlvbiA9IChycG9zLCBkb2MpID0+IHtcbiAgY29uc3Qgc3RvcmUgPSBkb2Muc3RvcmU7XG4gIGNvbnN0IHJpZ2h0SUQgPSBycG9zLml0ZW07XG4gIGNvbnN0IHR5cGVJRCA9IHJwb3MudHlwZTtcbiAgY29uc3QgdG5hbWUgPSBycG9zLnRuYW1lO1xuICBjb25zdCBhc3NvYyA9IHJwb3MuYXNzb2M7XG4gIGxldCB0eXBlID0gbnVsbDtcbiAgbGV0IGluZGV4ID0gMDtcbiAgaWYgKHJpZ2h0SUQgIT09IG51bGwpIHtcbiAgICBpZiAoZ2V0U3RhdGUoc3RvcmUsIHJpZ2h0SUQuY2xpZW50KSA8PSByaWdodElELmNsb2NrKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBjb25zdCByZXMgPSBmb2xsb3dSZWRvbmUoc3RvcmUsIHJpZ2h0SUQpO1xuICAgIGNvbnN0IHJpZ2h0ID0gcmVzLml0ZW07XG4gICAgaWYgKCEocmlnaHQgaW5zdGFuY2VvZiBJdGVtKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgdHlwZSA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChyaWdodC5wYXJlbnQpO1xuICAgIGlmICh0eXBlLl9pdGVtID09PSBudWxsIHx8ICF0eXBlLl9pdGVtLmRlbGV0ZWQpIHtcbiAgICAgIGluZGV4ID0gKHJpZ2h0LmRlbGV0ZWQgfHwgIXJpZ2h0LmNvdW50YWJsZSkgPyAwIDogKHJlcy5kaWZmICsgKGFzc29jID49IDAgPyAwIDogMSkpOyAvLyBhZGp1c3QgcG9zaXRpb24gYmFzZWQgb24gbGVmdCBhc3NvY2lhdGlvbiBpZiBuZWNlc3NhcnlcbiAgICAgIGxldCBuID0gcmlnaHQubGVmdDtcbiAgICAgIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgICAgIGlmICghbi5kZWxldGVkICYmIG4uY291bnRhYmxlKSB7XG4gICAgICAgICAgaW5kZXggKz0gbi5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG4ubGVmdDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRuYW1lICE9PSBudWxsKSB7XG4gICAgICB0eXBlID0gZG9jLmdldCh0bmFtZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlSUQgIT09IG51bGwpIHtcbiAgICAgIGlmIChnZXRTdGF0ZShzdG9yZSwgdHlwZUlELmNsaWVudCkgPD0gdHlwZUlELmNsb2NrKSB7XG4gICAgICAgIC8vIHR5cGUgZG9lcyBub3QgZXhpc3QgeWV0XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgICBjb25zdCB7IGl0ZW0gfSA9IGZvbGxvd1JlZG9uZShzdG9yZSwgdHlwZUlEKTtcbiAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgSXRlbSAmJiBpdGVtLmNvbnRlbnQgaW5zdGFuY2VvZiBDb250ZW50VHlwZSkge1xuICAgICAgICB0eXBlID0gaXRlbS5jb250ZW50LnR5cGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzdHJ1Y3QgaXMgZ2FyYmFnZSBjb2xsZWN0ZWRcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICAgIH1cbiAgICBpZiAoYXNzb2MgPj0gMCkge1xuICAgICAgaW5kZXggPSB0eXBlLl9sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4ID0gMDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUFic29sdXRlUG9zaXRpb24odHlwZSwgaW5kZXgsIHJwb3MuYXNzb2MpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UmVsYXRpdmVQb3NpdGlvbnxudWxsfSBhXG4gKiBAcGFyYW0ge1JlbGF0aXZlUG9zaXRpb258bnVsbH0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY29tcGFyZVJlbGF0aXZlUG9zaXRpb25zID0gKGEsIGIpID0+IGEgPT09IGIgfHwgKFxuICBhICE9PSBudWxsICYmIGIgIT09IG51bGwgJiYgYS50bmFtZSA9PT0gYi50bmFtZSAmJiBjb21wYXJlSURzKGEuaXRlbSwgYi5pdGVtKSAmJiBjb21wYXJlSURzKGEudHlwZSwgYi50eXBlKSAmJiBhLmFzc29jID09PSBiLmFzc29jXG4pO1xuXG5jbGFzcyBTbmFwc2hvdCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAgICogQHBhcmFtIHtNYXA8bnVtYmVyLG51bWJlcj59IHN2IHN0YXRlIG1hcFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRzLCBzdikge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtEZWxldGVTZXR9XG4gICAgICovXG4gICAgdGhpcy5kcyA9IGRzO1xuICAgIC8qKlxuICAgICAqIFN0YXRlIE1hcFxuICAgICAqIEB0eXBlIHtNYXA8bnVtYmVyLG51bWJlcj59XG4gICAgICovXG4gICAgdGhpcy5zdiA9IHN2O1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtTbmFwc2hvdH0gc25hcDFcbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXAyXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5jb25zdCBlcXVhbFNuYXBzaG90cyA9IChzbmFwMSwgc25hcDIpID0+IHtcbiAgY29uc3QgZHMxID0gc25hcDEuZHMuY2xpZW50cztcbiAgY29uc3QgZHMyID0gc25hcDIuZHMuY2xpZW50cztcbiAgY29uc3Qgc3YxID0gc25hcDEuc3Y7XG4gIGNvbnN0IHN2MiA9IHNuYXAyLnN2O1xuICBpZiAoc3YxLnNpemUgIT09IHN2Mi5zaXplIHx8IGRzMS5zaXplICE9PSBkczIuc2l6ZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHN2MS5lbnRyaWVzKCkpIHtcbiAgICBpZiAoc3YyLmdldChrZXkpICE9PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIGZvciAoY29uc3QgW2NsaWVudCwgZHNpdGVtczFdIG9mIGRzMS5lbnRyaWVzKCkpIHtcbiAgICBjb25zdCBkc2l0ZW1zMiA9IGRzMi5nZXQoY2xpZW50KSB8fCBbXTtcbiAgICBpZiAoZHNpdGVtczEubGVuZ3RoICE9PSBkc2l0ZW1zMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRzaXRlbXMxLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkc2l0ZW0xID0gZHNpdGVtczFbaV07XG4gICAgICBjb25zdCBkc2l0ZW0yID0gZHNpdGVtczJbaV07XG4gICAgICBpZiAoZHNpdGVtMS5jbG9jayAhPT0gZHNpdGVtMi5jbG9jayB8fCBkc2l0ZW0xLmxlbiAhPT0gZHNpdGVtMi5sZW4pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXBzaG90XG4gKiBAcGFyYW0ge0RTRW5jb2RlclYxIHwgRFNFbmNvZGVyVjJ9IFtlbmNvZGVyXVxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgZW5jb2RlU25hcHNob3RWMiA9IChzbmFwc2hvdCwgZW5jb2RlciA9IG5ldyBEU0VuY29kZXJWMigpKSA9PiB7XG4gIHdyaXRlRGVsZXRlU2V0KGVuY29kZXIsIHNuYXBzaG90LmRzKTtcbiAgd3JpdGVTdGF0ZVZlY3RvcihlbmNvZGVyLCBzbmFwc2hvdC5zdik7XG4gIHJldHVybiBlbmNvZGVyLnRvVWludDhBcnJheSgpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXBzaG90XG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5jb25zdCBlbmNvZGVTbmFwc2hvdCA9IHNuYXBzaG90ID0+IGVuY29kZVNuYXBzaG90VjIoc25hcHNob3QsIG5ldyBEU0VuY29kZXJWMSgpKTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZlxuICogQHBhcmFtIHtEU0RlY29kZXJWMSB8IERTRGVjb2RlclYyfSBbZGVjb2Rlcl1cbiAqIEByZXR1cm4ge1NuYXBzaG90fVxuICovXG5jb25zdCBkZWNvZGVTbmFwc2hvdFYyID0gKGJ1ZiwgZGVjb2RlciA9IG5ldyBEU0RlY29kZXJWMihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKGJ1ZikpKSA9PiB7XG4gIHJldHVybiBuZXcgU25hcHNob3QocmVhZERlbGV0ZVNldChkZWNvZGVyKSwgcmVhZFN0YXRlVmVjdG9yKGRlY29kZXIpKVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZlxuICogQHJldHVybiB7U25hcHNob3R9XG4gKi9cbmNvbnN0IGRlY29kZVNuYXBzaG90ID0gYnVmID0+IGRlY29kZVNuYXBzaG90VjIoYnVmLCBuZXcgRFNEZWNvZGVyVjEoZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihidWYpKSk7XG5cbi8qKlxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKiBAcGFyYW0ge01hcDxudW1iZXIsbnVtYmVyPn0gc21cbiAqIEByZXR1cm4ge1NuYXBzaG90fVxuICovXG5jb25zdCBjcmVhdGVTbmFwc2hvdCA9IChkcywgc20pID0+IG5ldyBTbmFwc2hvdChkcywgc20pO1xuXG5jb25zdCBlbXB0eVNuYXBzaG90ID0gY3JlYXRlU25hcHNob3QoY3JlYXRlRGVsZXRlU2V0KCksIG5ldyBNYXAoKSk7XG5cbi8qKlxuICogQHBhcmFtIHtEb2N9IGRvY1xuICogQHJldHVybiB7U25hcHNob3R9XG4gKi9cbmNvbnN0IHNuYXBzaG90ID0gZG9jID0+IGNyZWF0ZVNuYXBzaG90KGNyZWF0ZURlbGV0ZVNldEZyb21TdHJ1Y3RTdG9yZShkb2Muc3RvcmUpLCBnZXRTdGF0ZVZlY3Rvcihkb2Muc3RvcmUpKTtcblxuLyoqXG4gKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAqIEBwYXJhbSB7U25hcHNob3R8dW5kZWZpbmVkfSBzbmFwc2hvdFxuICpcbiAqIEBwcm90ZWN0ZWRcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBpc1Zpc2libGUgPSAoaXRlbSwgc25hcHNob3QpID0+IHNuYXBzaG90ID09PSB1bmRlZmluZWRcbiAgPyAhaXRlbS5kZWxldGVkXG4gIDogc25hcHNob3Quc3YuaGFzKGl0ZW0uaWQuY2xpZW50KSAmJiAoc25hcHNob3Quc3YuZ2V0KGl0ZW0uaWQuY2xpZW50KSB8fCAwKSA+IGl0ZW0uaWQuY2xvY2sgJiYgIWlzRGVsZXRlZChzbmFwc2hvdC5kcywgaXRlbS5pZCk7XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXBzaG90XG4gKi9cbmNvbnN0IHNwbGl0U25hcHNob3RBZmZlY3RlZFN0cnVjdHMgPSAodHJhbnNhY3Rpb24sIHNuYXBzaG90KSA9PiB7XG4gIGNvbnN0IG1ldGEgPSBtYXAuc2V0SWZVbmRlZmluZWQodHJhbnNhY3Rpb24ubWV0YSwgc3BsaXRTbmFwc2hvdEFmZmVjdGVkU3RydWN0cywgc2V0LmNyZWF0ZSk7XG4gIGNvbnN0IHN0b3JlID0gdHJhbnNhY3Rpb24uZG9jLnN0b3JlO1xuICAvLyBjaGVjayBpZiB3ZSBhbHJlYWR5IHNwbGl0IGZvciB0aGlzIHNuYXBzaG90XG4gIGlmICghbWV0YS5oYXMoc25hcHNob3QpKSB7XG4gICAgc25hcHNob3Quc3YuZm9yRWFjaCgoY2xvY2ssIGNsaWVudCkgPT4ge1xuICAgICAgaWYgKGNsb2NrIDwgZ2V0U3RhdGUoc3RvcmUsIGNsaWVudCkpIHtcbiAgICAgICAgZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpdGVyYXRlRGVsZXRlZFN0cnVjdHModHJhbnNhY3Rpb24sIHNuYXBzaG90LmRzLCBpdGVtID0+IHt9KTtcbiAgICBtZXRhLmFkZChzbmFwc2hvdCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtEb2N9IG9yaWdpbkRvY1xuICogQHBhcmFtIHtTbmFwc2hvdH0gc25hcHNob3RcbiAqIEBwYXJhbSB7RG9jfSBbbmV3RG9jXSBPcHRpb25hbGx5LCB5b3UgbWF5IGRlZmluZSB0aGUgWWpzIGRvY3VtZW50IHRoYXQgcmVjZWl2ZXMgdGhlIGRhdGEgZnJvbSBvcmlnaW5Eb2NcbiAqIEByZXR1cm4ge0RvY31cbiAqL1xuY29uc3QgY3JlYXRlRG9jRnJvbVNuYXBzaG90ID0gKG9yaWdpbkRvYywgc25hcHNob3QsIG5ld0RvYyA9IG5ldyBEb2MoKSkgPT4ge1xuICBpZiAob3JpZ2luRG9jLmdjKSB7XG4gICAgLy8gd2Ugc2hvdWxkIG5vdCB0cnkgdG8gcmVzdG9yZSBhIEdDLWVkIGRvY3VtZW50LCBiZWNhdXNlIHNvbWUgb2YgdGhlIHJlc3RvcmVkIGl0ZW1zIG1pZ2h0IGhhdmUgdGhlaXIgY29udGVudCBkZWxldGVkXG4gICAgdGhyb3cgbmV3IEVycm9yKCdvcmlnaW5Eb2MgbXVzdCBub3QgYmUgZ2FyYmFnZSBjb2xsZWN0ZWQnKVxuICB9XG4gIGNvbnN0IHsgc3YsIGRzIH0gPSBzbmFwc2hvdDtcblxuICBjb25zdCBlbmNvZGVyID0gbmV3IFVwZGF0ZUVuY29kZXJWMigpO1xuICBvcmlnaW5Eb2MudHJhbnNhY3QodHJhbnNhY3Rpb24gPT4ge1xuICAgIGxldCBzaXplID0gMDtcbiAgICBzdi5mb3JFYWNoKGNsb2NrID0+IHtcbiAgICAgIGlmIChjbG9jayA+IDApIHtcbiAgICAgICAgc2l6ZSsrO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBzaXplKTtcbiAgICAvLyBzcGxpdHRpbmcgdGhlIHN0cnVjdHMgYmVmb3JlIHdyaXRpbmcgdGhlbSB0byB0aGUgZW5jb2RlclxuICAgIGZvciAoY29uc3QgW2NsaWVudCwgY2xvY2tdIG9mIHN2KSB7XG4gICAgICBpZiAoY2xvY2sgPT09IDApIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIGlmIChjbG9jayA8IGdldFN0YXRlKG9yaWdpbkRvYy5zdG9yZSwgY2xpZW50KSkge1xuICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQoY2xpZW50LCBjbG9jaykpO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RydWN0cyA9IG9yaWdpbkRvYy5zdG9yZS5jbGllbnRzLmdldChjbGllbnQpIHx8IFtdO1xuICAgICAgY29uc3QgbGFzdFN0cnVjdEluZGV4ID0gZmluZEluZGV4U1Moc3RydWN0cywgY2xvY2sgLSAxKTtcbiAgICAgIC8vIHdyaXRlICMgZW5jb2RlZCBzdHJ1Y3RzXG4gICAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgbGFzdFN0cnVjdEluZGV4ICsgMSk7XG4gICAgICBlbmNvZGVyLndyaXRlQ2xpZW50KGNsaWVudCk7XG4gICAgICAvLyBmaXJzdCBjbG9jayB3cml0dGVuIGlzIDBcbiAgICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCAwKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGxhc3RTdHJ1Y3RJbmRleDsgaSsrKSB7XG4gICAgICAgIHN0cnVjdHNbaV0ud3JpdGUoZW5jb2RlciwgMCk7XG4gICAgICB9XG4gICAgfVxuICAgIHdyaXRlRGVsZXRlU2V0KGVuY29kZXIsIGRzKTtcbiAgfSk7XG5cbiAgYXBwbHlVcGRhdGVWMihuZXdEb2MsIGVuY29kZXIudG9VaW50OEFycmF5KCksICdzbmFwc2hvdCcpO1xuICByZXR1cm4gbmV3RG9jXG59O1xuXG5jbGFzcyBTdHJ1Y3RTdG9yZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPG51bWJlcixBcnJheTxHQ3xJdGVtPj59XG4gICAgICovXG4gICAgdGhpcy5jbGllbnRzID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudWxsIHwgeyBtaXNzaW5nOiBNYXA8bnVtYmVyLCBudW1iZXI+LCB1cGRhdGU6IFVpbnQ4QXJyYXkgfX1cbiAgICAgKi9cbiAgICB0aGlzLnBlbmRpbmdTdHJ1Y3RzID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVsbCB8IFVpbnQ4QXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5wZW5kaW5nRHMgPSBudWxsO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBzdGF0ZXMgYXMgYSBNYXA8Y2xpZW50LGNsb2NrPi5cbiAqIE5vdGUgdGhhdCBjbG9jayByZWZlcnMgdG8gdGhlIG5leHQgZXhwZWN0ZWQgY2xvY2sgaWQuXG4gKlxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEByZXR1cm4ge01hcDxudW1iZXIsbnVtYmVyPn1cbiAqXG4gKiBAcHVibGljXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZ2V0U3RhdGVWZWN0b3IgPSBzdG9yZSA9PiB7XG4gIGNvbnN0IHNtID0gbmV3IE1hcCgpO1xuICBzdG9yZS5jbGllbnRzLmZvckVhY2goKHN0cnVjdHMsIGNsaWVudCkgPT4ge1xuICAgIGNvbnN0IHN0cnVjdCA9IHN0cnVjdHNbc3RydWN0cy5sZW5ndGggLSAxXTtcbiAgICBzbS5zZXQoY2xpZW50LCBzdHJ1Y3QuaWQuY2xvY2sgKyBzdHJ1Y3QubGVuZ3RoKTtcbiAgfSk7XG4gIHJldHVybiBzbVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFxuICogQHJldHVybiB7bnVtYmVyfVxuICpcbiAqIEBwdWJsaWNcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBnZXRTdGF0ZSA9IChzdG9yZSwgY2xpZW50KSA9PiB7XG4gIGNvbnN0IHN0cnVjdHMgPSBzdG9yZS5jbGllbnRzLmdldChjbGllbnQpO1xuICBpZiAoc3RydWN0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBjb25zdCBsYXN0U3RydWN0ID0gc3RydWN0c1tzdHJ1Y3RzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gbGFzdFN0cnVjdC5pZC5jbG9jayArIGxhc3RTdHJ1Y3QubGVuZ3RoXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge0dDfEl0ZW19IHN0cnVjdFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgYWRkU3RydWN0ID0gKHN0b3JlLCBzdHJ1Y3QpID0+IHtcbiAgbGV0IHN0cnVjdHMgPSBzdG9yZS5jbGllbnRzLmdldChzdHJ1Y3QuaWQuY2xpZW50KTtcbiAgaWYgKHN0cnVjdHMgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cnVjdHMgPSBbXTtcbiAgICBzdG9yZS5jbGllbnRzLnNldChzdHJ1Y3QuaWQuY2xpZW50LCBzdHJ1Y3RzKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBsYXN0U3RydWN0ID0gc3RydWN0c1tzdHJ1Y3RzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0U3RydWN0LmlkLmNsb2NrICsgbGFzdFN0cnVjdC5sZW5ndGggIT09IHN0cnVjdC5pZC5jbG9jaykge1xuICAgICAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICAgIH1cbiAgfVxuICBzdHJ1Y3RzLnB1c2goc3RydWN0KTtcbn07XG5cbi8qKlxuICogUGVyZm9ybSBhIGJpbmFyeSBzZWFyY2ggb24gYSBzb3J0ZWQgYXJyYXlcbiAqIEBwYXJhbSB7QXJyYXk8SXRlbXxHQz59IHN0cnVjdHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1xuICogQHJldHVybiB7bnVtYmVyfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZmluZEluZGV4U1MgPSAoc3RydWN0cywgY2xvY2spID0+IHtcbiAgbGV0IGxlZnQgPSAwO1xuICBsZXQgcmlnaHQgPSBzdHJ1Y3RzLmxlbmd0aCAtIDE7XG4gIGxldCBtaWQgPSBzdHJ1Y3RzW3JpZ2h0XTtcbiAgbGV0IG1pZGNsb2NrID0gbWlkLmlkLmNsb2NrO1xuICBpZiAobWlkY2xvY2sgPT09IGNsb2NrKSB7XG4gICAgcmV0dXJuIHJpZ2h0XG4gIH1cbiAgLy8gQHRvZG8gZG9lcyBpdCBldmVuIG1ha2Ugc2Vuc2UgdG8gcGl2b3QgdGhlIHNlYXJjaD9cbiAgLy8gSWYgYSBnb29kIHNwbGl0IG1pc3NlcywgaXQgbWlnaHQgYWN0dWFsbHkgaW5jcmVhc2UgdGhlIHRpbWUgdG8gZmluZCB0aGUgY29ycmVjdCBpdGVtLlxuICAvLyBDdXJyZW50bHksIHRoZSBvbmx5IGFkdmFudGFnZSBpcyB0aGF0IHNlYXJjaCB3aXRoIHBpdm90aW5nIG1pZ2h0IGZpbmQgdGhlIGl0ZW0gb24gdGhlIGZpcnN0IHRyeS5cbiAgbGV0IG1pZGluZGV4ID0gbWF0aC5mbG9vcigoY2xvY2sgLyAobWlkY2xvY2sgKyBtaWQubGVuZ3RoIC0gMSkpICogcmlnaHQpOyAvLyBwaXZvdGluZyB0aGUgc2VhcmNoXG4gIHdoaWxlIChsZWZ0IDw9IHJpZ2h0KSB7XG4gICAgbWlkID0gc3RydWN0c1ttaWRpbmRleF07XG4gICAgbWlkY2xvY2sgPSBtaWQuaWQuY2xvY2s7XG4gICAgaWYgKG1pZGNsb2NrIDw9IGNsb2NrKSB7XG4gICAgICBpZiAoY2xvY2sgPCBtaWRjbG9jayArIG1pZC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG1pZGluZGV4XG4gICAgICB9XG4gICAgICBsZWZ0ID0gbWlkaW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByaWdodCA9IG1pZGluZGV4IC0gMTtcbiAgICB9XG4gICAgbWlkaW5kZXggPSBtYXRoLmZsb29yKChsZWZ0ICsgcmlnaHQpIC8gMik7XG4gIH1cbiAgLy8gQWx3YXlzIGNoZWNrIHN0YXRlIGJlZm9yZSBsb29raW5nIGZvciBhIHN0cnVjdCBpbiBTdHJ1Y3RTdG9yZVxuICAvLyBUaGVyZWZvcmUgdGhlIGNhc2Ugb2Ygbm90IGZpbmRpbmcgYSBzdHJ1Y3QgaXMgdW5leHBlY3RlZFxuICB0aHJvdyBlcnJvci51bmV4cGVjdGVkQ2FzZSgpXG59O1xuXG4vKipcbiAqIEV4cGVjdHMgdGhhdCBpZCBpcyBhY3R1YWxseSBpbiBzdG9yZS4gVGhpcyBmdW5jdGlvbiB0aHJvd3Mgb3IgaXMgYW4gaW5maW5pdGUgbG9vcCBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7SUR9IGlkXG4gKiBAcmV0dXJuIHtHQ3xJdGVtfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZmluZCA9IChzdG9yZSwgaWQpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxHQ3xJdGVtPn1cbiAgICovXG4gIC8vIEB0cy1pZ25vcmVcbiAgY29uc3Qgc3RydWN0cyA9IHN0b3JlLmNsaWVudHMuZ2V0KGlkLmNsaWVudCk7XG4gIHJldHVybiBzdHJ1Y3RzW2ZpbmRJbmRleFNTKHN0cnVjdHMsIGlkLmNsb2NrKV1cbn07XG5cbi8qKlxuICogRXhwZWN0cyB0aGF0IGlkIGlzIGFjdHVhbGx5IGluIHN0b3JlLiBUaGlzIGZ1bmN0aW9uIHRocm93cyBvciBpcyBhbiBpbmZpbml0ZSBsb29wIG90aGVyd2lzZS5cbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZ2V0SXRlbSA9IC8qKiBAdHlwZSB7ZnVuY3Rpb24oU3RydWN0U3RvcmUsSUQpOkl0ZW19ICovIChmaW5kKTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBcnJheTxJdGVtfEdDPn0gc3RydWN0c1xuICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrXG4gKi9cbmNvbnN0IGZpbmRJbmRleENsZWFuU3RhcnQgPSAodHJhbnNhY3Rpb24sIHN0cnVjdHMsIGNsb2NrKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gZmluZEluZGV4U1Moc3RydWN0cywgY2xvY2spO1xuICBjb25zdCBzdHJ1Y3QgPSBzdHJ1Y3RzW2luZGV4XTtcbiAgaWYgKHN0cnVjdC5pZC5jbG9jayA8IGNsb2NrICYmIHN0cnVjdCBpbnN0YW5jZW9mIEl0ZW0pIHtcbiAgICBzdHJ1Y3RzLnNwbGljZShpbmRleCArIDEsIDAsIHNwbGl0SXRlbSh0cmFuc2FjdGlvbiwgc3RydWN0LCBjbG9jayAtIHN0cnVjdC5pZC5jbG9jaykpO1xuICAgIHJldHVybiBpbmRleCArIDFcbiAgfVxuICByZXR1cm4gaW5kZXhcbn07XG5cbi8qKlxuICogRXhwZWN0cyB0aGF0IGlkIGlzIGFjdHVhbGx5IGluIHN0b3JlLiBUaGlzIGZ1bmN0aW9uIHRocm93cyBvciBpcyBhbiBpbmZpbml0ZSBsb29wIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtJRH0gaWRcbiAqIEByZXR1cm4ge0l0ZW19XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBnZXRJdGVtQ2xlYW5TdGFydCA9ICh0cmFuc2FjdGlvbiwgaWQpID0+IHtcbiAgY29uc3Qgc3RydWN0cyA9IC8qKiBAdHlwZSB7QXJyYXk8SXRlbT59ICovICh0cmFuc2FjdGlvbi5kb2Muc3RvcmUuY2xpZW50cy5nZXQoaWQuY2xpZW50KSk7XG4gIHJldHVybiBzdHJ1Y3RzW2ZpbmRJbmRleENsZWFuU3RhcnQodHJhbnNhY3Rpb24sIHN0cnVjdHMsIGlkLmNsb2NrKV1cbn07XG5cbi8qKlxuICogRXhwZWN0cyB0aGF0IGlkIGlzIGFjdHVhbGx5IGluIHN0b3JlLiBUaGlzIGZ1bmN0aW9uIHRocm93cyBvciBpcyBhbiBpbmZpbml0ZSBsb29wIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7SUR9IGlkXG4gKiBAcmV0dXJuIHtJdGVtfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZ2V0SXRlbUNsZWFuRW5kID0gKHRyYW5zYWN0aW9uLCBzdG9yZSwgaWQpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxJdGVtPn1cbiAgICovXG4gIC8vIEB0cy1pZ25vcmVcbiAgY29uc3Qgc3RydWN0cyA9IHN0b3JlLmNsaWVudHMuZ2V0KGlkLmNsaWVudCk7XG4gIGNvbnN0IGluZGV4ID0gZmluZEluZGV4U1Moc3RydWN0cywgaWQuY2xvY2spO1xuICBjb25zdCBzdHJ1Y3QgPSBzdHJ1Y3RzW2luZGV4XTtcbiAgaWYgKGlkLmNsb2NrICE9PSBzdHJ1Y3QuaWQuY2xvY2sgKyBzdHJ1Y3QubGVuZ3RoIC0gMSAmJiBzdHJ1Y3QuY29uc3RydWN0b3IgIT09IEdDKSB7XG4gICAgc3RydWN0cy5zcGxpY2UoaW5kZXggKyAxLCAwLCBzcGxpdEl0ZW0odHJhbnNhY3Rpb24sIHN0cnVjdCwgaWQuY2xvY2sgLSBzdHJ1Y3QuaWQuY2xvY2sgKyAxKSk7XG4gIH1cbiAgcmV0dXJuIHN0cnVjdFxufTtcblxuLyoqXG4gKiBSZXBsYWNlIGBpdGVtYCB3aXRoIGBuZXdpdGVtYCBpbiBzdG9yZVxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7R0N8SXRlbX0gc3RydWN0XG4gKiBAcGFyYW0ge0dDfEl0ZW19IG5ld1N0cnVjdFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVwbGFjZVN0cnVjdCA9IChzdG9yZSwgc3RydWN0LCBuZXdTdHJ1Y3QpID0+IHtcbiAgY29uc3Qgc3RydWN0cyA9IC8qKiBAdHlwZSB7QXJyYXk8R0N8SXRlbT59ICovIChzdG9yZS5jbGllbnRzLmdldChzdHJ1Y3QuaWQuY2xpZW50KSk7XG4gIHN0cnVjdHNbZmluZEluZGV4U1Moc3RydWN0cywgc3RydWN0LmlkLmNsb2NrKV0gPSBuZXdTdHJ1Y3Q7XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhIHJhbmdlIG9mIHN0cnVjdHNcbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBcnJheTxJdGVtfEdDPn0gc3RydWN0c1xuICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrU3RhcnQgSW5jbHVzaXZlIHN0YXJ0XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEdDfEl0ZW0pOnZvaWR9IGZcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgaXRlcmF0ZVN0cnVjdHMgPSAodHJhbnNhY3Rpb24sIHN0cnVjdHMsIGNsb2NrU3RhcnQsIGxlbiwgZikgPT4ge1xuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3QgY2xvY2tFbmQgPSBjbG9ja1N0YXJ0ICsgbGVuO1xuICBsZXQgaW5kZXggPSBmaW5kSW5kZXhDbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBzdHJ1Y3RzLCBjbG9ja1N0YXJ0KTtcbiAgbGV0IHN0cnVjdDtcbiAgZG8ge1xuICAgIHN0cnVjdCA9IHN0cnVjdHNbaW5kZXgrK107XG4gICAgaWYgKGNsb2NrRW5kIDwgc3RydWN0LmlkLmNsb2NrICsgc3RydWN0Lmxlbmd0aCkge1xuICAgICAgZmluZEluZGV4Q2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgc3RydWN0cywgY2xvY2tFbmQpO1xuICAgIH1cbiAgICBmKHN0cnVjdCk7XG4gIH0gd2hpbGUgKGluZGV4IDwgc3RydWN0cy5sZW5ndGggJiYgc3RydWN0c1tpbmRleF0uaWQuY2xvY2sgPCBjbG9ja0VuZClcbn07XG5cbi8qKlxuICogQSB0cmFuc2FjdGlvbiBpcyBjcmVhdGVkIGZvciBldmVyeSBjaGFuZ2Ugb24gdGhlIFlqcyBtb2RlbC4gSXQgaXMgcG9zc2libGVcbiAqIHRvIGJ1bmRsZSBjaGFuZ2VzIG9uIHRoZSBZanMgbW9kZWwgaW4gYSBzaW5nbGUgdHJhbnNhY3Rpb24gdG9cbiAqIG1pbmltaXplIHRoZSBudW1iZXIgb24gbWVzc2FnZXMgc2VudCBhbmQgdGhlIG51bWJlciBvZiBvYnNlcnZlciBjYWxscy5cbiAqIElmIHBvc3NpYmxlIHRoZSB1c2VyIG9mIHRoaXMgbGlicmFyeSBzaG91bGQgYnVuZGxlIGFzIG1hbnkgY2hhbmdlcyBhc1xuICogcG9zc2libGUuIEhlcmUgaXMgYW4gZXhhbXBsZSB0byBpbGx1c3RyYXRlIHRoZSBhZHZhbnRhZ2VzIG9mIGJ1bmRsaW5nOlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBtYXAgPSB5LmRlZmluZSgnbWFwJywgWU1hcClcbiAqIC8vIExvZyBjb250ZW50IHdoZW4gY2hhbmdlIGlzIHRyaWdnZXJlZFxuICogbWFwLm9ic2VydmUoKCkgPT4ge1xuICogICBjb25zb2xlLmxvZygnY2hhbmdlIHRyaWdnZXJlZCcpXG4gKiB9KVxuICogLy8gRWFjaCBjaGFuZ2Ugb24gdGhlIG1hcCB0eXBlIHRyaWdnZXJzIGEgbG9nIG1lc3NhZ2U6XG4gKiBtYXAuc2V0KCdhJywgMCkgLy8gPT4gXCJjaGFuZ2UgdHJpZ2dlcmVkXCJcbiAqIG1hcC5zZXQoJ2InLCAwKSAvLyA9PiBcImNoYW5nZSB0cmlnZ2VyZWRcIlxuICogLy8gV2hlbiBwdXQgaW4gYSB0cmFuc2FjdGlvbiwgaXQgd2lsbCB0cmlnZ2VyIHRoZSBsb2cgYWZ0ZXIgdGhlIHRyYW5zYWN0aW9uOlxuICogeS50cmFuc2FjdCgoKSA9PiB7XG4gKiAgIG1hcC5zZXQoJ2EnLCAxKVxuICogICBtYXAuc2V0KCdiJywgMSlcbiAqIH0pIC8vID0+IFwiY2hhbmdlIHRyaWdnZXJlZFwiXG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBUcmFuc2FjdGlvbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY30gZG9jXG4gICAqIEBwYXJhbSB7YW55fSBvcmlnaW5cbiAgICogQHBhcmFtIHtib29sZWFufSBsb2NhbFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRvYywgb3JpZ2luLCBsb2NhbCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBZanMgaW5zdGFuY2UuXG4gICAgICogQHR5cGUge0RvY31cbiAgICAgKi9cbiAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAvKipcbiAgICAgKiBEZXNjcmliZXMgdGhlIHNldCBvZiBkZWxldGVkIGl0ZW1zIGJ5IGlkc1xuICAgICAqIEB0eXBlIHtEZWxldGVTZXR9XG4gICAgICovXG4gICAgdGhpcy5kZWxldGVTZXQgPSBuZXcgRGVsZXRlU2V0KCk7XG4gICAgLyoqXG4gICAgICogSG9sZHMgdGhlIHN0YXRlIGJlZm9yZSB0aGUgdHJhbnNhY3Rpb24gc3RhcnRlZC5cbiAgICAgKiBAdHlwZSB7TWFwPE51bWJlcixOdW1iZXI+fVxuICAgICAqL1xuICAgIHRoaXMuYmVmb3JlU3RhdGUgPSBnZXRTdGF0ZVZlY3Rvcihkb2Muc3RvcmUpO1xuICAgIC8qKlxuICAgICAqIEhvbGRzIHRoZSBzdGF0ZSBhZnRlciB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICogQHR5cGUge01hcDxOdW1iZXIsTnVtYmVyPn1cbiAgICAgKi9cbiAgICB0aGlzLmFmdGVyU3RhdGUgPSBuZXcgTWFwKCk7XG4gICAgLyoqXG4gICAgICogQWxsIHR5cGVzIHRoYXQgd2VyZSBkaXJlY3RseSBtb2RpZmllZCAocHJvcGVydHkgYWRkZWQgb3IgY2hpbGRcbiAgICAgKiBpbnNlcnRlZC9kZWxldGVkKS4gTmV3IHR5cGVzIGFyZSBub3QgaW5jbHVkZWQgaW4gdGhpcyBTZXQuXG4gICAgICogTWFwcyBmcm9tIHR5cGUgdG8gcGFyZW50U3VicyAoYGl0ZW0ucGFyZW50U3ViID0gbnVsbGAgZm9yIFlBcnJheSlcbiAgICAgKiBAdHlwZSB7TWFwPEFic3RyYWN0VHlwZTxZRXZlbnQ8YW55Pj4sU2V0PFN0cmluZ3xudWxsPj59XG4gICAgICovXG4gICAgdGhpcy5jaGFuZ2VkID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIFN0b3JlcyB0aGUgZXZlbnRzIGZvciB0aGUgdHlwZXMgdGhhdCBvYnNlcnZlIGFsc28gY2hpbGQgZWxlbWVudHMuXG4gICAgICogSXQgaXMgbWFpbmx5IHVzZWQgYnkgYG9ic2VydmVEZWVwYC5cbiAgICAgKiBAdHlwZSB7TWFwPEFic3RyYWN0VHlwZTxZRXZlbnQ8YW55Pj4sQXJyYXk8WUV2ZW50PGFueT4+Pn1cbiAgICAgKi9cbiAgICB0aGlzLmNoYW5nZWRQYXJlbnRUeXBlcyA9IG5ldyBNYXAoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8QWJzdHJhY3RTdHJ1Y3Q+fVxuICAgICAqL1xuICAgIHRoaXMuX21lcmdlU3RydWN0cyA9IFtdO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHthbnl9XG4gICAgICovXG4gICAgdGhpcy5vcmlnaW4gPSBvcmlnaW47XG4gICAgLyoqXG4gICAgICogU3RvcmVzIG1ldGEgaW5mb3JtYXRpb24gb24gdGhlIHRyYW5zYWN0aW9uXG4gICAgICogQHR5cGUge01hcDxhbnksYW55Pn1cbiAgICAgKi9cbiAgICB0aGlzLm1ldGEgPSBuZXcgTWFwKCk7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIGNoYW5nZSBvcmlnaW5hdGVzIGZyb20gdGhpcyBkb2MuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5sb2NhbCA9IGxvY2FsO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtTZXQ8RG9jPn1cbiAgICAgKi9cbiAgICB0aGlzLnN1YmRvY3NBZGRlZCA9IG5ldyBTZXQoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7U2V0PERvYz59XG4gICAgICovXG4gICAgdGhpcy5zdWJkb2NzUmVtb3ZlZCA9IG5ldyBTZXQoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7U2V0PERvYz59XG4gICAgICovXG4gICAgdGhpcy5zdWJkb2NzTG9hZGVkID0gbmV3IFNldCgpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGRhdGEgd2FzIHdyaXR0ZW4uXG4gKi9cbmNvbnN0IHdyaXRlVXBkYXRlTWVzc2FnZUZyb21UcmFuc2FjdGlvbiA9IChlbmNvZGVyLCB0cmFuc2FjdGlvbikgPT4ge1xuICBpZiAodHJhbnNhY3Rpb24uZGVsZXRlU2V0LmNsaWVudHMuc2l6ZSA9PT0gMCAmJiAhbWFwLmFueSh0cmFuc2FjdGlvbi5hZnRlclN0YXRlLCAoY2xvY2ssIGNsaWVudCkgPT4gdHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUuZ2V0KGNsaWVudCkgIT09IGNsb2NrKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHNvcnRBbmRNZXJnZURlbGV0ZVNldCh0cmFuc2FjdGlvbi5kZWxldGVTZXQpO1xuICB3cml0ZVN0cnVjdHNGcm9tVHJhbnNhY3Rpb24oZW5jb2RlciwgdHJhbnNhY3Rpb24pO1xuICB3cml0ZURlbGV0ZVNldChlbmNvZGVyLCB0cmFuc2FjdGlvbi5kZWxldGVTZXQpO1xuICByZXR1cm4gdHJ1ZVxufTtcblxuLyoqXG4gKiBJZiBgdHlwZS5wYXJlbnRgIHdhcyBhZGRlZCBpbiBjdXJyZW50IHRyYW5zYWN0aW9uLCBgdHlwZWAgdGVjaG5pY2FsbHlcbiAqIGRpZCBub3QgY2hhbmdlLCBpdCB3YXMganVzdCBhZGRlZCBhbmQgd2Ugc2hvdWxkIG5vdCBmaXJlIGV2ZW50cyBmb3IgYHR5cGVgLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxZRXZlbnQ8YW55Pj59IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHBhcmVudFN1YlxuICovXG5jb25zdCBhZGRDaGFuZ2VkVHlwZVRvVHJhbnNhY3Rpb24gPSAodHJhbnNhY3Rpb24sIHR5cGUsIHBhcmVudFN1YikgPT4ge1xuICBjb25zdCBpdGVtID0gdHlwZS5faXRlbTtcbiAgaWYgKGl0ZW0gPT09IG51bGwgfHwgKGl0ZW0uaWQuY2xvY2sgPCAodHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUuZ2V0KGl0ZW0uaWQuY2xpZW50KSB8fCAwKSAmJiAhaXRlbS5kZWxldGVkKSkge1xuICAgIG1hcC5zZXRJZlVuZGVmaW5lZCh0cmFuc2FjdGlvbi5jaGFuZ2VkLCB0eXBlLCBzZXQuY3JlYXRlKS5hZGQocGFyZW50U3ViKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PEFic3RyYWN0U3RydWN0Pn0gc3RydWN0c1xuICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICovXG5jb25zdCB0cnlUb01lcmdlV2l0aExlZnQgPSAoc3RydWN0cywgcG9zKSA9PiB7XG4gIGNvbnN0IGxlZnQgPSBzdHJ1Y3RzW3BvcyAtIDFdO1xuICBjb25zdCByaWdodCA9IHN0cnVjdHNbcG9zXTtcbiAgaWYgKGxlZnQuZGVsZXRlZCA9PT0gcmlnaHQuZGVsZXRlZCAmJiBsZWZ0LmNvbnN0cnVjdG9yID09PSByaWdodC5jb25zdHJ1Y3Rvcikge1xuICAgIGlmIChsZWZ0Lm1lcmdlV2l0aChyaWdodCkpIHtcbiAgICAgIHN0cnVjdHMuc3BsaWNlKHBvcywgMSk7XG4gICAgICBpZiAocmlnaHQgaW5zdGFuY2VvZiBJdGVtICYmIHJpZ2h0LnBhcmVudFN1YiAhPT0gbnVsbCAmJiAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAocmlnaHQucGFyZW50KS5fbWFwLmdldChyaWdodC5wYXJlbnRTdWIpID09PSByaWdodCkge1xuICAgICAgICAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAocmlnaHQucGFyZW50KS5fbWFwLnNldChyaWdodC5wYXJlbnRTdWIsIC8qKiBAdHlwZSB7SXRlbX0gKi8gKGxlZnQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtmdW5jdGlvbihJdGVtKTpib29sZWFufSBnY0ZpbHRlclxuICovXG5jb25zdCB0cnlHY0RlbGV0ZVNldCA9IChkcywgc3RvcmUsIGdjRmlsdGVyKSA9PiB7XG4gIGZvciAoY29uc3QgW2NsaWVudCwgZGVsZXRlSXRlbXNdIG9mIGRzLmNsaWVudHMuZW50cmllcygpKSB7XG4gICAgY29uc3Qgc3RydWN0cyA9IC8qKiBAdHlwZSB7QXJyYXk8R0N8SXRlbT59ICovIChzdG9yZS5jbGllbnRzLmdldChjbGllbnQpKTtcbiAgICBmb3IgKGxldCBkaSA9IGRlbGV0ZUl0ZW1zLmxlbmd0aCAtIDE7IGRpID49IDA7IGRpLS0pIHtcbiAgICAgIGNvbnN0IGRlbGV0ZUl0ZW0gPSBkZWxldGVJdGVtc1tkaV07XG4gICAgICBjb25zdCBlbmREZWxldGVJdGVtQ2xvY2sgPSBkZWxldGVJdGVtLmNsb2NrICsgZGVsZXRlSXRlbS5sZW47XG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgc2kgPSBmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBkZWxldGVJdGVtLmNsb2NrKSwgc3RydWN0ID0gc3RydWN0c1tzaV07XG4gICAgICAgIHNpIDwgc3RydWN0cy5sZW5ndGggJiYgc3RydWN0LmlkLmNsb2NrIDwgZW5kRGVsZXRlSXRlbUNsb2NrO1xuICAgICAgICBzdHJ1Y3QgPSBzdHJ1Y3RzWysrc2ldXG4gICAgICApIHtcbiAgICAgICAgY29uc3Qgc3RydWN0ID0gc3RydWN0c1tzaV07XG4gICAgICAgIGlmIChkZWxldGVJdGVtLmNsb2NrICsgZGVsZXRlSXRlbS5sZW4gPD0gc3RydWN0LmlkLmNsb2NrKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RydWN0IGluc3RhbmNlb2YgSXRlbSAmJiBzdHJ1Y3QuZGVsZXRlZCAmJiAhc3RydWN0LmtlZXAgJiYgZ2NGaWx0ZXIoc3RydWN0KSkge1xuICAgICAgICAgIHN0cnVjdC5nYyhzdG9yZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqL1xuY29uc3QgdHJ5TWVyZ2VEZWxldGVTZXQgPSAoZHMsIHN0b3JlKSA9PiB7XG4gIC8vIHRyeSB0byBtZXJnZSBkZWxldGVkIC8gZ2MnZCBpdGVtc1xuICAvLyBtZXJnZSBmcm9tIHJpZ2h0IHRvIGxlZnQgZm9yIGJldHRlciBlZmZpY2llY3kgYW5kIHNvIHdlIGRvbid0IG1pc3MgYW55IG1lcmdlIHRhcmdldHNcbiAgZHMuY2xpZW50cy5mb3JFYWNoKChkZWxldGVJdGVtcywgY2xpZW50KSA9PiB7XG4gICAgY29uc3Qgc3RydWN0cyA9IC8qKiBAdHlwZSB7QXJyYXk8R0N8SXRlbT59ICovIChzdG9yZS5jbGllbnRzLmdldChjbGllbnQpKTtcbiAgICBmb3IgKGxldCBkaSA9IGRlbGV0ZUl0ZW1zLmxlbmd0aCAtIDE7IGRpID49IDA7IGRpLS0pIHtcbiAgICAgIGNvbnN0IGRlbGV0ZUl0ZW0gPSBkZWxldGVJdGVtc1tkaV07XG4gICAgICAvLyBzdGFydCB3aXRoIG1lcmdpbmcgdGhlIGl0ZW0gbmV4dCB0byB0aGUgbGFzdCBkZWxldGVkIGl0ZW1cbiAgICAgIGNvbnN0IG1vc3RSaWdodEluZGV4VG9DaGVjayA9IG1hdGgubWluKHN0cnVjdHMubGVuZ3RoIC0gMSwgMSArIGZpbmRJbmRleFNTKHN0cnVjdHMsIGRlbGV0ZUl0ZW0uY2xvY2sgKyBkZWxldGVJdGVtLmxlbiAtIDEpKTtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBzaSA9IG1vc3RSaWdodEluZGV4VG9DaGVjaywgc3RydWN0ID0gc3RydWN0c1tzaV07XG4gICAgICAgIHNpID4gMCAmJiBzdHJ1Y3QuaWQuY2xvY2sgPj0gZGVsZXRlSXRlbS5jbG9jaztcbiAgICAgICAgc3RydWN0ID0gc3RydWN0c1stLXNpXVxuICAgICAgKSB7XG4gICAgICAgIHRyeVRvTWVyZ2VXaXRoTGVmdChzdHJ1Y3RzLCBzaSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtmdW5jdGlvbihJdGVtKTpib29sZWFufSBnY0ZpbHRlclxuICovXG5jb25zdCB0cnlHYyA9IChkcywgc3RvcmUsIGdjRmlsdGVyKSA9PiB7XG4gIHRyeUdjRGVsZXRlU2V0KGRzLCBzdG9yZSwgZ2NGaWx0ZXIpO1xuICB0cnlNZXJnZURlbGV0ZVNldChkcywgc3RvcmUpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PFRyYW5zYWN0aW9uPn0gdHJhbnNhY3Rpb25DbGVhbnVwc1xuICogQHBhcmFtIHtudW1iZXJ9IGlcbiAqL1xuY29uc3QgY2xlYW51cFRyYW5zYWN0aW9ucyA9ICh0cmFuc2FjdGlvbkNsZWFudXBzLCBpKSA9PiB7XG4gIGlmIChpIDwgdHJhbnNhY3Rpb25DbGVhbnVwcy5sZW5ndGgpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uQ2xlYW51cHNbaV07XG4gICAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jO1xuICAgIGNvbnN0IHN0b3JlID0gZG9jLnN0b3JlO1xuICAgIGNvbnN0IGRzID0gdHJhbnNhY3Rpb24uZGVsZXRlU2V0O1xuICAgIGNvbnN0IG1lcmdlU3RydWN0cyA9IHRyYW5zYWN0aW9uLl9tZXJnZVN0cnVjdHM7XG4gICAgdHJ5IHtcbiAgICAgIHNvcnRBbmRNZXJnZURlbGV0ZVNldChkcyk7XG4gICAgICB0cmFuc2FjdGlvbi5hZnRlclN0YXRlID0gZ2V0U3RhdGVWZWN0b3IodHJhbnNhY3Rpb24uZG9jLnN0b3JlKTtcbiAgICAgIGRvYy5fdHJhbnNhY3Rpb24gPSBudWxsO1xuICAgICAgZG9jLmVtaXQoJ2JlZm9yZU9ic2VydmVyQ2FsbHMnLCBbdHJhbnNhY3Rpb24sIGRvY10pO1xuICAgICAgLyoqXG4gICAgICAgKiBBbiBhcnJheSBvZiBldmVudCBjYWxsYmFja3MuXG4gICAgICAgKlxuICAgICAgICogRWFjaCBjYWxsYmFjayBpcyBjYWxsZWQgZXZlbiBpZiB0aGUgb3RoZXIgb25lcyB0aHJvdyBlcnJvcnMuXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge0FycmF5PGZ1bmN0aW9uKCk6dm9pZD59XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGZzID0gW107XG4gICAgICAvLyBvYnNlcnZlIGV2ZW50cyBvbiBjaGFuZ2VkIHR5cGVzXG4gICAgICB0cmFuc2FjdGlvbi5jaGFuZ2VkLmZvckVhY2goKHN1YnMsIGl0ZW10eXBlKSA9PlxuICAgICAgICBmcy5wdXNoKCgpID0+IHtcbiAgICAgICAgICBpZiAoaXRlbXR5cGUuX2l0ZW0gPT09IG51bGwgfHwgIWl0ZW10eXBlLl9pdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgICAgIGl0ZW10eXBlLl9jYWxsT2JzZXJ2ZXIodHJhbnNhY3Rpb24sIHN1YnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICBmcy5wdXNoKCgpID0+IHtcbiAgICAgICAgLy8gZGVlcCBvYnNlcnZlIGV2ZW50c1xuICAgICAgICB0cmFuc2FjdGlvbi5jaGFuZ2VkUGFyZW50VHlwZXMuZm9yRWFjaCgoZXZlbnRzLCB0eXBlKSA9PlxuICAgICAgICAgIGZzLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byB0aGluayBhYm91dCB0aGUgcG9zc2liaWxpdHkgdGhhdCB0aGUgdXNlciB0cmFuc2Zvcm1zIHRoZVxuICAgICAgICAgICAgLy8gWS5Eb2MgaW4gdGhlIGV2ZW50LlxuICAgICAgICAgICAgaWYgKHR5cGUuX2l0ZW0gPT09IG51bGwgfHwgIXR5cGUuX2l0ZW0uZGVsZXRlZCkge1xuICAgICAgICAgICAgICBldmVudHMgPSBldmVudHNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGV2ZW50ID0+XG4gICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuX2l0ZW0gPT09IG51bGwgfHwgIWV2ZW50LnRhcmdldC5faXRlbS5kZWxldGVkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgZXZlbnRzXG4gICAgICAgICAgICAgICAgLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IHR5cGU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIC8vIHNvcnQgZXZlbnRzIGJ5IHBhdGggbGVuZ3RoIHNvIHRoYXQgdG9wLWxldmVsIGV2ZW50cyBhcmUgZmlyZWQgZmlyc3QuXG4gICAgICAgICAgICAgIGV2ZW50c1xuICAgICAgICAgICAgICAgIC5zb3J0KChldmVudDEsIGV2ZW50MikgPT4gZXZlbnQxLnBhdGgubGVuZ3RoIC0gZXZlbnQyLnBhdGgubGVuZ3RoKTtcbiAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBjaGVjayBmb3IgZXZlbnRzLmxlbmd0aFxuICAgICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGtub3cgaXQgaGFzIGF0IGxlYXN0IG9uZSBlbGVtZW50XG4gICAgICAgICAgICAgIGNhbGxFdmVudEhhbmRsZXJMaXN0ZW5lcnModHlwZS5fZEVILCBldmVudHMsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICBmcy5wdXNoKCgpID0+IGRvYy5lbWl0KCdhZnRlclRyYW5zYWN0aW9uJywgW3RyYW5zYWN0aW9uLCBkb2NdKSk7XG4gICAgICB9KTtcbiAgICAgIGNhbGxBbGwoZnMsIFtdKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gUmVwbGFjZSBkZWxldGVkIGl0ZW1zIHdpdGggSXRlbURlbGV0ZWQgLyBHQy5cbiAgICAgIC8vIFRoaXMgaXMgd2hlcmUgY29udGVudCBpcyBhY3R1YWxseSByZW1vdmUgZnJvbSB0aGUgWWpzIERvYy5cbiAgICAgIGlmIChkb2MuZ2MpIHtcbiAgICAgICAgdHJ5R2NEZWxldGVTZXQoZHMsIHN0b3JlLCBkb2MuZ2NGaWx0ZXIpO1xuICAgICAgfVxuICAgICAgdHJ5TWVyZ2VEZWxldGVTZXQoZHMsIHN0b3JlKTtcblxuICAgICAgLy8gb24gYWxsIGFmZmVjdGVkIHN0b3JlLmNsaWVudHMgcHJvcHMsIHRyeSB0byBtZXJnZVxuICAgICAgdHJhbnNhY3Rpb24uYWZ0ZXJTdGF0ZS5mb3JFYWNoKChjbG9jaywgY2xpZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGJlZm9yZUNsb2NrID0gdHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUuZ2V0KGNsaWVudCkgfHwgMDtcbiAgICAgICAgaWYgKGJlZm9yZUNsb2NrICE9PSBjbG9jaykge1xuICAgICAgICAgIGNvbnN0IHN0cnVjdHMgPSAvKiogQHR5cGUge0FycmF5PEdDfEl0ZW0+fSAqLyAoc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KSk7XG4gICAgICAgICAgLy8gd2UgaXRlcmF0ZSBmcm9tIHJpZ2h0IHRvIGxlZnQgc28gd2UgY2FuIHNhZmVseSByZW1vdmUgZW50cmllc1xuICAgICAgICAgIGNvbnN0IGZpcnN0Q2hhbmdlUG9zID0gbWF0aC5tYXgoZmluZEluZGV4U1Moc3RydWN0cywgYmVmb3JlQ2xvY2spLCAxKTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gc3RydWN0cy5sZW5ndGggLSAxOyBpID49IGZpcnN0Q2hhbmdlUG9zOyBpLS0pIHtcbiAgICAgICAgICAgIHRyeVRvTWVyZ2VXaXRoTGVmdChzdHJ1Y3RzLCBpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gdHJ5IHRvIG1lcmdlIG1lcmdlU3RydWN0c1xuICAgICAgLy8gQHRvZG86IGl0IG1ha2VzIG1vcmUgc2Vuc2UgdG8gdHJhbnNmb3JtIG1lcmdlU3RydWN0cyB0byBhIERTLCBzb3J0IGl0LCBhbmQgbWVyZ2UgZnJvbSByaWdodCB0byBsZWZ0XG4gICAgICAvLyAgICAgICAgYnV0IGF0IHRoZSBtb21lbnQgRFMgZG9lcyBub3QgaGFuZGxlIGR1cGxpY2F0ZXNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVyZ2VTdHJ1Y3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50LCBjbG9jayB9ID0gbWVyZ2VTdHJ1Y3RzW2ldLmlkO1xuICAgICAgICBjb25zdCBzdHJ1Y3RzID0gLyoqIEB0eXBlIHtBcnJheTxHQ3xJdGVtPn0gKi8gKHN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCkpO1xuICAgICAgICBjb25zdCByZXBsYWNlZFN0cnVjdFBvcyA9IGZpbmRJbmRleFNTKHN0cnVjdHMsIGNsb2NrKTtcbiAgICAgICAgaWYgKHJlcGxhY2VkU3RydWN0UG9zICsgMSA8IHN0cnVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5VG9NZXJnZVdpdGhMZWZ0KHN0cnVjdHMsIHJlcGxhY2VkU3RydWN0UG9zICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcGxhY2VkU3RydWN0UG9zID4gMCkge1xuICAgICAgICAgIHRyeVRvTWVyZ2VXaXRoTGVmdChzdHJ1Y3RzLCByZXBsYWNlZFN0cnVjdFBvcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghdHJhbnNhY3Rpb24ubG9jYWwgJiYgdHJhbnNhY3Rpb24uYWZ0ZXJTdGF0ZS5nZXQoZG9jLmNsaWVudElEKSAhPT0gdHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUuZ2V0KGRvYy5jbGllbnRJRCkpIHtcbiAgICAgICAgbG9nZ2luZy5wcmludChsb2dnaW5nLk9SQU5HRSwgbG9nZ2luZy5CT0xELCAnW3lqc10gJywgbG9nZ2luZy5VTkJPTEQsIGxvZ2dpbmcuUkVELCAnQ2hhbmdlZCB0aGUgY2xpZW50LWlkIGJlY2F1c2UgYW5vdGhlciBjbGllbnQgc2VlbXMgdG8gYmUgdXNpbmcgaXQuJyk7XG4gICAgICAgIGRvYy5jbGllbnRJRCA9IGdlbmVyYXRlTmV3Q2xpZW50SWQoKTtcbiAgICAgIH1cbiAgICAgIC8vIEB0b2RvIE1lcmdlIGFsbCB0aGUgdHJhbnNhY3Rpb25zIGludG8gb25lIGFuZCBwcm92aWRlIHNlbmQgdGhlIGRhdGEgYXMgYSBzaW5nbGUgdXBkYXRlIG1lc3NhZ2VcbiAgICAgIGRvYy5lbWl0KCdhZnRlclRyYW5zYWN0aW9uQ2xlYW51cCcsIFt0cmFuc2FjdGlvbiwgZG9jXSk7XG4gICAgICBpZiAoZG9jLl9vYnNlcnZlcnMuaGFzKCd1cGRhdGUnKSkge1xuICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFVwZGF0ZUVuY29kZXJWMSgpO1xuICAgICAgICBjb25zdCBoYXNDb250ZW50ID0gd3JpdGVVcGRhdGVNZXNzYWdlRnJvbVRyYW5zYWN0aW9uKGVuY29kZXIsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgaWYgKGhhc0NvbnRlbnQpIHtcbiAgICAgICAgICBkb2MuZW1pdCgndXBkYXRlJywgW2VuY29kZXIudG9VaW50OEFycmF5KCksIHRyYW5zYWN0aW9uLm9yaWdpbiwgZG9jLCB0cmFuc2FjdGlvbl0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZG9jLl9vYnNlcnZlcnMuaGFzKCd1cGRhdGVWMicpKSB7XG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVXBkYXRlRW5jb2RlclYyKCk7XG4gICAgICAgIGNvbnN0IGhhc0NvbnRlbnQgPSB3cml0ZVVwZGF0ZU1lc3NhZ2VGcm9tVHJhbnNhY3Rpb24oZW5jb2RlciwgdHJhbnNhY3Rpb24pO1xuICAgICAgICBpZiAoaGFzQ29udGVudCkge1xuICAgICAgICAgIGRvYy5lbWl0KCd1cGRhdGVWMicsIFtlbmNvZGVyLnRvVWludDhBcnJheSgpLCB0cmFuc2FjdGlvbi5vcmlnaW4sIGRvYywgdHJhbnNhY3Rpb25dKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgeyBzdWJkb2NzQWRkZWQsIHN1YmRvY3NMb2FkZWQsIHN1YmRvY3NSZW1vdmVkIH0gPSB0cmFuc2FjdGlvbjtcbiAgICAgIGlmIChzdWJkb2NzQWRkZWQuc2l6ZSA+IDAgfHwgc3ViZG9jc1JlbW92ZWQuc2l6ZSA+IDAgfHwgc3ViZG9jc0xvYWRlZC5zaXplID4gMCkge1xuICAgICAgICBzdWJkb2NzQWRkZWQuZm9yRWFjaChzdWJkb2MgPT4ge1xuICAgICAgICAgIHN1YmRvYy5jbGllbnRJRCA9IGRvYy5jbGllbnRJRDtcbiAgICAgICAgICBpZiAoc3ViZG9jLmNvbGxlY3Rpb25pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdWJkb2MuY29sbGVjdGlvbmlkID0gZG9jLmNvbGxlY3Rpb25pZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZG9jLnN1YmRvY3MuYWRkKHN1YmRvYyk7XG4gICAgICAgIH0pO1xuICAgICAgICBzdWJkb2NzUmVtb3ZlZC5mb3JFYWNoKHN1YmRvYyA9PiBkb2Muc3ViZG9jcy5kZWxldGUoc3ViZG9jKSk7XG4gICAgICAgIGRvYy5lbWl0KCdzdWJkb2NzJywgW3sgbG9hZGVkOiBzdWJkb2NzTG9hZGVkLCBhZGRlZDogc3ViZG9jc0FkZGVkLCByZW1vdmVkOiBzdWJkb2NzUmVtb3ZlZCB9LCBkb2MsIHRyYW5zYWN0aW9uXSk7XG4gICAgICAgIHN1YmRvY3NSZW1vdmVkLmZvckVhY2goc3ViZG9jID0+IHN1YmRvYy5kZXN0cm95KCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNhY3Rpb25DbGVhbnVwcy5sZW5ndGggPD0gaSArIDEpIHtcbiAgICAgICAgZG9jLl90cmFuc2FjdGlvbkNsZWFudXBzID0gW107XG4gICAgICAgIGRvYy5lbWl0KCdhZnRlckFsbFRyYW5zYWN0aW9ucycsIFtkb2MsIHRyYW5zYWN0aW9uQ2xlYW51cHNdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsZWFudXBUcmFuc2FjdGlvbnModHJhbnNhY3Rpb25DbGVhbnVwcywgaSArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBmdW5jdGlvbmFsaXR5IG9mIGB5LnRyYW5zYWN0KCgpPT57Li59KWBcbiAqXG4gKiBAcGFyYW0ge0RvY30gZG9jXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRyYW5zYWN0aW9uKTp2b2lkfSBmXG4gKiBAcGFyYW0ge2FueX0gW29yaWdpbj10cnVlXVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0cmFuc2FjdCA9IChkb2MsIGYsIG9yaWdpbiA9IG51bGwsIGxvY2FsID0gdHJ1ZSkgPT4ge1xuICBjb25zdCB0cmFuc2FjdGlvbkNsZWFudXBzID0gZG9jLl90cmFuc2FjdGlvbkNsZWFudXBzO1xuICBsZXQgaW5pdGlhbENhbGwgPSBmYWxzZTtcbiAgaWYgKGRvYy5fdHJhbnNhY3Rpb24gPT09IG51bGwpIHtcbiAgICBpbml0aWFsQ2FsbCA9IHRydWU7XG4gICAgZG9jLl90cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbihkb2MsIG9yaWdpbiwgbG9jYWwpO1xuICAgIHRyYW5zYWN0aW9uQ2xlYW51cHMucHVzaChkb2MuX3RyYW5zYWN0aW9uKTtcbiAgICBpZiAodHJhbnNhY3Rpb25DbGVhbnVwcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGRvYy5lbWl0KCdiZWZvcmVBbGxUcmFuc2FjdGlvbnMnLCBbZG9jXSk7XG4gICAgfVxuICAgIGRvYy5lbWl0KCdiZWZvcmVUcmFuc2FjdGlvbicsIFtkb2MuX3RyYW5zYWN0aW9uLCBkb2NdKTtcbiAgfVxuICB0cnkge1xuICAgIGYoZG9jLl90cmFuc2FjdGlvbik7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKGluaXRpYWxDYWxsICYmIHRyYW5zYWN0aW9uQ2xlYW51cHNbMF0gPT09IGRvYy5fdHJhbnNhY3Rpb24pIHtcbiAgICAgIC8vIFRoZSBmaXJzdCB0cmFuc2FjdGlvbiBlbmRlZCwgbm93IHByb2Nlc3Mgb2JzZXJ2ZXIgY2FsbHMuXG4gICAgICAvLyBPYnNlcnZlciBjYWxsIG1heSBjcmVhdGUgbmV3IHRyYW5zYWN0aW9ucyBmb3Igd2hpY2ggd2UgbmVlZCB0byBjYWxsIHRoZSBvYnNlcnZlcnMgYW5kIGRvIGNsZWFudXAuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIG5lc3QgdGhlc2UgY2FsbHMsIHNvIHdlIGV4ZWN1dGUgdGhlc2UgY2FsbHMgb25lIGFmdGVyXG4gICAgICAvLyBhbm90aGVyLlxuICAgICAgLy8gQWxzbyB3ZSBuZWVkIHRvIGVuc3VyZSB0aGF0IGFsbCBjbGVhbnVwcyBhcmUgY2FsbGVkLCBldmVuIGlmIHRoZVxuICAgICAgLy8gb2JzZXJ2ZXMgdGhyb3cgZXJyb3JzLlxuICAgICAgLy8gVGhpcyBmaWxlIGlzIGZ1bGwgb2YgaGFja3kgdHJ5IHt9IGZpbmFsbHkge30gYmxvY2tzIHRvIGVuc3VyZSB0aGF0IGFuXG4gICAgICAvLyBldmVudCBjYW4gdGhyb3cgZXJyb3JzIGFuZCBhbHNvIHRoYXQgdGhlIGNsZWFudXAgaXMgY2FsbGVkLlxuICAgICAgY2xlYW51cFRyYW5zYWN0aW9ucyh0cmFuc2FjdGlvbkNsZWFudXBzLCAwKTtcbiAgICB9XG4gIH1cbn07XG5cbmNsYXNzIFN0YWNrSXRlbSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RlbGV0ZVNldH0gZGVsZXRpb25zXG4gICAqIEBwYXJhbSB7RGVsZXRlU2V0fSBpbnNlcnRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZGVsZXRpb25zLCBpbnNlcnRpb25zKSB7XG4gICAgdGhpcy5pbnNlcnRpb25zID0gaW5zZXJ0aW9ucztcbiAgICB0aGlzLmRlbGV0aW9ucyA9IGRlbGV0aW9ucztcbiAgICAvKipcbiAgICAgKiBVc2UgdGhpcyB0byBzYXZlIGFuZCByZXN0b3JlIG1ldGFkYXRhIGxpa2Ugc2VsZWN0aW9uIHJhbmdlXG4gICAgICovXG4gICAgdGhpcy5tZXRhID0gbmV3IE1hcCgpO1xuICB9XG59XG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyXG4gKiBAcGFyYW0ge1VuZG9NYW5hZ2VyfSB1bVxuICogQHBhcmFtIHtTdGFja0l0ZW19IHN0YWNrSXRlbVxuICovXG5jb25zdCBjbGVhclVuZG9NYW5hZ2VyU3RhY2tJdGVtID0gKHRyLCB1bSwgc3RhY2tJdGVtKSA9PiB7XG4gIGl0ZXJhdGVEZWxldGVkU3RydWN0cyh0ciwgc3RhY2tJdGVtLmRlbGV0aW9ucywgaXRlbSA9PiB7XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBJdGVtICYmIHVtLnNjb3BlLnNvbWUodHlwZSA9PiBpc1BhcmVudE9mKHR5cGUsIGl0ZW0pKSkge1xuICAgICAga2VlcEl0ZW0oaXRlbSwgZmFsc2UpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VW5kb01hbmFnZXJ9IHVuZG9NYW5hZ2VyXG4gKiBAcGFyYW0ge0FycmF5PFN0YWNrSXRlbT59IHN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gKiBAcmV0dXJuIHtTdGFja0l0ZW0/fVxuICovXG5jb25zdCBwb3BTdGFja0l0ZW0gPSAodW5kb01hbmFnZXIsIHN0YWNrLCBldmVudFR5cGUpID0+IHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgYSBjaGFuZ2UgaGFwcGVuZWRcbiAgICogQHR5cGUge1N0YWNrSXRlbT99XG4gICAqL1xuICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgLyoqXG4gICAqIEtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHRyYW5zYWN0aW9uIHNvIHdlIGNhbiBmaXJlIHRoZSBldmVudCB3aXRoIHRoZSBjaGFuZ2VkUGFyZW50VHlwZXNcbiAgICogQHR5cGUge2FueX1cbiAgICovXG4gIGxldCBfdHIgPSBudWxsO1xuICBjb25zdCBkb2MgPSB1bmRvTWFuYWdlci5kb2M7XG4gIGNvbnN0IHNjb3BlID0gdW5kb01hbmFnZXIuc2NvcGU7XG4gIHRyYW5zYWN0KGRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwICYmIHJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgY29uc3Qgc3RvcmUgPSBkb2Muc3RvcmU7XG4gICAgICBjb25zdCBzdGFja0l0ZW0gPSAvKiogQHR5cGUge1N0YWNrSXRlbX0gKi8gKHN0YWNrLnBvcCgpKTtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge1NldDxJdGVtPn1cbiAgICAgICAqL1xuICAgICAgY29uc3QgaXRlbXNUb1JlZG8gPSBuZXcgU2V0KCk7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtBcnJheTxJdGVtPn1cbiAgICAgICAqL1xuICAgICAgY29uc3QgaXRlbXNUb0RlbGV0ZSA9IFtdO1xuICAgICAgbGV0IHBlcmZvcm1lZENoYW5nZSA9IGZhbHNlO1xuICAgICAgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzKHRyYW5zYWN0aW9uLCBzdGFja0l0ZW0uaW5zZXJ0aW9ucywgc3RydWN0ID0+IHtcbiAgICAgICAgaWYgKHN0cnVjdCBpbnN0YW5jZW9mIEl0ZW0pIHtcbiAgICAgICAgICBpZiAoc3RydWN0LnJlZG9uZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IHsgaXRlbSwgZGlmZiB9ID0gZm9sbG93UmVkb25lKHN0b3JlLCBzdHJ1Y3QuaWQpO1xuICAgICAgICAgICAgaWYgKGRpZmYgPiAwKSB7XG4gICAgICAgICAgICAgIGl0ZW0gPSBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQoaXRlbS5pZC5jbGllbnQsIGl0ZW0uaWQuY2xvY2sgKyBkaWZmKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJ1Y3QgPSBpdGVtO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXN0cnVjdC5kZWxldGVkICYmIHNjb3BlLnNvbWUodHlwZSA9PiBpc1BhcmVudE9mKHR5cGUsIC8qKiBAdHlwZSB7SXRlbX0gKi8gKHN0cnVjdCkpKSkge1xuICAgICAgICAgICAgaXRlbXNUb0RlbGV0ZS5wdXNoKHN0cnVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGl0ZXJhdGVEZWxldGVkU3RydWN0cyh0cmFuc2FjdGlvbiwgc3RhY2tJdGVtLmRlbGV0aW9ucywgc3RydWN0ID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHN0cnVjdCBpbnN0YW5jZW9mIEl0ZW0gJiZcbiAgICAgICAgICBzY29wZS5zb21lKHR5cGUgPT4gaXNQYXJlbnRPZih0eXBlLCBzdHJ1Y3QpKSAmJlxuICAgICAgICAgIC8vIE5ldmVyIHJlZG8gc3RydWN0cyBpbiBzdGFja0l0ZW0uaW5zZXJ0aW9ucyBiZWNhdXNlIHRoZXkgd2VyZSBjcmVhdGVkIGFuZCBkZWxldGVkIGluIHRoZSBzYW1lIGNhcHR1cmUgaW50ZXJ2YWwuXG4gICAgICAgICAgIWlzRGVsZXRlZChzdGFja0l0ZW0uaW5zZXJ0aW9ucywgc3RydWN0LmlkKVxuICAgICAgICApIHtcbiAgICAgICAgICBpdGVtc1RvUmVkby5hZGQoc3RydWN0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpdGVtc1RvUmVkby5mb3JFYWNoKHN0cnVjdCA9PiB7XG4gICAgICAgIHBlcmZvcm1lZENoYW5nZSA9IHJlZG9JdGVtKHRyYW5zYWN0aW9uLCBzdHJ1Y3QsIGl0ZW1zVG9SZWRvLCBzdGFja0l0ZW0uaW5zZXJ0aW9ucywgdW5kb01hbmFnZXIuaWdub3JlUmVtb3RlTWFwQ2hhbmdlcykgIT09IG51bGwgfHwgcGVyZm9ybWVkQ2hhbmdlO1xuICAgICAgfSk7XG4gICAgICAvLyBXZSB3YW50IHRvIGRlbGV0ZSBpbiByZXZlcnNlIG9yZGVyIHNvIHRoYXQgY2hpbGRyZW4gYXJlIGRlbGV0ZWQgYmVmb3JlXG4gICAgICAvLyBwYXJlbnRzLCBzbyB3ZSBoYXZlIG1vcmUgaW5mb3JtYXRpb24gYXZhaWxhYmxlIHdoZW4gaXRlbXMgYXJlIGZpbHRlcmVkLlxuICAgICAgZm9yIChsZXQgaSA9IGl0ZW1zVG9EZWxldGUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zVG9EZWxldGVbaV07XG4gICAgICAgIGlmICh1bmRvTWFuYWdlci5kZWxldGVGaWx0ZXIoaXRlbSkpIHtcbiAgICAgICAgICBpdGVtLmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICAgICAgcGVyZm9ybWVkQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0ID0gcGVyZm9ybWVkQ2hhbmdlID8gc3RhY2tJdGVtIDogbnVsbDtcbiAgICB9XG4gICAgdHJhbnNhY3Rpb24uY2hhbmdlZC5mb3JFYWNoKChzdWJQcm9wcywgdHlwZSkgPT4ge1xuICAgICAgLy8gZGVzdHJveSBzZWFyY2ggbWFya2VyIGlmIG5lY2Vzc2FyeVxuICAgICAgaWYgKHN1YlByb3BzLmhhcyhudWxsKSAmJiB0eXBlLl9zZWFyY2hNYXJrZXIpIHtcbiAgICAgICAgdHlwZS5fc2VhcmNoTWFya2VyLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX3RyID0gdHJhbnNhY3Rpb247XG4gIH0sIHVuZG9NYW5hZ2VyKTtcbiAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgY29uc3QgY2hhbmdlZFBhcmVudFR5cGVzID0gX3RyLmNoYW5nZWRQYXJlbnRUeXBlcztcbiAgICB1bmRvTWFuYWdlci5lbWl0KCdzdGFjay1pdGVtLXBvcHBlZCcsIFt7IHN0YWNrSXRlbTogcmVzdWx0LCB0eXBlOiBldmVudFR5cGUsIGNoYW5nZWRQYXJlbnRUeXBlcyB9LCB1bmRvTWFuYWdlcl0pO1xuICB9XG4gIHJldHVybiByZXN1bHRcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gVW5kb01hbmFnZXJPcHRpb25zXG4gKiBAcHJvcGVydHkge251bWJlcn0gW1VuZG9NYW5hZ2VyT3B0aW9ucy5jYXB0dXJlVGltZW91dD01MDBdXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKFRyYW5zYWN0aW9uKTpib29sZWFufSBbVW5kb01hbmFnZXJPcHRpb25zLmNhcHR1cmVUcmFuc2FjdGlvbl0gRG8gbm90IGNhcHR1cmUgY2hhbmdlcyBvZiBhIFRyYW5zYWN0aW9uIGlmIHJlc3VsdCBmYWxzZS5cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oSXRlbSk6Ym9vbGVhbn0gW1VuZG9NYW5hZ2VyT3B0aW9ucy5kZWxldGVGaWx0ZXI9KCk9PnRydWVdIFNvbWV0aW1lc1xuICogaXQgaXMgbmVjZXNzYXJ5IHRvIGZpbHRlciB3aGFuIGFuIFVuZG8vUmVkbyBvcGVyYXRpb24gY2FuIGRlbGV0ZS4gSWYgdGhpc1xuICogZmlsdGVyIHJldHVybnMgZmFsc2UsIHRoZSB0eXBlL2l0ZW0gd29uJ3QgYmUgZGVsZXRlZCBldmVuIGl0IGlzIGluIHRoZVxuICogdW5kby9yZWRvIHNjb3BlLlxuICogQHByb3BlcnR5IHtTZXQ8YW55Pn0gW1VuZG9NYW5hZ2VyT3B0aW9ucy50cmFja2VkT3JpZ2lucz1uZXcgU2V0KFtudWxsXSldXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpZ25vcmVSZW1vdGVNYXBDaGFuZ2VzXSBFeHBlcmltZW50YWwuIEJ5IGRlZmF1bHQsIHRoZSBVbmRvTWFuYWdlciB3aWxsIG5ldmVyIG92ZXJ3cml0ZSByZW1vdGUgY2hhbmdlcy4gRW5hYmxlIHRoaXMgcHJvcGVydHkgdG8gZW5hYmxlIG92ZXJ3cml0aW5nIHJlbW90ZSBjaGFuZ2VzIG9uIGtleS12YWx1ZSBjaGFuZ2VzIChZLk1hcCwgcHJvcGVydGllcyBvbiBZLlhtbCwgZXRjLi4pLlxuICovXG5cbi8qKlxuICogRmlyZXMgJ3N0YWNrLWl0ZW0tYWRkZWQnIGV2ZW50IHdoZW4gYSBzdGFjayBpdGVtIHdhcyBhZGRlZCB0byBlaXRoZXIgdGhlIHVuZG8tIG9yXG4gKiB0aGUgcmVkby1zdGFjay4gWW91IG1heSBzdG9yZSBhZGRpdGlvbmFsIHN0YWNrIGluZm9ybWF0aW9uIHZpYSB0aGVcbiAqIG1ldGFkYXRhIHByb3BlcnR5IG9uIGBldmVudC5zdGFja0l0ZW0ubWV0YWAgKGl0IGlzIGEgYE1hcGAgb2YgbWV0YWRhdGEgcHJvcGVydGllcykuXG4gKiBGaXJlcyAnc3RhY2staXRlbS1wb3BwZWQnIGV2ZW50IHdoZW4gYSBzdGFjayBpdGVtIHdhcyBwb3BwZWQgZnJvbSBlaXRoZXIgdGhlXG4gKiB1bmRvLSBvciB0aGUgcmVkby1zdGFjay4gWW91IG1heSByZXN0b3JlIHRoZSBzYXZlZCBzdGFjayBpbmZvcm1hdGlvbiBmcm9tIGBldmVudC5zdGFja0l0ZW0ubWV0YWAuXG4gKlxuICogQGV4dGVuZHMge09ic2VydmFibGU8J3N0YWNrLWl0ZW0tYWRkZWQnfCdzdGFjay1pdGVtLXBvcHBlZCd8J3N0YWNrLWNsZWFyZWQnfCdzdGFjay1pdGVtLXVwZGF0ZWQnPn1cbiAqL1xuY2xhc3MgVW5kb01hbmFnZXIgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT58QXJyYXk8QWJzdHJhY3RUeXBlPGFueT4+fSB0eXBlU2NvcGUgQWNjZXB0cyBlaXRoZXIgYSBzaW5nbGUgdHlwZSwgb3IgYW4gYXJyYXkgb2YgdHlwZXNcbiAgICogQHBhcmFtIHtVbmRvTWFuYWdlck9wdGlvbnN9IG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yICh0eXBlU2NvcGUsIHtcbiAgICBjYXB0dXJlVGltZW91dCA9IDUwMCxcbiAgICBjYXB0dXJlVHJhbnNhY3Rpb24gPSB0ciA9PiB0cnVlLFxuICAgIGRlbGV0ZUZpbHRlciA9ICgpID0+IHRydWUsXG4gICAgdHJhY2tlZE9yaWdpbnMgPSBuZXcgU2V0KFtudWxsXSksXG4gICAgaWdub3JlUmVtb3RlTWFwQ2hhbmdlcyA9IGZhbHNlXG4gIH0gPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PEFic3RyYWN0VHlwZTxhbnk+Pn1cbiAgICAgKi9cbiAgICB0aGlzLnNjb3BlID0gW107XG4gICAgdGhpcy5hZGRUb1Njb3BlKHR5cGVTY29wZSk7XG4gICAgdGhpcy5kZWxldGVGaWx0ZXIgPSBkZWxldGVGaWx0ZXI7XG4gICAgdHJhY2tlZE9yaWdpbnMuYWRkKHRoaXMpO1xuICAgIHRoaXMudHJhY2tlZE9yaWdpbnMgPSB0cmFja2VkT3JpZ2lucztcbiAgICB0aGlzLmNhcHR1cmVUcmFuc2FjdGlvbiA9IGNhcHR1cmVUcmFuc2FjdGlvbjtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8U3RhY2tJdGVtPn1cbiAgICAgKi9cbiAgICB0aGlzLnVuZG9TdGFjayA9IFtdO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxTdGFja0l0ZW0+fVxuICAgICAqL1xuICAgIHRoaXMucmVkb1N0YWNrID0gW107XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSB1bmRvaW5nIChjYWxsaW5nIFVuZG9NYW5hZ2VyLnVuZG8pXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnVuZG9pbmcgPSBmYWxzZTtcbiAgICB0aGlzLnJlZG9pbmcgPSBmYWxzZTtcbiAgICB0aGlzLmRvYyA9IC8qKiBAdHlwZSB7RG9jfSAqLyAodGhpcy5zY29wZVswXS5kb2MpO1xuICAgIHRoaXMubGFzdENoYW5nZSA9IDA7XG4gICAgdGhpcy5pZ25vcmVSZW1vdGVNYXBDaGFuZ2VzID0gaWdub3JlUmVtb3RlTWFwQ2hhbmdlcztcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIHRoaXMuYWZ0ZXJUcmFuc2FjdGlvbkhhbmRsZXIgPSB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAvLyBPbmx5IHRyYWNrIGNlcnRhaW4gdHJhbnNhY3Rpb25zXG4gICAgICBpZiAoXG4gICAgICAgICF0aGlzLmNhcHR1cmVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikgfHxcbiAgICAgICAgIXRoaXMuc2NvcGUuc29tZSh0eXBlID0+IHRyYW5zYWN0aW9uLmNoYW5nZWRQYXJlbnRUeXBlcy5oYXModHlwZSkpIHx8XG4gICAgICAgICghdGhpcy50cmFja2VkT3JpZ2lucy5oYXModHJhbnNhY3Rpb24ub3JpZ2luKSAmJiAoIXRyYW5zYWN0aW9uLm9yaWdpbiB8fCAhdGhpcy50cmFja2VkT3JpZ2lucy5oYXModHJhbnNhY3Rpb24ub3JpZ2luLmNvbnN0cnVjdG9yKSkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjb25zdCB1bmRvaW5nID0gdGhpcy51bmRvaW5nO1xuICAgICAgY29uc3QgcmVkb2luZyA9IHRoaXMucmVkb2luZztcbiAgICAgIGNvbnN0IHN0YWNrID0gdW5kb2luZyA/IHRoaXMucmVkb1N0YWNrIDogdGhpcy51bmRvU3RhY2s7XG4gICAgICBpZiAodW5kb2luZykge1xuICAgICAgICB0aGlzLnN0b3BDYXB0dXJpbmcoKTsgLy8gbmV4dCB1bmRvIHNob3VsZCBub3QgYmUgYXBwZW5kZWQgdG8gbGFzdCBzdGFjayBpdGVtXG4gICAgICB9IGVsc2UgaWYgKCFyZWRvaW5nKSB7XG4gICAgICAgIC8vIG5laXRoZXIgdW5kb2luZyBub3IgcmVkb2luZzogZGVsZXRlIHJlZG9TdGFja1xuICAgICAgICB0aGlzLmNsZWFyKGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGluc2VydGlvbnMgPSBuZXcgRGVsZXRlU2V0KCk7XG4gICAgICB0cmFuc2FjdGlvbi5hZnRlclN0YXRlLmZvckVhY2goKGVuZENsb2NrLCBjbGllbnQpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhcnRDbG9jayA9IHRyYW5zYWN0aW9uLmJlZm9yZVN0YXRlLmdldChjbGllbnQpIHx8IDA7XG4gICAgICAgIGNvbnN0IGxlbiA9IGVuZENsb2NrIC0gc3RhcnRDbG9jaztcbiAgICAgICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgICBhZGRUb0RlbGV0ZVNldChpbnNlcnRpb25zLCBjbGllbnQsIHN0YXJ0Q2xvY2ssIGxlbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc3Qgbm93ID0gdGltZS5nZXRVbml4VGltZSgpO1xuICAgICAgbGV0IGRpZEFkZCA9IGZhbHNlO1xuICAgICAgaWYgKG5vdyAtIHRoaXMubGFzdENoYW5nZSA8IGNhcHR1cmVUaW1lb3V0ICYmIHN0YWNrLmxlbmd0aCA+IDAgJiYgIXVuZG9pbmcgJiYgIXJlZG9pbmcpIHtcbiAgICAgICAgLy8gYXBwZW5kIGNoYW5nZSB0byBsYXN0IHN0YWNrIG9wXG4gICAgICAgIGNvbnN0IGxhc3RPcCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICBsYXN0T3AuZGVsZXRpb25zID0gbWVyZ2VEZWxldGVTZXRzKFtsYXN0T3AuZGVsZXRpb25zLCB0cmFuc2FjdGlvbi5kZWxldGVTZXRdKTtcbiAgICAgICAgbGFzdE9wLmluc2VydGlvbnMgPSBtZXJnZURlbGV0ZVNldHMoW2xhc3RPcC5pbnNlcnRpb25zLCBpbnNlcnRpb25zXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjcmVhdGUgYSBuZXcgc3RhY2sgb3BcbiAgICAgICAgc3RhY2sucHVzaChuZXcgU3RhY2tJdGVtKHRyYW5zYWN0aW9uLmRlbGV0ZVNldCwgaW5zZXJ0aW9ucykpO1xuICAgICAgICBkaWRBZGQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCF1bmRvaW5nICYmICFyZWRvaW5nKSB7XG4gICAgICAgIHRoaXMubGFzdENoYW5nZSA9IG5vdztcbiAgICAgIH1cbiAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IGRlbGV0ZWQgc3RydWN0cyBhcmUgbm90IGdjJ2RcbiAgICAgIGl0ZXJhdGVEZWxldGVkU3RydWN0cyh0cmFuc2FjdGlvbiwgdHJhbnNhY3Rpb24uZGVsZXRlU2V0LCAvKiogQHBhcmFtIHtJdGVtfEdDfSBpdGVtICovIGl0ZW0gPT4ge1xuICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIEl0ZW0gJiYgdGhpcy5zY29wZS5zb21lKHR5cGUgPT4gaXNQYXJlbnRPZih0eXBlLCBpdGVtKSkpIHtcbiAgICAgICAgICBrZWVwSXRlbShpdGVtLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zdCBjaGFuZ2VFdmVudCA9IFt7IHN0YWNrSXRlbTogc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0sIG9yaWdpbjogdHJhbnNhY3Rpb24ub3JpZ2luLCB0eXBlOiB1bmRvaW5nID8gJ3JlZG8nIDogJ3VuZG8nLCBjaGFuZ2VkUGFyZW50VHlwZXM6IHRyYW5zYWN0aW9uLmNoYW5nZWRQYXJlbnRUeXBlcyB9LCB0aGlzXTtcbiAgICAgIGlmIChkaWRBZGQpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdzdGFjay1pdGVtLWFkZGVkJywgY2hhbmdlRXZlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbWl0KCdzdGFjay1pdGVtLXVwZGF0ZWQnLCBjaGFuZ2VFdmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmRvYy5vbignYWZ0ZXJUcmFuc2FjdGlvbicsIHRoaXMuYWZ0ZXJUcmFuc2FjdGlvbkhhbmRsZXIpO1xuICAgIHRoaXMuZG9jLm9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxBYnN0cmFjdFR5cGU8YW55Pj4gfCBBYnN0cmFjdFR5cGU8YW55Pn0geXR5cGVzXG4gICAqL1xuICBhZGRUb1Njb3BlICh5dHlwZXMpIHtcbiAgICB5dHlwZXMgPSBhcnJheS5pc0FycmF5KHl0eXBlcykgPyB5dHlwZXMgOiBbeXR5cGVzXTtcbiAgICB5dHlwZXMuZm9yRWFjaCh5dHlwZSA9PiB7XG4gICAgICBpZiAodGhpcy5zY29wZS5ldmVyeSh5dCA9PiB5dCAhPT0geXR5cGUpKSB7XG4gICAgICAgIHRoaXMuc2NvcGUucHVzaCh5dHlwZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHthbnl9IG9yaWdpblxuICAgKi9cbiAgYWRkVHJhY2tlZE9yaWdpbiAob3JpZ2luKSB7XG4gICAgdGhpcy50cmFja2VkT3JpZ2lucy5hZGQob3JpZ2luKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gb3JpZ2luXG4gICAqL1xuICByZW1vdmVUcmFja2VkT3JpZ2luIChvcmlnaW4pIHtcbiAgICB0aGlzLnRyYWNrZWRPcmlnaW5zLmRlbGV0ZShvcmlnaW4pO1xuICB9XG5cbiAgY2xlYXIgKGNsZWFyVW5kb1N0YWNrID0gdHJ1ZSwgY2xlYXJSZWRvU3RhY2sgPSB0cnVlKSB7XG4gICAgaWYgKChjbGVhclVuZG9TdGFjayAmJiB0aGlzLmNhblVuZG8oKSkgfHwgKGNsZWFyUmVkb1N0YWNrICYmIHRoaXMuY2FuUmVkbygpKSkge1xuICAgICAgdGhpcy5kb2MudHJhbnNhY3QodHIgPT4ge1xuICAgICAgICBpZiAoY2xlYXJVbmRvU3RhY2spIHtcbiAgICAgICAgICB0aGlzLnVuZG9TdGFjay5mb3JFYWNoKGl0ZW0gPT4gY2xlYXJVbmRvTWFuYWdlclN0YWNrSXRlbSh0ciwgdGhpcywgaXRlbSkpO1xuICAgICAgICAgIHRoaXMudW5kb1N0YWNrID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsZWFyUmVkb1N0YWNrKSB7XG4gICAgICAgICAgdGhpcy5yZWRvU3RhY2suZm9yRWFjaChpdGVtID0+IGNsZWFyVW5kb01hbmFnZXJTdGFja0l0ZW0odHIsIHRoaXMsIGl0ZW0pKTtcbiAgICAgICAgICB0aGlzLnJlZG9TdGFjayA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdCgnc3RhY2stY2xlYXJlZCcsIFt7IHVuZG9TdGFja0NsZWFyZWQ6IGNsZWFyVW5kb1N0YWNrLCByZWRvU3RhY2tDbGVhcmVkOiBjbGVhclJlZG9TdGFjayB9XSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5kb01hbmFnZXIgbWVyZ2VzIFVuZG8tU3RhY2tJdGVtIGlmIHRoZXkgYXJlIGNyZWF0ZWQgd2l0aGluIHRpbWUtZ2FwXG4gICAqIHNtYWxsZXIgdGhhbiBgb3B0aW9ucy5jYXB0dXJlVGltZW91dGAuIENhbGwgYHVtLnN0b3BDYXB0dXJpbmcoKWAgc28gdGhhdCB0aGUgbmV4dFxuICAgKiBTdGFja0l0ZW0gd29uJ3QgYmUgbWVyZ2VkLlxuICAgKlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgICAgLy8gd2l0aG91dCBzdG9wQ2FwdHVyaW5nXG4gICAqICAgICB5dGV4dC5pbnNlcnQoMCwgJ2EnKVxuICAgKiAgICAgeXRleHQuaW5zZXJ0KDEsICdiJylcbiAgICogICAgIHVtLnVuZG8oKVxuICAgKiAgICAgeXRleHQudG9TdHJpbmcoKSAvLyA9PiAnJyAobm90ZSB0aGF0ICdhYicgd2FzIHJlbW92ZWQpXG4gICAqICAgICAvLyB3aXRoIHN0b3BDYXB0dXJpbmdcbiAgICogICAgIHl0ZXh0Lmluc2VydCgwLCAnYScpXG4gICAqICAgICB1bS5zdG9wQ2FwdHVyaW5nKClcbiAgICogICAgIHl0ZXh0Lmluc2VydCgwLCAnYicpXG4gICAqICAgICB1bS51bmRvKClcbiAgICogICAgIHl0ZXh0LnRvU3RyaW5nKCkgLy8gPT4gJ2EnIChub3RlIHRoYXQgb25seSAnYicgd2FzIHJlbW92ZWQpXG4gICAqXG4gICAqL1xuICBzdG9wQ2FwdHVyaW5nICgpIHtcbiAgICB0aGlzLmxhc3RDaGFuZ2UgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFVuZG8gbGFzdCBjaGFuZ2VzIG9uIHR5cGUuXG4gICAqXG4gICAqIEByZXR1cm4ge1N0YWNrSXRlbT99IFJldHVybnMgU3RhY2tJdGVtIGlmIGEgY2hhbmdlIHdhcyBhcHBsaWVkXG4gICAqL1xuICB1bmRvICgpIHtcbiAgICB0aGlzLnVuZG9pbmcgPSB0cnVlO1xuICAgIGxldCByZXM7XG4gICAgdHJ5IHtcbiAgICAgIHJlcyA9IHBvcFN0YWNrSXRlbSh0aGlzLCB0aGlzLnVuZG9TdGFjaywgJ3VuZG8nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy51bmRvaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWRvIGxhc3QgdW5kbyBvcGVyYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge1N0YWNrSXRlbT99IFJldHVybnMgU3RhY2tJdGVtIGlmIGEgY2hhbmdlIHdhcyBhcHBsaWVkXG4gICAqL1xuICByZWRvICgpIHtcbiAgICB0aGlzLnJlZG9pbmcgPSB0cnVlO1xuICAgIGxldCByZXM7XG4gICAgdHJ5IHtcbiAgICAgIHJlcyA9IHBvcFN0YWNrSXRlbSh0aGlzLCB0aGlzLnJlZG9TdGFjaywgJ3JlZG8nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5yZWRvaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIC8qKlxuICAgKiBBcmUgdW5kbyBzdGVwcyBhdmFpbGFibGU/XG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB1bmRvIGlzIHBvc3NpYmxlXG4gICAqL1xuICBjYW5VbmRvICgpIHtcbiAgICByZXR1cm4gdGhpcy51bmRvU3RhY2subGVuZ3RoID4gMFxuICB9XG5cbiAgLyoqXG4gICAqIEFyZSByZWRvIHN0ZXBzIGF2YWlsYWJsZT9cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHJlZG8gaXMgcG9zc2libGVcbiAgICovXG4gIGNhblJlZG8gKCkge1xuICAgIHJldHVybiB0aGlzLnJlZG9TdGFjay5sZW5ndGggPiAwXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLnRyYWNrZWRPcmlnaW5zLmRlbGV0ZSh0aGlzKTtcbiAgICB0aGlzLmRvYy5vZmYoJ2FmdGVyVHJhbnNhY3Rpb24nLCB0aGlzLmFmdGVyVHJhbnNhY3Rpb25IYW5kbGVyKTtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICovXG5mdW5jdGlvbiAqIGxhenlTdHJ1Y3RSZWFkZXJHZW5lcmF0b3IgKGRlY29kZXIpIHtcbiAgY29uc3QgbnVtT2ZTdGF0ZVVwZGF0ZXMgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PZlN0YXRlVXBkYXRlczsgaSsrKSB7XG4gICAgY29uc3QgbnVtYmVyT2ZTdHJ1Y3RzID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgY29uc3QgY2xpZW50ID0gZGVjb2Rlci5yZWFkQ2xpZW50KCk7XG4gICAgbGV0IGNsb2NrID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZlN0cnVjdHM7IGkrKykge1xuICAgICAgY29uc3QgaW5mbyA9IGRlY29kZXIucmVhZEluZm8oKTtcbiAgICAgIC8vIEB0b2RvIHVzZSBzd2l0Y2ggaW5zdGVhZCBvZiBpZnNcbiAgICAgIGlmIChpbmZvID09PSAxMCkge1xuICAgICAgICBjb25zdCBsZW4gPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICAgICAgeWllbGQgbmV3IFNraXAoY3JlYXRlSUQoY2xpZW50LCBjbG9jayksIGxlbik7XG4gICAgICAgIGNsb2NrICs9IGxlbjtcbiAgICAgIH0gZWxzZSBpZiAoKGJpbmFyeS5CSVRTNSAmIGluZm8pICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IGNhbnRDb3B5UGFyZW50SW5mbyA9IChpbmZvICYgKGJpbmFyeS5CSVQ3IHwgYmluYXJ5LkJJVDgpKSA9PT0gMDtcbiAgICAgICAgLy8gSWYgcGFyZW50ID0gbnVsbCBhbmQgbmVpdGhlciBsZWZ0IG5vciByaWdodCBhcmUgZGVmaW5lZCwgdGhlbiB3ZSBrbm93IHRoYXQgYHBhcmVudGAgaXMgY2hpbGQgb2YgYHlgXG4gICAgICAgIC8vIGFuZCB3ZSByZWFkIHRoZSBuZXh0IHN0cmluZyBhcyBwYXJlbnRZS2V5LlxuICAgICAgICAvLyBJdCBpbmRpY2F0ZXMgaG93IHdlIHN0b3JlL3JldHJpZXZlIHBhcmVudCBmcm9tIGB5LnNoYXJlYFxuICAgICAgICAvLyBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICAgIGNvbnN0IHN0cnVjdCA9IG5ldyBJdGVtKFxuICAgICAgICAgIGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spLFxuICAgICAgICAgIG51bGwsIC8vIGxlZnRcbiAgICAgICAgICAoaW5mbyAmIGJpbmFyeS5CSVQ4KSA9PT0gYmluYXJ5LkJJVDggPyBkZWNvZGVyLnJlYWRMZWZ0SUQoKSA6IG51bGwsIC8vIG9yaWdpblxuICAgICAgICAgIG51bGwsIC8vIHJpZ2h0XG4gICAgICAgICAgKGluZm8gJiBiaW5hcnkuQklUNykgPT09IGJpbmFyeS5CSVQ3ID8gZGVjb2Rlci5yZWFkUmlnaHRJRCgpIDogbnVsbCwgLy8gcmlnaHQgb3JpZ2luXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSBGb3JjZSB3cml0aW5nIGEgc3RyaW5nIGhlcmUuXG4gICAgICAgICAgY2FudENvcHlQYXJlbnRJbmZvID8gKGRlY29kZXIucmVhZFBhcmVudEluZm8oKSA/IGRlY29kZXIucmVhZFN0cmluZygpIDogZGVjb2Rlci5yZWFkTGVmdElEKCkpIDogbnVsbCwgLy8gcGFyZW50XG4gICAgICAgICAgY2FudENvcHlQYXJlbnRJbmZvICYmIChpbmZvICYgYmluYXJ5LkJJVDYpID09PSBiaW5hcnkuQklUNiA/IGRlY29kZXIucmVhZFN0cmluZygpIDogbnVsbCwgLy8gcGFyZW50U3ViXG4gICAgICAgICAgcmVhZEl0ZW1Db250ZW50KGRlY29kZXIsIGluZm8pIC8vIGl0ZW0gY29udGVudFxuICAgICAgICApO1xuICAgICAgICB5aWVsZCBzdHJ1Y3Q7XG4gICAgICAgIGNsb2NrICs9IHN0cnVjdC5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBsZW4gPSBkZWNvZGVyLnJlYWRMZW4oKTtcbiAgICAgICAgeWllbGQgbmV3IEdDKGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spLCBsZW4pO1xuICAgICAgICBjbG9jayArPSBsZW47XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIExhenlTdHJ1Y3RSZWFkZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAgICogQHBhcmFtIHtib29sZWFufSBmaWx0ZXJTa2lwc1xuICAgKi9cbiAgY29uc3RydWN0b3IgKGRlY29kZXIsIGZpbHRlclNraXBzKSB7XG4gICAgdGhpcy5nZW4gPSBsYXp5U3RydWN0UmVhZGVyR2VuZXJhdG9yKGRlY29kZXIpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudWxsIHwgSXRlbSB8IFNraXAgfCBHQ31cbiAgICAgKi9cbiAgICB0aGlzLmN1cnIgPSBudWxsO1xuICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgIHRoaXMuZmlsdGVyU2tpcHMgPSBmaWx0ZXJTa2lwcztcbiAgICB0aGlzLm5leHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtJdGVtIHwgR0MgfCBTa2lwIHxudWxsfVxuICAgKi9cbiAgbmV4dCAoKSB7XG4gICAgLy8gaWdub3JlIFwiU2tpcFwiIHN0cnVjdHNcbiAgICBkbyB7XG4gICAgICB0aGlzLmN1cnIgPSB0aGlzLmdlbi5uZXh0KCkudmFsdWUgfHwgbnVsbDtcbiAgICB9IHdoaWxlICh0aGlzLmZpbHRlclNraXBzICYmIHRoaXMuY3VyciAhPT0gbnVsbCAmJiB0aGlzLmN1cnIuY29uc3RydWN0b3IgPT09IFNraXApXG4gICAgcmV0dXJuIHRoaXMuY3VyclxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqXG4gKi9cbmNvbnN0IGxvZ1VwZGF0ZSA9IHVwZGF0ZSA9PiBsb2dVcGRhdGVWMih1cGRhdGUsIFVwZGF0ZURlY29kZXJWMSk7XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMiB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjF9IFtZRGVjb2Rlcl1cbiAqXG4gKi9cbmNvbnN0IGxvZ1VwZGF0ZVYyID0gKHVwZGF0ZSwgWURlY29kZXIgPSBVcGRhdGVEZWNvZGVyVjIpID0+IHtcbiAgY29uc3Qgc3RydWN0cyA9IFtdO1xuICBjb25zdCB1cGRhdGVEZWNvZGVyID0gbmV3IFlEZWNvZGVyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIodXBkYXRlKSk7XG4gIGNvbnN0IGxhenlEZWNvZGVyID0gbmV3IExhenlTdHJ1Y3RSZWFkZXIodXBkYXRlRGVjb2RlciwgZmFsc2UpO1xuICBmb3IgKGxldCBjdXJyID0gbGF6eURlY29kZXIuY3VycjsgY3VyciAhPT0gbnVsbDsgY3VyciA9IGxhenlEZWNvZGVyLm5leHQoKSkge1xuICAgIHN0cnVjdHMucHVzaChjdXJyKTtcbiAgfVxuICBsb2dnaW5nLnByaW50KCdTdHJ1Y3RzOiAnLCBzdHJ1Y3RzKTtcbiAgY29uc3QgZHMgPSByZWFkRGVsZXRlU2V0KHVwZGF0ZURlY29kZXIpO1xuICBsb2dnaW5nLnByaW50KCdEZWxldGVTZXQ6ICcsIGRzKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqXG4gKi9cbmNvbnN0IGRlY29kZVVwZGF0ZSA9ICh1cGRhdGUpID0+IGRlY29kZVVwZGF0ZVYyKHVwZGF0ZSwgVXBkYXRlRGVjb2RlclYxKTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRGVjb2RlclYyIHwgdHlwZW9mIFVwZGF0ZURlY29kZXJWMX0gW1lEZWNvZGVyXVxuICpcbiAqL1xuY29uc3QgZGVjb2RlVXBkYXRlVjIgPSAodXBkYXRlLCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMikgPT4ge1xuICBjb25zdCBzdHJ1Y3RzID0gW107XG4gIGNvbnN0IHVwZGF0ZURlY29kZXIgPSBuZXcgWURlY29kZXIoZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1cGRhdGUpKTtcbiAgY29uc3QgbGF6eURlY29kZXIgPSBuZXcgTGF6eVN0cnVjdFJlYWRlcih1cGRhdGVEZWNvZGVyLCBmYWxzZSk7XG4gIGZvciAobGV0IGN1cnIgPSBsYXp5RGVjb2Rlci5jdXJyOyBjdXJyICE9PSBudWxsOyBjdXJyID0gbGF6eURlY29kZXIubmV4dCgpKSB7XG4gICAgc3RydWN0cy5wdXNoKGN1cnIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RydWN0cyxcbiAgICBkczogcmVhZERlbGV0ZVNldCh1cGRhdGVEZWNvZGVyKVxuICB9XG59O1xuXG5jbGFzcyBMYXp5U3RydWN0V3JpdGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZW5jb2Rlcikge1xuICAgIHRoaXMuY3VyckNsaWVudCA9IDA7XG4gICAgdGhpcy5zdGFydENsb2NrID0gMDtcbiAgICB0aGlzLndyaXR0ZW4gPSAwO1xuICAgIHRoaXMuZW5jb2RlciA9IGVuY29kZXI7XG4gICAgLyoqXG4gICAgICogV2Ugd2FudCB0byB3cml0ZSBvcGVyYXRpb25zIGxhemlseSwgYnV0IGFsc28gd2UgbmVlZCB0byBrbm93IGJlZm9yZWhhbmQgaG93IG1hbnkgb3BlcmF0aW9ucyB3ZSB3YW50IHRvIHdyaXRlIGZvciBlYWNoIGNsaWVudC5cbiAgICAgKlxuICAgICAqIFRoaXMga2luZCBvZiBtZXRhLWluZm9ybWF0aW9uICgjY2xpZW50cywgI3N0cnVjdHMtcGVyLWNsaWVudC13cml0dGVuKSBpcyB3cml0dGVuIHRvIHRoZSByZXN0RW5jb2Rlci5cbiAgICAgKlxuICAgICAqIFdlIGZyYWdtZW50IHRoZSByZXN0RW5jb2RlciBhbmQgc3RvcmUgYSBzbGljZSBvZiBpdCBwZXItY2xpZW50IHVudGlsIHdlIGtub3cgaG93IG1hbnkgY2xpZW50cyB0aGVyZSBhcmUuXG4gICAgICogV2hlbiB3ZSBmbHVzaCAodG9VaW50OEFycmF5KSB3ZSB3cml0ZSB0aGUgcmVzdEVuY29kZXIgdXNpbmcgdGhlIGZyYWdtZW50cyBhbmQgdGhlIG1ldGEtaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXJyYXk8eyB3cml0dGVuOiBudW1iZXIsIHJlc3RFbmNvZGVyOiBVaW50OEFycmF5IH0+fVxuICAgICAqL1xuICAgIHRoaXMuY2xpZW50U3RydWN0cyA9IFtdO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxVaW50OEFycmF5Pn0gdXBkYXRlc1xuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgbWVyZ2VVcGRhdGVzID0gdXBkYXRlcyA9PiBtZXJnZVVwZGF0ZXNWMih1cGRhdGVzLCBVcGRhdGVEZWNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMSk7XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7dHlwZW9mIERTRW5jb2RlclYxIHwgdHlwZW9mIERTRW5jb2RlclYyfSBZRW5jb2RlclxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRGVjb2RlclYxIHwgdHlwZW9mIFVwZGF0ZURlY29kZXJWMn0gWURlY29kZXJcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmNvbnN0IGVuY29kZVN0YXRlVmVjdG9yRnJvbVVwZGF0ZVYyID0gKHVwZGF0ZSwgWUVuY29kZXIgPSBEU0VuY29kZXJWMiwgWURlY29kZXIgPSBVcGRhdGVEZWNvZGVyVjIpID0+IHtcbiAgY29uc3QgZW5jb2RlciA9IG5ldyBZRW5jb2RlcigpO1xuICBjb25zdCB1cGRhdGVEZWNvZGVyID0gbmV3IExhenlTdHJ1Y3RSZWFkZXIobmV3IFlEZWNvZGVyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIodXBkYXRlKSksIGZhbHNlKTtcbiAgbGV0IGN1cnIgPSB1cGRhdGVEZWNvZGVyLmN1cnI7XG4gIGlmIChjdXJyICE9PSBudWxsKSB7XG4gICAgbGV0IHNpemUgPSAwO1xuICAgIGxldCBjdXJyQ2xpZW50ID0gY3Vyci5pZC5jbGllbnQ7XG4gICAgbGV0IHN0b3BDb3VudGluZyA9IGN1cnIuaWQuY2xvY2sgIT09IDA7IC8vIG11c3Qgc3RhcnQgYXQgMFxuICAgIGxldCBjdXJyQ2xvY2sgPSBzdG9wQ291bnRpbmcgPyAwIDogY3Vyci5pZC5jbG9jayArIGN1cnIubGVuZ3RoO1xuICAgIGZvciAoOyBjdXJyICE9PSBudWxsOyBjdXJyID0gdXBkYXRlRGVjb2Rlci5uZXh0KCkpIHtcbiAgICAgIGlmIChjdXJyQ2xpZW50ICE9PSBjdXJyLmlkLmNsaWVudCkge1xuICAgICAgICBpZiAoY3VyckNsb2NrICE9PSAwKSB7XG4gICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgIC8vIFdlIGZvdW5kIGEgbmV3IGNsaWVudFxuICAgICAgICAgIC8vIHdyaXRlIHdoYXQgd2UgaGF2ZSB0byB0aGUgZW5jb2RlclxuICAgICAgICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjdXJyQ2xpZW50KTtcbiAgICAgICAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgY3VyckNsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyQ2xpZW50ID0gY3Vyci5pZC5jbGllbnQ7XG4gICAgICAgIGN1cnJDbG9jayA9IDA7XG4gICAgICAgIHN0b3BDb3VudGluZyA9IGN1cnIuaWQuY2xvY2sgIT09IDA7XG4gICAgICB9XG4gICAgICAvLyB3ZSBpZ25vcmUgc2tpcHNcbiAgICAgIGlmIChjdXJyLmNvbnN0cnVjdG9yID09PSBTa2lwKSB7XG4gICAgICAgIHN0b3BDb3VudGluZyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIXN0b3BDb3VudGluZykge1xuICAgICAgICBjdXJyQ2xvY2sgPSBjdXJyLmlkLmNsb2NrICsgY3Vyci5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHdyaXRlIHdoYXQgd2UgaGF2ZVxuICAgIGlmIChjdXJyQ2xvY2sgIT09IDApIHtcbiAgICAgIHNpemUrKztcbiAgICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjdXJyQ2xpZW50KTtcbiAgICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjdXJyQ2xvY2spO1xuICAgIH1cbiAgICAvLyBwcmVwZW5kIHRoZSBzaXplIG9mIHRoZSBzdGF0ZSB2ZWN0b3JcbiAgICBjb25zdCBlbmMgPSBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKCk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuYywgc2l6ZSk7XG4gICAgZW5jb2Rpbmcud3JpdGVCaW5hcnlFbmNvZGVyKGVuYywgZW5jb2Rlci5yZXN0RW5jb2Rlcik7XG4gICAgZW5jb2Rlci5yZXN0RW5jb2RlciA9IGVuYztcbiAgICByZXR1cm4gZW5jb2Rlci50b1VpbnQ4QXJyYXkoKVxuICB9IGVsc2Uge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCAwKTtcbiAgICByZXR1cm4gZW5jb2Rlci50b1VpbnQ4QXJyYXkoKVxuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5jb25zdCBlbmNvZGVTdGF0ZVZlY3RvckZyb21VcGRhdGUgPSB1cGRhdGUgPT4gZW5jb2RlU3RhdGVWZWN0b3JGcm9tVXBkYXRlVjIodXBkYXRlLCBEU0VuY29kZXJWMSwgVXBkYXRlRGVjb2RlclYxKTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRGVjb2RlclYxIHwgdHlwZW9mIFVwZGF0ZURlY29kZXJWMn0gWURlY29kZXJcbiAqIEByZXR1cm4ge3sgZnJvbTogTWFwPG51bWJlcixudW1iZXI+LCB0bzogTWFwPG51bWJlcixudW1iZXI+IH19XG4gKi9cbmNvbnN0IHBhcnNlVXBkYXRlTWV0YVYyID0gKHVwZGF0ZSwgWURlY29kZXIgPSBVcGRhdGVEZWNvZGVyVjIpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtNYXA8bnVtYmVyLCBudW1iZXI+fVxuICAgKi9cbiAgY29uc3QgZnJvbSA9IG5ldyBNYXAoKTtcbiAgLyoqXG4gICAqIEB0eXBlIHtNYXA8bnVtYmVyLCBudW1iZXI+fVxuICAgKi9cbiAgY29uc3QgdG8gPSBuZXcgTWFwKCk7XG4gIGNvbnN0IHVwZGF0ZURlY29kZXIgPSBuZXcgTGF6eVN0cnVjdFJlYWRlcihuZXcgWURlY29kZXIoZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1cGRhdGUpKSwgZmFsc2UpO1xuICBsZXQgY3VyciA9IHVwZGF0ZURlY29kZXIuY3VycjtcbiAgaWYgKGN1cnIgIT09IG51bGwpIHtcbiAgICBsZXQgY3VyckNsaWVudCA9IGN1cnIuaWQuY2xpZW50O1xuICAgIGxldCBjdXJyQ2xvY2sgPSBjdXJyLmlkLmNsb2NrO1xuICAgIC8vIHdyaXRlIHRoZSBiZWdpbm5pbmcgdG8gYGZyb21gXG4gICAgZnJvbS5zZXQoY3VyckNsaWVudCwgY3VyckNsb2NrKTtcbiAgICBmb3IgKDsgY3VyciAhPT0gbnVsbDsgY3VyciA9IHVwZGF0ZURlY29kZXIubmV4dCgpKSB7XG4gICAgICBpZiAoY3VyckNsaWVudCAhPT0gY3Vyci5pZC5jbGllbnQpIHtcbiAgICAgICAgLy8gV2UgZm91bmQgYSBuZXcgY2xpZW50XG4gICAgICAgIC8vIHdyaXRlIHRoZSBlbmQgdG8gYHRvYFxuICAgICAgICB0by5zZXQoY3VyckNsaWVudCwgY3VyckNsb2NrKTtcbiAgICAgICAgLy8gd3JpdGUgdGhlIGJlZ2lubmluZyB0byBgZnJvbWBcbiAgICAgICAgZnJvbS5zZXQoY3Vyci5pZC5jbGllbnQsIGN1cnIuaWQuY2xvY2spO1xuICAgICAgICAvLyB1cGRhdGUgY3VyckNsaWVudFxuICAgICAgICBjdXJyQ2xpZW50ID0gY3Vyci5pZC5jbGllbnQ7XG4gICAgICB9XG4gICAgICBjdXJyQ2xvY2sgPSBjdXJyLmlkLmNsb2NrICsgY3Vyci5sZW5ndGg7XG4gICAgfVxuICAgIC8vIHdyaXRlIHRoZSBlbmQgdG8gYHRvYFxuICAgIHRvLnNldChjdXJyQ2xpZW50LCBjdXJyQ2xvY2spO1xuICB9XG4gIHJldHVybiB7IGZyb20sIHRvIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEByZXR1cm4ge3sgZnJvbTogTWFwPG51bWJlcixudW1iZXI+LCB0bzogTWFwPG51bWJlcixudW1iZXI+IH19XG4gKi9cbmNvbnN0IHBhcnNlVXBkYXRlTWV0YSA9IHVwZGF0ZSA9PiBwYXJzZVVwZGF0ZU1ldGFWMih1cGRhdGUsIFVwZGF0ZURlY29kZXJWMSk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgdG8gc2xpY2UgYW55IGtpbmQgb2Ygc3RydWN0IGFuZCByZXRyaWV2ZSB0aGUgcmlnaHQgcGFydC5cbiAqIEl0IGRvZXMgbm90IGhhbmRsZSBzaWRlLWVmZmVjdHMsIHNvIGl0IHNob3VsZCBvbmx5IGJlIHVzZWQgYnkgdGhlIGxhenktZW5jb2Rlci5cbiAqXG4gKiBAcGFyYW0ge0l0ZW0gfCBHQyB8IFNraXB9IGxlZnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBkaWZmXG4gKiBAcmV0dXJuIHtJdGVtIHwgR0N9XG4gKi9cbmNvbnN0IHNsaWNlU3RydWN0ID0gKGxlZnQsIGRpZmYpID0+IHtcbiAgaWYgKGxlZnQuY29uc3RydWN0b3IgPT09IEdDKSB7XG4gICAgY29uc3QgeyBjbGllbnQsIGNsb2NrIH0gPSBsZWZ0LmlkO1xuICAgIHJldHVybiBuZXcgR0MoY3JlYXRlSUQoY2xpZW50LCBjbG9jayArIGRpZmYpLCBsZWZ0Lmxlbmd0aCAtIGRpZmYpXG4gIH0gZWxzZSBpZiAobGVmdC5jb25zdHJ1Y3RvciA9PT0gU2tpcCkge1xuICAgIGNvbnN0IHsgY2xpZW50LCBjbG9jayB9ID0gbGVmdC5pZDtcbiAgICByZXR1cm4gbmV3IFNraXAoY3JlYXRlSUQoY2xpZW50LCBjbG9jayArIGRpZmYpLCBsZWZ0Lmxlbmd0aCAtIGRpZmYpXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbGVmdEl0ZW0gPSAvKiogQHR5cGUge0l0ZW19ICovIChsZWZ0KTtcbiAgICBjb25zdCB7IGNsaWVudCwgY2xvY2sgfSA9IGxlZnRJdGVtLmlkO1xuICAgIHJldHVybiBuZXcgSXRlbShcbiAgICAgIGNyZWF0ZUlEKGNsaWVudCwgY2xvY2sgKyBkaWZmKSxcbiAgICAgIG51bGwsXG4gICAgICBjcmVhdGVJRChjbGllbnQsIGNsb2NrICsgZGlmZiAtIDEpLFxuICAgICAgbnVsbCxcbiAgICAgIGxlZnRJdGVtLnJpZ2h0T3JpZ2luLFxuICAgICAgbGVmdEl0ZW0ucGFyZW50LFxuICAgICAgbGVmdEl0ZW0ucGFyZW50U3ViLFxuICAgICAgbGVmdEl0ZW0uY29udGVudC5zcGxpY2UoZGlmZilcbiAgICApXG4gIH1cbn07XG5cbi8qKlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd29ya3Mgc2ltaWxhcmx5IHRvIGByZWFkVXBkYXRlVjJgLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VWludDhBcnJheT59IHVwZGF0ZXNcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjJ9IFtZRGVjb2Rlcl1cbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZUVuY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVFbmNvZGVyVjJ9IFtZRW5jb2Rlcl1cbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmNvbnN0IG1lcmdlVXBkYXRlc1YyID0gKHVwZGF0ZXMsIFlEZWNvZGVyID0gVXBkYXRlRGVjb2RlclYyLCBZRW5jb2RlciA9IFVwZGF0ZUVuY29kZXJWMikgPT4ge1xuICBpZiAodXBkYXRlcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gdXBkYXRlc1swXVxuICB9XG4gIGNvbnN0IHVwZGF0ZURlY29kZXJzID0gdXBkYXRlcy5tYXAodXBkYXRlID0+IG5ldyBZRGVjb2RlcihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVwZGF0ZSkpKTtcbiAgbGV0IGxhenlTdHJ1Y3REZWNvZGVycyA9IHVwZGF0ZURlY29kZXJzLm1hcChkZWNvZGVyID0+IG5ldyBMYXp5U3RydWN0UmVhZGVyKGRlY29kZXIsIHRydWUpKTtcblxuICAvKipcbiAgICogQHRvZG8gd2UgZG9uJ3QgbmVlZCBvZmZzZXQgYmVjYXVzZSB3ZSBhbHdheXMgc2xpY2UgYmVmb3JlXG4gICAqIEB0eXBlIHtudWxsIHwgeyBzdHJ1Y3Q6IEl0ZW0gfCBHQyB8IFNraXAsIG9mZnNldDogbnVtYmVyIH19XG4gICAqL1xuICBsZXQgY3VycldyaXRlID0gbnVsbDtcblxuICBjb25zdCB1cGRhdGVFbmNvZGVyID0gbmV3IFlFbmNvZGVyKCk7XG4gIC8vIHdyaXRlIHN0cnVjdHMgbGF6aWx5XG4gIGNvbnN0IGxhenlTdHJ1Y3RFbmNvZGVyID0gbmV3IExhenlTdHJ1Y3RXcml0ZXIodXBkYXRlRW5jb2Rlcik7XG5cbiAgLy8gTm90ZTogV2UgbmVlZCB0byBlbnN1cmUgdGhhdCBhbGwgbGF6eVN0cnVjdERlY29kZXJzIGFyZSBmdWxseSBjb25zdW1lZFxuICAvLyBOb3RlOiBTaG91bGQgbWVyZ2UgZG9jdW1lbnQgdXBkYXRlcyB3aGVuZXZlciBwb3NzaWJsZSAtIGV2ZW4gZnJvbSBkaWZmZXJlbnQgdXBkYXRlc1xuICAvLyBOb3RlOiBTaG91bGQgaGFuZGxlIHRoYXQgc29tZSBvcGVyYXRpb25zIGNhbm5vdCBiZSBhcHBsaWVkIHlldCAoKVxuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgLy8gV3JpdGUgaGlnaGVyIGNsaWVudHMgZmlyc3Qg4oeSIHNvcnQgYnkgY2xpZW50SUQgJiBjbG9jayBhbmQgcmVtb3ZlIGRlY29kZXJzIHdpdGhvdXQgY29udGVudFxuICAgIGxhenlTdHJ1Y3REZWNvZGVycyA9IGxhenlTdHJ1Y3REZWNvZGVycy5maWx0ZXIoZGVjID0+IGRlYy5jdXJyICE9PSBudWxsKTtcbiAgICBsYXp5U3RydWN0RGVjb2RlcnMuc29ydChcbiAgICAgIC8qKiBAdHlwZSB7ZnVuY3Rpb24oYW55LGFueSk6bnVtYmVyfSAqLyAoZGVjMSwgZGVjMikgPT4ge1xuICAgICAgICBpZiAoZGVjMS5jdXJyLmlkLmNsaWVudCA9PT0gZGVjMi5jdXJyLmlkLmNsaWVudCkge1xuICAgICAgICAgIGNvbnN0IGNsb2NrRGlmZiA9IGRlYzEuY3Vyci5pZC5jbG9jayAtIGRlYzIuY3Vyci5pZC5jbG9jaztcbiAgICAgICAgICBpZiAoY2xvY2tEaWZmID09PSAwKSB7XG4gICAgICAgICAgICAvLyBAdG9kbyByZW1vdmUgcmVmZXJlbmNlcyB0byBza2lwIHNpbmNlIHRoZSBzdHJ1Y3REZWNvZGVycyBtdXN0IGZpbHRlciBTa2lwcy5cbiAgICAgICAgICAgIHJldHVybiBkZWMxLmN1cnIuY29uc3RydWN0b3IgPT09IGRlYzIuY3Vyci5jb25zdHJ1Y3RvclxuICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgOiBkZWMxLmN1cnIuY29uc3RydWN0b3IgPT09IFNraXAgPyAxIDogLTEgLy8gd2UgYXJlIGZpbHRlcmluZyBza2lwcyBhbnl3YXkuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9ja0RpZmZcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlYzIuY3Vyci5pZC5jbGllbnQgLSBkZWMxLmN1cnIuaWQuY2xpZW50XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICAgIGlmIChsYXp5U3RydWN0RGVjb2RlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjb25zdCBjdXJyRGVjb2RlciA9IGxhenlTdHJ1Y3REZWNvZGVyc1swXTtcbiAgICAvLyB3cml0ZSBmcm9tIGN1cnJEZWNvZGVyIHVudGlsIHRoZSBuZXh0IG9wZXJhdGlvbiBpcyBmcm9tIGFub3RoZXIgY2xpZW50IG9yIGlmIGZpbGxlci1zdHJ1Y3RcbiAgICAvLyB0aGVuIHdlIG5lZWQgdG8gcmVvcmRlciB0aGUgZGVjb2RlcnMgYW5kIGZpbmQgdGhlIG5leHQgb3BlcmF0aW9uIHRvIHdyaXRlXG4gICAgY29uc3QgZmlyc3RDbGllbnQgPSAvKiogQHR5cGUge0l0ZW0gfCBHQ30gKi8gKGN1cnJEZWNvZGVyLmN1cnIpLmlkLmNsaWVudDtcblxuICAgIGlmIChjdXJyV3JpdGUgIT09IG51bGwpIHtcbiAgICAgIGxldCBjdXJyID0gLyoqIEB0eXBlIHtJdGVtIHwgR0MgfCBudWxsfSAqLyAoY3VyckRlY29kZXIuY3Vycik7XG4gICAgICBsZXQgaXRlcmF0ZWQgPSBmYWxzZTtcblxuICAgICAgLy8gaXRlcmF0ZSB1bnRpbCB3ZSBmaW5kIHNvbWV0aGluZyB0aGF0IHdlIGhhdmVuJ3Qgd3JpdHRlbiBhbHJlYWR5XG4gICAgICAvLyByZW1lbWJlcjogZmlyc3QgdGhlIGhpZ2ggY2xpZW50LWlkcyBhcmUgd3JpdHRlblxuICAgICAgd2hpbGUgKGN1cnIgIT09IG51bGwgJiYgY3Vyci5pZC5jbG9jayArIGN1cnIubGVuZ3RoIDw9IGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xvY2sgKyBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aCAmJiBjdXJyLmlkLmNsaWVudCA+PSBjdXJyV3JpdGUuc3RydWN0LmlkLmNsaWVudCkge1xuICAgICAgICBjdXJyID0gY3VyckRlY29kZXIubmV4dCgpO1xuICAgICAgICBpdGVyYXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIGN1cnIgPT09IG51bGwgfHwgLy8gY3VycmVudCBkZWNvZGVyIGlzIGVtcHR5XG4gICAgICAgIGN1cnIuaWQuY2xpZW50ICE9PSBmaXJzdENsaWVudCB8fCAvLyBjaGVjayB3aGV0aGVyIHRoZXJlIGlzIGFub3RoZXIgZGVjb2RlciB0aGF0IGhhcyBoYXMgdXBkYXRlcyBmcm9tIGBmaXJzdENsaWVudGBcbiAgICAgICAgKGl0ZXJhdGVkICYmIGN1cnIuaWQuY2xvY2sgPiBjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrICsgY3VycldyaXRlLnN0cnVjdC5sZW5ndGgpIC8vIHRoZSBhYm92ZSB3aGlsZSBsb29wIHdhcyB1c2VkIGFuZCB3ZSBhcmUgcG90ZW50aWFsbHkgbWlzc2luZyB1cGRhdGVzXG4gICAgICApIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKGZpcnN0Q2xpZW50ICE9PSBjdXJyV3JpdGUuc3RydWN0LmlkLmNsaWVudCkge1xuICAgICAgICB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlcihsYXp5U3RydWN0RW5jb2RlciwgY3VycldyaXRlLnN0cnVjdCwgY3VycldyaXRlLm9mZnNldCk7XG4gICAgICAgIGN1cnJXcml0ZSA9IHsgc3RydWN0OiBjdXJyLCBvZmZzZXQ6IDAgfTtcbiAgICAgICAgY3VyckRlY29kZXIubmV4dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xvY2sgKyBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aCA8IGN1cnIuaWQuY2xvY2spIHtcbiAgICAgICAgICAvLyBAdG9kbyB3cml0ZSBjdXJyU3RydWN0ICYgc2V0IGN1cnJTdHJ1Y3QgPSBTa2lwKGNsb2NrID0gY3VyclN0cnVjdC5pZC5jbG9jayArIGN1cnJTdHJ1Y3QubGVuZ3RoLCBsZW5ndGggPSBjdXJyLmlkLmNsb2NrIC0gc2VsZi5jbG9jaylcbiAgICAgICAgICBpZiAoY3VycldyaXRlLnN0cnVjdC5jb25zdHJ1Y3RvciA9PT0gU2tpcCkge1xuICAgICAgICAgICAgLy8gZXh0ZW5kIGV4aXN0aW5nIHNraXBcbiAgICAgICAgICAgIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoID0gY3Vyci5pZC5jbG9jayArIGN1cnIubGVuZ3RoIC0gY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jaztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIobGF6eVN0cnVjdEVuY29kZXIsIGN1cnJXcml0ZS5zdHJ1Y3QsIGN1cnJXcml0ZS5vZmZzZXQpO1xuICAgICAgICAgICAgY29uc3QgZGlmZiA9IGN1cnIuaWQuY2xvY2sgLSBjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrIC0gY3VycldyaXRlLnN0cnVjdC5sZW5ndGg7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEB0eXBlIHtTa2lwfVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBzdHJ1Y3QgPSBuZXcgU2tpcChjcmVhdGVJRChmaXJzdENsaWVudCwgY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayArIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoKSwgZGlmZik7XG4gICAgICAgICAgICBjdXJyV3JpdGUgPSB7IHN0cnVjdCwgb2Zmc2V0OiAwIH07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgeyAvLyBpZiAoY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayArIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoID49IGN1cnIuaWQuY2xvY2spIHtcbiAgICAgICAgICBjb25zdCBkaWZmID0gY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayArIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoIC0gY3Vyci5pZC5jbG9jaztcbiAgICAgICAgICBpZiAoZGlmZiA+IDApIHtcbiAgICAgICAgICAgIGlmIChjdXJyV3JpdGUuc3RydWN0LmNvbnN0cnVjdG9yID09PSBTa2lwKSB7XG4gICAgICAgICAgICAgIC8vIHByZWZlciB0byBzbGljZSBTa2lwIGJlY2F1c2UgdGhlIG90aGVyIHN0cnVjdCBtaWdodCBjb250YWluIG1vcmUgaW5mb3JtYXRpb25cbiAgICAgICAgICAgICAgY3VycldyaXRlLnN0cnVjdC5sZW5ndGggLT0gZGlmZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGN1cnIgPSBzbGljZVN0cnVjdChjdXJyLCBkaWZmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFjdXJyV3JpdGUuc3RydWN0Lm1lcmdlV2l0aCgvKiogQHR5cGUge2FueX0gKi8gKGN1cnIpKSkge1xuICAgICAgICAgICAgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIobGF6eVN0cnVjdEVuY29kZXIsIGN1cnJXcml0ZS5zdHJ1Y3QsIGN1cnJXcml0ZS5vZmZzZXQpO1xuICAgICAgICAgICAgY3VycldyaXRlID0geyBzdHJ1Y3Q6IGN1cnIsIG9mZnNldDogMCB9O1xuICAgICAgICAgICAgY3VyckRlY29kZXIubmV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyV3JpdGUgPSB7IHN0cnVjdDogLyoqIEB0eXBlIHtJdGVtIHwgR0N9ICovIChjdXJyRGVjb2Rlci5jdXJyKSwgb2Zmc2V0OiAwIH07XG4gICAgICBjdXJyRGVjb2Rlci5uZXh0KCk7XG4gICAgfVxuICAgIGZvciAoXG4gICAgICBsZXQgbmV4dCA9IGN1cnJEZWNvZGVyLmN1cnI7XG4gICAgICBuZXh0ICE9PSBudWxsICYmIG5leHQuaWQuY2xpZW50ID09PSBmaXJzdENsaWVudCAmJiBuZXh0LmlkLmNsb2NrID09PSBjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrICsgY3VycldyaXRlLnN0cnVjdC5sZW5ndGggJiYgbmV4dC5jb25zdHJ1Y3RvciAhPT0gU2tpcDtcbiAgICAgIG5leHQgPSBjdXJyRGVjb2Rlci5uZXh0KClcbiAgICApIHtcbiAgICAgIHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyKGxhenlTdHJ1Y3RFbmNvZGVyLCBjdXJyV3JpdGUuc3RydWN0LCBjdXJyV3JpdGUub2Zmc2V0KTtcbiAgICAgIGN1cnJXcml0ZSA9IHsgc3RydWN0OiBuZXh0LCBvZmZzZXQ6IDAgfTtcbiAgICB9XG4gIH1cbiAgaWYgKGN1cnJXcml0ZSAhPT0gbnVsbCkge1xuICAgIHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyKGxhenlTdHJ1Y3RFbmNvZGVyLCBjdXJyV3JpdGUuc3RydWN0LCBjdXJyV3JpdGUub2Zmc2V0KTtcbiAgICBjdXJyV3JpdGUgPSBudWxsO1xuICB9XG4gIGZpbmlzaExhenlTdHJ1Y3RXcml0aW5nKGxhenlTdHJ1Y3RFbmNvZGVyKTtcblxuICBjb25zdCBkc3MgPSB1cGRhdGVEZWNvZGVycy5tYXAoZGVjb2RlciA9PiByZWFkRGVsZXRlU2V0KGRlY29kZXIpKTtcbiAgY29uc3QgZHMgPSBtZXJnZURlbGV0ZVNldHMoZHNzKTtcbiAgd3JpdGVEZWxldGVTZXQodXBkYXRlRW5jb2RlciwgZHMpO1xuICByZXR1cm4gdXBkYXRlRW5jb2Rlci50b1VpbnQ4QXJyYXkoKVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHBhcmFtIHtVaW50OEFycmF5fSBzdlxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRGVjb2RlclYxIHwgdHlwZW9mIFVwZGF0ZURlY29kZXJWMn0gW1lEZWNvZGVyXVxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRW5jb2RlclYxIHwgdHlwZW9mIFVwZGF0ZUVuY29kZXJWMn0gW1lFbmNvZGVyXVxuICovXG5jb25zdCBkaWZmVXBkYXRlVjIgPSAodXBkYXRlLCBzdiwgWURlY29kZXIgPSBVcGRhdGVEZWNvZGVyVjIsIFlFbmNvZGVyID0gVXBkYXRlRW5jb2RlclYyKSA9PiB7XG4gIGNvbnN0IHN0YXRlID0gZGVjb2RlU3RhdGVWZWN0b3Ioc3YpO1xuICBjb25zdCBlbmNvZGVyID0gbmV3IFlFbmNvZGVyKCk7XG4gIGNvbnN0IGxhenlTdHJ1Y3RXcml0ZXIgPSBuZXcgTGF6eVN0cnVjdFdyaXRlcihlbmNvZGVyKTtcbiAgY29uc3QgZGVjb2RlciA9IG5ldyBZRGVjb2RlcihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVwZGF0ZSkpO1xuICBjb25zdCByZWFkZXIgPSBuZXcgTGF6eVN0cnVjdFJlYWRlcihkZWNvZGVyLCBmYWxzZSk7XG4gIHdoaWxlIChyZWFkZXIuY3Vycikge1xuICAgIGNvbnN0IGN1cnIgPSByZWFkZXIuY3VycjtcbiAgICBjb25zdCBjdXJyQ2xpZW50ID0gY3Vyci5pZC5jbGllbnQ7XG4gICAgY29uc3Qgc3ZDbG9jayA9IHN0YXRlLmdldChjdXJyQ2xpZW50KSB8fCAwO1xuICAgIGlmIChyZWFkZXIuY3Vyci5jb25zdHJ1Y3RvciA9PT0gU2tpcCkge1xuICAgICAgLy8gdGhlIGZpcnN0IHdyaXR0ZW4gc3RydWN0IHNob3VsZG4ndCBiZSBhIHNraXBcbiAgICAgIHJlYWRlci5uZXh0KCk7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoY3Vyci5pZC5jbG9jayArIGN1cnIubGVuZ3RoID4gc3ZDbG9jaykge1xuICAgICAgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIobGF6eVN0cnVjdFdyaXRlciwgY3VyciwgbWF0aC5tYXgoc3ZDbG9jayAtIGN1cnIuaWQuY2xvY2ssIDApKTtcbiAgICAgIHJlYWRlci5uZXh0KCk7XG4gICAgICB3aGlsZSAocmVhZGVyLmN1cnIgJiYgcmVhZGVyLmN1cnIuaWQuY2xpZW50ID09PSBjdXJyQ2xpZW50KSB7XG4gICAgICAgIHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyKGxhenlTdHJ1Y3RXcml0ZXIsIHJlYWRlci5jdXJyLCAwKTtcbiAgICAgICAgcmVhZGVyLm5leHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmVhZCB1bnRpbCBzb21ldGhpbmcgbmV3IGNvbWVzIHVwXG4gICAgICB3aGlsZSAocmVhZGVyLmN1cnIgJiYgcmVhZGVyLmN1cnIuaWQuY2xpZW50ID09PSBjdXJyQ2xpZW50ICYmIHJlYWRlci5jdXJyLmlkLmNsb2NrICsgcmVhZGVyLmN1cnIubGVuZ3RoIDw9IHN2Q2xvY2spIHtcbiAgICAgICAgcmVhZGVyLm5leHQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZmluaXNoTGF6eVN0cnVjdFdyaXRpbmcobGF6eVN0cnVjdFdyaXRlcik7XG4gIC8vIHdyaXRlIGRzXG4gIGNvbnN0IGRzID0gcmVhZERlbGV0ZVNldChkZWNvZGVyKTtcbiAgd3JpdGVEZWxldGVTZXQoZW5jb2RlciwgZHMpO1xuICByZXR1cm4gZW5jb2Rlci50b1VpbnQ4QXJyYXkoKVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHBhcmFtIHtVaW50OEFycmF5fSBzdlxuICovXG5jb25zdCBkaWZmVXBkYXRlID0gKHVwZGF0ZSwgc3YpID0+IGRpZmZVcGRhdGVWMih1cGRhdGUsIHN2LCBVcGRhdGVEZWNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMSk7XG5cbi8qKlxuICogQHBhcmFtIHtMYXp5U3RydWN0V3JpdGVyfSBsYXp5V3JpdGVyXG4gKi9cbmNvbnN0IGZsdXNoTGF6eVN0cnVjdFdyaXRlciA9IGxhenlXcml0ZXIgPT4ge1xuICBpZiAobGF6eVdyaXRlci53cml0dGVuID4gMCkge1xuICAgIGxhenlXcml0ZXIuY2xpZW50U3RydWN0cy5wdXNoKHsgd3JpdHRlbjogbGF6eVdyaXRlci53cml0dGVuLCByZXN0RW5jb2RlcjogZW5jb2RpbmcudG9VaW50OEFycmF5KGxhenlXcml0ZXIuZW5jb2Rlci5yZXN0RW5jb2RlcikgfSk7XG4gICAgbGF6eVdyaXRlci5lbmNvZGVyLnJlc3RFbmNvZGVyID0gZW5jb2RpbmcuY3JlYXRlRW5jb2RlcigpO1xuICAgIGxhenlXcml0ZXIud3JpdHRlbiA9IDA7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtMYXp5U3RydWN0V3JpdGVyfSBsYXp5V3JpdGVyXG4gKiBAcGFyYW0ge0l0ZW0gfCBHQ30gc3RydWN0XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKi9cbmNvbnN0IHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyID0gKGxhenlXcml0ZXIsIHN0cnVjdCwgb2Zmc2V0KSA9PiB7XG4gIC8vIGZsdXNoIGN1cnIgaWYgd2Ugc3RhcnQgYW5vdGhlciBjbGllbnRcbiAgaWYgKGxhenlXcml0ZXIud3JpdHRlbiA+IDAgJiYgbGF6eVdyaXRlci5jdXJyQ2xpZW50ICE9PSBzdHJ1Y3QuaWQuY2xpZW50KSB7XG4gICAgZmx1c2hMYXp5U3RydWN0V3JpdGVyKGxhenlXcml0ZXIpO1xuICB9XG4gIGlmIChsYXp5V3JpdGVyLndyaXR0ZW4gPT09IDApIHtcbiAgICBsYXp5V3JpdGVyLmN1cnJDbGllbnQgPSBzdHJ1Y3QuaWQuY2xpZW50O1xuICAgIC8vIHdyaXRlIG5leHQgY2xpZW50XG4gICAgbGF6eVdyaXRlci5lbmNvZGVyLndyaXRlQ2xpZW50KHN0cnVjdC5pZC5jbGllbnQpO1xuICAgIC8vIHdyaXRlIHN0YXJ0Q2xvY2tcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQobGF6eVdyaXRlci5lbmNvZGVyLnJlc3RFbmNvZGVyLCBzdHJ1Y3QuaWQuY2xvY2sgKyBvZmZzZXQpO1xuICB9XG4gIHN0cnVjdC53cml0ZShsYXp5V3JpdGVyLmVuY29kZXIsIG9mZnNldCk7XG4gIGxhenlXcml0ZXIud3JpdHRlbisrO1xufTtcbi8qKlxuICogQ2FsbCB0aGlzIGZ1bmN0aW9uIHdoZW4gd2UgY29sbGVjdGVkIGFsbCBwYXJ0cyBhbmQgd2FudCB0b1xuICogcHV0IGFsbCB0aGUgcGFydHMgdG9nZXRoZXIuIEFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QsXG4gKiB5b3UgY2FuIGNvbnRpbnVlIHVzaW5nIHRoZSBVcGRhdGVFbmNvZGVyLlxuICpcbiAqIEBwYXJhbSB7TGF6eVN0cnVjdFdyaXRlcn0gbGF6eVdyaXRlclxuICovXG5jb25zdCBmaW5pc2hMYXp5U3RydWN0V3JpdGluZyA9IChsYXp5V3JpdGVyKSA9PiB7XG4gIGZsdXNoTGF6eVN0cnVjdFdyaXRlcihsYXp5V3JpdGVyKTtcblxuICAvLyB0aGlzIGlzIGEgZnJlc2ggZW5jb2RlciBiZWNhdXNlIHdlIGNhbGxlZCBmbHVzaEN1cnJcbiAgY29uc3QgcmVzdEVuY29kZXIgPSBsYXp5V3JpdGVyLmVuY29kZXIucmVzdEVuY29kZXI7XG5cbiAgLyoqXG4gICAqIE5vdyB3ZSBwdXQgYWxsIHRoZSBmcmFnbWVudHMgdG9nZXRoZXIuXG4gICAqIFRoaXMgd29ya3Mgc2ltaWxhcmx5IHRvIGB3cml0ZUNsaWVudHNTdHJ1Y3RzYFxuICAgKi9cblxuICAvLyB3cml0ZSAjIHN0YXRlcyB0aGF0IHdlcmUgdXBkYXRlZCAtIGkuZS4gdGhlIGNsaWVudHNcbiAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHJlc3RFbmNvZGVyLCBsYXp5V3JpdGVyLmNsaWVudFN0cnVjdHMubGVuZ3RoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxhenlXcml0ZXIuY2xpZW50U3RydWN0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHBhcnRTdHJ1Y3RzID0gbGF6eVdyaXRlci5jbGllbnRTdHJ1Y3RzW2ldO1xuICAgIC8qKlxuICAgICAqIFdvcmtzIHNpbWlsYXJseSB0byBgd3JpdGVTdHJ1Y3RzYFxuICAgICAqL1xuICAgIC8vIHdyaXRlICMgZW5jb2RlZCBzdHJ1Y3RzXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHJlc3RFbmNvZGVyLCBwYXJ0U3RydWN0cy53cml0dGVuKTtcbiAgICAvLyB3cml0ZSB0aGUgcmVzdCBvZiB0aGUgZnJhZ21lbnRcbiAgICBlbmNvZGluZy53cml0ZVVpbnQ4QXJyYXkocmVzdEVuY29kZXIsIHBhcnRTdHJ1Y3RzLnJlc3RFbmNvZGVyKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRGVjb2RlclYyIHwgdHlwZW9mIFVwZGF0ZURlY29kZXJWMX0gWURlY29kZXJcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZUVuY29kZXJWMiB8IHR5cGVvZiBVcGRhdGVFbmNvZGVyVjEgfSBZRW5jb2RlclxuICovXG5jb25zdCBjb252ZXJ0VXBkYXRlRm9ybWF0ID0gKHVwZGF0ZSwgWURlY29kZXIsIFlFbmNvZGVyKSA9PiB7XG4gIGNvbnN0IHVwZGF0ZURlY29kZXIgPSBuZXcgWURlY29kZXIoZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1cGRhdGUpKTtcbiAgY29uc3QgbGF6eURlY29kZXIgPSBuZXcgTGF6eVN0cnVjdFJlYWRlcih1cGRhdGVEZWNvZGVyLCBmYWxzZSk7XG4gIGNvbnN0IHVwZGF0ZUVuY29kZXIgPSBuZXcgWUVuY29kZXIoKTtcbiAgY29uc3QgbGF6eVdyaXRlciA9IG5ldyBMYXp5U3RydWN0V3JpdGVyKHVwZGF0ZUVuY29kZXIpO1xuXG4gIGZvciAobGV0IGN1cnIgPSBsYXp5RGVjb2Rlci5jdXJyOyBjdXJyICE9PSBudWxsOyBjdXJyID0gbGF6eURlY29kZXIubmV4dCgpKSB7XG4gICAgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIobGF6eVdyaXRlciwgY3VyciwgMCk7XG4gIH1cbiAgZmluaXNoTGF6eVN0cnVjdFdyaXRpbmcobGF6eVdyaXRlcik7XG4gIGNvbnN0IGRzID0gcmVhZERlbGV0ZVNldCh1cGRhdGVEZWNvZGVyKTtcbiAgd3JpdGVEZWxldGVTZXQodXBkYXRlRW5jb2RlciwgZHMpO1xuICByZXR1cm4gdXBkYXRlRW5jb2Rlci50b1VpbnQ4QXJyYXkoKVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICovXG5jb25zdCBjb252ZXJ0VXBkYXRlRm9ybWF0VjFUb1YyID0gdXBkYXRlID0+IGNvbnZlcnRVcGRhdGVGb3JtYXQodXBkYXRlLCBVcGRhdGVEZWNvZGVyVjEsIFVwZGF0ZUVuY29kZXJWMik7XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqL1xuY29uc3QgY29udmVydFVwZGF0ZUZvcm1hdFYyVG9WMSA9IHVwZGF0ZSA9PiBjb252ZXJ0VXBkYXRlRm9ybWF0KHVwZGF0ZSwgVXBkYXRlRGVjb2RlclYyLCBVcGRhdGVFbmNvZGVyVjEpO1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7QWJzdHJhY3RUeXBlPGFueT59IFRcbiAqIFlFdmVudCBkZXNjcmliZXMgdGhlIGNoYW5nZXMgb24gYSBZVHlwZS5cbiAqL1xuY2xhc3MgWUV2ZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VH0gdGFyZ2V0IFRoZSBjaGFuZ2VkIHR5cGUuXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodGFyZ2V0LCB0cmFuc2FjdGlvbikge1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9uIHdoaWNoIHRoaXMgZXZlbnQgd2FzIGNyZWF0ZWQgb24uXG4gICAgICogQHR5cGUge1R9XG4gICAgICovXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgdGFyZ2V0IG9uIHdoaWNoIHRoZSBvYnNlcnZlIGNhbGxiYWNrIGlzIGNhbGxlZC5cbiAgICAgKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59XG4gICAgICovXG4gICAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gdGFyZ2V0O1xuICAgIC8qKlxuICAgICAqIFRoZSB0cmFuc2FjdGlvbiB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50LlxuICAgICAqIEB0eXBlIHtUcmFuc2FjdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLnRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb247XG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdHxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX2NoYW5nZXMgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudWxsIHwgTWFwPHN0cmluZywgeyBhY3Rpb246ICdhZGQnIHwgJ3VwZGF0ZScgfCAnZGVsZXRlJywgb2xkVmFsdWU6IGFueSwgbmV3VmFsdWU6IGFueSB9Pn1cbiAgICAgKi9cbiAgICB0aGlzLl9rZXlzID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVsbCB8IEFycmF5PHsgaW5zZXJ0Pzogc3RyaW5nIHwgQXJyYXk8YW55PiB8IG9iamVjdCB8IEFic3RyYWN0VHlwZTxhbnk+LCByZXRhaW4/OiBudW1iZXIsIGRlbGV0ZT86IG51bWJlciwgYXR0cmlidXRlcz86IE9iamVjdDxzdHJpbmcsIGFueT4gfT59XG4gICAgICovXG4gICAgdGhpcy5fZGVsdGEgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBwYXRoIGZyb20gYHlgIHRvIHRoZSBjaGFuZ2VkIHR5cGUuXG4gICAqXG4gICAqIEB0b2RvIHYxNCBzaG91bGQgc3RhbmRhcmRpemUgb24gcGF0aDogQXJyYXk8e3BhcmVudCwgaW5kZXh9PiBiZWNhdXNlIHRoYXQgaXMgZWFzaWVyIHRvIHdvcmsgd2l0aC5cbiAgICpcbiAgICogVGhlIGZvbGxvd2luZyBwcm9wZXJ0eSBob2xkczpcbiAgICogQGV4YW1wbGVcbiAgICogICBsZXQgdHlwZSA9IHlcbiAgICogICBldmVudC5wYXRoLmZvckVhY2goZGlyID0+IHtcbiAgICogICAgIHR5cGUgPSB0eXBlLmdldChkaXIpXG4gICAqICAgfSlcbiAgICogICB0eXBlID09PSBldmVudC50YXJnZXQgLy8gPT4gdHJ1ZVxuICAgKi9cbiAgZ2V0IHBhdGggKCkge1xuICAgIC8vIEB0cy1pZ25vcmUgX2l0ZW0gaXMgZGVmaW5lZCBiZWNhdXNlIHRhcmdldCBpcyBpbnRlZ3JhdGVkXG4gICAgcmV0dXJuIGdldFBhdGhUbyh0aGlzLmN1cnJlbnRUYXJnZXQsIHRoaXMudGFyZ2V0KVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgc3RydWN0IGlzIGRlbGV0ZWQgYnkgdGhpcyBldmVudC5cbiAgICpcbiAgICogSW4gY29udHJhc3QgdG8gY2hhbmdlLmRlbGV0ZWQsIHRoaXMgbWV0aG9kIGFsc28gcmV0dXJucyB0cnVlIGlmIHRoZSBzdHJ1Y3Qgd2FzIGFkZGVkIGFuZCB0aGVuIGRlbGV0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7QWJzdHJhY3RTdHJ1Y3R9IHN0cnVjdFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZGVsZXRlcyAoc3RydWN0KSB7XG4gICAgcmV0dXJuIGlzRGVsZXRlZCh0aGlzLnRyYW5zYWN0aW9uLmRlbGV0ZVNldCwgc3RydWN0LmlkKVxuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtNYXA8c3RyaW5nLCB7IGFjdGlvbjogJ2FkZCcgfCAndXBkYXRlJyB8ICdkZWxldGUnLCBvbGRWYWx1ZTogYW55LCBuZXdWYWx1ZTogYW55IH0+fVxuICAgKi9cbiAgZ2V0IGtleXMgKCkge1xuICAgIGlmICh0aGlzLl9rZXlzID09PSBudWxsKSB7XG4gICAgICBjb25zdCBrZXlzID0gbmV3IE1hcCgpO1xuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG4gICAgICBjb25zdCBjaGFuZ2VkID0gLyoqIEB0eXBlIFNldDxzdHJpbmd8bnVsbD4gKi8gKHRoaXMudHJhbnNhY3Rpb24uY2hhbmdlZC5nZXQodGFyZ2V0KSk7XG4gICAgICBjaGFuZ2VkLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKGtleSAhPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSAvKiogQHR5cGUge0l0ZW19ICovICh0YXJnZXQuX21hcC5nZXQoa2V5KSk7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQHR5cGUgeydkZWxldGUnIHwgJ2FkZCcgfCAndXBkYXRlJ31cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBsZXQgYWN0aW9uO1xuICAgICAgICAgIGxldCBvbGRWYWx1ZTtcbiAgICAgICAgICBpZiAodGhpcy5hZGRzKGl0ZW0pKSB7XG4gICAgICAgICAgICBsZXQgcHJldiA9IGl0ZW0ubGVmdDtcbiAgICAgICAgICAgIHdoaWxlIChwcmV2ICE9PSBudWxsICYmIHRoaXMuYWRkcyhwcmV2KSkge1xuICAgICAgICAgICAgICBwcmV2ID0gcHJldi5sZWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCAmJiB0aGlzLmRlbGV0ZXMocHJldikpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSAnZGVsZXRlJztcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGFycmF5Lmxhc3QocHJldi5jb250ZW50LmdldENvbnRlbnQoKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChwcmV2ICE9PSBudWxsICYmIHRoaXMuZGVsZXRlcyhwcmV2KSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9ICd1cGRhdGUnO1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gYXJyYXkubGFzdChwcmV2LmNvbnRlbnQuZ2V0Q29udGVudCgpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSAnYWRkJztcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWxldGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgIGFjdGlvbiA9ICdkZWxldGUnO1xuICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGFycmF5Lmxhc3QoLyoqIEB0eXBlIHtJdGVtfSAqLyBpdGVtLmNvbnRlbnQuZ2V0Q29udGVudCgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiAvLyBub3BcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAga2V5cy5zZXQoa2V5LCB7IGFjdGlvbiwgb2xkVmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5fa2V5cyA9IGtleXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9rZXlzXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge0FycmF5PHtpbnNlcnQ/OiBzdHJpbmcgfCBBcnJheTxhbnk+IHwgb2JqZWN0IHwgQWJzdHJhY3RUeXBlPGFueT4sIHJldGFpbj86IG51bWJlciwgZGVsZXRlPzogbnVtYmVyLCBhdHRyaWJ1dGVzPzogT2JqZWN0PHN0cmluZywgYW55Pn0+fVxuICAgKi9cbiAgZ2V0IGRlbHRhICgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFuZ2VzLmRlbHRhXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBzdHJ1Y3QgaXMgYWRkZWQgYnkgdGhpcyBldmVudC5cbiAgICpcbiAgICogSW4gY29udHJhc3QgdG8gY2hhbmdlLmRlbGV0ZWQsIHRoaXMgbWV0aG9kIGFsc28gcmV0dXJucyB0cnVlIGlmIHRoZSBzdHJ1Y3Qgd2FzIGFkZGVkIGFuZCB0aGVuIGRlbGV0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7QWJzdHJhY3RTdHJ1Y3R9IHN0cnVjdFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgYWRkcyAoc3RydWN0KSB7XG4gICAgcmV0dXJuIHN0cnVjdC5pZC5jbG9jayA+PSAodGhpcy50cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoc3RydWN0LmlkLmNsaWVudCkgfHwgMClcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7e2FkZGVkOlNldDxJdGVtPixkZWxldGVkOlNldDxJdGVtPixrZXlzOk1hcDxzdHJpbmcse2FjdGlvbjonYWRkJ3wndXBkYXRlJ3wnZGVsZXRlJyxvbGRWYWx1ZTphbnl9PixkZWx0YTpBcnJheTx7aW5zZXJ0PzpBcnJheTxhbnk+fHN0cmluZywgZGVsZXRlPzpudW1iZXIsIHJldGFpbj86bnVtYmVyfT59fVxuICAgKi9cbiAgZ2V0IGNoYW5nZXMgKCkge1xuICAgIGxldCBjaGFuZ2VzID0gdGhpcy5fY2hhbmdlcztcbiAgICBpZiAoY2hhbmdlcyA9PT0gbnVsbCkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG4gICAgICBjb25zdCBhZGRlZCA9IHNldC5jcmVhdGUoKTtcbiAgICAgIGNvbnN0IGRlbGV0ZWQgPSBzZXQuY3JlYXRlKCk7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtBcnJheTx7aW5zZXJ0OkFycmF5PGFueT59fHtkZWxldGU6bnVtYmVyfXx7cmV0YWluOm51bWJlcn0+fVxuICAgICAgICovXG4gICAgICBjb25zdCBkZWx0YSA9IFtdO1xuICAgICAgY2hhbmdlcyA9IHtcbiAgICAgICAgYWRkZWQsXG4gICAgICAgIGRlbGV0ZWQsXG4gICAgICAgIGRlbHRhLFxuICAgICAgICBrZXlzOiB0aGlzLmtleXNcbiAgICAgIH07XG4gICAgICBjb25zdCBjaGFuZ2VkID0gLyoqIEB0eXBlIFNldDxzdHJpbmd8bnVsbD4gKi8gKHRoaXMudHJhbnNhY3Rpb24uY2hhbmdlZC5nZXQodGFyZ2V0KSk7XG4gICAgICBpZiAoY2hhbmdlZC5oYXMobnVsbCkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHthbnl9XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgbGFzdE9wID0gbnVsbDtcbiAgICAgICAgY29uc3QgcGFja09wID0gKCkgPT4ge1xuICAgICAgICAgIGlmIChsYXN0T3ApIHtcbiAgICAgICAgICAgIGRlbHRhLnB1c2gobGFzdE9wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGZvciAobGV0IGl0ZW0gPSB0YXJnZXQuX3N0YXJ0OyBpdGVtICE9PSBudWxsOyBpdGVtID0gaXRlbS5yaWdodCkge1xuICAgICAgICAgIGlmIChpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlbGV0ZXMoaXRlbSkgJiYgIXRoaXMuYWRkcyhpdGVtKSkge1xuICAgICAgICAgICAgICBpZiAobGFzdE9wID09PSBudWxsIHx8IGxhc3RPcC5kZWxldGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhY2tPcCgpO1xuICAgICAgICAgICAgICAgIGxhc3RPcCA9IHsgZGVsZXRlOiAwIH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdE9wLmRlbGV0ZSArPSBpdGVtLmxlbmd0aDtcbiAgICAgICAgICAgICAgZGVsZXRlZC5hZGQoaXRlbSk7XG4gICAgICAgICAgICB9IC8vIGVsc2Ugbm9wXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFkZHMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgaWYgKGxhc3RPcCA9PT0gbnVsbCB8fCBsYXN0T3AuaW5zZXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYWNrT3AoKTtcbiAgICAgICAgICAgICAgICBsYXN0T3AgPSB7IGluc2VydDogW10gfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0T3AuaW5zZXJ0ID0gbGFzdE9wLmluc2VydC5jb25jYXQoaXRlbS5jb250ZW50LmdldENvbnRlbnQoKSk7XG4gICAgICAgICAgICAgIGFkZGVkLmFkZChpdGVtKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChsYXN0T3AgPT09IG51bGwgfHwgbGFzdE9wLnJldGFpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFja09wKCk7XG4gICAgICAgICAgICAgICAgbGFzdE9wID0geyByZXRhaW46IDAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0T3AucmV0YWluICs9IGl0ZW0ubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdE9wICE9PSBudWxsICYmIGxhc3RPcC5yZXRhaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHBhY2tPcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9jaGFuZ2VzID0gY2hhbmdlcztcbiAgICB9XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7YW55fSAqLyAoY2hhbmdlcylcbiAgfVxufVxuXG4vKipcbiAqIENvbXB1dGUgdGhlIHBhdGggZnJvbSB0aGlzIHR5cGUgdG8gdGhlIHNwZWNpZmllZCB0YXJnZXQuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgLy8gYGNoaWxkYCBzaG91bGQgYmUgYWNjZXNzaWJsZSB2aWEgYHR5cGUuZ2V0KHBhdGhbMF0pLmdldChwYXRoWzFdKS4uYFxuICogICBjb25zdCBwYXRoID0gdHlwZS5nZXRQYXRoVG8oY2hpbGQpXG4gKiAgIC8vIGFzc3VtaW5nIGB0eXBlIGluc3RhbmNlb2YgWUFycmF5YFxuICogICBjb25zb2xlLmxvZyhwYXRoKSAvLyBtaWdodCBsb29rIGxpa2UgPT4gWzIsICdrZXkxJ11cbiAqICAgY2hpbGQgPT09IHR5cGUuZ2V0KHBhdGhbMF0pLmdldChwYXRoWzFdKVxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gY2hpbGQgdGFyZ2V0XG4gKiBAcmV0dXJuIHtBcnJheTxzdHJpbmd8bnVtYmVyPn0gUGF0aCB0byB0aGUgdGFyZ2V0XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBnZXRQYXRoVG8gPSAocGFyZW50LCBjaGlsZCkgPT4ge1xuICBjb25zdCBwYXRoID0gW107XG4gIHdoaWxlIChjaGlsZC5faXRlbSAhPT0gbnVsbCAmJiBjaGlsZCAhPT0gcGFyZW50KSB7XG4gICAgaWYgKGNoaWxkLl9pdGVtLnBhcmVudFN1YiAhPT0gbnVsbCkge1xuICAgICAgLy8gcGFyZW50IGlzIG1hcC1pc2hcbiAgICAgIHBhdGgudW5zaGlmdChjaGlsZC5faXRlbS5wYXJlbnRTdWIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBwYXJlbnQgaXMgYXJyYXktaXNoXG4gICAgICBsZXQgaSA9IDA7XG4gICAgICBsZXQgYyA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChjaGlsZC5faXRlbS5wYXJlbnQpLl9zdGFydDtcbiAgICAgIHdoaWxlIChjICE9PSBjaGlsZC5faXRlbSAmJiBjICE9PSBudWxsKSB7XG4gICAgICAgIGlmICghYy5kZWxldGVkKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIGMgPSBjLnJpZ2h0O1xuICAgICAgfVxuICAgICAgcGF0aC51bnNoaWZ0KGkpO1xuICAgIH1cbiAgICBjaGlsZCA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChjaGlsZC5faXRlbS5wYXJlbnQpO1xuICB9XG4gIHJldHVybiBwYXRoXG59O1xuXG5jb25zdCBtYXhTZWFyY2hNYXJrZXIgPSA4MDtcblxuLyoqXG4gKiBBIHVuaXF1ZSB0aW1lc3RhbXAgdGhhdCBpZGVudGlmaWVzIGVhY2ggbWFya2VyLlxuICpcbiAqIFRpbWUgaXMgcmVsYXRpdmUsLi4gdGhpcyBpcyBtb3JlIGxpa2UgYW4gZXZlci1pbmNyZWFzaW5nIGNsb2NrLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmxldCBnbG9iYWxTZWFyY2hNYXJrZXJUaW1lc3RhbXAgPSAwO1xuXG5jbGFzcyBBcnJheVNlYXJjaE1hcmtlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0l0ZW19IHBcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqL1xuICBjb25zdHJ1Y3RvciAocCwgaW5kZXgpIHtcbiAgICBwLm1hcmtlciA9IHRydWU7XG4gICAgdGhpcy5wID0gcDtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgdGhpcy50aW1lc3RhbXAgPSBnbG9iYWxTZWFyY2hNYXJrZXJUaW1lc3RhbXArKztcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXlTZWFyY2hNYXJrZXJ9IG1hcmtlclxuICovXG5jb25zdCByZWZyZXNoTWFya2VyVGltZXN0YW1wID0gbWFya2VyID0+IHsgbWFya2VyLnRpbWVzdGFtcCA9IGdsb2JhbFNlYXJjaE1hcmtlclRpbWVzdGFtcCsrOyB9O1xuXG4vKipcbiAqIFRoaXMgaXMgcmF0aGVyIGNvbXBsZXggc28gdGhpcyBmdW5jdGlvbiBpcyB0aGUgb25seSB0aGluZyB0aGF0IHNob3VsZCBvdmVyd3JpdGUgYSBtYXJrZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5U2VhcmNoTWFya2VyfSBtYXJrZXJcbiAqIEBwYXJhbSB7SXRlbX0gcFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKi9cbmNvbnN0IG92ZXJ3cml0ZU1hcmtlciA9IChtYXJrZXIsIHAsIGluZGV4KSA9PiB7XG4gIG1hcmtlci5wLm1hcmtlciA9IGZhbHNlO1xuICBtYXJrZXIucCA9IHA7XG4gIHAubWFya2VyID0gdHJ1ZTtcbiAgbWFya2VyLmluZGV4ID0gaW5kZXg7XG4gIG1hcmtlci50aW1lc3RhbXAgPSBnbG9iYWxTZWFyY2hNYXJrZXJUaW1lc3RhbXArKztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxBcnJheVNlYXJjaE1hcmtlcj59IHNlYXJjaE1hcmtlclxuICogQHBhcmFtIHtJdGVtfSBwXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqL1xuY29uc3QgbWFya1Bvc2l0aW9uID0gKHNlYXJjaE1hcmtlciwgcCwgaW5kZXgpID0+IHtcbiAgaWYgKHNlYXJjaE1hcmtlci5sZW5ndGggPj0gbWF4U2VhcmNoTWFya2VyKSB7XG4gICAgLy8gb3ZlcnJpZGUgb2xkZXN0IG1hcmtlciAod2UgZG9uJ3Qgd2FudCB0byBjcmVhdGUgbW9yZSBvYmplY3RzKVxuICAgIGNvbnN0IG1hcmtlciA9IHNlYXJjaE1hcmtlci5yZWR1Y2UoKGEsIGIpID0+IGEudGltZXN0YW1wIDwgYi50aW1lc3RhbXAgPyBhIDogYik7XG4gICAgb3ZlcndyaXRlTWFya2VyKG1hcmtlciwgcCwgaW5kZXgpO1xuICAgIHJldHVybiBtYXJrZXJcbiAgfSBlbHNlIHtcbiAgICAvLyBjcmVhdGUgbmV3IG1hcmtlclxuICAgIGNvbnN0IHBtID0gbmV3IEFycmF5U2VhcmNoTWFya2VyKHAsIGluZGV4KTtcbiAgICBzZWFyY2hNYXJrZXIucHVzaChwbSk7XG4gICAgcmV0dXJuIHBtXG4gIH1cbn07XG5cbi8qKlxuICogU2VhcmNoIG1hcmtlciBoZWxwIHVzIHRvIGZpbmQgcG9zaXRpb25zIGluIHRoZSBhc3NvY2lhdGl2ZSBhcnJheSBmYXN0ZXIuXG4gKlxuICogVGhleSBzcGVlZCB1cCB0aGUgcHJvY2VzcyBvZiBmaW5kaW5nIGEgcG9zaXRpb24gd2l0aG91dCBtdWNoIGJvb2trZWVwaW5nLlxuICpcbiAqIEEgbWF4aW11bSBvZiBgbWF4U2VhcmNoTWFya2VyYCBvYmplY3RzIGFyZSBjcmVhdGVkLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYWx3YXlzIHJldHVybnMgYSByZWZyZXNoZWQgbWFya2VyICh1cGRhdGVkIHRpbWVzdGFtcClcbiAqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB5YXJyYXlcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICovXG5jb25zdCBmaW5kTWFya2VyID0gKHlhcnJheSwgaW5kZXgpID0+IHtcbiAgaWYgKHlhcnJheS5fc3RhcnQgPT09IG51bGwgfHwgaW5kZXggPT09IDAgfHwgeWFycmF5Ll9zZWFyY2hNYXJrZXIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGNvbnN0IG1hcmtlciA9IHlhcnJheS5fc2VhcmNoTWFya2VyLmxlbmd0aCA9PT0gMCA/IG51bGwgOiB5YXJyYXkuX3NlYXJjaE1hcmtlci5yZWR1Y2UoKGEsIGIpID0+IG1hdGguYWJzKGluZGV4IC0gYS5pbmRleCkgPCBtYXRoLmFicyhpbmRleCAtIGIuaW5kZXgpID8gYSA6IGIpO1xuICBsZXQgcCA9IHlhcnJheS5fc3RhcnQ7XG4gIGxldCBwaW5kZXggPSAwO1xuICBpZiAobWFya2VyICE9PSBudWxsKSB7XG4gICAgcCA9IG1hcmtlci5wO1xuICAgIHBpbmRleCA9IG1hcmtlci5pbmRleDtcbiAgICByZWZyZXNoTWFya2VyVGltZXN0YW1wKG1hcmtlcik7IC8vIHdlIHVzZWQgaXQsIHdlIG1pZ2h0IG5lZWQgdG8gdXNlIGl0IGFnYWluXG4gIH1cbiAgLy8gaXRlcmF0ZSB0byByaWdodCBpZiBwb3NzaWJsZVxuICB3aGlsZSAocC5yaWdodCAhPT0gbnVsbCAmJiBwaW5kZXggPCBpbmRleCkge1xuICAgIGlmICghcC5kZWxldGVkICYmIHAuY291bnRhYmxlKSB7XG4gICAgICBpZiAoaW5kZXggPCBwaW5kZXggKyBwLmxlbmd0aCkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgcGluZGV4ICs9IHAubGVuZ3RoO1xuICAgIH1cbiAgICBwID0gcC5yaWdodDtcbiAgfVxuICAvLyBpdGVyYXRlIHRvIGxlZnQgaWYgbmVjZXNzYXJ5IChtaWdodCBiZSB0aGF0IHBpbmRleCA+IGluZGV4KVxuICB3aGlsZSAocC5sZWZ0ICE9PSBudWxsICYmIHBpbmRleCA+IGluZGV4KSB7XG4gICAgcCA9IHAubGVmdDtcbiAgICBpZiAoIXAuZGVsZXRlZCAmJiBwLmNvdW50YWJsZSkge1xuICAgICAgcGluZGV4IC09IHAubGVuZ3RoO1xuICAgIH1cbiAgfVxuICAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IHAgY2FuJ3QgYmUgbWVyZ2VkIHdpdGggbGVmdCwgYmVjYXVzZSB0aGF0IHdvdWxkIHNjcmV3IHVwIGV2ZXJ5dGhpbmdcbiAgLy8gaW4gdGhhdCBjYXMganVzdCByZXR1cm4gd2hhdCB3ZSBoYXZlIChpdCBpcyBtb3N0IGxpa2VseSB0aGUgYmVzdCBtYXJrZXIgYW55d2F5KVxuICAvLyBpdGVyYXRlIHRvIGxlZnQgdW50aWwgcCBjYW4ndCBiZSBtZXJnZWQgd2l0aCBsZWZ0XG4gIHdoaWxlIChwLmxlZnQgIT09IG51bGwgJiYgcC5sZWZ0LmlkLmNsaWVudCA9PT0gcC5pZC5jbGllbnQgJiYgcC5sZWZ0LmlkLmNsb2NrICsgcC5sZWZ0Lmxlbmd0aCA9PT0gcC5pZC5jbG9jaykge1xuICAgIHAgPSBwLmxlZnQ7XG4gICAgaWYgKCFwLmRlbGV0ZWQgJiYgcC5jb3VudGFibGUpIHtcbiAgICAgIHBpbmRleCAtPSBwLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICAvLyBAdG9kbyByZW1vdmUhXG4gIC8vIGFzc3VyZSBwb3NpdGlvblxuICAvLyB7XG4gIC8vICAgbGV0IHN0YXJ0ID0geWFycmF5Ll9zdGFydFxuICAvLyAgIGxldCBwb3MgPSAwXG4gIC8vICAgd2hpbGUgKHN0YXJ0ICE9PSBwKSB7XG4gIC8vICAgICBpZiAoIXN0YXJ0LmRlbGV0ZWQgJiYgc3RhcnQuY291bnRhYmxlKSB7XG4gIC8vICAgICAgIHBvcyArPSBzdGFydC5sZW5ndGhcbiAgLy8gICAgIH1cbiAgLy8gICAgIHN0YXJ0ID0gLyoqIEB0eXBlIHtJdGVtfSAqLyAoc3RhcnQucmlnaHQpXG4gIC8vICAgfVxuICAvLyAgIGlmIChwb3MgIT09IHBpbmRleCkge1xuICAvLyAgICAgZGVidWdnZXJcbiAgLy8gICAgIHRocm93IG5ldyBFcnJvcignR290Y2hhIHBvc2l0aW9uIGZhaWwhJylcbiAgLy8gICB9XG4gIC8vIH1cbiAgLy8gaWYgKG1hcmtlcikge1xuICAvLyAgIGlmICh3aW5kb3cubGVuZ3RoZXMgPT0gbnVsbCkge1xuICAvLyAgICAgd2luZG93Lmxlbmd0aGVzID0gW11cbiAgLy8gICAgIHdpbmRvdy5nZXRMZW5ndGhlcyA9ICgpID0+IHdpbmRvdy5sZW5ndGhlcy5zb3J0KChhLCBiKSA9PiBhIC0gYilcbiAgLy8gICB9XG4gIC8vICAgd2luZG93Lmxlbmd0aGVzLnB1c2gobWFya2VyLmluZGV4IC0gcGluZGV4KVxuICAvLyAgIGNvbnNvbGUubG9nKCdkaXN0YW5jZScsIG1hcmtlci5pbmRleCAtIHBpbmRleCwgJ2xlbicsIHAgJiYgcC5wYXJlbnQubGVuZ3RoKVxuICAvLyB9XG4gIGlmIChtYXJrZXIgIT09IG51bGwgJiYgbWF0aC5hYnMobWFya2VyLmluZGV4IC0gcGluZGV4KSA8IC8qKiBAdHlwZSB7WVRleHR8WUFycmF5PGFueT59ICovIChwLnBhcmVudCkubGVuZ3RoIC8gbWF4U2VhcmNoTWFya2VyKSB7XG4gICAgLy8gYWRqdXN0IGV4aXN0aW5nIG1hcmtlclxuICAgIG92ZXJ3cml0ZU1hcmtlcihtYXJrZXIsIHAsIHBpbmRleCk7XG4gICAgcmV0dXJuIG1hcmtlclxuICB9IGVsc2Uge1xuICAgIC8vIGNyZWF0ZSBuZXcgbWFya2VyXG4gICAgcmV0dXJuIG1hcmtQb3NpdGlvbih5YXJyYXkuX3NlYXJjaE1hcmtlciwgcCwgcGluZGV4KVxuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSBtYXJrZXJzIHdoZW4gYSBjaGFuZ2UgaGFwcGVuZWQuXG4gKlxuICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBkb2luZyBhIGRlbGV0aW9uIVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXlTZWFyY2hNYXJrZXI+fSBzZWFyY2hNYXJrZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbiBJZiBpbnNlcnRpb24sIGxlbiBpcyBwb3NpdGl2ZS4gSWYgZGVsZXRpb24sIGxlbiBpcyBuZWdhdGl2ZS5cbiAqL1xuY29uc3QgdXBkYXRlTWFya2VyQ2hhbmdlcyA9IChzZWFyY2hNYXJrZXIsIGluZGV4LCBsZW4pID0+IHtcbiAgZm9yIChsZXQgaSA9IHNlYXJjaE1hcmtlci5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IG0gPSBzZWFyY2hNYXJrZXJbaV07XG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICAgICAqL1xuICAgICAgbGV0IHAgPSBtLnA7XG4gICAgICBwLm1hcmtlciA9IGZhbHNlO1xuICAgICAgLy8gSWRlYWxseSB3ZSBqdXN0IHdhbnQgdG8gZG8gYSBzaW1wbGUgcG9zaXRpb24gY29tcGFyaXNvbiwgYnV0IHRoaXMgd2lsbCBvbmx5IHdvcmsgaWZcbiAgICAgIC8vIHNlYXJjaCBtYXJrZXJzIGRvbid0IHBvaW50IHRvIGRlbGV0ZWQgaXRlbXMgZm9yIGZvcm1hdHMuXG4gICAgICAvLyBJdGVyYXRlIG1hcmtlciB0byBwcmV2IHVuZGVsZXRlZCBjb3VudGFibGUgcG9zaXRpb24gc28gd2Uga25vdyB3aGF0IHRvIGRvIHdoZW4gdXBkYXRpbmcgYSBwb3NpdGlvblxuICAgICAgd2hpbGUgKHAgJiYgKHAuZGVsZXRlZCB8fCAhcC5jb3VudGFibGUpKSB7XG4gICAgICAgIHAgPSBwLmxlZnQ7XG4gICAgICAgIGlmIChwICYmICFwLmRlbGV0ZWQgJiYgcC5jb3VudGFibGUpIHtcbiAgICAgICAgICAvLyBhZGp1c3QgcG9zaXRpb24uIHRoZSBsb29wIHNob3VsZCBicmVhayBub3dcbiAgICAgICAgICBtLmluZGV4IC09IHAubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocCA9PT0gbnVsbCB8fCBwLm1hcmtlciA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyByZW1vdmUgc2VhcmNoIG1hcmtlciBpZiB1cGRhdGVkIHBvc2l0aW9uIGlzIG51bGwgb3IgaWYgcG9zaXRpb24gaXMgYWxyZWFkeSBtYXJrZWRcbiAgICAgICAgc2VhcmNoTWFya2VyLnNwbGljZShpLCAxKTtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIG0ucCA9IHA7XG4gICAgICBwLm1hcmtlciA9IHRydWU7XG4gICAgfVxuICAgIGlmIChpbmRleCA8IG0uaW5kZXggfHwgKGxlbiA+IDAgJiYgaW5kZXggPT09IG0uaW5kZXgpKSB7IC8vIGEgc2ltcGxlIGluZGV4IDw9IG0uaW5kZXggY2hlY2sgd291bGQgYWN0dWFsbHkgc3VmZmljZVxuICAgICAgbS5pbmRleCA9IG1hdGgubWF4KGluZGV4LCBtLmluZGV4ICsgbGVuKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQWNjdW11bGF0ZSBhbGwgKGxpc3QpIGNoaWxkcmVuIG9mIGEgdHlwZSBhbmQgcmV0dXJuIHRoZW0gYXMgYW4gQXJyYXkuXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdFxuICogQHJldHVybiB7QXJyYXk8SXRlbT59XG4gKi9cbmNvbnN0IGdldFR5cGVDaGlsZHJlbiA9IHQgPT4ge1xuICBsZXQgcyA9IHQuX3N0YXJ0O1xuICBjb25zdCBhcnIgPSBbXTtcbiAgd2hpbGUgKHMpIHtcbiAgICBhcnIucHVzaChzKTtcbiAgICBzID0gcy5yaWdodDtcbiAgfVxuICByZXR1cm4gYXJyXG59O1xuXG4vKipcbiAqIENhbGwgZXZlbnQgbGlzdGVuZXJzIHdpdGggYW4gZXZlbnQuIFRoaXMgd2lsbCBhbHNvIGFkZCBhbiBldmVudCB0byBhbGxcbiAqIHBhcmVudHMgKGZvciBgLm9ic2VydmVEZWVwYCBoYW5kbGVycykuXG4gKlxuICogQHRlbXBsYXRlIEV2ZW50VHlwZVxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8RXZlbnRUeXBlPn0gdHlwZVxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7RXZlbnRUeXBlfSBldmVudFxuICovXG5jb25zdCBjYWxsVHlwZU9ic2VydmVycyA9ICh0eXBlLCB0cmFuc2FjdGlvbiwgZXZlbnQpID0+IHtcbiAgY29uc3QgY2hhbmdlZFR5cGUgPSB0eXBlO1xuICBjb25zdCBjaGFuZ2VkUGFyZW50VHlwZXMgPSB0cmFuc2FjdGlvbi5jaGFuZ2VkUGFyZW50VHlwZXM7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG1hcC5zZXRJZlVuZGVmaW5lZChjaGFuZ2VkUGFyZW50VHlwZXMsIHR5cGUsICgpID0+IFtdKS5wdXNoKGV2ZW50KTtcbiAgICBpZiAodHlwZS5faXRlbSA9PT0gbnVsbCkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAgdHlwZSA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0eXBlLl9pdGVtLnBhcmVudCk7XG4gIH1cbiAgY2FsbEV2ZW50SGFuZGxlckxpc3RlbmVycyhjaGFuZ2VkVHlwZS5fZUgsIGV2ZW50LCB0cmFuc2FjdGlvbik7XG59O1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBFdmVudFR5cGVcbiAqIEFic3RyYWN0IFlqcyBUeXBlIGNsYXNzXG4gKi9cbmNsYXNzIEFic3RyYWN0VHlwZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX2l0ZW0gPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLEl0ZW0+fVxuICAgICAqL1xuICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX3N0YXJ0ID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7RG9jfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5kb2MgPSBudWxsO1xuICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlcnNcbiAgICAgKiBAdHlwZSB7RXZlbnRIYW5kbGVyPEV2ZW50VHlwZSxUcmFuc2FjdGlvbj59XG4gICAgICovXG4gICAgdGhpcy5fZUggPSBjcmVhdGVFdmVudEhhbmRsZXIoKTtcbiAgICAvKipcbiAgICAgKiBEZWVwIGV2ZW50IGhhbmRsZXJzXG4gICAgICogQHR5cGUge0V2ZW50SGFuZGxlcjxBcnJheTxZRXZlbnQ8YW55Pj4sVHJhbnNhY3Rpb24+fVxuICAgICAqL1xuICAgIHRoaXMuX2RFSCA9IGNyZWF0ZUV2ZW50SGFuZGxlcigpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudWxsIHwgQXJyYXk8QXJyYXlTZWFyY2hNYXJrZXI+fVxuICAgICAqL1xuICAgIHRoaXMuX3NlYXJjaE1hcmtlciA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QWJzdHJhY3RUeXBlPGFueT58bnVsbH1cbiAgICovXG4gIGdldCBwYXJlbnQgKCkge1xuICAgIHJldHVybiB0aGlzLl9pdGVtID8gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMuX2l0ZW0ucGFyZW50KSA6IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlZ3JhdGUgdGhpcyB0eXBlIGludG8gdGhlIFlqcyBpbnN0YW5jZS5cbiAgICpcbiAgICogKiBTYXZlIHRoaXMgc3RydWN0IGluIHRoZSBvc1xuICAgKiAqIFRoaXMgdHlwZSBpcyBzZW50IHRvIG90aGVyIGNsaWVudFxuICAgKiAqIE9ic2VydmVyIGZ1bmN0aW9ucyBhcmUgZmlyZWRcbiAgICpcbiAgICogQHBhcmFtIHtEb2N9IHkgVGhlIFlqcyBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge0l0ZW18bnVsbH0gaXRlbVxuICAgKi9cbiAgX2ludGVncmF0ZSAoeSwgaXRlbSkge1xuICAgIHRoaXMuZG9jID0geTtcbiAgICB0aGlzLl9pdGVtID0gaXRlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBYnN0cmFjdFR5cGU8RXZlbnRUeXBlPn1cbiAgICovXG4gIF9jb3B5ICgpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBYnN0cmFjdFR5cGU8RXZlbnRUeXBlPn1cbiAgICovXG4gIGNsb25lICgpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKi9cbiAgX3dyaXRlIChlbmNvZGVyKSB7IH1cblxuICAvKipcbiAgICogVGhlIGZpcnN0IG5vbi1kZWxldGVkIGl0ZW1cbiAgICovXG4gIGdldCBfZmlyc3QgKCkge1xuICAgIGxldCBuID0gdGhpcy5fc3RhcnQ7XG4gICAgd2hpbGUgKG4gIT09IG51bGwgJiYgbi5kZWxldGVkKSB7XG4gICAgICBuID0gbi5yaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIG5cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIFlFdmVudCBhbmQgY2FsbHMgYWxsIHR5cGUgb2JzZXJ2ZXJzLlxuICAgKiBNdXN0IGJlIGltcGxlbWVudGVkIGJ5IGVhY2ggdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTZXQ8bnVsbHxzdHJpbmc+fSBwYXJlbnRTdWJzIEtleXMgY2hhbmdlZCBvbiB0aGlzIHR5cGUuIGBudWxsYCBpZiBsaXN0IHdhcyBtb2RpZmllZC5cbiAgICovXG4gIF9jYWxsT2JzZXJ2ZXIgKHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKSB7XG4gICAgaWYgKCF0cmFuc2FjdGlvbi5sb2NhbCAmJiB0aGlzLl9zZWFyY2hNYXJrZXIpIHtcbiAgICAgIHRoaXMuX3NlYXJjaE1hcmtlci5sZW5ndGggPSAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPYnNlcnZlIGFsbCBldmVudHMgdGhhdCBhcmUgY3JlYXRlZCBvbiB0aGlzIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oRXZlbnRUeXBlLCBUcmFuc2FjdGlvbik6dm9pZH0gZiBPYnNlcnZlciBmdW5jdGlvblxuICAgKi9cbiAgb2JzZXJ2ZSAoZikge1xuICAgIGFkZEV2ZW50SGFuZGxlckxpc3RlbmVyKHRoaXMuX2VILCBmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnNlcnZlIGFsbCBldmVudHMgdGhhdCBhcmUgY3JlYXRlZCBieSB0aGlzIHR5cGUgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihBcnJheTxZRXZlbnQ8YW55Pj4sVHJhbnNhY3Rpb24pOnZvaWR9IGYgT2JzZXJ2ZXIgZnVuY3Rpb25cbiAgICovXG4gIG9ic2VydmVEZWVwIChmKSB7XG4gICAgYWRkRXZlbnRIYW5kbGVyTGlzdGVuZXIodGhpcy5fZEVILCBmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIGFuIG9ic2VydmVyIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEV2ZW50VHlwZSxUcmFuc2FjdGlvbik6dm9pZH0gZiBPYnNlcnZlciBmdW5jdGlvblxuICAgKi9cbiAgdW5vYnNlcnZlIChmKSB7XG4gICAgcmVtb3ZlRXZlbnRIYW5kbGVyTGlzdGVuZXIodGhpcy5fZUgsIGYpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXIgYW4gb2JzZXJ2ZXIgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oQXJyYXk8WUV2ZW50PGFueT4+LFRyYW5zYWN0aW9uKTp2b2lkfSBmIE9ic2VydmVyIGZ1bmN0aW9uXG4gICAqL1xuICB1bm9ic2VydmVEZWVwIChmKSB7XG4gICAgcmVtb3ZlRXZlbnRIYW5kbGVyTGlzdGVuZXIodGhpcy5fZEVILCBmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHJldHVybiB7YW55fVxuICAgKi9cbiAgdG9KU09OICgpIHt9XG59XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZUxpc3RTbGljZSA9ICh0eXBlLCBzdGFydCwgZW5kKSA9PiB7XG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IHR5cGUuX2xlbmd0aCArIHN0YXJ0O1xuICB9XG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kID0gdHlwZS5fbGVuZ3RoICsgZW5kO1xuICB9XG4gIGxldCBsZW4gPSBlbmQgLSBzdGFydDtcbiAgY29uc3QgY3MgPSBbXTtcbiAgbGV0IG4gPSB0eXBlLl9zdGFydDtcbiAgd2hpbGUgKG4gIT09IG51bGwgJiYgbGVuID4gMCkge1xuICAgIGlmIChuLmNvdW50YWJsZSAmJiAhbi5kZWxldGVkKSB7XG4gICAgICBjb25zdCBjID0gbi5jb250ZW50LmdldENvbnRlbnQoKTtcbiAgICAgIGlmIChjLmxlbmd0aCA8PSBzdGFydCkge1xuICAgICAgICBzdGFydCAtPSBjLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGMubGVuZ3RoICYmIGxlbiA+IDA7IGkrKykge1xuICAgICAgICAgIGNzLnB1c2goY1tpXSk7XG4gICAgICAgICAgbGVuLS07XG4gICAgICAgIH1cbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICBuID0gbi5yaWdodDtcbiAgfVxuICByZXR1cm4gY3Ncbn07XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVMaXN0VG9BcnJheSA9IHR5cGUgPT4ge1xuICBjb25zdCBjcyA9IFtdO1xuICBsZXQgbiA9IHR5cGUuX3N0YXJ0O1xuICB3aGlsZSAobiAhPT0gbnVsbCkge1xuICAgIGlmIChuLmNvdW50YWJsZSAmJiAhbi5kZWxldGVkKSB7XG4gICAgICBjb25zdCBjID0gbi5jb250ZW50LmdldENvbnRlbnQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcy5wdXNoKGNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBuID0gbi5yaWdodDtcbiAgfVxuICByZXR1cm4gY3Ncbn07XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHBhcmFtIHtTbmFwc2hvdH0gc25hcHNob3RcbiAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTGlzdFRvQXJyYXlTbmFwc2hvdCA9ICh0eXBlLCBzbmFwc2hvdCkgPT4ge1xuICBjb25zdCBjcyA9IFtdO1xuICBsZXQgbiA9IHR5cGUuX3N0YXJ0O1xuICB3aGlsZSAobiAhPT0gbnVsbCkge1xuICAgIGlmIChuLmNvdW50YWJsZSAmJiBpc1Zpc2libGUobiwgc25hcHNob3QpKSB7XG4gICAgICBjb25zdCBjID0gbi5jb250ZW50LmdldENvbnRlbnQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcy5wdXNoKGNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBuID0gbi5yaWdodDtcbiAgfVxuICByZXR1cm4gY3Ncbn07XG5cbi8qKlxuICogRXhlY3V0ZXMgYSBwcm92aWRlZCBmdW5jdGlvbiBvbiBvbmNlIG9uIG92ZXJ5IGVsZW1lbnQgb2YgdGhpcyBZQXJyYXkuXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHBhcmFtIHtmdW5jdGlvbihhbnksbnVtYmVyLGFueSk6dm9pZH0gZiBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZXZlcnkgZWxlbWVudCBvZiB0aGlzIFlBcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVMaXN0Rm9yRWFjaCA9ICh0eXBlLCBmKSA9PiB7XG4gIGxldCBpbmRleCA9IDA7XG4gIGxldCBuID0gdHlwZS5fc3RhcnQ7XG4gIHdoaWxlIChuICE9PSBudWxsKSB7XG4gICAgaWYgKG4uY291bnRhYmxlICYmICFuLmRlbGV0ZWQpIHtcbiAgICAgIGNvbnN0IGMgPSBuLmNvbnRlbnQuZ2V0Q29udGVudCgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGYoY1tpXSwgaW5kZXgrKywgdHlwZSk7XG4gICAgICB9XG4gICAgfVxuICAgIG4gPSBuLnJpZ2h0O1xuICB9XG59O1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBDLFJcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oQyxudW1iZXIsQWJzdHJhY3RUeXBlPGFueT4pOlJ9IGZcbiAqIEByZXR1cm4ge0FycmF5PFI+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZUxpc3RNYXAgPSAodHlwZSwgZikgPT4ge1xuICAvKipcbiAgICogQHR5cGUge0FycmF5PGFueT59XG4gICAqL1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgdHlwZUxpc3RGb3JFYWNoKHR5cGUsIChjLCBpKSA9PiB7XG4gICAgcmVzdWx0LnB1c2goZihjLCBpLCB0eXBlKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8YW55Pn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVMaXN0Q3JlYXRlSXRlcmF0b3IgPSB0eXBlID0+IHtcbiAgbGV0IG4gPSB0eXBlLl9zdGFydDtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxhbnk+fG51bGx9XG4gICAqL1xuICBsZXQgY3VycmVudENvbnRlbnQgPSBudWxsO1xuICBsZXQgY3VycmVudENvbnRlbnRJbmRleCA9IDA7XG4gIHJldHVybiB7XG4gICAgW1N5bWJvbC5pdGVyYXRvcl0gKCkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LFxuICAgIG5leHQ6ICgpID0+IHtcbiAgICAgIC8vIGZpbmQgc29tZSBjb250ZW50XG4gICAgICBpZiAoY3VycmVudENvbnRlbnQgPT09IG51bGwpIHtcbiAgICAgICAgd2hpbGUgKG4gIT09IG51bGwgJiYgbi5kZWxldGVkKSB7XG4gICAgICAgICAgbiA9IG4ucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hlY2sgaWYgd2UgcmVhY2hlZCB0aGUgZW5kLCBubyBuZWVkIHRvIGNoZWNrIGN1cnJlbnRDb250ZW50LCBiZWNhdXNlIGl0IGRvZXMgbm90IGV4aXN0XG4gICAgICAgIGlmIChuID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGZvdW5kIG4sIHNvIHdlIGNhbiBzZXQgY3VycmVudENvbnRlbnRcbiAgICAgICAgY3VycmVudENvbnRlbnQgPSBuLmNvbnRlbnQuZ2V0Q29udGVudCgpO1xuICAgICAgICBjdXJyZW50Q29udGVudEluZGV4ID0gMDtcbiAgICAgICAgbiA9IG4ucmlnaHQ7IC8vIHdlIHVzZWQgdGhlIGNvbnRlbnQgb2Ygbiwgbm93IGl0ZXJhdGUgdG8gbmV4dFxuICAgICAgfVxuICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50Q29udGVudFtjdXJyZW50Q29udGVudEluZGV4KytdO1xuICAgICAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBlbXB0eSBjdXJyZW50Q29udGVudFxuICAgICAgaWYgKGN1cnJlbnRDb250ZW50Lmxlbmd0aCA8PSBjdXJyZW50Q29udGVudEluZGV4KSB7XG4gICAgICAgIGN1cnJlbnRDb250ZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICB2YWx1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge2FueX1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVMaXN0R2V0ID0gKHR5cGUsIGluZGV4KSA9PiB7XG4gIGNvbnN0IG1hcmtlciA9IGZpbmRNYXJrZXIodHlwZSwgaW5kZXgpO1xuICBsZXQgbiA9IHR5cGUuX3N0YXJ0O1xuICBpZiAobWFya2VyICE9PSBudWxsKSB7XG4gICAgbiA9IG1hcmtlci5wO1xuICAgIGluZGV4IC09IG1hcmtlci5pbmRleDtcbiAgfVxuICBmb3IgKDsgbiAhPT0gbnVsbDsgbiA9IG4ucmlnaHQpIHtcbiAgICBpZiAoIW4uZGVsZXRlZCAmJiBuLmNvdW50YWJsZSkge1xuICAgICAgaWYgKGluZGV4IDwgbi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG4uY29udGVudC5nZXRDb250ZW50KClbaW5kZXhdXG4gICAgICB9XG4gICAgICBpbmRleCAtPSBuLmxlbmd0aDtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtJdGVtP30gcmVmZXJlbmNlSXRlbVxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q8c3RyaW5nLGFueT58QXJyYXk8YW55Pnxib29sZWFufG51bWJlcnxudWxsfHN0cmluZ3xVaW50OEFycmF5Pn0gY29udGVudFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZUxpc3RJbnNlcnRHZW5lcmljc0FmdGVyID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIHJlZmVyZW5jZUl0ZW0sIGNvbnRlbnQpID0+IHtcbiAgbGV0IGxlZnQgPSByZWZlcmVuY2VJdGVtO1xuICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XG4gIGNvbnN0IG93bkNsaWVudElkID0gZG9jLmNsaWVudElEO1xuICBjb25zdCBzdG9yZSA9IGRvYy5zdG9yZTtcbiAgY29uc3QgcmlnaHQgPSByZWZlcmVuY2VJdGVtID09PSBudWxsID8gcGFyZW50Ll9zdGFydCA6IHJlZmVyZW5jZUl0ZW0ucmlnaHQ7XG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8T2JqZWN0fEFycmF5PGFueT58bnVtYmVyfG51bGw+fVxuICAgKi9cbiAgbGV0IGpzb25Db250ZW50ID0gW107XG4gIGNvbnN0IHBhY2tKc29uQ29udGVudCA9ICgpID0+IHtcbiAgICBpZiAoanNvbkNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgICAgbGVmdCA9IG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShzdG9yZSwgb3duQ2xpZW50SWQpKSwgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCwgcmlnaHQsIHJpZ2h0ICYmIHJpZ2h0LmlkLCBwYXJlbnQsIG51bGwsIG5ldyBDb250ZW50QW55KGpzb25Db250ZW50KSk7XG4gICAgICBsZWZ0LmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMCk7XG4gICAgICBqc29uQ29udGVudCA9IFtdO1xuICAgIH1cbiAgfTtcbiAgY29udGVudC5mb3JFYWNoKGMgPT4ge1xuICAgIGlmIChjID09PSBudWxsKSB7XG4gICAgICBqc29uQ29udGVudC5wdXNoKGMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGMuY29uc3RydWN0b3IpIHtcbiAgICAgICAgY2FzZSBOdW1iZXI6XG4gICAgICAgIGNhc2UgT2JqZWN0OlxuICAgICAgICBjYXNlIEJvb2xlYW46XG4gICAgICAgIGNhc2UgQXJyYXk6XG4gICAgICAgIGNhc2UgU3RyaW5nOlxuICAgICAgICAgIGpzb25Db250ZW50LnB1c2goYyk7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwYWNrSnNvbkNvbnRlbnQoKTtcbiAgICAgICAgICBzd2l0Y2ggKGMuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGNhc2UgVWludDhBcnJheTpcbiAgICAgICAgICAgIGNhc2UgQXJyYXlCdWZmZXI6XG4gICAgICAgICAgICAgIGxlZnQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoc3RvcmUsIG93bkNsaWVudElkKSksIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCwgcGFyZW50LCBudWxsLCBuZXcgQ29udGVudEJpbmFyeShuZXcgVWludDhBcnJheSgvKiogQHR5cGUge1VpbnQ4QXJyYXl9ICovIChjKSkpKTtcbiAgICAgICAgICAgICAgbGVmdC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApO1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBEb2M6XG4gICAgICAgICAgICAgIGxlZnQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoc3RvcmUsIG93bkNsaWVudElkKSksIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCwgcGFyZW50LCBudWxsLCBuZXcgQ29udGVudERvYygvKiogQHR5cGUge0RvY30gKi8gKGMpKSk7XG4gICAgICAgICAgICAgIGxlZnQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKTtcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGlmIChjIGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlKSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9IG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShzdG9yZSwgb3duQ2xpZW50SWQpKSwgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCwgcmlnaHQsIHJpZ2h0ICYmIHJpZ2h0LmlkLCBwYXJlbnQsIG51bGwsIG5ldyBDb250ZW50VHlwZShjKSk7XG4gICAgICAgICAgICAgICAgbGVmdC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBjb250ZW50IHR5cGUgaW4gaW5zZXJ0IG9wZXJhdGlvbicpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcGFja0pzb25Db250ZW50KCk7XG59O1xuXG5jb25zdCBsZW5ndGhFeGNlZWRlZCA9IGVycm9yLmNyZWF0ZSgnTGVuZ3RoIGV4Y2VlZGVkIScpO1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q8c3RyaW5nLGFueT58QXJyYXk8YW55PnxudW1iZXJ8bnVsbHxzdHJpbmd8VWludDhBcnJheT59IGNvbnRlbnRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3MgPSAodHJhbnNhY3Rpb24sIHBhcmVudCwgaW5kZXgsIGNvbnRlbnQpID0+IHtcbiAgaWYgKGluZGV4ID4gcGFyZW50Ll9sZW5ndGgpIHtcbiAgICB0aHJvdyBsZW5ndGhFeGNlZWRlZFxuICB9XG4gIGlmIChpbmRleCA9PT0gMCkge1xuICAgIGlmIChwYXJlbnQuX3NlYXJjaE1hcmtlcikge1xuICAgICAgdXBkYXRlTWFya2VyQ2hhbmdlcyhwYXJlbnQuX3NlYXJjaE1hcmtlciwgaW5kZXgsIGNvbnRlbnQubGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3NBZnRlcih0cmFuc2FjdGlvbiwgcGFyZW50LCBudWxsLCBjb250ZW50KVxuICB9XG4gIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleDtcbiAgY29uc3QgbWFya2VyID0gZmluZE1hcmtlcihwYXJlbnQsIGluZGV4KTtcbiAgbGV0IG4gPSBwYXJlbnQuX3N0YXJ0O1xuICBpZiAobWFya2VyICE9PSBudWxsKSB7XG4gICAgbiA9IG1hcmtlci5wO1xuICAgIGluZGV4IC09IG1hcmtlci5pbmRleDtcbiAgICAvLyB3ZSBuZWVkIHRvIGl0ZXJhdGUgb25lIHRvIHRoZSBsZWZ0IHNvIHRoYXQgdGhlIGFsZ29yaXRobSB3b3Jrc1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgLy8gQHRvZG8gcmVmYWN0b3IgdGhpcyBhcyBpdCBhY3R1YWxseSBkb2Vzbid0IGNvbnNpZGVyIGZvcm1hdHNcbiAgICAgIG4gPSBuLnByZXY7IC8vIGltcG9ydGFudCEgZ2V0IHRoZSBsZWZ0IHVuZGVsZXRlZCBpdGVtIHNvIHRoYXQgd2UgY2FuIGFjdHVhbGx5IGRlY3JlYXNlIGluZGV4XG4gICAgICBpbmRleCArPSAobiAmJiBuLmNvdW50YWJsZSAmJiAhbi5kZWxldGVkKSA/IG4ubGVuZ3RoIDogMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG4gIT09IG51bGw7IG4gPSBuLnJpZ2h0KSB7XG4gICAgaWYgKCFuLmRlbGV0ZWQgJiYgbi5jb3VudGFibGUpIHtcbiAgICAgIGlmIChpbmRleCA8PSBuLmxlbmd0aCkge1xuICAgICAgICBpZiAoaW5kZXggPCBuLmxlbmd0aCkge1xuICAgICAgICAgIC8vIGluc2VydCBpbi1iZXR3ZWVuXG4gICAgICAgICAgZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGNyZWF0ZUlEKG4uaWQuY2xpZW50LCBuLmlkLmNsb2NrICsgaW5kZXgpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaW5kZXggLT0gbi5sZW5ndGg7XG4gICAgfVxuICB9XG4gIGlmIChwYXJlbnQuX3NlYXJjaE1hcmtlcikge1xuICAgIHVwZGF0ZU1hcmtlckNoYW5nZXMocGFyZW50Ll9zZWFyY2hNYXJrZXIsIHN0YXJ0SW5kZXgsIGNvbnRlbnQubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gdHlwZUxpc3RJbnNlcnRHZW5lcmljc0FmdGVyKHRyYW5zYWN0aW9uLCBwYXJlbnQsIG4sIGNvbnRlbnQpXG59O1xuXG4vKipcbiAqIFB1c2hpbmcgY29udGVudCBpcyBzcGVjaWFsIGFzIHdlIGdlbmVyYWxseSB3YW50IHRvIHB1c2ggYWZ0ZXIgdGhlIGxhc3QgaXRlbS4gU28gd2UgZG9uJ3QgaGF2ZSB0byB1cGRhdGVcbiAqIHRoZSBzZXJhY2ggbWFya2VyLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0PHN0cmluZyxhbnk+fEFycmF5PGFueT58bnVtYmVyfG51bGx8c3RyaW5nfFVpbnQ4QXJyYXk+fSBjb250ZW50XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTGlzdFB1c2hHZW5lcmljcyA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBjb250ZW50KSA9PiB7XG4gIC8vIFVzZSB0aGUgbWFya2VyIHdpdGggdGhlIGhpZ2hlc3QgaW5kZXggYW5kIGl0ZXJhdGUgdG8gdGhlIHJpZ2h0LlxuICBjb25zdCBtYXJrZXIgPSAocGFyZW50Ll9zZWFyY2hNYXJrZXIgfHwgW10pLnJlZHVjZSgobWF4TWFya2VyLCBjdXJyTWFya2VyKSA9PiBjdXJyTWFya2VyLmluZGV4ID4gbWF4TWFya2VyLmluZGV4ID8gY3Vyck1hcmtlciA6IG1heE1hcmtlciwgeyBpbmRleDogMCwgcDogcGFyZW50Ll9zdGFydCB9KTtcbiAgbGV0IG4gPSBtYXJrZXIucDtcbiAgaWYgKG4pIHtcbiAgICB3aGlsZSAobi5yaWdodCkge1xuICAgICAgbiA9IG4ucmlnaHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB0eXBlTGlzdEluc2VydEdlbmVyaWNzQWZ0ZXIodHJhbnNhY3Rpb24sIHBhcmVudCwgbiwgY29udGVudClcbn07XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTGlzdERlbGV0ZSA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBpbmRleCwgbGVuZ3RoKSA9PiB7XG4gIGlmIChsZW5ndGggPT09IDApIHsgcmV0dXJuIH1cbiAgY29uc3Qgc3RhcnRJbmRleCA9IGluZGV4O1xuICBjb25zdCBzdGFydExlbmd0aCA9IGxlbmd0aDtcbiAgY29uc3QgbWFya2VyID0gZmluZE1hcmtlcihwYXJlbnQsIGluZGV4KTtcbiAgbGV0IG4gPSBwYXJlbnQuX3N0YXJ0O1xuICBpZiAobWFya2VyICE9PSBudWxsKSB7XG4gICAgbiA9IG1hcmtlci5wO1xuICAgIGluZGV4IC09IG1hcmtlci5pbmRleDtcbiAgfVxuICAvLyBjb21wdXRlIHRoZSBmaXJzdCBpdGVtIHRvIGJlIGRlbGV0ZWRcbiAgZm9yICg7IG4gIT09IG51bGwgJiYgaW5kZXggPiAwOyBuID0gbi5yaWdodCkge1xuICAgIGlmICghbi5kZWxldGVkICYmIG4uY291bnRhYmxlKSB7XG4gICAgICBpZiAoaW5kZXggPCBuLmxlbmd0aCkge1xuICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQobi5pZC5jbGllbnQsIG4uaWQuY2xvY2sgKyBpbmRleCkpO1xuICAgICAgfVxuICAgICAgaW5kZXggLT0gbi5sZW5ndGg7XG4gICAgfVxuICB9XG4gIC8vIGRlbGV0ZSBhbGwgaXRlbXMgdW50aWwgZG9uZVxuICB3aGlsZSAobGVuZ3RoID4gMCAmJiBuICE9PSBudWxsKSB7XG4gICAgaWYgKCFuLmRlbGV0ZWQpIHtcbiAgICAgIGlmIChsZW5ndGggPCBuLmxlbmd0aCkge1xuICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQobi5pZC5jbGllbnQsIG4uaWQuY2xvY2sgKyBsZW5ndGgpKTtcbiAgICAgIH1cbiAgICAgIG4uZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgIGxlbmd0aCAtPSBuLmxlbmd0aDtcbiAgICB9XG4gICAgbiA9IG4ucmlnaHQ7XG4gIH1cbiAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICB0aHJvdyBsZW5ndGhFeGNlZWRlZFxuICB9XG4gIGlmIChwYXJlbnQuX3NlYXJjaE1hcmtlcikge1xuICAgIHVwZGF0ZU1hcmtlckNoYW5nZXMocGFyZW50Ll9zZWFyY2hNYXJrZXIsIHN0YXJ0SW5kZXgsIC1zdGFydExlbmd0aCArIGxlbmd0aCAvKiBpbiBjYXNlIHdlIHJlbW92ZSB0aGUgYWJvdmUgZXhjZXB0aW9uICovKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTWFwRGVsZXRlID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGtleSkgPT4ge1xuICBjb25zdCBjID0gcGFyZW50Ll9tYXAuZ2V0KGtleSk7XG4gIGlmIChjICE9PSB1bmRlZmluZWQpIHtcbiAgICBjLmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHtPYmplY3R8bnVtYmVyfG51bGx8QXJyYXk8YW55PnxzdHJpbmd8VWludDhBcnJheXxBYnN0cmFjdFR5cGU8YW55Pn0gdmFsdWVcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVNYXBTZXQgPSAodHJhbnNhY3Rpb24sIHBhcmVudCwga2V5LCB2YWx1ZSkgPT4ge1xuICBjb25zdCBsZWZ0ID0gcGFyZW50Ll9tYXAuZ2V0KGtleSkgfHwgbnVsbDtcbiAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jO1xuICBjb25zdCBvd25DbGllbnRJZCA9IGRvYy5jbGllbnRJRDtcbiAgbGV0IGNvbnRlbnQ7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgY29udGVudCA9IG5ldyBDb250ZW50QW55KFt2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAodmFsdWUuY29uc3RydWN0b3IpIHtcbiAgICAgIGNhc2UgTnVtYmVyOlxuICAgICAgY2FzZSBPYmplY3Q6XG4gICAgICBjYXNlIEJvb2xlYW46XG4gICAgICBjYXNlIEFycmF5OlxuICAgICAgY2FzZSBTdHJpbmc6XG4gICAgICAgIGNvbnRlbnQgPSBuZXcgQ29udGVudEFueShbdmFsdWVdKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgVWludDhBcnJheTpcbiAgICAgICAgY29udGVudCA9IG5ldyBDb250ZW50QmluYXJ5KC8qKiBAdHlwZSB7VWludDhBcnJheX0gKi8gKHZhbHVlKSk7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIERvYzpcbiAgICAgICAgY29udGVudCA9IG5ldyBDb250ZW50RG9jKC8qKiBAdHlwZSB7RG9jfSAqLyAodmFsdWUpKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSkge1xuICAgICAgICAgIGNvbnRlbnQgPSBuZXcgQ29udGVudFR5cGUodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBjb250ZW50IHR5cGUnKVxuICAgICAgICB9XG4gICAgfVxuICB9XG4gIG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShkb2Muc3RvcmUsIG93bkNsaWVudElkKSksIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsIG51bGwsIG51bGwsIHBhcmVudCwga2V5LCBjb250ZW50KS5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsYW55PnxudW1iZXJ8bnVsbHxBcnJheTxhbnk+fHN0cmluZ3xVaW50OEFycmF5fEFic3RyYWN0VHlwZTxhbnk+fHVuZGVmaW5lZH1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVNYXBHZXQgPSAocGFyZW50LCBrZXkpID0+IHtcbiAgY29uc3QgdmFsID0gcGFyZW50Ll9tYXAuZ2V0KGtleSk7XG4gIHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCAmJiAhdmFsLmRlbGV0ZWQgPyB2YWwuY29udGVudC5nZXRDb250ZW50KClbdmFsLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHJldHVybiB7T2JqZWN0PHN0cmluZyxPYmplY3Q8c3RyaW5nLGFueT58bnVtYmVyfG51bGx8QXJyYXk8YW55PnxzdHJpbmd8VWludDhBcnJheXxBYnN0cmFjdFR5cGU8YW55Pnx1bmRlZmluZWQ+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZU1hcEdldEFsbCA9IChwYXJlbnQpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLGFueT59XG4gICAqL1xuICBjb25zdCByZXMgPSB7fTtcbiAgcGFyZW50Ll9tYXAuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgIGlmICghdmFsdWUuZGVsZXRlZCkge1xuICAgICAgcmVzW2tleV0gPSB2YWx1ZS5jb250ZW50LmdldENvbnRlbnQoKVt2YWx1ZS5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVNYXBIYXMgPSAocGFyZW50LCBrZXkpID0+IHtcbiAgY29uc3QgdmFsID0gcGFyZW50Ll9tYXAuZ2V0KGtleSk7XG4gIHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCAmJiAhdmFsLmRlbGV0ZWRcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICogQHJldHVybiB7T2JqZWN0PHN0cmluZyxhbnk+fG51bWJlcnxudWxsfEFycmF5PGFueT58c3RyaW5nfFVpbnQ4QXJyYXl8QWJzdHJhY3RUeXBlPGFueT58dW5kZWZpbmVkfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZU1hcEdldFNuYXBzaG90ID0gKHBhcmVudCwga2V5LCBzbmFwc2hvdCkgPT4ge1xuICBsZXQgdiA9IHBhcmVudC5fbWFwLmdldChrZXkpIHx8IG51bGw7XG4gIHdoaWxlICh2ICE9PSBudWxsICYmICghc25hcHNob3Quc3YuaGFzKHYuaWQuY2xpZW50KSB8fCB2LmlkLmNsb2NrID49IChzbmFwc2hvdC5zdi5nZXQodi5pZC5jbGllbnQpIHx8IDApKSkge1xuICAgIHYgPSB2LmxlZnQ7XG4gIH1cbiAgcmV0dXJuIHYgIT09IG51bGwgJiYgaXNWaXNpYmxlKHYsIHNuYXBzaG90KSA/IHYuY29udGVudC5nZXRDb250ZW50KClbdi5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsSXRlbT59IG1hcFxuICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxBcnJheTxhbnk+Pn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNyZWF0ZU1hcEl0ZXJhdG9yID0gbWFwID0+IGl0ZXJhdG9yLml0ZXJhdG9yRmlsdGVyKG1hcC5lbnRyaWVzKCksIC8qKiBAcGFyYW0ge2FueX0gZW50cnkgKi8gZW50cnkgPT4gIWVudHJ5WzFdLmRlbGV0ZWQpO1xuXG4vKipcbiAqIEBtb2R1bGUgWUFycmF5XG4gKi9cblxuLyoqXG4gKiBFdmVudCB0aGF0IGRlc2NyaWJlcyB0aGUgY2hhbmdlcyBvbiBhIFlBcnJheVxuICogQHRlbXBsYXRlIFRcbiAqIEBleHRlbmRzIFlFdmVudDxZQXJyYXk8VD4+XG4gKi9cbmNsYXNzIFlBcnJheUV2ZW50IGV4dGVuZHMgWUV2ZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7WUFycmF5PFQ+fSB5YXJyYXkgVGhlIGNoYW5nZWQgdHlwZVxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvbiBUaGUgdHJhbnNhY3Rpb24gb2JqZWN0XG4gICAqL1xuICBjb25zdHJ1Y3RvciAoeWFycmF5LCB0cmFuc2FjdGlvbikge1xuICAgIHN1cGVyKHlhcnJheSwgdHJhbnNhY3Rpb24pO1xuICAgIHRoaXMuX3RyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb247XG4gIH1cbn1cblxuLyoqXG4gKiBBIHNoYXJlZCBBcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAZXh0ZW5kcyBBYnN0cmFjdFR5cGU8WUFycmF5RXZlbnQ8VD4+XG4gKiBAaW1wbGVtZW50cyB7SXRlcmFibGU8VD59XG4gKi9cbmNsYXNzIFlBcnJheSBleHRlbmRzIEFic3RyYWN0VHlwZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxhbnk+P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBbXTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8QXJyYXlTZWFyY2hNYXJrZXI+fVxuICAgICAqL1xuICAgIHRoaXMuX3NlYXJjaE1hcmtlciA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBZQXJyYXkgY29udGFpbmluZyB0aGUgc3BlY2lmaWVkIGl0ZW1zLlxuICAgKiBAdGVtcGxhdGUgVFxuICAgKiBAcGFyYW0ge0FycmF5PFQ+fSBpdGVtc1xuICAgKiBAcmV0dXJuIHtZQXJyYXk8VD59XG4gICAqL1xuICBzdGF0aWMgZnJvbSAoaXRlbXMpIHtcbiAgICBjb25zdCBhID0gbmV3IFlBcnJheSgpO1xuICAgIGEucHVzaChpdGVtcyk7XG4gICAgcmV0dXJuIGFcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlZ3JhdGUgdGhpcyB0eXBlIGludG8gdGhlIFlqcyBpbnN0YW5jZS5cbiAgICpcbiAgICogKiBTYXZlIHRoaXMgc3RydWN0IGluIHRoZSBvc1xuICAgKiAqIFRoaXMgdHlwZSBpcyBzZW50IHRvIG90aGVyIGNsaWVudFxuICAgKiAqIE9ic2VydmVyIGZ1bmN0aW9ucyBhcmUgZmlyZWRcbiAgICpcbiAgICogQHBhcmFtIHtEb2N9IHkgVGhlIFlqcyBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIF9pbnRlZ3JhdGUgKHksIGl0ZW0pIHtcbiAgICBzdXBlci5faW50ZWdyYXRlKHksIGl0ZW0pO1xuICAgIHRoaXMuaW5zZXJ0KDAsIC8qKiBAdHlwZSB7QXJyYXk8YW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpKTtcbiAgICB0aGlzLl9wcmVsaW1Db250ZW50ID0gbnVsbDtcbiAgfVxuXG4gIF9jb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IFlBcnJheSgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7WUFycmF5PFQ+fVxuICAgKi9cbiAgY2xvbmUgKCkge1xuICAgIGNvbnN0IGFyciA9IG5ldyBZQXJyYXkoKTtcbiAgICBhcnIuaW5zZXJ0KDAsIHRoaXMudG9BcnJheSgpLm1hcChlbCA9PlxuICAgICAgZWwgaW5zdGFuY2VvZiBBYnN0cmFjdFR5cGUgPyBlbC5jbG9uZSgpIDogZWxcbiAgICApKTtcbiAgICByZXR1cm4gYXJyXG4gIH1cblxuICBnZXQgbGVuZ3RoICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJlbGltQ29udGVudCA9PT0gbnVsbCA/IHRoaXMuX2xlbmd0aCA6IHRoaXMuX3ByZWxpbUNvbnRlbnQubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBZQXJyYXlFdmVudCBhbmQgY2FsbHMgb2JzZXJ2ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1NldDxudWxsfHN0cmluZz59IHBhcmVudFN1YnMgS2V5cyBjaGFuZ2VkIG9uIHRoaXMgdHlwZS4gYG51bGxgIGlmIGxpc3Qgd2FzIG1vZGlmaWVkLlxuICAgKi9cbiAgX2NhbGxPYnNlcnZlciAodHJhbnNhY3Rpb24sIHBhcmVudFN1YnMpIHtcbiAgICBzdXBlci5fY2FsbE9ic2VydmVyKHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKTtcbiAgICBjYWxsVHlwZU9ic2VydmVycyh0aGlzLCB0cmFuc2FjdGlvbiwgbmV3IFlBcnJheUV2ZW50KHRoaXMsIHRyYW5zYWN0aW9uKSk7XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0cyBuZXcgY29udGVudCBhdCBhbiBpbmRleC5cbiAgICpcbiAgICogSW1wb3J0YW50OiBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgYW4gYXJyYXkgb2YgY29udGVudC4gTm90IGp1c3QgYSBjb250ZW50XG4gICAqIG9iamVjdC4gVGhlIHJlYXNvbiBmb3IgdGhpcyBcIndlaXJkbmVzc1wiIGlzIHRoYXQgaW5zZXJ0aW5nIHNldmVyYWwgZWxlbWVudHNcbiAgICogaXMgdmVyeSBlZmZpY2llbnQgd2hlbiBpdCBpcyBkb25lIGFzIGEgc2luZ2xlIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIC8vIEluc2VydCBjaGFyYWN0ZXIgJ2EnIGF0IHBvc2l0aW9uIDBcbiAgICogIHlhcnJheS5pbnNlcnQoMCwgWydhJ10pXG4gICAqICAvLyBJbnNlcnQgbnVtYmVycyAxLCAyIGF0IHBvc2l0aW9uIDFcbiAgICogIHlhcnJheS5pbnNlcnQoMSwgWzEsIDJdKVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IHRvIGluc2VydCBjb250ZW50IGF0LlxuICAgKiBAcGFyYW0ge0FycmF5PFQ+fSBjb250ZW50IFRoZSBhcnJheSBvZiBjb250ZW50XG4gICAqL1xuICBpbnNlcnQgKGluZGV4LCBjb250ZW50KSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTGlzdEluc2VydEdlbmVyaWNzKHRyYW5zYWN0aW9uLCB0aGlzLCBpbmRleCwgY29udGVudCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkuc3BsaWNlKGluZGV4LCAwLCAuLi5jb250ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyBjb250ZW50IHRvIHRoaXMgWUFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PFQ+fSBjb250ZW50IEFycmF5IG9mIGNvbnRlbnQgdG8gYXBwZW5kLlxuICAgKlxuICAgKiBAdG9kbyBVc2UgdGhlIGZvbGxvd2luZyBpbXBsZW1lbnRhdGlvbiBpbiBhbGwgdHlwZXMuXG4gICAqL1xuICBwdXNoIChjb250ZW50KSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTGlzdFB1c2hHZW5lcmljcyh0cmFuc2FjdGlvbiwgdGhpcywgY29udGVudCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkucHVzaCguLi5jb250ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJlcHBlbmRzIGNvbnRlbnQgdG8gdGhpcyBZQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk8VD59IGNvbnRlbnQgQXJyYXkgb2YgY29udGVudCB0byBwcmVwcGVuZC5cbiAgICovXG4gIHVuc2hpZnQgKGNvbnRlbnQpIHtcbiAgICB0aGlzLmluc2VydCgwLCBjb250ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGVsZW1lbnRzIHN0YXJ0aW5nIGZyb20gYW4gaW5kZXguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0byBzdGFydCBkZWxldGluZyBlbGVtZW50c1xuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgZGVsZXRlIChpbmRleCwgbGVuZ3RoID0gMSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZUxpc3REZWxldGUodHJhbnNhY3Rpb24sIHRoaXMsIGluZGV4LCBsZW5ndGgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8YW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpLnNwbGljZShpbmRleCwgbGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaS10aCBlbGVtZW50IGZyb20gYSBZQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuIGZyb20gdGhlIFlBcnJheVxuICAgKiBAcmV0dXJuIHtUfVxuICAgKi9cbiAgZ2V0IChpbmRleCkge1xuICAgIHJldHVybiB0eXBlTGlzdEdldCh0aGlzLCBpbmRleClcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoaXMgWUFycmF5IHRvIGEgSmF2YVNjcmlwdCBBcnJheS5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXk8VD59XG4gICAqL1xuICB0b0FycmF5ICgpIHtcbiAgICByZXR1cm4gdHlwZUxpc3RUb0FycmF5KHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyB0aGlzIFlBcnJheSB0byBhIEphdmFTY3JpcHQgQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnRdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kXVxuICAgKiBAcmV0dXJuIHtBcnJheTxUPn1cbiAgICovXG4gIHNsaWNlIChzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoaXMgU2hhcmVkIFR5cGUgdG8gYSBKU09OIG9iamVjdC5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGMgPT4gYyBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSA/IGMudG9KU09OKCkgOiBjKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gQXJyYXkgd2l0aCB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYSBwcm92aWRlZCBmdW5jdGlvbiBvbiBldmVyeVxuICAgKiBlbGVtZW50IG9mIHRoaXMgWUFycmF5LlxuICAgKlxuICAgKiBAdGVtcGxhdGUgTVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKFQsbnVtYmVyLFlBcnJheTxUPik6TX0gZiBGdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGVsZW1lbnQgb2YgdGhlIG5ldyBBcnJheVxuICAgKiBAcmV0dXJuIHtBcnJheTxNPn0gQSBuZXcgYXJyYXkgd2l0aCBlYWNoIGVsZW1lbnQgYmVpbmcgdGhlIHJlc3VsdCBvZiB0aGVcbiAgICogICAgICAgICAgICAgICAgIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqL1xuICBtYXAgKGYpIHtcbiAgICByZXR1cm4gdHlwZUxpc3RNYXAodGhpcywgLyoqIEB0eXBlIHthbnl9ICovIChmKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBhIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIG9uY2Ugb24gb3ZlcnkgZWxlbWVudCBvZiB0aGlzIFlBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihULG51bWJlcixZQXJyYXk8VD4pOnZvaWR9IGYgQSBmdW5jdGlvbiB0byBleGVjdXRlIG9uIGV2ZXJ5IGVsZW1lbnQgb2YgdGhpcyBZQXJyYXkuXG4gICAqL1xuICBmb3JFYWNoIChmKSB7XG4gICAgdHlwZUxpc3RGb3JFYWNoKHRoaXMsIGYpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8VD59XG4gICAqL1xuICBbU3ltYm9sLml0ZXJhdG9yXSAoKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0Q3JlYXRlSXRlcmF0b3IodGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKi9cbiAgX3dyaXRlIChlbmNvZGVyKSB7XG4gICAgZW5jb2Rlci53cml0ZVR5cGVSZWYoWUFycmF5UmVmSUQpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRZQXJyYXkgPSBkZWNvZGVyID0+IG5ldyBZQXJyYXkoKTtcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQGV4dGVuZHMgWUV2ZW50PFlNYXA8VD4+XG4gKiBFdmVudCB0aGF0IGRlc2NyaWJlcyB0aGUgY2hhbmdlcyBvbiBhIFlNYXAuXG4gKi9cbmNsYXNzIFlNYXBFdmVudCBleHRlbmRzIFlFdmVudCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1lNYXA8VD59IHltYXAgVGhlIFlBcnJheSB0aGF0IGNoYW5nZWQuXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U2V0PGFueT59IHN1YnMgVGhlIGtleXMgdGhhdCBjaGFuZ2VkLlxuICAgKi9cbiAgY29uc3RydWN0b3IgKHltYXAsIHRyYW5zYWN0aW9uLCBzdWJzKSB7XG4gICAgc3VwZXIoeW1hcCwgdHJhbnNhY3Rpb24pO1xuICAgIHRoaXMua2V5c0NoYW5nZWQgPSBzdWJzO1xuICB9XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIE1hcFR5cGVcbiAqIEEgc2hhcmVkIE1hcCBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAZXh0ZW5kcyBBYnN0cmFjdFR5cGU8WU1hcEV2ZW50PE1hcFR5cGU+PlxuICogQGltcGxlbWVudHMge0l0ZXJhYmxlPE1hcFR5cGU+fVxuICovXG5jbGFzcyBZTWFwIGV4dGVuZHMgQWJzdHJhY3RUeXBlIHtcbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7SXRlcmFibGU8cmVhZG9ubHkgW3N0cmluZywgYW55XT49fSBlbnRyaWVzIC0gYW4gb3B0aW9uYWwgaXRlcmFibGUgdG8gaW5pdGlhbGl6ZSB0aGUgWU1hcFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGVudHJpZXMpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLGFueT4/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcHJlbGltQ29udGVudCA9IG51bGw7XG5cbiAgICBpZiAoZW50cmllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9wcmVsaW1Db250ZW50ID0gbmV3IE1hcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wcmVsaW1Db250ZW50ID0gbmV3IE1hcChlbnRyaWVzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW50ZWdyYXRlIHRoaXMgdHlwZSBpbnRvIHRoZSBZanMgaW5zdGFuY2UuXG4gICAqXG4gICAqICogU2F2ZSB0aGlzIHN0cnVjdCBpbiB0aGUgb3NcbiAgICogKiBUaGlzIHR5cGUgaXMgc2VudCB0byBvdGhlciBjbGllbnRcbiAgICogKiBPYnNlcnZlciBmdW5jdGlvbnMgYXJlIGZpcmVkXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jfSB5IFRoZSBZanMgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBfaW50ZWdyYXRlICh5LCBpdGVtKSB7XG4gICAgc3VwZXIuX2ludGVncmF0ZSh5LCBpdGVtKVxuICAgIDsvKiogQHR5cGUge01hcDxzdHJpbmcsIGFueT59ICovICh0aGlzLl9wcmVsaW1Db250ZW50KS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICB0aGlzLnNldChrZXksIHZhbHVlKTtcbiAgICB9KTtcbiAgICB0aGlzLl9wcmVsaW1Db250ZW50ID0gbnVsbDtcbiAgfVxuXG4gIF9jb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IFlNYXAoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1lNYXA8TWFwVHlwZT59XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgY29uc3QgbWFwID0gbmV3IFlNYXAoKTtcbiAgICB0aGlzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSA/IHZhbHVlLmNsb25lKCkgOiB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgWU1hcEV2ZW50IGFuZCBjYWxscyBvYnNlcnZlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U2V0PG51bGx8c3RyaW5nPn0gcGFyZW50U3VicyBLZXlzIGNoYW5nZWQgb24gdGhpcyB0eXBlLiBgbnVsbGAgaWYgbGlzdCB3YXMgbW9kaWZpZWQuXG4gICAqL1xuICBfY2FsbE9ic2VydmVyICh0cmFuc2FjdGlvbiwgcGFyZW50U3Vicykge1xuICAgIGNhbGxUeXBlT2JzZXJ2ZXJzKHRoaXMsIHRyYW5zYWN0aW9uLCBuZXcgWU1hcEV2ZW50KHRoaXMsIHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKSk7XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyB0aGlzIFNoYXJlZCBUeXBlIHRvIGEgSlNPTiBvYmplY3QuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsYW55Pn1cbiAgICovXG4gIHRvSlNPTiAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdDxzdHJpbmcsTWFwVHlwZT59XG4gICAgICovXG4gICAgY29uc3QgbWFwID0ge307XG4gICAgdGhpcy5fbWFwLmZvckVhY2goKGl0ZW0sIGtleSkgPT4ge1xuICAgICAgaWYgKCFpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgY29uc3QgdiA9IGl0ZW0uY29udGVudC5nZXRDb250ZW50KClbaXRlbS5sZW5ndGggLSAxXTtcbiAgICAgICAgbWFwW2tleV0gPSB2IGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlID8gdi50b0pTT04oKSA6IHY7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHNpemUgb2YgdGhlIFlNYXAgKGNvdW50IG9mIGtleS92YWx1ZSBwYWlycylcbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHNpemUgKCkge1xuICAgIHJldHVybiBbLi4uY3JlYXRlTWFwSXRlcmF0b3IodGhpcy5fbWFwKV0ubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUga2V5cyBmb3IgZWFjaCBlbGVtZW50IGluIHRoZSBZTWFwIFR5cGUuXG4gICAqXG4gICAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8c3RyaW5nPn1cbiAgICovXG4gIGtleXMgKCkge1xuICAgIHJldHVybiBpdGVyYXRvci5pdGVyYXRvck1hcChjcmVhdGVNYXBJdGVyYXRvcih0aGlzLl9tYXApLCAvKiogQHBhcmFtIHthbnl9IHYgKi8gdiA9PiB2WzBdKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlcyBmb3IgZWFjaCBlbGVtZW50IGluIHRoZSBZTWFwIFR5cGUuXG4gICAqXG4gICAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8YW55Pn1cbiAgICovXG4gIHZhbHVlcyAoKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yLml0ZXJhdG9yTWFwKGNyZWF0ZU1hcEl0ZXJhdG9yKHRoaXMuX21hcCksIC8qKiBAcGFyYW0ge2FueX0gdiAqLyB2ID0+IHZbMV0uY29udGVudC5nZXRDb250ZW50KClbdlsxXS5sZW5ndGggLSAxXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIEl0ZXJhdG9yIG9mIFtrZXksIHZhbHVlXSBwYWlyc1xuICAgKlxuICAgKiBAcmV0dXJuIHtJdGVyYWJsZUl0ZXJhdG9yPGFueT59XG4gICAqL1xuICBlbnRyaWVzICgpIHtcbiAgICByZXR1cm4gaXRlcmF0b3IuaXRlcmF0b3JNYXAoY3JlYXRlTWFwSXRlcmF0b3IodGhpcy5fbWFwKSwgLyoqIEBwYXJhbSB7YW55fSB2ICovIHYgPT4gW3ZbMF0sIHZbMV0uY29udGVudC5nZXRDb250ZW50KClbdlsxXS5sZW5ndGggLSAxXV0pXG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgYSBwcm92aWRlZCBmdW5jdGlvbiBvbiBvbmNlIG9uIGV2ZXJ5IGtleS12YWx1ZSBwYWlyLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKE1hcFR5cGUsc3RyaW5nLFlNYXA8TWFwVHlwZT4pOnZvaWR9IGYgQSBmdW5jdGlvbiB0byBleGVjdXRlIG9uIGV2ZXJ5IGVsZW1lbnQgb2YgdGhpcyBZQXJyYXkuXG4gICAqL1xuICBmb3JFYWNoIChmKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdDxzdHJpbmcsTWFwVHlwZT59XG4gICAgICovXG4gICAgY29uc3QgbWFwID0ge307XG4gICAgdGhpcy5fbWFwLmZvckVhY2goKGl0ZW0sIGtleSkgPT4ge1xuICAgICAgaWYgKCFpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgZihpdGVtLmNvbnRlbnQuZ2V0Q29udGVudCgpW2l0ZW0ubGVuZ3RoIC0gMV0sIGtleSwgdGhpcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSXRlcmF0b3Igb2YgW2tleSwgdmFsdWVdIHBhaXJzXG4gICAqXG4gICAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8YW55Pn1cbiAgICovXG4gIFtTeW1ib2wuaXRlcmF0b3JdICgpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBzcGVjaWZpZWQgZWxlbWVudCBmcm9tIHRoaXMgWU1hcC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbGVtZW50IHRvIHJlbW92ZS5cbiAgICovXG4gIGRlbGV0ZSAoa2V5KSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTWFwRGVsZXRlKHRyYW5zYWN0aW9uLCB0aGlzLCBrZXkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7TWFwPHN0cmluZywgYW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG9yIHVwZGF0ZXMgYW4gZWxlbWVudCB3aXRoIGEgc3BlY2lmaWVkIGtleSBhbmQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZWxlbWVudCB0byBhZGQgdG8gdGhpcyBZTWFwXG4gICAqIEBwYXJhbSB7TWFwVHlwZX0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IHRvIGFkZFxuICAgKi9cbiAgc2V0IChrZXksIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTWFwU2V0KHRyYW5zYWN0aW9uLCB0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge01hcDxzdHJpbmcsIGFueT59ICovICh0aGlzLl9wcmVsaW1Db250ZW50KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzcGVjaWZpZWQgZWxlbWVudCBmcm9tIHRoaXMgWU1hcC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcmV0dXJuIHtNYXBUeXBlfHVuZGVmaW5lZH1cbiAgICovXG4gIGdldCAoa2V5KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7YW55fSAqLyAodHlwZU1hcEdldCh0aGlzLCBrZXkpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgc3BlY2lmaWVkIGtleSBleGlzdHMgb3Igbm90LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgdG8gdGVzdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGhhcyAoa2V5KSB7XG4gICAgcmV0dXJuIHR5cGVNYXBIYXModGhpcywga2V5KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gdGhpcyBZTWFwLlxuICAgKi9cbiAgY2xlYXIgKCkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5LCBtYXApIHtcbiAgICAgICAgICB0eXBlTWFwRGVsZXRlKHRyYW5zYWN0aW9uLCBtYXAsIGtleSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7TWFwPHN0cmluZywgYW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpLmNsZWFyKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqL1xuICBfd3JpdGUgKGVuY29kZXIpIHtcbiAgICBlbmNvZGVyLndyaXRlVHlwZVJlZihZTWFwUmVmSUQpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRZTWFwID0gZGVjb2RlciA9PiBuZXcgWU1hcCgpO1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBhXG4gKiBAcGFyYW0ge2FueX0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgZXF1YWxBdHRycyA9IChhLCBiKSA9PiBhID09PSBiIHx8ICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT09ICdvYmplY3QnICYmIGEgJiYgYiAmJiBvYmplY3QuZXF1YWxGbGF0KGEsIGIpKTtcblxuY2xhc3MgSXRlbVRleHRMaXN0UG9zaXRpb24ge1xuICAvKipcbiAgICogQHBhcmFtIHtJdGVtfG51bGx9IGxlZnRcbiAgICogQHBhcmFtIHtJdGVtfG51bGx9IHJpZ2h0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgKiBAcGFyYW0ge01hcDxzdHJpbmcsYW55Pn0gY3VycmVudEF0dHJpYnV0ZXNcbiAgICovXG4gIGNvbnN0cnVjdG9yIChsZWZ0LCByaWdodCwgaW5kZXgsIGN1cnJlbnRBdHRyaWJ1dGVzKSB7XG4gICAgdGhpcy5sZWZ0ID0gbGVmdDtcbiAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIHRoaXMuY3VycmVudEF0dHJpYnV0ZXMgPSBjdXJyZW50QXR0cmlidXRlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBPbmx5IGNhbGwgdGhpcyBpZiB5b3Uga25vdyB0aGF0IHRoaXMucmlnaHQgaXMgZGVmaW5lZFxuICAgKi9cbiAgZm9yd2FyZCAoKSB7XG4gICAgaWYgKHRoaXMucmlnaHQgPT09IG51bGwpIHtcbiAgICAgIGVycm9yLnVuZXhwZWN0ZWRDYXNlKCk7XG4gICAgfVxuICAgIHN3aXRjaCAodGhpcy5yaWdodC5jb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICBjYXNlIENvbnRlbnRGb3JtYXQ6XG4gICAgICAgIGlmICghdGhpcy5yaWdodC5kZWxldGVkKSB7XG4gICAgICAgICAgdXBkYXRlQ3VycmVudEF0dHJpYnV0ZXModGhpcy5jdXJyZW50QXR0cmlidXRlcywgLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAodGhpcy5yaWdodC5jb250ZW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICghdGhpcy5yaWdodC5kZWxldGVkKSB7XG4gICAgICAgICAgdGhpcy5pbmRleCArPSB0aGlzLnJpZ2h0Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgIH1cbiAgICB0aGlzLmxlZnQgPSB0aGlzLnJpZ2h0O1xuICAgIHRoaXMucmlnaHQgPSB0aGlzLnJpZ2h0LnJpZ2h0O1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7SXRlbVRleHRMaXN0UG9zaXRpb259IHBvc1xuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IHN0ZXBzIHRvIG1vdmUgZm9yd2FyZFxuICogQHJldHVybiB7SXRlbVRleHRMaXN0UG9zaXRpb259XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBmaW5kTmV4dFBvc2l0aW9uID0gKHRyYW5zYWN0aW9uLCBwb3MsIGNvdW50KSA9PiB7XG4gIHdoaWxlIChwb3MucmlnaHQgIT09IG51bGwgJiYgY291bnQgPiAwKSB7XG4gICAgc3dpdGNoIChwb3MucmlnaHQuY29udGVudC5jb25zdHJ1Y3Rvcikge1xuICAgICAgY2FzZSBDb250ZW50Rm9ybWF0OlxuICAgICAgICBpZiAoIXBvcy5yaWdodC5kZWxldGVkKSB7XG4gICAgICAgICAgdXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMocG9zLmN1cnJlbnRBdHRyaWJ1dGVzLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChwb3MucmlnaHQuY29udGVudCkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoIXBvcy5yaWdodC5kZWxldGVkKSB7XG4gICAgICAgICAgaWYgKGNvdW50IDwgcG9zLnJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gc3BsaXQgcmlnaHRcbiAgICAgICAgICAgIGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBjcmVhdGVJRChwb3MucmlnaHQuaWQuY2xpZW50LCBwb3MucmlnaHQuaWQuY2xvY2sgKyBjb3VudCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb3MuaW5kZXggKz0gcG9zLnJpZ2h0Lmxlbmd0aDtcbiAgICAgICAgICBjb3VudCAtPSBwb3MucmlnaHQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHBvcy5sZWZ0ID0gcG9zLnJpZ2h0O1xuICAgIHBvcy5yaWdodCA9IHBvcy5yaWdodC5yaWdodDtcbiAgICAvLyBwb3MuZm9yd2FyZCgpIC0gd2UgZG9uJ3QgZm9yd2FyZCBiZWNhdXNlIHRoYXQgd291bGQgaGFsdmUgdGhlIHBlcmZvcm1hbmNlIGJlY2F1c2Ugd2UgYWxyZWFkeSBkbyB0aGUgY2hlY2tzIGFib3ZlXG4gIH1cbiAgcmV0dXJuIHBvc1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZmluZFBvc2l0aW9uID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGluZGV4KSA9PiB7XG4gIGNvbnN0IGN1cnJlbnRBdHRyaWJ1dGVzID0gbmV3IE1hcCgpO1xuICBjb25zdCBtYXJrZXIgPSBmaW5kTWFya2VyKHBhcmVudCwgaW5kZXgpO1xuICBpZiAobWFya2VyKSB7XG4gICAgY29uc3QgcG9zID0gbmV3IEl0ZW1UZXh0TGlzdFBvc2l0aW9uKG1hcmtlci5wLmxlZnQsIG1hcmtlci5wLCBtYXJrZXIuaW5kZXgsIGN1cnJlbnRBdHRyaWJ1dGVzKTtcbiAgICByZXR1cm4gZmluZE5leHRQb3NpdGlvbih0cmFuc2FjdGlvbiwgcG9zLCBpbmRleCAtIG1hcmtlci5pbmRleClcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwb3MgPSBuZXcgSXRlbVRleHRMaXN0UG9zaXRpb24obnVsbCwgcGFyZW50Ll9zdGFydCwgMCwgY3VycmVudEF0dHJpYnV0ZXMpO1xuICAgIHJldHVybiBmaW5kTmV4dFBvc2l0aW9uKHRyYW5zYWN0aW9uLCBwb3MsIGluZGV4KVxuICB9XG59O1xuXG4vKipcbiAqIE5lZ2F0ZSBhcHBsaWVkIGZvcm1hdHNcbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufSBjdXJyUG9zXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsYW55Pn0gbmVnYXRlZEF0dHJpYnV0ZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGluc2VydE5lZ2F0ZWRBdHRyaWJ1dGVzID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGN1cnJQb3MsIG5lZ2F0ZWRBdHRyaWJ1dGVzKSA9PiB7XG4gIC8vIGNoZWNrIGlmIHdlIHJlYWxseSBuZWVkIHRvIHJlbW92ZSBhdHRyaWJ1dGVzXG4gIHdoaWxlIChcbiAgICBjdXJyUG9zLnJpZ2h0ICE9PSBudWxsICYmIChcbiAgICAgIGN1cnJQb3MucmlnaHQuZGVsZXRlZCA9PT0gdHJ1ZSB8fCAoXG4gICAgICAgIGN1cnJQb3MucmlnaHQuY29udGVudC5jb25zdHJ1Y3RvciA9PT0gQ29udGVudEZvcm1hdCAmJlxuICAgICAgICBlcXVhbEF0dHJzKG5lZ2F0ZWRBdHRyaWJ1dGVzLmdldCgvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQpLmtleSksIC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGN1cnJQb3MucmlnaHQuY29udGVudCkudmFsdWUpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICBpZiAoIWN1cnJQb3MucmlnaHQuZGVsZXRlZCkge1xuICAgICAgbmVnYXRlZEF0dHJpYnV0ZXMuZGVsZXRlKC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGN1cnJQb3MucmlnaHQuY29udGVudCkua2V5KTtcbiAgICB9XG4gICAgY3VyclBvcy5mb3J3YXJkKCk7XG4gIH1cbiAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jO1xuICBjb25zdCBvd25DbGllbnRJZCA9IGRvYy5jbGllbnRJRDtcbiAgbmVnYXRlZEF0dHJpYnV0ZXMuZm9yRWFjaCgodmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCBsZWZ0ID0gY3VyclBvcy5sZWZ0O1xuICAgIGNvbnN0IHJpZ2h0ID0gY3VyclBvcy5yaWdodDtcbiAgICBjb25zdCBuZXh0Rm9ybWF0ID0gbmV3IEl0ZW0oY3JlYXRlSUQob3duQ2xpZW50SWQsIGdldFN0YXRlKGRvYy5zdG9yZSwgb3duQ2xpZW50SWQpKSwgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCwgcmlnaHQsIHJpZ2h0ICYmIHJpZ2h0LmlkLCBwYXJlbnQsIG51bGwsIG5ldyBDb250ZW50Rm9ybWF0KGtleSwgdmFsKSk7XG4gICAgbmV4dEZvcm1hdC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApO1xuICAgIGN1cnJQb3MucmlnaHQgPSBuZXh0Rm9ybWF0O1xuICAgIGN1cnJQb3MuZm9yd2FyZCgpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtNYXA8c3RyaW5nLGFueT59IGN1cnJlbnRBdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0NvbnRlbnRGb3JtYXR9IGZvcm1hdFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMgPSAoY3VycmVudEF0dHJpYnV0ZXMsIGZvcm1hdCkgPT4ge1xuICBjb25zdCB7IGtleSwgdmFsdWUgfSA9IGZvcm1hdDtcbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgY3VycmVudEF0dHJpYnV0ZXMuZGVsZXRlKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudEF0dHJpYnV0ZXMuc2V0KGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7SXRlbVRleHRMaXN0UG9zaXRpb259IGN1cnJQb3NcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBhdHRyaWJ1dGVzXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBtaW5pbWl6ZUF0dHJpYnV0ZUNoYW5nZXMgPSAoY3VyclBvcywgYXR0cmlidXRlcykgPT4ge1xuICAvLyBnbyByaWdodCB3aGlsZSBhdHRyaWJ1dGVzW3JpZ2h0LmtleV0gPT09IHJpZ2h0LnZhbHVlIChvciByaWdodCBpcyBkZWxldGVkKVxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChjdXJyUG9zLnJpZ2h0ID09PSBudWxsKSB7XG4gICAgICBicmVha1xuICAgIH0gZWxzZSBpZiAoY3VyclBvcy5yaWdodC5kZWxldGVkIHx8IChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRGb3JtYXQgJiYgZXF1YWxBdHRycyhhdHRyaWJ1dGVzWygvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQpKS5rZXldIHx8IG51bGwsIC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGN1cnJQb3MucmlnaHQuY29udGVudCkudmFsdWUpKSkgOyBlbHNlIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGN1cnJQb3MuZm9yd2FyZCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7SXRlbVRleHRMaXN0UG9zaXRpb259IGN1cnJQb3NcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJuIHtNYXA8c3RyaW5nLGFueT59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICoqL1xuY29uc3QgaW5zZXJ0QXR0cmlidXRlcyA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBhdHRyaWJ1dGVzKSA9PiB7XG4gIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvYztcbiAgY29uc3Qgb3duQ2xpZW50SWQgPSBkb2MuY2xpZW50SUQ7XG4gIGNvbnN0IG5lZ2F0ZWRBdHRyaWJ1dGVzID0gbmV3IE1hcCgpO1xuICAvLyBpbnNlcnQgZm9ybWF0LXN0YXJ0IGl0ZW1zXG4gIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCB2YWwgPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgY29uc3QgY3VycmVudFZhbCA9IGN1cnJQb3MuY3VycmVudEF0dHJpYnV0ZXMuZ2V0KGtleSkgfHwgbnVsbDtcbiAgICBpZiAoIWVxdWFsQXR0cnMoY3VycmVudFZhbCwgdmFsKSkge1xuICAgICAgLy8gc2F2ZSBuZWdhdGVkIGF0dHJpYnV0ZSAoc2V0IG51bGwgaWYgY3VycmVudFZhbCB1bmRlZmluZWQpXG4gICAgICBuZWdhdGVkQXR0cmlidXRlcy5zZXQoa2V5LCBjdXJyZW50VmFsKTtcbiAgICAgIGNvbnN0IHsgbGVmdCwgcmlnaHQgfSA9IGN1cnJQb3M7XG4gICAgICBjdXJyUG9zLnJpZ2h0ID0gbmV3IEl0ZW0oY3JlYXRlSUQob3duQ2xpZW50SWQsIGdldFN0YXRlKGRvYy5zdG9yZSwgb3duQ2xpZW50SWQpKSwgbGVmdCwgbGVmdCAmJiBsZWZ0Lmxhc3RJZCwgcmlnaHQsIHJpZ2h0ICYmIHJpZ2h0LmlkLCBwYXJlbnQsIG51bGwsIG5ldyBDb250ZW50Rm9ybWF0KGtleSwgdmFsKSk7XG4gICAgICBjdXJyUG9zLnJpZ2h0LmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMCk7XG4gICAgICBjdXJyUG9zLmZvcndhcmQoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZ2F0ZWRBdHRyaWJ1dGVzXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7SXRlbVRleHRMaXN0UG9zaXRpb259IGN1cnJQb3NcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdHxBYnN0cmFjdFR5cGU8YW55Pn0gdGV4dFxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IGF0dHJpYnV0ZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKiovXG5jb25zdCBpbnNlcnRUZXh0ID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGN1cnJQb3MsIHRleHQsIGF0dHJpYnV0ZXMpID0+IHtcbiAgY3VyclBvcy5jdXJyZW50QXR0cmlidXRlcy5mb3JFYWNoKCh2YWwsIGtleSkgPT4ge1xuICAgIGlmIChhdHRyaWJ1dGVzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgYXR0cmlidXRlc1trZXldID0gbnVsbDtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XG4gIGNvbnN0IG93bkNsaWVudElkID0gZG9jLmNsaWVudElEO1xuICBtaW5pbWl6ZUF0dHJpYnV0ZUNoYW5nZXMoY3VyclBvcywgYXR0cmlidXRlcyk7XG4gIGNvbnN0IG5lZ2F0ZWRBdHRyaWJ1dGVzID0gaW5zZXJ0QXR0cmlidXRlcyh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBhdHRyaWJ1dGVzKTtcbiAgLy8gaW5zZXJ0IGNvbnRlbnRcbiAgY29uc3QgY29udGVudCA9IHRleHQuY29uc3RydWN0b3IgPT09IFN0cmluZyA/IG5ldyBDb250ZW50U3RyaW5nKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodGV4dCkpIDogKHRleHQgaW5zdGFuY2VvZiBBYnN0cmFjdFR5cGUgPyBuZXcgQ29udGVudFR5cGUodGV4dCkgOiBuZXcgQ29udGVudEVtYmVkKHRleHQpKTtcbiAgbGV0IHsgbGVmdCwgcmlnaHQsIGluZGV4IH0gPSBjdXJyUG9zO1xuICBpZiAocGFyZW50Ll9zZWFyY2hNYXJrZXIpIHtcbiAgICB1cGRhdGVNYXJrZXJDaGFuZ2VzKHBhcmVudC5fc2VhcmNoTWFya2VyLCBjdXJyUG9zLmluZGV4LCBjb250ZW50LmdldExlbmd0aCgpKTtcbiAgfVxuICByaWdodCA9IG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShkb2Muc3RvcmUsIG93bkNsaWVudElkKSksIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCwgcGFyZW50LCBudWxsLCBjb250ZW50KTtcbiAgcmlnaHQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKTtcbiAgY3VyclBvcy5yaWdodCA9IHJpZ2h0O1xuICBjdXJyUG9zLmluZGV4ID0gaW5kZXg7XG4gIGN1cnJQb3MuZm9yd2FyZCgpO1xuICBpbnNlcnROZWdhdGVkQXR0cmlidXRlcyh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBuZWdhdGVkQXR0cmlidXRlcyk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7SXRlbVRleHRMaXN0UG9zaXRpb259IGN1cnJQb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBhdHRyaWJ1dGVzXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBmb3JtYXRUZXh0ID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGN1cnJQb3MsIGxlbmd0aCwgYXR0cmlidXRlcykgPT4ge1xuICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XG4gIGNvbnN0IG93bkNsaWVudElkID0gZG9jLmNsaWVudElEO1xuICBtaW5pbWl6ZUF0dHJpYnV0ZUNoYW5nZXMoY3VyclBvcywgYXR0cmlidXRlcyk7XG4gIGNvbnN0IG5lZ2F0ZWRBdHRyaWJ1dGVzID0gaW5zZXJ0QXR0cmlidXRlcyh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBhdHRyaWJ1dGVzKTtcbiAgLy8gaXRlcmF0ZSB1bnRpbCBmaXJzdCBub24tZm9ybWF0IG9yIG51bGwgaXMgZm91bmRcbiAgLy8gZGVsZXRlIGFsbCBmb3JtYXRzIHdpdGggYXR0cmlidXRlc1tmb3JtYXQua2V5XSAhPSBudWxsXG4gIC8vIGFsc28gY2hlY2sgdGhlIGF0dHJpYnV0ZXMgYWZ0ZXIgdGhlIGZpcnN0IG5vbi1mb3JtYXQgYXMgd2UgZG8gbm90IHdhbnQgdG8gaW5zZXJ0IHJlZHVuZGFudCBuZWdhdGVkIGF0dHJpYnV0ZXMgdGhlcmVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICBpdGVyYXRpb25Mb29wOiB3aGlsZSAoXG4gICAgY3VyclBvcy5yaWdodCAhPT0gbnVsbCAmJlxuICAgIChsZW5ndGggPiAwIHx8XG4gICAgICAoXG4gICAgICAgIG5lZ2F0ZWRBdHRyaWJ1dGVzLnNpemUgPiAwICYmXG4gICAgICAgIChjdXJyUG9zLnJpZ2h0LmRlbGV0ZWQgfHwgY3VyclBvcy5yaWdodC5jb250ZW50LmNvbnN0cnVjdG9yID09PSBDb250ZW50Rm9ybWF0KVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgaWYgKCFjdXJyUG9zLnJpZ2h0LmRlbGV0ZWQpIHtcbiAgICAgIHN3aXRjaCAoY3VyclBvcy5yaWdodC5jb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGNhc2UgQ29udGVudEZvcm1hdDoge1xuICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoY3VyclBvcy5yaWdodC5jb250ZW50KTtcbiAgICAgICAgICBjb25zdCBhdHRyID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgIGlmIChhdHRyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChlcXVhbEF0dHJzKGF0dHIsIHZhbHVlKSkge1xuICAgICAgICAgICAgICBuZWdhdGVkQXR0cmlidXRlcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBubyBuZWVkIHRvIGZ1cnRoZXIgZXh0ZW5kIG5lZ2F0ZWRBdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICAgICAgICAgICAgICAgIGJyZWFrIGl0ZXJhdGlvbkxvb3BcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuZWdhdGVkQXR0cmlidXRlcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyUG9zLnJpZ2h0LmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJQb3MuY3VycmVudEF0dHJpYnV0ZXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKGxlbmd0aCA8IGN1cnJQb3MucmlnaHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQoY3VyclBvcy5yaWdodC5pZC5jbGllbnQsIGN1cnJQb3MucmlnaHQuaWQuY2xvY2sgKyBsZW5ndGgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoIC09IGN1cnJQb3MucmlnaHQubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGN1cnJQb3MuZm9yd2FyZCgpO1xuICB9XG4gIC8vIFF1aWxsIGp1c3QgYXNzdW1lcyB0aGF0IHRoZSBlZGl0b3Igc3RhcnRzIHdpdGggYSBuZXdsaW5lIGFuZCB0aGF0IGl0IGFsd2F5c1xuICAvLyBlbmRzIHdpdGggYSBuZXdsaW5lLiBXZSBvbmx5IGluc2VydCB0aGF0IG5ld2xpbmUgd2hlbiBhIG5ldyBuZXdsaW5lIGlzXG4gIC8vIGluc2VydGVkIC0gaS5lIHdoZW4gbGVuZ3RoIGlzIGJpZ2dlciB0aGFuIHR5cGUubGVuZ3RoXG4gIGlmIChsZW5ndGggPiAwKSB7XG4gICAgbGV0IG5ld2xpbmVzID0gJyc7XG4gICAgZm9yICg7IGxlbmd0aCA+IDA7IGxlbmd0aC0tKSB7XG4gICAgICBuZXdsaW5lcyArPSAnXFxuJztcbiAgICB9XG4gICAgY3VyclBvcy5yaWdodCA9IG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShkb2Muc3RvcmUsIG93bkNsaWVudElkKSksIGN1cnJQb3MubGVmdCwgY3VyclBvcy5sZWZ0ICYmIGN1cnJQb3MubGVmdC5sYXN0SWQsIGN1cnJQb3MucmlnaHQsIGN1cnJQb3MucmlnaHQgJiYgY3VyclBvcy5yaWdodC5pZCwgcGFyZW50LCBudWxsLCBuZXcgQ29udGVudFN0cmluZyhuZXdsaW5lcykpO1xuICAgIGN1cnJQb3MucmlnaHQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKTtcbiAgICBjdXJyUG9zLmZvcndhcmQoKTtcbiAgfVxuICBpbnNlcnROZWdhdGVkQXR0cmlidXRlcyh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBuZWdhdGVkQXR0cmlidXRlcyk7XG59O1xuXG4vKipcbiAqIENhbGwgdGhpcyBmdW5jdGlvbiBhZnRlciBzdHJpbmcgY29udGVudCBoYXMgYmVlbiBkZWxldGVkIGluIG9yZGVyIHRvXG4gKiBjbGVhbiB1cCBmb3JtYXR0aW5nIEl0ZW1zLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0l0ZW19IHN0YXJ0XG4gKiBAcGFyYW0ge0l0ZW18bnVsbH0gY3VyciBleGNsdXNpdmUgZW5kLCBhdXRvbWF0aWNhbGx5IGl0ZXJhdGVzIHRvIHRoZSBuZXh0IENvbnRlbnQgSXRlbVxuICogQHBhcmFtIHtNYXA8c3RyaW5nLGFueT59IHN0YXJ0QXR0cmlidXRlc1xuICogQHBhcmFtIHtNYXA8c3RyaW5nLGFueT59IGN1cnJBdHRyaWJ1dGVzXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhbW91bnQgb2YgZm9ybWF0dGluZyBJdGVtcyBkZWxldGVkLlxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjbGVhbnVwRm9ybWF0dGluZ0dhcCA9ICh0cmFuc2FjdGlvbiwgc3RhcnQsIGN1cnIsIHN0YXJ0QXR0cmlidXRlcywgY3VyckF0dHJpYnV0ZXMpID0+IHtcbiAgbGV0IGVuZCA9IGN1cnI7XG4gIGNvbnN0IGVuZEF0dHJpYnV0ZXMgPSBtYXAuY29weShjdXJyQXR0cmlidXRlcyk7XG4gIHdoaWxlIChlbmQgJiYgKCFlbmQuY291bnRhYmxlIHx8IGVuZC5kZWxldGVkKSkge1xuICAgIGlmICghZW5kLmRlbGV0ZWQgJiYgZW5kLmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRGb3JtYXQpIHtcbiAgICAgIHVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzKGVuZEF0dHJpYnV0ZXMsIC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGVuZC5jb250ZW50KSk7XG4gICAgfVxuICAgIGVuZCA9IGVuZC5yaWdodDtcbiAgfVxuICBsZXQgY2xlYW51cHMgPSAwO1xuICBsZXQgcmVhY2hlZEVuZE9mQ3VyciA9IGZhbHNlO1xuICB3aGlsZSAoc3RhcnQgIT09IGVuZCkge1xuICAgIGlmIChjdXJyID09PSBzdGFydCkge1xuICAgICAgcmVhY2hlZEVuZE9mQ3VyciA9IHRydWU7XG4gICAgfVxuICAgIGlmICghc3RhcnQuZGVsZXRlZCkge1xuICAgICAgY29uc3QgY29udGVudCA9IHN0YXJ0LmNvbnRlbnQ7XG4gICAgICBzd2l0Y2ggKGNvbnRlbnQuY29uc3RydWN0b3IpIHtcbiAgICAgICAgY2FzZSBDb250ZW50Rm9ybWF0OiB7XG4gICAgICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChjb250ZW50KTtcbiAgICAgICAgICBpZiAoKGVuZEF0dHJpYnV0ZXMuZ2V0KGtleSkgfHwgbnVsbCkgIT09IHZhbHVlIHx8IChzdGFydEF0dHJpYnV0ZXMuZ2V0KGtleSkgfHwgbnVsbCkgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBFaXRoZXIgdGhpcyBmb3JtYXQgaXMgb3ZlcndyaXR0ZW4gb3IgaXQgaXMgbm90IG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBhdHRyaWJ1dGUgYWxyZWFkeSBleGlzdGVkLlxuICAgICAgICAgICAgc3RhcnQuZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIGNsZWFudXBzKys7XG4gICAgICAgICAgICBpZiAoIXJlYWNoZWRFbmRPZkN1cnIgJiYgKGN1cnJBdHRyaWJ1dGVzLmdldChrZXkpIHx8IG51bGwpID09PSB2YWx1ZSAmJiAoc3RhcnRBdHRyaWJ1dGVzLmdldChrZXkpIHx8IG51bGwpICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICBjdXJyQXR0cmlidXRlcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzdGFydCA9IC8qKiBAdHlwZSB7SXRlbX0gKi8gKHN0YXJ0LnJpZ2h0KTtcbiAgfVxuICByZXR1cm4gY2xlYW51cHNcbn07XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7SXRlbSB8IG51bGx9IGl0ZW1cbiAqL1xuY29uc3QgY2xlYW51cENvbnRleHRsZXNzRm9ybWF0dGluZ0dhcCA9ICh0cmFuc2FjdGlvbiwgaXRlbSkgPT4ge1xuICAvLyBpdGVyYXRlIHVudGlsIGl0ZW0ucmlnaHQgaXMgbnVsbCBvciBjb250ZW50XG4gIHdoaWxlIChpdGVtICYmIGl0ZW0ucmlnaHQgJiYgKGl0ZW0ucmlnaHQuZGVsZXRlZCB8fCAhaXRlbS5yaWdodC5jb3VudGFibGUpKSB7XG4gICAgaXRlbSA9IGl0ZW0ucmlnaHQ7XG4gIH1cbiAgY29uc3QgYXR0cnMgPSBuZXcgU2V0KCk7XG4gIC8vIGl0ZXJhdGUgYmFjayB1bnRpbCBhIGNvbnRlbnQgaXRlbSBpcyBmb3VuZFxuICB3aGlsZSAoaXRlbSAmJiAoaXRlbS5kZWxldGVkIHx8ICFpdGVtLmNvdW50YWJsZSkpIHtcbiAgICBpZiAoIWl0ZW0uZGVsZXRlZCAmJiBpdGVtLmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRGb3JtYXQpIHtcbiAgICAgIGNvbnN0IGtleSA9IC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGl0ZW0uY29udGVudCkua2V5O1xuICAgICAgaWYgKGF0dHJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGl0ZW0uZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dHJzLmFkZChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpdGVtID0gaXRlbS5sZWZ0O1xuICB9XG59O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgZXhwZXJpbWVudGFsIGFuZCBzdWJqZWN0IHRvIGNoYW5nZSAvIGJlIHJlbW92ZWQuXG4gKlxuICogSWRlYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGZ1bmN0aW9uIGF0IGFsbC4gRm9ybWF0dGluZyBhdHRyaWJ1dGVzIHNob3VsZCBiZSBjbGVhbmVkIHVwXG4gKiBhdXRvbWF0aWNhbGx5IGFmdGVyIGVhY2ggY2hhbmdlLiBUaGlzIGZ1bmN0aW9uIGl0ZXJhdGVzIHR3aWNlIG92ZXIgdGhlIGNvbXBsZXRlIFlUZXh0IHR5cGVcbiAqIGFuZCByZW1vdmVzIHVubmVjZXNzYXJ5IGZvcm1hdHRpbmcgYXR0cmlidXRlcy4gVGhpcyBpcyBhbHNvIGhlbHBmdWwgZm9yIHRlc3RpbmcuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3b24ndCBiZSBleHBvcnRlZCBhbnltb3JlIGFzIHNvb24gYXMgdGhlcmUgaXMgY29uZmlkZW5jZSB0aGF0IHRoZSBZVGV4dCB0eXBlIHdvcmtzIGFzIGludGVuZGVkLlxuICpcbiAqIEBwYXJhbSB7WVRleHR9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn0gSG93IG1hbnkgZm9ybWF0dGluZyBhdHRyaWJ1dGVzIGhhdmUgYmVlbiBjbGVhbmVkIHVwLlxuICovXG5jb25zdCBjbGVhbnVwWVRleHRGb3JtYXR0aW5nID0gdHlwZSA9PiB7XG4gIGxldCByZXMgPSAwO1xuICB0cmFuc2FjdCgvKiogQHR5cGUge0RvY30gKi8gKHR5cGUuZG9jKSwgdHJhbnNhY3Rpb24gPT4ge1xuICAgIGxldCBzdGFydCA9IC8qKiBAdHlwZSB7SXRlbX0gKi8gKHR5cGUuX3N0YXJ0KTtcbiAgICBsZXQgZW5kID0gdHlwZS5fc3RhcnQ7XG4gICAgbGV0IHN0YXJ0QXR0cmlidXRlcyA9IG1hcC5jcmVhdGUoKTtcbiAgICBjb25zdCBjdXJyZW50QXR0cmlidXRlcyA9IG1hcC5jb3B5KHN0YXJ0QXR0cmlidXRlcyk7XG4gICAgd2hpbGUgKGVuZCkge1xuICAgICAgaWYgKGVuZC5kZWxldGVkID09PSBmYWxzZSkge1xuICAgICAgICBzd2l0Y2ggKGVuZC5jb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgY2FzZSBDb250ZW50Rm9ybWF0OlxuICAgICAgICAgICAgdXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMoY3VycmVudEF0dHJpYnV0ZXMsIC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGVuZC5jb250ZW50KSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXMgKz0gY2xlYW51cEZvcm1hdHRpbmdHYXAodHJhbnNhY3Rpb24sIHN0YXJ0LCBlbmQsIHN0YXJ0QXR0cmlidXRlcywgY3VycmVudEF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgc3RhcnRBdHRyaWJ1dGVzID0gbWFwLmNvcHkoY3VycmVudEF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQucmlnaHQ7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtJdGVtVGV4dExpc3RQb3NpdGlvbn0gY3VyclBvc1xuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7SXRlbVRleHRMaXN0UG9zaXRpb259XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBkZWxldGVUZXh0ID0gKHRyYW5zYWN0aW9uLCBjdXJyUG9zLCBsZW5ndGgpID0+IHtcbiAgY29uc3Qgc3RhcnRMZW5ndGggPSBsZW5ndGg7XG4gIGNvbnN0IHN0YXJ0QXR0cnMgPSBtYXAuY29weShjdXJyUG9zLmN1cnJlbnRBdHRyaWJ1dGVzKTtcbiAgY29uc3Qgc3RhcnQgPSBjdXJyUG9zLnJpZ2h0O1xuICB3aGlsZSAobGVuZ3RoID4gMCAmJiBjdXJyUG9zLnJpZ2h0ICE9PSBudWxsKSB7XG4gICAgaWYgKGN1cnJQb3MucmlnaHQuZGVsZXRlZCA9PT0gZmFsc2UpIHtcbiAgICAgIHN3aXRjaCAoY3VyclBvcy5yaWdodC5jb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGNhc2UgQ29udGVudFR5cGU6XG4gICAgICAgIGNhc2UgQ29udGVudEVtYmVkOlxuICAgICAgICBjYXNlIENvbnRlbnRTdHJpbmc6XG4gICAgICAgICAgaWYgKGxlbmd0aCA8IGN1cnJQb3MucmlnaHQubGVuZ3RoKSB7XG4gICAgICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQoY3VyclBvcy5yaWdodC5pZC5jbGllbnQsIGN1cnJQb3MucmlnaHQuaWQuY2xvY2sgKyBsZW5ndGgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoIC09IGN1cnJQb3MucmlnaHQubGVuZ3RoO1xuICAgICAgICAgIGN1cnJQb3MucmlnaHQuZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICBjdXJyUG9zLmZvcndhcmQoKTtcbiAgfVxuICBpZiAoc3RhcnQpIHtcbiAgICBjbGVhbnVwRm9ybWF0dGluZ0dhcCh0cmFuc2FjdGlvbiwgc3RhcnQsIGN1cnJQb3MucmlnaHQsIHN0YXJ0QXR0cnMsIGN1cnJQb3MuY3VycmVudEF0dHJpYnV0ZXMpO1xuICB9XG4gIGNvbnN0IHBhcmVudCA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICgvKiogQHR5cGUge0l0ZW19ICovIChjdXJyUG9zLmxlZnQgfHwgY3VyclBvcy5yaWdodCkucGFyZW50KTtcbiAgaWYgKHBhcmVudC5fc2VhcmNoTWFya2VyKSB7XG4gICAgdXBkYXRlTWFya2VyQ2hhbmdlcyhwYXJlbnQuX3NlYXJjaE1hcmtlciwgY3VyclBvcy5pbmRleCwgLXN0YXJ0TGVuZ3RoICsgbGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gY3VyclBvc1xufTtcblxuLyoqXG4gKiBUaGUgUXVpbGwgRGVsdGEgZm9ybWF0IHJlcHJlc2VudHMgY2hhbmdlcyBvbiBhIHRleHQgZG9jdW1lbnQgd2l0aFxuICogZm9ybWF0dGluZyBpbmZvcm1hdGlvbi4gRm9yIG1vciBpbmZvcm1hdGlvbiB2aXNpdCB7QGxpbmsgaHR0cHM6Ly9xdWlsbGpzLmNvbS9kb2NzL2RlbHRhL3xRdWlsbCBEZWx0YX1cbiAqXG4gKiBAZXhhbXBsZVxuICogICB7XG4gKiAgICAgb3BzOiBbXG4gKiAgICAgICB7IGluc2VydDogJ0dhbmRhbGYnLCBhdHRyaWJ1dGVzOiB7IGJvbGQ6IHRydWUgfSB9LFxuICogICAgICAgeyBpbnNlcnQ6ICcgdGhlICcgfSxcbiAqICAgICAgIHsgaW5zZXJ0OiAnR3JleScsIGF0dHJpYnV0ZXM6IHsgY29sb3I6ICcjY2NjY2NjJyB9IH1cbiAqICAgICBdXG4gKiAgIH1cbiAqXG4gKi9cblxuLyoqXG4gICogQXR0cmlidXRlcyB0aGF0IGNhbiBiZSBhc3NpZ25lZCB0byBhIHNlbGVjdGlvbiBvZiB0ZXh0LlxuICAqXG4gICogQGV4YW1wbGVcbiAgKiAgIHtcbiAgKiAgICAgYm9sZDogdHJ1ZSxcbiAgKiAgICAgZm9udC1zaXplOiAnNDBweCdcbiAgKiAgIH1cbiAgKlxuICAqIEB0eXBlZGVmIHtPYmplY3R9IFRleHRBdHRyaWJ1dGVzXG4gICovXG5cbi8qKlxuICogQGV4dGVuZHMgWUV2ZW50PFlUZXh0PlxuICogRXZlbnQgdGhhdCBkZXNjcmliZXMgdGhlIGNoYW5nZXMgb24gYSBZVGV4dCB0eXBlLlxuICovXG5jbGFzcyBZVGV4dEV2ZW50IGV4dGVuZHMgWUV2ZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7WVRleHR9IHl0ZXh0XG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U2V0PGFueT59IHN1YnMgVGhlIGtleXMgdGhhdCBjaGFuZ2VkXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoeXRleHQsIHRyYW5zYWN0aW9uLCBzdWJzKSB7XG4gICAgc3VwZXIoeXRleHQsIHRyYW5zYWN0aW9uKTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjaGlsZHJlbiBjaGFuZ2VkLlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5jaGlsZExpc3RDaGFuZ2VkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogU2V0IG9mIGFsbCBjaGFuZ2VkIGF0dHJpYnV0ZXMuXG4gICAgICogQHR5cGUge1NldDxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMua2V5c0NoYW5nZWQgPSBuZXcgU2V0KCk7XG4gICAgc3Vicy5mb3JFYWNoKChzdWIpID0+IHtcbiAgICAgIGlmIChzdWIgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jaGlsZExpc3RDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMua2V5c0NoYW5nZWQuYWRkKHN1Yik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge3thZGRlZDpTZXQ8SXRlbT4sZGVsZXRlZDpTZXQ8SXRlbT4sa2V5czpNYXA8c3RyaW5nLHthY3Rpb246J2FkZCd8J3VwZGF0ZSd8J2RlbGV0ZScsb2xkVmFsdWU6YW55fT4sZGVsdGE6QXJyYXk8e2luc2VydD86QXJyYXk8YW55PnxzdHJpbmcsIGRlbGV0ZT86bnVtYmVyLCByZXRhaW4/Om51bWJlcn0+fX1cbiAgICovXG4gIGdldCBjaGFuZ2VzICgpIHtcbiAgICBpZiAodGhpcy5fY2hhbmdlcyA9PT0gbnVsbCkge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7e2FkZGVkOlNldDxJdGVtPixkZWxldGVkOlNldDxJdGVtPixrZXlzOk1hcDxzdHJpbmcse2FjdGlvbjonYWRkJ3wndXBkYXRlJ3wnZGVsZXRlJyxvbGRWYWx1ZTphbnl9PixkZWx0YTpBcnJheTx7aW5zZXJ0PzpBcnJheTxhbnk+fHN0cmluZ3xBYnN0cmFjdFR5cGU8YW55PnxvYmplY3QsIGRlbGV0ZT86bnVtYmVyLCByZXRhaW4/Om51bWJlcn0+fX1cbiAgICAgICAqL1xuICAgICAgY29uc3QgY2hhbmdlcyA9IHtcbiAgICAgICAga2V5czogdGhpcy5rZXlzLFxuICAgICAgICBkZWx0YTogdGhpcy5kZWx0YSxcbiAgICAgICAgYWRkZWQ6IG5ldyBTZXQoKSxcbiAgICAgICAgZGVsZXRlZDogbmV3IFNldCgpXG4gICAgICB9O1xuICAgICAgdGhpcy5fY2hhbmdlcyA9IGNoYW5nZXM7XG4gICAgfVxuICAgIHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKHRoaXMuX2NoYW5nZXMpXG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZSB0aGUgY2hhbmdlcyBpbiB0aGUgZGVsdGEgZm9ybWF0LlxuICAgKiBBIHtAbGluayBodHRwczovL3F1aWxsanMuY29tL2RvY3MvZGVsdGEvfFF1aWxsIERlbHRhfSkgdGhhdCByZXByZXNlbnRzIHRoZSBjaGFuZ2VzIG9uIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogQHR5cGUge0FycmF5PHtpbnNlcnQ/OnN0cmluZ3xvYmplY3R8QWJzdHJhY3RUeXBlPGFueT4sIGRlbGV0ZT86bnVtYmVyLCByZXRhaW4/Om51bWJlciwgYXR0cmlidXRlcz86IE9iamVjdDxzdHJpbmcsYW55Pn0+fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXQgZGVsdGEgKCkge1xuICAgIGlmICh0aGlzLl9kZWx0YSA9PT0gbnVsbCkge1xuICAgICAgY29uc3QgeSA9IC8qKiBAdHlwZSB7RG9jfSAqLyAodGhpcy50YXJnZXQuZG9jKTtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge0FycmF5PHtpbnNlcnQ/OnN0cmluZ3xvYmplY3R8QWJzdHJhY3RUeXBlPGFueT4sIGRlbGV0ZT86bnVtYmVyLCByZXRhaW4/Om51bWJlciwgYXR0cmlidXRlcz86IE9iamVjdDxzdHJpbmcsYW55Pn0+fVxuICAgICAgICovXG4gICAgICBjb25zdCBkZWx0YSA9IFtdO1xuICAgICAgdHJhbnNhY3QoeSwgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50QXR0cmlidXRlcyA9IG5ldyBNYXAoKTsgLy8gc2F2ZXMgYWxsIGN1cnJlbnQgYXR0cmlidXRlcyBmb3IgaW5zZXJ0XG4gICAgICAgIGNvbnN0IG9sZEF0dHJpYnV0ZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGxldCBpdGVtID0gdGhpcy50YXJnZXQuX3N0YXJ0O1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge3N0cmluZz99XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgYWN0aW9uID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLGFueT59XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0ge307IC8vIGNvdW50cyBhZGRlZCBvciByZW1vdmVkIG5ldyBhdHRyaWJ1dGVzIGZvciByZXRhaW5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd8b2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGluc2VydCA9ICcnO1xuICAgICAgICBsZXQgcmV0YWluID0gMDtcbiAgICAgICAgbGV0IGRlbGV0ZUxlbiA9IDA7XG4gICAgICAgIGNvbnN0IGFkZE9wID0gKCkgPT4ge1xuICAgICAgICAgIGlmIChhY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHR5cGUge2FueX1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGV0IG9wO1xuICAgICAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICAgICAgICBvcCA9IHsgZGVsZXRlOiBkZWxldGVMZW4gfTtcbiAgICAgICAgICAgICAgICBkZWxldGVMZW4gPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIGNhc2UgJ2luc2VydCc6XG4gICAgICAgICAgICAgICAgb3AgPSB7IGluc2VydCB9O1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50QXR0cmlidXRlcy5zaXplID4gMCkge1xuICAgICAgICAgICAgICAgICAgb3AuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvcC5hdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluc2VydCA9ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIGNhc2UgJ3JldGFpbic6XG4gICAgICAgICAgICAgICAgb3AgPSB7IHJldGFpbiB9O1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICBvcC5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wLmF0dHJpYnV0ZXNba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0YWluID0gMDtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsdGEucHVzaChvcCk7XG4gICAgICAgICAgICBhY3Rpb24gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgd2hpbGUgKGl0ZW0gIT09IG51bGwpIHtcbiAgICAgICAgICBzd2l0Y2ggKGl0ZW0uY29udGVudC5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY2FzZSBDb250ZW50VHlwZTpcbiAgICAgICAgICAgIGNhc2UgQ29udGVudEVtYmVkOlxuICAgICAgICAgICAgICBpZiAodGhpcy5hZGRzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRlbGV0ZXMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgIGFkZE9wKCk7XG4gICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnaW5zZXJ0JztcbiAgICAgICAgICAgICAgICAgIGluc2VydCA9IGl0ZW0uY29udGVudC5nZXRDb250ZW50KClbMF07XG4gICAgICAgICAgICAgICAgICBhZGRPcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRlbGV0ZXMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uICE9PSAnZGVsZXRlJykge1xuICAgICAgICAgICAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdkZWxldGUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGVMZW4gKz0gMTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiAhPT0gJ3JldGFpbicpIHtcbiAgICAgICAgICAgICAgICAgIGFkZE9wKCk7XG4gICAgICAgICAgICAgICAgICBhY3Rpb24gPSAncmV0YWluJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0YWluICs9IDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgQ29udGVudFN0cmluZzpcbiAgICAgICAgICAgICAgaWYgKHRoaXMuYWRkcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kZWxldGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uICE9PSAnaW5zZXJ0Jykge1xuICAgICAgICAgICAgICAgICAgICBhZGRPcCgpO1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnaW5zZXJ0JztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGluc2VydCArPSAvKiogQHR5cGUge0NvbnRlbnRTdHJpbmd9ICovIChpdGVtLmNvbnRlbnQpLnN0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kZWxldGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiAhPT0gJ2RlbGV0ZScpIHtcbiAgICAgICAgICAgICAgICAgIGFkZE9wKCk7XG4gICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnZGVsZXRlJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlTGVuICs9IGl0ZW0ubGVuZ3RoO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uICE9PSAncmV0YWluJykge1xuICAgICAgICAgICAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICdyZXRhaW4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXRhaW4gKz0gaXRlbS5sZW5ndGg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgQ29udGVudEZvcm1hdDoge1xuICAgICAgICAgICAgICBjb25zdCB7IGtleSwgdmFsdWUgfSA9IC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGl0ZW0uY29udGVudCk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmFkZHMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY3VyVmFsID0gY3VycmVudEF0dHJpYnV0ZXMuZ2V0KGtleSkgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICAgIGlmICghZXF1YWxBdHRycyhjdXJWYWwsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSAncmV0YWluJykge1xuICAgICAgICAgICAgICAgICAgICAgIGFkZE9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVxdWFsQXR0cnModmFsdWUsIChvbGRBdHRyaWJ1dGVzLmdldChrZXkpIHx8IG51bGwpKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRlbGV0ZXMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBvbGRBdHRyaWJ1dGVzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJWYWwgPSBjdXJyZW50QXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsO1xuICAgICAgICAgICAgICAgIGlmICghZXF1YWxBdHRycyhjdXJWYWwsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ3JldGFpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IGN1clZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgIG9sZEF0dHJpYnV0ZXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHIgPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFlcXVhbEF0dHJzKGF0dHIsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSAncmV0YWluJykge1xuICAgICAgICAgICAgICAgICAgICAgIGFkZE9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdHRyICE9PSBudWxsKSB7IC8vIHRoaXMgd2lsbCBiZSBjbGVhbmVkIHVwIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGNvbnRleHRsZXNzIGNsZWFudXAgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgaXRlbS5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdpbnNlcnQnKSB7XG4gICAgICAgICAgICAgICAgICBhZGRPcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1cGRhdGVDdXJyZW50QXR0cmlidXRlcyhjdXJyZW50QXR0cmlidXRlcywgLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoaXRlbS5jb250ZW50KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbSA9IGl0ZW0ucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgd2hpbGUgKGRlbHRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBsYXN0T3AgPSBkZWx0YVtkZWx0YS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdE9wLnJldGFpbiAhPT0gdW5kZWZpbmVkICYmIGxhc3RPcC5hdHRyaWJ1dGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHJldGFpbiBkZWx0YSdzIGlmIHRoZXkgZG9uJ3QgYXNzaWduIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgIGRlbHRhLnBvcCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLl9kZWx0YSA9IGRlbHRhO1xuICAgIH1cbiAgICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovICh0aGlzLl9kZWx0YSlcbiAgfVxufVxuXG4vKipcbiAqIFR5cGUgdGhhdCByZXByZXNlbnRzIHRleHQgd2l0aCBmb3JtYXR0aW5nIGluZm9ybWF0aW9uLlxuICpcbiAqIFRoaXMgdHlwZSByZXBsYWNlcyB5LXJpY2h0ZXh0IGFzIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgYWJsZSB0byBoYW5kbGVcbiAqIGJsb2NrIGZvcm1hdHMgKGZvcm1hdCBpbmZvcm1hdGlvbiBvbiBhIHBhcmFncmFwaCksIGVtYmVkcyAoY29tcGxleCBlbGVtZW50c1xuICogbGlrZSBwaWN0dXJlcyBhbmQgdmlkZW9zKSwgYW5kIHRleHQgZm9ybWF0cyAoKipib2xkKiosICppdGFsaWMqKS5cbiAqXG4gKiBAZXh0ZW5kcyBBYnN0cmFjdFR5cGU8WVRleHRFdmVudD5cbiAqL1xuY2xhc3MgWVRleHQgZXh0ZW5kcyBBYnN0cmFjdFR5cGUge1xuICAvKipcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtzdHJpbmddIFRoZSBpbml0aWFsIHZhbHVlIG9mIHRoZSBZVGV4dC5cbiAgICovXG4gIGNvbnN0cnVjdG9yIChzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIHBlbmRpbmcgb3BlcmF0aW9ucyBvbiB0aGlzIHR5cGVcbiAgICAgKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24oKTp2b2lkPj99XG4gICAgICovXG4gICAgdGhpcy5fcGVuZGluZyA9IHN0cmluZyAhPT0gdW5kZWZpbmVkID8gWygpID0+IHRoaXMuaW5zZXJ0KDAsIHN0cmluZyldIDogW107XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PEFycmF5U2VhcmNoTWFya2VyPn1cbiAgICAgKi9cbiAgICB0aGlzLl9zZWFyY2hNYXJrZXIgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgY2hhcmFjdGVycyBvZiB0aGlzIHRleHQgdHlwZS5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBsZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLl9sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY30geVxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIF9pbnRlZ3JhdGUgKHksIGl0ZW0pIHtcbiAgICBzdXBlci5faW50ZWdyYXRlKHksIGl0ZW0pO1xuICAgIHRyeSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGZ1bmN0aW9uPn0gKi8gKHRoaXMuX3BlbmRpbmcpLmZvckVhY2goZiA9PiBmKCkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICAgIHRoaXMuX3BlbmRpbmcgPSBudWxsO1xuICB9XG5cbiAgX2NvcHkgKCkge1xuICAgIHJldHVybiBuZXcgWVRleHQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1lUZXh0fVxuICAgKi9cbiAgY2xvbmUgKCkge1xuICAgIGNvbnN0IHRleHQgPSBuZXcgWVRleHQoKTtcbiAgICB0ZXh0LmFwcGx5RGVsdGEodGhpcy50b0RlbHRhKCkpO1xuICAgIHJldHVybiB0ZXh0XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBZVGV4dEV2ZW50IGFuZCBjYWxscyBvYnNlcnZlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U2V0PG51bGx8c3RyaW5nPn0gcGFyZW50U3VicyBLZXlzIGNoYW5nZWQgb24gdGhpcyB0eXBlLiBgbnVsbGAgaWYgbGlzdCB3YXMgbW9kaWZpZWQuXG4gICAqL1xuICBfY2FsbE9ic2VydmVyICh0cmFuc2FjdGlvbiwgcGFyZW50U3Vicykge1xuICAgIHN1cGVyLl9jYWxsT2JzZXJ2ZXIodHJhbnNhY3Rpb24sIHBhcmVudFN1YnMpO1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IFlUZXh0RXZlbnQodGhpcywgdHJhbnNhY3Rpb24sIHBhcmVudFN1YnMpO1xuICAgIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvYztcbiAgICBjYWxsVHlwZU9ic2VydmVycyh0aGlzLCB0cmFuc2FjdGlvbiwgZXZlbnQpO1xuICAgIC8vIElmIGEgcmVtb3RlIGNoYW5nZSBoYXBwZW5lZCwgd2UgdHJ5IHRvIGNsZWFudXAgcG90ZW50aWFsIGZvcm1hdHRpbmcgZHVwbGljYXRlcy5cbiAgICBpZiAoIXRyYW5zYWN0aW9uLmxvY2FsKSB7XG4gICAgICAvLyBjaGVjayBpZiBhbm90aGVyIGZvcm1hdHRpbmcgaXRlbSB3YXMgaW5zZXJ0ZWRcbiAgICAgIGxldCBmb3VuZEZvcm1hdHRpbmdJdGVtID0gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IFtjbGllbnQsIGFmdGVyQ2xvY2tdIG9mIHRyYW5zYWN0aW9uLmFmdGVyU3RhdGUuZW50cmllcygpKSB7XG4gICAgICAgIGNvbnN0IGNsb2NrID0gdHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUuZ2V0KGNsaWVudCkgfHwgMDtcbiAgICAgICAgaWYgKGFmdGVyQ2xvY2sgPT09IGNsb2NrKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgICBpdGVyYXRlU3RydWN0cyh0cmFuc2FjdGlvbiwgLyoqIEB0eXBlIHtBcnJheTxJdGVtfEdDPn0gKi8gKGRvYy5zdG9yZS5jbGllbnRzLmdldChjbGllbnQpKSwgY2xvY2ssIGFmdGVyQ2xvY2ssIGl0ZW0gPT4ge1xuICAgICAgICAgIGlmICghaXRlbS5kZWxldGVkICYmIC8qKiBAdHlwZSB7SXRlbX0gKi8gKGl0ZW0pLmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRGb3JtYXQpIHtcbiAgICAgICAgICAgIGZvdW5kRm9ybWF0dGluZ0l0ZW0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChmb3VuZEZvcm1hdHRpbmdJdGVtKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFmb3VuZEZvcm1hdHRpbmdJdGVtKSB7XG4gICAgICAgIGl0ZXJhdGVEZWxldGVkU3RydWN0cyh0cmFuc2FjdGlvbiwgdHJhbnNhY3Rpb24uZGVsZXRlU2V0LCBpdGVtID0+IHtcbiAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIEdDIHx8IGZvdW5kRm9ybWF0dGluZ0l0ZW0pIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlbS5wYXJlbnQgPT09IHRoaXMgJiYgaXRlbS5jb250ZW50LmNvbnN0cnVjdG9yID09PSBDb250ZW50Rm9ybWF0KSB7XG4gICAgICAgICAgICBmb3VuZEZvcm1hdHRpbmdJdGVtID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdHJhbnNhY3QoZG9jLCAodCkgPT4ge1xuICAgICAgICBpZiAoZm91bmRGb3JtYXR0aW5nSXRlbSkge1xuICAgICAgICAgIC8vIElmIGEgZm9ybWF0dGluZyBpdGVtIHdhcyBpbnNlcnRlZCwgd2Ugc2ltcGx5IGNsZWFuIHRoZSB3aG9sZSB0eXBlLlxuICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSBjdXJyZW50QXR0cmlidXRlcyBmb3IgdGhlIGN1cnJlbnQgcG9zaXRpb24gYW55d2F5LlxuICAgICAgICAgIGNsZWFudXBZVGV4dEZvcm1hdHRpbmcodGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgbm8gZm9ybWF0dGluZyBhdHRyaWJ1dGUgd2FzIGluc2VydGVkLCB3ZSBjYW4gbWFrZSBkdWUgd2l0aCBjb250ZXh0bGVzc1xuICAgICAgICAgIC8vIGZvcm1hdHRpbmcgY2xlYW51cHMuXG4gICAgICAgICAgLy8gQ29udGV4dGxlc3M6IGl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gY29tcHV0ZSBjdXJyZW50QXR0cmlidXRlcyBmb3IgdGhlIGFmZmVjdGVkIHBvc2l0aW9uLlxuICAgICAgICAgIGl0ZXJhdGVEZWxldGVkU3RydWN0cyh0LCB0LmRlbGV0ZVNldCwgaXRlbSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIEdDKSB7XG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0ucGFyZW50ID09PSB0aGlzKSB7XG4gICAgICAgICAgICAgIGNsZWFudXBDb250ZXh0bGVzc0Zvcm1hdHRpbmdHYXAodCwgaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB1bmZvcm1hdHRlZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBZVGV4dCB0eXBlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICB0b1N0cmluZyAoKSB7XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICovXG4gICAgbGV0IG4gPSB0aGlzLl9zdGFydDtcbiAgICB3aGlsZSAobiAhPT0gbnVsbCkge1xuICAgICAgaWYgKCFuLmRlbGV0ZWQgJiYgbi5jb3VudGFibGUgJiYgbi5jb250ZW50LmNvbnN0cnVjdG9yID09PSBDb250ZW50U3RyaW5nKSB7XG4gICAgICAgIHN0ciArPSAvKiogQHR5cGUge0NvbnRlbnRTdHJpbmd9ICovIChuLmNvbnRlbnQpLnN0cjtcbiAgICAgIH1cbiAgICAgIG4gPSBuLnJpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gc3RyXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdW5mb3JtYXR0ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgWVRleHQgdHlwZS5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKiBAcHVibGljXG4gICAqL1xuICB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKClcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBhIHtAbGluayBEZWx0YX0gb24gdGhpcyBzaGFyZWQgWVRleHQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IGRlbHRhIFRoZSBjaGFuZ2VzIHRvIGFwcGx5IG9uIHRoaXMgZWxlbWVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9ICBbb3B0c11cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5zYW5pdGl6ZV0gU2FuaXRpemUgaW5wdXQgZGVsdGEuIFJlbW92ZXMgZW5kaW5nIG5ld2xpbmVzIGlmIHNldCB0byB0cnVlLlxuICAgKlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBhcHBseURlbHRhIChkZWx0YSwgeyBzYW5pdGl6ZSA9IHRydWUgfSA9IHt9KSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICBjb25zdCBjdXJyUG9zID0gbmV3IEl0ZW1UZXh0TGlzdFBvc2l0aW9uKG51bGwsIHRoaXMuX3N0YXJ0LCAwLCBuZXcgTWFwKCkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlbHRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qgb3AgPSBkZWx0YVtpXTtcbiAgICAgICAgICBpZiAob3AuaW5zZXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFF1aWxsIGFzc3VtZXMgdGhhdCB0aGUgY29udGVudCBzdGFydHMgd2l0aCBhbiBlbXB0eSBwYXJhZ3JhcGguXG4gICAgICAgICAgICAvLyBZanMvWS5UZXh0IGFzc3VtZXMgdGhhdCBpdCBzdGFydHMgZW1wdHkuIFdlIGFsd2F5cyBoaWRlIHRoYXRcbiAgICAgICAgICAgIC8vIHRoZXJlIGlzIGEgbmV3bGluZSBhdCB0aGUgZW5kIG9mIHRoZSBjb250ZW50LlxuICAgICAgICAgICAgLy8gSWYgd2Ugb21pdCB0aGlzIHN0ZXAsIGNsaWVudHMgd2lsbCBzZWUgYSBkaWZmZXJlbnQgbnVtYmVyIG9mXG4gICAgICAgICAgICAvLyBwYXJhZ3JhcGhzLCBidXQgbm90aGluZyBiYWQgd2lsbCBoYXBwZW4uXG4gICAgICAgICAgICBjb25zdCBpbnMgPSAoIXNhbml0aXplICYmIHR5cGVvZiBvcC5pbnNlcnQgPT09ICdzdHJpbmcnICYmIGkgPT09IGRlbHRhLmxlbmd0aCAtIDEgJiYgY3VyclBvcy5yaWdodCA9PT0gbnVsbCAmJiBvcC5pbnNlcnQuc2xpY2UoLTEpID09PSAnXFxuJykgPyBvcC5pbnNlcnQuc2xpY2UoMCwgLTEpIDogb3AuaW5zZXJ0O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnMgIT09ICdzdHJpbmcnIHx8IGlucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGluc2VydFRleHQodHJhbnNhY3Rpb24sIHRoaXMsIGN1cnJQb3MsIGlucywgb3AuYXR0cmlidXRlcyB8fCB7fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChvcC5yZXRhaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9ybWF0VGV4dCh0cmFuc2FjdGlvbiwgdGhpcywgY3VyclBvcywgb3AucmV0YWluLCBvcC5hdHRyaWJ1dGVzIHx8IHt9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wLmRlbGV0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWxldGVUZXh0KHRyYW5zYWN0aW9uLCBjdXJyUG9zLCBvcC5kZWxldGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykucHVzaCgoKSA9PiB0aGlzLmFwcGx5RGVsdGEoZGVsdGEpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgRGVsdGEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBZVGV4dCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge1NuYXBzaG90fSBbc25hcHNob3RdXG4gICAqIEBwYXJhbSB7U25hcHNob3R9IFtwcmV2U25hcHNob3RdXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oJ3JlbW92ZWQnIHwgJ2FkZGVkJywgSUQpOmFueX0gW2NvbXB1dGVZQ2hhbmdlXVxuICAgKiBAcmV0dXJuIHthbnl9IFRoZSBEZWx0YSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHR5cGUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHRvRGVsdGEgKHNuYXBzaG90LCBwcmV2U25hcHNob3QsIGNvbXB1dGVZQ2hhbmdlKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGV7QXJyYXk8YW55Pn1cbiAgICAgKi9cbiAgICBjb25zdCBvcHMgPSBbXTtcbiAgICBjb25zdCBjdXJyZW50QXR0cmlidXRlcyA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBkb2MgPSAvKiogQHR5cGUge0RvY30gKi8gKHRoaXMuZG9jKTtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgbGV0IG4gPSB0aGlzLl9zdGFydDtcbiAgICBmdW5jdGlvbiBwYWNrU3RyICgpIHtcbiAgICAgIGlmIChzdHIubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBwYWNrIHN0ciB3aXRoIGF0dHJpYnV0ZXMgdG8gb3BzXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxhbnk+fVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICBsZXQgYWRkQXR0cmlidXRlcyA9IGZhbHNlO1xuICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgYWRkQXR0cmlidXRlcyA9IHRydWU7XG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge09iamVjdDxzdHJpbmcsYW55Pn1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IG9wID0geyBpbnNlcnQ6IHN0ciB9O1xuICAgICAgICBpZiAoYWRkQXR0cmlidXRlcykge1xuICAgICAgICAgIG9wLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgICAgICB9XG4gICAgICAgIG9wcy5wdXNoKG9wKTtcbiAgICAgICAgc3RyID0gJyc7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHNuYXBzaG90cyBhcmUgbWVyZ2VkIGFnYWluIGFmdGVyIHRoZSB0cmFuc2FjdGlvbiwgc28gd2UgbmVlZCB0byBrZWVwIHRoZVxuICAgIC8vIHRyYW5zYWxpdmUgdW50aWwgd2UgYXJlIGRvbmVcbiAgICB0cmFuc2FjdChkb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgIGlmIChzbmFwc2hvdCkge1xuICAgICAgICBzcGxpdFNuYXBzaG90QWZmZWN0ZWRTdHJ1Y3RzKHRyYW5zYWN0aW9uLCBzbmFwc2hvdCk7XG4gICAgICB9XG4gICAgICBpZiAocHJldlNuYXBzaG90KSB7XG4gICAgICAgIHNwbGl0U25hcHNob3RBZmZlY3RlZFN0cnVjdHModHJhbnNhY3Rpb24sIHByZXZTbmFwc2hvdCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAobiAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNWaXNpYmxlKG4sIHNuYXBzaG90KSB8fCAocHJldlNuYXBzaG90ICE9PSB1bmRlZmluZWQgJiYgaXNWaXNpYmxlKG4sIHByZXZTbmFwc2hvdCkpKSB7XG4gICAgICAgICAgc3dpdGNoIChuLmNvbnRlbnQuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGNhc2UgQ29udGVudFN0cmluZzoge1xuICAgICAgICAgICAgICBjb25zdCBjdXIgPSBjdXJyZW50QXR0cmlidXRlcy5nZXQoJ3ljaGFuZ2UnKTtcbiAgICAgICAgICAgICAgaWYgKHNuYXBzaG90ICE9PSB1bmRlZmluZWQgJiYgIWlzVmlzaWJsZShuLCBzbmFwc2hvdCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VyID09PSB1bmRlZmluZWQgfHwgY3VyLnVzZXIgIT09IG4uaWQuY2xpZW50IHx8IGN1ci5zdGF0ZSAhPT0gJ3JlbW92ZWQnKSB7XG4gICAgICAgICAgICAgICAgICBwYWNrU3RyKCk7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5zZXQoJ3ljaGFuZ2UnLCBjb21wdXRlWUNoYW5nZSA/IGNvbXB1dGVZQ2hhbmdlKCdyZW1vdmVkJywgbi5pZCkgOiB7IHR5cGU6ICdyZW1vdmVkJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldlNuYXBzaG90ICE9PSB1bmRlZmluZWQgJiYgIWlzVmlzaWJsZShuLCBwcmV2U25hcHNob3QpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1ciA9PT0gdW5kZWZpbmVkIHx8IGN1ci51c2VyICE9PSBuLmlkLmNsaWVudCB8fCBjdXIuc3RhdGUgIT09ICdhZGRlZCcpIHtcbiAgICAgICAgICAgICAgICAgIHBhY2tTdHIoKTtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnNldCgneWNoYW5nZScsIGNvbXB1dGVZQ2hhbmdlID8gY29tcHV0ZVlDaGFuZ2UoJ2FkZGVkJywgbi5pZCkgOiB7IHR5cGU6ICdhZGRlZCcgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1ciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFja1N0cigpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLmRlbGV0ZSgneWNoYW5nZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN0ciArPSAvKiogQHR5cGUge0NvbnRlbnRTdHJpbmd9ICovIChuLmNvbnRlbnQpLnN0cjtcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgQ29udGVudFR5cGU6XG4gICAgICAgICAgICBjYXNlIENvbnRlbnRFbWJlZDoge1xuICAgICAgICAgICAgICBwYWNrU3RyKCk7XG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxhbnk+fVxuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgY29uc3Qgb3AgPSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0OiBuLmNvbnRlbnQuZ2V0Q29udGVudCgpWzBdXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50QXR0cmlidXRlcy5zaXplID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJzID0gLyoqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLGFueT59ICovICh7fSk7XG4gICAgICAgICAgICAgICAgb3AuYXR0cmlidXRlcyA9IGF0dHJzO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvcHMucHVzaChvcCk7XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIENvbnRlbnRGb3JtYXQ6XG4gICAgICAgICAgICAgIGlmIChpc1Zpc2libGUobiwgc25hcHNob3QpKSB7XG4gICAgICAgICAgICAgICAgcGFja1N0cigpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzKGN1cnJlbnRBdHRyaWJ1dGVzLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChuLmNvbnRlbnQpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuID0gbi5yaWdodDtcbiAgICAgIH1cbiAgICAgIHBhY2tTdHIoKTtcbiAgICB9LCBzcGxpdFNuYXBzaG90QWZmZWN0ZWRTdHJ1Y3RzKTtcbiAgICByZXR1cm4gb3BzXG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0IHRleHQgYXQgYSBnaXZlbiBpbmRleC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBhdCB3aGljaCB0byBzdGFydCBpbnNlcnRpbmcuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIGluc2VydCBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0ge1RleHRBdHRyaWJ1dGVzfSBbYXR0cmlidXRlc10gT3B0aW9uYWxseSBkZWZpbmUgc29tZSBmb3JtYXR0aW5nXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb24gdG8gYXBwbHkgb24gdGhlIGluc2VydGVkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dC5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgaW5zZXJ0IChpbmRleCwgdGV4dCwgYXR0cmlidXRlcykge1xuICAgIGlmICh0ZXh0Lmxlbmd0aCA8PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgeSA9IHRoaXMuZG9jO1xuICAgIGlmICh5ICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh5LCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IHBvcyA9IGZpbmRQb3NpdGlvbih0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgpO1xuICAgICAgICBpZiAoIWF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIHBvcy5jdXJyZW50QXR0cmlidXRlcy5mb3JFYWNoKCh2LCBrKSA9PiB7IGF0dHJpYnV0ZXNba10gPSB2OyB9KTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRUZXh0KHRyYW5zYWN0aW9uLCB0aGlzLCBwb3MsIHRleHQsIGF0dHJpYnV0ZXMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykucHVzaCgoKSA9PiB0aGlzLmluc2VydChpbmRleCwgdGV4dCwgYXR0cmlidXRlcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnRzIGFuIGVtYmVkIGF0IGEgaW5kZXguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggdG8gaW5zZXJ0IHRoZSBlbWJlZCBhdC5cbiAgICogQHBhcmFtIHtPYmplY3QgfCBBYnN0cmFjdFR5cGU8YW55Pn0gZW1iZWQgVGhlIE9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGVtYmVkLlxuICAgKiBAcGFyYW0ge1RleHRBdHRyaWJ1dGVzfSBhdHRyaWJ1dGVzIEF0dHJpYnV0ZSBpbmZvcm1hdGlvbiB0byBhcHBseSBvbiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWJlZFxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBpbnNlcnRFbWJlZCAoaW5kZXgsIGVtYmVkLCBhdHRyaWJ1dGVzID0ge30pIHtcbiAgICBjb25zdCB5ID0gdGhpcy5kb2M7XG4gICAgaWYgKHkgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHksIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgcG9zID0gZmluZFBvc2l0aW9uKHRyYW5zYWN0aW9uLCB0aGlzLCBpbmRleCk7XG4gICAgICAgIGluc2VydFRleHQodHJhbnNhY3Rpb24sIHRoaXMsIHBvcywgZW1iZWQsIGF0dHJpYnV0ZXMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykucHVzaCgoKSA9PiB0aGlzLmluc2VydEVtYmVkKGluZGV4LCBlbWJlZCwgYXR0cmlidXRlcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIHRleHQgc3RhcnRpbmcgZnJvbSBhbiBpbmRleC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIHN0YXJ0IGRlbGV0aW5nLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0byByZW1vdmUuIERlZmF1bHRzIHRvIDEuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGRlbGV0ZSAoaW5kZXgsIGxlbmd0aCkge1xuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCB5ID0gdGhpcy5kb2M7XG4gICAgaWYgKHkgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHksIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgZGVsZXRlVGV4dCh0cmFuc2FjdGlvbiwgZmluZFBvc2l0aW9uKHRyYW5zYWN0aW9uLCB0aGlzLCBpbmRleCksIGxlbmd0aCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxmdW5jdGlvbj59ICovICh0aGlzLl9wZW5kaW5nKS5wdXNoKCgpID0+IHRoaXMuZGVsZXRlKGluZGV4LCBsZW5ndGgpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXNzaWducyBwcm9wZXJ0aWVzIHRvIGEgcmFuZ2Ugb2YgdGV4dC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBwb3NpdGlvbiB3aGVyZSB0byBzdGFydCBmb3JtYXR0aW5nLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBhbW91bnQgb2YgY2hhcmFjdGVycyB0byBhc3NpZ24gcHJvcGVydGllcyB0by5cbiAgICogQHBhcmFtIHtUZXh0QXR0cmlidXRlc30gYXR0cmlidXRlcyBBdHRyaWJ1dGUgaW5mb3JtYXRpb24gdG8gYXBwbHkgb24gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZm9ybWF0IChpbmRleCwgbGVuZ3RoLCBhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IHkgPSB0aGlzLmRvYztcbiAgICBpZiAoeSAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QoeSwgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICBjb25zdCBwb3MgPSBmaW5kUG9zaXRpb24odHJhbnNhY3Rpb24sIHRoaXMsIGluZGV4KTtcbiAgICAgICAgaWYgKHBvcy5yaWdodCA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGZvcm1hdFRleHQodHJhbnNhY3Rpb24sIHRoaXMsIHBvcywgbGVuZ3RoLCBhdHRyaWJ1dGVzKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGZ1bmN0aW9uPn0gKi8gKHRoaXMuX3BlbmRpbmcpLnB1c2goKCkgPT4gdGhpcy5mb3JtYXQoaW5kZXgsIGxlbmd0aCwgYXR0cmlidXRlcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogQG5vdGUgWG1sLVRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBhdHRyaWJ1dGVzLiBZb3UgY2FuIHVzZSB0aGlzIGZlYXR1cmUgdG8gYXNzaWduIHByb3BlcnRpZXMgdG8gY29tcGxldGUgdGV4dC1ibG9ja3MuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyaWJ1dGVOYW1lIFRoZSBhdHRyaWJ1dGUgbmFtZSB0aGF0IGlzIHRvIGJlIHJlbW92ZWQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHJlbW92ZUF0dHJpYnV0ZSAoYXR0cmlidXRlTmFtZSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZU1hcERlbGV0ZSh0cmFuc2FjdGlvbiwgdGhpcywgYXR0cmlidXRlTmFtZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxmdW5jdGlvbj59ICovICh0aGlzLl9wZW5kaW5nKS5wdXNoKCgpID0+IHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBvciB1cGRhdGVzIGFuIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogQG5vdGUgWG1sLVRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBhdHRyaWJ1dGVzLiBZb3UgY2FuIHVzZSB0aGlzIGZlYXR1cmUgdG8gYXNzaWduIHByb3BlcnRpZXMgdG8gY29tcGxldGUgdGV4dC1ibG9ja3MuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyaWJ1dGVOYW1lIFRoZSBhdHRyaWJ1dGUgbmFtZSB0aGF0IGlzIHRvIGJlIHNldC5cbiAgICogQHBhcmFtIHthbnl9IGF0dHJpYnV0ZVZhbHVlIFRoZSBhdHRyaWJ1dGUgdmFsdWUgdGhhdCBpcyB0byBiZSBzZXQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHNldEF0dHJpYnV0ZSAoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVNYXBTZXQodHJhbnNhY3Rpb24sIHRoaXMsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGZ1bmN0aW9uPn0gKi8gKHRoaXMuX3BlbmRpbmcpLnB1c2goKCkgPT4gdGhpcy5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhdHRyaWJ1dGUgdmFsdWUgdGhhdCBiZWxvbmdzIHRvIHRoZSBhdHRyaWJ1dGUgbmFtZS5cbiAgICpcbiAgICogQG5vdGUgWG1sLVRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBhdHRyaWJ1dGVzLiBZb3UgY2FuIHVzZSB0aGlzIGZlYXR1cmUgdG8gYXNzaWduIHByb3BlcnRpZXMgdG8gY29tcGxldGUgdGV4dC1ibG9ja3MuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyaWJ1dGVOYW1lIFRoZSBhdHRyaWJ1dGUgbmFtZSB0aGF0IGlkZW50aWZpZXMgdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJpZWQgdmFsdWUuXG4gICAqIEByZXR1cm4ge2FueX0gVGhlIHF1ZXJpZWQgYXR0cmlidXRlIHZhbHVlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRBdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovICh0eXBlTWFwR2V0KHRoaXMsIGF0dHJpYnV0ZU5hbWUpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIGF0dHJpYnV0ZSBuYW1lL3ZhbHVlIHBhaXJzIGluIGEgSlNPTiBPYmplY3QuXG4gICAqXG4gICAqIEBub3RlIFhtbC1UZXh0IG5vZGVzIGRvbid0IGhhdmUgYXR0cmlidXRlcy4gWW91IGNhbiB1c2UgdGhpcyBmZWF0dXJlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzIHRvIGNvbXBsZXRlIHRleHQtYmxvY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge1NuYXBzaG90fSBbc25hcHNob3RdXG4gICAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsIGFueT59IEEgSlNPTiBPYmplY3QgdGhhdCBkZXNjcmliZXMgdGhlIGF0dHJpYnV0ZXMuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldEF0dHJpYnV0ZXMgKHNuYXBzaG90KSB7XG4gICAgcmV0dXJuIHR5cGVNYXBHZXRBbGwodGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKi9cbiAgX3dyaXRlIChlbmNvZGVyKSB7XG4gICAgZW5jb2Rlci53cml0ZVR5cGVSZWYoWVRleHRSZWZJRCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7WVRleHR9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkWVRleHQgPSBkZWNvZGVyID0+IG5ldyBZVGV4dCgpO1xuXG4vKipcbiAqIEBtb2R1bGUgWVhtbFxuICovXG5cbi8qKlxuICogRGVmaW5lIHRoZSBlbGVtZW50cyB0byB3aGljaCBhIHNldCBvZiBDU1MgcXVlcmllcyBhcHBseS5cbiAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ1NTX1NlbGVjdG9yc3xDU1NfU2VsZWN0b3JzfVxuICpcbiAqIEBleGFtcGxlXG4gKiAgIHF1ZXJ5ID0gJy5jbGFzc1NlbGVjdG9yJ1xuICogICBxdWVyeSA9ICdub2RlU2VsZWN0b3InXG4gKiAgIHF1ZXJ5ID0gJyNpZFNlbGVjdG9yJ1xuICpcbiAqIEB0eXBlZGVmIHtzdHJpbmd9IENTU19TZWxlY3RvclxuICovXG5cbi8qKlxuICogRG9tIGZpbHRlciBmdW5jdGlvbi5cbiAqXG4gKiBAY2FsbGJhY2sgZG9tRmlsdGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gbm9kZU5hbWUgVGhlIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0ge01hcH0gYXR0cmlidXRlcyBUaGUgbWFwIG9mIGF0dHJpYnV0ZXMuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRvIGluY2x1ZGUgdGhlIERvbSBub2RlIGluIHRoZSBZWG1sRWxlbWVudC5cbiAqL1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzdWJzZXQgb2YgdGhlIG5vZGVzIG9mIGEgWVhtbEVsZW1lbnQgLyBZWG1sRnJhZ21lbnQgYW5kIGFcbiAqIHBvc2l0aW9uIHdpdGhpbiB0aGVtLlxuICpcbiAqIENhbiBiZSBjcmVhdGVkIHdpdGgge0BsaW5rIFlYbWxGcmFnbWVudCNjcmVhdGVUcmVlV2Fsa2VyfVxuICpcbiAqIEBwdWJsaWNcbiAqIEBpbXBsZW1lbnRzIHtJdGVyYWJsZTxZWG1sRWxlbWVudHxZWG1sVGV4dHxZWG1sRWxlbWVudHxZWG1sSG9vaz59XG4gKi9cbmNsYXNzIFlYbWxUcmVlV2Fsa2VyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7WVhtbEZyYWdtZW50IHwgWVhtbEVsZW1lbnR9IHJvb3RcbiAgICogQHBhcmFtIHtmdW5jdGlvbihBYnN0cmFjdFR5cGU8YW55Pik6Ym9vbGVhbn0gW2ZdXG4gICAqL1xuICBjb25zdHJ1Y3RvciAocm9vdCwgZiA9ICgpID0+IHRydWUpIHtcbiAgICB0aGlzLl9maWx0ZXIgPSBmO1xuICAgIHRoaXMuX3Jvb3QgPSByb290O1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJdGVtfVxuICAgICAqL1xuICAgIHRoaXMuX2N1cnJlbnROb2RlID0gLyoqIEB0eXBlIHtJdGVtfSAqLyAocm9vdC5fc3RhcnQpO1xuICAgIHRoaXMuX2ZpcnN0Q2FsbCA9IHRydWU7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSAoKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5leHQgbm9kZS5cbiAgICpcbiAgICogQHJldHVybiB7SXRlcmF0b3JSZXN1bHQ8WVhtbEVsZW1lbnR8WVhtbFRleHR8WVhtbEhvb2s+fSBUaGUgbmV4dCBub2RlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBuZXh0ICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAqL1xuICAgIGxldCBuID0gdGhpcy5fY3VycmVudE5vZGU7XG4gICAgbGV0IHR5cGUgPSBuICYmIG4uY29udGVudCAmJiAvKiogQHR5cGUge2FueX0gKi8gKG4uY29udGVudCkudHlwZTtcbiAgICBpZiAobiAhPT0gbnVsbCAmJiAoIXRoaXMuX2ZpcnN0Q2FsbCB8fCBuLmRlbGV0ZWQgfHwgIXRoaXMuX2ZpbHRlcih0eXBlKSkpIHsgLy8gaWYgZmlyc3QgY2FsbCwgd2UgY2hlY2sgaWYgd2UgY2FuIHVzZSB0aGUgZmlyc3QgaXRlbVxuICAgICAgZG8ge1xuICAgICAgICB0eXBlID0gLyoqIEB0eXBlIHthbnl9ICovIChuLmNvbnRlbnQpLnR5cGU7XG4gICAgICAgIGlmICghbi5kZWxldGVkICYmICh0eXBlLmNvbnN0cnVjdG9yID09PSBZWG1sRWxlbWVudCB8fCB0eXBlLmNvbnN0cnVjdG9yID09PSBZWG1sRnJhZ21lbnQpICYmIHR5cGUuX3N0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gd2FsayBkb3duIGluIHRoZSB0cmVlXG4gICAgICAgICAgbiA9IHR5cGUuX3N0YXJ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHdhbGsgcmlnaHQgb3IgdXAgaW4gdGhlIHRyZWVcbiAgICAgICAgICB3aGlsZSAobiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG4ucmlnaHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgbiA9IG4ucmlnaHQ7XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG4ucGFyZW50ID09PSB0aGlzLl9yb290KSB7XG4gICAgICAgICAgICAgIG4gPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbiA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChuLnBhcmVudCkuX2l0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChuICE9PSBudWxsICYmIChuLmRlbGV0ZWQgfHwgIXRoaXMuX2ZpbHRlcigvKiogQHR5cGUge0NvbnRlbnRUeXBlfSAqLyAobi5jb250ZW50KS50eXBlKSkpXG4gICAgfVxuICAgIHRoaXMuX2ZpcnN0Q2FsbCA9IGZhbHNlO1xuICAgIGlmIChuID09PSBudWxsKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH1cbiAgICB9XG4gICAgdGhpcy5fY3VycmVudE5vZGUgPSBuO1xuICAgIHJldHVybiB7IHZhbHVlOiAvKiogQHR5cGUge2FueX0gKi8gKG4uY29udGVudCkudHlwZSwgZG9uZTogZmFsc2UgfVxuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGxpc3Qgb2Yge0BsaW5rIFlYbWxFbGVtZW50fS5hbmQge0BsaW5rIFlYbWxUZXh0fSB0eXBlcy5cbiAqIEEgWXhtbEZyYWdtZW50IGlzIHNpbWlsYXIgdG8gYSB7QGxpbmsgWVhtbEVsZW1lbnR9LCBidXQgaXQgZG9lcyBub3QgaGF2ZSBhXG4gKiBub2RlTmFtZSBhbmQgaXQgZG9lcyBub3QgaGF2ZSBhdHRyaWJ1dGVzLiBUaG91Z2ggaXQgY2FuIGJlIGJvdW5kIHRvIGEgRE9NXG4gKiBlbGVtZW50IC0gaW4gdGhpcyBjYXNlIHRoZSBhdHRyaWJ1dGVzIGFuZCB0aGUgbm9kZU5hbWUgYXJlIG5vdCBzaGFyZWQuXG4gKlxuICogQHB1YmxpY1xuICogQGV4dGVuZHMgQWJzdHJhY3RUeXBlPFlYbWxFdmVudD5cbiAqL1xuY2xhc3MgWVhtbEZyYWdtZW50IGV4dGVuZHMgQWJzdHJhY3RUeXBlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PGFueT58bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLl9wcmVsaW1Db250ZW50ID0gW107XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fG51bGx9XG4gICAqL1xuICBnZXQgZmlyc3RDaGlsZCAoKSB7XG4gICAgY29uc3QgZmlyc3QgPSB0aGlzLl9maXJzdDtcbiAgICByZXR1cm4gZmlyc3QgPyBmaXJzdC5jb250ZW50LmdldENvbnRlbnQoKVswXSA6IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlZ3JhdGUgdGhpcyB0eXBlIGludG8gdGhlIFlqcyBpbnN0YW5jZS5cbiAgICpcbiAgICogKiBTYXZlIHRoaXMgc3RydWN0IGluIHRoZSBvc1xuICAgKiAqIFRoaXMgdHlwZSBpcyBzZW50IHRvIG90aGVyIGNsaWVudFxuICAgKiAqIE9ic2VydmVyIGZ1bmN0aW9ucyBhcmUgZmlyZWRcbiAgICpcbiAgICogQHBhcmFtIHtEb2N9IHkgVGhlIFlqcyBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIF9pbnRlZ3JhdGUgKHksIGl0ZW0pIHtcbiAgICBzdXBlci5faW50ZWdyYXRlKHksIGl0ZW0pO1xuICAgIHRoaXMuaW5zZXJ0KDAsIC8qKiBAdHlwZSB7QXJyYXk8YW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpKTtcbiAgICB0aGlzLl9wcmVsaW1Db250ZW50ID0gbnVsbDtcbiAgfVxuXG4gIF9jb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IFlYbWxGcmFnbWVudCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7WVhtbEZyYWdtZW50fVxuICAgKi9cbiAgY2xvbmUgKCkge1xuICAgIGNvbnN0IGVsID0gbmV3IFlYbWxGcmFnbWVudCgpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBlbC5pbnNlcnQoMCwgdGhpcy50b0FycmF5KCkubWFwKGl0ZW0gPT4gaXRlbSBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSA/IGl0ZW0uY2xvbmUoKSA6IGl0ZW0pKTtcbiAgICByZXR1cm4gZWxcbiAgfVxuXG4gIGdldCBsZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLl9wcmVsaW1Db250ZW50ID09PSBudWxsID8gdGhpcy5fbGVuZ3RoIDogdGhpcy5fcHJlbGltQ29udGVudC5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBzdWJ0cmVlIG9mIGNoaWxkTm9kZXMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHdhbGtlciA9IGVsZW0uY3JlYXRlVHJlZVdhbGtlcihkb20gPT4gZG9tLm5vZGVOYW1lID09PSAnZGl2JylcbiAgICogZm9yIChsZXQgbm9kZSBpbiB3YWxrZXIpIHtcbiAgICogICAvLyBgbm9kZWAgaXMgYSBkaXYgbm9kZVxuICAgKiAgIG5vcChub2RlKVxuICAgKiB9XG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oQWJzdHJhY3RUeXBlPGFueT4pOmJvb2xlYW59IGZpbHRlciBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCBvbiBlYWNoIGNoaWxkIGVsZW1lbnQgYW5kXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGNoaWxkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBpcyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgc3VidHJlZS5cbiAgICogQHJldHVybiB7WVhtbFRyZWVXYWxrZXJ9IEEgc3VidHJlZSBhbmQgYSBwb3NpdGlvbiB3aXRoaW4gaXQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNyZWF0ZVRyZWVXYWxrZXIgKGZpbHRlcikge1xuICAgIHJldHVybiBuZXcgWVhtbFRyZWVXYWxrZXIodGhpcywgZmlsdGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IFlYbWxFbGVtZW50IHRoYXQgbWF0Y2hlcyB0aGUgcXVlcnkuXG4gICAqIFNpbWlsYXIgdG8gRE9NJ3Mge0BsaW5rIHF1ZXJ5U2VsZWN0b3J9LlxuICAgKlxuICAgKiBRdWVyeSBzdXBwb3J0OlxuICAgKiAgIC0gdGFnbmFtZVxuICAgKiBUT0RPOlxuICAgKiAgIC0gaWRcbiAgICogICAtIGF0dHJpYnV0ZVxuICAgKlxuICAgKiBAcGFyYW0ge0NTU19TZWxlY3Rvcn0gcXVlcnkgVGhlIHF1ZXJ5IG9uIHRoZSBjaGlsZHJlbi5cbiAgICogQHJldHVybiB7WVhtbEVsZW1lbnR8WVhtbFRleHR8WVhtbEhvb2t8bnVsbH0gVGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBxdWVyeSBvciBudWxsLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBxdWVyeVNlbGVjdG9yIChxdWVyeSkge1xuICAgIHF1ZXJ5ID0gcXVlcnkudG9VcHBlckNhc2UoKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3QgaXRlcmF0b3IgPSBuZXcgWVhtbFRyZWVXYWxrZXIodGhpcywgZWxlbWVudCA9PiBlbGVtZW50Lm5vZGVOYW1lICYmIGVsZW1lbnQubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PT0gcXVlcnkpO1xuICAgIGNvbnN0IG5leHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgaWYgKG5leHQuZG9uZSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5leHQudmFsdWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbGwgWVhtbEVsZW1lbnRzIHRoYXQgbWF0Y2ggdGhlIHF1ZXJ5LlxuICAgKiBTaW1pbGFyIHRvIERvbSdzIHtAbGluayBxdWVyeVNlbGVjdG9yQWxsfS5cbiAgICpcbiAgICogQHRvZG8gRG9lcyBub3QgeWV0IHN1cHBvcnQgYWxsIHF1ZXJpZXMuIEN1cnJlbnRseSBvbmx5IHF1ZXJ5IGJ5IHRhZ05hbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7Q1NTX1NlbGVjdG9yfSBxdWVyeSBUaGUgcXVlcnkgb24gdGhlIGNoaWxkcmVuXG4gICAqIEByZXR1cm4ge0FycmF5PFlYbWxFbGVtZW50fFlYbWxUZXh0fFlYbWxIb29rfG51bGw+fSBUaGUgZWxlbWVudHMgdGhhdCBtYXRjaCB0aGlzIHF1ZXJ5LlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBxdWVyeVNlbGVjdG9yQWxsIChxdWVyeSkge1xuICAgIHF1ZXJ5ID0gcXVlcnkudG9VcHBlckNhc2UoKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFlYbWxUcmVlV2Fsa2VyKHRoaXMsIGVsZW1lbnQgPT4gZWxlbWVudC5ub2RlTmFtZSAmJiBlbGVtZW50Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09IHF1ZXJ5KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIFlYbWxFdmVudCBhbmQgY2FsbHMgb2JzZXJ2ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1NldDxudWxsfHN0cmluZz59IHBhcmVudFN1YnMgS2V5cyBjaGFuZ2VkIG9uIHRoaXMgdHlwZS4gYG51bGxgIGlmIGxpc3Qgd2FzIG1vZGlmaWVkLlxuICAgKi9cbiAgX2NhbGxPYnNlcnZlciAodHJhbnNhY3Rpb24sIHBhcmVudFN1YnMpIHtcbiAgICBjYWxsVHlwZU9ic2VydmVycyh0aGlzLCB0cmFuc2FjdGlvbiwgbmV3IFlYbWxFdmVudCh0aGlzLCBwYXJlbnRTdWJzLCB0cmFuc2FjdGlvbikpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFsbCB0aGUgY2hpbGRyZW4gb2YgdGhpcyBZWG1sRnJhZ21lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbGwgY2hpbGRyZW4uXG4gICAqL1xuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0TWFwKHRoaXMsIHhtbCA9PiB4bWwudG9TdHJpbmcoKSkuam9pbignJylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgRG9tIEVsZW1lbnQgdGhhdCBtaXJyb3JzIHRoaXMgWVhtbEVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jdW1lbnR9IFtfZG9jdW1lbnQ9ZG9jdW1lbnRdIFRoZSBkb2N1bWVudCBvYmplY3QgKHlvdSBtdXN0IGRlZmluZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHdoZW4gY2FsbGluZyB0aGlzIG1ldGhvZCBpblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlanMpXG4gICAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gW2hvb2tzPXt9XSBPcHRpb25hbCBwcm9wZXJ0eSB0byBjdXN0b21pemUgaG93IGhvb2tzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHByZXNlbnRlZCBpbiB0aGUgRE9NXG4gICAqIEBwYXJhbSB7YW55fSBbYmluZGluZ10gWW91IHNob3VsZCBub3Qgc2V0IHRoaXMgcHJvcGVydHkuIFRoaXMgaXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCBpZiBEb21CaW5kaW5nIHdhbnRzIHRvIGNyZWF0ZSBhXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc29jaWF0aW9uIHRvIHRoZSBjcmVhdGVkIERPTSB0eXBlLlxuICAgKiBAcmV0dXJuIHtOb2RlfSBUaGUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50fERvbSBFbGVtZW50fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICB0b0RPTSAoX2RvY3VtZW50ID0gZG9jdW1lbnQsIGhvb2tzID0ge30sIGJpbmRpbmcpIHtcbiAgICBjb25zdCBmcmFnbWVudCA9IF9kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgaWYgKGJpbmRpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYmluZGluZy5fY3JlYXRlQXNzb2NpYXRpb24oZnJhZ21lbnQsIHRoaXMpO1xuICAgIH1cbiAgICB0eXBlTGlzdEZvckVhY2godGhpcywgeG1sVHlwZSA9PiB7XG4gICAgICBmcmFnbWVudC5pbnNlcnRCZWZvcmUoeG1sVHlwZS50b0RPTShfZG9jdW1lbnQsIGhvb2tzLCBiaW5kaW5nKSwgbnVsbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYWdtZW50XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0cyBuZXcgY29udGVudCBhdCBhbiBpbmRleC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIC8vIEluc2VydCBjaGFyYWN0ZXIgJ2EnIGF0IHBvc2l0aW9uIDBcbiAgICogIHhtbC5pbnNlcnQoMCwgW25ldyBZLlhtbFRleHQoJ3RleHQnKV0pXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggdG8gaW5zZXJ0IGNvbnRlbnQgYXRcbiAgICogQHBhcmFtIHtBcnJheTxZWG1sRWxlbWVudHxZWG1sVGV4dD59IGNvbnRlbnQgVGhlIGFycmF5IG9mIGNvbnRlbnRcbiAgICovXG4gIGluc2VydCAoaW5kZXgsIGNvbnRlbnQpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3ModHJhbnNhY3Rpb24sIHRoaXMsIGluZGV4LCBjb250ZW50KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBAdHMtaWdub3JlIF9wcmVsaW1Db250ZW50IGlzIGRlZmluZWQgYmVjYXVzZSB0aGlzIGlzIG5vdCB5ZXQgaW50ZWdyYXRlZFxuICAgICAgdGhpcy5fcHJlbGltQ29udGVudC5zcGxpY2UoaW5kZXgsIDAsIC4uLmNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnRzIG5ldyBjb250ZW50IGF0IGFuIGluZGV4LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgLy8gSW5zZXJ0IGNoYXJhY3RlciAnYScgYXQgcG9zaXRpb24gMFxuICAgKiAgeG1sLmluc2VydCgwLCBbbmV3IFkuWG1sVGV4dCgndGV4dCcpXSlcbiAgICpcbiAgICogQHBhcmFtIHtudWxsfEl0ZW18WVhtbEVsZW1lbnR8WVhtbFRleHR9IHJlZiBUaGUgaW5kZXggdG8gaW5zZXJ0IGNvbnRlbnQgYXRcbiAgICogQHBhcmFtIHtBcnJheTxZWG1sRWxlbWVudHxZWG1sVGV4dD59IGNvbnRlbnQgVGhlIGFycmF5IG9mIGNvbnRlbnRcbiAgICovXG4gIGluc2VydEFmdGVyIChyZWYsIGNvbnRlbnQpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IHJlZkl0ZW0gPSAocmVmICYmIHJlZiBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSkgPyByZWYuX2l0ZW0gOiByZWY7XG4gICAgICAgIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3NBZnRlcih0cmFuc2FjdGlvbiwgdGhpcywgcmVmSXRlbSwgY29udGVudCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcGMgPSAvKiogQHR5cGUge0FycmF5PGFueT59ICovICh0aGlzLl9wcmVsaW1Db250ZW50KTtcbiAgICAgIGNvbnN0IGluZGV4ID0gcmVmID09PSBudWxsID8gMCA6IHBjLmZpbmRJbmRleChlbCA9PiBlbCA9PT0gcmVmKSArIDE7XG4gICAgICBpZiAoaW5kZXggPT09IDAgJiYgcmVmICE9PSBudWxsKSB7XG4gICAgICAgIHRocm93IGVycm9yLmNyZWF0ZSgnUmVmZXJlbmNlIGl0ZW0gbm90IGZvdW5kJylcbiAgICAgIH1cbiAgICAgIHBjLnNwbGljZShpbmRleCwgMCwgLi4uY29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgZWxlbWVudHMgc3RhcnRpbmcgZnJvbSBhbiBpbmRleC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIHN0YXJ0IGRlbGV0aW5nIGVsZW1lbnRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgZGVsZXRlIChpbmRleCwgbGVuZ3RoID0gMSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZUxpc3REZWxldGUodHJhbnNhY3Rpb24sIHRoaXMsIGluZGV4LCBsZW5ndGgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1pZ25vcmUgX3ByZWxpbUNvbnRlbnQgaXMgZGVmaW5lZCBiZWNhdXNlIHRoaXMgaXMgbm90IHlldCBpbnRlZ3JhdGVkXG4gICAgICB0aGlzLl9wcmVsaW1Db250ZW50LnNwbGljZShpbmRleCwgbGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyB0aGlzIFlBcnJheSB0byBhIEphdmFTY3JpcHQgQXJyYXkuXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5PFlYbWxFbGVtZW50fFlYbWxUZXh0fFlYbWxIb29rPn1cbiAgICovXG4gIHRvQXJyYXkgKCkge1xuICAgIHJldHVybiB0eXBlTGlzdFRvQXJyYXkodGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIGNvbnRlbnQgdG8gdGhpcyBZQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk8WVhtbEVsZW1lbnR8WVhtbFRleHQ+fSBjb250ZW50IEFycmF5IG9mIGNvbnRlbnQgdG8gYXBwZW5kLlxuICAgKi9cbiAgcHVzaCAoY29udGVudCkge1xuICAgIHRoaXMuaW5zZXJ0KHRoaXMubGVuZ3RoLCBjb250ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwcGVuZHMgY29udGVudCB0byB0aGlzIFlBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxZWG1sRWxlbWVudHxZWG1sVGV4dD59IGNvbnRlbnQgQXJyYXkgb2YgY29udGVudCB0byBwcmVwcGVuZC5cbiAgICovXG4gIHVuc2hpZnQgKGNvbnRlbnQpIHtcbiAgICB0aGlzLmluc2VydCgwLCBjb250ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpLXRoIGVsZW1lbnQgZnJvbSBhIFlBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4gZnJvbSB0aGUgWUFycmF5XG4gICAqIEByZXR1cm4ge1lYbWxFbGVtZW50fFlYbWxUZXh0fVxuICAgKi9cbiAgZ2V0IChpbmRleCkge1xuICAgIHJldHVybiB0eXBlTGlzdEdldCh0aGlzLCBpbmRleClcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIHRoaXMgWUFycmF5IHRvIGEgSmF2YVNjcmlwdCBBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydF1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmRdXG4gICAqIEByZXR1cm4ge0FycmF5PFlYbWxFbGVtZW50fFlYbWxUZXh0Pn1cbiAgICovXG4gIHNsaWNlIChzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBhIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIG9uY2Ugb24gb3ZlcnkgY2hpbGQgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihZWG1sRWxlbWVudHxZWG1sVGV4dCxudW1iZXIsIHR5cGVvZiB0aGlzKTp2b2lkfSBmIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBldmVyeSBlbGVtZW50IG9mIHRoaXMgWUFycmF5LlxuICAgKi9cbiAgZm9yRWFjaCAoZikge1xuICAgIHR5cGVMaXN0Rm9yRWFjaCh0aGlzLCBmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gdGhlIHByb3BlcnRpZXMgb2YgdGhpcyB0eXBlIHRvIGJpbmFyeSBhbmQgd3JpdGUgaXQgdG8gYW5cbiAgICogQmluYXJ5RW5jb2Rlci5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB0aGlzIEl0ZW0gaXMgc2VudCB0byBhIHJlbW90ZSBwZWVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlciBUaGUgZW5jb2RlciB0byB3cml0ZSBkYXRhIHRvLlxuICAgKi9cbiAgX3dyaXRlIChlbmNvZGVyKSB7XG4gICAgZW5jb2Rlci53cml0ZVR5cGVSZWYoWVhtbEZyYWdtZW50UmVmSUQpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1lYbWxGcmFnbWVudH1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRZWG1sRnJhZ21lbnQgPSBkZWNvZGVyID0+IG5ldyBZWG1sRnJhZ21lbnQoKTtcblxuLyoqXG4gKiBBbiBZWG1sRWxlbWVudCBpbWl0YXRlcyB0aGUgYmVoYXZpb3Igb2YgYVxuICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50fERvbSBFbGVtZW50fS5cbiAqXG4gKiAqIEFuIFlYbWxFbGVtZW50IGhhcyBhdHRyaWJ1dGVzIChrZXkgdmFsdWUgcGFpcnMpXG4gKiAqIEFuIFlYbWxFbGVtZW50IGhhcyBjaGlsZEVsZW1lbnRzIHRoYXQgbXVzdCBpbmhlcml0IGZyb20gWVhtbEVsZW1lbnRcbiAqL1xuY2xhc3MgWVhtbEVsZW1lbnQgZXh0ZW5kcyBZWG1sRnJhZ21lbnQge1xuICBjb25zdHJ1Y3RvciAobm9kZU5hbWUgPSAnVU5ERUZJTkVEJykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5ub2RlTmFtZSA9IG5vZGVOYW1lO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLCBhbnk+fG51bGx9XG4gICAgICovXG4gICAgdGhpcy5fcHJlbGltQXR0cnMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fG51bGx9XG4gICAqL1xuICBnZXQgbmV4dFNpYmxpbmcgKCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLl9pdGVtID8gdGhpcy5faXRlbS5uZXh0IDogbnVsbDtcbiAgICByZXR1cm4gbiA/IC8qKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR9ICovICgvKiogQHR5cGUge0NvbnRlbnRUeXBlfSAqLyAobi5jb250ZW50KS50eXBlKSA6IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR8bnVsbH1cbiAgICovXG4gIGdldCBwcmV2U2libGluZyAoKSB7XG4gICAgY29uc3QgbiA9IHRoaXMuX2l0ZW0gPyB0aGlzLl9pdGVtLnByZXYgOiBudWxsO1xuICAgIHJldHVybiBuID8gLyoqIEB0eXBlIHtZWG1sRWxlbWVudHxZWG1sVGV4dH0gKi8gKC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChuLmNvbnRlbnQpLnR5cGUpIDogbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEludGVncmF0ZSB0aGlzIHR5cGUgaW50byB0aGUgWWpzIGluc3RhbmNlLlxuICAgKlxuICAgKiAqIFNhdmUgdGhpcyBzdHJ1Y3QgaW4gdGhlIG9zXG4gICAqICogVGhpcyB0eXBlIGlzIHNlbnQgdG8gb3RoZXIgY2xpZW50XG4gICAqICogT2JzZXJ2ZXIgZnVuY3Rpb25zIGFyZSBmaXJlZFxuICAgKlxuICAgKiBAcGFyYW0ge0RvY30geSBUaGUgWWpzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgX2ludGVncmF0ZSAoeSwgaXRlbSkge1xuICAgIHN1cGVyLl9pbnRlZ3JhdGUoeSwgaXRlbSlcbiAgICA7KC8qKiBAdHlwZSB7TWFwPHN0cmluZywgYW55Pn0gKi8gKHRoaXMuX3ByZWxpbUF0dHJzKSkuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgdGhpcy5fcHJlbGltQXR0cnMgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gSXRlbSB3aXRoIHRoZSBzYW1lIGVmZmVjdCBhcyB0aGlzIEl0ZW0gKHdpdGhvdXQgcG9zaXRpb24gZWZmZWN0KVxuICAgKlxuICAgKiBAcmV0dXJuIHtZWG1sRWxlbWVudH1cbiAgICovXG4gIF9jb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IFlYbWxFbGVtZW50KHRoaXMubm9kZU5hbWUpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7WVhtbEVsZW1lbnR9XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgY29uc3QgZWwgPSBuZXcgWVhtbEVsZW1lbnQodGhpcy5ub2RlTmFtZSk7XG4gICAgY29uc3QgYXR0cnMgPSB0aGlzLmdldEF0dHJpYnV0ZXMoKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBlbC5pbnNlcnQoMCwgdGhpcy50b0FycmF5KCkubWFwKGl0ZW0gPT4gaXRlbSBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSA/IGl0ZW0uY2xvbmUoKSA6IGl0ZW0pKTtcbiAgICByZXR1cm4gZWxcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBYTUwgc2VyaWFsaXphdGlvbiBvZiB0aGlzIFlYbWxFbGVtZW50LlxuICAgKiBUaGUgYXR0cmlidXRlcyBhcmUgb3JkZXJlZCBieSBhdHRyaWJ1dGUtbmFtZSwgc28geW91IGNhbiBlYXNpbHkgdXNlIHRoaXNcbiAgICogbWV0aG9kIHRvIGNvbXBhcmUgWVhtbEVsZW1lbnRzXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHR5cGUuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHRvU3RyaW5nICgpIHtcbiAgICBjb25zdCBhdHRycyA9IHRoaXMuZ2V0QXR0cmlidXRlcygpO1xuICAgIGNvbnN0IHN0cmluZ0J1aWxkZXIgPSBbXTtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnNvcnQoKTtcbiAgICBjb25zdCBrZXlzTGVuID0ga2V5cy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzTGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBzdHJpbmdCdWlsZGVyLnB1c2goa2V5ICsgJz1cIicgKyBhdHRyc1trZXldICsgJ1wiJyk7XG4gICAgfVxuICAgIGNvbnN0IG5vZGVOYW1lID0gdGhpcy5ub2RlTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGF0dHJzU3RyaW5nID0gc3RyaW5nQnVpbGRlci5sZW5ndGggPiAwID8gJyAnICsgc3RyaW5nQnVpbGRlci5qb2luKCcgJykgOiAnJztcbiAgICByZXR1cm4gYDwke25vZGVOYW1lfSR7YXR0cnNTdHJpbmd9PiR7c3VwZXIudG9TdHJpbmcoKX08LyR7bm9kZU5hbWV9PmBcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGF0dHJpYnV0ZSBmcm9tIHRoaXMgWVhtbEVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyaWJ1dGVOYW1lIFRoZSBhdHRyaWJ1dGUgbmFtZSB0aGF0IGlzIHRvIGJlIHJlbW92ZWQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHJlbW92ZUF0dHJpYnV0ZSAoYXR0cmlidXRlTmFtZSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZU1hcERlbGV0ZSh0cmFuc2FjdGlvbiwgdGhpcywgYXR0cmlidXRlTmFtZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtNYXA8c3RyaW5nLGFueT59ICovICh0aGlzLl9wcmVsaW1BdHRycykuZGVsZXRlKGF0dHJpYnV0ZU5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIG9yIHVwZGF0ZXMgYW4gYXR0cmlidXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlTmFtZSBUaGUgYXR0cmlidXRlIG5hbWUgdGhhdCBpcyB0byBiZSBzZXQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyaWJ1dGVWYWx1ZSBUaGUgYXR0cmlidXRlIHZhbHVlIHRoYXQgaXMgdG8gYmUgc2V0LlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBzZXRBdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTWFwU2V0KHRyYW5zYWN0aW9uLCB0aGlzLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtNYXA8c3RyaW5nLCBhbnk+fSAqLyAodGhpcy5fcHJlbGltQXR0cnMpLnNldChhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXR0cmlidXRlIHZhbHVlIHRoYXQgYmVsb25ncyB0byB0aGUgYXR0cmlidXRlIG5hbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyaWJ1dGVOYW1lIFRoZSBhdHRyaWJ1dGUgbmFtZSB0aGF0IGlkZW50aWZpZXMgdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJpZWQgdmFsdWUuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHF1ZXJpZWQgYXR0cmlidXRlIHZhbHVlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRBdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovICh0eXBlTWFwR2V0KHRoaXMsIGF0dHJpYnV0ZU5hbWUpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciBhbiBhdHRyaWJ1dGUgZXhpc3RzXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyaWJ1dGVOYW1lIFRoZSBhdHRyaWJ1dGUgbmFtZSB0byBjaGVjayBmb3IgZXhpc3RlbmNlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBhdHRyaWJ1dGUgZXhpc3RzLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBoYXNBdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovICh0eXBlTWFwSGFzKHRoaXMsIGF0dHJpYnV0ZU5hbWUpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIGF0dHJpYnV0ZSBuYW1lL3ZhbHVlIHBhaXJzIGluIGEgSlNPTiBPYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7U25hcHNob3R9IFtzbmFwc2hvdF1cbiAgICogQHJldHVybiB7T2JqZWN0PHN0cmluZywgYW55Pn0gQSBKU09OIE9iamVjdCB0aGF0IGRlc2NyaWJlcyB0aGUgYXR0cmlidXRlcy5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0QXR0cmlidXRlcyAoc25hcHNob3QpIHtcbiAgICByZXR1cm4gdHlwZU1hcEdldEFsbCh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBEb20gRWxlbWVudCB0aGF0IG1pcnJvcnMgdGhpcyBZWG1sRWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtEb2N1bWVudH0gW19kb2N1bWVudD1kb2N1bWVudF0gVGhlIGRvY3VtZW50IG9iamVjdCAoeW91IG11c3QgZGVmaW5lXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgd2hlbiBjYWxsaW5nIHRoaXMgbWV0aG9kIGluXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVqcylcbiAgICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBbaG9va3M9e31dIE9wdGlvbmFsIHByb3BlcnR5IHRvIGN1c3RvbWl6ZSBob3cgaG9va3NcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgcHJlc2VudGVkIGluIHRoZSBET01cbiAgICogQHBhcmFtIHthbnl9IFtiaW5kaW5nXSBZb3Ugc2hvdWxkIG5vdCBzZXQgdGhpcyBwcm9wZXJ0eS4gVGhpcyBpc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGlmIERvbUJpbmRpbmcgd2FudHMgdG8gY3JlYXRlIGFcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb24gdG8gdGhlIGNyZWF0ZWQgRE9NIHR5cGUuXG4gICAqIEByZXR1cm4ge05vZGV9IFRoZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnR8RG9tIEVsZW1lbnR9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHRvRE9NIChfZG9jdW1lbnQgPSBkb2N1bWVudCwgaG9va3MgPSB7fSwgYmluZGluZykge1xuICAgIGNvbnN0IGRvbSA9IF9kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMubm9kZU5hbWUpO1xuICAgIGNvbnN0IGF0dHJzID0gdGhpcy5nZXRBdHRyaWJ1dGVzKCk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICAgIGRvbS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcbiAgICB9XG4gICAgdHlwZUxpc3RGb3JFYWNoKHRoaXMsIHl4bWwgPT4ge1xuICAgICAgZG9tLmFwcGVuZENoaWxkKHl4bWwudG9ET00oX2RvY3VtZW50LCBob29rcywgYmluZGluZykpO1xuICAgIH0pO1xuICAgIGlmIChiaW5kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJpbmRpbmcuX2NyZWF0ZUFzc29jaWF0aW9uKGRvbSwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBkb21cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gdGhlIHByb3BlcnRpZXMgb2YgdGhpcyB0eXBlIHRvIGJpbmFyeSBhbmQgd3JpdGUgaXQgdG8gYW5cbiAgICogQmluYXJ5RW5jb2Rlci5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB0aGlzIEl0ZW0gaXMgc2VudCB0byBhIHJlbW90ZSBwZWVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlciBUaGUgZW5jb2RlciB0byB3cml0ZSBkYXRhIHRvLlxuICAgKi9cbiAgX3dyaXRlIChlbmNvZGVyKSB7XG4gICAgZW5jb2Rlci53cml0ZVR5cGVSZWYoWVhtbEVsZW1lbnRSZWZJRCk7XG4gICAgZW5jb2Rlci53cml0ZUtleSh0aGlzLm5vZGVOYW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtZWG1sRWxlbWVudH1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZFlYbWxFbGVtZW50ID0gZGVjb2RlciA9PiBuZXcgWVhtbEVsZW1lbnQoZGVjb2Rlci5yZWFkS2V5KCkpO1xuXG4vKipcbiAqIEBleHRlbmRzIFlFdmVudDxZWG1sRWxlbWVudHxZWG1sVGV4dHxZWG1sRnJhZ21lbnQ+XG4gKiBBbiBFdmVudCB0aGF0IGRlc2NyaWJlcyBjaGFuZ2VzIG9uIGEgWVhtbCBFbGVtZW50IG9yIFl4bWwgRnJhZ21lbnRcbiAqL1xuY2xhc3MgWVhtbEV2ZW50IGV4dGVuZHMgWUV2ZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7WVhtbEVsZW1lbnR8WVhtbFRleHR8WVhtbEZyYWdtZW50fSB0YXJnZXQgVGhlIHRhcmdldCBvbiB3aGljaCB0aGUgZXZlbnQgaXMgY3JlYXRlZC5cbiAgICogQHBhcmFtIHtTZXQ8c3RyaW5nfG51bGw+fSBzdWJzIFRoZSBzZXQgb2YgY2hhbmdlZCBhdHRyaWJ1dGVzLiBgbnVsbGAgaXMgaW5jbHVkZWQgaWYgdGhlXG4gICAqICAgICAgICAgICAgICAgICAgIGNoaWxkIGxpc3QgY2hhbmdlZC5cbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb24gVGhlIHRyYW5zYWN0aW9uIGluc3RhbmNlIHdpdGggd2ljaCB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY29uc3RydWN0b3IgKHRhcmdldCwgc3VicywgdHJhbnNhY3Rpb24pIHtcbiAgICBzdXBlcih0YXJnZXQsIHRyYW5zYWN0aW9uKTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjaGlsZHJlbiBjaGFuZ2VkLlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5jaGlsZExpc3RDaGFuZ2VkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogU2V0IG9mIGFsbCBjaGFuZ2VkIGF0dHJpYnV0ZXMuXG4gICAgICogQHR5cGUge1NldDxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuYXR0cmlidXRlc0NoYW5nZWQgPSBuZXcgU2V0KCk7XG4gICAgc3Vicy5mb3JFYWNoKChzdWIpID0+IHtcbiAgICAgIGlmIChzdWIgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jaGlsZExpc3RDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlc0NoYW5nZWQuYWRkKHN1Yik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBZb3UgY2FuIG1hbmFnZSBiaW5kaW5nIHRvIGEgY3VzdG9tIHR5cGUgd2l0aCBZWG1sSG9vay5cbiAqXG4gKiBAZXh0ZW5kcyB7WU1hcDxhbnk+fVxuICovXG5jbGFzcyBZWG1sSG9vayBleHRlbmRzIFlNYXAge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhvb2tOYW1lIG5vZGVOYW1lIG9mIHRoZSBEb20gTm9kZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yIChob29rTmFtZSkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmhvb2tOYW1lID0gaG9va05hbWU7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBJdGVtIHdpdGggdGhlIHNhbWUgZWZmZWN0IGFzIHRoaXMgSXRlbSAod2l0aG91dCBwb3NpdGlvbiBlZmZlY3QpXG4gICAqL1xuICBfY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBZWG1sSG9vayh0aGlzLmhvb2tOYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1lYbWxIb29rfVxuICAgKi9cbiAgY2xvbmUgKCkge1xuICAgIGNvbnN0IGVsID0gbmV3IFlYbWxIb29rKHRoaXMuaG9va05hbWUpO1xuICAgIHRoaXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgZWwuc2V0KGtleSwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBlbFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBEb20gRWxlbWVudCB0aGF0IG1pcnJvcnMgdGhpcyBZWG1sRWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtEb2N1bWVudH0gW19kb2N1bWVudD1kb2N1bWVudF0gVGhlIGRvY3VtZW50IG9iamVjdCAoeW91IG11c3QgZGVmaW5lXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgd2hlbiBjYWxsaW5nIHRoaXMgbWV0aG9kIGluXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVqcylcbiAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgYW55Pn0gW2hvb2tzXSBPcHRpb25hbCBwcm9wZXJ0eSB0byBjdXN0b21pemUgaG93IGhvb2tzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHByZXNlbnRlZCBpbiB0aGUgRE9NXG4gICAqIEBwYXJhbSB7YW55fSBbYmluZGluZ10gWW91IHNob3VsZCBub3Qgc2V0IHRoaXMgcHJvcGVydHkuIFRoaXMgaXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCBpZiBEb21CaW5kaW5nIHdhbnRzIHRvIGNyZWF0ZSBhXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc29jaWF0aW9uIHRvIHRoZSBjcmVhdGVkIERPTSB0eXBlXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9IFRoZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnR8RG9tIEVsZW1lbnR9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHRvRE9NIChfZG9jdW1lbnQgPSBkb2N1bWVudCwgaG9va3MgPSB7fSwgYmluZGluZykge1xuICAgIGNvbnN0IGhvb2sgPSBob29rc1t0aGlzLmhvb2tOYW1lXTtcbiAgICBsZXQgZG9tO1xuICAgIGlmIChob29rICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRvbSA9IGhvb2suY3JlYXRlRG9tKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMuaG9va05hbWUpO1xuICAgIH1cbiAgICBkb20uc2V0QXR0cmlidXRlKCdkYXRhLXlqcy1ob29rJywgdGhpcy5ob29rTmFtZSk7XG4gICAgaWYgKGJpbmRpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYmluZGluZy5fY3JlYXRlQXNzb2NpYXRpb24oZG9tLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGRvbVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybSB0aGUgcHJvcGVydGllcyBvZiB0aGlzIHR5cGUgdG8gYmluYXJ5IGFuZCB3cml0ZSBpdCB0byBhblxuICAgKiBCaW5hcnlFbmNvZGVyLlxuICAgKlxuICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIHRoaXMgSXRlbSBpcyBzZW50IHRvIGEgcmVtb3RlIHBlZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyIFRoZSBlbmNvZGVyIHRvIHdyaXRlIGRhdGEgdG8uXG4gICAqL1xuICBfd3JpdGUgKGVuY29kZXIpIHtcbiAgICBlbmNvZGVyLndyaXRlVHlwZVJlZihZWG1sSG9va1JlZklEKTtcbiAgICBlbmNvZGVyLndyaXRlS2V5KHRoaXMuaG9va05hbWUpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1lYbWxIb29rfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZFlYbWxIb29rID0gZGVjb2RlciA9PlxuICBuZXcgWVhtbEhvb2soZGVjb2Rlci5yZWFkS2V5KCkpO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGV4dCBpbiBhIERvbSBFbGVtZW50LiBJbiB0aGUgZnV0dXJlIHRoaXMgdHlwZSB3aWxsIGFsc28gaGFuZGxlXG4gKiBzaW1wbGUgZm9ybWF0dGluZyBpbmZvcm1hdGlvbiBsaWtlIGJvbGQgYW5kIGl0YWxpYy5cbiAqL1xuY2xhc3MgWVhtbFRleHQgZXh0ZW5kcyBZVGV4dCB7XG4gIC8qKlxuICAgKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR8bnVsbH1cbiAgICovXG4gIGdldCBuZXh0U2libGluZyAoKSB7XG4gICAgY29uc3QgbiA9IHRoaXMuX2l0ZW0gPyB0aGlzLl9pdGVtLm5leHQgOiBudWxsO1xuICAgIHJldHVybiBuID8gLyoqIEB0eXBlIHtZWG1sRWxlbWVudHxZWG1sVGV4dH0gKi8gKC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChuLmNvbnRlbnQpLnR5cGUpIDogbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtZWG1sRWxlbWVudHxZWG1sVGV4dHxudWxsfVxuICAgKi9cbiAgZ2V0IHByZXZTaWJsaW5nICgpIHtcbiAgICBjb25zdCBuID0gdGhpcy5faXRlbSA/IHRoaXMuX2l0ZW0ucHJldiA6IG51bGw7XG4gICAgcmV0dXJuIG4gPyAvKiogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fSAqLyAoLyoqIEB0eXBlIHtDb250ZW50VHlwZX0gKi8gKG4uY29udGVudCkudHlwZSkgOiBudWxsXG4gIH1cblxuICBfY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBZWG1sVGV4dCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7WVhtbFRleHR9XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgY29uc3QgdGV4dCA9IG5ldyBZWG1sVGV4dCgpO1xuICAgIHRleHQuYXBwbHlEZWx0YSh0aGlzLnRvRGVsdGEoKSk7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgRG9tIEVsZW1lbnQgdGhhdCBtaXJyb3JzIHRoaXMgWVhtbFRleHQuXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jdW1lbnR9IFtfZG9jdW1lbnQ9ZG9jdW1lbnRdIFRoZSBkb2N1bWVudCBvYmplY3QgKHlvdSBtdXN0IGRlZmluZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHdoZW4gY2FsbGluZyB0aGlzIG1ldGhvZCBpblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlanMpXG4gICAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gW2hvb2tzXSBPcHRpb25hbCBwcm9wZXJ0eSB0byBjdXN0b21pemUgaG93IGhvb2tzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHByZXNlbnRlZCBpbiB0aGUgRE9NXG4gICAqIEBwYXJhbSB7YW55fSBbYmluZGluZ10gWW91IHNob3VsZCBub3Qgc2V0IHRoaXMgcHJvcGVydHkuIFRoaXMgaXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCBpZiBEb21CaW5kaW5nIHdhbnRzIHRvIGNyZWF0ZSBhXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc29jaWF0aW9uIHRvIHRoZSBjcmVhdGVkIERPTSB0eXBlLlxuICAgKiBAcmV0dXJuIHtUZXh0fSBUaGUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50fERvbSBFbGVtZW50fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICB0b0RPTSAoX2RvY3VtZW50ID0gZG9jdW1lbnQsIGhvb2tzLCBiaW5kaW5nKSB7XG4gICAgY29uc3QgZG9tID0gX2RvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMudG9TdHJpbmcoKSk7XG4gICAgaWYgKGJpbmRpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYmluZGluZy5fY3JlYXRlQXNzb2NpYXRpb24oZG9tLCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGRvbVxuICB9XG5cbiAgdG9TdHJpbmcgKCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gdGhpcy50b0RlbHRhKCkubWFwKGRlbHRhID0+IHtcbiAgICAgIGNvbnN0IG5lc3RlZE5vZGVzID0gW107XG4gICAgICBmb3IgKGNvbnN0IG5vZGVOYW1lIGluIGRlbHRhLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgY29uc3QgYXR0cnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGVsdGEuYXR0cmlidXRlc1tub2RlTmFtZV0pIHtcbiAgICAgICAgICBhdHRycy5wdXNoKHsga2V5LCB2YWx1ZTogZGVsdGEuYXR0cmlidXRlc1tub2RlTmFtZV1ba2V5XSB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzb3J0IGF0dHJpYnV0ZXMgdG8gZ2V0IGEgdW5pcXVlIG9yZGVyXG4gICAgICAgIGF0dHJzLnNvcnQoKGEsIGIpID0+IGEua2V5IDwgYi5rZXkgPyAtMSA6IDEpO1xuICAgICAgICBuZXN0ZWROb2Rlcy5wdXNoKHsgbm9kZU5hbWUsIGF0dHJzIH0pO1xuICAgICAgfVxuICAgICAgLy8gc29ydCBub2RlIG9yZGVyIHRvIGdldCBhIHVuaXF1ZSBvcmRlclxuICAgICAgbmVzdGVkTm9kZXMuc29ydCgoYSwgYikgPT4gYS5ub2RlTmFtZSA8IGIubm9kZU5hbWUgPyAtMSA6IDEpO1xuICAgICAgLy8gbm93IGNvbnZlcnQgdG8gZG9tIHN0cmluZ1xuICAgICAgbGV0IHN0ciA9ICcnO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXN0ZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBub2RlID0gbmVzdGVkTm9kZXNbaV07XG4gICAgICAgIHN0ciArPSBgPCR7bm9kZS5ub2RlTmFtZX1gO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5vZGUuYXR0cnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjb25zdCBhdHRyID0gbm9kZS5hdHRyc1tqXTtcbiAgICAgICAgICBzdHIgKz0gYCAke2F0dHIua2V5fT1cIiR7YXR0ci52YWx1ZX1cImA7XG4gICAgICAgIH1cbiAgICAgICAgc3RyICs9ICc+JztcbiAgICAgIH1cbiAgICAgIHN0ciArPSBkZWx0YS5pbnNlcnQ7XG4gICAgICBmb3IgKGxldCBpID0gbmVzdGVkTm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgc3RyICs9IGA8LyR7bmVzdGVkTm9kZXNbaV0ubm9kZU5hbWV9PmA7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyXG4gICAgfSkuam9pbignJylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKi9cbiAgX3dyaXRlIChlbmNvZGVyKSB7XG4gICAgZW5jb2Rlci53cml0ZVR5cGVSZWYoWVhtbFRleHRSZWZJRCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7WVhtbFRleHR9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkWVhtbFRleHQgPSBkZWNvZGVyID0+IG5ldyBZWG1sVGV4dCgpO1xuXG5jbGFzcyBBYnN0cmFjdFN0cnVjdCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0lEfSBpZFxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoaWQsIGxlbmd0aCkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBkZWxldGVkICgpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZSB0aGlzIHN0cnVjdCB3aXRoIHRoZSBpdGVtIHRvIHRoZSByaWdodC5cbiAgICogVGhpcyBtZXRob2QgaXMgYWxyZWFkeSBhc3N1bWluZyB0aGF0IGB0aGlzLmlkLmNsb2NrICsgdGhpcy5sZW5ndGggPT09IHRoaXMuaWQuY2xvY2tgLlxuICAgKiBBbHNvIHRoaXMgbWV0aG9kIGRvZXMgKm5vdCogcmVtb3ZlIHJpZ2h0IGZyb20gU3RydWN0U3RvcmUhXG4gICAqIEBwYXJhbSB7QWJzdHJhY3RTdHJ1Y3R9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHdldGhlciB0aGlzIG1lcmdlZCB3aXRoIHJpZ2h0XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXIgVGhlIGVuY29kZXIgdG8gd3JpdGUgZGF0YSB0by5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcGFyYW0ge251bWJlcn0gZW5jb2RpbmdSZWZcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQsIGVuY29kaW5nUmVmKSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgb2Zmc2V0KSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cbn1cblxuY29uc3Qgc3RydWN0R0NSZWZOdW1iZXIgPSAwO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEdDIGV4dGVuZHMgQWJzdHJhY3RTdHJ1Y3Qge1xuICBnZXQgZGVsZXRlZCAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGRlbGV0ZSAoKSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0dDfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yICE9PSByaWdodC5jb25zdHJ1Y3Rvcikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHRoaXMubGVuZ3RoICs9IHJpZ2h0Lmxlbmd0aDtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPiAwKSB7XG4gICAgICB0aGlzLmlkLmNsb2NrICs9IG9mZnNldDtcbiAgICAgIHRoaXMubGVuZ3RoIC09IG9mZnNldDtcbiAgICB9XG4gICAgYWRkU3RydWN0KHRyYW5zYWN0aW9uLmRvYy5zdG9yZSwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVJbmZvKHN0cnVjdEdDUmVmTnVtYmVyKTtcbiAgICBlbmNvZGVyLndyaXRlTGVuKHRoaXMubGVuZ3RoIC0gb2Zmc2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKiBAcmV0dXJuIHtudWxsIHwgbnVtYmVyfVxuICAgKi9cbiAgZ2V0TWlzc2luZyAodHJhbnNhY3Rpb24sIHN0b3JlKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5jbGFzcyBDb250ZW50QmluYXJ5IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gY29udGVudFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGNvbnRlbnQpIHtcbiAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIFt0aGlzLmNvbnRlbnRdXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NvbnRlbnRCaW5hcnl9XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRCaW5hcnkodGhpcy5jb250ZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHJldHVybiB7Q29udGVudEJpbmFyeX1cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50QmluYXJ5fSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBlbmNvZGVyLndyaXRlQnVmKHRoaXMuY29udGVudCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICByZXR1cm4gM1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjIgfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50QmluYXJ5fVxuICovXG5jb25zdCByZWFkQ29udGVudEJpbmFyeSA9IGRlY29kZXIgPT4gbmV3IENvbnRlbnRCaW5hcnkoZGVjb2Rlci5yZWFkQnVmKCkpO1xuXG5jbGFzcyBDb250ZW50RGVsZXRlZCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobGVuKSB7XG4gICAgdGhpcy5sZW4gPSBsZW47XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50RGVsZXRlZH1cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudERlbGV0ZWQodGhpcy5sZW4pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50RGVsZXRlZH1cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgY29uc3QgcmlnaHQgPSBuZXcgQ29udGVudERlbGV0ZWQodGhpcy5sZW4gLSBvZmZzZXQpO1xuICAgIHRoaXMubGVuID0gb2Zmc2V0O1xuICAgIHJldHVybiByaWdodFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29udGVudERlbGV0ZWR9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgdGhpcy5sZW4gKz0gcmlnaHQubGVuO1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7XG4gICAgYWRkVG9EZWxldGVTZXQodHJhbnNhY3Rpb24uZGVsZXRlU2V0LCBpdGVtLmlkLmNsaWVudCwgaXRlbS5pZC5jbG9jaywgdGhpcy5sZW4pO1xuICAgIGl0ZW0ubWFya0RlbGV0ZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqL1xuICBnYyAoc3RvcmUpIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgZW5jb2Rlci53cml0ZUxlbih0aGlzLmxlbiAtIG9mZnNldCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICByZXR1cm4gMVxuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMiB9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnREZWxldGVkfVxuICovXG5jb25zdCByZWFkQ29udGVudERlbGV0ZWQgPSBkZWNvZGVyID0+IG5ldyBDb250ZW50RGVsZXRlZChkZWNvZGVyLnJlYWRMZW4oKSk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGd1aWRcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0c1xuICovXG5jb25zdCBjcmVhdGVEb2NGcm9tT3B0cyA9IChndWlkLCBvcHRzKSA9PiBuZXcgRG9jKHsgZ3VpZCwgLi4ub3B0cywgc2hvdWxkTG9hZDogb3B0cy5zaG91bGRMb2FkIHx8IG9wdHMuYXV0b0xvYWQgfHwgZmFsc2UgfSk7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQ29udGVudERvYyB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY30gZG9jXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZG9jKSB7XG4gICAgaWYgKGRvYy5faXRlbSkge1xuICAgICAgY29uc29sZS5lcnJvcignVGhpcyBkb2N1bWVudCB3YXMgYWxyZWFkeSBpbnRlZ3JhdGVkIGFzIGEgc3ViLWRvY3VtZW50LiBZb3Ugc2hvdWxkIGNyZWF0ZSBhIHNlY29uZCBpbnN0YW5jZSBpbnN0ZWFkIHdpdGggdGhlIHNhbWUgZ3VpZC4nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHR5cGUge0RvY31cbiAgICAgKi9cbiAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7YW55fVxuICAgICAqL1xuICAgIGNvbnN0IG9wdHMgPSB7fTtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIGlmICghZG9jLmdjKSB7XG4gICAgICBvcHRzLmdjID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChkb2MuYXV0b0xvYWQpIHtcbiAgICAgIG9wdHMuYXV0b0xvYWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoZG9jLm1ldGEgIT09IG51bGwpIHtcbiAgICAgIG9wdHMubWV0YSA9IGRvYy5tZXRhO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiBbdGhpcy5kb2NdXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NvbnRlbnREb2N9XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnREb2MoY3JlYXRlRG9jRnJvbU9wdHModGhpcy5kb2MuZ3VpZCwgdGhpcy5vcHRzKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm4ge0NvbnRlbnREb2N9XG4gICAqL1xuICBzcGxpY2UgKG9mZnNldCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29udGVudERvY30gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIGl0ZW0pIHtcbiAgICAvLyB0aGlzIG5lZWRzIHRvIGJlIHJlZmxlY3RlZCBpbiBkb2MuZGVzdHJveSBhcyB3ZWxsXG4gICAgdGhpcy5kb2MuX2l0ZW0gPSBpdGVtO1xuICAgIHRyYW5zYWN0aW9uLnN1YmRvY3NBZGRlZC5hZGQodGhpcy5kb2MpO1xuICAgIGlmICh0aGlzLmRvYy5zaG91bGRMb2FkKSB7XG4gICAgICB0cmFuc2FjdGlvbi5zdWJkb2NzTG9hZGVkLmFkZCh0aGlzLmRvYyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKHRyYW5zYWN0aW9uLnN1YmRvY3NBZGRlZC5oYXModGhpcy5kb2MpKSB7XG4gICAgICB0cmFuc2FjdGlvbi5zdWJkb2NzQWRkZWQuZGVsZXRlKHRoaXMuZG9jKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNhY3Rpb24uc3ViZG9jc1JlbW92ZWQuYWRkKHRoaXMuZG9jKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkgeyB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBlbmNvZGVyLndyaXRlU3RyaW5nKHRoaXMuZG9jLmd1aWQpO1xuICAgIGVuY29kZXIud3JpdGVBbnkodGhpcy5vcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiA5XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50RG9jfVxuICovXG5jb25zdCByZWFkQ29udGVudERvYyA9IGRlY29kZXIgPT4gbmV3IENvbnRlbnREb2MoY3JlYXRlRG9jRnJvbU9wdHMoZGVjb2Rlci5yZWFkU3RyaW5nKCksIGRlY29kZXIucmVhZEFueSgpKSk7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQ29udGVudEVtYmVkIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbWJlZFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGVtYmVkKSB7XG4gICAgdGhpcy5lbWJlZCA9IGVtYmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIFt0aGlzLmVtYmVkXVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50RW1iZWR9XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRFbWJlZCh0aGlzLmVtYmVkKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHJldHVybiB7Q29udGVudEVtYmVkfVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnRFbWJlZH0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIGl0ZW0pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqL1xuICBnYyAoc3RvcmUpIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgZW5jb2Rlci53cml0ZUpTT04odGhpcy5lbWJlZCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICByZXR1cm4gNVxuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudEVtYmVkfVxuICovXG5jb25zdCByZWFkQ29udGVudEVtYmVkID0gZGVjb2RlciA9PiBuZXcgQ29udGVudEVtYmVkKGRlY29kZXIucmVhZEpTT04oKSk7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQ29udGVudEZvcm1hdCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICBnZXRDb250ZW50ICgpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDb3VudGFibGUgKCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NvbnRlbnRGb3JtYXR9XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRGb3JtYXQodGhpcy5rZXksIHRoaXMudmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50Rm9ybWF0fVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnRGb3JtYXR9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7XG4gICAgLy8gQHRvZG8gc2VhcmNobWFya2VyIGFyZSBjdXJyZW50bHkgdW5zdXBwb3J0ZWQgZm9yIHJpY2ggdGV4dCBkb2N1bWVudHNcbiAgICAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAoaXRlbS5wYXJlbnQpLl9zZWFyY2hNYXJrZXIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBlbmNvZGVyLndyaXRlS2V5KHRoaXMua2V5KTtcbiAgICBlbmNvZGVyLndyaXRlSlNPTih0aGlzLnZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiA2XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudEZvcm1hdH1cbiAqL1xuY29uc3QgcmVhZENvbnRlbnRGb3JtYXQgPSBkZWNvZGVyID0+IG5ldyBDb250ZW50Rm9ybWF0KGRlY29kZXIucmVhZEtleSgpLCBkZWNvZGVyLnJlYWRKU09OKCkpO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENvbnRlbnRKU09OIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoYXJyKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PGFueT59XG4gICAgICovXG4gICAgdGhpcy5hcnIgPSBhcnI7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnIubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiB0aGlzLmFyclxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50SlNPTn1cbiAgICovXG4gIGNvcHkgKCkge1xuICAgIHJldHVybiBuZXcgQ29udGVudEpTT04odGhpcy5hcnIpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50SlNPTn1cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgY29uc3QgcmlnaHQgPSBuZXcgQ29udGVudEpTT04odGhpcy5hcnIuc2xpY2Uob2Zmc2V0KSk7XG4gICAgdGhpcy5hcnIgPSB0aGlzLmFyci5zbGljZSgwLCBvZmZzZXQpO1xuICAgIHJldHVybiByaWdodFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29udGVudEpTT059IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgdGhpcy5hcnIgPSB0aGlzLmFyci5jb25jYXQocmlnaHQuYXJyKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBjb25zdCBsZW4gPSB0aGlzLmFyci5sZW5ndGg7XG4gICAgZW5jb2Rlci53cml0ZUxlbihsZW4gLSBvZmZzZXQpO1xuICAgIGZvciAobGV0IGkgPSBvZmZzZXQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgYyA9IHRoaXMuYXJyW2ldO1xuICAgICAgZW5jb2Rlci53cml0ZVN0cmluZyhjID09PSB1bmRlZmluZWQgPyAndW5kZWZpbmVkJyA6IEpTT04uc3RyaW5naWZ5KGMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICByZXR1cm4gMlxuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudEpTT059XG4gKi9cbmNvbnN0IHJlYWRDb250ZW50SlNPTiA9IGRlY29kZXIgPT4ge1xuICBjb25zdCBsZW4gPSBkZWNvZGVyLnJlYWRMZW4oKTtcbiAgY29uc3QgY3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGMgPSBkZWNvZGVyLnJlYWRTdHJpbmcoKTtcbiAgICBpZiAoYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNzLnB1c2godW5kZWZpbmVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3MucHVzaChKU09OLnBhcnNlKGMpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBDb250ZW50SlNPTihjcylcbn07XG5cbmNsYXNzIENvbnRlbnRBbnkge1xuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnJcbiAgICovXG4gIGNvbnN0cnVjdG9yIChhcnIpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8YW55Pn1cbiAgICAgKi9cbiAgICB0aGlzLmFyciA9IGFycjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLmFyci5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJyXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NvbnRlbnRBbnl9XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRBbnkodGhpcy5hcnIpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50QW55fVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICBjb25zdCByaWdodCA9IG5ldyBDb250ZW50QW55KHRoaXMuYXJyLnNsaWNlKG9mZnNldCkpO1xuICAgIHRoaXMuYXJyID0gdGhpcy5hcnIuc2xpY2UoMCwgb2Zmc2V0KTtcbiAgICByZXR1cm4gcmlnaHRcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnRBbnl9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgdGhpcy5hcnIgPSB0aGlzLmFyci5jb25jYXQocmlnaHQuYXJyKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBjb25zdCBsZW4gPSB0aGlzLmFyci5sZW5ndGg7XG4gICAgZW5jb2Rlci53cml0ZUxlbihsZW4gLSBvZmZzZXQpO1xuICAgIGZvciAobGV0IGkgPSBvZmZzZXQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgYyA9IHRoaXMuYXJyW2ldO1xuICAgICAgZW5jb2Rlci53cml0ZUFueShjKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICByZXR1cm4gOFxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnRBbnl9XG4gKi9cbmNvbnN0IHJlYWRDb250ZW50QW55ID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IGxlbiA9IGRlY29kZXIucmVhZExlbigpO1xuICBjb25zdCBjcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY3MucHVzaChkZWNvZGVyLnJlYWRBbnkoKSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBDb250ZW50QW55KGNzKVxufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBDb250ZW50U3RyaW5nIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAgICovXG4gIGNvbnN0cnVjdG9yIChzdHIpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3RyID0gc3RyO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyLmxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICBnZXRDb250ZW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5zdHIuc3BsaXQoJycpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NvbnRlbnRTdHJpbmd9XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRTdHJpbmcodGhpcy5zdHIpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50U3RyaW5nfVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICBjb25zdCByaWdodCA9IG5ldyBDb250ZW50U3RyaW5nKHRoaXMuc3RyLnNsaWNlKG9mZnNldCkpO1xuICAgIHRoaXMuc3RyID0gdGhpcy5zdHIuc2xpY2UoMCwgb2Zmc2V0KTtcblxuICAgIC8vIFByZXZlbnQgZW5jb2RpbmcgaW52YWxpZCBkb2N1bWVudHMgYmVjYXVzZSBvZiBzcGxpdHRpbmcgb2Ygc3Vycm9nYXRlIHBhaXJzOiBodHRwczovL2dpdGh1Yi5jb20veWpzL3lqcy9pc3N1ZXMvMjQ4XG4gICAgY29uc3QgZmlyc3RDaGFyQ29kZSA9IHRoaXMuc3RyLmNoYXJDb2RlQXQob2Zmc2V0IC0gMSk7XG4gICAgaWYgKGZpcnN0Q2hhckNvZGUgPj0gMHhEODAwICYmIGZpcnN0Q2hhckNvZGUgPD0gMHhEQkZGKSB7XG4gICAgICAvLyBMYXN0IGNoYXJhY3RlciBvZiB0aGUgbGVmdCBzcGxpdCBpcyB0aGUgc3RhcnQgb2YgYSBzdXJyb2dhdGUgdXRmMTYvdWNzMiBwYWlyLlxuICAgICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBzcGxpdHRpbmcgb2Ygc3Vycm9nYXRlIHBhaXJzIGJlY2F1c2UgdGhpcyBtYXkgbGVhZCB0byBpbnZhbGlkIGRvY3VtZW50cy5cbiAgICAgIC8vIFJlcGxhY2UgdGhlIGludmFsaWQgY2hhcmFjdGVyIHdpdGggYSB1bmljb2RlIHJlcGxhY2VtZW50IGNoYXJhY3RlciAo77+9IC8gVStGRkZEKVxuICAgICAgdGhpcy5zdHIgPSB0aGlzLnN0ci5zbGljZSgwLCBvZmZzZXQgLSAxKSArICfvv70nO1xuICAgICAgLy8gcmVwbGFjZSByaWdodCBhcyB3ZWxsXG4gICAgICByaWdodC5zdHIgPSAn77+9JyArIHJpZ2h0LnN0ci5zbGljZSgxKTtcbiAgICB9XG4gICAgcmV0dXJuIHJpZ2h0XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50U3RyaW5nfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHRoaXMuc3RyICs9IHJpZ2h0LnN0cjtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBkZWxldGUgKHRyYW5zYWN0aW9uKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICovXG4gIGdjIChzdG9yZSkge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBlbmNvZGVyLndyaXRlU3RyaW5nKG9mZnNldCA9PT0gMCA/IHRoaXMuc3RyIDogdGhpcy5zdHIuc2xpY2Uob2Zmc2V0KSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICByZXR1cm4gNFxuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudFN0cmluZ31cbiAqL1xuY29uc3QgcmVhZENvbnRlbnRTdHJpbmcgPSBkZWNvZGVyID0+IG5ldyBDb250ZW50U3RyaW5nKGRlY29kZXIucmVhZFN0cmluZygpKTtcblxuLyoqXG4gKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24oVXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyKTpBYnN0cmFjdFR5cGU8YW55Pj59XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCB0eXBlUmVmcyA9IFtcbiAgcmVhZFlBcnJheSxcbiAgcmVhZFlNYXAsXG4gIHJlYWRZVGV4dCxcbiAgcmVhZFlYbWxFbGVtZW50LFxuICByZWFkWVhtbEZyYWdtZW50LFxuICByZWFkWVhtbEhvb2ssXG4gIHJlYWRZWG1sVGV4dFxuXTtcblxuY29uc3QgWUFycmF5UmVmSUQgPSAwO1xuY29uc3QgWU1hcFJlZklEID0gMTtcbmNvbnN0IFlUZXh0UmVmSUQgPSAyO1xuY29uc3QgWVhtbEVsZW1lbnRSZWZJRCA9IDM7XG5jb25zdCBZWG1sRnJhZ21lbnRSZWZJRCA9IDQ7XG5jb25zdCBZWG1sSG9va1JlZklEID0gNTtcbmNvbnN0IFlYbWxUZXh0UmVmSUQgPSA2O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENvbnRlbnRUeXBlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAgICovXG4gIGNvbnN0cnVjdG9yICh0eXBlKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICBnZXRDb250ZW50ICgpIHtcbiAgICByZXR1cm4gW3RoaXMudHlwZV1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDb3VudGFibGUgKCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Q29udGVudFR5cGV9XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRUeXBlKHRoaXMudHlwZS5fY29weSgpKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHJldHVybiB7Q29udGVudFR5cGV9XG4gICAqL1xuICBzcGxpY2UgKG9mZnNldCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29udGVudFR5cGV9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7XG4gICAgdGhpcy50eXBlLl9pbnRlZ3JhdGUodHJhbnNhY3Rpb24uZG9jLCBpdGVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge1xuICAgIGxldCBpdGVtID0gdGhpcy50eXBlLl9zdGFydDtcbiAgICB3aGlsZSAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgaWYgKCFpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgaXRlbS5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIGJlIGdjJ2QgbGF0ZXIgYW5kIHdlIHdhbnQgdG8gbWVyZ2UgaXQgaWYgcG9zc2libGVcbiAgICAgICAgLy8gV2UgdHJ5IHRvIG1lcmdlIGFsbCBkZWxldGVkIGl0ZW1zIGFmdGVyIGVhY2ggdHJhbnNhY3Rpb24sXG4gICAgICAgIC8vIGJ1dCB3ZSBoYXZlIG5vIGtub3dsZWRnZSBhYm91dCB0aGF0IHRoaXMgbmVlZHMgdG8gYmUgbWVyZ2VkXG4gICAgICAgIC8vIHNpbmNlIGl0IGlzIG5vdCBpbiB0cmFuc2FjdGlvbi5kcy4gSGVuY2Ugd2UgYWRkIGl0IHRvIHRyYW5zYWN0aW9uLl9tZXJnZVN0cnVjdHNcbiAgICAgICAgdHJhbnNhY3Rpb24uX21lcmdlU3RydWN0cy5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgICAgaXRlbSA9IGl0ZW0ucmlnaHQ7XG4gICAgfVxuICAgIHRoaXMudHlwZS5fbWFwLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICBpdGVtLmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzYW1lIGFzIGFib3ZlXG4gICAgICAgIHRyYW5zYWN0aW9uLl9tZXJnZVN0cnVjdHMucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0cmFuc2FjdGlvbi5jaGFuZ2VkLmRlbGV0ZSh0aGlzLnR5cGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqL1xuICBnYyAoc3RvcmUpIHtcbiAgICBsZXQgaXRlbSA9IHRoaXMudHlwZS5fc3RhcnQ7XG4gICAgd2hpbGUgKGl0ZW0gIT09IG51bGwpIHtcbiAgICAgIGl0ZW0uZ2Moc3RvcmUsIHRydWUpO1xuICAgICAgaXRlbSA9IGl0ZW0ucmlnaHQ7XG4gICAgfVxuICAgIHRoaXMudHlwZS5fc3RhcnQgPSBudWxsO1xuICAgIHRoaXMudHlwZS5fbWFwLmZvckVhY2goLyoqIEBwYXJhbSB7SXRlbSB8IG51bGx9IGl0ZW0gKi8gKGl0ZW0pID0+IHtcbiAgICAgIHdoaWxlIChpdGVtICE9PSBudWxsKSB7XG4gICAgICAgIGl0ZW0uZ2Moc3RvcmUsIHRydWUpO1xuICAgICAgICBpdGVtID0gaXRlbS5sZWZ0O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMudHlwZS5fbWFwID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICB0aGlzLnR5cGUuX3dyaXRlKGVuY29kZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFJlZiAoKSB7XG4gICAgcmV0dXJuIDdcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnRUeXBlfVxuICovXG5jb25zdCByZWFkQ29udGVudFR5cGUgPSBkZWNvZGVyID0+IG5ldyBDb250ZW50VHlwZSh0eXBlUmVmc1tkZWNvZGVyLnJlYWRUeXBlUmVmKCldKGRlY29kZXIpKTtcblxuLyoqXG4gKiBAdG9kbyBUaGlzIHNob3VsZCByZXR1cm4gc2V2ZXJhbCBpdGVtc1xuICpcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge0lEfSBpZFxuICogQHJldHVybiB7e2l0ZW06SXRlbSwgZGlmZjpudW1iZXJ9fVxuICovXG5jb25zdCBmb2xsb3dSZWRvbmUgPSAoc3RvcmUsIGlkKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7SUR8bnVsbH1cbiAgICovXG4gIGxldCBuZXh0SUQgPSBpZDtcbiAgbGV0IGRpZmYgPSAwO1xuICBsZXQgaXRlbTtcbiAgZG8ge1xuICAgIGlmIChkaWZmID4gMCkge1xuICAgICAgbmV4dElEID0gY3JlYXRlSUQobmV4dElELmNsaWVudCwgbmV4dElELmNsb2NrICsgZGlmZik7XG4gICAgfVxuICAgIGl0ZW0gPSBnZXRJdGVtKHN0b3JlLCBuZXh0SUQpO1xuICAgIGRpZmYgPSBuZXh0SUQuY2xvY2sgLSBpdGVtLmlkLmNsb2NrO1xuICAgIG5leHRJRCA9IGl0ZW0ucmVkb25lO1xuICB9IHdoaWxlIChuZXh0SUQgIT09IG51bGwgJiYgaXRlbSBpbnN0YW5jZW9mIEl0ZW0pXG4gIHJldHVybiB7XG4gICAgaXRlbSwgZGlmZlxuICB9XG59O1xuXG4vKipcbiAqIE1ha2Ugc3VyZSB0aGF0IG5laXRoZXIgaXRlbSBub3IgYW55IG9mIGl0cyBwYXJlbnRzIGlzIGV2ZXIgZGVsZXRlZC5cbiAqXG4gKiBUaGlzIHByb3BlcnR5IGRvZXMgbm90IHBlcnNpc3Qgd2hlbiBzdG9yaW5nIGl0IGludG8gYSBkYXRhYmFzZSBvciB3aGVuXG4gKiBzZW5kaW5nIGl0IHRvIG90aGVyIHBlZXJzXG4gKlxuICogQHBhcmFtIHtJdGVtfG51bGx9IGl0ZW1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0ga2VlcFxuICovXG5jb25zdCBrZWVwSXRlbSA9IChpdGVtLCBrZWVwKSA9PiB7XG4gIHdoaWxlIChpdGVtICE9PSBudWxsICYmIGl0ZW0ua2VlcCAhPT0ga2VlcCkge1xuICAgIGl0ZW0ua2VlcCA9IGtlZXA7XG4gICAgaXRlbSA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChpdGVtLnBhcmVudCkuX2l0ZW07XG4gIH1cbn07XG5cbi8qKlxuICogU3BsaXQgbGVmdEl0ZW0gaW50byB0d28gaXRlbXNcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0l0ZW19IGxlZnRJdGVtXG4gKiBAcGFyYW0ge251bWJlcn0gZGlmZlxuICogQHJldHVybiB7SXRlbX1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHNwbGl0SXRlbSA9ICh0cmFuc2FjdGlvbiwgbGVmdEl0ZW0sIGRpZmYpID0+IHtcbiAgLy8gY3JlYXRlIHJpZ2h0SXRlbVxuICBjb25zdCB7IGNsaWVudCwgY2xvY2sgfSA9IGxlZnRJdGVtLmlkO1xuICBjb25zdCByaWdodEl0ZW0gPSBuZXcgSXRlbShcbiAgICBjcmVhdGVJRChjbGllbnQsIGNsb2NrICsgZGlmZiksXG4gICAgbGVmdEl0ZW0sXG4gICAgY3JlYXRlSUQoY2xpZW50LCBjbG9jayArIGRpZmYgLSAxKSxcbiAgICBsZWZ0SXRlbS5yaWdodCxcbiAgICBsZWZ0SXRlbS5yaWdodE9yaWdpbixcbiAgICBsZWZ0SXRlbS5wYXJlbnQsXG4gICAgbGVmdEl0ZW0ucGFyZW50U3ViLFxuICAgIGxlZnRJdGVtLmNvbnRlbnQuc3BsaWNlKGRpZmYpXG4gICk7XG4gIGlmIChsZWZ0SXRlbS5kZWxldGVkKSB7XG4gICAgcmlnaHRJdGVtLm1hcmtEZWxldGVkKCk7XG4gIH1cbiAgaWYgKGxlZnRJdGVtLmtlZXApIHtcbiAgICByaWdodEl0ZW0ua2VlcCA9IHRydWU7XG4gIH1cbiAgaWYgKGxlZnRJdGVtLnJlZG9uZSAhPT0gbnVsbCkge1xuICAgIHJpZ2h0SXRlbS5yZWRvbmUgPSBjcmVhdGVJRChsZWZ0SXRlbS5yZWRvbmUuY2xpZW50LCBsZWZ0SXRlbS5yZWRvbmUuY2xvY2sgKyBkaWZmKTtcbiAgfVxuICAvLyB1cGRhdGUgbGVmdCAoZG8gbm90IHNldCBsZWZ0SXRlbS5yaWdodE9yaWdpbiBhcyBpdCB3aWxsIGxlYWQgdG8gcHJvYmxlbXMgd2hlbiBzeW5jaW5nKVxuICBsZWZ0SXRlbS5yaWdodCA9IHJpZ2h0SXRlbTtcbiAgLy8gdXBkYXRlIHJpZ2h0XG4gIGlmIChyaWdodEl0ZW0ucmlnaHQgIT09IG51bGwpIHtcbiAgICByaWdodEl0ZW0ucmlnaHQubGVmdCA9IHJpZ2h0SXRlbTtcbiAgfVxuICAvLyByaWdodCBpcyBtb3JlIHNwZWNpZmljLlxuICB0cmFuc2FjdGlvbi5fbWVyZ2VTdHJ1Y3RzLnB1c2gocmlnaHRJdGVtKTtcbiAgLy8gdXBkYXRlIHBhcmVudC5fbWFwXG4gIGlmIChyaWdodEl0ZW0ucGFyZW50U3ViICE9PSBudWxsICYmIHJpZ2h0SXRlbS5yaWdodCA9PT0gbnVsbCkge1xuICAgIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChyaWdodEl0ZW0ucGFyZW50KS5fbWFwLnNldChyaWdodEl0ZW0ucGFyZW50U3ViLCByaWdodEl0ZW0pO1xuICB9XG4gIGxlZnRJdGVtLmxlbmd0aCA9IGRpZmY7XG4gIHJldHVybiByaWdodEl0ZW1cbn07XG5cbi8qKlxuICogUmVkb2VzIHRoZSBlZmZlY3Qgb2YgdGhpcyBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb24gVGhlIFlqcyBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICogQHBhcmFtIHtTZXQ8SXRlbT59IHJlZG9pdGVtc1xuICogQHBhcmFtIHtEZWxldGVTZXR9IGl0ZW1zVG9EZWxldGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaWdub3JlUmVtb3RlTWFwQ2hhbmdlc1xuICpcbiAqIEByZXR1cm4ge0l0ZW18bnVsbH1cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCByZWRvSXRlbSA9ICh0cmFuc2FjdGlvbiwgaXRlbSwgcmVkb2l0ZW1zLCBpdGVtc1RvRGVsZXRlLCBpZ25vcmVSZW1vdGVNYXBDaGFuZ2VzKSA9PiB7XG4gIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvYztcbiAgY29uc3Qgc3RvcmUgPSBkb2Muc3RvcmU7XG4gIGNvbnN0IG93bkNsaWVudElEID0gZG9jLmNsaWVudElEO1xuICBjb25zdCByZWRvbmUgPSBpdGVtLnJlZG9uZTtcbiAgaWYgKHJlZG9uZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgcmVkb25lKVxuICB9XG4gIGxldCBwYXJlbnRJdGVtID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGl0ZW0ucGFyZW50KS5faXRlbTtcbiAgLyoqXG4gICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAqL1xuICBsZXQgbGVmdCA9IG51bGw7XG4gIC8qKlxuICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgKi9cbiAgbGV0IHJpZ2h0O1xuICAvLyBtYWtlIHN1cmUgdGhhdCBwYXJlbnQgaXMgcmVkb25lXG4gIGlmIChwYXJlbnRJdGVtICE9PSBudWxsICYmIHBhcmVudEl0ZW0uZGVsZXRlZCA9PT0gdHJ1ZSkge1xuICAgIC8vIHRyeSB0byB1bmRvIHBhcmVudCBpZiBpdCB3aWxsIGJlIHVuZG9uZSBhbnl3YXlcbiAgICBpZiAocGFyZW50SXRlbS5yZWRvbmUgPT09IG51bGwgJiYgKCFyZWRvaXRlbXMuaGFzKHBhcmVudEl0ZW0pIHx8IHJlZG9JdGVtKHRyYW5zYWN0aW9uLCBwYXJlbnRJdGVtLCByZWRvaXRlbXMsIGl0ZW1zVG9EZWxldGUsIGlnbm9yZVJlbW90ZU1hcENoYW5nZXMpID09PSBudWxsKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgd2hpbGUgKHBhcmVudEl0ZW0ucmVkb25lICE9PSBudWxsKSB7XG4gICAgICBwYXJlbnRJdGVtID0gZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIHBhcmVudEl0ZW0ucmVkb25lKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcGFyZW50VHlwZSA9IHBhcmVudEl0ZW0gPT09IG51bGwgPyAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAoaXRlbS5wYXJlbnQpIDogLyoqIEB0eXBlIHtDb250ZW50VHlwZX0gKi8gKHBhcmVudEl0ZW0uY29udGVudCkudHlwZTtcblxuICBpZiAoaXRlbS5wYXJlbnRTdWIgPT09IG51bGwpIHtcbiAgICAvLyBJcyBhbiBhcnJheSBpdGVtLiBJbnNlcnQgYXQgdGhlIG9sZCBwb3NpdGlvblxuICAgIGxlZnQgPSBpdGVtLmxlZnQ7XG4gICAgcmlnaHQgPSBpdGVtO1xuICAgIC8vIGZpbmQgbmV4dCBjbG9uZWRfcmVkbyBpdGVtc1xuICAgIHdoaWxlIChsZWZ0ICE9PSBudWxsKSB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICAgKi9cbiAgICAgIGxldCBsZWZ0VHJhY2UgPSBsZWZ0O1xuICAgICAgLy8gdHJhY2UgcmVkb25lIHVudGlsIHBhcmVudCBtYXRjaGVzXG4gICAgICB3aGlsZSAobGVmdFRyYWNlICE9PSBudWxsICYmIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChsZWZ0VHJhY2UucGFyZW50KS5faXRlbSAhPT0gcGFyZW50SXRlbSkge1xuICAgICAgICBsZWZ0VHJhY2UgPSBsZWZ0VHJhY2UucmVkb25lID09PSBudWxsID8gbnVsbCA6IGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBsZWZ0VHJhY2UucmVkb25lKTtcbiAgICAgIH1cbiAgICAgIGlmIChsZWZ0VHJhY2UgIT09IG51bGwgJiYgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGxlZnRUcmFjZS5wYXJlbnQpLl9pdGVtID09PSBwYXJlbnRJdGVtKSB7XG4gICAgICAgIGxlZnQgPSBsZWZ0VHJhY2U7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBsZWZ0ID0gbGVmdC5sZWZ0O1xuICAgIH1cbiAgICB3aGlsZSAocmlnaHQgIT09IG51bGwpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICAgICAqL1xuICAgICAgbGV0IHJpZ2h0VHJhY2UgPSByaWdodDtcbiAgICAgIC8vIHRyYWNlIHJlZG9uZSB1bnRpbCBwYXJlbnQgbWF0Y2hlc1xuICAgICAgd2hpbGUgKHJpZ2h0VHJhY2UgIT09IG51bGwgJiYgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHJpZ2h0VHJhY2UucGFyZW50KS5faXRlbSAhPT0gcGFyZW50SXRlbSkge1xuICAgICAgICByaWdodFRyYWNlID0gcmlnaHRUcmFjZS5yZWRvbmUgPT09IG51bGwgPyBudWxsIDogZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIHJpZ2h0VHJhY2UucmVkb25lKTtcbiAgICAgIH1cbiAgICAgIGlmIChyaWdodFRyYWNlICE9PSBudWxsICYmIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChyaWdodFRyYWNlLnBhcmVudCkuX2l0ZW0gPT09IHBhcmVudEl0ZW0pIHtcbiAgICAgICAgcmlnaHQgPSByaWdodFRyYWNlO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgcmlnaHQgPSByaWdodC5yaWdodDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmlnaHQgPSBudWxsO1xuICAgIGlmIChpdGVtLnJpZ2h0ICYmICFpZ25vcmVSZW1vdGVNYXBDaGFuZ2VzKSB7XG4gICAgICBsZWZ0ID0gaXRlbTtcbiAgICAgIC8vIEl0ZXJhdGUgcmlnaHQgd2hpbGUgcmlnaHQgaXMgaW4gaXRlbXNUb0RlbGV0ZVxuICAgICAgLy8gSWYgaXQgaXMgaW50ZW5kZWQgdG8gZGVsZXRlIHJpZ2h0IHdoaWxlIGl0ZW0gaXMgcmVkb25lLCB3ZSBjYW4gZXhwZWN0IHRoYXQgaXRlbSBzaG91bGQgcmVwbGFjZSByaWdodC5cbiAgICAgIHdoaWxlIChsZWZ0ICE9PSBudWxsICYmIGxlZnQucmlnaHQgIT09IG51bGwgJiYgaXNEZWxldGVkKGl0ZW1zVG9EZWxldGUsIGxlZnQucmlnaHQuaWQpKSB7XG4gICAgICAgIGxlZnQgPSBsZWZ0LnJpZ2h0O1xuICAgICAgfVxuICAgICAgLy8gZm9sbG93IHJlZG9uZVxuICAgICAgLy8gdHJhY2UgcmVkb25lIHVudGlsIHBhcmVudCBtYXRjaGVzXG4gICAgICB3aGlsZSAobGVmdCAhPT0gbnVsbCAmJiBsZWZ0LnJlZG9uZSAhPT0gbnVsbCkge1xuICAgICAgICBsZWZ0ID0gZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGxlZnQucmVkb25lKTtcbiAgICAgIH1cbiAgICAgIC8vIGNoZWNrIHdldGhlciB3ZSB3ZXJlIGFsbG93ZWQgdG8gZm9sbG93IHJpZ2h0IChpbmRpY2F0aW5nIHRoYXQgb3JpZ2luYWxseSB0aGlzIG9wIHdhcyByZXBsYWNlZCBieSBhbm90aGVyIGl0ZW0pXG4gICAgICBpZiAobGVmdCA9PT0gbnVsbCB8fCAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAobGVmdC5wYXJlbnQpLl9pdGVtICE9PSBwYXJlbnRJdGVtKSB7XG4gICAgICAgIC8vIGludmFsaWQgcGFyZW50OyBzaG91bGQgbmV2ZXIgaGFwcGVuXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgICBpZiAobGVmdCAmJiBsZWZ0LnJpZ2h0ICE9PSBudWxsKSB7XG4gICAgICAgIC8vIEl0IGlzIG5vdCBwb3NzaWJsZSB0byByZWRvIHRoaXMgaXRlbSBiZWNhdXNlIGl0IGNvbmZsaWN0cyB3aXRoIGFcbiAgICAgICAgLy8gY2hhbmdlIGZyb20gYW5vdGhlciBjbGllbnRcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IHBhcmVudFR5cGUuX21hcC5nZXQoaXRlbS5wYXJlbnRTdWIpIHx8IG51bGw7XG4gICAgfVxuICB9XG4gIGNvbnN0IG5leHRDbG9jayA9IGdldFN0YXRlKHN0b3JlLCBvd25DbGllbnRJRCk7XG4gIGNvbnN0IG5leHRJZCA9IGNyZWF0ZUlEKG93bkNsaWVudElELCBuZXh0Q2xvY2spO1xuICBjb25zdCByZWRvbmVJdGVtID0gbmV3IEl0ZW0oXG4gICAgbmV4dElkLFxuICAgIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsXG4gICAgcmlnaHQsIHJpZ2h0ICYmIHJpZ2h0LmlkLFxuICAgIHBhcmVudFR5cGUsXG4gICAgaXRlbS5wYXJlbnRTdWIsXG4gICAgaXRlbS5jb250ZW50LmNvcHkoKVxuICApO1xuICBpdGVtLnJlZG9uZSA9IG5leHRJZDtcbiAga2VlcEl0ZW0ocmVkb25lSXRlbSwgdHJ1ZSk7XG4gIHJlZG9uZUl0ZW0uaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKTtcbiAgcmV0dXJuIHJlZG9uZUl0ZW1cbn07XG5cbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgdGhhdCByZXByZXNlbnRzIGFueSBjb250ZW50LlxuICovXG5jbGFzcyBJdGVtIGV4dGVuZHMgQWJzdHJhY3RTdHJ1Y3Qge1xuICAvKipcbiAgICogQHBhcmFtIHtJRH0gaWRcbiAgICogQHBhcmFtIHtJdGVtIHwgbnVsbH0gbGVmdFxuICAgKiBAcGFyYW0ge0lEIHwgbnVsbH0gb3JpZ2luXG4gICAqIEBwYXJhbSB7SXRlbSB8IG51bGx9IHJpZ2h0XG4gICAqIEBwYXJhbSB7SUQgfCBudWxsfSByaWdodE9yaWdpblxuICAgKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fElEfG51bGx9IHBhcmVudCBJcyBhIHR5cGUgaWYgaW50ZWdyYXRlZCwgaXMgbnVsbCBpZiBpdCBpcyBwb3NzaWJsZSB0byBjb3B5IHBhcmVudCBmcm9tIGxlZnQgb3IgcmlnaHQsIGlzIElEIGJlZm9yZSBpbnRlZ3JhdGlvbiB0byBzZWFyY2ggZm9yIGl0LlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHBhcmVudFN1YlxuICAgKiBAcGFyYW0ge0Fic3RyYWN0Q29udGVudH0gY29udGVudFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGlkLCBsZWZ0LCBvcmlnaW4sIHJpZ2h0LCByaWdodE9yaWdpbiwgcGFyZW50LCBwYXJlbnRTdWIsIGNvbnRlbnQpIHtcbiAgICBzdXBlcihpZCwgY29udGVudC5nZXRMZW5ndGgoKSk7XG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0gdGhhdCB3YXMgb3JpZ2luYWxseSB0byB0aGUgbGVmdCBvZiB0aGlzIGl0ZW0uXG4gICAgICogQHR5cGUge0lEIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLm9yaWdpbiA9IG9yaWdpbjtcbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbSB0aGF0IGlzIGN1cnJlbnRseSB0byB0aGUgbGVmdCBvZiB0aGlzIGl0ZW0uXG4gICAgICogQHR5cGUge0l0ZW0gfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0gdGhhdCBpcyBjdXJyZW50bHkgdG8gdGhlIHJpZ2h0IG9mIHRoaXMgaXRlbS5cbiAgICAgKiBAdHlwZSB7SXRlbSB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtIHRoYXQgd2FzIG9yaWdpbmFsbHkgdG8gdGhlIHJpZ2h0IG9mIHRoaXMgaXRlbS5cbiAgICAgKiBAdHlwZSB7SUQgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMucmlnaHRPcmlnaW4gPSByaWdodE9yaWdpbjtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT58SUR8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgcGFyZW50IHJlZmVycyB0byB0aGlzIGl0ZW0gd2l0aCBzb21lIGtpbmQgb2Yga2V5IChlLmcuIFlNYXAsIHRoZVxuICAgICAqIGtleSBpcyBzcGVjaWZpZWQgaGVyZS4gVGhlIGtleSBpcyB0aGVuIHVzZWQgdG8gcmVmZXIgdG8gdGhlIGxpc3QgaW4gd2hpY2hcbiAgICAgKiB0byBpbnNlcnQgdGhpcyBpdGVtLiBJZiBgcGFyZW50U3ViID0gbnVsbGAgdHlwZS5fc3RhcnQgaXMgdGhlIGxpc3QgaW5cbiAgICAgKiB3aGljaCB0byBpbnNlcnQgdG8uIE90aGVyd2lzZSBpdCBpcyBgcGFyZW50Ll9tYXBgLlxuICAgICAqIEB0eXBlIHtTdHJpbmcgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIC8qKlxuICAgICAqIElmIHRoaXMgdHlwZSdzIGVmZmVjdCBpcyByZWRvbmUgdGhpcyB0eXBlIHJlZmVycyB0byB0aGUgdHlwZSB0aGF0IHVuZGlkXG4gICAgICogdGhpcyBvcGVyYXRpb24uXG4gICAgICogQHR5cGUge0lEIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJlZG9uZSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0Fic3RyYWN0Q29udGVudH1cbiAgICAgKi9cbiAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgIC8qKlxuICAgICAqIGJpdDE6IGtlZXBcbiAgICAgKiBiaXQyOiBjb3VudGFibGVcbiAgICAgKiBiaXQzOiBkZWxldGVkXG4gICAgICogYml0NDogbWFyayAtIG1hcmsgbm9kZSBhcyBmYXN0LXNlYXJjaC1tYXJrZXJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfSBieXRlXG4gICAgICovXG4gICAgdGhpcy5pbmZvID0gdGhpcy5jb250ZW50LmlzQ291bnRhYmxlKCkgPyBiaW5hcnkuQklUMiA6IDA7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyB1c2VkIHRvIG1hcmsgdGhlIGl0ZW0gYXMgYW4gaW5kZXhlZCBmYXN0LXNlYXJjaCBtYXJrZXJcbiAgICpcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBzZXQgbWFya2VyIChpc01hcmtlZCkge1xuICAgIGlmICgoKHRoaXMuaW5mbyAmIGJpbmFyeS5CSVQ0KSA+IDApICE9PSBpc01hcmtlZCkge1xuICAgICAgdGhpcy5pbmZvIF49IGJpbmFyeS5CSVQ0O1xuICAgIH1cbiAgfVxuXG4gIGdldCBtYXJrZXIgKCkge1xuICAgIHJldHVybiAodGhpcy5pbmZvICYgYmluYXJ5LkJJVDQpID4gMFxuICB9XG5cbiAgLyoqXG4gICAqIElmIHRydWUsIGRvIG5vdCBnYXJiYWdlIGNvbGxlY3QgdGhpcyBJdGVtLlxuICAgKi9cbiAgZ2V0IGtlZXAgKCkge1xuICAgIHJldHVybiAodGhpcy5pbmZvICYgYmluYXJ5LkJJVDEpID4gMFxuICB9XG5cbiAgc2V0IGtlZXAgKGRvS2VlcCkge1xuICAgIGlmICh0aGlzLmtlZXAgIT09IGRvS2VlcCkge1xuICAgICAgdGhpcy5pbmZvIF49IGJpbmFyeS5CSVQxO1xuICAgIH1cbiAgfVxuXG4gIGdldCBjb3VudGFibGUgKCkge1xuICAgIHJldHVybiAodGhpcy5pbmZvICYgYmluYXJ5LkJJVDIpID4gMFxuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBpdGVtIHdhcyBkZWxldGVkIG9yIG5vdC5cbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqL1xuICBnZXQgZGVsZXRlZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLmluZm8gJiBiaW5hcnkuQklUMykgPiAwXG4gIH1cblxuICBzZXQgZGVsZXRlZCAoZG9EZWxldGUpIHtcbiAgICBpZiAodGhpcy5kZWxldGVkICE9PSBkb0RlbGV0ZSkge1xuICAgICAgdGhpcy5pbmZvIF49IGJpbmFyeS5CSVQzO1xuICAgIH1cbiAgfVxuXG4gIG1hcmtEZWxldGVkICgpIHtcbiAgICB0aGlzLmluZm8gfD0gYmluYXJ5LkJJVDM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBjcmVhdG9yIGNsaWVudElEIG9mIHRoZSBtaXNzaW5nIG9wIG9yIGRlZmluZSBtaXNzaW5nIGl0ZW1zIGFuZCByZXR1cm4gbnVsbC5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICogQHJldHVybiB7bnVsbCB8IG51bWJlcn1cbiAgICovXG4gIGdldE1pc3NpbmcgKHRyYW5zYWN0aW9uLCBzdG9yZSkge1xuICAgIGlmICh0aGlzLm9yaWdpbiAmJiB0aGlzLm9yaWdpbi5jbGllbnQgIT09IHRoaXMuaWQuY2xpZW50ICYmIHRoaXMub3JpZ2luLmNsb2NrID49IGdldFN0YXRlKHN0b3JlLCB0aGlzLm9yaWdpbi5jbGllbnQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcmlnaW4uY2xpZW50XG4gICAgfVxuICAgIGlmICh0aGlzLnJpZ2h0T3JpZ2luICYmIHRoaXMucmlnaHRPcmlnaW4uY2xpZW50ICE9PSB0aGlzLmlkLmNsaWVudCAmJiB0aGlzLnJpZ2h0T3JpZ2luLmNsb2NrID49IGdldFN0YXRlKHN0b3JlLCB0aGlzLnJpZ2h0T3JpZ2luLmNsaWVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJpZ2h0T3JpZ2luLmNsaWVudFxuICAgIH1cbiAgICBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuY29uc3RydWN0b3IgPT09IElEICYmIHRoaXMuaWQuY2xpZW50ICE9PSB0aGlzLnBhcmVudC5jbGllbnQgJiYgdGhpcy5wYXJlbnQuY2xvY2sgPj0gZ2V0U3RhdGUoc3RvcmUsIHRoaXMucGFyZW50LmNsaWVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jbGllbnRcbiAgICB9XG5cbiAgICAvLyBXZSBoYXZlIGFsbCBtaXNzaW5nIGlkcywgbm93IGZpbmQgdGhlIGl0ZW1zXG5cbiAgICBpZiAodGhpcy5vcmlnaW4pIHtcbiAgICAgIHRoaXMubGVmdCA9IGdldEl0ZW1DbGVhbkVuZCh0cmFuc2FjdGlvbiwgc3RvcmUsIHRoaXMub3JpZ2luKTtcbiAgICAgIHRoaXMub3JpZ2luID0gdGhpcy5sZWZ0Lmxhc3RJZDtcbiAgICB9XG4gICAgaWYgKHRoaXMucmlnaHRPcmlnaW4pIHtcbiAgICAgIHRoaXMucmlnaHQgPSBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgdGhpcy5yaWdodE9yaWdpbik7XG4gICAgICB0aGlzLnJpZ2h0T3JpZ2luID0gdGhpcy5yaWdodC5pZDtcbiAgICB9XG4gICAgaWYgKCh0aGlzLmxlZnQgJiYgdGhpcy5sZWZ0LmNvbnN0cnVjdG9yID09PSBHQykgfHwgKHRoaXMucmlnaHQgJiYgdGhpcy5yaWdodC5jb25zdHJ1Y3RvciA9PT0gR0MpKSB7XG4gICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgfVxuICAgIC8vIG9ubHkgc2V0IHBhcmVudCBpZiB0aGlzIHNob3VsZG4ndCBiZSBnYXJiYWdlIGNvbGxlY3RlZFxuICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgIGlmICh0aGlzLmxlZnQgJiYgdGhpcy5sZWZ0LmNvbnN0cnVjdG9yID09PSBJdGVtKSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gdGhpcy5sZWZ0LnBhcmVudDtcbiAgICAgICAgdGhpcy5wYXJlbnRTdWIgPSB0aGlzLmxlZnQucGFyZW50U3ViO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucmlnaHQgJiYgdGhpcy5yaWdodC5jb25zdHJ1Y3RvciA9PT0gSXRlbSkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHRoaXMucmlnaHQucGFyZW50O1xuICAgICAgICB0aGlzLnBhcmVudFN1YiA9IHRoaXMucmlnaHQucGFyZW50U3ViO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnQuY29uc3RydWN0b3IgPT09IElEKSB7XG4gICAgICBjb25zdCBwYXJlbnRJdGVtID0gZ2V0SXRlbShzdG9yZSwgdGhpcy5wYXJlbnQpO1xuICAgICAgaWYgKHBhcmVudEl0ZW0uY29uc3RydWN0b3IgPT09IEdDKSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gLyoqIEB0eXBlIHtDb250ZW50VHlwZX0gKi8gKHBhcmVudEl0ZW0uY29udGVudCkudHlwZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgdGhpcy5pZC5jbG9jayArPSBvZmZzZXQ7XG4gICAgICB0aGlzLmxlZnQgPSBnZXRJdGVtQ2xlYW5FbmQodHJhbnNhY3Rpb24sIHRyYW5zYWN0aW9uLmRvYy5zdG9yZSwgY3JlYXRlSUQodGhpcy5pZC5jbGllbnQsIHRoaXMuaWQuY2xvY2sgLSAxKSk7XG4gICAgICB0aGlzLm9yaWdpbiA9IHRoaXMubGVmdC5sYXN0SWQ7XG4gICAgICB0aGlzLmNvbnRlbnQgPSB0aGlzLmNvbnRlbnQuc3BsaWNlKG9mZnNldCk7XG4gICAgICB0aGlzLmxlbmd0aCAtPSBvZmZzZXQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICBpZiAoKCF0aGlzLmxlZnQgJiYgKCF0aGlzLnJpZ2h0IHx8IHRoaXMucmlnaHQubGVmdCAhPT0gbnVsbCkpIHx8ICh0aGlzLmxlZnQgJiYgdGhpcy5sZWZ0LnJpZ2h0ICE9PSB0aGlzLnJpZ2h0KSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICAgICAgICovXG4gICAgICAgIGxldCBsZWZ0ID0gdGhpcy5sZWZ0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IG87XG4gICAgICAgIC8vIHNldCBvIHRvIHRoZSBmaXJzdCBjb25mbGljdGluZyBpdGVtXG4gICAgICAgIGlmIChsZWZ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgbyA9IGxlZnQucmlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnRTdWIgIT09IG51bGwpIHtcbiAgICAgICAgICBvID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fbWFwLmdldCh0aGlzLnBhcmVudFN1YikgfHwgbnVsbDtcbiAgICAgICAgICB3aGlsZSAobyAhPT0gbnVsbCAmJiBvLmxlZnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG8gPSBvLmxlZnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG8gPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9zdGFydDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiB1c2Ugc29tZXRoaW5nIGxpa2UgRGVsZXRlU2V0IGhlcmUgKGEgdHJlZSBpbXBsZW1lbnRhdGlvbiB3b3VsZCBiZSBiZXN0KVxuICAgICAgICAvLyBAdG9kbyB1c2UgZ2xvYmFsIHNldCBkZWZpbml0aW9uc1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge1NldDxJdGVtPn1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGNvbmZsaWN0aW5nSXRlbXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7U2V0PEl0ZW0+fVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgaXRlbXNCZWZvcmVPcmlnaW4gPSBuZXcgU2V0KCk7XG4gICAgICAgIC8vIExldCBjIGluIGNvbmZsaWN0aW5nSXRlbXMsIGIgaW4gaXRlbXNCZWZvcmVPcmlnaW5cbiAgICAgICAgLy8gKioqe29yaWdpbn1iYmJie3RoaXN9e2MsYn17YyxifXtvfSoqKlxuICAgICAgICAvLyBOb3RlIHRoYXQgY29uZmxpY3RpbmdJdGVtcyBpcyBhIHN1YnNldCBvZiBpdGVtc0JlZm9yZU9yaWdpblxuICAgICAgICB3aGlsZSAobyAhPT0gbnVsbCAmJiBvICE9PSB0aGlzLnJpZ2h0KSB7XG4gICAgICAgICAgaXRlbXNCZWZvcmVPcmlnaW4uYWRkKG8pO1xuICAgICAgICAgIGNvbmZsaWN0aW5nSXRlbXMuYWRkKG8pO1xuICAgICAgICAgIGlmIChjb21wYXJlSURzKHRoaXMub3JpZ2luLCBvLm9yaWdpbikpIHtcbiAgICAgICAgICAgIC8vIGNhc2UgMVxuICAgICAgICAgICAgaWYgKG8uaWQuY2xpZW50IDwgdGhpcy5pZC5jbGllbnQpIHtcbiAgICAgICAgICAgICAgbGVmdCA9IG87XG4gICAgICAgICAgICAgIGNvbmZsaWN0aW5nSXRlbXMuY2xlYXIoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcGFyZUlEcyh0aGlzLnJpZ2h0T3JpZ2luLCBvLnJpZ2h0T3JpZ2luKSkge1xuICAgICAgICAgICAgICAvLyB0aGlzIGFuZCBvIGFyZSBjb25mbGljdGluZyBhbmQgcG9pbnQgdG8gdGhlIHNhbWUgaW50ZWdyYXRpb24gcG9pbnRzLiBUaGUgaWQgZGVjaWRlcyB3aGljaCBpdGVtIGNvbWVzIGZpcnN0LlxuICAgICAgICAgICAgICAvLyBTaW5jZSB0aGlzIGlzIHRvIHRoZSBsZWZ0IG9mIG8sIHdlIGNhbiBicmVhayBoZXJlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9IC8vIGVsc2UsIG8gbWlnaHQgYmUgaW50ZWdyYXRlZCBiZWZvcmUgYW4gaXRlbSB0aGF0IHRoaXMgY29uZmxpY3RzIHdpdGguIElmIHNvLCB3ZSB3aWxsIGZpbmQgaXQgaW4gdGhlIG5leHQgaXRlcmF0aW9uc1xuICAgICAgICAgIH0gZWxzZSBpZiAoby5vcmlnaW4gIT09IG51bGwgJiYgaXRlbXNCZWZvcmVPcmlnaW4uaGFzKGdldEl0ZW0odHJhbnNhY3Rpb24uZG9jLnN0b3JlLCBvLm9yaWdpbikpKSB7IC8vIHVzZSBnZXRJdGVtIGluc3RlYWQgb2YgZ2V0SXRlbUNsZWFuRW5kIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCAvIG5lZWQgdG8gc3BsaXQgaXRlbXMuXG4gICAgICAgICAgICAvLyBjYXNlIDJcbiAgICAgICAgICAgIGlmICghY29uZmxpY3RpbmdJdGVtcy5oYXMoZ2V0SXRlbSh0cmFuc2FjdGlvbi5kb2Muc3RvcmUsIG8ub3JpZ2luKSkpIHtcbiAgICAgICAgICAgICAgbGVmdCA9IG87XG4gICAgICAgICAgICAgIGNvbmZsaWN0aW5nSXRlbXMuY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgbyA9IG8ucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcbiAgICAgIH1cbiAgICAgIC8vIHJlY29ubmVjdCBsZWZ0L3JpZ2h0ICsgdXBkYXRlIHBhcmVudCBtYXAvc3RhcnQgaWYgbmVjZXNzYXJ5XG4gICAgICBpZiAodGhpcy5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gdGhpcy5sZWZ0LnJpZ2h0O1xuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgICAgIHRoaXMubGVmdC5yaWdodCA9IHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcjtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50U3ViICE9PSBudWxsKSB7XG4gICAgICAgICAgciA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX21hcC5nZXQodGhpcy5wYXJlbnRTdWIpIHx8IG51bGw7XG4gICAgICAgICAgd2hpbGUgKHIgIT09IG51bGwgJiYgci5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByID0gci5sZWZ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fc3RhcnRcbiAgICAgICAgICA7LyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fc3RhcnQgPSB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmlnaHQgPSByO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucmlnaHQgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5yaWdodC5sZWZ0ID0gdGhpcztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnRTdWIgIT09IG51bGwpIHtcbiAgICAgICAgLy8gc2V0IGFzIGN1cnJlbnQgcGFyZW50IHZhbHVlIGlmIHJpZ2h0ID09PSBudWxsIGFuZCB0aGlzIGlzIHBhcmVudFN1YlxuICAgICAgICAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9tYXAuc2V0KHRoaXMucGFyZW50U3ViLCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMubGVmdCAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIGN1cnJlbnQgYXR0cmlidXRlIHZhbHVlIG9mIHBhcmVudC4gZGVsZXRlIHJpZ2h0XG4gICAgICAgICAgdGhpcy5sZWZ0LmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGFkanVzdCBsZW5ndGggb2YgcGFyZW50XG4gICAgICBpZiAodGhpcy5wYXJlbnRTdWIgPT09IG51bGwgJiYgdGhpcy5jb3VudGFibGUgJiYgIXRoaXMuZGVsZXRlZCkge1xuICAgICAgICAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9sZW5ndGggKz0gdGhpcy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBhZGRTdHJ1Y3QodHJhbnNhY3Rpb24uZG9jLnN0b3JlLCB0aGlzKTtcbiAgICAgIHRoaXMuY29udGVudC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIHRoaXMpO1xuICAgICAgLy8gYWRkIHBhcmVudCB0byB0cmFuc2FjdGlvbi5jaGFuZ2VkXG4gICAgICBhZGRDaGFuZ2VkVHlwZVRvVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCksIHRoaXMucGFyZW50U3ViKTtcbiAgICAgIGlmICgoLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5faXRlbSAhPT0gbnVsbCAmJiAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9pdGVtLmRlbGV0ZWQpIHx8ICh0aGlzLnBhcmVudFN1YiAhPT0gbnVsbCAmJiB0aGlzLnJpZ2h0ICE9PSBudWxsKSkge1xuICAgICAgICAvLyBkZWxldGUgaWYgcGFyZW50IGlzIGRlbGV0ZWQgb3IgaWYgdGhpcyBpcyBub3QgdGhlIGN1cnJlbnQgYXR0cmlidXRlIHZhbHVlIG9mIHBhcmVudFxuICAgICAgICB0aGlzLmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHBhcmVudCBpcyBub3QgZGVmaW5lZC4gSW50ZWdyYXRlIEdDIHN0cnVjdCBpbnN0ZWFkXG4gICAgICBuZXcgR0ModGhpcy5pZCwgdGhpcy5sZW5ndGgpLmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5leHQgbm9uLWRlbGV0ZWQgaXRlbVxuICAgKi9cbiAgZ2V0IG5leHQgKCkge1xuICAgIGxldCBuID0gdGhpcy5yaWdodDtcbiAgICB3aGlsZSAobiAhPT0gbnVsbCAmJiBuLmRlbGV0ZWQpIHtcbiAgICAgIG4gPSBuLnJpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gblxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByZXZpb3VzIG5vbi1kZWxldGVkIGl0ZW1cbiAgICovXG4gIGdldCBwcmV2ICgpIHtcbiAgICBsZXQgbiA9IHRoaXMubGVmdDtcbiAgICB3aGlsZSAobiAhPT0gbnVsbCAmJiBuLmRlbGV0ZWQpIHtcbiAgICAgIG4gPSBuLmxlZnQ7XG4gICAgfVxuICAgIHJldHVybiBuXG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIGxhc3QgY29udGVudCBhZGRyZXNzIG9mIHRoaXMgSXRlbS5cbiAgICovXG4gIGdldCBsYXN0SWQgKCkge1xuICAgIC8vIGFsbG9jYXRpbmcgaWRzIGlzIHByZXR0eSBjb3N0bHkgYmVjYXVzZSBvZiB0aGUgYW1vdW50IG9mIGlkcyBjcmVhdGVkLCBzbyB3ZSB0cnkgdG8gcmV1c2Ugd2hlbmV2ZXIgcG9zc2libGVcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgPyB0aGlzLmlkIDogY3JlYXRlSUQodGhpcy5pZC5jbGllbnQsIHRoaXMuaWQuY2xvY2sgKyB0aGlzLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvKipcbiAgICogVHJ5IHRvIG1lcmdlIHR3byBpdGVtc1xuICAgKlxuICAgKiBAcGFyYW0ge0l0ZW19IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9PT0gcmlnaHQuY29uc3RydWN0b3IgJiZcbiAgICAgIGNvbXBhcmVJRHMocmlnaHQub3JpZ2luLCB0aGlzLmxhc3RJZCkgJiZcbiAgICAgIHRoaXMucmlnaHQgPT09IHJpZ2h0ICYmXG4gICAgICBjb21wYXJlSURzKHRoaXMucmlnaHRPcmlnaW4sIHJpZ2h0LnJpZ2h0T3JpZ2luKSAmJlxuICAgICAgdGhpcy5pZC5jbGllbnQgPT09IHJpZ2h0LmlkLmNsaWVudCAmJlxuICAgICAgdGhpcy5pZC5jbG9jayArIHRoaXMubGVuZ3RoID09PSByaWdodC5pZC5jbG9jayAmJlxuICAgICAgdGhpcy5kZWxldGVkID09PSByaWdodC5kZWxldGVkICYmXG4gICAgICB0aGlzLnJlZG9uZSA9PT0gbnVsbCAmJlxuICAgICAgcmlnaHQucmVkb25lID09PSBudWxsICYmXG4gICAgICB0aGlzLmNvbnRlbnQuY29uc3RydWN0b3IgPT09IHJpZ2h0LmNvbnRlbnQuY29uc3RydWN0b3IgJiZcbiAgICAgIHRoaXMuY29udGVudC5tZXJnZVdpdGgocmlnaHQuY29udGVudClcbiAgICApIHtcbiAgICAgIGNvbnN0IHNlYXJjaE1hcmtlciA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX3NlYXJjaE1hcmtlcjtcbiAgICAgIGlmIChzZWFyY2hNYXJrZXIpIHtcbiAgICAgICAgc2VhcmNoTWFya2VyLmZvckVhY2gobWFya2VyID0+IHtcbiAgICAgICAgICBpZiAobWFya2VyLnAgPT09IHJpZ2h0KSB7XG4gICAgICAgICAgICAvLyByaWdodCBpcyBnb2luZyB0byBiZSBcImZvcmdvdHRlblwiIHNvIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBtYXJrZXJcbiAgICAgICAgICAgIG1hcmtlci5wID0gdGhpcztcbiAgICAgICAgICAgIC8vIGFkanVzdCBtYXJrZXIgaW5kZXhcbiAgICAgICAgICAgIGlmICghdGhpcy5kZWxldGVkICYmIHRoaXMuY291bnRhYmxlKSB7XG4gICAgICAgICAgICAgIG1hcmtlci5pbmRleCAtPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHJpZ2h0LmtlZXApIHtcbiAgICAgICAgdGhpcy5rZWVwID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmlnaHQgPSByaWdodC5yaWdodDtcbiAgICAgIGlmICh0aGlzLnJpZ2h0ICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucmlnaHQubGVmdCA9IHRoaXM7XG4gICAgICB9XG4gICAgICB0aGlzLmxlbmd0aCArPSByaWdodC5sZW5ndGg7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrIHRoaXMgSXRlbSBhcyBkZWxldGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge1xuICAgIGlmICghdGhpcy5kZWxldGVkKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpO1xuICAgICAgLy8gYWRqdXN0IHRoZSBsZW5ndGggb2YgcGFyZW50XG4gICAgICBpZiAodGhpcy5jb3VudGFibGUgJiYgdGhpcy5wYXJlbnRTdWIgPT09IG51bGwpIHtcbiAgICAgICAgcGFyZW50Ll9sZW5ndGggLT0gdGhpcy5sZW5ndGg7XG4gICAgICB9XG4gICAgICB0aGlzLm1hcmtEZWxldGVkKCk7XG4gICAgICBhZGRUb0RlbGV0ZVNldCh0cmFuc2FjdGlvbi5kZWxldGVTZXQsIHRoaXMuaWQuY2xpZW50LCB0aGlzLmlkLmNsb2NrLCB0aGlzLmxlbmd0aCk7XG4gICAgICBhZGRDaGFuZ2VkVHlwZVRvVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIHBhcmVudCwgdGhpcy5wYXJlbnRTdWIpO1xuICAgICAgdGhpcy5jb250ZW50LmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyZW50R0NkXG4gICAqL1xuICBnYyAoc3RvcmUsIHBhcmVudEdDZCkge1xuICAgIGlmICghdGhpcy5kZWxldGVkKSB7XG4gICAgICB0aHJvdyBlcnJvci51bmV4cGVjdGVkQ2FzZSgpXG4gICAgfVxuICAgIHRoaXMuY29udGVudC5nYyhzdG9yZSk7XG4gICAgaWYgKHBhcmVudEdDZCkge1xuICAgICAgcmVwbGFjZVN0cnVjdChzdG9yZSwgdGhpcywgbmV3IEdDKHRoaXMuaWQsIHRoaXMubGVuZ3RoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29udGVudCA9IG5ldyBDb250ZW50RGVsZXRlZCh0aGlzLmxlbmd0aCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybSB0aGUgcHJvcGVydGllcyBvZiB0aGlzIHR5cGUgdG8gYmluYXJ5IGFuZCB3cml0ZSBpdCB0byBhblxuICAgKiBCaW5hcnlFbmNvZGVyLlxuICAgKlxuICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIHRoaXMgSXRlbSBpcyBzZW50IHRvIGEgcmVtb3RlIHBlZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyIFRoZSBlbmNvZGVyIHRvIHdyaXRlIGRhdGEgdG8uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBjb25zdCBvcmlnaW4gPSBvZmZzZXQgPiAwID8gY3JlYXRlSUQodGhpcy5pZC5jbGllbnQsIHRoaXMuaWQuY2xvY2sgKyBvZmZzZXQgLSAxKSA6IHRoaXMub3JpZ2luO1xuICAgIGNvbnN0IHJpZ2h0T3JpZ2luID0gdGhpcy5yaWdodE9yaWdpbjtcbiAgICBjb25zdCBwYXJlbnRTdWIgPSB0aGlzLnBhcmVudFN1YjtcbiAgICBjb25zdCBpbmZvID0gKHRoaXMuY29udGVudC5nZXRSZWYoKSAmIGJpbmFyeS5CSVRTNSkgfFxuICAgICAgKG9yaWdpbiA9PT0gbnVsbCA/IDAgOiBiaW5hcnkuQklUOCkgfCAvLyBvcmlnaW4gaXMgZGVmaW5lZFxuICAgICAgKHJpZ2h0T3JpZ2luID09PSBudWxsID8gMCA6IGJpbmFyeS5CSVQ3KSB8IC8vIHJpZ2h0IG9yaWdpbiBpcyBkZWZpbmVkXG4gICAgICAocGFyZW50U3ViID09PSBudWxsID8gMCA6IGJpbmFyeS5CSVQ2KTsgLy8gcGFyZW50U3ViIGlzIG5vbi1udWxsXG4gICAgZW5jb2Rlci53cml0ZUluZm8oaW5mbyk7XG4gICAgaWYgKG9yaWdpbiAhPT0gbnVsbCkge1xuICAgICAgZW5jb2Rlci53cml0ZUxlZnRJRChvcmlnaW4pO1xuICAgIH1cbiAgICBpZiAocmlnaHRPcmlnaW4gIT09IG51bGwpIHtcbiAgICAgIGVuY29kZXIud3JpdGVSaWdodElEKHJpZ2h0T3JpZ2luKTtcbiAgICB9XG4gICAgaWYgKG9yaWdpbiA9PT0gbnVsbCAmJiByaWdodE9yaWdpbiA9PT0gbnVsbCkge1xuICAgICAgY29uc3QgcGFyZW50ID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KTtcbiAgICAgIGlmIChwYXJlbnQuX2l0ZW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBwYXJlbnRJdGVtID0gcGFyZW50Ll9pdGVtO1xuICAgICAgICBpZiAocGFyZW50SXRlbSA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIHBhcmVudCB0eXBlIG9uIHkuX21hcFxuICAgICAgICAgIC8vIGZpbmQgdGhlIGNvcnJlY3Qga2V5XG4gICAgICAgICAgY29uc3QgeWtleSA9IGZpbmRSb290VHlwZUtleShwYXJlbnQpO1xuICAgICAgICAgIGVuY29kZXIud3JpdGVQYXJlbnRJbmZvKHRydWUpOyAvLyB3cml0ZSBwYXJlbnRZS2V5XG4gICAgICAgICAgZW5jb2Rlci53cml0ZVN0cmluZyh5a2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmNvZGVyLndyaXRlUGFyZW50SW5mbyhmYWxzZSk7IC8vIHdyaXRlIHBhcmVudCBpZFxuICAgICAgICAgIGVuY29kZXIud3JpdGVMZWZ0SUQocGFyZW50SXRlbS5pZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyZW50LmNvbnN0cnVjdG9yID09PSBTdHJpbmcpIHsgLy8gdGhpcyBlZGdlIGNhc2Ugd2FzIGFkZGVkIGJ5IGRpZmZlcmVudGlhbCB1cGRhdGVzXG4gICAgICAgIGVuY29kZXIud3JpdGVQYXJlbnRJbmZvKHRydWUpOyAvLyB3cml0ZSBwYXJlbnRZS2V5XG4gICAgICAgIGVuY29kZXIud3JpdGVTdHJpbmcocGFyZW50KTtcbiAgICAgIH0gZWxzZSBpZiAocGFyZW50LmNvbnN0cnVjdG9yID09PSBJRCkge1xuICAgICAgICBlbmNvZGVyLndyaXRlUGFyZW50SW5mbyhmYWxzZSk7IC8vIHdyaXRlIHBhcmVudCBpZFxuICAgICAgICBlbmNvZGVyLndyaXRlTGVmdElEKHBhcmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvci51bmV4cGVjdGVkQ2FzZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmVudFN1YiAhPT0gbnVsbCkge1xuICAgICAgICBlbmNvZGVyLndyaXRlU3RyaW5nKHBhcmVudFN1Yik7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuY29udGVudC53cml0ZShlbmNvZGVyLCBvZmZzZXQpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmZvXG4gKi9cbmNvbnN0IHJlYWRJdGVtQ29udGVudCA9IChkZWNvZGVyLCBpbmZvKSA9PiBjb250ZW50UmVmc1tpbmZvICYgYmluYXJ5LkJJVFM1XShkZWNvZGVyKTtcblxuLyoqXG4gKiBBIGxvb2t1cCBtYXAgZm9yIHJlYWRpbmcgSXRlbSBjb250ZW50LlxuICpcbiAqIEB0eXBlIHtBcnJheTxmdW5jdGlvbihVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjIpOkFic3RyYWN0Q29udGVudD59XG4gKi9cbmNvbnN0IGNvbnRlbnRSZWZzID0gW1xuICAoKSA9PiB7IGVycm9yLnVuZXhwZWN0ZWRDYXNlKCk7IH0sIC8vIEdDIGlzIG5vdCBJdGVtQ29udGVudFxuICByZWFkQ29udGVudERlbGV0ZWQsIC8vIDFcbiAgcmVhZENvbnRlbnRKU09OLCAvLyAyXG4gIHJlYWRDb250ZW50QmluYXJ5LCAvLyAzXG4gIHJlYWRDb250ZW50U3RyaW5nLCAvLyA0XG4gIHJlYWRDb250ZW50RW1iZWQsIC8vIDVcbiAgcmVhZENvbnRlbnRGb3JtYXQsIC8vIDZcbiAgcmVhZENvbnRlbnRUeXBlLCAvLyA3XG4gIHJlYWRDb250ZW50QW55LCAvLyA4XG4gIHJlYWRDb250ZW50RG9jLCAvLyA5XG4gICgpID0+IHsgZXJyb3IudW5leHBlY3RlZENhc2UoKTsgfSAvLyAxMCAtIFNraXAgaXMgbm90IEl0ZW1Db250ZW50XG5dO1xuXG5jb25zdCBzdHJ1Y3RTa2lwUmVmTnVtYmVyID0gMTA7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgU2tpcCBleHRlbmRzIEFic3RyYWN0U3RydWN0IHtcbiAgZ2V0IGRlbGV0ZWQgKCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBkZWxldGUgKCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtTa2lwfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yICE9PSByaWdodC5jb25zdHJ1Y3Rvcikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHRoaXMubGVuZ3RoICs9IHJpZ2h0Lmxlbmd0aDtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIG9mZnNldCkge1xuICAgIC8vIHNraXAgc3RydWN0cyBjYW5ub3QgYmUgaW50ZWdyYXRlZFxuICAgIGVycm9yLnVuZXhwZWN0ZWRDYXNlKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVJbmZvKHN0cnVjdFNraXBSZWZOdW1iZXIpO1xuICAgIC8vIHdyaXRlIGFzIFZhclVpbnQgYmVjYXVzZSBTa2lwcyBjYW4ndCBtYWtlIHVzZSBvZiBwcmVkaWN0YWJsZSBsZW5ndGgtZW5jb2RpbmdcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgdGhpcy5sZW5ndGggLSBvZmZzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqIEByZXR1cm4ge251bGwgfCBudW1iZXJ9XG4gICAqL1xuICBnZXRNaXNzaW5nICh0cmFuc2FjdGlvbiwgc3RvcmUpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbi8qKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuY29uc3QgZ2xvID0gLyoqIEB0eXBlIHthbnl9ICovICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICA/IHdpbmRvd1xuICAvLyBAdHMtaWdub3JlXG4gIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fSk7XG5cbmNvbnN0IGltcG9ydElkZW50aWZpZXIgPSAnX18gJFlKUyQgX18nO1xuXG5pZiAoZ2xvW2ltcG9ydElkZW50aWZpZXJdID09PSB0cnVlKSB7XG4gIC8qKlxuICAgKiBEZWFyIHJlYWRlciBvZiB0aGlzIG1lc3NhZ2UuIFBsZWFzZSB0YWtlIHRoaXMgc2VyaW91c2x5LlxuICAgKlxuICAgKiBJZiB5b3Ugc2VlIHRoaXMgbWVzc2FnZSwgbWFrZSBzdXJlIHRoYXQgeW91IG9ubHkgaW1wb3J0IG9uZSB2ZXJzaW9uIG9mIFlqcy4gSW4gbWFueSBjYXNlcyxcbiAgICogeW91ciBwYWNrYWdlIG1hbmFnZXIgaW5zdGFsbHMgdHdvIHZlcnNpb25zIG9mIFlqcyB0aGF0IGFyZSB1c2VkIGJ5IGRpZmZlcmVudCBwYWNrYWdlcyB3aXRoaW4geW91ciBwcm9qZWN0LlxuICAgKiBBbm90aGVyIHJlYXNvbiBmb3IgdGhpcyBtZXNzYWdlIGlzIHRoYXQgc29tZSBwYXJ0cyBvZiB5b3VyIHByb2plY3QgdXNlIHRoZSBjb21tb25qcyB2ZXJzaW9uIG9mIFlqc1xuICAgKiBhbmQgb3RoZXJzIHVzZSB0aGUgRWNtYVNjcmlwdCB2ZXJzaW9uIG9mIFlqcy5cbiAgICpcbiAgICogVGhpcyBvZnRlbiBsZWFkcyB0byBpc3N1ZXMgdGhhdCBhcmUgaGFyZCB0byBkZWJ1Zy4gV2Ugb2Z0ZW4gbmVlZCB0byBwZXJmb3JtIGNvbnN0cnVjdG9yIGNoZWNrcyxcbiAgICogZS5nLiBgc3RydWN0IGluc3RhbmNlb2YgR0NgLiBJZiB5b3UgaW1wb3J0ZWQgZGlmZmVyZW50IHZlcnNpb25zIG9mIFlqcywgaXQgaXMgaW1wb3NzaWJsZSBmb3IgdXMgdG9cbiAgICogZG8gdGhlIGNvbnN0cnVjdG9yIGNoZWNrcyBhbnltb3JlIC0gd2hpY2ggbWlnaHQgYnJlYWsgdGhlIENSRFQgYWxnb3JpdGhtLlxuICAgKi9cbiAgY29uc29sZS5lcnJvcignWWpzIHdhcyBhbHJlYWR5IGltcG9ydGVkLiBUaGlzIGJyZWFrcyBjb25zdHJ1Y3RvciBjaGVja3MgYW5kIHdpbGwgbGVhZCB0byBpc3NzdWVzIScpO1xufVxuZ2xvW2ltcG9ydElkZW50aWZpZXJdID0gdHJ1ZTtcblxuZXhwb3J0IHsgQWJzb2x1dGVQb3NpdGlvbiwgQWJzdHJhY3RDb25uZWN0b3IsIEFic3RyYWN0U3RydWN0LCBBYnN0cmFjdFR5cGUsIFlBcnJheSBhcyBBcnJheSwgQ29udGVudEFueSwgQ29udGVudEJpbmFyeSwgQ29udGVudERlbGV0ZWQsIENvbnRlbnRFbWJlZCwgQ29udGVudEZvcm1hdCwgQ29udGVudEpTT04sIENvbnRlbnRTdHJpbmcsIENvbnRlbnRUeXBlLCBEb2MsIEdDLCBJRCwgSXRlbSwgWU1hcCBhcyBNYXAsIFBlcm1hbmVudFVzZXJEYXRhLCBSZWxhdGl2ZVBvc2l0aW9uLCBTbmFwc2hvdCwgWVRleHQgYXMgVGV4dCwgVHJhbnNhY3Rpb24sIFVuZG9NYW5hZ2VyLCBVcGRhdGVFbmNvZGVyVjEsIFlYbWxFbGVtZW50IGFzIFhtbEVsZW1lbnQsIFlYbWxGcmFnbWVudCBhcyBYbWxGcmFnbWVudCwgWVhtbEhvb2sgYXMgWG1sSG9vaywgWVhtbFRleHQgYXMgWG1sVGV4dCwgWUFycmF5RXZlbnQsIFlFdmVudCwgWU1hcEV2ZW50LCBZVGV4dEV2ZW50LCBZWG1sRXZlbnQsIGFwcGx5VXBkYXRlLCBhcHBseVVwZGF0ZVYyLCBjbGVhbnVwWVRleHRGb3JtYXR0aW5nLCBjb21wYXJlSURzLCBjb21wYXJlUmVsYXRpdmVQb3NpdGlvbnMsIGNvbnZlcnRVcGRhdGVGb3JtYXRWMVRvVjIsIGNvbnZlcnRVcGRhdGVGb3JtYXRWMlRvVjEsIGNyZWF0ZUFic29sdXRlUG9zaXRpb25Gcm9tUmVsYXRpdmVQb3NpdGlvbiwgY3JlYXRlRGVsZXRlU2V0LCBjcmVhdGVEZWxldGVTZXRGcm9tU3RydWN0U3RvcmUsIGNyZWF0ZURvY0Zyb21TbmFwc2hvdCwgY3JlYXRlSUQsIGNyZWF0ZVJlbGF0aXZlUG9zaXRpb25Gcm9tSlNPTiwgY3JlYXRlUmVsYXRpdmVQb3NpdGlvbkZyb21UeXBlSW5kZXgsIGNyZWF0ZVNuYXBzaG90LCBkZWNvZGVSZWxhdGl2ZVBvc2l0aW9uLCBkZWNvZGVTbmFwc2hvdCwgZGVjb2RlU25hcHNob3RWMiwgZGVjb2RlU3RhdGVWZWN0b3IsIGRlY29kZVVwZGF0ZSwgZGVjb2RlVXBkYXRlVjIsIGRpZmZVcGRhdGUsIGRpZmZVcGRhdGVWMiwgZW1wdHlTbmFwc2hvdCwgZW5jb2RlUmVsYXRpdmVQb3NpdGlvbiwgZW5jb2RlU25hcHNob3QsIGVuY29kZVNuYXBzaG90VjIsIGVuY29kZVN0YXRlQXNVcGRhdGUsIGVuY29kZVN0YXRlQXNVcGRhdGVWMiwgZW5jb2RlU3RhdGVWZWN0b3IsIGVuY29kZVN0YXRlVmVjdG9yRnJvbVVwZGF0ZSwgZW5jb2RlU3RhdGVWZWN0b3JGcm9tVXBkYXRlVjIsIGVxdWFsU25hcHNob3RzLCBmaW5kSW5kZXhTUywgZmluZFJvb3RUeXBlS2V5LCBnZXRJdGVtLCBnZXRTdGF0ZSwgZ2V0VHlwZUNoaWxkcmVuLCBpc0RlbGV0ZWQsIGlzUGFyZW50T2YsIGl0ZXJhdGVEZWxldGVkU3RydWN0cywgbG9nVHlwZSwgbG9nVXBkYXRlLCBsb2dVcGRhdGVWMiwgbWVyZ2VVcGRhdGVzLCBtZXJnZVVwZGF0ZXNWMiwgcGFyc2VVcGRhdGVNZXRhLCBwYXJzZVVwZGF0ZU1ldGFWMiwgcmVhZFVwZGF0ZSwgcmVhZFVwZGF0ZVYyLCByZWxhdGl2ZVBvc2l0aW9uVG9KU09OLCBzbmFwc2hvdCwgdHJhbnNhY3QsIHRyeUdjLCB0eXBlTGlzdFRvQXJyYXlTbmFwc2hvdCwgdHlwZU1hcEdldFNuYXBzaG90IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD15anMubWpzLm1hcFxuIiwiLyoqXG4gKiBVdGlsaXR5IGhlbHBlcnMgdG8gd29yayB3aXRoIHByb21pc2VzLlxuICpcbiAqIEBtb2R1bGUgcHJvbWlzZVxuICovXG5cbmltcG9ydCAqIGFzIHRpbWUgZnJvbSAnLi90aW1lLmpzJ1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAY2FsbGJhY2sgUHJvbWlzZVJlc29sdmVcbiAqIEBwYXJhbSB7VHxQcm9taXNlTGlrZTxUPn0gW3Jlc3VsdF1cbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFByb21pc2VSZXNvbHZlPFQ+LGZ1bmN0aW9uKEVycm9yKTp2b2lkKTphbnl9IGZcbiAqIEByZXR1cm4ge1Byb21pc2U8VD59XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSBmID0+IC8qKiBAdHlwZSB7UHJvbWlzZTxUPn0gKi8gKG5ldyBQcm9taXNlKGYpKVxuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24oKTp2b2lkLGZ1bmN0aW9uKEVycm9yKTp2b2lkKTp2b2lkfSBmXG4gKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlRW1wdHkgPSBmID0+IG5ldyBQcm9taXNlKGYpXG5cbi8qKlxuICogYFByb21pc2UuYWxsYCB3YWl0IGZvciBhbGwgcHJvbWlzZXMgaW4gdGhlIGFycmF5IHRvIHJlc29sdmUgYW5kIHJldHVybiB0aGUgcmVzdWx0XG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtBcnJheTxQcm9taXNlPFQ+Pn0gYXJycFxuICogQHJldHVybiB7UHJvbWlzZTxBcnJheTxUPj59XG4gKi9cbmV4cG9ydCBjb25zdCBhbGwgPSBhcnJwID0+IFByb21pc2UuYWxsKGFycnApXG5cbi8qKlxuICogQHBhcmFtIHtFcnJvcn0gW3JlYXNvbl1cbiAqIEByZXR1cm4ge1Byb21pc2U8bmV2ZXI+fVxuICovXG5leHBvcnQgY29uc3QgcmVqZWN0ID0gcmVhc29uID0+IFByb21pc2UucmVqZWN0KHJlYXNvbilcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfHZvaWR9IHJlc1xuICogQHJldHVybiB7UHJvbWlzZTxUfHZvaWQ+fVxuICovXG5leHBvcnQgY29uc3QgcmVzb2x2ZSA9IHJlcyA9PiBQcm9taXNlLnJlc29sdmUocmVzKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IHJlc1xuICogQHJldHVybiB7UHJvbWlzZTxUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlc29sdmVXaXRoID0gcmVzID0+IFByb21pc2UucmVzb2x2ZShyZXMpXG5cbi8qKlxuICogQHRvZG8gTmV4dCB2ZXJzaW9uLCByZW9yZGVyIHBhcmFtZXRlcnM6IGNoZWNrLCBbdGltZW91dCwgW2ludGVydmFsUmVzb2x1dGlvbl1dXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpib29sZWFufSBjaGVja1xuICogQHBhcmFtIHtudW1iZXJ9IFtpbnRlcnZhbFJlc29sdXRpb25dXG4gKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICovXG5leHBvcnQgY29uc3QgdW50aWwgPSAodGltZW91dCwgY2hlY2ssIGludGVydmFsUmVzb2x1dGlvbiA9IDEwKSA9PiBjcmVhdGUoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICBjb25zdCBzdGFydFRpbWUgPSB0aW1lLmdldFVuaXhUaW1lKClcbiAgY29uc3QgaGFzVGltZW91dCA9IHRpbWVvdXQgPiAwXG4gIGNvbnN0IHVudGlsSW50ZXJ2YWwgPSAoKSA9PiB7XG4gICAgaWYgKGNoZWNrKCkpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGUpXG4gICAgICByZXNvbHZlKClcbiAgICB9IGVsc2UgaWYgKGhhc1RpbWVvdXQpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAodGltZS5nZXRVbml4VGltZSgpIC0gc3RhcnRUaW1lID4gdGltZW91dCkge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSGFuZGxlKVxuICAgICAgICByZWplY3QobmV3IEVycm9yKCdUaW1lb3V0JykpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IGludGVydmFsSGFuZGxlID0gc2V0SW50ZXJ2YWwodW50aWxJbnRlcnZhbCwgaW50ZXJ2YWxSZXNvbHV0aW9uKVxufSlcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dFxuICogQHJldHVybiB7UHJvbWlzZTx1bmRlZmluZWQ+fVxuICovXG5leHBvcnQgY29uc3Qgd2FpdCA9IHRpbWVvdXQgPT4gY3JlYXRlKChyZXNvbHZlLCByZWplY3QpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCkpXG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIG9iamVjdCBpcyBhIHByb21pc2UgdXNpbmcgZHVja3R5cGluZy5cbiAqXG4gKiBQcm9taXNlcyBhcmUgb2Z0ZW4gcG9seWZpbGxlZCwgc28gaXQgbWFrZXMgc2Vuc2UgdG8gYWRkIHNvbWUgYWRkaXRpb25hbCBndWFyYW50ZWVzIGlmIHRoZSB1c2VyIG9mIHRoaXNcbiAqIGxpYnJhcnkgaGFzIHNvbWUgaW5zYW5lIGVudmlyb25tZW50IHdoZXJlIGdsb2JhbCBQcm9taXNlIG9iamVjdHMgYXJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIEBwYXJhbSB7YW55fSBwXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgaXNQcm9taXNlID0gcCA9PiBwIGluc3RhbmNlb2YgUHJvbWlzZSB8fCAocCAmJiBwLnRoZW4gJiYgcC5jYXRjaCAmJiBwLmZpbmFsbHkpXG4iLG51bGwsbnVsbCxudWxsLCJpbXBvcnR7bm90aGluZyBhcyB0fWZyb21cIi4uL2xpdC1odG1sLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBsPWw9Pm51bGwhPWw/bDp0O2V4cG9ydHtsIGFzIGlmRGVmaW5lZH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZi1kZWZpbmVkLmpzLm1hcFxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVGlueSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBoYW5kbGVyLlxuICpcbiAqIEltcGxlbWVudHMgZXhwb25lbnRpYWwgYmFja29mZiByZWNvbm5lY3RzLCBwaW5nL3BvbmcsIGFuZCBhIG5pY2UgZXZlbnQgc3lzdGVtIHVzaW5nIFtsaWIwL29ic2VydmFibGVdLlxuICpcbiAqIEBtb2R1bGUgd2Vic29ja2V0XG4gKi9cblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vb2JzZXJ2YWJsZS5qcydcbmltcG9ydCAqIGFzIHRpbWUgZnJvbSAnLi90aW1lLmpzJ1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuL21hdGguanMnXG5cbmNvbnN0IHJlY29ubmVjdFRpbWVvdXRCYXNlID0gMTIwMFxuY29uc3QgbWF4UmVjb25uZWN0VGltZW91dCA9IDI1MDBcbi8vIEB0b2RvIC0gdGhpcyBzaG91bGQgZGVwZW5kIG9uIGF3YXJlbmVzcy5vdXRkYXRlZFRpbWVcbmNvbnN0IG1lc3NhZ2VSZWNvbm5lY3RUaW1lb3V0ID0gMzAwMDBcblxuLyoqXG4gKiBAcGFyYW0ge1dlYnNvY2tldENsaWVudH0gd3NjbGllbnRcbiAqL1xuY29uc3Qgc2V0dXBXUyA9ICh3c2NsaWVudCkgPT4ge1xuICBpZiAod3NjbGllbnQuc2hvdWxkQ29ubmVjdCAmJiB3c2NsaWVudC53cyA9PT0gbnVsbCkge1xuICAgIGNvbnN0IHdlYnNvY2tldCA9IG5ldyBXZWJTb2NrZXQod3NjbGllbnQudXJsKVxuICAgIGNvbnN0IGJpbmFyeVR5cGUgPSB3c2NsaWVudC5iaW5hcnlUeXBlXG4gICAgLyoqXG4gICAgICogQHR5cGUge2FueX1cbiAgICAgKi9cbiAgICBsZXQgcGluZ1RpbWVvdXQgPSBudWxsXG4gICAgaWYgKGJpbmFyeVR5cGUpIHtcbiAgICAgIHdlYnNvY2tldC5iaW5hcnlUeXBlID0gYmluYXJ5VHlwZVxuICAgIH1cbiAgICB3c2NsaWVudC53cyA9IHdlYnNvY2tldFxuICAgIHdzY2xpZW50LmNvbm5lY3RpbmcgPSB0cnVlXG4gICAgd3NjbGllbnQuY29ubmVjdGVkID0gZmFsc2VcbiAgICB3ZWJzb2NrZXQub25tZXNzYWdlID0gZXZlbnQgPT4ge1xuICAgICAgd3NjbGllbnQubGFzdE1lc3NhZ2VSZWNlaXZlZCA9IHRpbWUuZ2V0VW5peFRpbWUoKVxuICAgICAgY29uc3QgZGF0YSA9IGV2ZW50LmRhdGFcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGRhdGEpIDogZGF0YVxuICAgICAgaWYgKG1lc3NhZ2UgJiYgbWVzc2FnZS50eXBlID09PSAncG9uZycpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHBpbmdUaW1lb3V0KVxuICAgICAgICBwaW5nVGltZW91dCA9IHNldFRpbWVvdXQoc2VuZFBpbmcsIG1lc3NhZ2VSZWNvbm5lY3RUaW1lb3V0IC8gMilcbiAgICAgIH1cbiAgICAgIHdzY2xpZW50LmVtaXQoJ21lc3NhZ2UnLCBbbWVzc2FnZSwgd3NjbGllbnRdKVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2FueX0gZXJyb3JcbiAgICAgKi9cbiAgICBjb25zdCBvbmNsb3NlID0gZXJyb3IgPT4ge1xuICAgICAgaWYgKHdzY2xpZW50LndzICE9PSBudWxsKSB7XG4gICAgICAgIHdzY2xpZW50LndzID0gbnVsbFxuICAgICAgICB3c2NsaWVudC5jb25uZWN0aW5nID0gZmFsc2VcbiAgICAgICAgaWYgKHdzY2xpZW50LmNvbm5lY3RlZCkge1xuICAgICAgICAgIHdzY2xpZW50LmNvbm5lY3RlZCA9IGZhbHNlXG4gICAgICAgICAgd3NjbGllbnQuZW1pdCgnZGlzY29ubmVjdCcsIFt7IHR5cGU6ICdkaXNjb25uZWN0JywgZXJyb3IgfSwgd3NjbGllbnRdKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdzY2xpZW50LnVuc3VjY2Vzc2Z1bFJlY29ubmVjdHMrK1xuICAgICAgICB9XG4gICAgICAgIC8vIFN0YXJ0IHdpdGggbm8gcmVjb25uZWN0IHRpbWVvdXQgYW5kIGluY3JlYXNlIHRpbWVvdXQgYnlcbiAgICAgICAgLy8gbG9nMTAod3NVbnN1Y2Nlc3NmdWxSZWNvbm5lY3RzKS5cbiAgICAgICAgLy8gVGhlIGlkZWEgaXMgdG8gaW5jcmVhc2UgcmVjb25uZWN0IHRpbWVvdXQgc2xvd2x5IGFuZCBoYXZlIG5vIHJlY29ubmVjdFxuICAgICAgICAvLyB0aW1lb3V0IGF0IHRoZSBiZWdpbm5pbmcgKGxvZygxKSA9IDApXG4gICAgICAgIHNldFRpbWVvdXQoc2V0dXBXUywgbWF0aC5taW4obWF0aC5sb2cxMCh3c2NsaWVudC51bnN1Y2Nlc3NmdWxSZWNvbm5lY3RzICsgMSkgKiByZWNvbm5lY3RUaW1lb3V0QmFzZSwgbWF4UmVjb25uZWN0VGltZW91dCksIHdzY2xpZW50KVxuICAgICAgfVxuICAgICAgY2xlYXJUaW1lb3V0KHBpbmdUaW1lb3V0KVxuICAgIH1cbiAgICBjb25zdCBzZW5kUGluZyA9ICgpID0+IHtcbiAgICAgIGlmICh3c2NsaWVudC53cyA9PT0gd2Vic29ja2V0KSB7XG4gICAgICAgIHdzY2xpZW50LnNlbmQoe1xuICAgICAgICAgIHR5cGU6ICdwaW5nJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICB3ZWJzb2NrZXQub25jbG9zZSA9ICgpID0+IG9uY2xvc2UobnVsbClcbiAgICB3ZWJzb2NrZXQub25lcnJvciA9IGVycm9yID0+IG9uY2xvc2UoZXJyb3IpXG4gICAgd2Vic29ja2V0Lm9ub3BlbiA9ICgpID0+IHtcbiAgICAgIHdzY2xpZW50Lmxhc3RNZXNzYWdlUmVjZWl2ZWQgPSB0aW1lLmdldFVuaXhUaW1lKClcbiAgICAgIHdzY2xpZW50LmNvbm5lY3RpbmcgPSBmYWxzZVxuICAgICAgd3NjbGllbnQuY29ubmVjdGVkID0gdHJ1ZVxuICAgICAgd3NjbGllbnQudW5zdWNjZXNzZnVsUmVjb25uZWN0cyA9IDBcbiAgICAgIHdzY2xpZW50LmVtaXQoJ2Nvbm5lY3QnLCBbeyB0eXBlOiAnY29ubmVjdCcgfSwgd3NjbGllbnRdKVxuICAgICAgLy8gc2V0IHBpbmdcbiAgICAgIHBpbmdUaW1lb3V0ID0gc2V0VGltZW91dChzZW5kUGluZywgbWVzc2FnZVJlY29ubmVjdFRpbWVvdXQgLyAyKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBleHRlbmRzIE9ic2VydmFibGU8c3RyaW5nPlxuICovXG5leHBvcnQgY2xhc3MgV2Vic29ja2V0Q2xpZW50IGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0c11cbiAgICogQHBhcmFtIHsnYXJyYXlidWZmZXInIHwgJ2Jsb2InIHwgbnVsbH0gW29wdHMuYmluYXJ5VHlwZV0gU2V0IGB3cy5iaW5hcnlUeXBlYFxuICAgKi9cbiAgY29uc3RydWN0b3IgKHVybCwgeyBiaW5hcnlUeXBlIH0gPSB7fSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnVybCA9IHVybFxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtXZWJTb2NrZXQ/fVxuICAgICAqL1xuICAgIHRoaXMud3MgPSBudWxsXG4gICAgdGhpcy5iaW5hcnlUeXBlID0gYmluYXJ5VHlwZSB8fCBudWxsXG4gICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZVxuICAgIHRoaXMuY29ubmVjdGluZyA9IGZhbHNlXG4gICAgdGhpcy51bnN1Y2Nlc3NmdWxSZWNvbm5lY3RzID0gMFxuICAgIHRoaXMubGFzdE1lc3NhZ2VSZWNlaXZlZCA9IDBcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIGNvbm5lY3QgdG8gb3RoZXIgcGVlcnMgb3Igbm90XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zaG91bGRDb25uZWN0ID0gdHJ1ZVxuICAgIHRoaXMuX2NoZWNrSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5jb25uZWN0ZWQgJiYgbWVzc2FnZVJlY29ubmVjdFRpbWVvdXQgPCB0aW1lLmdldFVuaXhUaW1lKCkgLSB0aGlzLmxhc3RNZXNzYWdlUmVjZWl2ZWQpIHtcbiAgICAgICAgLy8gbm8gbWVzc2FnZSByZWNlaXZlZCBpbiBhIGxvbmcgdGltZSAtIG5vdCBldmVuIHlvdXIgb3duIGF3YXJlbmVzc1xuICAgICAgICAvLyB1cGRhdGVzICh3aGljaCBhcmUgdXBkYXRlZCBldmVyeSAxNSBzZWNvbmRzKVxuICAgICAgICAvKiogQHR5cGUge1dlYlNvY2tldH0gKi8gKHRoaXMud3MpLmNsb3NlKClcbiAgICAgIH1cbiAgICB9LCBtZXNzYWdlUmVjb25uZWN0VGltZW91dCAvIDIpXG4gICAgc2V0dXBXUyh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBtZXNzYWdlXG4gICAqL1xuICBzZW5kIChtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMud3MpIHtcbiAgICAgIHRoaXMud3Muc2VuZChKU09OLnN0cmluZ2lmeShtZXNzYWdlKSlcbiAgICB9XG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2NoZWNrSW50ZXJ2YWwpXG4gICAgdGhpcy5kaXNjb25uZWN0KClcbiAgICBzdXBlci5kZXN0cm95KClcbiAgfVxuXG4gIGRpc2Nvbm5lY3QgKCkge1xuICAgIHRoaXMuc2hvdWxkQ29ubmVjdCA9IGZhbHNlXG4gICAgaWYgKHRoaXMud3MgIT09IG51bGwpIHtcbiAgICAgIHRoaXMud3MuY2xvc2UoKVxuICAgIH1cbiAgfVxuXG4gIGNvbm5lY3QgKCkge1xuICAgIHRoaXMuc2hvdWxkQ29ubmVjdCA9IHRydWVcbiAgICBpZiAoIXRoaXMuY29ubmVjdGVkICYmIHRoaXMud3MgPT09IG51bGwpIHtcbiAgICAgIHNldHVwV1ModGhpcylcbiAgICB9XG4gIH1cbn1cbiIsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGxdLCJuYW1lcyI6WyJhcHBIZWlnaHQiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJ3aW5kb3ciLCJpbm5lckhlaWdodCIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImQiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJyZWNlaXZlciIsInN0YXRlIiwia2luZCIsImYiLCJUeXBlRXJyb3IiLCJoYXMiLCJjYWxsIiwidmFsdWUiLCJnZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0Iiwic2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInQiLCJTaGFkb3dSb290IiwiU2hhZHlDU1MiLCJuYXRpdmVTaGFkb3ciLCJEb2N1bWVudCIsInByb3RvdHlwZSIsIkNTU1N0eWxlU2hlZXQiLCJlIiwiU3ltYm9sIiwibiIsIldlYWtNYXAiLCJzIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwiXyRjc3NSZXN1bHQkIiwiRXJyb3IiLCJjc3NUZXh0Iiwic3R5bGVTaGVldCIsIm8iLCJyZXBsYWNlU3luYyIsInRvU3RyaW5nIiwicmVkdWNlIiwiUyIsImNzc1J1bGVzIiwidHJ1c3RlZFR5cGVzIiwiZW1wdHlTY3JpcHQiLCJoIiwicmVhY3RpdmVFbGVtZW50UG9seWZpbGxTdXBwb3J0IiwidG9BdHRyaWJ1dGUiLCJCb29sZWFuIiwiQXJyYXkiLCJKU09OIiwic3RyaW5naWZ5IiwiZnJvbUF0dHJpYnV0ZSIsIk51bWJlciIsInBhcnNlIiwibCIsImF0dHJpYnV0ZSIsInR5cGUiLCJTdHJpbmciLCJjb252ZXJ0ZXIiLCJyZWZsZWN0IiwiaGFzQ2hhbmdlZCIsImEiLCJIVE1MRWxlbWVudCIsInN1cGVyIiwiXyRFaSIsIk1hcCIsImlzVXBkYXRlUGVuZGluZyIsImhhc1VwZGF0ZWQiLCJfJEVsIiwidSIsInN0YXRpYyIsInB1c2giLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJmaW5hbGl6ZSIsImVsZW1lbnRQcm9wZXJ0aWVzIiwiZm9yRWFjaCIsIl8kRXAiLCJfJEV2Iiwibm9BY2Nlc3NvciIsImhhc093blByb3BlcnR5IiwiZ2V0UHJvcGVydHlEZXNjcmlwdG9yIiwicmVxdWVzdFVwZGF0ZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJmaW5hbGl6ZWQiLCJnZXRQcm90b3R5cGVPZiIsInByb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiY3JlYXRlUHJvcGVydHkiLCJlbGVtZW50U3R5bGVzIiwiZmluYWxpemVTdHlsZXMiLCJzdHlsZXMiLCJpc0FycmF5IiwiU2V0IiwiZmxhdCIsInJldmVyc2UiLCJ1bnNoaWZ0IiwidG9Mb3dlckNhc2UiLCJfJEVfIiwiUHJvbWlzZSIsImVuYWJsZVVwZGF0aW5nIiwiXyRBTCIsIl8kRWciLCJhZGRDb250cm9sbGVyIiwiXyRFUyIsInJlbmRlclJvb3QiLCJpc0Nvbm5lY3RlZCIsImhvc3RDb25uZWN0ZWQiLCJyZW1vdmVDb250cm9sbGVyIiwic3BsaWNlIiwiaW5kZXhPZiIsImNyZWF0ZVJlbmRlclJvb3QiLCJzaGFkb3dSb290IiwiYXR0YWNoU2hhZG93Iiwic2hhZG93Um9vdE9wdGlvbnMiLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJtYXAiLCJjcmVhdGVFbGVtZW50IiwibGl0Tm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImhvc3REaXNjb25uZWN0ZWQiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJfJEFLIiwiXyRFTyIsInJlbW92ZUF0dHJpYnV0ZSIsImdldFByb3BlcnR5T3B0aW9ucyIsIl8kRUMiLCJfJEVqIiwiYXN5bmMiLCJyZWplY3QiLCJzY2hlZHVsZVVwZGF0ZSIsInBlcmZvcm1VcGRhdGUiLCJzaG91bGRVcGRhdGUiLCJ3aWxsVXBkYXRlIiwiaG9zdFVwZGF0ZSIsInVwZGF0ZSIsIl8kRWsiLCJfJEFFIiwiaG9zdFVwZGF0ZWQiLCJmaXJzdFVwZGF0ZWQiLCJ1cGRhdGVkIiwidXBkYXRlQ29tcGxldGUiLCJnZXRVcGRhdGVDb21wbGV0ZSIsIm1vZGUiLCJSZWFjdGl2ZUVsZW1lbnQiLCJnbG9iYWxUaGlzIiwicmVhY3RpdmVFbGVtZW50VmVyc2lvbnMiLCJjcmVhdGVQb2xpY3kiLCJjcmVhdGVIVE1MIiwiTWF0aCIsInJhbmRvbSIsInNsaWNlIiwiY3JlYXRlQ29tbWVudCIsIml0ZXJhdG9yIiwidiIsIl8iLCJtIiwiZyIsInAiLCJfJGxpdFR5cGUkIiwic3RyaW5ncyIsInZhbHVlcyIsIiQiLCJ5IiwiYiIsImZvciIsInciLCJUIiwiQSIsImNyZWF0ZVRyZWVXYWxrZXIiLCJDIiwibGFzdEluZGV4IiwiZXhlYyIsInRlc3QiLCJSZWdFeHAiLCJzdGFydHNXaXRoIiwiRSIsInBhcnRzIiwiZWwiLCJjdXJyZW50Tm9kZSIsImNvbnRlbnQiLCJmaXJzdENoaWxkIiwicmVtb3ZlIiwiYXBwZW5kIiwiY2hpbGROb2RlcyIsIm5leHROb2RlIiwibm9kZVR5cGUiLCJoYXNBdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlTmFtZXMiLCJlbmRzV2l0aCIsImdldEF0dHJpYnV0ZSIsInNwbGl0IiwiaW5kZXgiLCJuYW1lIiwiY3RvciIsIk0iLCJIIiwiSSIsInRhZ05hbWUiLCJkYXRhIiwiaW5uZXJIVE1MIiwiUCIsIl8kQ2wiLCJfJEN1IiwiXyRsaXREaXJlY3RpdmUkIiwiXyRBTyIsIl8kQVQiLCJfJEFTIiwiViIsIl8kQU4iLCJfJEFEIiwiXyRBTSIsInBhcmVudE5vZGUiLCJfJEFVIiwiY3JlYXRpb25TY29wZSIsImltcG9ydE5vZGUiLCJOIiwibmV4dFNpYmxpbmciLCJMIiwiXyRBSSIsIl8kQUgiLCJfJEFBIiwiXyRBQiIsIm9wdGlvbnMiLCJfJENnIiwic3RhcnROb2RlIiwiZW5kTm9kZSIsIl8kQVIiLCJrIiwiaW5zZXJ0QmVmb3JlIiwiY3JlYXRlVGV4dE5vZGUiLCJfJEFDIiwiXyRBUCIsInNldENvbm5lY3RlZCIsImVsZW1lbnQiLCJmaWxsIiwiY2FwdHVyZSIsIm9uY2UiLCJwYXNzaXZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhbmRsZUV2ZW50IiwiaG9zdCIsIlIiLCJqIiwiRCIsIkYiLCJPIiwiVyIsIkIiLCJaIiwieiIsImxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQiLCJsaXRIdG1sVmVyc2lvbnMiLCJyZW5kZXJPcHRpb25zIiwiXyREbyIsInJlbmRlckJlZm9yZSIsInJlbmRlciIsIl8kbGl0UGFydCQiLCJfJGxpdEVsZW1lbnQkIiwibGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0IiwiTGl0RWxlbWVudCIsImxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQiLCJsaXRFbGVtZW50VmVyc2lvbnMiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImVsZW1lbnRzIiwiZmluaXNoZXIiLCJkZXNjcmlwdG9yIiwicGxhY2VtZW50Iiwib3JpZ2luYWxLZXkiLCJpbml0aWFsaXplciIsImFzc2lnbiIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MU2xvdEVsZW1lbnQiLCJhc3NpZ25lZEVsZW1lbnRzIiwiXyRDdCIsIl8kQ2kiLCJfJEFRIiwiZHQiLCJrZXlzIiwidXQiLCJ4IiwiYWRkX3AiLCJhZGRfYyIsInN1Yl9wIiwibXVsX2MiLCJkaXZfcCIsImRpdl9jIiwibWF4X3AiLCJtYXgiLCJtaW5fcCIsIm1pbiIsImNsYW1wX3AiLCJlcV9wIiwiaXNfcHJpbWFyeV9kb3duIiwiZXYiLCJpc1ByaW1hcnkiLCJwb2ludGVyVHlwZSIsInByZXNzdXJlIiwiaXNfbW91c2VfZG93biIsImJ1dHRvbnMiLCJzdG9wX2V2IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJ3aW5kb3dfZXYiLCJkZXRhaWwiLCJDdXN0b21FdmVudCIsImNhbmNlbGFibGUiLCJidWJibGVzIiwiY29tcG9zZWQiLCJnZXRJbWFnZSIsImRhdGFUcmFuc2ZlciIsImRhdGFJdGVtcyIsIml0ZW1zIiwicmVzb2x2ZSIsImNvbnNvbGUiLCJsb2ciLCJnZXRBc0ZpbGUiLCJnZXRBc1N0cmluZyIsImV4dHJhY3RVUkxGcm9tSFRNTCIsImh0bWwiLCJ1cmwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJzcmMiLCJnYW1lX2V2ZW50IiwiZmlyc3QiLCJpdGVyIiwibmV4dCIsIml0ZW0iLCJyZXBsYWNlIiwiY3QiLCJhZGQiLCJkZWxldGUiLCJpbmNsdWRlcyIsInJlbW92ZVByb3BlcnR5IiwiQ2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJzZWxlY3Rpb24iLCJjYWxsb3V0cyIsIl9DYW52YXNfc2JveCIsIl9DYW52YXNfbW91c2VfbG9jIiwiX0NhbnZhc19kcmFnX2RlcHRoIiwiX0NhbnZhc19kcmFnX2VudGVyIiwiX2EiLCJfQ2FudmFzX2RyYWdfb3ZlciIsImNlbGwiLCJfQ2FudmFzX3NjcmVlbl90b19zdmciLCJvY2N1cGllZF9jZWxsIiwiX2Ryb3BfaGludCIsImhvdmVyaW5nIiwiX0NhbnZhc19kcmFnX2xlYXZlIiwidW5kZWZpbmVkIiwiX0NhbnZhc19iZ19kcmFnX292ZXIiLCJfQ2FudmFzX2JnX2Ryb3AiLCJpbWciLCJkaXNwYXRjaEV2ZW50IiwiX0NhbnZhc19kcm9wIiwibG9jIiwiZGltIiwiX0NhbnZhc19tb3VzZV9mb2N1cyIsIl9DYW52YXNfZm9jdXMiLCJfQ2FudmFzX3RvdWNoX2ZvY3VzIiwiaXNfcHJpbWFyeV90b3VjaCIsImlkIiwic2hpZnRLZXkiLCJjdHJsS2V5IiwiZmlsdGVyIiwiX0NhbnZhc19kcmFnX29mZnNldCIsIl9DYW52YXNfc2VsZWN0aW9uX3RyYW5zZm9ybSIsIm1vdmUiLCJyZXNpemUiLCJ2aWV3cG9ydCIsImNvb3JkVG9Mb2NhbCIsImNsaWVudFgiLCJjbGllbnRZIiwiX0NhbnZhc19rZXlkb3duIiwia2V5Q29kZSIsImlkcyIsImZyb20iLCJib2FyZCIsIkFycm93VXAiLCJBcnJvd0Rvd24iLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0IiwidG9rZW5zIiwiX0NhbnZhc19pbnN0YW5jZXMiLCJfQ2FudmFzX2RpbV9nZXQiLCJzYmJveCIsInNlbGVjdGVkIiwic2l6ZSIsIl9DYW52YXNfc2JveF9zdGFydCIsIl9DYW52YXNfc2JveF9tb3ZlIiwiX0NhbnZhc19zYm94X3N0b3AiLCJQQURESU5HIiwic3R5bGVNYXAiLCJiZyIsInN2ZyIsInJlcGVhdCIsInRpZCIsIkxJTkVfV0lEVEgiLCJtYXJrX2xvYWRlZCIsImJib3giLCJzdGFydCIsImVuZCIsInByZXZlbnRfc2FmYXJpX3Njcm9sbCIsInNlbGVjdGlvbl9kcmFnX3N0YXJ0Iiwic2VsZWN0aW9uX2RyYWciLCJzZWxlY3Rpb25fZHJhZ19lbmQiLCJwaW4iLCJtb3VzZSIsImFicyIsInBvaW50IiwiQ0FMTE9VVF9ESU0iLCJzaWduIiwiUk9UQVRFX1NJWkUiLCJzdmdfY29vcmQiLCJzZXRQb2ludGVyQ2FwdHVyZSIsInBvaW50ZXJJZCIsImdyaWRfbG9jIiwiY2xhc3NlcyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwibmVhcmVzdF9jb3JuZXIiLCJjZW50ZXIiLCJyZWwiLCJkZWciLCJhdGFuMiIsIlBJIiwicm91bmQiLCJsb2NhbCIsImFic19wIiwiYm94Iiwic2VsIiwiaW50ZXJzZWN0IiwiX0NhbnZhc19zZWxlY3Rpb25fYmJveCIsInRvSlNPTiIsImNzcyIsInByb3BlcnR5IiwicXVlcnkiLCJldmVudE9wdGlvbnMiLCJjdXN0b21FbGVtZW50IiwiQnV5TWVBQ29mZmVlIiwiX3N0YXRlIiwiX2xvYWRlZCIsIl9idXkiLCJfQnV5TWVBQ29mZmVlX2Nsb3NlIiwiX0J1eU1lQUNvZmZlZV9pZnJhbWVfbG9hZCIsImNyZWF0ZSIsImNvcHkiLCJzZXRJZlVuZGVmaW5lZCIsImNyZWF0ZVQiLCJsYXN0IiwiYXJyIiwiYXBwZW5kVG8iLCJkZXN0IiwiT2JzZXJ2YWJsZSIsIl9vYnNlcnZlcnMiLCJtYXAuY3JlYXRlIiwib24iLCJtYXAuc2V0SWZVbmRlZmluZWQiLCJzZXQuY3JlYXRlIiwiX2YiLCJhcmdzIiwib2ZmIiwib2JzZXJ2ZXJzIiwiZW1pdCIsImFycmF5LmZyb20iLCJkZXN0cm95IiwiZmxvb3IiLCJsb2cxMCIsImlzTmVnYXRpdmVaZXJvIiwidHJpbUxlZnRSZWdleCIsImZyb21DYW1lbENhc2VSZWdleCIsImZyb21DYW1lbENhc2UiLCJzZXBhcmF0b3IiLCJ0cmltTGVmdCIsIm1hdGNoIiwiVGV4dEVuY29kZXIiLCJ1dGY4VGV4dERlY29kZXIiLCJUZXh0RGVjb2RlciIsImZhdGFsIiwiaWdub3JlQk9NIiwiZGVjb2RlIiwiVWludDhBcnJheSIsInVuZGVmaW5lZFRvTnVsbCIsIl9sb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwibmV3VmFsdWUiLCJnZXRJdGVtIiwidXNlUG9seWZpbGwiLCJsb2NhbFN0b3JhZ2UiLCJ2YXJTdG9yYWdlIiwiaXNOb2RlIiwicHJvY2VzcyIsInJlbGVhc2UiLCJwYXJhbXMiLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSIsImhhc1BhcmFtIiwicGFyZ3MiLCJhcmd2IiwiY3VyclBhcmFtTmFtZSIsInBhcmciLCJsb2NhdGlvbiIsInNlYXJjaCIsImt2Iiwic3RyaW5nLmZyb21DYW1lbENhc2UiLCJjb21wdXRlUGFyYW1zIiwiY29uZGl0aW9ucy51bmRlZmluZWRUb051bGwiLCJlbnYiLCJ0b1VwcGVyQ2FzZSIsInN0b3JhZ2UudmFyU3RvcmFnZSIsImdldFZhcmlhYmxlIiwiRGVjb2RlciIsInVpbnQ4QXJyYXkiLCJwb3MiLCJjcmVhdGVEZWNvZGVyIiwicmVhZFZhclVpbnQ4QXJyYXkiLCJkZWNvZGVyIiwibGVuIiwidmlldyIsImJ1ZmZlci5jcmVhdGVVaW50OEFycmF5Vmlld0Zyb21BcnJheUJ1ZmZlciIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJyZWFkVWludDhBcnJheSIsInJlYWRWYXJVaW50IiwicmVhZFVpbnQ4IiwibnVtIiwicmVhZFZhckludCIsInJlYWRWYXJTdHJpbmciLCJyZW1haW5pbmdMZW4iLCJlbmNvZGVkU3RyaW5nIiwiZnJvbUNvZGVQb2ludCIsIm5leHRMZW4iLCJieXRlcyIsInN1YmFycmF5IiwiYXBwbHkiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlc2NhcGUiLCJyZWFkRnJvbURhdGFWaWV3IiwiZHYiLCJEYXRhVmlldyIsInJlYWRBbnlMb29rdXBUYWJsZSIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0IiwiZ2V0QmlnSW50NjQiLCJvYmoiLCJyZWFkQW55IiwiUmxlRGVjb2RlciIsInJlYWRlciIsImNvdW50IiwicmVhZCIsIlVpbnRPcHRSbGVEZWNvZGVyIiwiaXNOZWdhdGl2ZSIsIm1hdGguaXNOZWdhdGl2ZVplcm8iLCJJbnREaWZmT3B0UmxlRGVjb2RlciIsImRpZmYiLCJoYXNDb3VudCIsIlN0cmluZ0RlY29kZXIiLCJzdHIiLCJzcG9zIiwicmVzIiwiY3JlYXRlVWludDhBcnJheVZpZXdGcm9tQXJyYXlCdWZmZXIiLCJjb3B5VWludDhBcnJheSIsIm5ld0J1ZiIsImJ5dGVMZW5ndGgiLCJpc0ludGVnZXIiLCJpc0Zpbml0ZSIsIm1hdGguZmxvb3IiLCJFbmNvZGVyIiwiY3BvcyIsImNidWYiLCJidWZzIiwiY3JlYXRlRW5jb2RlciIsInRvVWludDhBcnJheSIsImVuY29kZXIiLCJ1aW50OGFyciIsImN1clBvcyIsIndyaXRlIiwiYnVmZmVyTGVuIiwid3JpdGVVaW50OCIsIndyaXRlVmFyVWludCIsIndyaXRlVmFySW50Iiwid3JpdGVWYXJTdHJpbmciLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImNvZGVQb2ludEF0Iiwid3JpdGVVaW50OEFycmF5IiwibGVmdENvcHlMZW4iLCJtYXRoLm1pbiIsInJpZ2h0Q29weUxlbiIsIm1hdGgubWF4Iiwid3JpdGVWYXJVaW50OEFycmF5Iiwid3JpdGVPbkRhdGFWaWV3IiwidmVyaWZ5TGVuIiwiZHZpZXciLCJmbG9hdFRlc3RCZWQiLCJBcnJheUJ1ZmZlciIsIndyaXRlQW55IiwibnVtYmVyLmlzSW50ZWdlciIsIm1hdGguYWJzIiwic2V0RmxvYXQzMiIsIndyaXRlRmxvYXQzMiIsInNldEZsb2F0NjQiLCJ3cml0ZUZsb2F0NjQiLCJzZXRCaWdJbnQ2NCIsIndyaXRlQmlnSW50NjQiLCJSbGVFbmNvZGVyIiwid3JpdGVyIiwiZmx1c2hVaW50T3B0UmxlRW5jb2RlciIsIlVpbnRPcHRSbGVFbmNvZGVyIiwiZmx1c2hJbnREaWZmT3B0UmxlRW5jb2RlciIsImVuY29kZWREaWZmIiwiSW50RGlmZk9wdFJsZUVuY29kZXIiLCJTdHJpbmdFbmNvZGVyIiwic2FyciIsImxlbnNFIiwic3RyaW5nIiwiam9pbiIsImlzb0NyeXB0byIsImNyeXB0byIsImNyeXB0b1JhbmRvbUJ1ZmZlciIsImJ1ZiIsImdldFJhbmRvbVZhbHVlcyIsImNlaWwiLCJ1aW50MzIiLCJVaW50MzJBcnJheSIsInV1aWR2NFRlbXBsYXRlIiwidXVpZHY0IiwiZ2V0VW5peFRpbWUiLCJEYXRlIiwibm93IiwibWV0aG9kVW5pbXBsZW1lbnRlZCIsInVuZXhwZWN0ZWRDYXNlIiwiZXF1YWxGbGF0IiwiZXZlcnkiLCJ2YWwiLCJoYXNQcm9wZXJ0eSIsImNhbGxBbGwiLCJmcyIsIlBhaXIiLCJsZWZ0IiwicmlnaHQiLCJkb2MiLCJtYXBUb1N0eWxlU3RyaW5nIiwibWFwLm1hcCIsIkVMRU1FTlRfTk9ERSIsIlRFWFRfTk9ERSIsIkNEQVRBX1NFQ1RJT05fTk9ERSIsIkNPTU1FTlRfTk9ERSIsIkRPQ1VNRU5UX05PREUiLCJET0NVTUVOVF9UWVBFX05PREUiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwiQk9MRCIsInN5bWJvbC5jcmVhdGUiLCJVTkJPTEQiLCJCTFVFIiwiR1JFWSIsIkdSRUVOIiwiUkVEIiwiUFVSUExFIiwiT1JBTkdFIiwiVU5DT0xPUiIsIl9icm93c2VyU3R5bGVNYXAiLCJwYWlyLmNyZWF0ZSIsIl9ub2RlU3R5bGVNYXAiLCJjb21wdXRlTG9nZ2luZ0FyZ3MiLCJlbnYuaXNOb2RlIiwic3RyQnVpbGRlciIsImxvZ0FyZ3MiLCJhcmciLCJjdXJyZW50U3R5bGUiLCJkb20ubWFwVG9TdHlsZVN0cmluZyIsInZjb25zb2xlcyIsImNyZWF0ZUl0ZXJhdG9yIiwiaXRlcmF0b3JNYXAiLCJmbWFwIiwiZG9uZSIsIkRlbGV0ZUl0ZW0iLCJjbG9jayIsIkRlbGV0ZVNldCIsImNsaWVudHMiLCJpdGVyYXRlRGVsZXRlZFN0cnVjdHMiLCJ0cmFuc2FjdGlvbiIsImRzIiwiZGVsZXRlcyIsImNsaWVudGlkIiwic3RydWN0cyIsInN0b3JlIiwiZGVsIiwiaXRlcmF0ZVN0cnVjdHMiLCJpc0RlbGV0ZWQiLCJkaXMiLCJjbGllbnQiLCJtaWRpbmRleCIsIm1pZCIsIm1pZGNsb2NrIiwiZmluZEluZGV4RFMiLCJzb3J0QW5kTWVyZ2VEZWxldGVTZXQiLCJkZWxzIiwic29ydCIsImFkZFRvRGVsZXRlU2V0IiwiY3JlYXRlRGVsZXRlU2V0Iiwid3JpdGVEZWxldGVTZXQiLCJlbmNvZGluZy53cml0ZVZhclVpbnQiLCJyZXN0RW5jb2RlciIsImRzaXRlbXMiLCJyZXNldERzQ3VyVmFsIiwid3JpdGVEc0Nsb2NrIiwid3JpdGVEc0xlbiIsInJlYWREZWxldGVTZXQiLCJudW1DbGllbnRzIiwiZGVjb2RpbmcucmVhZFZhclVpbnQiLCJyZXN0RGVjb2RlciIsIm51bWJlck9mRGVsZXRlcyIsImRzRmllbGQiLCJyZWFkRHNDbG9jayIsInJlYWREc0xlbiIsInJlYWRBbmRBcHBseURlbGV0ZVNldCIsInVuYXBwbGllZERTIiwiZ2V0U3RhdGUiLCJjbG9ja0VuZCIsImZpbmRJbmRleFNTIiwic3RydWN0IiwiZGVsZXRlZCIsInNwbGl0SXRlbSIsIlVwZGF0ZUVuY29kZXJWMiIsImdlbmVyYXRlTmV3Q2xpZW50SWQiLCJyYW5kb20udWludDMyIiwiRG9jIiwiZ3VpZCIsInJhbmRvbS51dWlkdjQiLCJjb2xsZWN0aW9uaWQiLCJnYyIsImdjRmlsdGVyIiwibWV0YSIsImF1dG9Mb2FkIiwic2hvdWxkTG9hZCIsImNsaWVudElEIiwic2hhcmUiLCJTdHJ1Y3RTdG9yZSIsIl90cmFuc2FjdGlvbiIsIl90cmFuc2FjdGlvbkNsZWFudXBzIiwic3ViZG9jcyIsIl9pdGVtIiwiaXNMb2FkZWQiLCJ3aGVuTG9hZGVkIiwicHJvbWlzZS5jcmVhdGUiLCJsb2FkIiwidHJhbnNhY3QiLCJzdWJkb2NzTG9hZGVkIiwiZ2V0U3ViZG9jcyIsImdldFN1YmRvY0d1aWRzIiwib3JpZ2luIiwiVHlwZUNvbnN0cnVjdG9yIiwiQWJzdHJhY3RUeXBlIiwiX2ludGVncmF0ZSIsIkNvbnN0ciIsIl9tYXAiLCJwYXJlbnQiLCJfc3RhcnQiLCJfbGVuZ3RoIiwiZ2V0QXJyYXkiLCJZQXJyYXkiLCJnZXRUZXh0IiwiWVRleHQiLCJnZXRNYXAiLCJZTWFwIiwiZ2V0WG1sRnJhZ21lbnQiLCJZWG1sRnJhZ21lbnQiLCJzdWJkb2MiLCJvcHRzIiwic3ViZG9jc0FkZGVkIiwic3ViZG9jc1JlbW92ZWQiLCJldmVudE5hbWUiLCJEU0RlY29kZXJWMSIsIlVwZGF0ZURlY29kZXJWMSIsInJlYWRMZWZ0SUQiLCJjcmVhdGVJRCIsInJlYWRSaWdodElEIiwicmVhZENsaWVudCIsInJlYWRJbmZvIiwiZGVjb2RpbmcucmVhZFVpbnQ4IiwicmVhZFN0cmluZyIsImRlY29kaW5nLnJlYWRWYXJTdHJpbmciLCJyZWFkUGFyZW50SW5mbyIsInJlYWRUeXBlUmVmIiwicmVhZExlbiIsImRlY29kaW5nLnJlYWRBbnkiLCJyZWFkQnVmIiwiYnVmZmVyLmNvcHlVaW50OEFycmF5IiwiZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkiLCJyZWFkSlNPTiIsInJlYWRLZXkiLCJVcGRhdGVEZWNvZGVyVjIiLCJkc0N1cnJWYWwiLCJrZXlDbG9ja0RlY29kZXIiLCJkZWNvZGluZy5JbnREaWZmT3B0UmxlRGVjb2RlciIsImNsaWVudERlY29kZXIiLCJkZWNvZGluZy5VaW50T3B0UmxlRGVjb2RlciIsImxlZnRDbG9ja0RlY29kZXIiLCJyaWdodENsb2NrRGVjb2RlciIsImluZm9EZWNvZGVyIiwiZGVjb2RpbmcuUmxlRGVjb2RlciIsInN0cmluZ0RlY29kZXIiLCJkZWNvZGluZy5TdHJpbmdEZWNvZGVyIiwicGFyZW50SW5mb0RlY29kZXIiLCJ0eXBlUmVmRGVjb2RlciIsImxlbkRlY29kZXIiLCJJRCIsImtleUNsb2NrIiwiVXBkYXRlRW5jb2RlclYxIiwiZW5jb2RpbmcuY3JlYXRlRW5jb2RlciIsImVuY29kaW5nLnRvVWludDhBcnJheSIsIndyaXRlTGVmdElEIiwid3JpdGVSaWdodElEIiwid3JpdGVDbGllbnQiLCJ3cml0ZUluZm8iLCJpbmZvIiwiZW5jb2Rpbmcud3JpdGVVaW50OCIsIndyaXRlU3RyaW5nIiwiZW5jb2Rpbmcud3JpdGVWYXJTdHJpbmciLCJ3cml0ZVBhcmVudEluZm8iLCJpc1lLZXkiLCJ3cml0ZVR5cGVSZWYiLCJ3cml0ZUxlbiIsImFueSIsImVuY29kaW5nLndyaXRlQW55Iiwid3JpdGVCdWYiLCJlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkiLCJ3cml0ZUpTT04iLCJlbWJlZCIsIndyaXRlS2V5IiwiZXJyb3IudW5leHBlY3RlZENhc2UiLCJrZXlNYXAiLCJrZXlDbG9ja0VuY29kZXIiLCJlbmNvZGluZy5JbnREaWZmT3B0UmxlRW5jb2RlciIsImNsaWVudEVuY29kZXIiLCJlbmNvZGluZy5VaW50T3B0UmxlRW5jb2RlciIsImxlZnRDbG9ja0VuY29kZXIiLCJyaWdodENsb2NrRW5jb2RlciIsImluZm9FbmNvZGVyIiwiZW5jb2RpbmcuUmxlRW5jb2RlciIsInN0cmluZ0VuY29kZXIiLCJlbmNvZGluZy5TdHJpbmdFbmNvZGVyIiwicGFyZW50SW5mb0VuY29kZXIiLCJ0eXBlUmVmRW5jb2RlciIsImxlbkVuY29kZXIiLCJlbmNvZGluZy53cml0ZVVpbnQ4QXJyYXkiLCJ3cml0ZUNsaWVudHNTdHJ1Y3RzIiwiX3NtIiwic20iLCJnZXRTdGF0ZVZlY3RvciIsImVudHJpZXMiLCJzdGFydE5ld1N0cnVjdHMiLCJmaXJzdFN0cnVjdCIsIndyaXRlU3RydWN0cyIsInJlYWRVcGRhdGVWMiIsInlkb2MiLCJ0cmFuc2FjdGlvbk9yaWdpbiIsInN0cnVjdERlY29kZXIiLCJyZXRyeSIsInNzIiwiY2xpZW50UmVmcyIsIm51bU9mU3RhdGVVcGRhdGVzIiwibnVtYmVyT2ZTdHJ1Y3RzIiwicmVmcyIsIkdDIiwiU2tpcCIsImNhbnRDb3B5UGFyZW50SW5mbyIsIkl0ZW0iLCJyZWFkSXRlbUNvbnRlbnQiLCJyZWFkQ2xpZW50c1N0cnVjdFJlZnMiLCJyZXN0U3RydWN0cyIsImNsaWVudHNTdHJ1Y3RSZWZzIiwic3RhY2siLCJjbGllbnRzU3RydWN0UmVmc0lkcyIsImdldE5leHRTdHJ1Y3RUYXJnZXQiLCJuZXh0U3RydWN0c1RhcmdldCIsInBvcCIsImN1clN0cnVjdHNUYXJnZXQiLCJtaXNzaW5nU1YiLCJ1cGRhdGVNaXNzaW5nU3YiLCJtY2xvY2siLCJzdGFja0hlYWQiLCJhZGRTdGFja1RvUmVzdFNTIiwidW5hcHBsaWNhYmxlSXRlbXMiLCJvZmZzZXQiLCJtaXNzaW5nIiwiZ2V0TWlzc2luZyIsInN0cnVjdFJlZnMiLCJpbnRlZ3JhdGUiLCJpbnRlZ3JhdGVTdHJ1Y3RzIiwicGVuZGluZyIsInBlbmRpbmdTdHJ1Y3RzIiwibWVyZ2VVcGRhdGVzVjIiLCJkc1Jlc3QiLCJwZW5kaW5nRHMiLCJwZW5kaW5nRFNVcGRhdGUiLCJkZWNvZGluZy5jcmVhdGVEZWNvZGVyIiwiZHNSZXN0MiIsImFwcGx5VXBkYXRlVjIiLCJZRGVjb2RlciIsImFwcGx5VXBkYXRlIiwid3JpdGVTdGF0ZUFzVXBkYXRlIiwidGFyZ2V0U3RhdGVWZWN0b3IiLCJjcmVhdGVEZWxldGVTZXRGcm9tU3RydWN0U3RvcmUiLCJlbmNvZGVTdGF0ZUFzVXBkYXRlIiwiZW5jb2RlZFRhcmdldFN0YXRlVmVjdG9yIiwiZGVjb2RlU3RhdGVWZWN0b3IiLCJ1cGRhdGVzIiwiZGlmZlVwZGF0ZVYyIiwibWVyZ2VVcGRhdGVzIiwiY29udmVydFVwZGF0ZUZvcm1hdFYyVG9WMSIsImVuY29kZVN0YXRlQXNVcGRhdGVWMiIsImRlY29kZWRTdGF0ZSIsInNzTGVuZ3RoIiwicmVhZFN0YXRlVmVjdG9yIiwiRXZlbnRIYW5kbGVyIiwiY3JlYXRlRXZlbnRIYW5kbGVyIiwiYWRkRXZlbnRIYW5kbGVyTGlzdGVuZXIiLCJldmVudEhhbmRsZXIiLCJyZW1vdmVFdmVudEhhbmRsZXJMaXN0ZW5lciIsImVycm9yIiwiY2FsbEV2ZW50SGFuZGxlckxpc3RlbmVycyIsImFyZzAiLCJhcmcxIiwiZi5jYWxsQWxsIiwiY29tcGFyZUlEcyIsIlNuYXBzaG90Iiwic3YiLCJpc1Zpc2libGUiLCJzbmFwc2hvdCIsInNwbGl0U25hcHNob3RBZmZlY3RlZFN0cnVjdHMiLCJnZXRJdGVtQ2xlYW5TdGFydCIsImxhc3RTdHJ1Y3QiLCJhZGRTdHJ1Y3QiLCJmaW5kSW5kZXhDbGVhblN0YXJ0IiwiZ2V0SXRlbUNsZWFuRW5kIiwiY2xvY2tTdGFydCIsIlRyYW5zYWN0aW9uIiwiZGVsZXRlU2V0IiwiYmVmb3JlU3RhdGUiLCJhZnRlclN0YXRlIiwiY2hhbmdlZCIsImNoYW5nZWRQYXJlbnRUeXBlcyIsIl9tZXJnZVN0cnVjdHMiLCJ3cml0ZVVwZGF0ZU1lc3NhZ2VGcm9tVHJhbnNhY3Rpb24iLCJtYXAuYW55Iiwid3JpdGVTdHJ1Y3RzRnJvbVRyYW5zYWN0aW9uIiwiYWRkQ2hhbmdlZFR5cGVUb1RyYW5zYWN0aW9uIiwicGFyZW50U3ViIiwidHJ5VG9NZXJnZVdpdGhMZWZ0IiwibWVyZ2VXaXRoIiwiY2xlYW51cFRyYW5zYWN0aW9ucyIsInRyYW5zYWN0aW9uQ2xlYW51cHMiLCJtZXJnZVN0cnVjdHMiLCJzdWJzIiwiaXRlbXR5cGUiLCJfY2FsbE9ic2VydmVyIiwiZXZlbnRzIiwiZXZlbnQiLCJjdXJyZW50VGFyZ2V0IiwiZXZlbnQxIiwiZXZlbnQyIiwicGF0aCIsIl9kRUgiLCJkZWxldGVJdGVtcyIsImRpIiwiZGVsZXRlSXRlbSIsImVuZERlbGV0ZUl0ZW1DbG9jayIsInNpIiwia2VlcCIsInRyeUdjRGVsZXRlU2V0IiwidHJ5TWVyZ2VEZWxldGVTZXQiLCJiZWZvcmVDbG9jayIsImZpcnN0Q2hhbmdlUG9zIiwicmVwbGFjZWRTdHJ1Y3RQb3MiLCJ2YyIsInByaW50IiwibG9nZ2luZy5wcmludCIsImxvZ2dpbmcuT1JBTkdFIiwibG9nZ2luZy5CT0xEIiwibG9nZ2luZy5VTkJPTEQiLCJsb2dnaW5nLlJFRCIsImxvYWRlZCIsImFkZGVkIiwicmVtb3ZlZCIsImluaXRpYWxDYWxsIiwiTGF6eVN0cnVjdFJlYWRlciIsImZpbHRlclNraXBzIiwiZ2VuIiwibGF6eVN0cnVjdFJlYWRlckdlbmVyYXRvciIsImN1cnIiLCJMYXp5U3RydWN0V3JpdGVyIiwiY3VyckNsaWVudCIsInN0YXJ0Q2xvY2siLCJ3cml0dGVuIiwiY2xpZW50U3RydWN0cyIsInNsaWNlU3RydWN0IiwibGVmdEl0ZW0iLCJyaWdodE9yaWdpbiIsIllFbmNvZGVyIiwidXBkYXRlRGVjb2RlcnMiLCJsYXp5U3RydWN0RGVjb2RlcnMiLCJjdXJyV3JpdGUiLCJ1cGRhdGVFbmNvZGVyIiwibGF6eVN0cnVjdEVuY29kZXIiLCJkZWMiLCJkZWMxIiwiZGVjMiIsImNsb2NrRGlmZiIsImN1cnJEZWNvZGVyIiwiZmlyc3RDbGllbnQiLCJpdGVyYXRlZCIsIndyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyIiwiZmluaXNoTGF6eVN0cnVjdFdyaXRpbmciLCJkc3MiLCJtZXJnZWQiLCJkc3NJIiwiZGVsc0xlZnQiLCJhcnJheS5hcHBlbmRUbyIsIm1lcmdlRGVsZXRlU2V0cyIsImxhenlTdHJ1Y3RXcml0ZXIiLCJzdkNsb2NrIiwiZmx1c2hMYXp5U3RydWN0V3JpdGVyIiwibGF6eVdyaXRlciIsInBhcnRTdHJ1Y3RzIiwidXBkYXRlRGVjb2RlciIsImxhenlEZWNvZGVyIiwiY29udmVydFVwZGF0ZUZvcm1hdCIsIllFdmVudCIsIl9jaGFuZ2VzIiwiX2tleXMiLCJfZGVsdGEiLCJnZXRQYXRoVG8iLCJhY3Rpb24iLCJvbGRWYWx1ZSIsImFkZHMiLCJwcmV2IiwiYXJyYXkubGFzdCIsImdldENvbnRlbnQiLCJkZWx0YSIsImNoYW5nZXMiLCJsYXN0T3AiLCJwYWNrT3AiLCJpbnNlcnQiLCJjb25jYXQiLCJyZXRhaW4iLCJjaGlsZCIsImdsb2JhbFNlYXJjaE1hcmtlclRpbWVzdGFtcCIsIkFycmF5U2VhcmNoTWFya2VyIiwibWFya2VyIiwidGltZXN0YW1wIiwib3ZlcndyaXRlTWFya2VyIiwiZmluZE1hcmtlciIsInlhcnJheSIsIl9zZWFyY2hNYXJrZXIiLCJwaW5kZXgiLCJyZWZyZXNoTWFya2VyVGltZXN0YW1wIiwiY291bnRhYmxlIiwic2VhcmNoTWFya2VyIiwicG0iLCJtYXJrUG9zaXRpb24iLCJ1cGRhdGVNYXJrZXJDaGFuZ2VzIiwiY2FsbFR5cGVPYnNlcnZlcnMiLCJjaGFuZ2VkVHlwZSIsIl9lSCIsIl9jb3B5IiwiZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCIsImNsb25lIiwiX3dyaXRlIiwiX2ZpcnN0IiwicGFyZW50U3VicyIsIm9ic2VydmUiLCJvYnNlcnZlRGVlcCIsInVub2JzZXJ2ZSIsInVub2JzZXJ2ZURlZXAiLCJ0eXBlTGlzdFNsaWNlIiwiY3MiLCJ0eXBlTGlzdFRvQXJyYXkiLCJ0eXBlTGlzdEZvckVhY2giLCJ0eXBlTGlzdE1hcCIsInJlc3VsdCIsInR5cGVMaXN0Q3JlYXRlSXRlcmF0b3IiLCJjdXJyZW50Q29udGVudCIsImN1cnJlbnRDb250ZW50SW5kZXgiLCJ0eXBlTGlzdEdldCIsInR5cGVMaXN0SW5zZXJ0R2VuZXJpY3NBZnRlciIsInJlZmVyZW5jZUl0ZW0iLCJvd25DbGllbnRJZCIsImpzb25Db250ZW50IiwicGFja0pzb25Db250ZW50IiwibGFzdElkIiwiQ29udGVudEFueSIsIkNvbnRlbnRCaW5hcnkiLCJDb250ZW50RG9jIiwiQ29udGVudFR5cGUiLCJsZW5ndGhFeGNlZWRlZCIsImVycm9yLmNyZWF0ZSIsInR5cGVMaXN0SW5zZXJ0R2VuZXJpY3MiLCJzdGFydEluZGV4IiwidHlwZUxpc3REZWxldGUiLCJzdGFydExlbmd0aCIsInR5cGVNYXBEZWxldGUiLCJ0eXBlTWFwU2V0IiwidHlwZU1hcEdldCIsInR5cGVNYXBHZXRBbGwiLCJ0eXBlTWFwSGFzIiwiY3JlYXRlTWFwSXRlcmF0b3IiLCJpdGVyYXRvci5pdGVyYXRvckZpbHRlciIsImVudHJ5IiwiWUFycmF5RXZlbnQiLCJfcHJlbGltQ29udGVudCIsInRvQXJyYXkiLCJtYXhNYXJrZXIiLCJjdXJyTWFya2VyIiwidHlwZUxpc3RQdXNoR2VuZXJpY3MiLCJZQXJyYXlSZWZJRCIsIllNYXBFdmVudCIsInltYXAiLCJrZXlzQ2hhbmdlZCIsIml0ZXJhdG9yLml0ZXJhdG9yTWFwIiwiY2xlYXIiLCJZTWFwUmVmSUQiLCJlcXVhbEF0dHJzIiwib2JqZWN0LmVxdWFsRmxhdCIsIkl0ZW1UZXh0TGlzdFBvc2l0aW9uIiwiY3VycmVudEF0dHJpYnV0ZXMiLCJmb3J3YXJkIiwiQ29udGVudEZvcm1hdCIsInVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzIiwiZmluZE5leHRQb3NpdGlvbiIsImZpbmRQb3NpdGlvbiIsImluc2VydE5lZ2F0ZWRBdHRyaWJ1dGVzIiwiY3VyclBvcyIsIm5lZ2F0ZWRBdHRyaWJ1dGVzIiwibmV4dEZvcm1hdCIsImZvcm1hdCIsIm1pbmltaXplQXR0cmlidXRlQ2hhbmdlcyIsImF0dHJpYnV0ZXMiLCJpbnNlcnRBdHRyaWJ1dGVzIiwiY3VycmVudFZhbCIsImluc2VydFRleHQiLCJ0ZXh0IiwiQ29udGVudFN0cmluZyIsIkNvbnRlbnRFbWJlZCIsImdldExlbmd0aCIsImZvcm1hdFRleHQiLCJpdGVyYXRpb25Mb29wIiwiYXR0ciIsIm5ld2xpbmVzIiwiY2xlYW51cEZvcm1hdHRpbmdHYXAiLCJzdGFydEF0dHJpYnV0ZXMiLCJjdXJyQXR0cmlidXRlcyIsImVuZEF0dHJpYnV0ZXMiLCJtYXAuY29weSIsImNsZWFudXBzIiwicmVhY2hlZEVuZE9mQ3VyciIsImRlbGV0ZVRleHQiLCJzdGFydEF0dHJzIiwiWVRleHRFdmVudCIsInl0ZXh0IiwiY2hpbGRMaXN0Q2hhbmdlZCIsInN1YiIsIm9sZEF0dHJpYnV0ZXMiLCJkZWxldGVMZW4iLCJhZGRPcCIsIm9wIiwiY3VyVmFsIiwiX3BlbmRpbmciLCJhcHBseURlbHRhIiwidG9EZWx0YSIsImZvdW5kRm9ybWF0dGluZ0l0ZW0iLCJhZnRlckNsb2NrIiwiY2xlYW51cFlUZXh0Rm9ybWF0dGluZyIsImF0dHJzIiwiY2xlYW51cENvbnRleHRsZXNzRm9ybWF0dGluZ0dhcCIsInNhbml0aXplIiwiaW5zIiwicHJldlNuYXBzaG90IiwiY29tcHV0ZVlDaGFuZ2UiLCJvcHMiLCJwYWNrU3RyIiwiYWRkQXR0cmlidXRlcyIsImN1ciIsInVzZXIiLCJpbnNlcnRFbWJlZCIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVWYWx1ZSIsImdldEF0dHJpYnV0ZXMiLCJZVGV4dFJlZklEIiwiWVhtbFRyZWVXYWxrZXIiLCJyb290IiwiX2ZpbHRlciIsIl9yb290IiwiX2N1cnJlbnROb2RlIiwiX2ZpcnN0Q2FsbCIsIllYbWxFbGVtZW50Iiwibm9kZU5hbWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiWVhtbEV2ZW50IiwieG1sIiwidG9ET00iLCJfZG9jdW1lbnQiLCJob29rcyIsImJpbmRpbmciLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJfY3JlYXRlQXNzb2NpYXRpb24iLCJ4bWxUeXBlIiwiaW5zZXJ0QWZ0ZXIiLCJyZWYiLCJyZWZJdGVtIiwicGMiLCJmaW5kSW5kZXgiLCJZWG1sRnJhZ21lbnRSZWZJRCIsIl9wcmVsaW1BdHRycyIsInByZXZTaWJsaW5nIiwic3RyaW5nQnVpbGRlciIsImtleXNMZW4iLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsImhhc0F0dHJpYnV0ZSIsImRvbSIsInl4bWwiLCJZWG1sRWxlbWVudFJlZklEIiwiYXR0cmlidXRlc0NoYW5nZWQiLCJZWG1sSG9vayIsImhvb2tOYW1lIiwiaG9vayIsImNyZWF0ZURvbSIsIllYbWxIb29rUmVmSUQiLCJZWG1sVGV4dCIsIm5lc3RlZE5vZGVzIiwibm9kZSIsIllYbWxUZXh0UmVmSUQiLCJBYnN0cmFjdFN0cnVjdCIsImVuY29kaW5nUmVmIiwiaXNDb3VudGFibGUiLCJnZXRSZWYiLCJDb250ZW50RGVsZXRlZCIsIm1hcmtEZWxldGVkIiwiY3JlYXRlRG9jRnJvbU9wdHMiLCJDb250ZW50SlNPTiIsImZpcnN0Q2hhckNvZGUiLCJjaGFyQ29kZUF0IiwidHlwZVJlZnMiLCJyaWdodEl0ZW0iLCJyZWRvbmUiLCJpc01hcmtlZCIsImRvS2VlcCIsImRvRGVsZXRlIiwicGFyZW50SXRlbSIsImNvbmZsaWN0aW5nSXRlbXMiLCJpdGVtc0JlZm9yZU9yaWdpbiIsInBhcmVudEdDZCIsIm5ld1N0cnVjdCIsInJlcGxhY2VTdHJ1Y3QiLCJ5a2V5IiwiZmluZFJvb3RUeXBlS2V5IiwiY29udGVudFJlZnMiLCJnbG8iLCJnbG9iYWwiLCJjb25zdW1lIiwic2lnbmFsIiwicGlwZVRvIiwiV3JpdGFibGVTdHJlYW0iLCJHYW1lIiwiRXZlbnRUYXJnZXQiLCJfR2FtZV9ldmVudF93cml0ZXIiLCJUcmFuc2Zvcm1TdHJlYW0iLCJ3cml0YWJsZSIsImdldFdyaXRlciIsInJlYWRhYmxlIiwiaW5pdGlhbGl6ZV9ib2FyZCIsInRva2VuIiwicmFuZG9tVVVJRCIsIl9HYW1lX2luc3RhbmNlcyIsIl9HYW1lX3JlZ2lzdGVyX3Jlc291cmNlIiwic2V0X2RpbSIsInR5cGVkX21hcCIsImluZGljZXMiLCJpZHgiLCJzZXRUaW1lb3V0IiwiVVJMIiwiaGFzaCIsInN1YnRsZSIsImRpZ2VzdCIsImFycmF5QnVmZmVyIiwiYnRvYSIsImZyb21DaGFyQ29kZSIsInBhdGhuYW1lIiwiY2FjaGUiLCJjYWNoZXMiLCJvcGVuIiwicHV0IiwiUmVzcG9uc2UiLCJzZXR1cFdTIiwid3NjbGllbnQiLCJzaG91bGRDb25uZWN0Iiwid3MiLCJ3ZWJzb2NrZXQiLCJXZWJTb2NrZXQiLCJiaW5hcnlUeXBlIiwicGluZ1RpbWVvdXQiLCJjb25uZWN0aW5nIiwiY29ubmVjdGVkIiwib25tZXNzYWdlIiwibGFzdE1lc3NhZ2VSZWNlaXZlZCIsInRpbWUuZ2V0VW5peFRpbWUiLCJtZXNzYWdlIiwiY2xlYXJUaW1lb3V0Iiwic2VuZFBpbmciLCJtZXNzYWdlUmVjb25uZWN0VGltZW91dCIsIm9uY2xvc2UiLCJ1bnN1Y2Nlc3NmdWxSZWNvbm5lY3RzIiwibWF0aC5sb2cxMCIsInNlbmQiLCJvbmVycm9yIiwib25vcGVuIiwiV2Vic29ja2V0Q2xpZW50IiwiX2NoZWNrSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsb3NlIiwiY2xlYXJJbnRlcnZhbCIsImRpc2Nvbm5lY3QiLCJjb25uZWN0IiwiU3RhdHVzRW1pdHRlciIsIl9TdGF0dXNFbWl0dGVyX3ZhbHVlIiwiY3VycmVudCIsInNob3VsZF9lbWl0IiwiY29tcGxldGUiLCJQRUVSX0NPTkZJRyIsImljZVNlcnZlcnMiLCJ1cmxzIiwiU2lnbmFsZXIiLCJwZWVyX2lkIiwiYWxsb3dfY29ubmVjdGlvbnMiLCJzaWduYWxfdXJsIiwicGVlcnMiLCJzdGF0dXMiLCJfU2lnbmFsZXJfb25tZXNzYWdlIiwic2lnIiwiZGVzdGluYXRpb24iLCJwZWVyIiwiZGVzY3JpcHRpb24iLCJfU2lnbmFsZXJfaW5zdGFuY2VzIiwiX1NpZ25hbGVyX2luaXRfY29ubmVjdGlvbiIsInJlYWR5Rm9yT2ZmZXIiLCJtYWtpbmdfb2ZmZXIiLCJzaWduYWxpbmdTdGF0ZSIsImlzU2V0dGluZ1JlbW90ZUFuc3dlclBlbmRpbmciLCJvZmZlckNvbGxpc2lvbiIsImlnbm9yZV9vZmZlciIsInBvbGl0ZSIsInNldFJlbW90ZURlc2NyaXB0aW9uIiwic2V0TG9jYWxEZXNjcmlwdGlvbiIsIl9TaWduYWxlcl9zZW5kIiwidG8iLCJsb2NhbERlc2NyaXB0aW9uIiwiY2FuZGlkYXRlIiwiYWRkSWNlQ2FuZGlkYXRlIiwiZXJyIiwic29ja2V0IiwiaW5pdGlhdGUiLCJyZW1vdGVfaWQiLCJzaHV0ZG93biIsIldlYWtTZXQiLCJvdXRnb2luZyIsIlJUQ1BlZXJDb25uZWN0aW9uIiwib25pY2VjYW5kaWRhdGUiLCJvbm5lZ290aWF0aW9ubmVlZGVkIiwiaWNlQ29ubmVjdGlvblN0YXRlIiwibXNnIiwic3RyZWFtcyIsImRjIiwicmVhZF9zdHJlYW0iLCJ3cml0ZV9zdHJlYW0iLCJSZWFkYWJsZVN0cmVhbSIsImNvbnRyb2xsZXIiLCJlbnF1ZXVlIiwiYnVmZmVyZWRBbW91bnQiLCJjYW5jZWwiLCJyZXN1bWUiLCJsYWJlbCIsIm9uYnVmZmVyZWRhbW91bnRsb3ciLCJjaHVuayIsInJlYWR5U3RhdGUiLCJidWZmZXJlZEFtb3VudExvd1RocmVzaG9sZCIsImFib3J0IiwiQ291bnRRdWV1aW5nU3RyYXRlZ3kiLCJoaWdoV2F0ZXJNYXJrIiwicmVxdWVzdCIsImNoYW5uZWwiLCJnZXRSZWFkZXIiLCJoZWFkZXIiLCJyZWxlYXNlTG9jayIsImJsb2IiLCJCbG9iIiwiY29sbGVjdF9ibG9iIiwicmVzcG9uc2UiLCJyZXNvdXJjZSIsIm1zZ19zaXplIiwiYnVmZmVyX2NodW5rcyIsInByZXZlbnRDbG9zZSIsIkdhbWVQZWVyIiwiX0dhbWVQZWVyX2V2ZW50X3dyaXRlciIsIm9uZGF0YWNoYW5uZWwiLCJjcmVhdGVEYXRhQ2hhbm5lbCIsIm5lZ290aWF0ZWQiLCJwaXBlVGhyb3VnaCIsInRyYW5zZm9ybSIsIm9sZF9jbG9zZSIsImJpbmQiLCJ3cml0ZV9ldmVudCIsImRhdGFjaGFubmVsIiwicHJvdG9jb2wiLCJ0aGVuIiwiaW5pdCIsIkNsaWVudCIsImdhbWVfaWQiLCJnYW1lIiwiX0NsaWVudF9nYW1lIiwiX0NsaWVudF9wZWVyIiwiX0NsaWVudF9nYW1lX2lkIiwiX0NsaWVudF9zaWduYWxlciIsImZvcndhcmRfdXBkYXRlcyIsInNlcnZpY2VXb3JrZXIiLCJwb3N0TWVzc2FnZSIsIlNlcnZlciIsIl9TZXJ2ZXJfZ2FtZSIsIl9TZXJ2ZXJfYWJvcnQiLCJfU2VydmVyX2FkZF9jbGllbnQiLCJncCIsIl9TZXJ2ZXJfaW5zdGFuY2VzIiwiX1NlcnZlcl9nZXRfcmVzb3VyY2UiLCJzY3RwIiwibWF4TWVzc2FnZVNpemUiLCJ0cnlfY2xvc2UiLCJzaWduYWxlciIsIkFib3J0Q29udHJvbGxlciIsInJlc3AiLCJXaXRoVG9vbHRpcCIsIm1vdXNleCIsIm1vdXNleSIsIl9XaXRoVG9vbHRpcF9tb3VzZW1vdmUiLCJwYWdlWCIsInBhZ2VZIiwidG9wIiwiSG9zdFRvZ2dsZSIsInRvZ2dsZSIsImNoZWNrZWQiLCJodW1hbiIsIkNsaWVudFN0YXR1cyIsIkdyaWRMaW5lcyIsImdyaWRfc2l6ZSIsImltYWdlIiwiSW1hZ2UiLCJ1bnNhZmVDU1MiLCJkcmF3IiwiY3R4IiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsImFscGhhIiwic3Ryb2tlU3R5bGUiLCJkcmF3SW1hZ2UiLCJiZWdpblBhdGgiLCJzZXRMaW5lRGFzaCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImNoYW5nZWRfcHJvcHMiLCJiYWNrZ3JvdW5kIiwib25sb2FkIiwiRHJhZ0FuZERyb3BNaXhpbiIsInN1cGVyQ2xhc3MiLCJEcmFnQW5kRHJvcHBlciIsIl9EcmFnQW5kRHJvcHBlcl9kcmFnb3ZlciIsImRyYWdfbG9jYXRpb24iLCJvZmZzZXRYIiwib2Zmc2V0WSIsIl9EcmFnQW5kRHJvcHBlcl9kcm9wIiwiRHJvcExheWVyIiwiX0Ryb3BMYXllcl9uZXdfdG9rZW5fZHJvcCIsImdyaWQiLCJzbmFwIiwibGluZSIsInZpc2liaWxpdHkiLCJfQ2FudmFzX2dyaWQiLCJzY3JlZW5fZGltIiwiZ3JpZF9kaW0iLCJweF93aWR0aCIsInB4X2hlaWdodCIsInBhZGRpbmciLCJmb250U2l6ZSIsImJhY2tncm91bmRJbWFnZSIsIkdSSURfU0laRSIsInRpbWVvdXQiLCJwcm9tIiwidGltZSIsInJhY2UiLCJfciIsInJlaiIsIkFwcCIsImhvc3RfcGVuZGluZyIsImNsaWVudF9wZW5kaW5nIiwiX0FwcF91cGRhdGVEaW0iLCJwYXJzZUludCIsIl9BcHBfbmV3X2xvY2FsIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImhyZWYiLCJfQXBwX3VwZGF0ZSIsIl9BcHBfaG9zdCIsInNlcnZlciIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsIl9BcHBfdW5ob3N0IiwicmVwbGFjZVN0YXRlIiwiZGlzY29ubmVjdGVkIiwib3ZlcmxheSIsImlmRGVmaW5lZCIsImFkZF90b2tlbiIsInNldF9iZyIsImNoYW5nZWRQcm9wZXJ0aWVzIiwidGl0bGUiLCJVUkxTZWFyY2hQYXJhbXMiLCJQUFoiLCJzY3JvbGxfcG9zIiwiZGVzaXJlZF9zdGF0ZSIsInZsb2MiLCJ2ZGltIiwiY2RpbSIsInNtb290aCIsIl9QUFpfcmVzaXplX29ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJjb250ZW50UmVjdCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsIl9QUFpfaW5zdGFuY2VzIiwiX1BQWl96b29tX3RvX2ZpdCIsIl9QUFpfcHJ2IiwibG9vcCIsInRzIiwiZWxhcHNlZCIsImRlbHRhX3NjYWxlIiwic2Nyb2xsVG8iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ6b29tIiwiaW5jIiwibWF4X3NjYWxlIiwibWluX3NjYWxlIiwid2hlZWwiLCJtdWx0aXBsaWVyIiwiZGVsdGFNb2RlIiwiV2hlZWxFdmVudCIsIkRPTV9ERUxUQV9MSU5FIiwiZGVsdGFZIiwiX1BQWl9rZXlib2FyZF96b29tIiwiX1BQWl9nZXN0dXJlIiwicHJldl9zY2FsZSIsImNoYW5nZSIsInNjYWxlIiwidGVtcGxhdGUiLCJjbG9uZU5vZGUiLCJjb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsIm9uc2xvdGNoYW5nZSIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJyb3VuZF9wIiwiY2xpZW50X2Nvb3JkIiwiRVBTSUxPTiIsInJlZ2lzdGVyIiwiYm9keSJdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTUEsRUFBWSxLQUNKQyxTQUFTQyxnQkFDakJDLE1BQU1DLFlBQVksZUFBZ0IsR0FBR0MsT0FBT0Msa0JDbUQzQyxTQUFTQyxFQUFXQyxFQUFZQyxFQUFRQyxFQUFLQyxHQUNoRCxJQUEySEMsRUFBdkhDLEVBQUlDLFVBQVVDLE9BQVFDLEVBQUlILEVBQUksRUFBSUosRUFBa0IsT0FBVEUsRUFBZ0JBLEVBQU9NLE9BQU9DLHlCQUF5QlQsRUFBUUMsR0FBT0MsRUFDckgsR0FBdUIsaUJBQVpRLFNBQW9ELG1CQUFyQkEsUUFBUUMsU0FBeUJKLEVBQUlHLFFBQVFDLFNBQVNaLEVBQVlDLEVBQVFDLEVBQUtDLFFBQ3BI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
