import t from"perf_hooks";import e from"crypto";const s=()=>{document.documentElement.style.setProperty("--app-height",`${window.innerHeight}px`)};function i(t,e,s,i){var n,r=arguments.length,o=r<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,s):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,s,i);else for(var h=t.length-1;h>=0;h--)(n=t[h])&&(o=(r<3?n(o):r>3?n(e,s,o):n(e,s))||o);return r>3&&o&&Object.defineProperty(e,s,o),o}function n(t,e,s,i){if("a"===s&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===s?i:"a"===s?i.call(t):i?i.value:e.get(t)}function r(t,e,s,i,n){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?n.call(t,s):n?n.value=s:e.set(t,s),s
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}window.addEventListener("resize",s),s();const o=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,h=Symbol(),l=new WeakMap;class c{constructor(t,e,s){if(this._$cssResult$=!0,s!==h)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(o&&void 0===t){const s=void 0!==e&&1===e.length;s&&(t=l.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),s&&l.set(e,t))}return t}toString(){return this.cssText}}const a=(t,...e)=>{const s=1===t.length?t[0]:e.reduce(((e,s,i)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(s)+t[i+1]),t[0]);return new c(s,t,h)},u=o?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const s of t.cssRules)e+=s.cssText;return(t=>new c("string"==typeof t?t:t+"",void 0,h))(e)})(t):t
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;var d;const f=window.trustedTypes,w=f?f.emptyScript:"",p=window.reactiveElementPolyfillSupport,g={toAttribute(t,e){switch(e){case Boolean:t=t?w:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let s=t;switch(e){case Boolean:s=null!==t;break;case Number:s=null===t?null:Number(t);break;case Object:case Array:try{s=JSON.parse(t)}catch(t){s=null}}return s}},v=(t,e)=>e!==t&&(e==e||t==t),y={attribute:!0,type:String,converter:g,reflect:!1,hasChanged:v};class b extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;null!==(e=this.h)&&void 0!==e||(this.h=[]),this.h.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,s)=>{const i=this._$Ep(s,e);void 0!==i&&(this._$Ev.set(i,s),t.push(i))})),t}static createProperty(t,e=y){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const s="symbol"==typeof t?Symbol():"__"+t,i=this.getPropertyDescriptor(t,s,e);void 0!==i&&Object.defineProperty(this.prototype,t,i)}}static getPropertyDescriptor(t,e,s){return{get(){return this[e]},set(i){const n=this[t];this[e]=i,this.requestUpdate(t,n,s)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||y}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const s of e)this.createProperty(s,t[s])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const s=new Set(t.flat(1/0).reverse());for(const t of s)e.unshift(u(t))}else void 0!==t&&e.push(u(t));return e}static _$Ep(t,e){const s=e.attribute;return!1===s?void 0:"string"==typeof s?s:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,s;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(s=t.hostConnected)||void 0===s||s.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{o?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const s=document.createElement("style"),i=window.litNonce;void 0!==i&&s.setAttribute("nonce",i),s.textContent=e.cssText,t.appendChild(s)}))})(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,s){this._$AK(t,s)}_$EO(t,e,s=y){var i,n;const r=this.constructor._$Ep(t,s);if(void 0!==r&&!0===s.reflect){const o=(null!==(n=null===(i=s.converter)||void 0===i?void 0:i.toAttribute)&&void 0!==n?n:g.toAttribute)(e,s.type);this._$El=t,null==o?this.removeAttribute(r):this.setAttribute(r,o),this._$El=null}}_$AK(t,e){var s,i;const n=this.constructor,r=n._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=n.getPropertyOptions(r),o=t.converter,h=null!==(i=null!==(s=null==o?void 0:o.fromAttribute)&&void 0!==s?s:"function"==typeof o?o:null)&&void 0!==i?i:g.fromAttribute;this._$El=r,this[r]=h(e,t.type),this._$El=null}}requestUpdate(t,e,s){let i=!0;void 0!==t&&(((s=s||this.constructor.getPropertyOptions(t)).hasChanged||v)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===s.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,s))):i=!1),!this.isUpdatePending&&i&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const s=this._$AL;try{e=this.shouldUpdate(s),e?(this.willUpdate(s),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(s)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(s)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var m;b.finalized=!0,b.elementProperties=new Map,b.elementStyles=[],b.shadowRootOptions={mode:"open"},null==p||p({ReactiveElement:b}),(null!==(d=globalThis.reactiveElementVersions)&&void 0!==d?d:globalThis.reactiveElementVersions=[]).push("1.3.3");const k=globalThis.trustedTypes,$=k?k.createPolicy("lit-html",{createHTML:t=>t}):void 0,x=`lit$${(Math.random()+"").slice(9)}$`,S="?"+x,M=`<${S}>`,A=document,C=(t="")=>A.createComment(t),_=t=>null===t||"object"!=typeof t&&"function"!=typeof t,W=Array.isArray,O=t=>{var e;return W(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])},E=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,U=/-->/g,T=/>/g,R=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,D=/'/g,N=/"/g,I=/^(?:script|style|textarea|title)$/i,j=t=>(e,...s)=>({_$litType$:t,strings:e,values:s}),L=j(1),z=j(2),P=Symbol.for("lit-noChange"),J=Symbol.for("lit-nothing"),B=new WeakMap,H=A.createTreeWalker(A,129,null,!1),V=(t,e)=>{const s=t.length-1,i=[];let n,r=2===e?"<svg>":"",o=E;for(let e=0;e<s;e++){const s=t[e];let h,l,c=-1,a=0;for(;a<s.length&&(o.lastIndex=a,l=o.exec(s),null!==l);)a=o.lastIndex,o===E?"!--"===l[1]?o=U:void 0!==l[1]?o=T:void 0!==l[2]?(I.test(l[2])&&(n=RegExp("</"+l[2],"g")),o=R):void 0!==l[3]&&(o=R):o===R?">"===l[0]?(o=null!=n?n:E,c=-1):void 0===l[1]?c=-2:(c=o.lastIndex-l[2].length,h=l[1],o=void 0===l[3]?R:'"'===l[3]?N:D):o===N||o===D?o=R:o===U||o===T?o=E:(o=R,n=void 0);const u=o===R&&t[e+1].startsWith("/>")?" ":"";r+=o===E?s+M:c>=0?(i.push(h),s.slice(0,c)+"$lit$"+s.slice(c)+x+u):s+x+(-2===c?(i.push(void 0),e):u)}const h=r+(t[s]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==$?$.createHTML(h):h,i]};class G{constructor({strings:t,_$litType$:e},s){let i;this.parts=[];let n=0,r=0;const o=t.length-1,h=this.parts,[l,c]=V(t,e);if(this.el=G.createElement(l,s),H.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(i=H.nextNode())&&h.length<o;){if(1===i.nodeType){if(i.hasAttributes()){const t=[];for(const e of i.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith(x)){const s=c[r++];if(t.push(e),void 0!==s){const t=i.getAttribute(s.toLowerCase()+"$lit$").split(x),e=/([.?@])?(.*)/.exec(s);h.push({type:1,index:n,name:e[2],strings:t,ctor:"."===e[1]?Y:"?"===e[1]?Q:"@"===e[1]?tt:Z})}else h.push({type:6,index:n})}for(const e of t)i.removeAttribute(e)}if(I.test(i.tagName)){const t=i.textContent.split(x),e=t.length-1;if(e>0){i.textContent=k?k.emptyScript:"";for(let s=0;s<e;s++)i.append(t[s],C()),H.nextNode(),h.push({type:2,index:++n});i.append(t[e],C())}}}else if(8===i.nodeType)if(i.data===S)h.push({type:2,index:n});else{let t=-1;for(;-1!==(t=i.data.indexOf(x,t+1));)h.push({type:7,index:n}),t+=x.length-1}n++}}static createElement(t,e){const s=A.createElement("template");return s.innerHTML=t,s}}function K(t,e,s=t,i){var n,r,o,h;if(e===P)return e;let l=void 0!==i?null===(n=s._$Cl)||void 0===n?void 0:n[i]:s._$Cu;const c=_(e)?void 0:e._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(r=null==l?void 0:l._$AO)||void 0===r||r.call(l,!1),void 0===c?l=void 0:(l=new c(t),l._$AT(t,s,i)),void 0!==i?(null!==(o=(h=s)._$Cl)&&void 0!==o?o:h._$Cl=[])[i]=l:s._$Cu=l),void 0!==l&&(e=K(t,l._$AS(t,e.values),l,i)),e}class q{constructor(t,e){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var e;const{el:{content:s},parts:i}=this._$AD,n=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:A).importNode(s,!0);H.currentNode=n;let r=H.nextNode(),o=0,h=0,l=i[0];for(;void 0!==l;){if(o===l.index){let e;2===l.type?e=new F(r,r.nextSibling,this,t):1===l.type?e=new l.ctor(r,l.name,l.strings,this,t):6===l.type&&(e=new et(r,this,t)),this.v.push(e),l=i[++h]}o!==(null==l?void 0:l.index)&&(r=H.nextNode(),o++)}return n}m(t){let e=0;for(const s of this.v)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,e),e+=s.strings.length-2):s._$AI(t[e])),e++}}class F{constructor(t,e,s,i){var n;this.type=2,this._$AH=J,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=s,this.options=i,this._$Cg=null===(n=null==i?void 0:i.isConnected)||void 0===n||n}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=K(this,t,e),_(t)?t===J||null==t||""===t?(this._$AH!==J&&this._$AR(),this._$AH=J):t!==this._$AH&&t!==P&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.k(t):O(t)?this.S(t):this.$(t)}M(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}k(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t))}$(t){this._$AH!==J&&_(this._$AH)?this._$AA.nextSibling.data=t:this.k(A.createTextNode(t)),this._$AH=t}T(t){var e;const{values:s,_$litType$:i}=t,n="number"==typeof i?this._$AC(t):(void 0===i.el&&(i.el=G.createElement(i.h,this.options)),i);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===n)this._$AH.m(s);else{const t=new q(n,this),e=t.p(this.options);t.m(s),this.k(e),this._$AH=t}}_$AC(t){let e=B.get(t.strings);return void 0===e&&B.set(t.strings,e=new G(t)),e}S(t){W(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let s,i=0;for(const n of t)i===e.length?e.push(s=new F(this.M(C()),this.M(C()),this,this.options)):s=e[i],s._$AI(n),i++;i<e.length&&(this._$AR(s&&s._$AB.nextSibling,i),e.length=i)}_$AR(t=this._$AA.nextSibling,e){var s;for(null===(s=this._$AP)||void 0===s||s.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cg=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class Z{constructor(t,e,s,i,n){this.type=1,this._$AH=J,this._$AN=void 0,this.element=t,this.name=e,this._$AM=i,this.options=n,s.length>2||""!==s[0]||""!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=J}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,s,i){const n=this.strings;let r=!1;if(void 0===n)t=K(this,t,e,0),r=!_(t)||t!==this._$AH&&t!==P,r&&(this._$AH=t);else{const i=t;let o,h;for(t=n[0],o=0;o<n.length-1;o++)h=K(this,i[s+o],e,o),h===P&&(h=this._$AH[o]),r||(r=!_(h)||h!==this._$AH[o]),h===J?t=J:t!==J&&(t+=(null!=h?h:"")+n[o+1]),this._$AH[o]=h}r&&!i&&this.C(t)}C(t){t===J?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class Y extends Z{constructor(){super(...arguments),this.type=3}C(t){this.element[this.name]=t===J?void 0:t}}const X=k?k.emptyScript:"";class Q extends Z{constructor(){super(...arguments),this.type=4}C(t){t&&t!==J?this.element.setAttribute(this.name,X):this.element.removeAttribute(this.name)}}class tt extends Z{constructor(t,e,s,i,n){super(t,e,s,i,n),this.type=5}_$AI(t,e=this){var s;if((t=null!==(s=K(this,t,e,0))&&void 0!==s?s:J)===P)return;const i=this._$AH,n=t===J&&i!==J||t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive,r=t!==J&&(i===J||n);n&&this.element.removeEventListener(this.name,this,i),r&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,s;"function"==typeof this._$AH?this._$AH.call(null!==(s=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==s?s:this.element,t):this._$AH.handleEvent(t)}}class et{constructor(t,e,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){K(this,t)}}const st={L:"$lit$",P:x,V:S,I:1,N:V,R:q,j:O,D:K,H:F,F:Z,O:Q,W:tt,B:Y,Z:et},it=window.litHtmlPolyfillSupport;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var nt,rt;null==it||it(G,F),(null!==(m=globalThis.litHtmlVersions)&&void 0!==m?m:globalThis.litHtmlVersions=[]).push("2.2.6");class ot extends b{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const s=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=s.firstChild),s}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,s)=>{var i,n;const r=null!==(i=null==s?void 0:s.renderBefore)&&void 0!==i?i:e;let o=r._$litPart$;if(void 0===o){const t=null!==(n=null==s?void 0:s.renderBefore)&&void 0!==n?n:null;r._$litPart$=o=new F(e.insertBefore(C(),t),t,void 0,null!=s?s:{})}return o._$AI(t),o})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return P}}ot.finalized=!0,ot._$litElement$=!0,null===(nt=globalThis.litElementHydrateSupport)||void 0===nt||nt.call(globalThis,{LitElement:ot});const ht=globalThis.litElementPolyfillSupport;null==ht||ht({LitElement:ot}),(null!==(rt=globalThis.litElementVersions)&&void 0!==rt?rt:globalThis.litElementVersions=[]).push("3.2.1");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const lt=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:s,elements:i}=e;return{kind:s,elements:i,finisher(e){window.customElements.define(t,e)}}})(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */,ct=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(s){s.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(s){s.createProperty(e.key,t)}};function at(t){return(e,s)=>void 0!==s?((t,e,s)=>{e.constructor.createProperty(s,t)})(t,e,s):ct(t,e)
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */}function ut(t){return at({...t,state:!0})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const dt=({finisher:t,descriptor:e})=>(s,i)=>{var n;if(void 0===i){const i=null!==(n=s.originalKey)&&void 0!==n?n:s.key,r=null!=e?{kind:"method",placement:"prototype",key:i,descriptor:e(s.key)}:{...s,key:i};return null!=t&&(r.finisher=function(e){t(e,i)}),r}{const n=s.constructor;void 0!==e&&Object.defineProperty(s,i,e(i)),null==t||t(n,i)}}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */;function ft(t){return dt({finisher:(e,s)=>{Object.assign(e.prototype[s],t)}})}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function wt(t,e){return dt({descriptor:s=>{const i={get(){var e,s;return null!==(s=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(t))&&void 0!==s?s:null},enumerable:!0,configurable:!0};if(e){const e="symbol"==typeof s?Symbol():"__"+s;i.get=function(){var s,i;return void 0===this[e]&&(this[e]=null!==(i=null===(s=this.renderRoot)||void 0===s?void 0:s.querySelector(t))&&void 0!==i?i:null),this[e]}}return i}})}
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */var pt;null===(pt=window.HTMLSlotElement)||void 0===pt||pt.prototype.assignedElements;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const gt=1,vt=2,yt=t=>(...e)=>({_$litDirective$:t,values:e});class bt{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,s){this._$Ct=t,this._$AM=e,this._$Ci=s}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const{H:mt}=st,kt=()=>document.createComment(""),$t=(t,e,s)=>{var i;const n=t._$AA.parentNode,r=void 0===e?t._$AB:e._$AA;if(void 0===s){const e=n.insertBefore(kt(),r),i=n.insertBefore(kt(),r);s=new mt(e,i,t,t.options)}else{const e=s._$AB.nextSibling,o=s._$AM,h=o!==t;if(h){let e;null===(i=s._$AQ)||void 0===i||i.call(s,t),s._$AM=t,void 0!==s._$AP&&(e=t._$AU)!==o._$AU&&s._$AP(e)}if(e!==r||h){let t=s._$AA;for(;t!==e;){const e=t.nextSibling;n.insertBefore(t,r),t=e}}}return s},xt=(t,e,s=t)=>(t._$AI(e,s),t),St={},Mt=t=>{var e;null===(e=t._$AP)||void 0===e||e.call(t,!1,!0);let s=t._$AA;const i=t._$AB.nextSibling;for(;s!==i;){const t=s.nextSibling;s.remove(),s=t}},At=(t,e,s)=>{const i=new Map;for(let n=e;n<=s;n++)i.set(t[n],n);return i},Ct=yt(class extends bt{constructor(t){if(super(t),t.type!==vt)throw Error("repeat() can only be used in text expressions")}dt(t,e,s){let i;void 0===s?s=e:void 0!==e&&(i=e);const n=[],r=[];let o=0;for(const e of t)n[o]=i?i(e,o):o,r[o]=s(e,o),o++;return{values:r,keys:n}}render(t,e,s){return this.dt(t,e,s).values}update(t,[e,s,i]){var n;const r=(t=>t._$AH)(t),{values:o,keys:h}=this.dt(e,s,i);if(!Array.isArray(r))return this.ut=h,o;const l=null!==(n=this.ut)&&void 0!==n?n:this.ut=[],c=[];let a,u,d=0,f=r.length-1,w=0,p=o.length-1;for(;d<=f&&w<=p;)if(null===r[d])d++;else if(null===r[f])f--;else if(l[d]===h[w])c[w]=xt(r[d],o[w]),d++,w++;else if(l[f]===h[p])c[p]=xt(r[f],o[p]),f--,p--;else if(l[d]===h[p])c[p]=xt(r[d],o[p]),$t(t,c[p+1],r[d]),d++,p--;else if(l[f]===h[w])c[w]=xt(r[f],o[w]),$t(t,r[d],r[f]),f--,w++;else if(void 0===a&&(a=At(h,w,p),u=At(l,d,f)),a.has(l[d]))if(a.has(l[f])){const e=u.get(h[w]),s=void 0!==e?r[e]:null;if(null===s){const e=$t(t,r[d]);xt(e,o[w]),c[w]=e}else c[w]=xt(s,o[w]),$t(t,r[d],s),r[e]=null;w++}else Mt(r[f]),f--;else Mt(r[d]),d++;for(;w<=p;){const e=$t(t,c[p+1]);xt(e,o[w]),c[w++]=e}for(;d<=f;){const t=r[d++];null!==t&&Mt(t)}return this.ut=h,((t,e=St)=>{t._$AH=e})(t,c),P}}),_t=(t,e)=>[t[0]+e[0],t[1]+e[1]],Wt=(t,e)=>_t(t,[e,e]),Ot=(t,e)=>[t[0]-e[0],t[1]-e[1]],Et=(t,e)=>[t[0]*e,t[1]*e],Ut=(t,e)=>[t[0]/e,t[1]/e],Tt=(t,e)=>[Math.max(t[0],e[0]),Math.max(t[1],e[1])],Rt=(t,e)=>[Math.min(t[0],e[0]),Math.min(t[1],e[1])],Dt=(t,e,s)=>Tt(t,Rt(e,s)),Nt=(t,e)=>t[0]===e[0]&&t[1]===e[1],It=t=>t.isPrimary&&("touch"===t.pointerType||t.pressure>0),jt=t=>"mouse"===t.pointerType&&1===t.buttons&&t.pressure>0,Lt=t=>{t.preventDefault(),t.stopPropagation()},zt=(t,e)=>new CustomEvent(t,{detail:e});
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */const Pt=async t=>{let e=t.dataTransfer?.items??[];return new Promise((async(t,s)=>{console.log("DataItems",e.length);for(let s=0;s<e.length;s++){if(console.log(e[s].type),e[s].type.startsWith("image/"))return t(e[s].getAsFile());if("text/html"===e[s].type)return void e[s].getAsString((e=>t(Jt(e))));if("string"===e[s].kind){let t=e[s].type;e[s].getAsString((e=>console.log(t,e)))}}return s("No compatible drop type found")}))};function Jt(t){const e=(new DOMParser).parseFromString(t,"text/html").querySelector("img")?.src;return e??null}const Bt=t=>new CustomEvent("game-event",{detail:t}),Ht=t=>t[Symbol.iterator]().next().value;function*Vt(t,e){for(let s of t)yield e(s)}
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Gt=yt(class extends bt{constructor(t){var e;if(super(t),t.type!==gt||"style"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce(((e,s)=>{const i=t[s];return null==i?e:e+`${s=s.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${i};`}),"")}update(t,[e]){const{style:s}=t.element;if(void 0===this.ct){this.ct=new Set;for(const t in e)this.ct.add(t);return this.render(e)}this.ct.forEach((t=>{null==e[t]&&(this.ct.delete(t),t.includes("-")?s.removeProperty(t):s[t]="")}));for(const t in e){const i=e[t];null!=i&&(this.ct.add(t),t.includes("-")?s.setProperty(t,i):s[t]=i)}return P}});var Kt,qt,Ft,Zt,Yt,Xt,Qt,te,ee,se,ie,ne,re,oe,he,le,ce,ae,ue,de,fe,we;let pe=class extends ot{constructor(){super(),Kt.add(this),this.width=30,this.height=40,this.selection=new Set,this.callouts=new Set,qt.set(this,void 0),Ft.set(this,void 0),Yt.set(this,0),Xt.set(this,(t=>{var e;Lt(t),r(this,Yt,(e=n(this,Yt,"f"),++e),"f")})),Qt.set(this,(t=>{Lt(t);const e=n(this,fe,"f").call(this,t).map(ve),s=Et(Wt([this.width,this.height],-1),24);this._drop_hint=Dt([0,0],s,e),this.hovering="canvas"})),te.set(this,(t=>{var e;r(this,Yt,(e=n(this,Yt,"f"),--e),"f")<=0&&(this._drop_hint=void 0,this.hovering=void 0)})),ee.set(this,(t=>{Lt(t),this._drop_hint=void 0,this.hovering="bg"})),se.set(this,(async t=>{Lt(t);try{const e=await Pt(t);this.dispatchEvent(zt("bg-drop",e))}catch(t){}r(this,Yt,0,"f"),this.hovering=void 0})),ie.set(this,(async t=>{Lt(t);try{const e=await Pt(t);console.log("Emitting drop"),this.dispatchEvent(zt("token-drop",{loc:this._drop_hint,dim:[24,24],img:e}))}catch(t){}this._drop_hint=void 0,this.hovering=void 0})),ne.set(this,(t=>{jt(t)&&n(this,oe,"f").call(this,t)})),re.set(this,(t=>{(t=>t.isPrimary&&"touch"===t.pointerType)(t)&&n(this,oe,"f").call(this,t)})),oe.set(this,(t=>{t.preventDefault(),t.stopPropagation();const e=t.target.id;t.shiftKey||t.ctrlKey?this.dispatchEvent(zt("token-select",[e,...this.selection].filter((t=>t!==e||!this.selection.has(e))))):this.dispatchEvent(zt("token-select",[t.target.id]))})),ue.set(this,void 0),de.set(this,{move:[0,0],resize:[0,0],r:0}),fe.set(this,(t=>Ot(this.viewport.coordToLocal([t.clientX,t.clientY]),[20,20]))),we.set(this,(t=>{if(!this.selection)return;if(8===t.keyCode)return this.dispatchEvent(Bt({type:"token-removed",ids:Array.from(this.selection)})),void Lt(t);"z"===t.key&&n(this,Ft,"f")&&this.dispatchEvent(Bt({type:"callout",loc:n(this,fe,"f").call(this,n(this,Ft,"f"))})),this.board.get("tokens").get(this.selection.values().next().value);let e={ArrowUp:[0,-24],ArrowDown:[0,24],ArrowLeft:[-24,0],ArrowRight:[24,0]}[t.key];e&&(this.dispatchEvent(Bt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{const s=this.board.get("tokens").get(t),i=Dt([0,0],Ot(n(this,Kt,"a",Zt),s.get("dim")),_t(s.get("loc"),e));return{id:s.get("id"),loc:i,dim:s.get("dim"),r:s.get("r")}}))})),Lt(t))}))}connectedCallback(){super.connectedCallback(),document.addEventListener("keydown",n(this,we,"f"))}disconnectedCallback(){super.disconnectedCallback(),document.removeEventListener("keydown",n(this,we,"f"))}render(){if(console.log("canvas render"),!this.board)return L``;let[t,e]=n(this,Kt,"a",Zt),s=n(this,Kt,"m",ae).call(this),i=1===this.selection.size?this.board.get("tokens").get(this.selection.values().next().value):void 0;return L`
      <p-p-z
        @pointerdown=${n(this,Kt,"m",he)}
        @pointermove=${n(this,Kt,"m",le)}
        @pointerup=${n(this,Kt,"m",ce)}
        @pointerleave=${()=>r(this,Ft,void 0,"f")}
        @dragstart=${Lt}
        @dragenter=${n(this,Xt,"f")}
        @dragleave=${n(this,te,"f")}
        @dragstop=${n(this,te,"f")}
        @dragover=${n(this,Qt,"f")}
        @drop=${n(this,ie,"f")}
      >
        <svg
          id="root"
          width=${t+40}
          height=${e+40}
          style=${Gt({width:`${t+40}px`,height:`${e+40}px`})}
        >
          <defs>
            <clipPath id="canvasClip">
              <rect width=${t} height=${e} rx=${5}></rect>
            </clipPath>
            <pattern id="horiz" x=${-.25} y=${-.25} width="100%" height=${24} patternUnits="userSpaceOnUse">
              <rect class="gridline" width="100%" height=${.5} fill="#d3d3d3" shape-rendering="geometricPrecision"></rect>
            </pattern>
            <pattern id="vert" x=${-.25} y=${-.25} width=${24} height="100%" patternUnits="userSpaceOnUse">
              <rect class="gridline" width=${.5} height="100%" fill="#d3d3d3" shape-rendering="geometric precision"></rect>
            </pattern>
            <pattern id="loading" patternUnits="userSpaceOnUse" width="1" height="1">
              <rect width="1" height="1" fill="white"></rect>
              <image href="assets/loading.svg" width="1" height="1" />
            </pattern>
          </defs>
          <svg x=${20} y=${20} width=${t} height=${e} id="surface">
            <rect class="shadow" width="100%" height="100%" fill="white" rx=${5}></rect>
            <svg clip-path="url(#canvasClip)">
              ${this.bg?z`<image href=${this.bg} width="100%" height="100%" preserveAspectRatio="none" style="will-change: transform"></image>`:null}
              <rect width="100%" height="100%" fill="url(#horiz)" opacity="0.75" pointer-events="none"></rect>
              <rect width="100%" height="100%" fill="url(#vert)" opacity="0.75" pointer-events="none"></rect>
              <svg id="tokens">
                ${Ct(this.board.get("order")??[],(t=>t),((t,e)=>{const i=this.board.get("tokens").get(t),[r,o]=Wt(i.get("dim"),-.5),[h,l]=Wt(i.get("loc"),.25);return L`
                      <svg
                        viewBox="0 0 1 1"
                        x=${h}
                        y=${l}
                        width=${r}
                        height=${o}
                        fill="transparent"
                        preserveAspectRatio="none"
                        @pointerdown=${n(this,ne,"f")}
                        @pointerup=${n(this,re,"f")}
                      >
                        <image
                          id=${t}
                          class="token"
                          width="1"
                          height="1"
                          href=${i.get("url")}
                          style=${`transform: rotate(${i.get("r")}deg)`}
                          preserveAspectRatio="none"
                          @load=${ye}
                        ></image>
                        <rect width="1" height="1" class="loading"></rect>
                      </svg>

                      ${s?.index===e?z`<rect
                            class="selection-drag-target"
                            x=${s.bbox.start[0]}
                            y=${s.bbox.start[1]}
                            width=${s.bbox.end[0]-s.bbox.start[0]}
                            height=${s.bbox.end[1]-s.bbox.start[1]}
                            fill="transparent"
                            @touchmove=${this.prevent_safari_scroll}
                            @pointerdown=${this.selection_drag_start}
                            @pointermove=${this.selection_drag}
                            @pointerup=${this.selection_drag_end}
                        ></rect>`:null}
                    `}))}
              </svg>
              ${this._drop_hint?z`
            <rect
                class="drop_hint"
                x=${this._drop_hint[0]}
                y=${this._drop_hint[1]}
                width=${24}
                height=${24}
                ></rect>
          `:null}
            </svg>
            ${n(this,qt,"f")?z`
              <rect id="sbox"
                x=${Math.min(n(this,qt,"f").pin[0],n(this,qt,"f").mouse[0])}
                y=${Math.min(n(this,qt,"f").pin[1],n(this,qt,"f").mouse[1])}
                width=${Math.abs(n(this,qt,"f").pin[0]-n(this,qt,"f").mouse[0])}
                height=${Math.abs(n(this,qt,"f").pin[1]-n(this,qt,"f").mouse[1])}
                ></rect>
              `:null}
            ${Ct(this.callouts,(t=>t),(t=>{const[e,s]=Ot(t,[12,12]);return z`
                  <image href="assets/callout.svg" x=${e} y=${s} width=${24} height=${24}></image>
                `}))}
            ${s?z`
            <svg
              id="selection"
              x=${s.bbox.start[0]}
              y=${s.bbox.start[1]}
              width=${s.bbox.end[0]-s.bbox.start[0]}
              height=${s.bbox.end[1]-s.bbox.start[1]}
              @touchmove=${this.prevent_safari_scroll}
              @pointerdown=${this.selection_drag_start}
              @pointermove=${this.selection_drag}
              @pointerup=${this.selection_drag_end}>
              <rect class="selection-box" width="100%" height="100%"  ></rect>
            ${i?z`
            <g style=${`transform-origin: center; transform: rotate(${i.get("r")}deg) translateY(${Math.sign((i.get("r")-180)%180)*(i.get("dim")[0]-i.get("dim")[1])/2}px)`}>
              <line class="ro" x1="50%" x2="50%" y2=${-10}></line>
              <circle class="ro handle" cx="50%" cy=${-10} r=${2}></circle>
            </g>
            <line class="rn" x2="100%"></line>
            <line class="rw" y2="100%"></line>
            <line class="re" x1="100%" x2="100%" y2="100%"></line>
            <line class="rs" y1="100%" x2="100%" y2="100%"></line>
            <rect class="handle rn rw"></rect>
            <rect class="handle rn re" x="100%"></rect>
            <rect class="handle rs rw" y="100%"></rect>
            <rect class="handle rs re" x="100%" y="100%"></rect>
            </g>
            </svg>`:null}`:null}
          </svg>
        </svg>
      </p-p-z>
      <div
        id="bg-drop"
        class=${this.hovering??""}
        @dragenter=${n(this,Xt,"f")}
        @dragover=${n(this,ee,"f")}
        @dragleave=${n(this,te,"f")}
        @drop=${n(this,se,"f")}
      >
        <div id="bg-drop-label" @drop=${n(this,se,"f")}>Set Background</div>
      </div>
    `}createRenderRoot(){return super.createRenderRoot()}prevent_safari_scroll(t){Lt(t)}selection_drag_start(t){if(!It(t))return;const e=n(this,fe,"f").call(this,t);Lt(t),t.target.setPointerCapture(t.pointerId),r(this,ue,e,"f")}selection_drag(t){if(!It(t))return;n(this,ue,"f")||this.selection_drag_start(t),Lt(t);const e=Dt([0,0],n(this,Kt,"a",Zt),n(this,fe,"f").call(this,t)),s=this.board.get("tokens").get(this.selection.values().next().value),i=s.get("dim"),o=s.get("loc"),h=t.target.classList;let l=[0,0],c=[0,0],a=0;if(h.contains("rn")&&(c[1]=o[1]-ge(e[1]),l[1]=ge(e[1])-o[1]),h.contains("rw")&&(c[0]=o[0]-ge(e[0]),l[0]=ge(e[0])-o[0]),h.contains("rs")&&(c[1]=ge(e[1])-i[1]-o[1]),h.contains("re")&&(c[0]=ge(e[0])-i[0]-o[0]),h.contains("ro")){const t=_t(o,Ut(i,2)),n=Ot(e,t),r=180*Math.atan2(n[0],-n[1])/Math.PI;a=90*Math.round(r/90)-s.get("r")%360}h.contains("selection-drag-target")?l=Ot(e,n(this,ue,"f")).map(ge):(l=Rt(Wt(i,-24),l),c=Tt(Wt(Et(i,-1),24),c)),a===n(this,de,"f").r&&Nt(l,n(this,de,"f").move)&&Nt(c,n(this,de,"f").resize)||(r(this,ue,_t(n(this,ue,"f"),l),"f"),r(this,de,{move:[0,0],resize:[0,0],r:0},"f"),this.dispatchEvent(Bt({type:"token-manipulated",tokens:Array.from(this.selection,(t=>{let e=this.board.get("tokens").get(t);return{id:e.get("id"),loc:_t(e.get("loc"),l),dim:_t(e.get("dim"),c),r:e.get("r")+a}}))})))}selection_drag_end(t){Lt(t),r(this,ue,void 0,"f")}};qt=new WeakMap,Ft=new WeakMap,Yt=new WeakMap,Xt=new WeakMap,Qt=new WeakMap,te=new WeakMap,ee=new WeakMap,se=new WeakMap,ie=new WeakMap,ne=new WeakMap,re=new WeakMap,oe=new WeakMap,ue=new WeakMap,de=new WeakMap,fe=new WeakMap,we=new WeakMap,Kt=new WeakSet,Zt=function(){return Et([this.width,this.height],24)},he=function(t){if(!jt(t))return;t.target.setPointerCapture(t.pointerId);const e=n(this,fe,"f").call(this,t);r(this,qt,{pin:e,mouse:e},"f")},le=function(t){r(this,Ft,{clientX:t.clientX,clientY:t.clientY},"f"),n(this,qt,"f")&&(n(this,qt,"f").mouse=n(this,fe,"f").call(this,t),this.requestUpdate())},ce=function(t){if(!n(this,qt,"f"))return this.dispatchEvent(zt("token-select",[]));t.target.setPointerCapture(t.pointerId);const e=Rt(n(this,qt,"f").pin,n(this,qt,"f").mouse),s=(t=>[Math.abs(t[0]),Math.abs(t[1])])(Ot(n(this,qt,"f").pin,n(this,qt,"f").mouse)),i={start:e,end:_t(e,s)},o=Vt(function*(t,e){for(let s of t)e(s)&&(yield s)}(this.board.get("tokens").values(),(t=>((t,e)=>!(e.start[0]>t.end[0]||e.end[0]<t.start[0]||e.start[1]>t.end[1]||e.end[1]<t.start[1]))(i,{start:t.get("loc"),end:_t(t.get("loc"),t.get("dim"))}))),(t=>t.get("id")));r(this,qt,void 0,"f"),this.dispatchEvent(zt("token-select",[...o])),this.requestUpdate()},ae=function(){if(0===this.selection.size)return;const t=Array.from(this.selection,(t=>this.board.get("tokens").get(t))).filter((t=>t)),e=Math.max(...Vt(this.selection.values(),(t=>this.board.get("order").toJSON().indexOf(t))));let s=t[0].get("loc"),i=_t(t[0].get("loc"),t[0].get("dim"));return t.forEach((t=>{s=Rt(s,t.get("loc")),i=Tt(i,_t(t.get("loc"),t.get("dim")))})),{index:e,bbox:{start:s,end:i}}},pe.styles=a`
    :host {
      position: relative;
      display: block;
      --selection-color: cornflowerblue;
      overflow: hidden;
    }

    p-p-z {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
    #root {
      backface-visibility: hidden;
    }

    #sbox {
      stroke: var(--selection-color);
      stroke-width: 1px;
      fill: var(--selection-color);
      fill-opacity: 0.2;
    }

    #bg-drop {
      position: absolute;
      right: 5px;
      bottom: -60px;
      display: inline-block;
      height: 50px;
      transition: bottom 250ms;
      background: var(--ui-bg);
      border-radius: 5px 5px 0 0;
      display: grid;
      padding: 5px;
      grid: 1fr 1fr;
      text-align: center;
      display: none;
    }

    #bg-drop.canvas,
    #bg-drop.bg {
      bottom: 0;
      box-shadow: 2px 4px 8px rgba(0, 0, 0, 0.3);
      display: block;
    }

    #bg-drop-label {
      --color: gray;
      padding: 0 1em;
      border: 2px solid var(--color);
      color: var(--color);
      border-radius: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }

    .bg > #bg-drop-label {
      --color: blue;
    }

    svg {
      overflow: visible;
    }

    #surface {
      clip-path: rect(100%);
    }

    .shadow {
      stroke-width: ${.5};
      stroke: rgba(0, 0, 0, 0.2);
      filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));
    }

    .drop_hint {
      transition: none;
      pointer-events: none;
      fill: gray;
    }

    .selection-box,
    line.ro {
      stroke: var(--selection-color);
      stroke-width: 1px;
      filter: drop-shadow(0px 0px 2px var(--selection-color));
      fill: transparent;
    }

    .selection-box {
      pointer-events: none !important;
    }

    .rn,
    .rs,
    .re,
    .rw {
      stroke-width: ${8};
      vector-effect: non-scaling-stroke;
      stroke: transparent;
    }

    .handle {
      stroke-width: 1px;
      fill: var(--selection-color);
      stroke: white;
    }

    .selection-drag-target {
      pointer-events: fill;
      cursor: move;
    }

    rect.handle {
      width: ${8}px;
      height: ${8}px;
      transform: translate(${-4}px, ${-4}px);
    }

    .ro.handle {
      cursor: crosshair;
    }

    .rn.re,
    .rs.rw {
      cursor: nesw-resize;
    }

    .rn.rw,
    .rs.re {
      cursor: nwse-resize;
    }

    .rn,
    .rs {
      cursor: row-resize;
    }

    .re,
    .rw {
      cursor: col-resize;
    }

    p-p-z {
      background-color: #ededf0;
    }

    .token {
      transform-box: fill-box;
      transform-origin: center;
      fill: transparent;
    }

    .token + .loading {
      fill: url(#loading);
      pointer-events: none;
    }

    .token.loaded + .loading {
      fill: transparent;
    }

    #selection {
      pointer-events: none;
    }

    #selection * {
      pointer-events: auto;
    }
  `,i([at({type:Number})],pe.prototype,"width",void 0),i([at({type:Number})],pe.prototype,"height",void 0),i([at()],pe.prototype,"bg",void 0),i([at({attribute:!1})],pe.prototype,"board",void 0),i([at({attribute:!1})],pe.prototype,"selection",void 0),i([at({attribute:!1})],pe.prototype,"callouts",void 0),i([at({attribute:!1})],pe.prototype,"sel_bbox",void 0),i([wt("root",!0)],pe.prototype,"root",void 0),i([wt("p-p-z",!0)],pe.prototype,"viewport",void 0),i([ut()],pe.prototype,"_drop_hint",void 0),i([ut()],pe.prototype,"hovering",void 0),i([ft({capture:!0,passive:!1})],pe.prototype,"prevent_safari_scroll",null),i([ft({capture:!0,passive:!1})],pe.prototype,"selection_drag_start",null),i([ft({capture:!0,passive:!1})],pe.prototype,"selection_drag",null),i([ft({capture:!0,passive:!1})],pe.prototype,"selection_drag_end",null),pe=i([lt("bg-canvas")],pe);const ge=t=>24*Math.round(t/24),ve=t=>t-t%24,ye=t=>t.target.classList.add("loaded");var be,me;let ke=class extends ot{constructor(){super(...arguments),this._state=!1,this._loaded=!1,this._buy=t=>{console.log("CLICK"),Lt(t),this._state=!0,document.addEventListener("click",n(this,be,"f"),{capture:!0})},be.set(this,(t=>{Lt(t),this._state=!1,document.removeEventListener("click",n(this,be,"f"),{capture:!0})})),me.set(this,(t=>{this._loaded=!0}))}render(){return L`<button @click="${this._buy}">Buy Me A Coffee</button> ${this._state?L`<div id="container"><iframe class="${this._loaded?"loaded":""}" allow="payment" src="https://ko-fi.com/djrenren/?hidefeed=true&widget=true&embed=true&preview=true" title="djrenren" @load="${n(this,me,"f")}"></iframe></div>`:null}`}};be=new WeakMap,me=new WeakMap,ke.styles=a`:host{display:block;position:relative}iframe{border:none;display:block;opacity:0;width:100%;height:100%;transition:opacity .5s linear}#container{border-radius:5px;box-shadow:0 0 6px rgba(0,0,0,.7);position:absolute;width:350px;height:525px;bottom:-535px;right:0;animation-name:fade;animation-duration:.5s;animation-direction:backwards;background:url(assets/loading.svg) center/100px no-repeat,#ededf0;overflow:hidden}iframe.loaded{opacity:1}@keyframes fade{0%{opacity:0}100%{opacity:1}}`,i([ut()],ke.prototype,"_state",void 0),i([ut()],ke.prototype,"_loaded",void 0),ke=i([lt("buy-me-a-coffee")],ke);const $e=()=>new Map,xe=t=>{const e=$e();return t.forEach(((t,s)=>{e.set(s,t)})),e},Se=(t,e,s)=>{let i=t.get(e);return void 0===i&&t.set(e,i=s()),i},Me=()=>new Set,Ae=t=>t[t.length-1],Ce=(t,e)=>{for(let s=0;s<e.length;s++)t.push(e[s])},_e=Array.from;class We{constructor(){this._observers=$e()}on(t,e){Se(this._observers,t,Me).add(e)}once(t,e){const s=(...i)=>{this.off(t,s),e(...i)};this.on(t,s)}off(t,e){const s=this._observers.get(t);void 0!==s&&(s.delete(e),0===s.size&&this._observers.delete(t))}emit(t,e){return _e((this._observers.get(t)||$e()).values()).forEach((t=>t(...e)))}destroy(){this._observers=$e()}}const Oe=Math.floor,Ee=Math.abs,Ue=Math.log10,Te=(t,e)=>t<e?t:e,Re=(t,e)=>t>e?t:e,De=t=>0!==t?t<0:1/t<0,Ne=/^\s*/g,Ie=/([A-Z])/g,je=(t,e)=>(t=>t.replace(Ne,""))(t.replace(Ie,(t=>`${e}${(t=>t.toLowerCase())(t)}`)));"undefined"!=typeof TextEncoder&&new TextEncoder;let Le="undefined"==typeof TextDecoder?null:new TextDecoder("utf-8",{fatal:!0,ignoreBOM:!0});Le&&1===Le.decode(new Uint8Array).length&&(Le=null);const ze=t=>void 0===t?null:t;let Pe=new class{constructor(){this.map=new Map}setItem(t,e){this.map.set(t,e)}getItem(t){return this.map.get(t)}},Je=!0;try{"undefined"!=typeof localStorage&&(Pe=localStorage,Je=!1)}catch(kt){}const Be=Pe,He="undefined"!=typeof process&&process.release&&/node|io\.js/.test(process.release.name);let Ve;"undefined"!=typeof navigator&&/Mac/.test(navigator.platform);const Ge=t=>(()=>{if(void 0===Ve)if(He){Ve=$e();const t=process.argv;let e=null;for(let s=0;s<t.length;s++){const i=t[s];"-"===i[0]?(null!==e&&Ve.set(e,""),e=i):null!==e&&(Ve.set(e,i),e=null)}null!==e&&Ve.set(e,"")}else"object"==typeof location?(Ve=$e(),(location.search||"?").slice(1).split("&").forEach((t=>{if(0!==t.length){const[e,s]=t.split("=");Ve.set(`--${je(e,"-")}`,s),Ve.set(`-${je(e,"-")}`,s)}}))):Ve=$e();return Ve})().has(t);var Ke;Ge("--"+(Ke="production"))||(t=>{ze(He?process.env[t.toUpperCase()]:Be.getItem(t))})(Ke);class qe{constructor(t){this.arr=t,this.pos=0}}const Fe=t=>new qe(t),Ze=t=>((t,e)=>{const s=ls(t.arr.buffer,t.pos+t.arr.byteOffset,e);return t.pos+=e,s})(t,Xe(t)),Ye=t=>t.arr[t.pos++],Xe=t=>{let e=0,s=0;for(;;){const i=t.arr[t.pos++];if(e|=(127&i)<<s,s+=7,i<128)return e>>>0;if(s>53)throw new Error("Integer out of range!")}},Qe=t=>{let e=t.arr[t.pos++],s=63&e,i=6;const n=(64&e)>0?-1:1;if(0==(128&e))return n*s;for(;;){if(e=t.arr[t.pos++],s|=(127&e)<<i,i+=7,e<128)return n*(s>>>0);if(i>53)throw new Error("Integer out of range!")}},ts=t=>{let e=Xe(t);if(0===e)return"";{let s=String.fromCodePoint(Ye(t));if(--e<100)for(;e--;)s+=String.fromCodePoint(Ye(t));else for(;e>0;){const i=e<1e4?e:1e4,n=t.arr.subarray(t.pos,t.pos+i);t.pos+=i,s+=String.fromCodePoint.apply(null,n),e-=i}return decodeURIComponent(escape(s))}},es=(t,e)=>{const s=new DataView(t.arr.buffer,t.arr.byteOffset+t.pos,e);return t.pos+=e,s},ss=[t=>{},t=>null,Qe,t=>es(t,4).getFloat32(0,!1),t=>es(t,8).getFloat64(0,!1),t=>es(t,8).getBigInt64(0,!1),t=>!1,t=>!0,ts,t=>{const e=Xe(t),s={};for(let i=0;i<e;i++){s[ts(t)]=is(t)}return s},t=>{const e=Xe(t),s=[];for(let i=0;i<e;i++)s.push(is(t));return s},Ze],is=t=>ss[127-Ye(t)](t);class ns extends qe{constructor(t,e){super(t),this.reader=e,this.s=null,this.count=0}read(){var t;return 0===this.count&&(this.s=this.reader(this),(t=this).pos!==t.arr.length?this.count=Xe(this)+1:this.count=-1),this.count--,this.s}}class rs extends qe{constructor(t){super(t),this.s=0,this.count=0}read(){if(0===this.count){this.s=Qe(this);const t=De(this.s);this.count=1,t&&(this.s=-this.s,this.count=Xe(this)+2)}return this.count--,this.s}}class os extends qe{constructor(t){super(t),this.s=0,this.count=0,this.diff=0}read(){if(0===this.count){const t=Qe(this),e=1&t;this.diff=t>>1,this.count=1,e&&(this.count=Xe(this)+2)}return this.s+=this.diff,this.count--,this.s}}class hs{constructor(t){this.decoder=new rs(t),this.str=ts(this.decoder),this.spos=0}read(){const t=this.spos+this.decoder.read(),e=this.str.slice(this.spos,t);return this.spos=t,e}}const ls=(t,e,s)=>new Uint8Array(t,e,s),cs=t=>{const e=(s=t.byteLength,new Uint8Array(s));var s;return e.set(t),e},as=Number.isInteger||(t=>"number"==typeof t&&isFinite(t)&&Oe(t)===t);class us{constructor(){this.cpos=0,this.cbuf=new Uint8Array(100),this.bufs=[]}}const ds=()=>new us,fs=t=>{const e=new Uint8Array((t=>{let e=t.cpos;for(let s=0;s<t.bufs.length;s++)e+=t.bufs[s].length;return e})(t));let s=0;for(let i=0;i<t.bufs.length;i++){const n=t.bufs[i];e.set(n,s),s+=n.length}return e.set(ls(t.cbuf.buffer,0,t.cpos),s),e},ws=(t,e)=>{const s=t.cbuf.length;t.cpos===s&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(2*s),t.cpos=0),t.cbuf[t.cpos++]=e},ps=ws,gs=(t,e)=>{for(;e>127;)ws(t,128|127&e),e>>>=7;ws(t,127&e)},vs=(t,e)=>{const s=De(e);for(s&&(e=-e),ws(t,(e>63?128:0)|(s?64:0)|63&e),e>>>=6;e>0;)ws(t,(e>127?128:0)|127&e),e>>>=7},ys=(t,e)=>{const s=unescape(encodeURIComponent(e)),i=s.length;gs(t,i);for(let e=0;e<i;e++)ws(t,s.codePointAt(e))},bs=(t,e)=>{const s=t.cbuf.length,i=t.cpos,n=Te(s-i,e.length),r=e.length-n;t.cbuf.set(e.subarray(0,n),i),t.cpos+=n,r>0&&(t.bufs.push(t.cbuf),t.cbuf=new Uint8Array(Re(2*s,r)),t.cbuf.set(e.subarray(n)),t.cpos=r)},ms=(t,e)=>{gs(t,e.byteLength),bs(t,e)},ks=(t,e)=>{((t,e)=>{const s=t.cbuf.length;s-t.cpos<e&&(t.bufs.push(ls(t.cbuf.buffer,0,t.cpos)),t.cbuf=new Uint8Array(2*Re(s,e)),t.cpos=0)})(t,e);const s=new DataView(t.cbuf.buffer,t.cpos,e);return t.cpos+=e,s},$s=new DataView(new ArrayBuffer(4)),xs=(t,e)=>{switch(typeof e){case"string":ws(t,119),ys(t,e);break;case"number":as(e)&&Ee(e)<=2147483647?(ws(t,125),vs(t,e)):(s=e,$s.setFloat32(0,s),$s.getFloat32(0)===s?(ws(t,124),((t,e)=>{ks(t,4).setFloat32(0,e,!1)})(t,e)):(ws(t,123),((t,e)=>{ks(t,8).setFloat64(0,e,!1)})(t,e)));break;case"bigint":ws(t,122),((t,e)=>{ks(t,8).setBigInt64(0,e,!1)})(t,e);break;case"object":if(null===e)ws(t,126);else if(e instanceof Array){ws(t,117),gs(t,e.length);for(let s=0;s<e.length;s++)xs(t,e[s])}else if(e instanceof Uint8Array)ws(t,116),ms(t,e);else{ws(t,118);const s=Object.keys(e);gs(t,s.length);for(let i=0;i<s.length;i++){const n=s[i];ys(t,n),xs(t,e[n])}}break;case"boolean":ws(t,e?120:121);break;default:ws(t,127)}var s};class Ss extends us{constructor(t){super(),this.w=t,this.s=null,this.count=0}write(t){this.s===t?this.count++:(this.count>0&&gs(this,this.count-1),this.count=1,this.w(this,t),this.s=t)}}const Ms=t=>{t.count>0&&(vs(t.encoder,1===t.count?t.s:-t.s),t.count>1&&gs(t.encoder,t.count-2))};class As{constructor(){this.encoder=new us,this.s=0,this.count=0}write(t){this.s===t?this.count++:(Ms(this),this.count=1,this.s=t)}toUint8Array(){return Ms(this),fs(this.encoder)}}const Cs=t=>{if(t.count>0){const e=t.diff<<1|(1===t.count?0:1);vs(t.encoder,e),t.count>1&&gs(t.encoder,t.count-2)}};class _s{constructor(){this.encoder=new us,this.s=0,this.count=0,this.diff=0}write(t){this.diff===t-this.s?(this.s=t,this.count++):(Cs(this),this.count=1,this.diff=t-this.s,this.s=t)}toUint8Array(){return Cs(this),fs(this.encoder)}}class Ws{constructor(){this.sarr=[],this.s="",this.lensE=new As}write(t){this.s+=t,this.s.length>19&&(this.sarr.push(this.s),this.s=""),this.lensE.write(t.length)}toUint8Array(){const t=new us;return this.sarr.push(this.s),this.s="",ys(t,this.sarr.join("")),bs(t,this.lensE.toUint8Array()),fs(t)}}var Os={};const Es="undefined"==typeof performance?null:performance,Us="undefined"==typeof crypto?null:crypto,Ts=null!==Us?t=>{const e=new ArrayBuffer(t),s=new Uint8Array(e);return Us.getRandomValues(s),e}:t=>{const e=new ArrayBuffer(t),s=new Uint8Array(e);for(let e=0;e<t;e++)s[e]=Math.ceil(4294967295*Math.random()>>>0);return e};Os.performance=Es,Os.cryptoRandomBuffer=Ts;const Rs="undefined"!=typeof process&&process.release&&/node|io\.js/.test(process.release.name),Ds=Os;Rs?t.performance:Ds.performance;const Ns=Rs?e:null;var Is=Ns?t=>Ns.randomBytes(t).buffer:Ds.cryptoRandomBuffer;const js=()=>new Uint32Array(Is(4))[0],Ls=[1e7]+-1e3+-4e3+-8e3+-1e11,zs=()=>Ls.replace(/[018]/g,(t=>(t^js()&15>>t/4).toString(16))),Ps=Date.now,Js=t=>new Error(t),Bs=()=>{throw Js("Method unimplemented")},Hs=()=>{throw Js("Unexpected case")},Vs=Object.keys,Gs=t=>Vs(t).length,Ks=(t,e)=>t===e||Gs(t)===Gs(e)&&((t,e)=>{for(const s in t)if(!e(t[s],s))return!1;return!0})(t,((t,s)=>(void 0!==t||((t,e)=>Object.prototype.hasOwnProperty.call(t,e))(e,s))&&e[s]===t)),qs=(t,e,s=0)=>{try{for(;s<t.length;s++)t[s](...e)}finally{s<t.length&&qs(t,e,s+1)}},Fs=Symbol;class Zs{constructor(t,e){this.left=t,this.right=e}}const Ys=(t,e)=>new Zs(t,e),Xs="undefined"!=typeof document?document:{};"undefined"!=typeof DOMParser&&new DOMParser;const Qs=t=>((t,e)=>{const s=[];for(const[i,n]of t)s.push(e(n,i));return s})(t,((t,e)=>`${e}:${t};`)).join("");Xs.ELEMENT_NODE,Xs.TEXT_NODE,Xs.CDATA_SECTION_NODE,Xs.COMMENT_NODE,Xs.DOCUMENT_NODE,Xs.DOCUMENT_TYPE_NODE,Xs.DOCUMENT_FRAGMENT_NODE;const ti=Fs(),ei=Fs(),si=Fs(),ii=Fs(),ni=Fs(),ri=Fs(),oi=Fs(),hi=Fs(),li=Fs(),ci={[ti]:Ys("font-weight","bold"),[ei]:Ys("font-weight","normal"),[si]:Ys("color","blue"),[ni]:Ys("color","green"),[ii]:Ys("color","grey"),[ri]:Ys("color","red"),[oi]:Ys("color","purple"),[hi]:Ys("color","orange"),[li]:Ys("color","black")},ai={[ti]:"[1m",[ei]:"[2m",[si]:"[34m",[ni]:"[32m",[ii]:"[37m",[ri]:"[31m",[oi]:"[35m",[hi]:"[38;5;208m",[li]:"[0m"},ui=He?t=>{const e=[],s=[];let i=0;for(;i<t.length;i++){const s=t[i],n=ai[s];if(void 0!==n)e.push(n);else{if(s.constructor!==String&&s.constructor!==Number)break;e.push(s)}}for(i>0&&(e.push("[0m"),s.push(e.join("")));i<t.length;i++){const e=t[i];e instanceof Symbol||s.push(e)}return s}:t=>{const e=[],s=[],i=$e();let n=[],r=0;for(;r<t.length;r++){const n=t[r],o=ci[n];if(void 0!==o)i.set(o.left,o.right);else{if(n.constructor!==String&&n.constructor!==Number)break;{const t=Qs(i);r>0||t.length>0?(e.push("%c"+n),s.push(t)):e.push(n)}}}for(r>0&&(n=s,n.unshift(e.join("")));r<t.length;r++){const e=t[r];e instanceof Symbol||n.push(e)}return n},di=new Set,fi=t=>({[Symbol.iterator](){return this},next:t}),wi=(t,e)=>fi((()=>{const{done:s,value:i}=t.next();return{done:s,value:s?void 0:e(i)}}));class pi{constructor(t,e){this.clock=t,this.len=e}}class gi{constructor(){this.clients=new Map}}const vi=(t,e,s)=>e.clients.forEach(((e,i)=>{const n=t.doc.store.clients.get(i);for(let i=0;i<e.length;i++){const r=e[i];ln(t,n,r.clock,r.len,s)}})),yi=(t,e)=>{const s=t.clients.get(e.client);return void 0!==s&&null!==((t,e)=>{let s=0,i=t.length-1;for(;s<=i;){const n=Oe((s+i)/2),r=t[n],o=r.clock;if(o<=e){if(e<o+r.len)return n;s=n+1}else i=n-1}return null})(s,e.clock)},bi=t=>{t.clients.forEach((t=>{let e,s;for(t.sort(((t,e)=>t.clock-e.clock)),e=1,s=1;e<t.length;e++){const i=t[s-1],n=t[e];i.clock+i.len>=n.clock?i.len=Re(i.len,n.clock+n.len-i.clock):(s<e&&(t[s]=n),s++)}t.length=s}))},mi=(t,e,s,i)=>{Se(t.clients,e,(()=>[])).push(new pi(s,i))},ki=()=>new gi,$i=(t,e)=>{gs(t.restEncoder,e.clients.size),e.clients.forEach(((e,s)=>{t.resetDsCurVal(),gs(t.restEncoder,s);const i=e.length;gs(t.restEncoder,i);for(let s=0;s<i;s++){const i=e[s];t.writeDsClock(i.clock),t.writeDsLen(i.len)}}))},xi=t=>{const e=new gi,s=Xe(t.restDecoder);for(let i=0;i<s;i++){t.resetDsCurVal();const s=Xe(t.restDecoder),i=Xe(t.restDecoder);if(i>0){const n=Se(e.clients,s,(()=>[]));for(let e=0;e<i;e++)n.push(new pi(t.readDsClock(),t.readDsLen()))}}return e},Si=(t,e,s)=>{const i=new gi,n=Xe(t.restDecoder);for(let r=0;r<n;r++){t.resetDsCurVal();const n=Xe(t.restDecoder),r=Xe(t.restDecoder),o=s.clients.get(n)||[],h=tn(s,n);for(let s=0;s<r;s++){const s=t.readDsClock(),r=s+t.readDsLen();if(s<h){h<r&&mi(i,n,h,r-h);let t=sn(o,s),l=o[t];for(!l.deleted&&l.id.clock<s&&(o.splice(t+1,0,zr(e,l,s-l.id.clock)),t++);t<o.length&&(l=o[t++],l.id.clock<r);)l.deleted||(r<l.id.clock+l.length&&o.splice(t,0,zr(e,l,r-l.id.clock)),l.delete(e))}else mi(i,n,s,r-s)}}if(i.clients.size>0){const t=new Ei;return gs(t.restEncoder,0),$i(t,i),t.toUint8Array()}return null},Mi=js;class Ai extends We{constructor({guid:t=zs(),collectionid:e=null,gc:s=!0,gcFilter:i=(()=>!0),meta:n=null,autoLoad:r=!1,shouldLoad:o=!0}={}){super(),this.gc=s,this.gcFilter=i,this.clientID=Mi(),this.guid=t,this.collectionid=e,this.share=new Map,this.store=new Xi,this._transaction=null,this._transactionCleanups=[],this.subdocs=new Set,this._item=null,this.shouldLoad=o,this.autoLoad=r,this.meta=n,this.isLoaded=!1,this.whenLoaded=(t=>new Promise(t))((t=>{this.on("load",(()=>{this.isLoaded=!0,t(this)}))}))}load(){const t=this._item;null===t||this.shouldLoad||wn(t.parent.doc,(t=>{t.subdocsLoaded.add(this)}),null,!0),this.shouldLoad=!0}getSubdocs(){return this.subdocs}getSubdocGuids(){return new Set(Array.from(this.subdocs).map((t=>t.guid)))}transact(t,e=null){wn(this,t,e)}get(t,e=Tn){const s=Se(this.share,t,(()=>{const t=new e;return t._integrate(this,null),t})),i=s.constructor;if(e!==Tn&&i!==e){if(i===Tn){const i=new e;i._map=s._map,s._map.forEach((t=>{for(;null!==t;t=t.left)t.parent=i})),i._start=s._start;for(let t=i._start;null!==t;t=t.right)t.parent=i;return i._length=s._length,this.share.set(t,i),i._integrate(this,null),i}throw new Error(`Type with the name ${t} has already been defined with a different constructor`)}return s}getArray(t=""){return this.get(t,Yn)}getText(t=""){return this.get(t,fr)}getMap(t=""){return this.get(t,Qn)}getXmlFragment(t=""){return this.get(t,pr)}toJSON(){const t={};return this.share.forEach(((e,s)=>{t[s]=e.toJSON()})),t}destroy(){_e(this.subdocs).forEach((t=>t.destroy()));const t=this._item;if(null!==t){this._item=null;const e=t.content;e.doc=new Ai({guid:this.guid,...e.opts,shouldLoad:!1}),e.doc._item=t,wn(t.parent.doc,(s=>{const i=e.doc;t.deleted||s.subdocsAdded.add(i),s.subdocsRemoved.add(this)}),null,!0)}this.emit("destroyed",[!0]),this.emit("destroy",[this]),super.destroy()}on(t,e){super.on(t,e)}off(t,e){super.off(t,e)}}class Ci{constructor(t){this.restDecoder=t}resetDsCurVal(){}readDsClock(){return Xe(this.restDecoder)}readDsLen(){return Xe(this.restDecoder)}}class _i extends Ci{readLeftID(){return Gi(Xe(this.restDecoder),Xe(this.restDecoder))}readRightID(){return Gi(Xe(this.restDecoder),Xe(this.restDecoder))}readClient(){return Xe(this.restDecoder)}readInfo(){return Ye(this.restDecoder)}readString(){return ts(this.restDecoder)}readParentInfo(){return 1===Xe(this.restDecoder)}readTypeRef(){return Xe(this.restDecoder)}readLen(){return Xe(this.restDecoder)}readAny(){return is(this.restDecoder)}readBuf(){return cs(Ze(this.restDecoder))}readJSON(){return JSON.parse(ts(this.restDecoder))}readKey(){return ts(this.restDecoder)}}class Wi extends class{constructor(t){this.dsCurrVal=0,this.restDecoder=t}resetDsCurVal(){this.dsCurrVal=0}readDsClock(){return this.dsCurrVal+=Xe(this.restDecoder),this.dsCurrVal}readDsLen(){const t=Xe(this.restDecoder)+1;return this.dsCurrVal+=t,t}}{constructor(t){super(t),this.keys=[],Xe(t),this.keyClockDecoder=new os(Ze(t)),this.clientDecoder=new rs(Ze(t)),this.leftClockDecoder=new os(Ze(t)),this.rightClockDecoder=new os(Ze(t)),this.infoDecoder=new ns(Ze(t),Ye),this.stringDecoder=new hs(Ze(t)),this.parentInfoDecoder=new ns(Ze(t),Ye),this.typeRefDecoder=new rs(Ze(t)),this.lenDecoder=new rs(Ze(t))}readLeftID(){return new Hi(this.clientDecoder.read(),this.leftClockDecoder.read())}readRightID(){return new Hi(this.clientDecoder.read(),this.rightClockDecoder.read())}readClient(){return this.clientDecoder.read()}readInfo(){return this.infoDecoder.read()}readString(){return this.stringDecoder.read()}readParentInfo(){return 1===this.parentInfoDecoder.read()}readTypeRef(){return this.typeRefDecoder.read()}readLen(){return this.lenDecoder.read()}readAny(){return is(this.restDecoder)}readBuf(){return Ze(this.restDecoder)}readJSON(){return is(this.restDecoder)}readKey(){const t=this.keyClockDecoder.read();if(t<this.keys.length)return this.keys[t];{const t=this.stringDecoder.read();return this.keys.push(t),t}}}class Oi extends class{constructor(){this.restEncoder=ds()}toUint8Array(){return fs(this.restEncoder)}resetDsCurVal(){}writeDsClock(t){gs(this.restEncoder,t)}writeDsLen(t){gs(this.restEncoder,t)}}{writeLeftID(t){gs(this.restEncoder,t.client),gs(this.restEncoder,t.clock)}writeRightID(t){gs(this.restEncoder,t.client),gs(this.restEncoder,t.clock)}writeClient(t){gs(this.restEncoder,t)}writeInfo(t){ps(this.restEncoder,t)}writeString(t){ys(this.restEncoder,t)}writeParentInfo(t){gs(this.restEncoder,t?1:0)}writeTypeRef(t){gs(this.restEncoder,t)}writeLen(t){gs(this.restEncoder,t)}writeAny(t){xs(this.restEncoder,t)}writeBuf(t){ms(this.restEncoder,t)}writeJSON(t){ys(this.restEncoder,JSON.stringify(t))}writeKey(t){ys(this.restEncoder,t)}}class Ei extends class{constructor(){this.restEncoder=ds(),this.dsCurrVal=0}toUint8Array(){return fs(this.restEncoder)}resetDsCurVal(){this.dsCurrVal=0}writeDsClock(t){const e=t-this.dsCurrVal;this.dsCurrVal=t,gs(this.restEncoder,e)}writeDsLen(t){0===t&&Hs(),gs(this.restEncoder,t-1),this.dsCurrVal+=t}}{constructor(){super(),this.keyMap=new Map,this.keyClock=0,this.keyClockEncoder=new _s,this.clientEncoder=new As,this.leftClockEncoder=new _s,this.rightClockEncoder=new _s,this.infoEncoder=new Ss(ps),this.stringEncoder=new Ws,this.parentInfoEncoder=new Ss(ps),this.typeRefEncoder=new As,this.lenEncoder=new As}toUint8Array(){const t=ds();return gs(t,0),ms(t,this.keyClockEncoder.toUint8Array()),ms(t,this.clientEncoder.toUint8Array()),ms(t,this.leftClockEncoder.toUint8Array()),ms(t,this.rightClockEncoder.toUint8Array()),ms(t,fs(this.infoEncoder)),ms(t,this.stringEncoder.toUint8Array()),ms(t,fs(this.parentInfoEncoder)),ms(t,this.typeRefEncoder.toUint8Array()),ms(t,this.lenEncoder.toUint8Array()),bs(t,fs(this.restEncoder)),fs(t)}writeLeftID(t){this.clientEncoder.write(t.client),this.leftClockEncoder.write(t.clock)}writeRightID(t){this.clientEncoder.write(t.client),this.rightClockEncoder.write(t.clock)}writeClient(t){this.clientEncoder.write(t)}writeInfo(t){this.infoEncoder.write(t)}writeString(t){this.stringEncoder.write(t)}writeParentInfo(t){this.parentInfoEncoder.write(t?1:0)}writeTypeRef(t){this.typeRefEncoder.write(t)}writeLen(t){this.lenEncoder.write(t)}writeAny(t){xs(this.restEncoder,t)}writeBuf(t){ms(this.restEncoder,t)}writeJSON(t){xs(this.restEncoder,t)}writeKey(t){const e=this.keyMap.get(t);void 0===e?(this.keyClockEncoder.write(this.keyClock++),this.stringEncoder.write(t)):this.keyClockEncoder.write(e)}}const Ui=(t,e,s)=>{const i=new Map;s.forEach(((t,s)=>{tn(e,s)>t&&i.set(s,t)})),Qi(e).forEach(((t,e)=>{s.has(e)||i.set(e,0)})),gs(t.restEncoder,i.size),Array.from(i.entries()).sort(((t,e)=>e[0]-t[0])).forEach((([s,i])=>{((t,e,s,i)=>{i=Re(i,e[0].id.clock);const n=sn(e,i);gs(t.restEncoder,e.length-n),t.writeClient(s),gs(t.restEncoder,i);const r=e[n];r.write(t,i-r.id.clock);for(let s=n+1;s<e.length;s++)e[s].write(t,0)})(t,e.clients.get(s),s,i)}))},Ti=(t,e,s,i=new Wi(t))=>wn(e,(t=>{t.local=!1;let e=!1;const s=t.doc,n=s.store,r=((t,e)=>{const s=$e(),i=Xe(t.restDecoder);for(let n=0;n<i;n++){const i=Xe(t.restDecoder),n=new Array(i),r=t.readClient();let o=Xe(t.restDecoder);s.set(r,{i:0,refs:n});for(let s=0;s<i;s++){const i=t.readInfo();switch(31&i){case 0:{const e=t.readLen();n[s]=new kr(Gi(r,o),e),o+=e;break}case 10:{const e=Xe(t.restDecoder);n[s]=new Hr(Gi(r,o),e),o+=e;break}default:{const h=0==(192&i),l=new Pr(Gi(r,o),null,128==(128&i)?t.readLeftID():null,null,64==(64&i)?t.readRightID():null,h?t.readParentInfo()?e.get(t.readString()):t.readLeftID():null,h&&32==(32&i)?t.readString():null,Jr(t,i));n[s]=l,o+=l.length}}}}return s})(i,s),o=((t,e,s)=>{const i=[];let n=Array.from(s.keys()).sort(((t,e)=>t-e));if(0===n.length)return null;const r=()=>{if(0===n.length)return null;let t=s.get(n[n.length-1]);for(;t.refs.length===t.i;){if(n.pop(),!(n.length>0))return null;t=s.get(n[n.length-1])}return t};let o=r();if(null===o&&0===i.length)return null;const h=new Xi,l=new Map,c=(t,e)=>{const s=l.get(t);(null==s||s>e)&&l.set(t,e)};let a=o.refs[o.i++];const u=new Map,d=()=>{for(const t of i){const e=t.id.client,i=s.get(e);i?(i.i--,h.clients.set(e,i.refs.slice(i.i)),s.delete(e),i.i=0,i.refs=[]):h.clients.set(e,[t]),n=n.filter((t=>t!==e))}i.length=0};for(;;){if(a.constructor!==Hr){const n=Se(u,a.id.client,(()=>tn(e,a.id.client)))-a.id.clock;if(n<0)i.push(a),c(a.id.client,a.id.clock-1),d();else{const r=a.getMissing(t,e);if(null!==r){i.push(a);const t=s.get(r)||{refs:[],i:0};if(t.refs.length!==t.i){a=t.refs[t.i++];continue}c(r,tn(e,r)),d()}else(0===n||n<a.length)&&(a.integrate(t,n),u.set(a.id.client,a.id.clock+a.length))}}if(i.length>0)a=i.pop();else if(null!==o&&o.i<o.refs.length)a=o.refs[o.i++];else{if(o=r(),null===o)break;a=o.refs[o.i++]}}if(h.clients.size>0){const t=new Ei;return Ui(t,h,new Map),gs(t.restEncoder,0),{missing:l,update:t.toUint8Array()}}return null})(t,n,r),h=n.pendingStructs;if(h){for(const[t,s]of h.missing)if(s<tn(n,t)){e=!0;break}if(o){for(const[t,e]of o.missing){const s=h.missing.get(t);(null==s||s>e)&&h.missing.set(t,e)}h.update=bn([h.update,o.update])}}else n.pendingStructs=o;const l=Si(i,t,n);if(n.pendingDs){const e=new Wi(Fe(n.pendingDs));Xe(e.restDecoder);const s=Si(e,t,n);n.pendingDs=l&&s?bn([l,s]):l||s}else n.pendingDs=l;if(e){const e=n.pendingStructs.update;n.pendingStructs=null,Ri(t.doc,e)}}),s,!1),Ri=(t,e,s,i=Wi)=>{const n=Fe(e);Ti(n,t,s,new i(n))},Di=(t,e,s)=>Ri(t,e,s,_i),Ni=(t,e,s=new Map)=>{Ui(t,e.store,s),$i(t,(t=>{const e=ki();return t.clients.forEach(((t,s)=>{const i=[];for(let e=0;e<t.length;e++){const s=t[e];if(s.deleted){const n=s.id.clock;let r=s.length;if(e+1<t.length)for(let s=t[e+1];e+1<t.length&&s.deleted;s=t[1+ ++e])r+=s.length;i.push(new pi(n,r))}}i.length>0&&e.clients.set(s,i)})),e})(e.store))},Ii=(t,e)=>((t,e=new Uint8Array([0]),s=new Ei)=>{const i=ji(e);Ni(s,t,i);const n=[s.toUint8Array()];if(t.store.pendingDs&&n.push(t.store.pendingDs),t.store.pendingStructs&&n.push(mn(t.store.pendingStructs.update,e)),n.length>1){if(s.constructor===Oi)return vn(n.map(((t,e)=>0===e?t:Sn(t))));if(s.constructor===Ei)return bn(n)}return n[0]})(t,e,new Oi),ji=t=>(t=>{const e=new Map,s=Xe(t.restDecoder);for(let i=0;i<s;i++){const s=Xe(t.restDecoder),i=Xe(t.restDecoder);e.set(s,i)}return e})(new Ci(Fe(t)));class Li{constructor(){this.l=[]}}const zi=()=>new Li,Pi=(t,e)=>t.l.push(e),Ji=(t,e)=>{const s=t.l,i=s.length;t.l=s.filter((t=>e!==t)),i===t.l.length&&console.error("[yjs] Tried to remove event handler that doesn't exist.")},Bi=(t,e,s)=>qs(t.l,[e,s]);class Hi{constructor(t,e){this.client=t,this.clock=e}}const Vi=(t,e)=>t===e||null!==t&&null!==e&&t.client===e.client&&t.clock===e.clock,Gi=(t,e)=>new Hi(t,e);class Ki{constructor(t,e){this.ds=t,this.sv=e}}var qi,Fi;qi=ki(),Fi=new Map,new Ki(qi,Fi);const Zi=(t,e)=>void 0===e?!t.deleted:e.sv.has(t.id.client)&&(e.sv.get(t.id.client)||0)>t.id.clock&&!yi(e.ds,t.id),Yi=(t,e)=>{const s=Se(t.meta,Yi,Me),i=t.doc.store;s.has(e)||(e.sv.forEach(((e,s)=>{e<tn(i,s)&&on(t,Gi(s,e))})),vi(t,e.ds,(t=>{})),s.add(e))};class Xi{constructor(){this.clients=new Map,this.pendingStructs=null,this.pendingDs=null}}const Qi=t=>{const e=new Map;return t.clients.forEach(((t,s)=>{const i=t[t.length-1];e.set(s,i.id.clock+i.length)})),e},tn=(t,e)=>{const s=t.clients.get(e);if(void 0===s)return 0;const i=s[s.length-1];return i.id.clock+i.length},en=(t,e)=>{let s=t.clients.get(e.id.client);if(void 0===s)s=[],t.clients.set(e.id.client,s);else{const t=s[s.length-1];if(t.id.clock+t.length!==e.id.clock)throw Hs()}s.push(e)},sn=(t,e)=>{let s=0,i=t.length-1,n=t[i],r=n.id.clock;if(r===e)return i;let o=Oe(e/(r+n.length-1)*i);for(;s<=i;){if(n=t[o],r=n.id.clock,r<=e){if(e<r+n.length)return o;s=o+1}else i=o-1;o=Oe((s+i)/2)}throw Hs()},nn=(t,e)=>{const s=t.clients.get(e.client);return s[sn(s,e.clock)]},rn=(t,e,s)=>{const i=sn(e,s),n=e[i];return n.id.clock<s&&n instanceof Pr?(e.splice(i+1,0,zr(t,n,s-n.id.clock)),i+1):i},on=(t,e)=>{const s=t.doc.store.clients.get(e.client);return s[rn(t,s,e.clock)]},hn=(t,e,s)=>{const i=e.clients.get(s.client),n=sn(i,s.clock),r=i[n];return s.clock!==r.id.clock+r.length-1&&r.constructor!==kr&&i.splice(n+1,0,zr(t,r,s.clock-r.id.clock+1)),r},ln=(t,e,s,i,n)=>{if(0===i)return;const r=s+i;let o,h=rn(t,e,s);do{o=e[h++],r<o.id.clock+o.length&&rn(t,e,r),n(o)}while(h<e.length&&e[h].id.clock<r)};class cn{constructor(t,e,s){this.doc=t,this.deleteSet=new gi,this.beforeState=Qi(t.store),this.afterState=new Map,this.changed=new Map,this.changedParentTypes=new Map,this._mergeStructs=[],this.origin=e,this.meta=new Map,this.local=s,this.subdocsAdded=new Set,this.subdocsRemoved=new Set,this.subdocsLoaded=new Set}}const an=(t,e)=>!(0===e.deleteSet.clients.size&&!((t,e)=>{for(const[s,i]of t)if(e(i,s))return!0;return!1})(e.afterState,((t,s)=>e.beforeState.get(s)!==t)))&&(bi(e.deleteSet),((t,e)=>{Ui(t,e.doc.store,e.beforeState)})(t,e),$i(t,e.deleteSet),!0),un=(t,e,s)=>{const i=e._item;(null===i||i.id.clock<(t.beforeState.get(i.id.client)||0)&&!i.deleted)&&Se(t.changed,e,Me).add(s)},dn=(t,e)=>{const s=t[e-1],i=t[e];s.deleted===i.deleted&&s.constructor===i.constructor&&s.mergeWith(i)&&(t.splice(e,1),i instanceof Pr&&null!==i.parentSub&&i.parent._map.get(i.parentSub)===i&&i.parent._map.set(i.parentSub,s))},fn=(t,e)=>{if(e<t.length){const s=t[e],i=s.doc,n=i.store,r=s.deleteSet,o=s._mergeStructs;try{bi(r),s.afterState=Qi(s.doc.store),i._transaction=null,i.emit("beforeObserverCalls",[s,i]);const h=[];s.changed.forEach(((t,e)=>h.push((()=>{null!==e._item&&e._item.deleted||e._callObserver(s,t)})))),h.push((()=>{s.changedParentTypes.forEach(((t,e)=>h.push((()=>{null!==e._item&&e._item.deleted||((t=t.filter((t=>null===t.target._item||!t.target._item.deleted))).forEach((t=>{t.currentTarget=e})),t.sort(((t,e)=>t.path.length-e.path.length)),Bi(e._dEH,t,s))})))),h.push((()=>i.emit("afterTransaction",[s,i])))})),qs(h,[])}finally{i.gc&&((t,e,s)=>{for(const[i,n]of t.clients.entries()){const t=e.clients.get(i);for(let i=n.length-1;i>=0;i--){const r=n[i],o=r.clock+r.len;for(let i=sn(t,r.clock),n=t[i];i<t.length&&n.id.clock<o;n=t[++i]){const n=t[i];if(r.clock+r.len<=n.id.clock)break;n instanceof Pr&&n.deleted&&!n.keep&&s(n)&&n.gc(e,!1)}}}})(r,n,i.gcFilter),((t,e)=>{t.clients.forEach(((t,s)=>{const i=e.clients.get(s);for(let e=t.length-1;e>=0;e--){const s=t[e];for(let t=Te(i.length-1,1+sn(i,s.clock+s.len-1)),e=i[t];t>0&&e.id.clock>=s.clock;e=i[--t])dn(i,t)}}))})(r,n),s.afterState.forEach(((t,e)=>{const i=s.beforeState.get(e)||0;if(i!==t){const t=n.clients.get(e),s=Re(sn(t,i),1);for(let e=t.length-1;e>=s;e--)dn(t,e)}}));for(let t=0;t<o.length;t++){const{client:e,clock:s}=o[t].id,i=n.clients.get(e),r=sn(i,s);r+1<i.length&&dn(i,r+1),r>0&&dn(i,r)}if(s.local||s.afterState.get(i.clientID)===s.beforeState.get(i.clientID)||(((...t)=>{console.log(...ui(t)),di.forEach((e=>e.print(t)))})(hi,ti,"[yjs] ",ei,ri,"Changed the client-id because another client seems to be using it."),i.clientID=Mi()),i.emit("afterTransactionCleanup",[s,i]),i._observers.has("update")){const t=new Oi;an(t,s)&&i.emit("update",[t.toUint8Array(),s.origin,i,s])}if(i._observers.has("updateV2")){const t=new Ei;an(t,s)&&i.emit("updateV2",[t.toUint8Array(),s.origin,i,s])}const{subdocsAdded:h,subdocsLoaded:l,subdocsRemoved:c}=s;(h.size>0||c.size>0||l.size>0)&&(h.forEach((t=>{t.clientID=i.clientID,null==t.collectionid&&(t.collectionid=i.collectionid),i.subdocs.add(t)})),c.forEach((t=>i.subdocs.delete(t))),i.emit("subdocs",[{loaded:l,added:h,removed:c},i,s]),c.forEach((t=>t.destroy()))),t.length<=e+1?(i._transactionCleanups=[],i.emit("afterAllTransactions",[i,t])):fn(t,e+1)}}},wn=(t,e,s=null,i=!0)=>{const n=t._transactionCleanups;let r=!1;null===t._transaction&&(r=!0,t._transaction=new cn(t,s,i),n.push(t._transaction),1===n.length&&t.emit("beforeAllTransactions",[t]),t.emit("beforeTransaction",[t._transaction,t]));try{e(t._transaction)}finally{r&&n[0]===t._transaction&&fn(n,0)}};class pn{constructor(t,e){this.gen=function*(t){const e=Xe(t.restDecoder);for(let s=0;s<e;s++){const e=Xe(t.restDecoder),s=t.readClient();let i=Xe(t.restDecoder);for(let n=0;n<e;n++){const e=t.readInfo();if(10===e){const e=Xe(t.restDecoder);yield new Hr(Gi(s,i),e),i+=e}else if(0!=(31&e)){const n=0==(192&e),r=new Pr(Gi(s,i),null,128==(128&e)?t.readLeftID():null,null,64==(64&e)?t.readRightID():null,n?t.readParentInfo()?t.readString():t.readLeftID():null,n&&32==(32&e)?t.readString():null,Jr(t,e));yield r,i+=r.length}else{const e=t.readLen();yield new kr(Gi(s,i),e),i+=e}}}}(t),this.curr=null,this.done=!1,this.filterSkips=e,this.next()}next(){do{this.curr=this.gen.next().value||null}while(this.filterSkips&&null!==this.curr&&this.curr.constructor===Hr);return this.curr}}class gn{constructor(t){this.currClient=0,this.startClock=0,this.written=0,this.encoder=t,this.clientStructs=[]}}const vn=t=>bn(t,_i,Oi),yn=(t,e)=>{if(t.constructor===kr){const{client:s,clock:i}=t.id;return new kr(Gi(s,i+e),t.length-e)}if(t.constructor===Hr){const{client:s,clock:i}=t.id;return new Hr(Gi(s,i+e),t.length-e)}{const s=t,{client:i,clock:n}=s.id;return new Pr(Gi(i,n+e),null,Gi(i,n+e-1),null,s.rightOrigin,s.parent,s.parentSub,s.content.splice(e))}},bn=(t,e=Wi,s=Ei)=>{if(1===t.length)return t[0];const i=t.map((t=>new e(Fe(t))));let n=i.map((t=>new pn(t,!0))),r=null;const o=new s,h=new gn(o);for(;n=n.filter((t=>null!==t.curr)),n.sort(((t,e)=>{if(t.curr.id.client===e.curr.id.client){const s=t.curr.id.clock-e.curr.id.clock;return 0===s?t.curr.constructor===e.curr.constructor?0:t.curr.constructor===Hr?1:-1:s}return e.curr.id.client-t.curr.id.client})),0!==n.length;){const t=n[0],e=t.curr.id.client;if(null!==r){let s=t.curr,i=!1;for(;null!==s&&s.id.clock+s.length<=r.struct.id.clock+r.struct.length&&s.id.client>=r.struct.id.client;)s=t.next(),i=!0;if(null===s||s.id.client!==e||i&&s.id.clock>r.struct.id.clock+r.struct.length)continue;if(e!==r.struct.id.client)$n(h,r.struct,r.offset),r={struct:s,offset:0},t.next();else if(r.struct.id.clock+r.struct.length<s.id.clock)if(r.struct.constructor===Hr)r.struct.length=s.id.clock+s.length-r.struct.id.clock;else{$n(h,r.struct,r.offset);const t=s.id.clock-r.struct.id.clock-r.struct.length;r={struct:new Hr(Gi(e,r.struct.id.clock+r.struct.length),t),offset:0}}else{const e=r.struct.id.clock+r.struct.length-s.id.clock;e>0&&(r.struct.constructor===Hr?r.struct.length-=e:s=yn(s,e)),r.struct.mergeWith(s)||($n(h,r.struct,r.offset),r={struct:s,offset:0},t.next())}}else r={struct:t.curr,offset:0},t.next();for(let s=t.curr;null!==s&&s.id.client===e&&s.id.clock===r.struct.id.clock+r.struct.length&&s.constructor!==Hr;s=t.next())$n(h,r.struct,r.offset),r={struct:s,offset:0}}null!==r&&($n(h,r.struct,r.offset),r=null),xn(h);const l=(t=>{const e=new gi;for(let s=0;s<t.length;s++)t[s].clients.forEach(((i,n)=>{if(!e.clients.has(n)){const r=i.slice();for(let e=s+1;e<t.length;e++)Ce(r,t[e].clients.get(n)||[]);e.clients.set(n,r)}}));return bi(e),e})(i.map((t=>xi(t))));return $i(o,l),o.toUint8Array()},mn=(t,e,s=Wi,i=Ei)=>{const n=ji(e),r=new i,o=new gn(r),h=new s(Fe(t)),l=new pn(h,!1);for(;l.curr;){const t=l.curr,e=t.id.client,s=n.get(e)||0;if(l.curr.constructor!==Hr)if(t.id.clock+t.length>s)for($n(o,t,Re(s-t.id.clock,0)),l.next();l.curr&&l.curr.id.client===e;)$n(o,l.curr,0),l.next();else for(;l.curr&&l.curr.id.client===e&&l.curr.id.clock+l.curr.length<=s;)l.next();else l.next()}xn(o);const c=xi(h);return $i(r,c),r.toUint8Array()},kn=t=>{t.written>0&&(t.clientStructs.push({written:t.written,restEncoder:fs(t.encoder.restEncoder)}),t.encoder.restEncoder=ds(),t.written=0)},$n=(t,e,s)=>{t.written>0&&t.currClient!==e.id.client&&kn(t),0===t.written&&(t.currClient=e.id.client,t.encoder.writeClient(e.id.client),gs(t.encoder.restEncoder,e.id.clock+s)),e.write(t.encoder,s),t.written++},xn=t=>{kn(t);const e=t.encoder.restEncoder;gs(e,t.clientStructs.length);for(let s=0;s<t.clientStructs.length;s++){const i=t.clientStructs[s];gs(e,i.written),bs(e,i.restEncoder)}},Sn=t=>((t,e,s)=>{const i=new e(Fe(t)),n=new pn(i,!1),r=new s,o=new gn(r);for(let t=n.curr;null!==t;t=n.next())$n(o,t,0);xn(o);const h=xi(i);return $i(r,h),r.toUint8Array()})(t,Wi,Oi);class Mn{constructor(t,e){this.target=t,this.currentTarget=t,this.transaction=e,this._changes=null,this._keys=null,this._delta=null}get path(){return An(this.currentTarget,this.target)}deletes(t){return yi(this.transaction.deleteSet,t.id)}get keys(){if(null===this._keys){const t=new Map,e=this.target;this.transaction.changed.get(e).forEach((s=>{if(null!==s){const i=e._map.get(s);let n,r;if(this.adds(i)){let t=i.left;for(;null!==t&&this.adds(t);)t=t.left;if(this.deletes(i)){if(null===t||!this.deletes(t))return;n="delete",r=Ae(t.content.getContent())}else null!==t&&this.deletes(t)?(n="update",r=Ae(t.content.getContent())):(n="add",r=void 0)}else{if(!this.deletes(i))return;n="delete",r=Ae(i.content.getContent())}t.set(s,{action:n,oldValue:r})}})),this._keys=t}return this._keys}get delta(){return this.changes.delta}adds(t){return t.id.clock>=(this.transaction.beforeState.get(t.id.client)||0)}get changes(){let t=this._changes;if(null===t){const e=this.target,s=Me(),i=Me(),n=[];t={added:s,deleted:i,delta:n,keys:this.keys};if(this.transaction.changed.get(e).has(null)){let t=null;const r=()=>{t&&n.push(t)};for(let n=e._start;null!==n;n=n.right)n.deleted?this.deletes(n)&&!this.adds(n)&&(null!==t&&void 0!==t.delete||(r(),t={delete:0}),t.delete+=n.length,i.add(n)):this.adds(n)?(null!==t&&void 0!==t.insert||(r(),t={insert:[]}),t.insert=t.insert.concat(n.content.getContent()),s.add(n)):(null!==t&&void 0!==t.retain||(r(),t={retain:0}),t.retain+=n.length);null!==t&&void 0===t.retain&&r()}this._changes=t}return t}}const An=(t,e)=>{const s=[];for(;null!==e._item&&e!==t;){if(null!==e._item.parentSub)s.unshift(e._item.parentSub);else{let t=0,i=e._item.parent._start;for(;i!==e._item&&null!==i;)i.deleted||t++,i=i.right;s.unshift(t)}e=e._item.parent}return s};let Cn=0;class _n{constructor(t,e){t.marker=!0,this.p=t,this.index=e,this.timestamp=Cn++}}const Wn=(t,e,s)=>{t.p.marker=!1,t.p=e,e.marker=!0,t.index=s,t.timestamp=Cn++},On=(t,e)=>{if(null===t._start||0===e||null===t._searchMarker)return null;const s=0===t._searchMarker.length?null:t._searchMarker.reduce(((t,s)=>Ee(e-t.index)<Ee(e-s.index)?t:s));let i=t._start,n=0;for(null!==s&&(i=s.p,n=s.index,(t=>{t.timestamp=Cn++})(s));null!==i.right&&n<e;){if(!i.deleted&&i.countable){if(e<n+i.length)break;n+=i.length}i=i.right}for(;null!==i.left&&n>e;)i=i.left,!i.deleted&&i.countable&&(n-=i.length);for(;null!==i.left&&i.left.id.client===i.id.client&&i.left.id.clock+i.left.length===i.id.clock;)i=i.left,!i.deleted&&i.countable&&(n-=i.length);return null!==s&&Ee(s.index-n)<i.parent.length/80?(Wn(s,i,n),s):((t,e,s)=>{if(t.length>=80){const i=t.reduce(((t,e)=>t.timestamp<e.timestamp?t:e));return Wn(i,e,s),i}{const i=new _n(e,s);return t.push(i),i}})(t._searchMarker,i,n)},En=(t,e,s)=>{for(let i=t.length-1;i>=0;i--){const n=t[i];if(s>0){let e=n.p;for(e.marker=!1;e&&(e.deleted||!e.countable);)e=e.left,e&&!e.deleted&&e.countable&&(n.index-=e.length);if(null===e||!0===e.marker){t.splice(i,1);continue}n.p=e,e.marker=!0}(e<n.index||s>0&&e===n.index)&&(n.index=Re(e,n.index+s))}},Un=(t,e,s)=>{const i=t,n=e.changedParentTypes;for(;Se(n,t,(()=>[])).push(s),null!==t._item;)t=t._item.parent;Bi(i._eH,s,e)};class Tn{constructor(){this._item=null,this._map=new Map,this._start=null,this.doc=null,this._length=0,this._eH=zi(),this._dEH=zi(),this._searchMarker=null}get parent(){return this._item?this._item.parent:null}_integrate(t,e){this.doc=t,this._item=e}_copy(){throw Bs()}clone(){throw Bs()}_write(t){}get _first(){let t=this._start;for(;null!==t&&t.deleted;)t=t.right;return t}_callObserver(t,e){!t.local&&this._searchMarker&&(this._searchMarker.length=0)}observe(t){Pi(this._eH,t)}observeDeep(t){Pi(this._dEH,t)}unobserve(t){Ji(this._eH,t)}unobserveDeep(t){Ji(this._dEH,t)}toJSON(){}}const Rn=(t,e,s)=>{e<0&&(e=t._length+e),s<0&&(s=t._length+s);let i=s-e;const n=[];let r=t._start;for(;null!==r&&i>0;){if(r.countable&&!r.deleted){const t=r.content.getContent();if(t.length<=e)e-=t.length;else{for(let s=e;s<t.length&&i>0;s++)n.push(t[s]),i--;e=0}}r=r.right}return n},Dn=t=>{const e=[];let s=t._start;for(;null!==s;){if(s.countable&&!s.deleted){const t=s.content.getContent();for(let s=0;s<t.length;s++)e.push(t[s])}s=s.right}return e},Nn=(t,e)=>{let s=0,i=t._start;for(;null!==i;){if(i.countable&&!i.deleted){const n=i.content.getContent();for(let i=0;i<n.length;i++)e(n[i],s++,t)}i=i.right}},In=(t,e)=>{const s=[];return Nn(t,((i,n)=>{s.push(e(i,n,t))})),s},jn=t=>{let e=t._start,s=null,i=0;return{[Symbol.iterator](){return this},next:()=>{if(null===s){for(;null!==e&&e.deleted;)e=e.right;if(null===e)return{done:!0,value:void 0};s=e.content.getContent(),i=0,e=e.right}const t=s[i++];return s.length<=i&&(s=null),{done:!1,value:t}}}},Ln=(t,e)=>{const s=On(t,e);let i=t._start;for(null!==s&&(i=s.p,e-=s.index);null!==i;i=i.right)if(!i.deleted&&i.countable){if(e<i.length)return i.content.getContent()[e];e-=i.length}},zn=(t,e,s,i)=>{let n=s;const r=t.doc,o=r.clientID,h=r.store,l=null===s?e._start:s.right;let c=[];const a=()=>{c.length>0&&(n=new Pr(Gi(o,tn(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new Wr(c)),n.integrate(t,0),c=[])};i.forEach((s=>{if(null===s)c.push(s);else switch(s.constructor){case Number:case Object:case Boolean:case Array:case String:c.push(s);break;default:switch(a(),s.constructor){case Uint8Array:case ArrayBuffer:n=new Pr(Gi(o,tn(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new $r(new Uint8Array(s))),n.integrate(t,0);break;case Ai:n=new Pr(Gi(o,tn(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new Mr(s)),n.integrate(t,0);break;default:if(!(s instanceof Tn))throw new Error("Unexpected content type in insert operation");n=new Pr(Gi(o,tn(h,o)),n,n&&n.lastId,l,l&&l.id,e,null,new Lr(s)),n.integrate(t,0)}}})),a()},Pn=Js("Length exceeded!"),Jn=(t,e,s,i)=>{if(s>e._length)throw Pn;if(0===s)return e._searchMarker&&En(e._searchMarker,s,i.length),zn(t,e,null,i);const n=s,r=On(e,s);let o=e._start;for(null!==r&&(o=r.p,0===(s-=r.index)&&(o=o.prev,s+=o&&o.countable&&!o.deleted?o.length:0));null!==o;o=o.right)if(!o.deleted&&o.countable){if(s<=o.length){s<o.length&&on(t,Gi(o.id.client,o.id.clock+s));break}s-=o.length}return e._searchMarker&&En(e._searchMarker,n,i.length),zn(t,e,o,i)},Bn=(t,e,s,i)=>{if(0===i)return;const n=s,r=i,o=On(e,s);let h=e._start;for(null!==o&&(h=o.p,s-=o.index);null!==h&&s>0;h=h.right)!h.deleted&&h.countable&&(s<h.length&&on(t,Gi(h.id.client,h.id.clock+s)),s-=h.length);for(;i>0&&null!==h;)h.deleted||(i<h.length&&on(t,Gi(h.id.client,h.id.clock+i)),h.delete(t),i-=h.length),h=h.right;if(i>0)throw Pn;e._searchMarker&&En(e._searchMarker,n,-r+i)},Hn=(t,e,s)=>{const i=e._map.get(s);void 0!==i&&i.delete(t)},Vn=(t,e,s,i)=>{const n=e._map.get(s)||null,r=t.doc,o=r.clientID;let h;if(null==i)h=new Wr([i]);else switch(i.constructor){case Number:case Object:case Boolean:case Array:case String:h=new Wr([i]);break;case Uint8Array:h=new $r(i);break;case Ai:h=new Mr(i);break;default:if(!(i instanceof Tn))throw new Error("Unexpected content type");h=new Lr(i)}new Pr(Gi(o,tn(r.store,o)),n,n&&n.lastId,null,null,e,s,h).integrate(t,0)},Gn=(t,e)=>{const s=t._map.get(e);return void 0===s||s.deleted?void 0:s.content.getContent()[s.length-1]},Kn=t=>{const e={};return t._map.forEach(((t,s)=>{t.deleted||(e[s]=t.content.getContent()[t.length-1])})),e},qn=(t,e)=>{const s=t._map.get(e);return void 0!==s&&!s.deleted},Fn=t=>((t,e)=>fi((()=>{let s;do{s=t.next()}while(!s.done&&!e(s.value));return s})))(t.entries(),(t=>!t[1].deleted));class Zn extends Mn{constructor(t,e){super(t,e),this._transaction=e}}class Yn extends Tn{constructor(){super(),this._prelimContent=[],this._searchMarker=[]}static from(t){const e=new Yn;return e.push(t),e}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new Yn}clone(){const t=new Yn;return t.insert(0,this.toArray().map((t=>t instanceof Tn?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}_callObserver(t,e){super._callObserver(t,e),Un(this,t,new Zn(this,t))}insert(t,e){null!==this.doc?wn(this.doc,(s=>{Jn(s,this,t,e)})):this._prelimContent.splice(t,0,...e)}push(t){null!==this.doc?wn(this.doc,(e=>{((t,e,s)=>{let i=(e._searchMarker||[]).reduce(((t,e)=>e.index>t.index?e:t),{index:0,p:e._start}).p;if(i)for(;i.right;)i=i.right;zn(t,e,i,s)})(e,this,t)})):this._prelimContent.push(...t)}unshift(t){this.insert(0,t)}delete(t,e=1){null!==this.doc?wn(this.doc,(s=>{Bn(s,this,t,e)})):this._prelimContent.splice(t,e)}get(t){return Ln(this,t)}toArray(){return Dn(this)}slice(t=0,e=this.length){return Rn(this,t,e)}toJSON(){return this.map((t=>t instanceof Tn?t.toJSON():t))}map(t){return In(this,t)}forEach(t){Nn(this,t)}[Symbol.iterator](){return jn(this)}_write(t){t.writeTypeRef(Ur)}}class Xn extends Mn{constructor(t,e,s){super(t,e),this.keysChanged=s}}class Qn extends Tn{constructor(t){super(),this._prelimContent=null,this._prelimContent=void 0===t?new Map:new Map(t)}_integrate(t,e){super._integrate(t,e),this._prelimContent.forEach(((t,e)=>{this.set(e,t)})),this._prelimContent=null}_copy(){return new Qn}clone(){const t=new Qn;return this.forEach(((e,s)=>{t.set(s,e instanceof Tn?e.clone():e)})),t}_callObserver(t,e){Un(this,t,new Xn(this,t,e))}toJSON(){const t={};return this._map.forEach(((e,s)=>{if(!e.deleted){const i=e.content.getContent()[e.length-1];t[s]=i instanceof Tn?i.toJSON():i}})),t}get size(){return[...Fn(this._map)].length}keys(){return wi(Fn(this._map),(t=>t[0]))}values(){return wi(Fn(this._map),(t=>t[1].content.getContent()[t[1].length-1]))}entries(){return wi(Fn(this._map),(t=>[t[0],t[1].content.getContent()[t[1].length-1]]))}forEach(t){return this._map.forEach(((e,s)=>{e.deleted||t(e.content.getContent()[e.length-1],s,this)})),{}}[Symbol.iterator](){return this.entries()}delete(t){null!==this.doc?wn(this.doc,(e=>{Hn(e,this,t)})):this._prelimContent.delete(t)}set(t,e){return null!==this.doc?wn(this.doc,(s=>{Vn(s,this,t,e)})):this._prelimContent.set(t,e),e}get(t){return Gn(this,t)}has(t){return qn(this,t)}clear(){null!==this.doc?wn(this.doc,(t=>{this.forEach((function(e,s,i){Hn(t,i,s)}))})):this._prelimContent.clear()}_write(t){t.writeTypeRef(Tr)}}const tr=(t,e)=>t===e||"object"==typeof t&&"object"==typeof e&&t&&e&&Ks(t,e);class er{constructor(t,e,s,i){this.left=t,this.right=e,this.index=s,this.currentAttributes=i}forward(){if(null===this.right&&Hs(),this.right.content.constructor===Cr)this.right.deleted||rr(this.currentAttributes,this.right.content);else this.right.deleted||(this.index+=this.right.length);this.left=this.right,this.right=this.right.right}}const sr=(t,e,s)=>{for(;null!==e.right&&s>0;){if(e.right.content.constructor===Cr)e.right.deleted||rr(e.currentAttributes,e.right.content);else e.right.deleted||(s<e.right.length&&on(t,Gi(e.right.id.client,e.right.id.clock+s)),e.index+=e.right.length,s-=e.right.length);e.left=e.right,e.right=e.right.right}return e},ir=(t,e,s)=>{const i=new Map,n=On(e,s);if(n){const e=new er(n.p.left,n.p,n.index,i);return sr(t,e,s-n.index)}{const n=new er(null,e._start,0,i);return sr(t,n,s)}},nr=(t,e,s,i)=>{for(;null!==s.right&&(!0===s.right.deleted||s.right.content.constructor===Cr&&tr(i.get(s.right.content.key),s.right.content.value));)s.right.deleted||i.delete(s.right.content.key),s.forward();const n=t.doc,r=n.clientID;i.forEach(((i,o)=>{const h=s.left,l=s.right,c=new Pr(Gi(r,tn(n.store,r)),h,h&&h.lastId,l,l&&l.id,e,null,new Cr(o,i));c.integrate(t,0),s.right=c,s.forward()}))},rr=(t,e)=>{const{key:s,value:i}=e;null===i?t.delete(s):t.set(s,i)},or=(t,e)=>{for(;null!==t.right&&(t.right.deleted||t.right.content.constructor===Cr&&tr(e[t.right.content.key]||null,t.right.content.value));)t.forward()},hr=(t,e,s,i)=>{const n=t.doc,r=n.clientID,o=new Map;for(const h in i){const l=i[h],c=s.currentAttributes.get(h)||null;if(!tr(c,l)){o.set(h,c);const{left:i,right:a}=s;s.right=new Pr(Gi(r,tn(n.store,r)),i,i&&i.lastId,a,a&&a.id,e,null,new Cr(h,l)),s.right.integrate(t,0),s.forward()}}return o},lr=(t,e,s,i,n)=>{s.currentAttributes.forEach(((t,e)=>{void 0===n[e]&&(n[e]=null)}));const r=t.doc,o=r.clientID;or(s,n);const h=hr(t,e,s,n),l=i.constructor===String?new Or(i):i instanceof Tn?new Lr(i):new Ar(i);let{left:c,right:a,index:u}=s;e._searchMarker&&En(e._searchMarker,s.index,l.getLength()),a=new Pr(Gi(o,tn(r.store,o)),c,c&&c.lastId,a,a&&a.id,e,null,l),a.integrate(t,0),s.right=a,s.index=u,s.forward(),nr(t,e,s,h)},cr=(t,e,s,i,n)=>{const r=t.doc,o=r.clientID;or(s,n);const h=hr(t,e,s,n);t:for(;null!==s.right&&(i>0||h.size>0&&(s.right.deleted||s.right.content.constructor===Cr));){if(!s.right.deleted)switch(s.right.content.constructor){case Cr:{const{key:e,value:r}=s.right.content,o=n[e];if(void 0!==o){if(tr(o,r))h.delete(e);else{if(0===i)break t;h.set(e,r)}s.right.delete(t)}else s.currentAttributes.set(e,r);break}default:i<s.right.length&&on(t,Gi(s.right.id.client,s.right.id.clock+i)),i-=s.right.length}s.forward()}if(i>0){let n="";for(;i>0;i--)n+="\n";s.right=new Pr(Gi(o,tn(r.store,o)),s.left,s.left&&s.left.lastId,s.right,s.right&&s.right.id,e,null,new Or(n)),s.right.integrate(t,0),s.forward()}nr(t,e,s,h)},ar=(t,e,s,i,n)=>{let r=s;const o=xe(n);for(;r&&(!r.countable||r.deleted);)r.deleted||r.content.constructor!==Cr||rr(o,r.content),r=r.right;let h=0,l=!1;for(;e!==r;){if(s===e&&(l=!0),!e.deleted){const s=e.content;switch(s.constructor){case Cr:{const{key:r,value:c}=s;(o.get(r)||null)===c&&(i.get(r)||null)!==c||(e.delete(t),h++,l||(n.get(r)||null)!==c||(i.get(r)||null)===c||n.delete(r));break}}}e=e.right}return h},ur=(t,e,s)=>{const i=s,n=xe(e.currentAttributes),r=e.right;for(;s>0&&null!==e.right;){if(!1===e.right.deleted)switch(e.right.content.constructor){case Lr:case Ar:case Or:s<e.right.length&&on(t,Gi(e.right.id.client,e.right.id.clock+s)),s-=e.right.length,e.right.delete(t)}e.forward()}r&&ar(t,r,e.right,n,e.currentAttributes);const o=(e.left||e.right).parent;return o._searchMarker&&En(o._searchMarker,e.index,-i+s),e};class dr extends Mn{constructor(t,e,s){super(t,e),this.childListChanged=!1,this.keysChanged=new Set,s.forEach((t=>{null===t?this.childListChanged=!0:this.keysChanged.add(t)}))}get changes(){if(null===this._changes){const t={keys:this.keys,delta:this.delta,added:new Set,deleted:new Set};this._changes=t}return this._changes}get delta(){if(null===this._delta){const t=this.target.doc,e=[];wn(t,(t=>{const s=new Map,i=new Map;let n=this.target._start,r=null;const o={};let h="",l=0,c=0;const a=()=>{if(null!==r){let t;switch(r){case"delete":t={delete:c},c=0;break;case"insert":t={insert:h},s.size>0&&(t.attributes={},s.forEach(((e,s)=>{null!==e&&(t.attributes[s]=e)}))),h="";break;case"retain":if(t={retain:l},Object.keys(o).length>0){t.attributes={};for(const e in o)t.attributes[e]=o[e]}l=0}e.push(t),r=null}};for(;null!==n;){switch(n.content.constructor){case Lr:case Ar:this.adds(n)?this.deletes(n)||(a(),r="insert",h=n.content.getContent()[0],a()):this.deletes(n)?("delete"!==r&&(a(),r="delete"),c+=1):n.deleted||("retain"!==r&&(a(),r="retain"),l+=1);break;case Or:this.adds(n)?this.deletes(n)||("insert"!==r&&(a(),r="insert"),h+=n.content.str):this.deletes(n)?("delete"!==r&&(a(),r="delete"),c+=n.length):n.deleted||("retain"!==r&&(a(),r="retain"),l+=n.length);break;case Cr:{const{key:e,value:h}=n.content;if(this.adds(n)){if(!this.deletes(n)){const l=s.get(e)||null;tr(l,h)?null!==h&&n.delete(t):("retain"===r&&a(),tr(h,i.get(e)||null)?delete o[e]:o[e]=h)}}else if(this.deletes(n)){i.set(e,h);const t=s.get(e)||null;tr(t,h)||("retain"===r&&a(),o[e]=t)}else if(!n.deleted){i.set(e,h);const s=o[e];void 0!==s&&(tr(s,h)?null!==s&&n.delete(t):("retain"===r&&a(),null===h?delete o[e]:o[e]=h))}n.deleted||("insert"===r&&a(),rr(s,n.content));break}}n=n.right}for(a();e.length>0;){const t=e[e.length-1];if(void 0===t.retain||void 0!==t.attributes)break;e.pop()}})),this._delta=e}return this._delta}}class fr extends Tn{constructor(t){super(),this._pending=void 0!==t?[()=>this.insert(0,t)]:[],this._searchMarker=[]}get length(){return this._length}_integrate(t,e){super._integrate(t,e);try{this._pending.forEach((t=>t()))}catch(t){console.error(t)}this._pending=null}_copy(){return new fr}clone(){const t=new fr;return t.applyDelta(this.toDelta()),t}_callObserver(t,e){super._callObserver(t,e);const s=new dr(this,t,e),i=t.doc;if(Un(this,t,s),!t.local){let e=!1;for(const[s,n]of t.afterState.entries()){const r=t.beforeState.get(s)||0;if(n!==r&&(ln(t,i.store.clients.get(s),r,n,(t=>{t.deleted||t.content.constructor!==Cr||(e=!0)})),e))break}e||vi(t,t.deleteSet,(t=>{t instanceof kr||e||t.parent===this&&t.content.constructor===Cr&&(e=!0)})),wn(i,(t=>{e?(t=>{let e=0;wn(t.doc,(s=>{let i=t._start,n=t._start,r=$e();const o=xe(r);for(;n;)!1===n.deleted&&(n.content.constructor===Cr?rr(o,n.content):(e+=ar(s,i,n,r,o),r=xe(o),i=n)),n=n.right}))})(this):vi(t,t.deleteSet,(e=>{e instanceof kr||e.parent===this&&((t,e)=>{for(;e&&e.right&&(e.right.deleted||!e.right.countable);)e=e.right;const s=new Set;for(;e&&(e.deleted||!e.countable);){if(!e.deleted&&e.content.constructor===Cr){const i=e.content.key;s.has(i)?e.delete(t):s.add(i)}e=e.left}})(t,e)}))}))}}toString(){let t="",e=this._start;for(;null!==e;)!e.deleted&&e.countable&&e.content.constructor===Or&&(t+=e.content.str),e=e.right;return t}toJSON(){return this.toString()}applyDelta(t,{sanitize:e=!0}={}){null!==this.doc?wn(this.doc,(s=>{const i=new er(null,this._start,0,new Map);for(let n=0;n<t.length;n++){const r=t[n];if(void 0!==r.insert){const o=e||"string"!=typeof r.insert||n!==t.length-1||null!==i.right||"\n"!==r.insert.slice(-1)?r.insert:r.insert.slice(0,-1);("string"!=typeof o||o.length>0)&&lr(s,this,i,o,r.attributes||{})}else void 0!==r.retain?cr(s,this,i,r.retain,r.attributes||{}):void 0!==r.delete&&ur(s,i,r.delete)}})):this._pending.push((()=>this.applyDelta(t)))}toDelta(t,e,s){const i=[],n=new Map,r=this.doc;let o="",h=this._start;function l(){if(o.length>0){const t={};let e=!1;n.forEach(((s,i)=>{e=!0,t[i]=s}));const s={insert:o};e&&(s.attributes=t),i.push(s),o=""}}return wn(r,(r=>{for(t&&Yi(r,t),e&&Yi(r,e);null!==h;){if(Zi(h,t)||void 0!==e&&Zi(h,e))switch(h.content.constructor){case Or:{const i=n.get("ychange");void 0===t||Zi(h,t)?void 0===e||Zi(h,e)?void 0!==i&&(l(),n.delete("ychange")):void 0!==i&&i.user===h.id.client&&"added"===i.state||(l(),n.set("ychange",s?s("added",h.id):{type:"added"})):void 0!==i&&i.user===h.id.client&&"removed"===i.state||(l(),n.set("ychange",s?s("removed",h.id):{type:"removed"})),o+=h.content.str;break}case Lr:case Ar:{l();const t={insert:h.content.getContent()[0]};if(n.size>0){const e={};t.attributes=e,n.forEach(((t,s)=>{e[s]=t}))}i.push(t);break}case Cr:Zi(h,t)&&(l(),rr(n,h.content))}h=h.right}l()}),Yi),i}insert(t,e,s){if(e.length<=0)return;const i=this.doc;null!==i?wn(i,(i=>{const n=ir(i,this,t);s||(s={},n.currentAttributes.forEach(((t,e)=>{s[e]=t}))),lr(i,this,n,e,s)})):this._pending.push((()=>this.insert(t,e,s)))}insertEmbed(t,e,s={}){const i=this.doc;null!==i?wn(i,(i=>{const n=ir(i,this,t);lr(i,this,n,e,s)})):this._pending.push((()=>this.insertEmbed(t,e,s)))}delete(t,e){if(0===e)return;const s=this.doc;null!==s?wn(s,(s=>{ur(s,ir(s,this,t),e)})):this._pending.push((()=>this.delete(t,e)))}format(t,e,s){if(0===e)return;const i=this.doc;null!==i?wn(i,(i=>{const n=ir(i,this,t);null!==n.right&&cr(i,this,n,e,s)})):this._pending.push((()=>this.format(t,e,s)))}removeAttribute(t){null!==this.doc?wn(this.doc,(e=>{Hn(e,this,t)})):this._pending.push((()=>this.removeAttribute(t)))}setAttribute(t,e){null!==this.doc?wn(this.doc,(s=>{Vn(s,this,t,e)})):this._pending.push((()=>this.setAttribute(t,e)))}getAttribute(t){return Gn(this,t)}getAttributes(t){return Kn(this)}_write(t){t.writeTypeRef(Rr)}}class wr{constructor(t,e=(()=>!0)){this._filter=e,this._root=t,this._currentNode=t._start,this._firstCall=!0}[Symbol.iterator](){return this}next(){let t=this._currentNode,e=t&&t.content&&t.content.type;if(null!==t&&(!this._firstCall||t.deleted||!this._filter(e)))do{if(e=t.content.type,t.deleted||e.constructor!==gr&&e.constructor!==pr||null===e._start)for(;null!==t;){if(null!==t.right){t=t.right;break}t=t.parent===this._root?null:t.parent._item}else t=e._start}while(null!==t&&(t.deleted||!this._filter(t.content.type)));return this._firstCall=!1,null===t?{value:void 0,done:!0}:(this._currentNode=t,{value:t.content.type,done:!1})}}class pr extends Tn{constructor(){super(),this._prelimContent=[]}get firstChild(){const t=this._first;return t?t.content.getContent()[0]:null}_integrate(t,e){super._integrate(t,e),this.insert(0,this._prelimContent),this._prelimContent=null}_copy(){return new pr}clone(){const t=new pr;return t.insert(0,this.toArray().map((t=>t instanceof Tn?t.clone():t))),t}get length(){return null===this._prelimContent?this._length:this._prelimContent.length}createTreeWalker(t){return new wr(this,t)}querySelector(t){t=t.toUpperCase();const e=new wr(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)).next();return e.done?null:e.value}querySelectorAll(t){return t=t.toUpperCase(),Array.from(new wr(this,(e=>e.nodeName&&e.nodeName.toUpperCase()===t)))}_callObserver(t,e){Un(this,t,new vr(this,e,t))}toString(){return In(this,(t=>t.toString())).join("")}toJSON(){return this.toString()}toDOM(t=document,e={},s){const i=t.createDocumentFragment();return void 0!==s&&s._createAssociation(i,this),Nn(this,(n=>{i.insertBefore(n.toDOM(t,e,s),null)})),i}insert(t,e){null!==this.doc?wn(this.doc,(s=>{Jn(s,this,t,e)})):this._prelimContent.splice(t,0,...e)}insertAfter(t,e){if(null!==this.doc)wn(this.doc,(s=>{const i=t&&t instanceof Tn?t._item:t;zn(s,this,i,e)}));else{const s=this._prelimContent,i=null===t?0:s.findIndex((e=>e===t))+1;if(0===i&&null!==t)throw Js("Reference item not found");s.splice(i,0,...e)}}delete(t,e=1){null!==this.doc?wn(this.doc,(s=>{Bn(s,this,t,e)})):this._prelimContent.splice(t,e)}toArray(){return Dn(this)}push(t){this.insert(this.length,t)}unshift(t){this.insert(0,t)}get(t){return Ln(this,t)}slice(t=0,e=this.length){return Rn(this,t,e)}forEach(t){Nn(this,t)}_write(t){t.writeTypeRef(Nr)}}class gr extends pr{constructor(t="UNDEFINED"){super(),this.nodeName=t,this._prelimAttrs=new Map}get nextSibling(){const t=this._item?this._item.next:null;return t?t.content.type:null}get prevSibling(){const t=this._item?this._item.prev:null;return t?t.content.type:null}_integrate(t,e){super._integrate(t,e),this._prelimAttrs.forEach(((t,e)=>{this.setAttribute(e,t)})),this._prelimAttrs=null}_copy(){return new gr(this.nodeName)}clone(){const t=new gr(this.nodeName),e=this.getAttributes();for(const s in e)t.setAttribute(s,e[s]);return t.insert(0,this.toArray().map((t=>t instanceof Tn?t.clone():t))),t}toString(){const t=this.getAttributes(),e=[],s=[];for(const e in t)s.push(e);s.sort();const i=s.length;for(let n=0;n<i;n++){const i=s[n];e.push(i+'="'+t[i]+'"')}const n=this.nodeName.toLocaleLowerCase();return`<${n}${e.length>0?" "+e.join(" "):""}>${super.toString()}</${n}>`}removeAttribute(t){null!==this.doc?wn(this.doc,(e=>{Hn(e,this,t)})):this._prelimAttrs.delete(t)}setAttribute(t,e){null!==this.doc?wn(this.doc,(s=>{Vn(s,this,t,e)})):this._prelimAttrs.set(t,e)}getAttribute(t){return Gn(this,t)}hasAttribute(t){return qn(this,t)}getAttributes(t){return Kn(this)}toDOM(t=document,e={},s){const i=t.createElement(this.nodeName),n=this.getAttributes();for(const t in n)i.setAttribute(t,n[t]);return Nn(this,(n=>{i.appendChild(n.toDOM(t,e,s))})),void 0!==s&&s._createAssociation(i,this),i}_write(t){t.writeTypeRef(Dr),t.writeKey(this.nodeName)}}class vr extends Mn{constructor(t,e,s){super(t,s),this.childListChanged=!1,this.attributesChanged=new Set,e.forEach((t=>{null===t?this.childListChanged=!0:this.attributesChanged.add(t)}))}}class yr extends Qn{constructor(t){super(),this.hookName=t}_copy(){return new yr(this.hookName)}clone(){const t=new yr(this.hookName);return this.forEach(((e,s)=>{t.set(s,e)})),t}toDOM(t=document,e={},s){const i=e[this.hookName];let n;return n=void 0!==i?i.createDom(this):document.createElement(this.hookName),n.setAttribute("data-yjs-hook",this.hookName),void 0!==s&&s._createAssociation(n,this),n}_write(t){t.writeTypeRef(Ir),t.writeKey(this.hookName)}}class br extends fr{get nextSibling(){const t=this._item?this._item.next:null;return t?t.content.type:null}get prevSibling(){const t=this._item?this._item.prev:null;return t?t.content.type:null}_copy(){return new br}clone(){const t=new br;return t.applyDelta(this.toDelta()),t}toDOM(t=document,e,s){const i=t.createTextNode(this.toString());return void 0!==s&&s._createAssociation(i,this),i}toString(){return this.toDelta().map((t=>{const e=[];for(const s in t.attributes){const i=[];for(const e in t.attributes[s])i.push({key:e,value:t.attributes[s][e]});i.sort(((t,e)=>t.key<e.key?-1:1)),e.push({nodeName:s,attrs:i})}e.sort(((t,e)=>t.nodeName<e.nodeName?-1:1));let s="";for(let t=0;t<e.length;t++){const i=e[t];s+=`<${i.nodeName}`;for(let t=0;t<i.attrs.length;t++){const e=i.attrs[t];s+=` ${e.key}="${e.value}"`}s+=">"}s+=t.insert;for(let t=e.length-1;t>=0;t--)s+=`</${e[t].nodeName}>`;return s})).join("")}toJSON(){return this.toString()}_write(t){t.writeTypeRef(jr)}}class mr{constructor(t,e){this.id=t,this.length=e}get deleted(){throw Bs()}mergeWith(t){return!1}write(t,e,s){throw Bs()}integrate(t,e){throw Bs()}}class kr extends mr{get deleted(){return!0}delete(){}mergeWith(t){return this.constructor===t.constructor&&(this.length+=t.length,!0)}integrate(t,e){e>0&&(this.id.clock+=e,this.length-=e),en(t.doc.store,this)}write(t,e){t.writeInfo(0),t.writeLen(this.length-e)}getMissing(t,e){return null}}class $r{constructor(t){this.content=t}getLength(){return 1}getContent(){return[this.content]}isCountable(){return!0}copy(){return new $r(this.content)}splice(t){throw Bs()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeBuf(this.content)}getRef(){return 3}}class xr{constructor(t){this.len=t}getLength(){return this.len}getContent(){return[]}isCountable(){return!1}copy(){return new xr(this.len)}splice(t){const e=new xr(this.len-t);return this.len=t,e}mergeWith(t){return this.len+=t.len,!0}integrate(t,e){mi(t.deleteSet,e.id.client,e.id.clock,this.len),e.markDeleted()}delete(t){}gc(t){}write(t,e){t.writeLen(this.len-e)}getRef(){return 1}}const Sr=(t,e)=>new Ai({guid:t,...e,shouldLoad:e.shouldLoad||e.autoLoad||!1});class Mr{constructor(t){t._item&&console.error("This document was already integrated as a sub-document. You should create a second instance instead with the same guid."),this.doc=t;const e={};this.opts=e,t.gc||(e.gc=!1),t.autoLoad&&(e.autoLoad=!0),null!==t.meta&&(e.meta=t.meta)}getLength(){return 1}getContent(){return[this.doc]}isCountable(){return!0}copy(){return new Mr(Sr(this.doc.guid,this.opts))}splice(t){throw Bs()}mergeWith(t){return!1}integrate(t,e){this.doc._item=e,t.subdocsAdded.add(this.doc),this.doc.shouldLoad&&t.subdocsLoaded.add(this.doc)}delete(t){t.subdocsAdded.has(this.doc)?t.subdocsAdded.delete(this.doc):t.subdocsRemoved.add(this.doc)}gc(t){}write(t,e){t.writeString(this.doc.guid),t.writeAny(this.opts)}getRef(){return 9}}class Ar{constructor(t){this.embed=t}getLength(){return 1}getContent(){return[this.embed]}isCountable(){return!0}copy(){return new Ar(this.embed)}splice(t){throw Bs()}mergeWith(t){return!1}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeJSON(this.embed)}getRef(){return 5}}class Cr{constructor(t,e){this.key=t,this.value=e}getLength(){return 1}getContent(){return[]}isCountable(){return!1}copy(){return new Cr(this.key,this.value)}splice(t){throw Bs()}mergeWith(t){return!1}integrate(t,e){e.parent._searchMarker=null}delete(t){}gc(t){}write(t,e){t.writeKey(this.key),t.writeJSON(this.value)}getRef(){return 6}}class _r{constructor(t){this.arr=t}getLength(){return this.arr.length}getContent(){return this.arr}isCountable(){return!0}copy(){return new _r(this.arr)}splice(t){const e=new _r(this.arr.slice(t));return this.arr=this.arr.slice(0,t),e}mergeWith(t){return this.arr=this.arr.concat(t.arr),!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){const s=this.arr.length;t.writeLen(s-e);for(let i=e;i<s;i++){const e=this.arr[i];t.writeString(void 0===e?"undefined":JSON.stringify(e))}}getRef(){return 2}}class Wr{constructor(t){this.arr=t}getLength(){return this.arr.length}getContent(){return this.arr}isCountable(){return!0}copy(){return new Wr(this.arr)}splice(t){const e=new Wr(this.arr.slice(t));return this.arr=this.arr.slice(0,t),e}mergeWith(t){return this.arr=this.arr.concat(t.arr),!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){const s=this.arr.length;t.writeLen(s-e);for(let i=e;i<s;i++){const e=this.arr[i];t.writeAny(e)}}getRef(){return 8}}class Or{constructor(t){this.str=t}getLength(){return this.str.length}getContent(){return this.str.split("")}isCountable(){return!0}copy(){return new Or(this.str)}splice(t){const e=new Or(this.str.slice(t));this.str=this.str.slice(0,t);const s=this.str.charCodeAt(t-1);return s>=55296&&s<=56319&&(this.str=this.str.slice(0,t-1)+"�",e.str="�"+e.str.slice(1)),e}mergeWith(t){return this.str+=t.str,!0}integrate(t,e){}delete(t){}gc(t){}write(t,e){t.writeString(0===e?this.str:this.str.slice(e))}getRef(){return 4}}const Er=[t=>new Yn,t=>new Qn,t=>new fr,t=>new gr(t.readKey()),t=>new pr,t=>new yr(t.readKey()),t=>new br],Ur=0,Tr=1,Rr=2,Dr=3,Nr=4,Ir=5,jr=6;class Lr{constructor(t){this.type=t}getLength(){return 1}getContent(){return[this.type]}isCountable(){return!0}copy(){return new Lr(this.type._copy())}splice(t){throw Bs()}mergeWith(t){return!1}integrate(t,e){this.type._integrate(t.doc,e)}delete(t){let e=this.type._start;for(;null!==e;)e.deleted?t._mergeStructs.push(e):e.delete(t),e=e.right;this.type._map.forEach((e=>{e.deleted?t._mergeStructs.push(e):e.delete(t)})),t.changed.delete(this.type)}gc(t){let e=this.type._start;for(;null!==e;)e.gc(t,!0),e=e.right;this.type._start=null,this.type._map.forEach((e=>{for(;null!==e;)e.gc(t,!0),e=e.left})),this.type._map=new Map}write(t,e){this.type._write(t)}getRef(){return 7}}const zr=(t,e,s)=>{const{client:i,clock:n}=e.id,r=new Pr(Gi(i,n+s),e,Gi(i,n+s-1),e.right,e.rightOrigin,e.parent,e.parentSub,e.content.splice(s));return e.deleted&&r.markDeleted(),e.keep&&(r.keep=!0),null!==e.redone&&(r.redone=Gi(e.redone.client,e.redone.clock+s)),e.right=r,null!==r.right&&(r.right.left=r),t._mergeStructs.push(r),null!==r.parentSub&&null===r.right&&r.parent._map.set(r.parentSub,r),e.length=s,r};class Pr extends mr{constructor(t,e,s,i,n,r,o,h){super(t,h.getLength()),this.origin=s,this.left=e,this.right=i,this.rightOrigin=n,this.parent=r,this.parentSub=o,this.redone=null,this.content=h,this.info=this.content.isCountable()?2:0}set marker(t){(8&this.info)>0!==t&&(this.info^=8)}get marker(){return(8&this.info)>0}get keep(){return(1&this.info)>0}set keep(t){this.keep!==t&&(this.info^=1)}get countable(){return(2&this.info)>0}get deleted(){return(4&this.info)>0}set deleted(t){this.deleted!==t&&(this.info^=4)}markDeleted(){this.info|=4}getMissing(t,e){if(this.origin&&this.origin.client!==this.id.client&&this.origin.clock>=tn(e,this.origin.client))return this.origin.client;if(this.rightOrigin&&this.rightOrigin.client!==this.id.client&&this.rightOrigin.clock>=tn(e,this.rightOrigin.client))return this.rightOrigin.client;if(this.parent&&this.parent.constructor===Hi&&this.id.client!==this.parent.client&&this.parent.clock>=tn(e,this.parent.client))return this.parent.client;if(this.origin&&(this.left=hn(t,e,this.origin),this.origin=this.left.lastId),this.rightOrigin&&(this.right=on(t,this.rightOrigin),this.rightOrigin=this.right.id),(this.left&&this.left.constructor===kr||this.right&&this.right.constructor===kr)&&(this.parent=null),this.parent){if(this.parent.constructor===Hi){const t=nn(e,this.parent);t.constructor===kr?this.parent=null:this.parent=t.content.type}}else this.left&&this.left.constructor===Pr&&(this.parent=this.left.parent,this.parentSub=this.left.parentSub),this.right&&this.right.constructor===Pr&&(this.parent=this.right.parent,this.parentSub=this.right.parentSub);return null}integrate(t,e){if(e>0&&(this.id.clock+=e,this.left=hn(t,t.doc.store,Gi(this.id.client,this.id.clock-1)),this.origin=this.left.lastId,this.content=this.content.splice(e),this.length-=e),this.parent){if(!this.left&&(!this.right||null!==this.right.left)||this.left&&this.left.right!==this.right){let e,s=this.left;if(null!==s)e=s.right;else if(null!==this.parentSub)for(e=this.parent._map.get(this.parentSub)||null;null!==e&&null!==e.left;)e=e.left;else e=this.parent._start;const i=new Set,n=new Set;for(;null!==e&&e!==this.right;){if(n.add(e),i.add(e),Vi(this.origin,e.origin)){if(e.id.client<this.id.client)s=e,i.clear();else if(Vi(this.rightOrigin,e.rightOrigin))break}else{if(null===e.origin||!n.has(nn(t.doc.store,e.origin)))break;i.has(nn(t.doc.store,e.origin))||(s=e,i.clear())}e=e.right}this.left=s}if(null!==this.left){const t=this.left.right;this.right=t,this.left.right=this}else{let t;if(null!==this.parentSub)for(t=this.parent._map.get(this.parentSub)||null;null!==t&&null!==t.left;)t=t.left;else t=this.parent._start,this.parent._start=this;this.right=t}null!==this.right?this.right.left=this:null!==this.parentSub&&(this.parent._map.set(this.parentSub,this),null!==this.left&&this.left.delete(t)),null===this.parentSub&&this.countable&&!this.deleted&&(this.parent._length+=this.length),en(t.doc.store,this),this.content.integrate(t,this),un(t,this.parent,this.parentSub),(null!==this.parent._item&&this.parent._item.deleted||null!==this.parentSub&&null!==this.right)&&this.delete(t)}else new kr(this.id,this.length).integrate(t,0)}get next(){let t=this.right;for(;null!==t&&t.deleted;)t=t.right;return t}get prev(){let t=this.left;for(;null!==t&&t.deleted;)t=t.left;return t}get lastId(){return 1===this.length?this.id:Gi(this.id.client,this.id.clock+this.length-1)}mergeWith(t){if(this.constructor===t.constructor&&Vi(t.origin,this.lastId)&&this.right===t&&Vi(this.rightOrigin,t.rightOrigin)&&this.id.client===t.id.client&&this.id.clock+this.length===t.id.clock&&this.deleted===t.deleted&&null===this.redone&&null===t.redone&&this.content.constructor===t.content.constructor&&this.content.mergeWith(t.content)){const e=this.parent._searchMarker;return e&&e.forEach((e=>{e.p===t&&(e.p=this,!this.deleted&&this.countable&&(e.index-=this.length))})),t.keep&&(this.keep=!0),this.right=t.right,null!==this.right&&(this.right.left=this),this.length+=t.length,!0}return!1}delete(t){if(!this.deleted){const e=this.parent;this.countable&&null===this.parentSub&&(e._length-=this.length),this.markDeleted(),mi(t.deleteSet,this.id.client,this.id.clock,this.length),un(t,e,this.parentSub),this.content.delete(t)}}gc(t,e){if(!this.deleted)throw Hs();this.content.gc(t),e?((t,e,s)=>{const i=t.clients.get(e.id.client);i[sn(i,e.id.clock)]=s})(t,this,new kr(this.id,this.length)):this.content=new xr(this.length)}write(t,e){const s=e>0?Gi(this.id.client,this.id.clock+e-1):this.origin,i=this.rightOrigin,n=this.parentSub,r=31&this.content.getRef()|(null===s?0:128)|(null===i?0:64)|(null===n?0:32);if(t.writeInfo(r),null!==s&&t.writeLeftID(s),null!==i&&t.writeRightID(i),null===s&&null===i){const e=this.parent;if(void 0!==e._item){const s=e._item;if(null===s){const s=(t=>{for(const[e,s]of t.doc.share.entries())if(s===t)return e;throw Hs()})(e);t.writeParentInfo(!0),t.writeString(s)}else t.writeParentInfo(!1),t.writeLeftID(s.id)}else e.constructor===String?(t.writeParentInfo(!0),t.writeString(e)):e.constructor===Hi?(t.writeParentInfo(!1),t.writeLeftID(e)):Hs();null!==n&&t.writeString(n)}this.content.write(t,e)}}const Jr=(t,e)=>Br[31&e](t),Br=[()=>{Hs()},t=>new xr(t.readLen()),t=>{const e=t.readLen(),s=[];for(let i=0;i<e;i++){const e=t.readString();"undefined"===e?s.push(void 0):s.push(JSON.parse(e))}return new _r(s)},t=>new $r(t.readBuf()),t=>new Or(t.readString()),t=>new Ar(t.readJSON()),t=>new Cr(t.readKey(),t.readJSON()),t=>new Lr(Er[t.readTypeRef()](t)),t=>{const e=t.readLen(),s=[];for(let i=0;i<e;i++)s.push(t.readAny());return new Wr(s)},t=>new Mr(Sr(t.readString(),t.readAny())),()=>{Hs()}];class Hr extends mr{get deleted(){return!0}delete(){}mergeWith(t){return this.constructor===t.constructor&&(this.length+=t.length,!0)}integrate(t,e){Hs()}write(t,e){t.writeInfo(10),gs(t.restEncoder,this.length-e)}getMissing(t,e){return null}}const Vr="undefined"!=typeof window?window:"undefined"!=typeof global?global:{};async function Gr(t,e,s){return t.pipeTo(new WritableStream({write:e}),{signal:s})}var Kr,qr,Fr,Zr;!0===Vr["g"]&&console.error("Yjs was already imported. This breaks constructor checks and will lead to isssues!"),Vr["g"]=!0;class Yr extends EventTarget{constructor(){super(),Kr.add(this),this.callouts=new Set,qr.set(this,void 0),this.doc=new Ai;const t=new TransformStream;r(this,qr,t.writable.getWriter(),"f"),Gr(t.readable,(t=>n(this,Kr,"m",Fr).call(this,t)))}get board(){return this.doc.getMap("board")}initialize_board(){this.doc.transact((()=>{this.board.set("width",30),this.board.set("height",30),this.board.set("bg",null),this.board.set("tokens",new Qn),this.board.set("order",new Yn)}))}async set_bg(t){const e=t?await n(this,Kr,"m",Zr).call(this,t):null;this.apply({type:"bg",url:e})}async add_token(t,e){const s={id:crypto.randomUUID(),url:await n(this,Kr,"m",Zr).call(this,t),...e};this.apply({type:"token-added",...s})}set_dim(t){this.apply({type:"grid-resized",dim:t})}async apply(t){await n(this,qr,"f").write(t)}}qr=new WeakMap,Kr=new WeakSet,Fr=function(t){console.log("handling event",t),this.doc.transact((()=>{switch(t.type){case"token-manipulated":for(let e of t.tokens){let t=this.board.get("tokens").get(e.id);if(void 0===t)return void console.error("Update received for nonexistant token",e.id);t.set("dim",e.dim),t.set("r",e.r),t.set("loc",e.loc)}break;case"token-added":let e={id:t.id,dim:t.dim,loc:t.loc,url:t.url,r:0};console.log(e),this.board.get("tokens").set(t.id,function(t){let e=new Qn;for(let[s,i]of Object.entries(t))e.set(s,i);return e}(e)),this.board.get("order").push([t.id]);break;case"grid-resized":this.board.set("width",t.dim[0]),this.board.set("height",t.dim[1]);break;case"token-removed":for(let e of t.ids)this.board.get("tokens").delete(e);let s=[];this.board.get("order").forEach(((e,i)=>t.ids.includes(e)&&s.push(i))),s.sort().reverse().forEach((t=>{this.board.get("order").delete(t)}));break;case"state-sync":case"token-reorder":break;case"bg":this.board.set("bg",t.url);break;case"callout":this.callouts.add(t.loc),setTimeout((()=>{this.callouts.delete(t.loc)}),1500)}}))},Zr=async function(t){if("string"==typeof t)return t;let e=new URL(window.location.toString());e.search="";let s=await crypto.subtle.digest("SHA-1",await t.arrayBuffer()),i=btoa(String.fromCharCode(...new Uint8Array(s)));console.log("RESOURCE ID: ",i),e.pathname=`/resources/${i}`;let n=await caches.open("resources");return await n.put(e,new Response(t)),e.toString()};
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Xr=t=>{if(t.shouldConnect&&null===t.ws){const e=new WebSocket(t.url),s=t.binaryType;let i=null;s&&(e.binaryType=s),t.ws=e,t.connecting=!0,t.connected=!1,e.onmessage=e=>{t.lastMessageReceived=Ps();const s=e.data,n="string"==typeof s?JSON.parse(s):s;n&&"pong"===n.type&&(clearTimeout(i),i=setTimeout(r,15e3)),t.emit("message",[n,t])};const n=e=>{null!==t.ws&&(t.ws=null,t.connecting=!1,t.connected?(t.connected=!1,t.emit("disconnect",[{type:"disconnect",error:e},t])):t.unsuccessfulReconnects++,setTimeout(Xr,Te(1200*Ue(t.unsuccessfulReconnects+1),2500),t)),clearTimeout(i)},r=()=>{t.ws===e&&t.send({type:"ping"})};e.onclose=()=>n(null),e.onerror=t=>n(t),e.onopen=()=>{t.lastMessageReceived=Ps(),t.connecting=!1,t.connected=!0,t.unsuccessfulReconnects=0,t.emit("connect",[{type:"connect"},t]),i=setTimeout(r,15e3)}}};class Qr extends We{constructor(t,{binaryType:e}={}){super(),this.url=t,this.ws=null,this.binaryType=e||null,this.connected=!1,this.connecting=!1,this.unsuccessfulReconnects=0,this.lastMessageReceived=0,this.shouldConnect=!0,this._checkInterval=setInterval((()=>{this.connected&&3e4<Ps()-this.lastMessageReceived&&this.ws.close()}),15e3),Xr(this)}send(t){this.ws&&this.ws.send(JSON.stringify(t))}destroy(){clearInterval(this._checkInterval),this.disconnect(),super.destroy()}disconnect(){this.shouldConnect=!1,null!==this.ws&&this.ws.close()}connect(){this.shouldConnect=!0,this.connected||null!==this.ws||Xr(this)}}var to,eo,so,io,no;class ro extends We{constructor(){super(...arguments),to.set(this,"opening")}get current(){return n(this,to,"f")}set(t){let e=n(this,to,"f")!==t;r(this,to,t,"f"),e&&this.emit("status",[])}connected(){return new Promise(((t,e)=>{let s=()=>{"closed"===n(this,to,"f")&&e("closed"),"open"===n(this,to,"f")&&t()};"opening"===n(this,to,"f")?this.once("status",s):s()}))}}to=new WeakMap;const oo={iceServers:[{urls:["stun:stun1.l.google.com:19302","stun:stun2.l.google.com:19302"]}]};class ho extends We{constructor(t,e=!1,s="wss://battlegrid-signaling.herokuapp.com"){super(),eo.add(this),this.peers=new Map,this.status=new ro,no.set(this,(async t=>{if(console.log("ONMESSAGE",t),"error-not-exists"===t.type){return this.peers.get(t.destination)?.peer.close(),void console.log("closing")}let e=this.peers.get(t.from);if(!e){if("offer"!==t.description?.type)return;e=n(this,eo,"m",so).call(this,t.from,!1)}let s=e.peer;if(t.description){const i=!e.making_offer&&("stable"==s.signalingState||e.isSettingRemoteAnswerPending),r="offer"==t.description.type&&!i;if(e.ignore_offer=!e.polite&&r,e.ignore_offer)return;e.isSettingRemoteAnswerPending="answer"===t.description.type,await s.setRemoteDescription(t.description),e.isSettingRemoteAnswerPending=!1,"offer"===t.description.type&&(await s.setLocalDescription(),await n(this,eo,"m",io).call(this,{type:"signal",from:this.peer_id,to:t.from,description:s.localDescription})),this.emit("peer",[t.from,s])}else if(t.candidate)try{await s.addIceCandidate(t.candidate)}catch(t){if(!e.ignore_offer)throw t}}));let i=new URL(s);i.pathname=t,this.allow_connections=e,this.peer_id=t,this.socket=new Qr(i.toString()),this.status.set("opening"),this.socket.on("connect",(()=>this.status.set("open"))),this.socket.on("disconnect",(()=>this.status.set("opening"))),this.socket.on("message",n(this,no,"f"))}initiate(t){return n(this,eo,"m",so).call(this,t,!1).peer}shutdown(){this.socket.destroy(),this.peers.clear(),this.status.destroy()}}no=new WeakMap,eo=new WeakSet,so=function(t,e){let s=new RTCPeerConnection(oo),i={polite:e,making_offer:!1,ignore_offer:!1,isSettingRemoteAnswerPending:!1,peer:s};return this.peers.set(t,i),s.onicecandidate=async({candidate:e})=>{await n(this,eo,"m",io).call(this,{type:"signal",from:this.peer_id,to:t,candidate:e})},s.onnegotiationneeded=async()=>{console.log("negotiation needed!");try{i.making_offer=!0,await s.setLocalDescription(),await n(this,eo,"m",io).call(this,{type:"signal",from:this.peer_id,to:t,description:s.localDescription})}finally{i.making_offer=!1}},s.addEventListener("iceconnectionstatechange",(()=>{console.log("iceConnectionState",s.iceConnectionState),"closed"===s.iceConnectionState&&this.peers.delete(t)})),i},io=async function(t){await this.status.connected(),await this.socket.send(t)};const lo=t=>({readable:co(t),writable:ao(t)}),co=t=>new ReadableStream({start(e){t.onmessage=({data:t})=>{e.enqueue(t)};t.addEventListener("close",(()=>{0===t.bufferedAmount?(console.log("Underlying datachannel closed"),e.close()):t.addEventListener("bufferedamountlow",(()=>{console.log("Underlying datachannel closed"),e.close()}))}),{once:!0})},cancel(){t.close()}}),ao=t=>{let e;return t.addEventListener("error",(t=>console.log("DC ERROR",t))),new WritableStream({start(s){const i=()=>{console.log("stream closed by dc ending",t.label),s.error("Closed foo"),t.removeEventListener("close",i)};t.addEventListener("close",i),t.onopen=()=>e&&e(),t.onbufferedamountlow=()=>e&&e()},async write(s){("connecting"===t.readyState||t.bufferedAmount>t.bufferedAmountLowThreshold)&&(console.log("waiting for resumptoin..."),await new Promise(((t,s)=>e=t)),console.log("resumed!")),t.send(s)},abort(){console.log("aborted dc by stream"),t.close()},close(){console.log("closed dc by stream"),t.close()}},new CountQueuingStrategy({highWaterMark:1}))};async function uo(t){let e=t.readable.getReader(),s=await e.read();console.log("header? ",s);let i=JSON.parse(s.value);e.releaseLock();let n=await async function(t,e){let s=[];return console.log("collectin blob"),await Gr(t,(t=>{console.log("CHUNK?"),s.push(t)})),console.log("got all bytes"),new Blob(s,{type:e})}(t.readable,i?.type);return{blob:n}}async function fo(t,e,s=262144){console.log("USING MAX MESSAGE SIZE: ",s);let i=t.writable.getWriter();await i.write(JSON.stringify({type:e.blob.type})),i.releaseLock(),await function(t,e){let s=0;return new ReadableStream({async pull(i){if(s>=t.size)return i.close();try{i.enqueue(new Uint8Array(await t.slice(s,Math.min(s+e,t.size)).arrayBuffer()))}catch(t){console.log("Error enqueue slice",t)}s+=e}},new CountQueuingStrategy({highWaterMark:5}))}(e.blob,s).pipeTo(t.writable,{preventClose:!0})}var wo,po,go,vo,yo,bo,mo,ko,$o,xo,So,Mo,Ao;class Co{constructor(t,e){this.status=new ro,wo.set(this,void 0),this.ondatachannel=t=>{},this.id=t,this.peer=e;let s=e.createDataChannel("events",{negotiated:!0,id:1});s.binaryType="arraybuffer";let{readable:i,writable:n}=lo(s);this.events=i.pipeThrough(new TransformStream({transform(t,e){console.log("chunk",t),e.enqueue(new Uint8Array(t))}})),r(this,wo,n.getWriter(),"f");let o=e.close;e.close=()=>{this.status.set("closed"),o.bind(e)()},e.addEventListener("iceconnectionstatechange",(()=>{switch(console.log("STATE CHANGE"),e.iceConnectionState){case"closed":this.status.set("closed");break;case"connected":this.status.set("open");break;default:this.status.set("opening")}})),e.ondatachannel=t=>this.ondatachannel(t)}write_event(t){return n(this,wo,"f").write(t)}request(t){return this.datachannel(t,{protocol:"request-resource"}).then(lo).then(uo)}datachannel(t,e){return new Promise(((s,i)=>{let n=this.peer.createDataChannel(t,e);n.addEventListener("open",(()=>{n.removeEventListener("error",i),s(n)}),{once:!0}),n.addEventListener("error",i,{once:!0})}))}}wo=new WeakMap;class _o{constructor(t,e){po.add(this),go.set(this,void 0),vo.set(this,void 0),yo.set(this,void 0),bo.set(this,void 0),this.forward_updates=(t,e)=>{"remote"!==e&&n(this,vo,"f").write_event(t)},r(this,bo,new ho(crypto.randomUUID()),"f"),r(this,go,e,"f"),r(this,yo,t,"f"),n(this,go,"f").doc.on("update",this.forward_updates),r(this,vo,n(this,po,"m",mo).call(this),"f");let s=caches.open("resources");navigator.serviceWorker.onmessage=async t=>{let e=t.data.id;try{let t=await n(this,vo,"f").request(e),i=new Response(t.blob);await(await s).put(`/resources/${e}`,i),console.log("COMMUNICATING WITH SERVICE WORKER"),navigator.serviceWorker.controller.postMessage({type:"found",id:e})}catch(t){console.error("Error fetching resource: ",t),navigator.serviceWorker.controller.postMessage({type:"notfound",id:e,error:t})}}}get status(){return n(this,vo,"f").status}async reconnect(){r(this,vo,n(this,po,"m",mo).call(this),"f")}async shutdown(){n(this,go,"f").doc.off("update",this.forward_updates),n(this,vo,"f").peer.close(),console.log("Waiting for signaler shutdown"),await n(this,bo,"f").shutdown(),console.log("signaler dead"),navigator.serviceWorker.onmessage=null}}go=new WeakMap,vo=new WeakMap,yo=new WeakMap,bo=new WeakMap,po=new WeakSet,mo=function(){let t=new Co(n(this,bo,"f").peer_id,n(this,bo,"f").initiate(n(this,yo,"f")));return Gr(t.events,(t=>Di(n(this,go,"f").doc,t,"remote"))),t};class Wo{constructor(t){ko.add(this),$o.set(this,void 0),this.clients=new Set,xo.set(this,void 0),So.set(this,((t,e)=>{let s=new Co(t,e);this.clients.add(s),s.write_event(Ii(n(this,$o,"f").doc)),Gr(s.events,(e=>{Di(n(this,$o,"f").doc,e,t)})),e.ondatachannel=async t=>{console.log("INCOMING DC",t.channel);const s=t.channel;try{await(r="open",o=s,new Promise((t=>{o.addEventListener(r,(e=>t(e)),{once:!0})}))),console.log("new dc",s),"request-resource"===s.protocol&&(await fo(lo(s),await n(this,ko,"m",Mo).call(this,s.label),e.sctp?.maxMessageSize||262144),console.log("FLUSHING"),await(i=s,new Promise(((t,e)=>{const s=()=>0===i.bufferedAmount?t():"closed"===i.readyState||"closing"===i.readyState?e("Buffer closed before flushing"):void 0;i.bufferedAmountLowThreshold=0,i.addEventListener("bufferedamountlow",s),s()}))))}finally{s.close()}var i,r,o}})),this.signaler=new ho(crypto.randomUUID(),!0),r(this,$o,t,"f"),r(this,xo,new AbortController,"f"),this.signaler.on("peer",n(this,So,"f")),n(this,$o,"f").doc.on("update",((t,e)=>{for(let s of this.clients)console.log("ECHO",s.id,e),s.id!==e&&s.write_event(t)}))}async shutdown(){for(let t of this.clients)t.peer.close();this.clients.clear(),n(this,xo,"f").abort("Server shutting down"),await this.signaler.shutdown()}}$o=new WeakMap,xo=new WeakMap,So=new WeakMap,ko=new WeakSet,Mo=async function(t){let e=await(await caches.open("resources")).match(`/resources/${t}`);if(!e)throw`Requested unknown resource ${t}`;return{blob:await e.blob()}};let Oo=class extends ot{constructor(){super(...arguments),this.text="",this.mousex=0,this.mousey=0,Ao.set(this,(t=>{this.mousex=t.pageX,this.mousey=t.pageY}))}connectedCallback(){super.connectedCallback(),this.addEventListener("mousemove",n(this,Ao,"f"))}disconnectedCallback(){this.removeEventListener("mousemove",n(this,Ao,"f"))}render(){return console.log("Rendering"),L`<slot></slot><div id="message" style="${Gt({left:`${this.mousex+8}px`,top:`${this.mousey+10}px`})}">${this.text}</div>`}};Ao=new WeakMap,Oo.styles=a`:host{display:inline-block;position:relative;width:fit-content;height:fit-content}div{font-size:.8em;display:none;opacity:0;position:fixed;background:#000;color:#fff;border-radius:3px;padding:.25em .5em;white-space:nowrap;width:max-content}@keyframes appear{0%{opacity:0}100%{opacity:1}}:host(:hover) div{display:block;animation:appear 250ms linear forwards 750ms}`,i([at()],Oo.prototype,"text",void 0),i([ut()],Oo.prototype,"mousex",void 0),i([ut()],Oo.prototype,"mousey",void 0),Oo=i([lt("with-tooltip")],Oo);let Eo=class extends ot{constructor(){super(...arguments),this.status="local",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return L`<label class="switch"><with-tooltip text="${function(t){switch(t){case"open":return"Joinable";case"closed":return"Offline";case"opening":return"Not Joinable";case"local":return"Start hosting"}}(this.status)}"><input type="checkbox" @input="${this.toggle}" ?checked="${"local"!==this.status}"> <span class="slider round ${this.status}"><span class="on-space">Hosting</span> <span class="dot"></span> <span class="off-space">Offline</span></span></with-tooltip></label>`}};Eo.styles=a`.slider{display:inline-flex;flex-wrap:nowrap;height:1em;transition:.4s;padding:.2em;min-width:4.5em;cursor:pointer;background:#ccc}.open{background:#2196f3}.opening{background:#fdcb18}.opening>.on-space{color:#000}input{display:none}input:checked+.slider>.on-space{flex-grow:1;opacity:1}input:checked+.slider>.off-space{flex-grow:0!important;opacity:0}.off-space{opacity:1;flex-grow:1!important}.on-space{opacity:0;color:#fff;width:0}.off-space,.on-space{font-size:.8em}.slider>span{flex-grow:0;flex-basis:0;transition:.4s;overflow:hidden;text-align:center}.round{border-radius:1em}.dot{border-radius:1em;min-width:1em;height:1em;background:#fff}`,i([at()],Eo.prototype,"status",void 0),Eo=i([lt("host-toggle")],Eo);let Uo=class extends ot{constructor(){super(...arguments),this.status="opening",this.toggle=t=>(t.preventDefault(),t.target.checked?this.dispatchEvent(new CustomEvent("enable")):this.dispatchEvent(new CustomEvent("disable")),!1)}render(){return L`<span class="slider round ${this.status}">${function(t){switch(t){case"open":return"Connected";case"closed":return"Disconnected";case"opening":return"Connecting"}}(this.status)}</span>`}};Uo.styles=a`.slider{height:1em;transition:.4s;padding:.2em;min-width:5em;cursor:pointer;color:#fff;font-size:.8em;align-items:baseline}.open{background:#2196f3}.opening{background:#fdcb18}.round{border-radius:1em}`,i([at()],Uo.prototype,"status",void 0),Uo=i([lt("client-status")],Uo);const To=(t,e)=>Promise.race([t,new Promise(((t,s)=>setTimeout(s,e)))]);var Ro,Do,No,Io,jo;let Lo=class extends ot{constructor(){super(...arguments),this.selection=new Set,this.host_pending=!1,this.client_pending=!1,this.game=new Yr,Ro.set(this,(()=>{this.game.set_dim(Tt([1,1],[parseInt(this.width?.value)??0,parseInt(this.height?.value)??0]))})),Do.set(this,(async()=>{console.log("new local..."),this.game.initialize_board(),await(this.client?.shutdown()),this.client&&this.client.status.off("status",this.requestUpdate),this.client=void 0,window.history.pushState(null,"",window.location.href.split("?")[0])})),No.set(this,(()=>this.requestUpdate())),Io.set(this,(async()=>{try{this.client?.shutdown(),this.client=void 0,this.host_pending=!0,this.server=new Wo(this.game),this.server.signaler.status.on("status",n(this,No,"f")),console.log("WAITING"),await To(this.server.signaler.status.connected(),5e3),window.history.pushState({},"","?game="+this.server.signaler.peer_id),navigator.clipboard.writeText(window.location.toString())}catch(t){console.error(t),await n(this,jo,"f")}finally{this.host_pending=!1}})),jo.set(this,(async()=>{let t=this.server;this.server=void 0,await(t?.shutdown()),window.history.replaceState({},"",window.location.pathname)}))}render(){let t="closed"===this.client?.status.current?L`<div class="message error"><div><h1>Error connecting to remote grid</h1><button @click="${n(this,Do,"f")}">New local grid</button></div></div>`:null,e=this.client_pending?L`<div class="message"><div><h1>Connecting to grid...</h1></div></div>`:null,s="closed"===this.client?.status.current?L`<div class="message"><div><h1>Disconnected from host</h1><button @click="${n(this,Do,"f")}">Continue locally</button></div></div>`:null,i=t||e||s;return L`<section id="toolbar" class="group"><div class="group">${this.client?L`<client-status status="${this.client.status.current}"></client-status>`:L`<host-toggle status="${this.server?.signaler.status.current??"local"}" @enable="${n(this,Io,"f")}" @disable="${n(this,jo,"f")}"></host-toggle>`} <span>Grid: <input id="width" type="number" min="1" @input="${n(this,Ro,"f")}" .value="${this.game.board.get("width")+""}"> x <input id="height" type="number" min="1" @input="${n(this,Ro,"f")}" .value="${this.game.board.get("height")+""}"> </span>${1===this.selection.size?L`<div><button @click="${()=>this.game.apply({type:"token-reorder",id:Ht(this.selection),idx:"down"})}" ?disabled="${!0}">Move Down</button> <button @click="${()=>this.game.apply({type:"token-reorder",id:Ht(this.selection),idx:"up"})}" ?disabled="${!0}">Move Up</button></div>`:null}</div><div class="group"><buy-me-a-coffee class="right"></buy-me-a-coffee></div></section><bg-canvas bg="${(t=>null!=t?t:J)(this.game.board.get("bg")??void 0)}" .selection="${this.selection}" width="${this.game.board.get("width")}" height="${this.game.board.get("height")}" .board="${this.game.board}" .callouts="${this.game.callouts}" @token-drop="${({detail:t})=>this.game.add_token(t.img,{loc:t.loc,r:0,dim:t.dim})}" @bg-drop="${({detail:t})=>this.game.set_bg(t)}" @token-select="${({detail:t})=>{this.selection=new Set(t)}}" @game-event="${({detail:t})=>this.game.apply(t)}"></bg-canvas>${i}`}updated(t){t.has("client")&&(document.title="BattleGrid"+(this.client&&"open"===this.client.status.current?this.server?"- Hosting":"- Connected":""))}async connectedCallback(){super.connectedCallback(),console.log(this.game.board),this.game.doc.on("update",(()=>{console.log("UPDATEING");for(const t of this.selection)this.game.board.get("tokens").has(t)||this.selection.delete(t);this.requestUpdate(),this.canvas?.requestUpdate()})),this.game.doc.on("afterTransaction",(()=>{this.canvas?.requestUpdate()})),console.log("debug now please");let t=new URLSearchParams(window.location.search).get("game");if(!t)return await n(this,Do,"f").call(this);try{console.log("new client"),this.client=new _o(t,this.game),this.client.status.on("status",(()=>this.requestUpdate())),console.log("waiting for connection"),this.client_pending=!0,await To(this.client.status.connected(),5e3),console.log("connected")}catch{console.log("giving up"),await n(this,Do,"f").call(this)}finally{this.client_pending=!1}}};var zo,Po,Jo,Bo,Ho;Ro=new WeakMap,Do=new WeakMap,No=new WeakMap,Io=new WeakMap,jo=new WeakMap,Lo.styles=a`:host{width:100%;height:100%;display:grid;grid:"toolbar" 30px "viewport" minmax(0,1fr)/minmax(0,1fr);font-family:inherit;--ui-bg:#f9f9fa}.message{grid-area:1/1/3/1;display:grid;align-items:center;justify-items:center;background:#fff;z-index:2}.right{justify-self:end}bg-canvas{grid-area:viewport;z-index:1}input[type=number]{width:3em}.group{display:flex;align-items:center;height:100%;flex-wrap:nowrap}#toolbar{grid-area:toolbar;box-shadow:0 0 4px gray;z-index:2;background:var(--ui-bg);justify-content:space-between;padding:0 1em;grid-template-rows:unset}.group img{width:1em;height:1em;object-fit:cover;display:inline-block}`,i([wt("#width",!0)],Lo.prototype,"width",void 0),i([wt("#height",!0)],Lo.prototype,"height",void 0),i([wt("bg-canvas",!0)],Lo.prototype,"canvas",void 0),i([ut()],Lo.prototype,"client",void 0),i([ut()],Lo.prototype,"server",void 0),i([ut()],Lo.prototype,"selection",void 0),i([ut()],Lo.prototype,"host_pending",void 0),i([ut()],Lo.prototype,"client_pending",void 0),Lo=i([lt("bg-app")],Lo);class Vo extends HTMLElement{constructor(){super(),zo.add(this),this.state={z:1,scroll_pos:[0,0]},this.desired_state={z:1},this.origin=[0,0],this.vloc=[0,0],this.vdim=[0,0],this.cdim=[0,0],this.offset=[0,0],this.smooth=!1,Jo.set(this,new ResizeObserver((t=>{for(let e of t)if(e.target===this){this.vdim=[e.contentRect.width,e.contentRect.height];const t=this.getBoundingClientRect();this.vloc=[t.x,t.y]}else this.cdim=[e.target.width.baseVal.value,e.target.height.baseVal.value],n(this,zo,"m",Po).call(this);this.center()}))),this.loop=async()=>{let t,e;for(;t=e,e=await Go();){if(!t)continue;let s=this.desired_state.z-this.state.z;if(0===s)continue;let i=e-t,n=this.smooth?Math.sign(s)*Math.min(.002*i*this.state.z,Math.abs(s)):s;this.state.z+=n,this.center(),this.state.scroll_pos=Tt([0,0],_t(Et(this.origin,n),this.state.scroll_pos)),this.scrollTo({left:this.state.scroll_pos[0],top:this.state.scroll_pos[1]})}},this.zoom=(t,e)=>{this.desired_state.z=Math.min(4,Math.max(1,this.desired_state.z+e)),this.state.scroll_pos=[this.scrollLeft,this.scrollTop],this.origin=this.coordToLocal(t)},this.wheel=t=>{if(!t.ctrlKey)return;t.preventDefault();const e=t.deltaMode===WheelEvent.DOM_DELTA_LINE?10:1,s=Math.min(50,Math.max(-50,-t.deltaY*e)),i=.005*s*this.state.z;this.smooth=50===Math.abs(s),this.zoom([t.clientX,t.clientY],i),this.addEventListener},Bo.set(this,(t=>{console.log("zoom!",t.ctrlKey,t.key),t.ctrlKey&&("-"===t.key?(this.smooth=!0,this.zoom(this.coordToLocal(_t(this.vloc,Ut(this.vdim,2))),-.2*this.state.z),Lt(t)):"="===t.key?(this.smooth=!0,this.zoom(this.coordToLocal(_t(this.vloc,Ut(this.vdim,2))),.2*this.state.z),Lt(t)):"0"===t.key&&(this.smooth=!0,n(this,zo,"m",Po).call(this)))})),Ho.set(this,{prev_scale:0,origin:[0,0],start:t=>{Lt(t),n(this,Ho,"f").origin=this.coordToLocal([t.clientX,t.clientY]),n(this,Ho,"f").prev_scale=1},change:t=>{Lt(t),this.zoom(n(this,Ho,"f").origin,this.state.z*(t.scale-n(this,Ho,"f").prev_scale)*1.5),n(this,Ho,"f").prev_scale=t.scale}}),this.root=this.attachShadow({mode:"open"}),this.root.appendChild(Vo.template().content.cloneNode(!0)),this.container=this.root.getElementById("container"),n(this,Jo,"f").observe(this),this.root.querySelector("slot").onslotchange=({target:t})=>{let e=t.assignedElements()[0];n(this,Jo,"f").observe(e),this.smooth=!1},this.addEventListener("scroll",(()=>this.state.scroll_pos=[this.scrollLeft,this.scrollTop])),this.addEventListener("gesturestart",n(this,Ho,"f").start),this.addEventListener("gesturechange",n(this,Ho,"f").change),document.addEventListener("keydown",n(this,Bo,"f"),{passive:!1})}center(){this.offset=Tt([0,0],Et(Ot(this.vdim,Et(this.cdim,this.state.z)),.5)),this.container.style.transform=`translate(${this.offset[0]}px, ${this.offset[1]}px) scale(${this.state.z})`}connectedCallback(){this.loop(),this.addEventListener("wheel",this.wheel,{passive:!1,capture:!0})}coordToLocal(t){const e=_t(Ot(t,this.vloc),this.state.scroll_pos);return Ut(Ot(e,this.offset),this.state.z)}static template(){let t=document.createElement("template");return t.innerHTML='\n            <style>\n                :host {\n                    position: relative;\n                    display: block;\n                    overflow: auto; \n                }\n                #container {\n                    transform-origin: 0 0;\n                    display: block;\n                    width: fit-content;\n                    height: fit-content;\n                }\n            </style>\n                <div id="container">\n                    <slot id="content"></slot>\n                </div>\n            </div>\n        ',t}}Jo=new WeakMap,Bo=new WeakMap,Ho=new WeakMap,zo=new WeakSet,Po=function(){let t=this.root.querySelector("slot").assignedElements()[0],e=this.getBoundingClientRect();this.vdim=[e.width,e.height],this.cdim=[t.width.baseVal.value,t.height.baseVal.value];const s=Math.max(1,Math.min(4,...Et(((t,e)=>[t[0]/e[0],t[1]/e[1]])(this.vdim,this.cdim),.95)));this.zoom([0,0],s-this.state.z)};const Go=()=>new Promise((t=>window.requestAnimationFrame(t)));customElements.define("p-p-z",Vo),await navigator.serviceWorker.register("./service-worker.js"),document.body.addEventListener("wheel",(t=>{t.ctrlKey&&t.preventDefault()}),{passive:!1});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvdWkvc2FmYXJpLWZpeC50cyIsIi4uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2Nzcy10YWcuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L3JlYWN0aXZlLWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCIuLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvbGl0LWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvY3VzdG9tLWVsZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvc3RhdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvYmFzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9ldmVudC1vcHRpb25zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LWFzc2lnbmVkLWVsZW1lbnRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmUtaGVscGVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3JlcGVhdC5qcyIsIi4uL3NyYy91dGlsL21hdGgudHMiLCIuLi9zcmMvdXRpbC9ldmVudHMudHMiLCIuLi9zcmMvdXRpbC9maWxlcy50cyIsIi4uL3NyYy9nYW1lL2dhbWUtZXZlbnRzLnRzIiwiLi4vc3JjL3V0aWwvaXRlci50cyIsIi4uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyIsIi4uL3NyYy91aS9jYW52YXMudHMiLCIuLi9zcmMvdWkvYnV5bWVhY29mZmVlLnRzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvbWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvc2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9vYnNlcnZhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvbWF0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL3N0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL2NvbmRpdGlvbnMuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9zdG9yYWdlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvZW52aXJvbm1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9kZWNvZGluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL2JpbmFyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL2J1ZmZlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL251bWJlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL2VuY29kaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2lzb21vcnBoaWMuanMvYnJvd3Nlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9pc29tb3JwaGljLmpzL2lzby5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL3JhbmRvbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL3RpbWUuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9lcnJvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL29iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL2Z1bmN0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvc3ltYm9sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvcGFpci5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL2RvbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL2xvZ2dpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvbGliMC9pdGVyYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy95anMvZGlzdC95anMubWpzIiwiLi4vbm9kZV9tb2R1bGVzL2xpYjAvcHJvbWlzZS5qcyIsIi4uL3NyYy91dGlsL3N0cmVhbXMudHMiLCIuLi9zcmMvZ2FtZS9nYW1lLnRzIiwiLi4vc3JjL3V0aWwveWpzLnRzIiwiLi4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvaWYtZGVmaW5lZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9saWIwL3dlYnNvY2tldC5qcyIsIi4uL3NyYy91dGlsL25ldC50cyIsIi4uL3NyYy9uZXQvcnRjL3NpZ25hbGVyLnRzIiwiLi4vc3JjL3V0aWwvcnRjLnRzIiwiLi4vc3JjL25ldC9yZXNvdXJjZXMvcHJvdG9jb2wudHMiLCIuLi9zcmMvbmV0L2dhbWVfcGVlci50cyIsIi4uL3NyYy9uZXQvY2xpZW50LnRzIiwiLi4vc3JjL25ldC9zZXJ2ZXIudHMiLCIuLi9zcmMvdWkvdXRpbC93aXRoLXRvb2x0aXAudHMiLCIuLi9zcmMvdWkvaG9zdC10b2dnbGUudHMiLCIuLi9zcmMvdWkvY2xpZW50LXN0YXR1cy50cyIsIi4uL3NyYy91dGlsL3Byb21pc2VzLnRzIiwiLi4vc3JjL3VpL2FwcC50cyIsIi4uL3NyYy91aS9wcHAudHMiLCIuLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBGb3IgdGhlIGxvdmUgb2YgZ29kLCB3aHkgaXMgdGhpcyBicm93c2VyIHNvIGphbmsgKi9cbmNvbnN0IGFwcEhlaWdodCA9ICgpID0+IHtcbiAgY29uc3QgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBkb2Muc3R5bGUuc2V0UHJvcGVydHkoXCItLWFwcC1oZWlnaHRcIiwgYCR7d2luZG93LmlubmVySGVpZ2h0fXB4YCk7XG59O1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgYXBwSGVpZ2h0KTtcbmFwcEhlaWdodCgpO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xyXG4gICAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xyXG4gICAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XHJcbiAgICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG59XHJcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD13aW5kb3cuU2hhZG93Um9vdCYmKHZvaWQgMD09PXdpbmRvdy5TaGFkeUNTU3x8d2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykmJlwiYWRvcHRlZFN0eWxlU2hlZXRzXCJpbiBEb2N1bWVudC5wcm90b3R5cGUmJlwicmVwbGFjZVwiaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUsZT1TeW1ib2woKSxuPW5ldyBXZWFrTWFwO2NsYXNzIHN7Y29uc3RydWN0b3IodCxuLHMpe2lmKHRoaXMuXyRjc3NSZXN1bHQkPSEwLHMhPT1lKXRocm93IEVycm9yKFwiQ1NTUmVzdWx0IGlzIG5vdCBjb25zdHJ1Y3RhYmxlLiBVc2UgYHVuc2FmZUNTU2Agb3IgYGNzc2AgaW5zdGVhZC5cIik7dGhpcy5jc3NUZXh0PXQsdGhpcy50PW59Z2V0IHN0eWxlU2hlZXQoKXtsZXQgZT10aGlzLm87Y29uc3Qgcz10aGlzLnQ7aWYodCYmdm9pZCAwPT09ZSl7Y29uc3QgdD12b2lkIDAhPT1zJiYxPT09cy5sZW5ndGg7dCYmKGU9bi5nZXQocykpLHZvaWQgMD09PWUmJigodGhpcy5vPWU9bmV3IENTU1N0eWxlU2hlZXQpLnJlcGxhY2VTeW5jKHRoaXMuY3NzVGV4dCksdCYmbi5zZXQocyxlKSl9cmV0dXJuIGV9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5jc3NUZXh0fX1jb25zdCBvPXQ9Pm5ldyBzKFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dCtcIlwiLHZvaWQgMCxlKSxyPSh0LC4uLm4pPT57Y29uc3Qgbz0xPT09dC5sZW5ndGg/dFswXTpuLnJlZHVjZSgoKGUsbixzKT0+ZSsodD0+e2lmKCEwPT09dC5fJGNzc1Jlc3VsdCQpcmV0dXJuIHQuY3NzVGV4dDtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdDt0aHJvdyBFcnJvcihcIlZhbHVlIHBhc3NlZCB0byAnY3NzJyBmdW5jdGlvbiBtdXN0IGJlIGEgJ2NzcycgZnVuY3Rpb24gcmVzdWx0OiBcIit0K1wiLiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dCB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuXCIpfSkobikrdFtzKzFdKSx0WzBdKTtyZXR1cm4gbmV3IHMobyx0LGUpfSxpPShlLG4pPT57dD9lLmFkb3B0ZWRTdHlsZVNoZWV0cz1uLm1hcCgodD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/dDp0LnN0eWxlU2hlZXQpKTpuLmZvckVhY2goKHQ9Pntjb25zdCBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxzPXdpbmRvdy5saXROb25jZTt2b2lkIDAhPT1zJiZuLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIscyksbi50ZXh0Q29udGVudD10LmNzc1RleHQsZS5hcHBlbmRDaGlsZChuKX0pKX0sUz10P3Q9PnQ6dD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/KHQ9PntsZXQgZT1cIlwiO2Zvcihjb25zdCBuIG9mIHQuY3NzUnVsZXMpZSs9bi5jc3NUZXh0O3JldHVybiBvKGUpfSkodCk6dDtleHBvcnR7cyBhcyBDU1NSZXN1bHQsaSBhcyBhZG9wdFN0eWxlcyxyIGFzIGNzcyxTIGFzIGdldENvbXBhdGlibGVTdHlsZSx0IGFzIHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyxvIGFzIHVuc2FmZUNTU307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MtdGFnLmpzLm1hcFxuIiwiaW1wb3J0e2dldENvbXBhdGlibGVTdHlsZSBhcyB0LGFkb3B0U3R5bGVzIGFzIGl9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7ZXhwb3J0e0NTU1Jlc3VsdCxhZG9wdFN0eWxlcyxjc3MsZ2V0Q29tcGF0aWJsZVN0eWxlLHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyx1bnNhZmVDU1N9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgcztjb25zdCBlPXdpbmRvdy50cnVzdGVkVHlwZXMscj1lP2UuZW1wdHlTY3JpcHQ6XCJcIixoPXdpbmRvdy5yZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQsbz17dG9BdHRyaWJ1dGUodCxpKXtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnQ9dD9yOm51bGw7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0PW51bGw9PXQ/dDpKU09OLnN0cmluZ2lmeSh0KX1yZXR1cm4gdH0sZnJvbUF0dHJpYnV0ZSh0LGkpe2xldCBzPXQ7c3dpdGNoKGkpe2Nhc2UgQm9vbGVhbjpzPW51bGwhPT10O2JyZWFrO2Nhc2UgTnVtYmVyOnM9bnVsbD09PXQ/bnVsbDpOdW1iZXIodCk7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0cnl7cz1KU09OLnBhcnNlKHQpfWNhdGNoKHQpe3M9bnVsbH19cmV0dXJuIHN9fSxuPSh0LGkpPT5pIT09dCYmKGk9PWl8fHQ9PXQpLGw9e2F0dHJpYnV0ZTohMCx0eXBlOlN0cmluZyxjb252ZXJ0ZXI6byxyZWZsZWN0OiExLGhhc0NoYW5nZWQ6bn07Y2xhc3MgYSBleHRlbmRzIEhUTUxFbGVtZW50e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl8kRWk9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMSx0aGlzLmhhc1VwZGF0ZWQ9ITEsdGhpcy5fJEVsPW51bGwsdGhpcy51KCl9c3RhdGljIGFkZEluaXRpYWxpemVyKHQpe3ZhciBpO251bGwhPT0oaT10aGlzLmgpJiZ2b2lkIDAhPT1pfHwodGhpcy5oPVtdKSx0aGlzLmgucHVzaCh0KX1zdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpe3RoaXMuZmluYWxpemUoKTtjb25zdCB0PVtdO3JldHVybiB0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLmZvckVhY2goKChpLHMpPT57Y29uc3QgZT10aGlzLl8kRXAocyxpKTt2b2lkIDAhPT1lJiYodGhpcy5fJEV2LnNldChlLHMpLHQucHVzaChlKSl9KSksdH1zdGF0aWMgY3JlYXRlUHJvcGVydHkodCxpPWwpe2lmKGkuc3RhdGUmJihpLmF0dHJpYnV0ZT0hMSksdGhpcy5maW5hbGl6ZSgpLHRoaXMuZWxlbWVudFByb3BlcnRpZXMuc2V0KHQsaSksIWkubm9BY2Nlc3NvciYmIXRoaXMucHJvdG90eXBlLmhhc093blByb3BlcnR5KHQpKXtjb25zdCBzPVwic3ltYm9sXCI9PXR5cGVvZiB0P1N5bWJvbCgpOlwiX19cIit0LGU9dGhpcy5nZXRQcm9wZXJ0eURlc2NyaXB0b3IodCxzLGkpO3ZvaWQgMCE9PWUmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnByb3RvdHlwZSx0LGUpfX1zdGF0aWMgZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQsaSxzKXtyZXR1cm57Z2V0KCl7cmV0dXJuIHRoaXNbaV19LHNldChlKXtjb25zdCByPXRoaXNbdF07dGhpc1tpXT1lLHRoaXMucmVxdWVzdFVwZGF0ZSh0LHIscyl9LGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwfX1zdGF0aWMgZ2V0UHJvcGVydHlPcHRpb25zKHQpe3JldHVybiB0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLmdldCh0KXx8bH1zdGF0aWMgZmluYWxpemUoKXtpZih0aGlzLmhhc093blByb3BlcnR5KFwiZmluYWxpemVkXCIpKXJldHVybiExO3RoaXMuZmluYWxpemVkPSEwO2NvbnN0IHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO2lmKHQuZmluYWxpemUoKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAodC5lbGVtZW50UHJvcGVydGllcyksdGhpcy5fJEV2PW5ldyBNYXAsdGhpcy5oYXNPd25Qcm9wZXJ0eShcInByb3BlcnRpZXNcIikpe2NvbnN0IHQ9dGhpcy5wcm9wZXJ0aWVzLGk9Wy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCldO2Zvcihjb25zdCBzIG9mIGkpdGhpcy5jcmVhdGVQcm9wZXJ0eShzLHRbc10pfXJldHVybiB0aGlzLmVsZW1lbnRTdHlsZXM9dGhpcy5maW5hbGl6ZVN0eWxlcyh0aGlzLnN0eWxlcyksITB9c3RhdGljIGZpbmFsaXplU3R5bGVzKGkpe2NvbnN0IHM9W107aWYoQXJyYXkuaXNBcnJheShpKSl7Y29uc3QgZT1uZXcgU2V0KGkuZmxhdCgxLzApLnJldmVyc2UoKSk7Zm9yKGNvbnN0IGkgb2YgZSlzLnVuc2hpZnQodChpKSl9ZWxzZSB2b2lkIDAhPT1pJiZzLnB1c2godChpKSk7cmV0dXJuIHN9c3RhdGljIF8kRXAodCxpKXtjb25zdCBzPWkuYXR0cmlidXRlO3JldHVybiExPT09cz92b2lkIDA6XCJzdHJpbmdcIj09dHlwZW9mIHM/czpcInN0cmluZ1wiPT10eXBlb2YgdD90LnRvTG93ZXJDYXNlKCk6dm9pZCAwfXUoKXt2YXIgdDt0aGlzLl8kRV89bmV3IFByb21pc2UoKHQ9PnRoaXMuZW5hYmxlVXBkYXRpbmc9dCkpLHRoaXMuXyRBTD1uZXcgTWFwLHRoaXMuXyRFZygpLHRoaXMucmVxdWVzdFVwZGF0ZSgpLG51bGw9PT0odD10aGlzLmNvbnN0cnVjdG9yLmgpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9PnQodGhpcykpKX1hZGRDb250cm9sbGVyKHQpe3ZhciBpLHM7KG51bGwhPT0oaT10aGlzLl8kRVMpJiZ2b2lkIDAhPT1pP2k6dGhpcy5fJEVTPVtdKS5wdXNoKHQpLHZvaWQgMCE9PXRoaXMucmVuZGVyUm9vdCYmdGhpcy5pc0Nvbm5lY3RlZCYmKG51bGw9PT0ocz10Lmhvc3RDb25uZWN0ZWQpfHx2b2lkIDA9PT1zfHxzLmNhbGwodCkpfXJlbW92ZUNvbnRyb2xsZXIodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFUyl8fHZvaWQgMD09PWl8fGkuc3BsaWNlKHRoaXMuXyRFUy5pbmRleE9mKHQpPj4+MCwxKX1fJEVnKCl7dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgodCxpKT0+e3RoaXMuaGFzT3duUHJvcGVydHkoaSkmJih0aGlzLl8kRWkuc2V0KGksdGhpc1tpXSksZGVsZXRlIHRoaXNbaV0pfSkpfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdDtjb25zdCBzPW51bGwhPT0odD10aGlzLnNoYWRvd1Jvb3QpJiZ2b2lkIDAhPT10P3Q6dGhpcy5hdHRhY2hTaGFkb3codGhpcy5jb25zdHJ1Y3Rvci5zaGFkb3dSb290T3B0aW9ucyk7cmV0dXJuIGkocyx0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRTdHlsZXMpLHN9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDt2b2lkIDA9PT10aGlzLnJlbmRlclJvb3QmJih0aGlzLnJlbmRlclJvb3Q9dGhpcy5jcmVhdGVSZW5kZXJSb290KCkpLHRoaXMuZW5hYmxlVXBkYXRpbmcoITApLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1lbmFibGVVcGRhdGluZyh0KXt9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3REaXNjb25uZWN0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSl9YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHQsaSxzKXt0aGlzLl8kQUsodCxzKX1fJEVPKHQsaSxzPWwpe3ZhciBlLHI7Y29uc3QgaD10aGlzLmNvbnN0cnVjdG9yLl8kRXAodCxzKTtpZih2b2lkIDAhPT1oJiYhMD09PXMucmVmbGVjdCl7Y29uc3Qgbj0obnVsbCE9PShyPW51bGw9PT0oZT1zLmNvbnZlcnRlcil8fHZvaWQgMD09PWU/dm9pZCAwOmUudG9BdHRyaWJ1dGUpJiZ2b2lkIDAhPT1yP3I6by50b0F0dHJpYnV0ZSkoaSxzLnR5cGUpO3RoaXMuXyRFbD10LG51bGw9PW4/dGhpcy5yZW1vdmVBdHRyaWJ1dGUoaCk6dGhpcy5zZXRBdHRyaWJ1dGUoaCxuKSx0aGlzLl8kRWw9bnVsbH19XyRBSyh0LGkpe3ZhciBzLGU7Y29uc3Qgcj10aGlzLmNvbnN0cnVjdG9yLGg9ci5fJEV2LmdldCh0KTtpZih2b2lkIDAhPT1oJiZ0aGlzLl8kRWwhPT1oKXtjb25zdCB0PXIuZ2V0UHJvcGVydHlPcHRpb25zKGgpLG49dC5jb252ZXJ0ZXIsbD1udWxsIT09KGU9bnVsbCE9PShzPW51bGw9PW4/dm9pZCAwOm4uZnJvbUF0dHJpYnV0ZSkmJnZvaWQgMCE9PXM/czpcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP246bnVsbCkmJnZvaWQgMCE9PWU/ZTpvLmZyb21BdHRyaWJ1dGU7dGhpcy5fJEVsPWgsdGhpc1toXT1sKGksdC50eXBlKSx0aGlzLl8kRWw9bnVsbH19cmVxdWVzdFVwZGF0ZSh0LGkscyl7bGV0IGU9ITA7dm9pZCAwIT09dCYmKCgocz1zfHx0aGlzLmNvbnN0cnVjdG9yLmdldFByb3BlcnR5T3B0aW9ucyh0KSkuaGFzQ2hhbmdlZHx8bikodGhpc1t0XSxpKT8odGhpcy5fJEFMLmhhcyh0KXx8dGhpcy5fJEFMLnNldCh0LGkpLCEwPT09cy5yZWZsZWN0JiZ0aGlzLl8kRWwhPT10JiYodm9pZCAwPT09dGhpcy5fJEVDJiYodGhpcy5fJEVDPW5ldyBNYXApLHRoaXMuXyRFQy5zZXQodCxzKSkpOmU9ITEpLCF0aGlzLmlzVXBkYXRlUGVuZGluZyYmZSYmKHRoaXMuXyRFXz10aGlzLl8kRWooKSl9YXN5bmMgXyRFaigpe3RoaXMuaXNVcGRhdGVQZW5kaW5nPSEwO3RyeXthd2FpdCB0aGlzLl8kRV99Y2F0Y2godCl7UHJvbWlzZS5yZWplY3QodCl9Y29uc3QgdD10aGlzLnNjaGVkdWxlVXBkYXRlKCk7cmV0dXJuIG51bGwhPXQmJmF3YWl0IHQsIXRoaXMuaXNVcGRhdGVQZW5kaW5nfXNjaGVkdWxlVXBkYXRlKCl7cmV0dXJuIHRoaXMucGVyZm9ybVVwZGF0ZSgpfXBlcmZvcm1VcGRhdGUoKXt2YXIgdDtpZighdGhpcy5pc1VwZGF0ZVBlbmRpbmcpcmV0dXJuO3RoaXMuaGFzVXBkYXRlZCx0aGlzLl8kRWkmJih0aGlzLl8kRWkuZm9yRWFjaCgoKHQsaSk9PnRoaXNbaV09dCkpLHRoaXMuXyRFaT12b2lkIDApO2xldCBpPSExO2NvbnN0IHM9dGhpcy5fJEFMO3RyeXtpPXRoaXMuc2hvdWxkVXBkYXRlKHMpLGk/KHRoaXMud2lsbFVwZGF0ZShzKSxudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RVcGRhdGUpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSksdGhpcy51cGRhdGUocykpOnRoaXMuXyRFaygpfWNhdGNoKHQpe3Rocm93IGk9ITEsdGhpcy5fJEVrKCksdH1pJiZ0aGlzLl8kQUUocyl9d2lsbFVwZGF0ZSh0KXt9XyRBRSh0KXt2YXIgaTtudWxsPT09KGk9dGhpcy5fJEVTKXx8dm9pZCAwPT09aXx8aS5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3RVcGRhdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpLHRoaXMuaGFzVXBkYXRlZHx8KHRoaXMuaGFzVXBkYXRlZD0hMCx0aGlzLmZpcnN0VXBkYXRlZCh0KSksdGhpcy51cGRhdGVkKHQpfV8kRWsoKXt0aGlzLl8kQUw9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMX1nZXQgdXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5nZXRVcGRhdGVDb21wbGV0ZSgpfWdldFVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuXyRFX31zaG91bGRVcGRhdGUodCl7cmV0dXJuITB9dXBkYXRlKHQpe3ZvaWQgMCE9PXRoaXMuXyRFQyYmKHRoaXMuXyRFQy5mb3JFYWNoKCgodCxpKT0+dGhpcy5fJEVPKGksdGhpc1tpXSx0KSkpLHRoaXMuXyRFQz12b2lkIDApLHRoaXMuXyRFaygpfXVwZGF0ZWQodCl7fWZpcnN0VXBkYXRlZCh0KXt9fWEuZmluYWxpemVkPSEwLGEuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCxhLmVsZW1lbnRTdHlsZXM9W10sYS5zaGFkb3dSb290T3B0aW9ucz17bW9kZTpcIm9wZW5cIn0sbnVsbD09aHx8aCh7UmVhY3RpdmVFbGVtZW50OmF9KSwobnVsbCE9PShzPWdsb2JhbFRoaXMucmVhY3RpdmVFbGVtZW50VmVyc2lvbnMpJiZ2b2lkIDAhPT1zP3M6Z2xvYmFsVGhpcy5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjEuMy4zXCIpO2V4cG9ydHthIGFzIFJlYWN0aXZlRWxlbWVudCxvIGFzIGRlZmF1bHRDb252ZXJ0ZXIsbiBhcyBub3RFcXVhbH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdGl2ZS1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG52YXIgdDtjb25zdCBpPWdsb2JhbFRoaXMudHJ1c3RlZFR5cGVzLHM9aT9pLmNyZWF0ZVBvbGljeShcImxpdC1odG1sXCIse2NyZWF0ZUhUTUw6dD0+dH0pOnZvaWQgMCxlPWBsaXQkJHsoTWF0aC5yYW5kb20oKStcIlwiKS5zbGljZSg5KX0kYCxvPVwiP1wiK2Usbj1gPCR7b30+YCxsPWRvY3VtZW50LGg9KHQ9XCJcIik9PmwuY3JlYXRlQ29tbWVudCh0KSxyPXQ9Pm51bGw9PT10fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCxkPUFycmF5LmlzQXJyYXksdT10PT57dmFyIGk7cmV0dXJuIGQodCl8fFwiZnVuY3Rpb25cIj09dHlwZW9mKG51bGw9PT0oaT10KXx8dm9pZCAwPT09aT92b2lkIDA6aVtTeW1ib2wuaXRlcmF0b3JdKX0sYz0vPCg/OighLS18XFwvW15hLXpBLVpdKXwoXFwvP1thLXpBLVpdW14+XFxzXSopfChcXC8/JCkpL2csdj0vLS0+L2csYT0vPi9nLGY9Lz58WyBcdFxcblxmXFxyXSg/OihbXlxcc1wiJz49L10rKShbIFx0XFxuXGZcXHJdKj1bIFx0XFxuXGZcXHJdKig/OlteIFx0XFxuXGZcXHJcIidgPD49XXwoXCJ8Jyl8KSl8JCkvZyxfPS8nL2csbT0vXCIvZyxnPS9eKD86c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaSxwPXQ9PihpLC4uLnMpPT4oe18kbGl0VHlwZSQ6dCxzdHJpbmdzOmksdmFsdWVzOnN9KSwkPXAoMSkseT1wKDIpLGI9U3ltYm9sLmZvcihcImxpdC1ub0NoYW5nZVwiKSx3PVN5bWJvbC5mb3IoXCJsaXQtbm90aGluZ1wiKSxUPW5ldyBXZWFrTWFwLHg9KHQsaSxzKT0+e3ZhciBlLG87Y29uc3Qgbj1udWxsIT09KGU9bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1lP2U6aTtsZXQgbD1uLl8kbGl0UGFydCQ7aWYodm9pZCAwPT09bCl7Y29uc3QgdD1udWxsIT09KG89bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1vP286bnVsbDtuLl8kbGl0UGFydCQ9bD1uZXcgTihpLmluc2VydEJlZm9yZShoKCksdCksdCx2b2lkIDAsbnVsbCE9cz9zOnt9KX1yZXR1cm4gbC5fJEFJKHQpLGx9LEE9bC5jcmVhdGVUcmVlV2Fsa2VyKGwsMTI5LG51bGwsITEpLEM9KHQsaSk9Pntjb25zdCBvPXQubGVuZ3RoLTEsbD1bXTtsZXQgaCxyPTI9PT1pP1wiPHN2Zz5cIjpcIlwiLGQ9Yztmb3IobGV0IGk9MDtpPG87aSsrKXtjb25zdCBzPXRbaV07bGV0IG8sdSxwPS0xLCQ9MDtmb3IoOyQ8cy5sZW5ndGgmJihkLmxhc3RJbmRleD0kLHU9ZC5leGVjKHMpLG51bGwhPT11KTspJD1kLmxhc3RJbmRleCxkPT09Yz9cIiEtLVwiPT09dVsxXT9kPXY6dm9pZCAwIT09dVsxXT9kPWE6dm9pZCAwIT09dVsyXT8oZy50ZXN0KHVbMl0pJiYoaD1SZWdFeHAoXCI8L1wiK3VbMl0sXCJnXCIpKSxkPWYpOnZvaWQgMCE9PXVbM10mJihkPWYpOmQ9PT1mP1wiPlwiPT09dVswXT8oZD1udWxsIT1oP2g6YyxwPS0xKTp2b2lkIDA9PT11WzFdP3A9LTI6KHA9ZC5sYXN0SW5kZXgtdVsyXS5sZW5ndGgsbz11WzFdLGQ9dm9pZCAwPT09dVszXT9mOidcIic9PT11WzNdP206Xyk6ZD09PW18fGQ9PT1fP2Q9ZjpkPT09dnx8ZD09PWE/ZD1jOihkPWYsaD12b2lkIDApO2NvbnN0IHk9ZD09PWYmJnRbaSsxXS5zdGFydHNXaXRoKFwiLz5cIik/XCIgXCI6XCJcIjtyKz1kPT09Yz9zK246cD49MD8obC5wdXNoKG8pLHMuc2xpY2UoMCxwKStcIiRsaXQkXCIrcy5zbGljZShwKStlK3kpOnMrZSsoLTI9PT1wPyhsLnB1c2godm9pZCAwKSxpKTp5KX1jb25zdCB1PXIrKHRbb118fFwiPD8+XCIpKygyPT09aT9cIjwvc3ZnPlwiOlwiXCIpO2lmKCFBcnJheS5pc0FycmF5KHQpfHwhdC5oYXNPd25Qcm9wZXJ0eShcInJhd1wiKSl0aHJvdyBFcnJvcihcImludmFsaWQgdGVtcGxhdGUgc3RyaW5ncyBhcnJheVwiKTtyZXR1cm5bdm9pZCAwIT09cz9zLmNyZWF0ZUhUTUwodSk6dSxsXX07Y2xhc3MgRXtjb25zdHJ1Y3Rvcih7c3RyaW5nczp0LF8kbGl0VHlwZSQ6c30sbil7bGV0IGw7dGhpcy5wYXJ0cz1bXTtsZXQgcj0wLGQ9MDtjb25zdCB1PXQubGVuZ3RoLTEsYz10aGlzLnBhcnRzLFt2LGFdPUModCxzKTtpZih0aGlzLmVsPUUuY3JlYXRlRWxlbWVudCh2LG4pLEEuY3VycmVudE5vZGU9dGhpcy5lbC5jb250ZW50LDI9PT1zKXtjb25zdCB0PXRoaXMuZWwuY29udGVudCxpPXQuZmlyc3RDaGlsZDtpLnJlbW92ZSgpLHQuYXBwZW5kKC4uLmkuY2hpbGROb2Rlcyl9Zm9yKDtudWxsIT09KGw9QS5uZXh0Tm9kZSgpKSYmYy5sZW5ndGg8dTspe2lmKDE9PT1sLm5vZGVUeXBlKXtpZihsLmhhc0F0dHJpYnV0ZXMoKSl7Y29uc3QgdD1bXTtmb3IoY29uc3QgaSBvZiBsLmdldEF0dHJpYnV0ZU5hbWVzKCkpaWYoaS5lbmRzV2l0aChcIiRsaXQkXCIpfHxpLnN0YXJ0c1dpdGgoZSkpe2NvbnN0IHM9YVtkKytdO2lmKHQucHVzaChpKSx2b2lkIDAhPT1zKXtjb25zdCB0PWwuZ2V0QXR0cmlidXRlKHMudG9Mb3dlckNhc2UoKStcIiRsaXQkXCIpLnNwbGl0KGUpLGk9LyhbLj9AXSk/KC4qKS8uZXhlYyhzKTtjLnB1c2goe3R5cGU6MSxpbmRleDpyLG5hbWU6aVsyXSxzdHJpbmdzOnQsY3RvcjpcIi5cIj09PWlbMV0/TTpcIj9cIj09PWlbMV0/SDpcIkBcIj09PWlbMV0/STpTfSl9ZWxzZSBjLnB1c2goe3R5cGU6NixpbmRleDpyfSl9Zm9yKGNvbnN0IGkgb2YgdClsLnJlbW92ZUF0dHJpYnV0ZShpKX1pZihnLnRlc3QobC50YWdOYW1lKSl7Y29uc3QgdD1sLnRleHRDb250ZW50LnNwbGl0KGUpLHM9dC5sZW5ndGgtMTtpZihzPjApe2wudGV4dENvbnRlbnQ9aT9pLmVtcHR5U2NyaXB0OlwiXCI7Zm9yKGxldCBpPTA7aTxzO2krKylsLmFwcGVuZCh0W2ldLGgoKSksQS5uZXh0Tm9kZSgpLGMucHVzaCh7dHlwZToyLGluZGV4Oisrcn0pO2wuYXBwZW5kKHRbc10saCgpKX19fWVsc2UgaWYoOD09PWwubm9kZVR5cGUpaWYobC5kYXRhPT09byljLnB1c2goe3R5cGU6MixpbmRleDpyfSk7ZWxzZXtsZXQgdD0tMTtmb3IoOy0xIT09KHQ9bC5kYXRhLmluZGV4T2YoZSx0KzEpKTspYy5wdXNoKHt0eXBlOjcsaW5kZXg6cn0pLHQrPWUubGVuZ3RoLTF9cisrfX1zdGF0aWMgY3JlYXRlRWxlbWVudCh0LGkpe2NvbnN0IHM9bC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cmV0dXJuIHMuaW5uZXJIVE1MPXQsc319ZnVuY3Rpb24gUCh0LGkscz10LGUpe3ZhciBvLG4sbCxoO2lmKGk9PT1iKXJldHVybiBpO2xldCBkPXZvaWQgMCE9PWU/bnVsbD09PShvPXMuXyRDbCl8fHZvaWQgMD09PW8/dm9pZCAwOm9bZV06cy5fJEN1O2NvbnN0IHU9cihpKT92b2lkIDA6aS5fJGxpdERpcmVjdGl2ZSQ7cmV0dXJuKG51bGw9PWQ/dm9pZCAwOmQuY29uc3RydWN0b3IpIT09dSYmKG51bGw9PT0obj1udWxsPT1kP3ZvaWQgMDpkLl8kQU8pfHx2b2lkIDA9PT1ufHxuLmNhbGwoZCwhMSksdm9pZCAwPT09dT9kPXZvaWQgMDooZD1uZXcgdSh0KSxkLl8kQVQodCxzLGUpKSx2b2lkIDAhPT1lPyhudWxsIT09KGw9KGg9cykuXyRDbCkmJnZvaWQgMCE9PWw/bDpoLl8kQ2w9W10pW2VdPWQ6cy5fJEN1PWQpLHZvaWQgMCE9PWQmJihpPVAodCxkLl8kQVModCxpLnZhbHVlcyksZCxlKSksaX1jbGFzcyBWe2NvbnN0cnVjdG9yKHQsaSl7dGhpcy52PVtdLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFEPXQsdGhpcy5fJEFNPWl9Z2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFNLnBhcmVudE5vZGV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9cCh0KXt2YXIgaTtjb25zdHtlbDp7Y29udGVudDpzfSxwYXJ0czplfT10aGlzLl8kQUQsbz0obnVsbCE9PShpPW51bGw9PXQ/dm9pZCAwOnQuY3JlYXRpb25TY29wZSkmJnZvaWQgMCE9PWk/aTpsKS5pbXBvcnROb2RlKHMsITApO0EuY3VycmVudE5vZGU9bztsZXQgbj1BLm5leHROb2RlKCksaD0wLHI9MCxkPWVbMF07Zm9yKDt2b2lkIDAhPT1kOyl7aWYoaD09PWQuaW5kZXgpe2xldCBpOzI9PT1kLnR5cGU/aT1uZXcgTihuLG4ubmV4dFNpYmxpbmcsdGhpcyx0KToxPT09ZC50eXBlP2k9bmV3IGQuY3RvcihuLGQubmFtZSxkLnN0cmluZ3MsdGhpcyx0KTo2PT09ZC50eXBlJiYoaT1uZXcgTChuLHRoaXMsdCkpLHRoaXMudi5wdXNoKGkpLGQ9ZVsrK3JdfWghPT0obnVsbD09ZD92b2lkIDA6ZC5pbmRleCkmJihuPUEubmV4dE5vZGUoKSxoKyspfXJldHVybiBvfW0odCl7bGV0IGk9MDtmb3IoY29uc3QgcyBvZiB0aGlzLnYpdm9pZCAwIT09cyYmKHZvaWQgMCE9PXMuc3RyaW5ncz8ocy5fJEFJKHQscyxpKSxpKz1zLnN0cmluZ3MubGVuZ3RoLTIpOnMuXyRBSSh0W2ldKSksaSsrfX1jbGFzcyBOe2NvbnN0cnVjdG9yKHQsaSxzLGUpe3ZhciBvO3RoaXMudHlwZT0yLHRoaXMuXyRBSD13LHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFBPXQsdGhpcy5fJEFCPWksdGhpcy5fJEFNPXMsdGhpcy5vcHRpb25zPWUsdGhpcy5fJENnPW51bGw9PT0obz1udWxsPT1lP3ZvaWQgMDplLmlzQ29ubmVjdGVkKXx8dm9pZCAwPT09b3x8b31nZXQgXyRBVSgpe3ZhciB0LGk7cmV0dXJuIG51bGwhPT0oaT1udWxsPT09KHQ9dGhpcy5fJEFNKXx8dm9pZCAwPT09dD92b2lkIDA6dC5fJEFVKSYmdm9pZCAwIT09aT9pOnRoaXMuXyRDZ31nZXQgcGFyZW50Tm9kZSgpe2xldCB0PXRoaXMuXyRBQS5wYXJlbnROb2RlO2NvbnN0IGk9dGhpcy5fJEFNO3JldHVybiB2b2lkIDAhPT1pJiYxMT09PXQubm9kZVR5cGUmJih0PWkucGFyZW50Tm9kZSksdH1nZXQgc3RhcnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQX1nZXQgZW5kTm9kZSgpe3JldHVybiB0aGlzLl8kQUJ9XyRBSSh0LGk9dGhpcyl7dD1QKHRoaXMsdCxpKSxyKHQpP3Q9PT13fHxudWxsPT10fHxcIlwiPT09dD8odGhpcy5fJEFIIT09dyYmdGhpcy5fJEFSKCksdGhpcy5fJEFIPXcpOnQhPT10aGlzLl8kQUgmJnQhPT1iJiZ0aGlzLiQodCk6dm9pZCAwIT09dC5fJGxpdFR5cGUkP3RoaXMuVCh0KTp2b2lkIDAhPT10Lm5vZGVUeXBlP3RoaXMuayh0KTp1KHQpP3RoaXMuUyh0KTp0aGlzLiQodCl9TSh0LGk9dGhpcy5fJEFCKXtyZXR1cm4gdGhpcy5fJEFBLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsaSl9ayh0KXt0aGlzLl8kQUghPT10JiYodGhpcy5fJEFSKCksdGhpcy5fJEFIPXRoaXMuTSh0KSl9JCh0KXt0aGlzLl8kQUghPT13JiZyKHRoaXMuXyRBSCk/dGhpcy5fJEFBLm5leHRTaWJsaW5nLmRhdGE9dDp0aGlzLmsobC5jcmVhdGVUZXh0Tm9kZSh0KSksdGhpcy5fJEFIPXR9VCh0KXt2YXIgaTtjb25zdHt2YWx1ZXM6cyxfJGxpdFR5cGUkOmV9PXQsbz1cIm51bWJlclwiPT10eXBlb2YgZT90aGlzLl8kQUModCk6KHZvaWQgMD09PWUuZWwmJihlLmVsPUUuY3JlYXRlRWxlbWVudChlLmgsdGhpcy5vcHRpb25zKSksZSk7aWYoKG51bGw9PT0oaT10aGlzLl8kQUgpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLl8kQUQpPT09byl0aGlzLl8kQUgubShzKTtlbHNle2NvbnN0IHQ9bmV3IFYobyx0aGlzKSxpPXQucCh0aGlzLm9wdGlvbnMpO3QubShzKSx0aGlzLmsoaSksdGhpcy5fJEFIPXR9fV8kQUModCl7bGV0IGk9VC5nZXQodC5zdHJpbmdzKTtyZXR1cm4gdm9pZCAwPT09aSYmVC5zZXQodC5zdHJpbmdzLGk9bmV3IEUodCkpLGl9Uyh0KXtkKHRoaXMuXyRBSCl8fCh0aGlzLl8kQUg9W10sdGhpcy5fJEFSKCkpO2NvbnN0IGk9dGhpcy5fJEFIO2xldCBzLGU9MDtmb3IoY29uc3QgbyBvZiB0KWU9PT1pLmxlbmd0aD9pLnB1c2gocz1uZXcgTih0aGlzLk0oaCgpKSx0aGlzLk0oaCgpKSx0aGlzLHRoaXMub3B0aW9ucykpOnM9aVtlXSxzLl8kQUkobyksZSsrO2U8aS5sZW5ndGgmJih0aGlzLl8kQVIocyYmcy5fJEFCLm5leHRTaWJsaW5nLGUpLGkubGVuZ3RoPWUpfV8kQVIodD10aGlzLl8kQUEubmV4dFNpYmxpbmcsaSl7dmFyIHM7Zm9yKG51bGw9PT0ocz10aGlzLl8kQVApfHx2b2lkIDA9PT1zfHxzLmNhbGwodGhpcywhMSwhMCxpKTt0JiZ0IT09dGhpcy5fJEFCOyl7Y29uc3QgaT10Lm5leHRTaWJsaW5nO3QucmVtb3ZlKCksdD1pfX1zZXRDb25uZWN0ZWQodCl7dmFyIGk7dm9pZCAwPT09dGhpcy5fJEFNJiYodGhpcy5fJENnPXQsbnVsbD09PShpPXRoaXMuXyRBUCl8fHZvaWQgMD09PWl8fGkuY2FsbCh0aGlzLHQpKX19Y2xhc3MgU3tjb25zdHJ1Y3Rvcih0LGkscyxlLG8pe3RoaXMudHlwZT0xLHRoaXMuXyRBSD13LHRoaXMuXyRBTj12b2lkIDAsdGhpcy5lbGVtZW50PXQsdGhpcy5uYW1lPWksdGhpcy5fJEFNPWUsdGhpcy5vcHRpb25zPW8scy5sZW5ndGg+Mnx8XCJcIiE9PXNbMF18fFwiXCIhPT1zWzFdPyh0aGlzLl8kQUg9QXJyYXkocy5sZW5ndGgtMSkuZmlsbChuZXcgU3RyaW5nKSx0aGlzLnN0cmluZ3M9cyk6dGhpcy5fJEFIPXd9Z2V0IHRhZ05hbWUoKXtyZXR1cm4gdGhpcy5lbGVtZW50LnRhZ05hbWV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBSSh0LGk9dGhpcyxzLGUpe2NvbnN0IG89dGhpcy5zdHJpbmdzO2xldCBuPSExO2lmKHZvaWQgMD09PW8pdD1QKHRoaXMsdCxpLDApLG49IXIodCl8fHQhPT10aGlzLl8kQUgmJnQhPT1iLG4mJih0aGlzLl8kQUg9dCk7ZWxzZXtjb25zdCBlPXQ7bGV0IGwsaDtmb3IodD1vWzBdLGw9MDtsPG8ubGVuZ3RoLTE7bCsrKWg9UCh0aGlzLGVbcytsXSxpLGwpLGg9PT1iJiYoaD10aGlzLl8kQUhbbF0pLG58fChuPSFyKGgpfHxoIT09dGhpcy5fJEFIW2xdKSxoPT09dz90PXc6dCE9PXcmJih0Kz0obnVsbCE9aD9oOlwiXCIpK29bbCsxXSksdGhpcy5fJEFIW2xdPWh9biYmIWUmJnRoaXMuQyh0KX1DKHQpe3Q9PT13P3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTp0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSxudWxsIT10P3Q6XCJcIil9fWNsYXNzIE0gZXh0ZW5kcyBTe2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9M31DKHQpe3RoaXMuZWxlbWVudFt0aGlzLm5hbWVdPXQ9PT13P3ZvaWQgMDp0fX1jb25zdCBrPWk/aS5lbXB0eVNjcmlwdDpcIlwiO2NsYXNzIEggZXh0ZW5kcyBTe2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9NH1DKHQpe3QmJnQhPT13P3RoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLGspOnRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKX19Y2xhc3MgSSBleHRlbmRzIFN7Y29uc3RydWN0b3IodCxpLHMsZSxvKXtzdXBlcih0LGkscyxlLG8pLHRoaXMudHlwZT01fV8kQUkodCxpPXRoaXMpe3ZhciBzO2lmKCh0PW51bGwhPT0ocz1QKHRoaXMsdCxpLDApKSYmdm9pZCAwIT09cz9zOncpPT09YilyZXR1cm47Y29uc3QgZT10aGlzLl8kQUgsbz10PT09dyYmZSE9PXd8fHQuY2FwdHVyZSE9PWUuY2FwdHVyZXx8dC5vbmNlIT09ZS5vbmNlfHx0LnBhc3NpdmUhPT1lLnBhc3NpdmUsbj10IT09dyYmKGU9PT13fHxvKTtvJiZ0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyxlKSxuJiZ0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyx0KSx0aGlzLl8kQUg9dH1oYW5kbGVFdmVudCh0KXt2YXIgaSxzO1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuXyRBSD90aGlzLl8kQUguY2FsbChudWxsIT09KHM9bnVsbD09PShpPXRoaXMub3B0aW9ucyl8fHZvaWQgMD09PWk/dm9pZCAwOmkuaG9zdCkmJnZvaWQgMCE9PXM/czp0aGlzLmVsZW1lbnQsdCk6dGhpcy5fJEFILmhhbmRsZUV2ZW50KHQpfX1jbGFzcyBMe2NvbnN0cnVjdG9yKHQsaSxzKXt0aGlzLmVsZW1lbnQ9dCx0aGlzLnR5cGU9Nix0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBTT1pLHRoaXMub3B0aW9ucz1zfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQUkodCl7UCh0aGlzLHQpfX1jb25zdCBSPXtMOlwiJGxpdCRcIixQOmUsVjpvLEk6MSxOOkMsUjpWLGo6dSxEOlAsSDpOLEY6UyxPOkgsVzpJLEI6TSxaOkx9LHo9d2luZG93LmxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQ7bnVsbD09enx8eihFLE4pLChudWxsIT09KHQ9Z2xvYmFsVGhpcy5saXRIdG1sVmVyc2lvbnMpJiZ2b2lkIDAhPT10P3Q6Z2xvYmFsVGhpcy5saXRIdG1sVmVyc2lvbnM9W10pLnB1c2goXCIyLjIuNlwiKTtleHBvcnR7UiBhcyBfJExILCQgYXMgaHRtbCxiIGFzIG5vQ2hhbmdlLHcgYXMgbm90aGluZyx4IGFzIHJlbmRlcix5IGFzIHN2Z307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtaHRtbC5qcy5tYXBcbiIsImltcG9ydHtSZWFjdGl2ZUVsZW1lbnQgYXMgdH1mcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtleHBvcnQqZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI7aW1wb3J0e3JlbmRlciBhcyBlLG5vQ2hhbmdlIGFzIGl9ZnJvbVwibGl0LWh0bWxcIjtleHBvcnQqZnJvbVwibGl0LWh0bWxcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL3ZhciBsLG87Y29uc3Qgcj10O2NsYXNzIHMgZXh0ZW5kcyB0e2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnJlbmRlck9wdGlvbnM9e2hvc3Q6dGhpc30sdGhpcy5fJERvPXZvaWQgMH1jcmVhdGVSZW5kZXJSb290KCl7dmFyIHQsZTtjb25zdCBpPXN1cGVyLmNyZWF0ZVJlbmRlclJvb3QoKTtyZXR1cm4gbnVsbCE9PSh0PShlPXRoaXMucmVuZGVyT3B0aW9ucykucmVuZGVyQmVmb3JlKSYmdm9pZCAwIT09dHx8KGUucmVuZGVyQmVmb3JlPWkuZmlyc3RDaGlsZCksaX11cGRhdGUodCl7Y29uc3QgaT10aGlzLnJlbmRlcigpO3RoaXMuaGFzVXBkYXRlZHx8KHRoaXMucmVuZGVyT3B0aW9ucy5pc0Nvbm5lY3RlZD10aGlzLmlzQ29ubmVjdGVkKSxzdXBlci51cGRhdGUodCksdGhpcy5fJERvPWUoaSx0aGlzLnJlbmRlclJvb3QsdGhpcy5yZW5kZXJPcHRpb25zKX1jb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O3N1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCksbnVsbD09PSh0PXRoaXMuXyREbyl8fHZvaWQgMD09PXR8fHQuc2V0Q29ubmVjdGVkKCEwKX1kaXNjb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O3N1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCksbnVsbD09PSh0PXRoaXMuXyREbyl8fHZvaWQgMD09PXR8fHQuc2V0Q29ubmVjdGVkKCExKX1yZW5kZXIoKXtyZXR1cm4gaX19cy5maW5hbGl6ZWQ9ITAscy5fJGxpdEVsZW1lbnQkPSEwLG51bGw9PT0obD1nbG9iYWxUaGlzLmxpdEVsZW1lbnRIeWRyYXRlU3VwcG9ydCl8fHZvaWQgMD09PWx8fGwuY2FsbChnbG9iYWxUaGlzLHtMaXRFbGVtZW50OnN9KTtjb25zdCBuPWdsb2JhbFRoaXMubGl0RWxlbWVudFBvbHlmaWxsU3VwcG9ydDtudWxsPT1ufHxuKHtMaXRFbGVtZW50OnN9KTtjb25zdCBoPXtfJEFLOih0LGUsaSk9Pnt0Ll8kQUsoZSxpKX0sXyRBTDp0PT50Ll8kQUx9OyhudWxsIT09KG89Z2xvYmFsVGhpcy5saXRFbGVtZW50VmVyc2lvbnMpJiZ2b2lkIDAhPT1vP286Z2xvYmFsVGhpcy5saXRFbGVtZW50VmVyc2lvbnM9W10pLnB1c2goXCIzLjIuMVwiKTtleHBvcnR7cyBhcyBMaXRFbGVtZW50LHIgYXMgVXBkYXRpbmdFbGVtZW50LGggYXMgXyRMRX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtZWxlbWVudC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3Qgbj1uPT5lPT5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlPygobixlKT0+KHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUobixlKSxlKSkobixlKTooKG4sZSk9Pntjb25zdHtraW5kOnQsZWxlbWVudHM6aX09ZTtyZXR1cm57a2luZDp0LGVsZW1lbnRzOmksZmluaXNoZXIoZSl7d2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShuLGUpfX19KShuLGUpO2V4cG9ydHtuIGFzIGN1c3RvbUVsZW1lbnR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VzdG9tLWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IGk9KGksZSk9PlwibWV0aG9kXCI9PT1lLmtpbmQmJmUuZGVzY3JpcHRvciYmIShcInZhbHVlXCJpbiBlLmRlc2NyaXB0b3IpP3suLi5lLGZpbmlzaGVyKG4pe24uY3JlYXRlUHJvcGVydHkoZS5rZXksaSl9fTp7a2luZDpcImZpZWxkXCIsa2V5OlN5bWJvbCgpLHBsYWNlbWVudDpcIm93blwiLGRlc2NyaXB0b3I6e30sb3JpZ2luYWxLZXk6ZS5rZXksaW5pdGlhbGl6ZXIoKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluaXRpYWxpemVyJiYodGhpc1tlLmtleV09ZS5pbml0aWFsaXplci5jYWxsKHRoaXMpKX0sZmluaXNoZXIobil7bi5jcmVhdGVQcm9wZXJ0eShlLmtleSxpKX19O2Z1bmN0aW9uIGUoZSl7cmV0dXJuKG4sdCk9PnZvaWQgMCE9PXQ/KChpLGUsbik9PntlLmNvbnN0cnVjdG9yLmNyZWF0ZVByb3BlcnR5KG4saSl9KShlLG4sdCk6aShlLG4pfWV4cG9ydHtlIGFzIHByb3BlcnR5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BlcnR5LmpzLm1hcFxuIiwiaW1wb3J0e3Byb3BlcnR5IGFzIHJ9ZnJvbVwiLi9wcm9wZXJ0eS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovZnVuY3Rpb24gdCh0KXtyZXR1cm4gcih7Li4udCxzdGF0ZTohMH0pfWV4cG9ydHt0IGFzIHN0YXRlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCBlPShlLHQsbyk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxvLGUpfSx0PShlLHQpPT4oe2tpbmQ6XCJtZXRob2RcIixwbGFjZW1lbnQ6XCJwcm90b3R5cGVcIixrZXk6dC5rZXksZGVzY3JpcHRvcjplfSksbz0oe2ZpbmlzaGVyOmUsZGVzY3JpcHRvcjp0fSk9PihvLG4pPT57dmFyIHI7aWYodm9pZCAwPT09bil7Y29uc3Qgbj1udWxsIT09KHI9by5vcmlnaW5hbEtleSkmJnZvaWQgMCE9PXI/cjpvLmtleSxpPW51bGwhPXQ/e2tpbmQ6XCJtZXRob2RcIixwbGFjZW1lbnQ6XCJwcm90b3R5cGVcIixrZXk6bixkZXNjcmlwdG9yOnQoby5rZXkpfTp7Li4ubyxrZXk6bn07cmV0dXJuIG51bGwhPWUmJihpLmZpbmlzaGVyPWZ1bmN0aW9uKHQpe2UodCxuKX0pLGl9e2NvbnN0IHI9by5jb25zdHJ1Y3Rvcjt2b2lkIDAhPT10JiZPYmplY3QuZGVmaW5lUHJvcGVydHkobyxuLHQobikpLG51bGw9PWV8fGUocixuKX19O2V4cG9ydHtvIGFzIGRlY29yYXRlUHJvcGVydHksZSBhcyBsZWdhY3lQcm90b3R5cGVNZXRob2QsdCBhcyBzdGFuZGFyZFByb3RvdHlwZU1ldGhvZH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLmpzLm1hcFxuIiwiaW1wb3J0e2RlY29yYXRlUHJvcGVydHkgYXMgcn1mcm9tXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2Z1bmN0aW9uIGUoZSl7cmV0dXJuIHIoe2ZpbmlzaGVyOihyLHQpPT57T2JqZWN0LmFzc2lnbihyLnByb3RvdHlwZVt0XSxlKX19KX1leHBvcnR7ZSBhcyBldmVudE9wdGlvbnN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnQtb3B0aW9ucy5qcy5tYXBcbiIsImltcG9ydHtkZWNvcmF0ZVByb3BlcnR5IGFzIG99ZnJvbVwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9mdW5jdGlvbiBpKGksbil7cmV0dXJuIG8oe2Rlc2NyaXB0b3I6bz0+e2NvbnN0IHQ9e2dldCgpe3ZhciBvLG47cmV0dXJuIG51bGwhPT0obj1udWxsPT09KG89dGhpcy5yZW5kZXJSb290KXx8dm9pZCAwPT09bz92b2lkIDA6by5xdWVyeVNlbGVjdG9yKGkpKSYmdm9pZCAwIT09bj9uOm51bGx9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfTtpZihuKXtjb25zdCBuPVwic3ltYm9sXCI9PXR5cGVvZiBvP1N5bWJvbCgpOlwiX19cIitvO3QuZ2V0PWZ1bmN0aW9uKCl7dmFyIG8sdDtyZXR1cm4gdm9pZCAwPT09dGhpc1tuXSYmKHRoaXNbbl09bnVsbCE9PSh0PW51bGw9PT0obz10aGlzLnJlbmRlclJvb3QpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnF1ZXJ5U2VsZWN0b3IoaSkpJiZ2b2lkIDAhPT10P3Q6bnVsbCksdGhpc1tuXX19cmV0dXJuIHR9fSl9ZXhwb3J0e2kgYXMgcXVlcnl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnkuanMubWFwXG4iLCJpbXBvcnR7ZGVjb3JhdGVQcm9wZXJ0eSBhcyBvfWZyb21cIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIG47Y29uc3QgZT1udWxsIT0obnVsbD09PShuPXdpbmRvdy5IVE1MU2xvdEVsZW1lbnQpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnByb3RvdHlwZS5hc3NpZ25lZEVsZW1lbnRzKT8obyxuKT0+by5hc3NpZ25lZEVsZW1lbnRzKG4pOihvLG4pPT5vLmFzc2lnbmVkTm9kZXMobikuZmlsdGVyKChvPT5vLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpKTtmdW5jdGlvbiBsKG4pe2NvbnN0e3Nsb3Q6bCxzZWxlY3Rvcjp0fT1udWxsIT1uP246e307cmV0dXJuIG8oe2Rlc2NyaXB0b3I6bz0+KHtnZXQoKXt2YXIgbztjb25zdCByPVwic2xvdFwiKyhsP2BbbmFtZT0ke2x9XWA6XCI6bm90KFtuYW1lXSlcIiksaT1udWxsPT09KG89dGhpcy5yZW5kZXJSb290KXx8dm9pZCAwPT09bz92b2lkIDA6by5xdWVyeVNlbGVjdG9yKHIpLHM9bnVsbCE9aT9lKGksbik6W107cmV0dXJuIHQ/cy5maWx0ZXIoKG89Pm8ubWF0Y2hlcyh0KSkpOnN9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9KX1leHBvcnR7bCBhcyBxdWVyeUFzc2lnbmVkRWxlbWVudHN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnktYXNzaWduZWQtZWxlbWVudHMuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHQ9e0FUVFJJQlVURToxLENISUxEOjIsUFJPUEVSVFk6MyxCT09MRUFOX0FUVFJJQlVURTo0LEVWRU5UOjUsRUxFTUVOVDo2fSxlPXQ9PiguLi5lKT0+KHtfJGxpdERpcmVjdGl2ZSQ6dCx2YWx1ZXM6ZX0pO2NsYXNzIGl7Y29uc3RydWN0b3IodCl7fWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQVQodCxlLGkpe3RoaXMuXyRDdD10LHRoaXMuXyRBTT1lLHRoaXMuXyRDaT1pfV8kQVModCxlKXtyZXR1cm4gdGhpcy51cGRhdGUodCxlKX11cGRhdGUodCxlKXtyZXR1cm4gdGhpcy5yZW5kZXIoLi4uZSl9fWV4cG9ydHtpIGFzIERpcmVjdGl2ZSx0IGFzIFBhcnRUeXBlLGUgYXMgZGlyZWN0aXZlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZS5qcy5tYXBcbiIsImltcG9ydHtfJExIIGFzIG99ZnJvbVwiLi9saXQtaHRtbC5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3R7SDppfT1vLHQ9bz0+bnVsbD09PW98fFwib2JqZWN0XCIhPXR5cGVvZiBvJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBvLG49e0hUTUw6MSxTVkc6Mn0sdj0obyxpKT0+e3ZhciB0LG47cmV0dXJuIHZvaWQgMD09PWk/dm9pZCAwIT09KG51bGw9PT0odD1vKXx8dm9pZCAwPT09dD92b2lkIDA6dC5fJGxpdFR5cGUkKToobnVsbD09PShuPW8pfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLl8kbGl0VHlwZSQpPT09aX0sbD1vPT57dmFyIGk7cmV0dXJuIHZvaWQgMCE9PShudWxsPT09KGk9byl8fHZvaWQgMD09PWk/dm9pZCAwOmkuXyRsaXREaXJlY3RpdmUkKX0sZD1vPT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT1vKXx8dm9pZCAwPT09aT92b2lkIDA6aS5fJGxpdERpcmVjdGl2ZSR9LHI9bz0+dm9pZCAwPT09by5zdHJpbmdzLGU9KCk9PmRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIiksdT0obyx0LG4pPT57dmFyIHY7Y29uc3QgbD1vLl8kQUEucGFyZW50Tm9kZSxkPXZvaWQgMD09PXQ/by5fJEFCOnQuXyRBQTtpZih2b2lkIDA9PT1uKXtjb25zdCB0PWwuaW5zZXJ0QmVmb3JlKGUoKSxkKSx2PWwuaW5zZXJ0QmVmb3JlKGUoKSxkKTtuPW5ldyBpKHQsdixvLG8ub3B0aW9ucyl9ZWxzZXtjb25zdCBpPW4uXyRBQi5uZXh0U2libGluZyx0PW4uXyRBTSxyPXQhPT1vO2lmKHIpe2xldCBpO251bGw9PT0odj1uLl8kQVEpfHx2b2lkIDA9PT12fHx2LmNhbGwobixvKSxuLl8kQU09byx2b2lkIDAhPT1uLl8kQVAmJihpPW8uXyRBVSkhPT10Ll8kQVUmJm4uXyRBUChpKX1pZihpIT09ZHx8cil7bGV0IG89bi5fJEFBO2Zvcig7byE9PWk7KXtjb25zdCBpPW8ubmV4dFNpYmxpbmc7bC5pbnNlcnRCZWZvcmUobyxkKSxvPWl9fX1yZXR1cm4gbn0sYz0obyxpLHQ9byk9PihvLl8kQUkoaSx0KSxvKSxmPXt9LHM9KG8saT1mKT0+by5fJEFIPWksYT1vPT5vLl8kQUgsbT1vPT57dmFyIGk7bnVsbD09PShpPW8uXyRBUCl8fHZvaWQgMD09PWl8fGkuY2FsbChvLCExLCEwKTtsZXQgdD1vLl8kQUE7Y29uc3Qgbj1vLl8kQUIubmV4dFNpYmxpbmc7Zm9yKDt0IT09bjspe2NvbnN0IG89dC5uZXh0U2libGluZzt0LnJlbW92ZSgpLHQ9b319LHA9bz0+e28uXyRBUigpfTtleHBvcnR7biBhcyBUZW1wbGF0ZVJlc3VsdFR5cGUscCBhcyBjbGVhclBhcnQsYSBhcyBnZXRDb21taXR0ZWRWYWx1ZSxkIGFzIGdldERpcmVjdGl2ZUNsYXNzLHUgYXMgaW5zZXJ0UGFydCxsIGFzIGlzRGlyZWN0aXZlUmVzdWx0LHQgYXMgaXNQcmltaXRpdmUsciBhcyBpc1NpbmdsZUV4cHJlc3Npb24sdiBhcyBpc1RlbXBsYXRlUmVzdWx0LG0gYXMgcmVtb3ZlUGFydCxjIGFzIHNldENoaWxkUGFydFZhbHVlLHMgYXMgc2V0Q29tbWl0dGVkVmFsdWV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlLWhlbHBlcnMuanMubWFwXG4iLCJpbXBvcnR7bm9DaGFuZ2UgYXMgZX1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO2ltcG9ydHtkaXJlY3RpdmUgYXMgcyxEaXJlY3RpdmUgYXMgdCxQYXJ0VHlwZSBhcyByfWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO2ltcG9ydHtnZXRDb21taXR0ZWRWYWx1ZSBhcyBsLHNldENoaWxkUGFydFZhbHVlIGFzIG8saW5zZXJ0UGFydCBhcyBpLHJlbW92ZVBhcnQgYXMgbixzZXRDb21taXR0ZWRWYWx1ZSBhcyBmfWZyb21cIi4uL2RpcmVjdGl2ZS1oZWxwZXJzLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHU9KGUscyx0KT0+e2NvbnN0IHI9bmV3IE1hcDtmb3IobGV0IGw9cztsPD10O2wrKylyLnNldChlW2xdLGwpO3JldHVybiByfSxjPXMoY2xhc3MgZXh0ZW5kcyB0e2NvbnN0cnVjdG9yKGUpe2lmKHN1cGVyKGUpLGUudHlwZSE9PXIuQ0hJTEQpdGhyb3cgRXJyb3IoXCJyZXBlYXQoKSBjYW4gb25seSBiZSB1c2VkIGluIHRleHQgZXhwcmVzc2lvbnNcIil9ZHQoZSxzLHQpe2xldCByO3ZvaWQgMD09PXQ/dD1zOnZvaWQgMCE9PXMmJihyPXMpO2NvbnN0IGw9W10sbz1bXTtsZXQgaT0wO2Zvcihjb25zdCBzIG9mIGUpbFtpXT1yP3IocyxpKTppLG9baV09dChzLGkpLGkrKztyZXR1cm57dmFsdWVzOm8sa2V5czpsfX1yZW5kZXIoZSxzLHQpe3JldHVybiB0aGlzLmR0KGUscyx0KS52YWx1ZXN9dXBkYXRlKHMsW3QscixjXSl7dmFyIGQ7Y29uc3QgYT1sKHMpLHt2YWx1ZXM6cCxrZXlzOnZ9PXRoaXMuZHQodCxyLGMpO2lmKCFBcnJheS5pc0FycmF5KGEpKXJldHVybiB0aGlzLnV0PXYscDtjb25zdCBoPW51bGwhPT0oZD10aGlzLnV0KSYmdm9pZCAwIT09ZD9kOnRoaXMudXQ9W10sbT1bXTtsZXQgeSx4LGo9MCxrPWEubGVuZ3RoLTEsdz0wLEE9cC5sZW5ndGgtMTtmb3IoO2o8PWsmJnc8PUE7KWlmKG51bGw9PT1hW2pdKWorKztlbHNlIGlmKG51bGw9PT1hW2tdKWstLTtlbHNlIGlmKGhbal09PT12W3ddKW1bd109byhhW2pdLHBbd10pLGorKyx3Kys7ZWxzZSBpZihoW2tdPT09dltBXSltW0FdPW8oYVtrXSxwW0FdKSxrLS0sQS0tO2Vsc2UgaWYoaFtqXT09PXZbQV0pbVtBXT1vKGFbal0scFtBXSksaShzLG1bQSsxXSxhW2pdKSxqKyssQS0tO2Vsc2UgaWYoaFtrXT09PXZbd10pbVt3XT1vKGFba10scFt3XSksaShzLGFbal0sYVtrXSksay0tLHcrKztlbHNlIGlmKHZvaWQgMD09PXkmJih5PXUodix3LEEpLHg9dShoLGosaykpLHkuaGFzKGhbal0pKWlmKHkuaGFzKGhba10pKXtjb25zdCBlPXguZ2V0KHZbd10pLHQ9dm9pZCAwIT09ZT9hW2VdOm51bGw7aWYobnVsbD09PXQpe2NvbnN0IGU9aShzLGFbal0pO28oZSxwW3ddKSxtW3ddPWV9ZWxzZSBtW3ddPW8odCxwW3ddKSxpKHMsYVtqXSx0KSxhW2VdPW51bGw7dysrfWVsc2UgbihhW2tdKSxrLS07ZWxzZSBuKGFbal0pLGorKztmb3IoO3c8PUE7KXtjb25zdCBlPWkocyxtW0ErMV0pO28oZSxwW3ddKSxtW3crK109ZX1mb3IoO2o8PWs7KXtjb25zdCBlPWFbaisrXTtudWxsIT09ZSYmbihlKX1yZXR1cm4gdGhpcy51dD12LGYocyxtKSxlfX0pO2V4cG9ydHtjIGFzIHJlcGVhdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBlYXQuanMubWFwXG4iLCJleHBvcnQgdHlwZSBQb2ludCA9IFtudW1iZXIsIG51bWJlcl07XG5cbmV4cG9ydCBjb25zdCBhZGRfcCA9IChhOiBQb2ludCwgYjogUG9pbnQpOiBQb2ludCA9PiBbYVswXSArIGJbMF0sIGFbMV0gKyBiWzFdXTtcbmV4cG9ydCBjb25zdCBhZGRfYyA9IChhOiBQb2ludCwgYzogbnVtYmVyKTogUG9pbnQgPT4gYWRkX3AoYSwgW2MsIGNdKTtcblxuZXhwb3J0IGNvbnN0IHN1Yl9wID0gKGE6IFBvaW50LCBiOiBQb2ludCk6IFBvaW50ID0+IFthWzBdIC0gYlswXSwgYVsxXSAtIGJbMV1dO1xuXG5leHBvcnQgY29uc3QgbXVsX2MgPSAoYTogUG9pbnQsIGM6IG51bWJlcik6IFBvaW50ID0+IFthWzBdICogYywgYVsxXSAqIGNdO1xuZXhwb3J0IGNvbnN0IG11bF9wID0gKGE6IFBvaW50LCBiOiBQb2ludCk6IFBvaW50ID0+IFthWzBdICogYlswXSwgYVsxXSAqIGJbMV1dO1xuXG5leHBvcnQgY29uc3QgZGl2X3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogUG9pbnQgPT4gW2FbMF0gLyBiWzBdLCBhWzFdIC8gYlsxXV07XG5leHBvcnQgY29uc3QgZGl2X2MgPSAoYTogUG9pbnQsIGM6IG51bWJlcik6IFBvaW50ID0+IFthWzBdIC8gYywgYVsxXSAvIGNdO1xuXG5leHBvcnQgY29uc3QgZ3RfcCA9IChhOiBQb2ludCwgYjogUG9pbnQpOiBib29sZWFuID0+IGFbMF0gPiBiWzBdICYmIGFbMV0gPiBiWzFdO1xuZXhwb3J0IGNvbnN0IGx0X3AgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogYm9vbGVhbiA9PiBhWzBdIDwgYlswXSAmJiBhWzFdIDwgYlsxXTtcblxuZXhwb3J0IGNvbnN0IG1heF9wID0gKGE6IFBvaW50LCBiOiBQb2ludCk6IFBvaW50ID0+IFtNYXRoLm1heChhWzBdLCBiWzBdKSwgTWF0aC5tYXgoYVsxXSwgYlsxXSldO1xuZXhwb3J0IGNvbnN0IG1pbl9wID0gKGE6IFBvaW50LCBiOiBQb2ludCk6IFBvaW50ID0+IFtNYXRoLm1pbihhWzBdLCBiWzBdKSwgTWF0aC5taW4oYVsxXSwgYlsxXSldO1xuZXhwb3J0IGNvbnN0IGNsYW1wX3AgPSAobWluOiBQb2ludCwgbWF4OiBQb2ludCwgcDogUG9pbnQpOiBQb2ludCA9PiBtYXhfcChtaW4sIG1pbl9wKG1heCwgcCkpO1xuZXhwb3J0IGNvbnN0IGFic19wID0gKGE6IFBvaW50KTogUG9pbnQgPT4gW01hdGguYWJzKGFbMF0pLCBNYXRoLmFicyhhWzFdKV07XG5cbmV4cG9ydCBjb25zdCBlcV9wID0gKGE6IFBvaW50LCBiOiBQb2ludCk6IGJvb2xlYW4gPT4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdO1xuXG5leHBvcnQgdHlwZSBCQm94ID0geyBzdGFydDogUG9pbnQ7IGVuZDogUG9pbnQgfTtcbmV4cG9ydCBjb25zdCBjb250YWlucyA9IChhOiBCQm94LCBwOiBQb2ludCk6IGJvb2xlYW4gPT4gbHRfcChhLnN0YXJ0LCBwKSAmJiBsdF9wKHAsIGEuZW5kKTtcblxuZXhwb3J0IGNvbnN0IGludGVyc2VjdCA9IChhOiBCQm94LCBiOiBCQm94KTogYm9vbGVhbiA9PlxuICAhKGIuc3RhcnRbMF0gPiBhLmVuZFswXSB8fCBiLmVuZFswXSA8IGEuc3RhcnRbMF0gfHwgYi5zdGFydFsxXSA+IGEuZW5kWzFdIHx8IGIuZW5kWzFdIDwgYS5zdGFydFsxXSk7XG4iLCJleHBvcnQgY29uc3QgaXNfcHJpbWFyeV90b3VjaCA9IChldjogUG9pbnRlckV2ZW50KTogYm9vbGVhbiA9PiBldi5pc1ByaW1hcnkgJiYgZXYucG9pbnRlclR5cGUgPT09IFwidG91Y2hcIjtcblxuZXhwb3J0IGNvbnN0IGlzX3ByaW1hcnlfZG93biA9IChldjogUG9pbnRlckV2ZW50KTogYm9vbGVhbiA9PiBldi5pc1ByaW1hcnkgJiYgKGV2LnBvaW50ZXJUeXBlID09PSBcInRvdWNoXCIgfHwgZXYucHJlc3N1cmUgPiAwKTtcbmV4cG9ydCBjb25zdCBpc19tb3VzZV9kb3duID0gKGV2OiBQb2ludGVyRXZlbnQpOiBib29sZWFuID0+IGV2LnBvaW50ZXJUeXBlID09PSBcIm1vdXNlXCIgJiYgZXYuYnV0dG9ucyA9PT0gMSAmJiBldi5wcmVzc3VyZSA+IDA7XG5leHBvcnQgY29uc3QgaXNfbm9uX3RvdWNoX2RyYWcgPSAoZXY6IFBvaW50ZXJFdmVudCk6IGJvb2xlYW4gPT4gZXYucG9pbnRlclR5cGUgIT09IFwidG91Y2hcIiAmJiBldi5pc1ByaW1hcnkgJiYgZXYucHJlc3N1cmUgPiAwO1xuXG5leHBvcnQgY29uc3Qgc3RvcF9ldiA9IChldjogRXZlbnQpID0+IHtcbiAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG59O1xuXG50eXBlIEN1c3RvbUV2ZW50VHlwZTxUIGV4dGVuZHMgRXZlbnQ+ID0gVCBleHRlbmRzIEN1c3RvbUV2ZW50PGluZmVyIFU+ID8gVSA6IG5ldmVyO1xuZXhwb3J0IGNvbnN0IHdpbmRvd19ldiA9IDxOIGV4dGVuZHMga2V5b2YgV2luZG93RXZlbnRNYXA+KG5hbWU6IE4sIGRldGFpbDogQ3VzdG9tRXZlbnRUeXBlPFdpbmRvd0V2ZW50TWFwW05dPik6IFdpbmRvd0V2ZW50TWFwW05dID0+XG4gIG5ldyBDdXN0b21FdmVudChuYW1lLCB7IGRldGFpbCB9KSBhcyBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRFbWl0dGVyPEV2ZW50TWFwPiBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlOiBzdHJpbmcsIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0LCBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKTogdm9pZDtcbiAgYWRkRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgRXZlbnRNYXA+KHR5cGU6IEssIGxpc3RlbmVyOiAoZXY6IEV2ZW50TWFwW0tdKSA9PiBhbnksIG9wdGlvbnM/OiBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMpOiB2b2lkO1xuICByZW1vdmVFdmVudExpc3RlbmVyKHR5cGU6IHN0cmluZywgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QsIG9wdGlvbnM/OiBib29sZWFuIHwgRXZlbnRMaXN0ZW5lck9wdGlvbnMpOiB2b2lkO1xuICByZW1vdmVFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBFdmVudE1hcD4odHlwZTogSywgbGlzdGVuZXI6IChldjogRXZlbnRNYXBbS10pID0+IGFueSwgb3B0aW9ucz86IGJvb2xlYW4gfCBFdmVudExpc3RlbmVyT3B0aW9ucyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YWl0Rm9yPEsgZXh0ZW5kcyBzdHJpbmcsIEUsIEVUIGV4dGVuZHMgRXZlbnRFbWl0dGVyPHsgSzogRSB9Pj4odHlwZTogSywgdGFyZ2V0OiBFVCk6IFByb21pc2U8RT4ge1xuICByZXR1cm4gbmV3IFByb21pc2U8RT4oKHJlc29sdmUpID0+IHtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCAoZSkgPT4gcmVzb2x2ZShlIGFzIGFueSksIHsgb25jZTogdHJ1ZSB9KTtcbiAgfSk7XG59XG4iLCJleHBvcnQgdHlwZSBMb2NhbE9yUmVtb3RlSW1hZ2UgPSBCbG9iIHwgc3RyaW5nO1xuXG5leHBvcnQgY29uc3QgZ2V0SW1hZ2UgPSBhc3luYyAoZXY6IERyYWdFdmVudCk6IFByb21pc2U8TG9jYWxPclJlbW90ZUltYWdlPiA9PiB7XG4gIGxldCBkYXRhSXRlbXMgPSBldi5kYXRhVHJhbnNmZXI/Lml0ZW1zID8/IFtdO1xuICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiRGF0YUl0ZW1zXCIsIGRhdGFJdGVtcy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YUl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zb2xlLmxvZyhkYXRhSXRlbXNbaV0udHlwZSk7XG4gICAgICBpZiAoZGF0YUl0ZW1zW2ldLnR5cGUuc3RhcnRzV2l0aChcImltYWdlL1wiKSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShkYXRhSXRlbXNbaV0uZ2V0QXNGaWxlKCkhKTtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhSXRlbXNbaV0udHlwZSA9PT0gXCJ0ZXh0L2h0bWxcIikge1xuICAgICAgICBkYXRhSXRlbXNbaV0uZ2V0QXNTdHJpbmcoKHMpID0+IHJlc29sdmUoZXh0cmFjdFVSTEZyb21IVE1MKHMpISkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKGRhdGFJdGVtc1tpXS5raW5kID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGxldCB0ID0gZGF0YUl0ZW1zW2ldLnR5cGU7XG4gICAgICAgIGRhdGFJdGVtc1tpXS5nZXRBc1N0cmluZygocykgPT4gY29uc29sZS5sb2codCwgcykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVqZWN0KFwiTm8gY29tcGF0aWJsZSBkcm9wIHR5cGUgZm91bmRcIik7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZXh0cmFjdFVSTEZyb21IVE1MKGh0bWw6IHN0cmluZyk6IExvY2FsT3JSZW1vdGVJbWFnZSB8IG51bGwge1xuICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gIGNvbnN0IGRvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoaHRtbCwgXCJ0ZXh0L2h0bWxcIik7XG4gIGNvbnN0IHVybCA9IGRvYy5xdWVyeVNlbGVjdG9yKFwiaW1nXCIpPy5zcmM7XG4gIHJldHVybiB1cmwgPz8gbnVsbDtcbn1cbiIsImltcG9ydCB7IFBlZXJJZCB9IGZyb20gXCIuLi9uZXQvcnRjL3NpZ25hbGVyXCI7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gXCIuLi91dGlsL21hdGhcIjtcbmltcG9ydCB7IFNlcmlhbGl6ZWRUYWJsZXRvcCB9IGZyb20gXCIuL3RhYmxldG9wXCI7XG5cbmV4cG9ydCB0eXBlIEdhbWVFdmVudCA9IHsgcmVtb3RlPzogUGVlcklkIH0gJiAoXG4gIHwgVG9rZW5BZGRlZFxuICB8IFRva2VuTWFuaXB1bGF0ZWRcbiAgfCBUb2tlblJlbW92ZWRcbiAgfCBHcmlkUmVzaXplZFxuICB8IFN0YXRlU3luY1xuICB8IEJhY2tncm91bmRcbiAgfCBUb2tlblJlb3JkZXJcbiAgfCBDYWxsb3V0XG4pO1xuXG5leHBvcnQgdHlwZSBUb2tlbkFkZGVkID0ge1xuICB0eXBlOiBcInRva2VuLWFkZGVkXCI7XG4gIGlkOiBzdHJpbmc7XG4gIGxvYzogUG9pbnQ7XG4gIGRpbTogUG9pbnQ7XG4gIHVybDogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgVG9rZW5NYW5pcHVsYXRlZCA9IHtcbiAgdHlwZTogXCJ0b2tlbi1tYW5pcHVsYXRlZFwiO1xuICB0b2tlbnM6IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGxvYzogUG9pbnQ7XG4gICAgZGltOiBQb2ludDtcbiAgICByOiBudW1iZXI7XG4gIH1bXTtcbn07XG5cbmV4cG9ydCB0eXBlIFRva2VuUmVtb3ZlZCA9IHtcbiAgdHlwZTogXCJ0b2tlbi1yZW1vdmVkXCI7XG4gIGlkczogc3RyaW5nW107XG59O1xuXG5leHBvcnQgdHlwZSBHcmlkUmVzaXplZCA9IHtcbiAgdHlwZTogXCJncmlkLXJlc2l6ZWRcIjtcbiAgZGltOiBQb2ludDtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGVTeW5jIHtcbiAgdHlwZTogXCJzdGF0ZS1zeW5jXCI7XG4gIHRhYmxldG9wOiBTZXJpYWxpemVkVGFibGV0b3A7XG59XG5cbmV4cG9ydCB0eXBlIENhbGxvdXQgPSB7XG4gIHR5cGU6IFwiY2FsbG91dFwiO1xuICBsb2M6IFBvaW50O1xufTtcblxuZXhwb3J0IHR5cGUgVG9rZW5SZW9yZGVyID0ge1xuICB0eXBlOiBcInRva2VuLXJlb3JkZXJcIjtcbiAgaWQ6IHN0cmluZztcbiAgaWR4OiBcInVwXCIgfCBcImRvd25cIiB8IFwidG9wXCIgfCBcImJvdHRvbVwiO1xufTtcblxuZXhwb3J0IHR5cGUgVG9rZW5EYXRhID0ge1xuICBsb2M6IFBvaW50O1xuICBkaW06IFBvaW50O1xuICB1cmw6IHN0cmluZztcbiAgaWQ6IHN0cmluZztcbiAgcjogbnVtYmVyOyAvLyBkZWdyZWVzIVxufTtcblxuZXhwb3J0IHR5cGUgQmFja2dyb3VuZCA9IHtcbiAgdHlwZTogXCJiZ1wiO1xuICB1cmw6IHN0cmluZyB8IG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgdXVpZHY0ID0gKCkgPT4ge1xuICAvLyBAdHMtaWdub3JlXG4gIHJldHVybiAoWzFlN10gKyAtMWUzICsgLTRlMyArIC04ZTMgKyAtMWUxMSkucmVwbGFjZSgvWzAxOF0vZywgKGMpID0+XG4gICAgKGMgXiAoY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxKSlbMF0gJiAoMTUgPj4gKGMgLyA0KSkpKS50b1N0cmluZygxNilcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnYW1lX2V2ZW50ID0gKGRldGFpbDogR2FtZUV2ZW50KTogQ3VzdG9tRXZlbnQ8R2FtZUV2ZW50PiA9PiB7XG4gIHJldHVybiBuZXcgQ3VzdG9tRXZlbnQoXCJnYW1lLWV2ZW50XCIsIHsgZGV0YWlsIH0pO1xufTtcbiIsImV4cG9ydCBjb25zdCBmaXJzdCA9IDxUPihpdGVyOiBJdGVyYWJsZTxUPik6IFQgfCB1bmRlZmluZWQgPT4gaXRlcltTeW1ib2wuaXRlcmF0b3JdKCkubmV4dCgpLnZhbHVlO1xuZXhwb3J0IGZ1bmN0aW9uKiBtYXA8VCwgVT4oaXRlcjogSXRlcmFibGU8VD4sIGY6IChpdGVtOiBUKSA9PiBVKTogSXRlcmFibGU8VT4ge1xuICBmb3IgKGxldCBpdGVtIG9mIGl0ZXIpIHtcbiAgICB5aWVsZCBmKGl0ZW0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiogZmlsdGVyPFQ+KGl0ZXI6IEl0ZXJhYmxlPFQ+LCBmOiAoaXRlbTogVCkgPT4gYm9vbGVhbik6IEl0ZXJhYmxlPFQ+IHtcbiAgZm9yIChsZXQgaXRlbSBvZiBpdGVyKSB7XG4gICAgaWYgKGYoaXRlbSkpIHlpZWxkIGl0ZW07XG4gIH1cbn1cbiIsImltcG9ydHtub0NoYW5nZSBhcyB0fWZyb21cIi4uL2xpdC1odG1sLmpzXCI7aW1wb3J0e2RpcmVjdGl2ZSBhcyBlLERpcmVjdGl2ZSBhcyByLFBhcnRUeXBlIGFzIHN9ZnJvbVwiLi4vZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBpPWUoY2xhc3MgZXh0ZW5kcyBye2NvbnN0cnVjdG9yKHQpe3ZhciBlO2lmKHN1cGVyKHQpLHQudHlwZSE9PXMuQVRUUklCVVRFfHxcInN0eWxlXCIhPT10Lm5hbWV8fChudWxsPT09KGU9dC5zdHJpbmdzKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5sZW5ndGgpPjIpdGhyb3cgRXJyb3IoXCJUaGUgYHN0eWxlTWFwYCBkaXJlY3RpdmUgbXVzdCBiZSB1c2VkIGluIHRoZSBgc3R5bGVgIGF0dHJpYnV0ZSBhbmQgbXVzdCBiZSB0aGUgb25seSBwYXJ0IGluIHRoZSBhdHRyaWJ1dGUuXCIpfXJlbmRlcih0KXtyZXR1cm4gT2JqZWN0LmtleXModCkucmVkdWNlKCgoZSxyKT0+e2NvbnN0IHM9dFtyXTtyZXR1cm4gbnVsbD09cz9lOmUrYCR7cj1yLnJlcGxhY2UoLyg/Ol4od2Via2l0fG1venxtc3xvKXwpKD89W0EtWl0pL2csXCItJCZcIikudG9Mb3dlckNhc2UoKX06JHtzfTtgfSksXCJcIil9dXBkYXRlKGUsW3JdKXtjb25zdHtzdHlsZTpzfT1lLmVsZW1lbnQ7aWYodm9pZCAwPT09dGhpcy5jdCl7dGhpcy5jdD1uZXcgU2V0O2Zvcihjb25zdCB0IGluIHIpdGhpcy5jdC5hZGQodCk7cmV0dXJuIHRoaXMucmVuZGVyKHIpfXRoaXMuY3QuZm9yRWFjaCgodD0+e251bGw9PXJbdF0mJih0aGlzLmN0LmRlbGV0ZSh0KSx0LmluY2x1ZGVzKFwiLVwiKT9zLnJlbW92ZVByb3BlcnR5KHQpOnNbdF09XCJcIil9KSk7Zm9yKGNvbnN0IHQgaW4gcil7Y29uc3QgZT1yW3RdO251bGwhPWUmJih0aGlzLmN0LmFkZCh0KSx0LmluY2x1ZGVzKFwiLVwiKT9zLnNldFByb3BlcnR5KHQsZSk6c1t0XT1lKX1yZXR1cm4gdH19KTtleHBvcnR7aSBhcyBzdHlsZU1hcH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZS1tYXAuanMubWFwXG4iLCJpbXBvcnQgeyBjc3MsIGh0bWwsIExpdEVsZW1lbnQsIHN2ZyB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIGV2ZW50T3B0aW9ucywgcHJvcGVydHksIHF1ZXJ5LCBzdGF0ZSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgcmVwZWF0IH0gZnJvbSBcImxpdC9kaXJlY3RpdmVzL3JlcGVhdC5qc1wiO1xuaW1wb3J0IHsgYWJzX3AsIGFkZF9jLCBhZGRfcCwgQkJveCwgY2xhbXBfcCwgZGl2X2MsIGVxX3AsIGludGVyc2VjdCwgbWF4X3AsIG1pbl9wLCBtdWxfYywgUG9pbnQsIHN1Yl9wIH0gZnJvbSBcIi4uL3V0aWwvbWF0aFwiO1xuaW1wb3J0IHsgaXNfbW91c2VfZG93biwgaXNfcHJpbWFyeV9kb3duLCBpc19wcmltYXJ5X3RvdWNoLCBzdG9wX2V2LCB3aW5kb3dfZXYgfSBmcm9tIFwiLi4vdXRpbC9ldmVudHNcIjtcbmltcG9ydCB7IGdldEltYWdlLCBMb2NhbE9yUmVtb3RlSW1hZ2UgfSBmcm9tIFwiLi4vdXRpbC9maWxlc1wiO1xuaW1wb3J0IHsgR2FtZUV2ZW50LCBnYW1lX2V2ZW50LCBTdGF0ZVN5bmMsIFRva2VuRGF0YSwgdXVpZHY0IH0gZnJvbSBcIi4uL2dhbWUvZ2FtZS1ldmVudHNcIjtcbmltcG9ydCB7IEJvYXJkLCBHYW1lIH0gZnJvbSBcIi4uL2dhbWUvZ2FtZVwiO1xuaW1wb3J0IHsgT3JkZXJlZE1hcCB9IGZyb20gXCIuLi91dGlsL29yZGVyZWRtYXBcIjtcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSBcIi4uL3V0aWwvaXRlclwiO1xuaW1wb3J0IHsgUFBaIH0gZnJvbSBcIi4vcHBwXCI7XG5pbXBvcnQgeyBzdHlsZU1hcCB9IGZyb20gXCJsaXQvZGlyZWN0aXZlcy9zdHlsZS1tYXAuanNcIjtcbmltcG9ydCB7IFR5cGVkTWFwIH0gZnJvbSBcIi4uL3V0aWwveWpzXCI7XG5cbmNvbnN0IFBJWEVMX1NDQUxFID0gMTtcbmNvbnN0IEdSSURfU0laRSA9IDI0ICogUElYRUxfU0NBTEU7IC8vIHNjYWxlLWRlcGVuZGVudCBweFxuY29uc3QgTElORV9XSURUSCA9IDAuNSAqIFBJWEVMX1NDQUxFOyAvLyBzY2FsZS1kZXBlbmRlbnQgcHhcbmNvbnN0IEhBTkRMRV9TSVpFID0gOCAqIFBJWEVMX1NDQUxFOyAvLyBzY2FsZS1pbmRlcGVuZGVudCBweFxuY29uc3QgQ0FOVkFTX1JBRElVUyA9IDUgKiBQSVhFTF9TQ0FMRTtcbmNvbnN0IFJPVEFURV9ESVNUQU5DRSA9IDEwICogUElYRUxfU0NBTEU7XG5jb25zdCBST1RBVEVfU0laRSA9IEhBTkRMRV9TSVpFIC8gMjtcbmNvbnN0IFBBRERJTkcgPSAyMCAqIFBJWEVMX1NDQUxFO1xuY29uc3QgQ0FMTE9VVF9ESU0gPSBHUklEX1NJWkU7XG5cbnR5cGUgU2VsZWN0aW9uQm94ID0ge1xuICBpbmRleDogbnVtYmVyO1xuICBiYm94OiBCQm94O1xufTtcbkBjdXN0b21FbGVtZW50KFwiYmctY2FudmFzXCIpXG5leHBvcnQgY2xhc3MgQ2FudmFzIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIEBwcm9wZXJ0eSh7IHR5cGU6IE51bWJlciB9KVxuICByZWFkb25seSB3aWR0aCA9IDMwO1xuXG4gIEBwcm9wZXJ0eSh7IHR5cGU6IE51bWJlciB9KVxuICByZWFkb25seSBoZWlnaHQgPSA0MDtcblxuICBAcHJvcGVydHkoKVxuICByZWFkb25seSBiZz86IHN0cmluZztcblxuICBAcHJvcGVydHkoeyBhdHRyaWJ1dGU6IGZhbHNlIH0pXG4gIC8vQHRzLWlnbm9yZVxuICByZWFkb25seSBib2FyZDogQm9hcmQ7XG5cbiAgQHByb3BlcnR5KHsgYXR0cmlidXRlOiBmYWxzZSB9KVxuICByZWFkb25seSBzZWxlY3Rpb246IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuXG4gIEBwcm9wZXJ0eSh7IGF0dHJpYnV0ZTogZmFsc2UgfSlcbiAgcmVhZG9ubHkgY2FsbG91dHM6IFNldDxQb2ludD4gPSBuZXcgU2V0KCk7XG5cbiAgI3Nib3g/OiB7IHBpbjogUG9pbnQ7IG1vdXNlOiBQb2ludCB9O1xuXG4gIEBwcm9wZXJ0eSh7IGF0dHJpYnV0ZTogZmFsc2UgfSlcbiAgc2VsX2Jib3g/OiBCQm94O1xuXG4gIEBxdWVyeShcInJvb3RcIiwgdHJ1ZSlcbiAgcm9vdD86IFNWR0VsZW1lbnQ7XG5cbiAgQHF1ZXJ5KFwicC1wLXpcIiwgdHJ1ZSlcbiAgdmlld3BvcnQ/OiBQUFo7XG5cbiAgI21vdXNlX2xvYz86IFBpY2s8TW91c2VFdmVudCwgXCJjbGllbnRYXCIgfCBcImNsaWVudFlcIj47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGdldCAjZGltKCkge1xuICAgIHJldHVybiBtdWxfYyhbdGhpcy53aWR0aCwgdGhpcy5oZWlnaHRdLCBHUklEX1NJWkUpO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLiNrZXlkb3duKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy4ja2V5ZG93bik7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnNvbGUubG9nKFwiY2FudmFzIHJlbmRlclwiKTtcbiAgICBpZiAoIXRoaXMuYm9hcmQpIHJldHVybiBodG1sYGA7XG4gICAgbGV0IFt3aWR0aCwgaGVpZ2h0XSA9IHRoaXMuI2RpbTtcbiAgICBsZXQgc2Jib3ggPSB0aGlzLiNzZWxlY3Rpb25fYmJveCgpO1xuICAgIGxldCBzZWxlY3RlZCA9IHRoaXMuc2VsZWN0aW9uLnNpemUgPT09IDEgPyB0aGlzLmJvYXJkLmdldChcInRva2Vuc1wiKS5nZXQodGhpcy5zZWxlY3Rpb24udmFsdWVzKCkubmV4dCgpLnZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxwLXAtelxuICAgICAgICBAcG9pbnRlcmRvd249JHt0aGlzLiNzYm94X3N0YXJ0fVxuICAgICAgICBAcG9pbnRlcm1vdmU9JHt0aGlzLiNzYm94X21vdmV9XG4gICAgICAgIEBwb2ludGVydXA9JHt0aGlzLiNzYm94X3N0b3B9XG4gICAgICAgIEBwb2ludGVybGVhdmU9JHsoKSA9PiAodGhpcy4jbW91c2VfbG9jID0gdW5kZWZpbmVkKX1cbiAgICAgICAgQGRyYWdzdGFydD0ke3N0b3BfZXZ9XG4gICAgICAgIEBkcmFnZW50ZXI9JHt0aGlzLiNkcmFnX2VudGVyfVxuICAgICAgICBAZHJhZ2xlYXZlPSR7dGhpcy4jZHJhZ19sZWF2ZX1cbiAgICAgICAgQGRyYWdzdG9wPSR7dGhpcy4jZHJhZ19sZWF2ZX1cbiAgICAgICAgQGRyYWdvdmVyPSR7dGhpcy4jZHJhZ19vdmVyfVxuICAgICAgICBAZHJvcD0ke3RoaXMuI2Ryb3B9XG4gICAgICA+XG4gICAgICAgIDxzdmdcbiAgICAgICAgICBpZD1cInJvb3RcIlxuICAgICAgICAgIHdpZHRoPSR7d2lkdGggKyBQQURESU5HICogMn1cbiAgICAgICAgICBoZWlnaHQ9JHtoZWlnaHQgKyBQQURESU5HICogMn1cbiAgICAgICAgICBzdHlsZT0ke3N0eWxlTWFwKHtcbiAgICAgICAgICAgIHdpZHRoOiBgJHt3aWR0aCArIFBBRERJTkcgKiAyfXB4YCxcbiAgICAgICAgICAgIGhlaWdodDogYCR7aGVpZ2h0ICsgUEFERElORyAqIDJ9cHhgLFxuICAgICAgICAgIH0pfVxuICAgICAgICA+XG4gICAgICAgICAgPGRlZnM+XG4gICAgICAgICAgICA8Y2xpcFBhdGggaWQ9XCJjYW52YXNDbGlwXCI+XG4gICAgICAgICAgICAgIDxyZWN0IHdpZHRoPSR7d2lkdGh9IGhlaWdodD0ke2hlaWdodH0gcng9JHtDQU5WQVNfUkFESVVTfT48L3JlY3Q+XG4gICAgICAgICAgICA8L2NsaXBQYXRoPlxuICAgICAgICAgICAgPHBhdHRlcm4gaWQ9XCJob3JpelwiIHg9JHstTElORV9XSURUSCAvIDJ9IHk9JHstTElORV9XSURUSCAvIDJ9IHdpZHRoPVwiMTAwJVwiIGhlaWdodD0ke0dSSURfU0laRX0gcGF0dGVyblVuaXRzPVwidXNlclNwYWNlT25Vc2VcIj5cbiAgICAgICAgICAgICAgPHJlY3QgY2xhc3M9XCJncmlkbGluZVwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD0ke0xJTkVfV0lEVEh9IGZpbGw9XCIjZDNkM2QzXCIgc2hhcGUtcmVuZGVyaW5nPVwiZ2VvbWV0cmljUHJlY2lzaW9uXCI+PC9yZWN0PlxuICAgICAgICAgICAgPC9wYXR0ZXJuPlxuICAgICAgICAgICAgPHBhdHRlcm4gaWQ9XCJ2ZXJ0XCIgeD0key1MSU5FX1dJRFRIIC8gMn0geT0key1MSU5FX1dJRFRIIC8gMn0gd2lkdGg9JHtHUklEX1NJWkV9IGhlaWdodD1cIjEwMCVcIiBwYXR0ZXJuVW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiPlxuICAgICAgICAgICAgICA8cmVjdCBjbGFzcz1cImdyaWRsaW5lXCIgd2lkdGg9JHtMSU5FX1dJRFRIfSBoZWlnaHQ9XCIxMDAlXCIgZmlsbD1cIiNkM2QzZDNcIiBzaGFwZS1yZW5kZXJpbmc9XCJnZW9tZXRyaWMgcHJlY2lzaW9uXCI+PC9yZWN0PlxuICAgICAgICAgICAgPC9wYXR0ZXJuPlxuICAgICAgICAgICAgPHBhdHRlcm4gaWQ9XCJsb2FkaW5nXCIgcGF0dGVyblVuaXRzPVwidXNlclNwYWNlT25Vc2VcIiB3aWR0aD1cIjFcIiBoZWlnaHQ9XCIxXCI+XG4gICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMVwiIGhlaWdodD1cIjFcIiBmaWxsPVwid2hpdGVcIj48L3JlY3Q+XG4gICAgICAgICAgICAgIDxpbWFnZSBocmVmPVwiYXNzZXRzL2xvYWRpbmcuc3ZnXCIgd2lkdGg9XCIxXCIgaGVpZ2h0PVwiMVwiIC8+XG4gICAgICAgICAgICA8L3BhdHRlcm4+XG4gICAgICAgICAgPC9kZWZzPlxuICAgICAgICAgIDxzdmcgeD0ke1BBRERJTkd9IHk9JHtQQURESU5HfSB3aWR0aD0ke3dpZHRofSBoZWlnaHQ9JHtoZWlnaHR9IGlkPVwic3VyZmFjZVwiPlxuICAgICAgICAgICAgPHJlY3QgY2xhc3M9XCJzaGFkb3dcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgZmlsbD1cIndoaXRlXCIgcng9JHtDQU5WQVNfUkFESVVTfT48L3JlY3Q+XG4gICAgICAgICAgICA8c3ZnIGNsaXAtcGF0aD1cInVybCgjY2FudmFzQ2xpcClcIj5cbiAgICAgICAgICAgICAgJHt0aGlzLmJnXG4gICAgICAgICAgICAgICAgPyBzdmdgPGltYWdlIGhyZWY9JHt0aGlzLmJnfSB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cIm5vbmVcIiBzdHlsZT1cIndpbGwtY2hhbmdlOiB0cmFuc2Zvcm1cIj48L2ltYWdlPmBcbiAgICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBmaWxsPVwidXJsKCNob3JpeilcIiBvcGFjaXR5PVwiMC43NVwiIHBvaW50ZXItZXZlbnRzPVwibm9uZVwiPjwvcmVjdD5cbiAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIGZpbGw9XCJ1cmwoI3ZlcnQpXCIgb3BhY2l0eT1cIjAuNzVcIiBwb2ludGVyLWV2ZW50cz1cIm5vbmVcIj48L3JlY3Q+XG4gICAgICAgICAgICAgIDxzdmcgaWQ9XCJ0b2tlbnNcIj5cbiAgICAgICAgICAgICAgICAke3JlcGVhdChcbiAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQuZ2V0KFwib3JkZXJcIikgPz8gW10sXG4gICAgICAgICAgICAgICAgICAodCkgPT4gdCxcbiAgICAgICAgICAgICAgICAgICh0aWQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmJvYXJkLmdldChcInRva2Vuc1wiKS5nZXQodGlkKSE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFt3aWR0aCwgaGVpZ2h0XSA9IGFkZF9jKHQuZ2V0KFwiZGltXCIpLCAtTElORV9XSURUSCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFt4LCB5XSA9IGFkZF9jKHQuZ2V0KFwibG9jXCIpLCBMSU5FX1dJRFRIIC8gMik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMSAxXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg9JHt4fVxuICAgICAgICAgICAgICAgICAgICAgICAgeT0ke3l9XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0ke3dpZHRofVxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSR7aGVpZ2h0fVxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cInRyYW5zcGFyZW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW89XCJub25lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBwb2ludGVyZG93bj0ke3RoaXMuI21vdXNlX2ZvY3VzfVxuICAgICAgICAgICAgICAgICAgICAgICAgQHBvaW50ZXJ1cD0ke3RoaXMuI3RvdWNoX2ZvY3VzfVxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0ke3RpZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJ0b2tlblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPSR7dC5nZXQoXCJ1cmxcIil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSR7YHRyYW5zZm9ybTogcm90YXRlKCR7dC5nZXQoXCJyXCIpfWRlZylgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwibm9uZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEBsb2FkPSR7bWFya19sb2FkZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICA+PC9pbWFnZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMVwiIGhlaWdodD1cIjFcIiBjbGFzcz1cImxvYWRpbmdcIj48L3JlY3Q+XG4gICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XG5cbiAgICAgICAgICAgICAgICAgICAgICAke3NiYm94Py5pbmRleCA9PT0gaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc3ZnYDxyZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJzZWxlY3Rpb24tZHJhZy10YXJnZXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg9JHtzYmJveC5iYm94LnN0YXJ0WzBdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk9JHtzYmJveC5iYm94LnN0YXJ0WzFdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSR7c2Jib3guYmJveC5lbmRbMF0gLSBzYmJveC5iYm94LnN0YXJ0WzBdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0ke3NiYm94LmJib3guZW5kWzFdIC0gc2Jib3guYmJveC5zdGFydFsxXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVwidHJhbnNwYXJlbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEB0b3VjaG1vdmU9JHt0aGlzLnByZXZlbnRfc2FmYXJpX3Njcm9sbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAcG9pbnRlcmRvd249JHt0aGlzLnNlbGVjdGlvbl9kcmFnX3N0YXJ0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBwb2ludGVybW92ZT0ke3RoaXMuc2VsZWN0aW9uX2RyYWd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQHBvaW50ZXJ1cD0ke3RoaXMuc2VsZWN0aW9uX2RyYWdfZW5kfVxuICAgICAgICAgICAgICAgICAgICAgICAgPjwvcmVjdD5gXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgIGA7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgICR7dGhpcy5fZHJvcF9oaW50XG4gICAgICAgICAgICAgICAgPyBzdmdgXG4gICAgICAgICAgICA8cmVjdFxuICAgICAgICAgICAgICAgIGNsYXNzPVwiZHJvcF9oaW50XCJcbiAgICAgICAgICAgICAgICB4PSR7dGhpcy5fZHJvcF9oaW50WzBdfVxuICAgICAgICAgICAgICAgIHk9JHt0aGlzLl9kcm9wX2hpbnRbMV19XG4gICAgICAgICAgICAgICAgd2lkdGg9JHtHUklEX1NJWkV9XG4gICAgICAgICAgICAgICAgaGVpZ2h0PSR7R1JJRF9TSVpFfVxuICAgICAgICAgICAgICAgID48L3JlY3Q+XG4gICAgICAgICAgYFxuICAgICAgICAgICAgICAgIDogbnVsbH1cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgJHt0aGlzLiNzYm94XG4gICAgICAgICAgICAgID8gc3ZnYFxuICAgICAgICAgICAgICA8cmVjdCBpZD1cInNib3hcIlxuICAgICAgICAgICAgICAgIHg9JHtNYXRoLm1pbih0aGlzLiNzYm94LnBpblswXSwgdGhpcy4jc2JveC5tb3VzZVswXSl9XG4gICAgICAgICAgICAgICAgeT0ke01hdGgubWluKHRoaXMuI3Nib3gucGluWzFdLCB0aGlzLiNzYm94Lm1vdXNlWzFdKX1cbiAgICAgICAgICAgICAgICB3aWR0aD0ke01hdGguYWJzKHRoaXMuI3Nib3gucGluWzBdIC0gdGhpcy4jc2JveC5tb3VzZVswXSl9XG4gICAgICAgICAgICAgICAgaGVpZ2h0PSR7TWF0aC5hYnModGhpcy4jc2JveC5waW5bMV0gLSB0aGlzLiNzYm94Lm1vdXNlWzFdKX1cbiAgICAgICAgICAgICAgICA+PC9yZWN0PlxuICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgIDogbnVsbH1cbiAgICAgICAgICAgICR7cmVwZWF0KFxuICAgICAgICAgICAgICB0aGlzLmNhbGxvdXRzLFxuICAgICAgICAgICAgICAoaWQpID0+IGlkLFxuICAgICAgICAgICAgICAocG9pbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbeCwgeV0gPSBzdWJfcChwb2ludCwgW0NBTExPVVRfRElNIC8gMiwgQ0FMTE9VVF9ESU0gLyAyXSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3ZnYFxuICAgICAgICAgICAgICAgICAgPGltYWdlIGhyZWY9XCJhc3NldHMvY2FsbG91dC5zdmdcIiB4PSR7eH0geT0ke3l9IHdpZHRoPSR7Q0FMTE9VVF9ESU19IGhlaWdodD0ke0NBTExPVVRfRElNfT48L2ltYWdlPlxuICAgICAgICAgICAgICAgIGA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICAke3NiYm94XG4gICAgICAgICAgICAgID8gc3ZnYFxuICAgICAgICAgICAgPHN2Z1xuICAgICAgICAgICAgICBpZD1cInNlbGVjdGlvblwiXG4gICAgICAgICAgICAgIHg9JHtzYmJveC5iYm94LnN0YXJ0WzBdfVxuICAgICAgICAgICAgICB5PSR7c2Jib3guYmJveC5zdGFydFsxXX1cbiAgICAgICAgICAgICAgd2lkdGg9JHtzYmJveC5iYm94LmVuZFswXSAtIHNiYm94LmJib3guc3RhcnRbMF19XG4gICAgICAgICAgICAgIGhlaWdodD0ke3NiYm94LmJib3guZW5kWzFdIC0gc2Jib3guYmJveC5zdGFydFsxXX1cbiAgICAgICAgICAgICAgQHRvdWNobW92ZT0ke3RoaXMucHJldmVudF9zYWZhcmlfc2Nyb2xsfVxuICAgICAgICAgICAgICBAcG9pbnRlcmRvd249JHt0aGlzLnNlbGVjdGlvbl9kcmFnX3N0YXJ0fVxuICAgICAgICAgICAgICBAcG9pbnRlcm1vdmU9JHt0aGlzLnNlbGVjdGlvbl9kcmFnfVxuICAgICAgICAgICAgICBAcG9pbnRlcnVwPSR7dGhpcy5zZWxlY3Rpb25fZHJhZ19lbmR9PlxuICAgICAgICAgICAgICA8cmVjdCBjbGFzcz1cInNlbGVjdGlvbi1ib3hcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgID48L3JlY3Q+XG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICBzZWxlY3RlZFxuICAgICAgICAgICAgICAgID8gc3ZnYFxuICAgICAgICAgICAgPGcgc3R5bGU9JHtgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyOyB0cmFuc2Zvcm06IHJvdGF0ZSgke3NlbGVjdGVkLmdldChcInJcIil9ZGVnKSB0cmFuc2xhdGVZKCR7XG4gICAgICAgICAgICAgIChNYXRoLnNpZ24oKHNlbGVjdGVkLmdldChcInJcIikgLSAxODApICUgMTgwKSAqIChzZWxlY3RlZC5nZXQoXCJkaW1cIilbMF0gLSBzZWxlY3RlZC5nZXQoXCJkaW1cIilbMV0pKSAvIDJcbiAgICAgICAgICAgIH1weClgfT5cbiAgICAgICAgICAgICAgPGxpbmUgY2xhc3M9XCJyb1wiIHgxPVwiNTAlXCIgeDI9XCI1MCVcIiB5Mj0key1ST1RBVEVfRElTVEFOQ0V9PjwvbGluZT5cbiAgICAgICAgICAgICAgPGNpcmNsZSBjbGFzcz1cInJvIGhhbmRsZVwiIGN4PVwiNTAlXCIgY3k9JHstUk9UQVRFX0RJU1RBTkNFfSByPSR7Uk9UQVRFX1NJWkUgLyAyfT48L2NpcmNsZT5cbiAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgIDxsaW5lIGNsYXNzPVwicm5cIiB4Mj1cIjEwMCVcIj48L2xpbmU+XG4gICAgICAgICAgICA8bGluZSBjbGFzcz1cInJ3XCIgeTI9XCIxMDAlXCI+PC9saW5lPlxuICAgICAgICAgICAgPGxpbmUgY2xhc3M9XCJyZVwiIHgxPVwiMTAwJVwiIHgyPVwiMTAwJVwiIHkyPVwiMTAwJVwiPjwvbGluZT5cbiAgICAgICAgICAgIDxsaW5lIGNsYXNzPVwicnNcIiB5MT1cIjEwMCVcIiB4Mj1cIjEwMCVcIiB5Mj1cIjEwMCVcIj48L2xpbmU+XG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cImhhbmRsZSBybiByd1wiPjwvcmVjdD5cbiAgICAgICAgICAgIDxyZWN0IGNsYXNzPVwiaGFuZGxlIHJuIHJlXCIgeD1cIjEwMCVcIj48L3JlY3Q+XG4gICAgICAgICAgICA8cmVjdCBjbGFzcz1cImhhbmRsZSBycyByd1wiIHk9XCIxMDAlXCI+PC9yZWN0PlxuICAgICAgICAgICAgPHJlY3QgY2xhc3M9XCJoYW5kbGUgcnMgcmVcIiB4PVwiMTAwJVwiIHk9XCIxMDAlXCI+PC9yZWN0PlxuICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgPC9zdmc+YFxuICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgfWBcbiAgICAgICAgICAgICAgOiBudWxsfVxuICAgICAgICAgIDwvc3ZnPlxuICAgICAgICA8L3N2Zz5cbiAgICAgIDwvcC1wLXo+XG4gICAgICA8ZGl2XG4gICAgICAgIGlkPVwiYmctZHJvcFwiXG4gICAgICAgIGNsYXNzPSR7dGhpcy5ob3ZlcmluZyA/PyBcIlwifVxuICAgICAgICBAZHJhZ2VudGVyPSR7dGhpcy4jZHJhZ19lbnRlcn1cbiAgICAgICAgQGRyYWdvdmVyPSR7dGhpcy4jYmdfZHJhZ19vdmVyfVxuICAgICAgICBAZHJhZ2xlYXZlPSR7dGhpcy4jZHJhZ19sZWF2ZX1cbiAgICAgICAgQGRyb3A9JHt0aGlzLiNiZ19kcm9wfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGlkPVwiYmctZHJvcC1sYWJlbFwiIEBkcm9wPSR7dGhpcy4jYmdfZHJvcH0+U2V0IEJhY2tncm91bmQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlUmVuZGVyUm9vdCgpOiBFbGVtZW50IHwgU2hhZG93Um9vdCB7XG4gICAgY29uc3Qgcm9vdCA9IHN1cGVyLmNyZWF0ZVJlbmRlclJvb3QoKTtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIEBzdGF0ZSgpXG4gIF9kcm9wX2hpbnQ/OiBQb2ludDtcblxuICBAc3RhdGUoKVxuICBob3ZlcmluZz86IFwiY2FudmFzXCIgfCBcImJnXCI7XG5cbiAgI2RyYWdfZGVwdGggPSAwO1xuICAjZHJhZ19lbnRlciA9IChldjogRHJhZ0V2ZW50KSA9PiB7XG4gICAgc3RvcF9ldihldik7XG4gICAgdGhpcy4jZHJhZ19kZXB0aCsrO1xuICB9O1xuICAjZHJhZ19vdmVyID0gKGV2OiBEcmFnRXZlbnQpID0+IHtcbiAgICBzdG9wX2V2KGV2KTtcblxuICAgIGNvbnN0IGxvY2FsID0gdGhpcy4jc2NyZWVuX3RvX3N2Zyhldik7XG4gICAgY29uc3QgY2VsbCA9IGxvY2FsLm1hcChvY2N1cGllZF9jZWxsKTtcbiAgICBjb25zdCBtYXggPSBtdWxfYyhhZGRfYyhbdGhpcy53aWR0aCwgdGhpcy5oZWlnaHRdLCAtMSksIEdSSURfU0laRSk7XG4gICAgdGhpcy5fZHJvcF9oaW50ID0gY2xhbXBfcChbMCwgMF0sIG1heCwgY2VsbCBhcyBQb2ludCk7XG4gICAgdGhpcy5ob3ZlcmluZyA9IFwiY2FudmFzXCI7XG4gIH07XG5cbiAgI2RyYWdfbGVhdmUgPSAoZXY6IERyYWdFdmVudCkgPT4ge1xuICAgIGlmICgtLXRoaXMuI2RyYWdfZGVwdGggPD0gMCkge1xuICAgICAgdGhpcy5fZHJvcF9oaW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5ob3ZlcmluZyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgQGV2ZW50T3B0aW9ucyh7IGNhcHR1cmU6IHRydWUsIHBhc3NpdmU6IGZhbHNlIH0pXG4gIHByZXZlbnRfc2FmYXJpX3Njcm9sbChldjogVG91Y2hFdmVudCkge1xuICAgIHN0b3BfZXYoZXYpO1xuICB9XG5cbiAgI2JnX2RyYWdfb3ZlciA9IChldjogRHJhZ0V2ZW50KSA9PiB7XG4gICAgc3RvcF9ldihldik7XG4gICAgdGhpcy5fZHJvcF9oaW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaG92ZXJpbmcgPSBcImJnXCI7XG4gIH07XG5cbiAgI2JnX2Ryb3AgPSBhc3luYyAoZXY6IERyYWdFdmVudCkgPT4ge1xuICAgIHN0b3BfZXYoZXYpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBpbWcgPSBhd2FpdCBnZXRJbWFnZShldik7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQod2luZG93X2V2KFwiYmctZHJvcFwiLCBpbWcpKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRoaXMuI2RyYWdfZGVwdGggPSAwO1xuICAgIHRoaXMuaG92ZXJpbmcgPSB1bmRlZmluZWQ7XG4gIH07XG5cbiAgI2Ryb3AgPSBhc3luYyAoZXY6IERyYWdFdmVudCkgPT4ge1xuICAgIHN0b3BfZXYoZXYpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBpbWcgPSBhd2FpdCBnZXRJbWFnZShldik7XG4gICAgICBjb25zb2xlLmxvZyhcIkVtaXR0aW5nIGRyb3BcIik7XG4gICAgICAvLyBUT0RPIEVNSVQgRFJPUFBFRCBUT0tFTlxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICB3aW5kb3dfZXYoXCJ0b2tlbi1kcm9wXCIsIHtcbiAgICAgICAgICBsb2M6IHRoaXMuX2Ryb3BfaGludCEsXG4gICAgICAgICAgZGltOiBbR1JJRF9TSVpFLCBHUklEX1NJWkVdIGFzIFBvaW50LFxuICAgICAgICAgIGltZyxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0aGlzLl9kcm9wX2hpbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ob3ZlcmluZyA9IHVuZGVmaW5lZDtcbiAgfTtcblxuICAjbW91c2VfZm9jdXMgPSAoZXY6IFBvaW50ZXJFdmVudCkgPT4ge1xuICAgIGlmICghaXNfbW91c2VfZG93bihldikpIHJldHVybjtcbiAgICB0aGlzLiNmb2N1cyhldik7XG4gIH07XG5cbiAgI3RvdWNoX2ZvY3VzID0gKGV2OiBQb2ludGVyRXZlbnQpID0+IHtcbiAgICBpZiAoIWlzX3ByaW1hcnlfdG91Y2goZXYpKSByZXR1cm47XG4gICAgdGhpcy4jZm9jdXMoZXYpO1xuICB9O1xuXG4gICNmb2N1cyA9IChldjogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBjb25zdCBpZCA9IChldi50YXJnZXQgYXMgU1ZHSW1hZ2VFbGVtZW50KS5pZDtcbiAgICBpZiAoZXYuc2hpZnRLZXkgfHwgZXYuY3RybEtleSkge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICB3aW5kb3dfZXYoXG4gICAgICAgICAgXCJ0b2tlbi1zZWxlY3RcIixcbiAgICAgICAgICBbaWQsIC4uLnRoaXMuc2VsZWN0aW9uXS5maWx0ZXIoKHMpID0+IHMgIT09IGlkIHx8ICF0aGlzLnNlbGVjdGlvbi5oYXMoaWQpKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQod2luZG93X2V2KFwidG9rZW4tc2VsZWN0XCIsIFsoZXYudGFyZ2V0IGFzIFNWR0ltYWdlRWxlbWVudCkuaWRdKSk7XG4gICAgfVxuICB9O1xuXG4gICNzYm94X3N0YXJ0KGV2OiBQb2ludGVyRXZlbnQpIHtcbiAgICBpZiAoIWlzX21vdXNlX2Rvd24oZXYpKSByZXR1cm47XG4gICAgKGV2LnRhcmdldCBhcyBTVkdFbGVtZW50KS5zZXRQb2ludGVyQ2FwdHVyZShldi5wb2ludGVySWQpO1xuICAgIGNvbnN0IGxvY2FsID0gdGhpcy4jc2NyZWVuX3RvX3N2Zyhldik7XG4gICAgdGhpcy4jc2JveCA9IHsgcGluOiBsb2NhbCwgbW91c2U6IGxvY2FsIH07XG4gIH1cblxuICAjc2JveF9tb3ZlKGV2OiBQb2ludGVyRXZlbnQpIHtcbiAgICB0aGlzLiNtb3VzZV9sb2MgPSB7IGNsaWVudFg6IGV2LmNsaWVudFgsIGNsaWVudFk6IGV2LmNsaWVudFkgfTtcbiAgICBpZiAoIXRoaXMuI3Nib3gpIHJldHVybjtcbiAgICB0aGlzLiNzYm94Lm1vdXNlID0gdGhpcy4jc2NyZWVuX3RvX3N2Zyhldik7XG4gICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gIH1cblxuICAjc2JveF9zdG9wKGV2OiBQb2ludGVyRXZlbnQpIHtcbiAgICAvLyBUT0RPOiBUaGlzIGNhdXNlcyBtb2JpbGUgc2FmYXJpIHRvIGxvc2Ugc2VsZWN0aW9uIG9uIHpvb21cbiAgICBpZiAoIXRoaXMuI3Nib3gpIHJldHVybiB0aGlzLmRpc3BhdGNoRXZlbnQod2luZG93X2V2KFwidG9rZW4tc2VsZWN0XCIsIFtdKSk7XG4gICAgKGV2LnRhcmdldCBhcyBTVkdFbGVtZW50KS5zZXRQb2ludGVyQ2FwdHVyZShldi5wb2ludGVySWQpO1xuICAgIGNvbnN0IGxvYyA9IG1pbl9wKHRoaXMuI3Nib3gucGluLCB0aGlzLiNzYm94Lm1vdXNlKTtcbiAgICBjb25zdCBkaW0gPSBhYnNfcChzdWJfcCh0aGlzLiNzYm94LnBpbiwgdGhpcy4jc2JveC5tb3VzZSkpO1xuXG4gICAgY29uc3QgYm94ID0ge1xuICAgICAgc3RhcnQ6IGxvYyxcbiAgICAgIGVuZDogYWRkX3AobG9jLCBkaW0pLFxuICAgIH07XG5cbiAgICBjb25zdCBzZWwgPSBtYXAoXG4gICAgICBmaWx0ZXIodGhpcy5ib2FyZC5nZXQoXCJ0b2tlbnNcIikudmFsdWVzKCksICh0OiBUeXBlZE1hcDxUb2tlbkRhdGE+KSA9PlxuICAgICAgICBpbnRlcnNlY3QoYm94LCB7XG4gICAgICAgICAgc3RhcnQ6IHQuZ2V0KFwibG9jXCIpLFxuICAgICAgICAgIGVuZDogYWRkX3AodC5nZXQoXCJsb2NcIiksIHQuZ2V0KFwiZGltXCIpKSxcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgICAodCkgPT4gdC5nZXQoXCJpZFwiKVxuICAgICk7XG5cbiAgICB0aGlzLiNzYm94ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh3aW5kb3dfZXYoXCJ0b2tlbi1zZWxlY3RcIiwgWy4uLnNlbF0pKTtcbiAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgfVxuXG4gICNzZWxlY3Rpb25fYmJveCgpOiBTZWxlY3Rpb25Cb3ggfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbi5zaXplID09PSAwKSByZXR1cm47XG4gICAgY29uc3QgcyA9IEFycmF5LmZyb20odGhpcy5zZWxlY3Rpb24sICh0KSA9PiB0aGlzLmJvYXJkLmdldChcInRva2Vuc1wiKS5nZXQodCkpLmZpbHRlcigodCkgPT4gdCkgYXMgVHlwZWRNYXA8VG9rZW5EYXRhPltdO1xuICAgIGNvbnN0IGluZGV4ID0gTWF0aC5tYXgoLi4ubWFwKHRoaXMuc2VsZWN0aW9uLnZhbHVlcygpLCAoaWQpID0+IHRoaXMuYm9hcmQuZ2V0KFwib3JkZXJcIikudG9KU09OKCkuaW5kZXhPZihpZCkhKSk7XG4gICAgbGV0IHN0YXJ0ID0gc1swXSEuZ2V0KFwibG9jXCIpO1xuICAgIGxldCBlbmQgPSBhZGRfcChzWzBdIS5nZXQoXCJsb2NcIiksIHNbMF0hLmdldChcImRpbVwiKSk7XG5cbiAgICBzLmZvckVhY2goKHQpID0+IHtcbiAgICAgIHN0YXJ0ID0gbWluX3Aoc3RhcnQsIHQuZ2V0KFwibG9jXCIpKTtcbiAgICAgIGVuZCA9IG1heF9wKGVuZCwgYWRkX3AodC5nZXQoXCJsb2NcIiksIHQuZ2V0KFwiZGltXCIpKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4geyBpbmRleCwgYmJveDogeyBzdGFydCwgZW5kIH0gfTtcbiAgfVxuXG4gICNkcmFnX29mZnNldD86IFBvaW50O1xuXG4gIEBldmVudE9wdGlvbnMoeyBjYXB0dXJlOiB0cnVlLCBwYXNzaXZlOiBmYWxzZSB9KVxuICBzZWxlY3Rpb25fZHJhZ19zdGFydChldjogUG9pbnRlckV2ZW50KSB7XG4gICAgaWYgKCFpc19wcmltYXJ5X2Rvd24oZXYpKSByZXR1cm47XG4gICAgY29uc3Qgc3ZnX2Nvb3JkID0gdGhpcy4jc2NyZWVuX3RvX3N2ZyhldikgYXMgUG9pbnQ7XG4gICAgc3RvcF9ldihldik7XG4gICAgKGV2LnRhcmdldCBhcyBTVkdFbGVtZW50KS5zZXRQb2ludGVyQ2FwdHVyZShldi5wb2ludGVySWQpO1xuICAgIHRoaXMuI2RyYWdfb2Zmc2V0ID0gc3ZnX2Nvb3JkO1xuICB9XG5cbiAgI3NlbGVjdGlvbl90cmFuc2Zvcm0gPSB7IG1vdmU6IFswLCAwXSBhcyBQb2ludCwgcmVzaXplOiBbMCwgMF0gYXMgUG9pbnQsIHI6IDAgfTtcblxuICBAZXZlbnRPcHRpb25zKHsgY2FwdHVyZTogdHJ1ZSwgcGFzc2l2ZTogZmFsc2UgfSlcbiAgc2VsZWN0aW9uX2RyYWcoZXY6IFBvaW50ZXJFdmVudCkge1xuICAgIGlmICghaXNfcHJpbWFyeV9kb3duKGV2KSkgcmV0dXJuO1xuICAgIGlmICghdGhpcy4jZHJhZ19vZmZzZXQpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uX2RyYWdfc3RhcnQoZXYpO1xuICAgIH1cbiAgICBzdG9wX2V2KGV2KTtcbiAgICBjb25zdCBncmlkX2xvYyA9IGNsYW1wX3AoWzAsIDBdLCB0aGlzLiNkaW0sIHRoaXMuI3NjcmVlbl90b19zdmcoZXYpKTtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSB0aGlzLmJvYXJkLmdldChcInRva2Vuc1wiKS5nZXQodGhpcy5zZWxlY3Rpb24udmFsdWVzKCkubmV4dCgpLnZhbHVlKSE7XG4gICAgY29uc3QgZGltID0gc2VsZWN0aW9uLmdldChcImRpbVwiKTtcbiAgICBjb25zdCBsb2MgPSBzZWxlY3Rpb24uZ2V0KFwibG9jXCIpO1xuICAgIGNvbnN0IGNsYXNzZXMgPSAoZXYudGFyZ2V0IGFzIFNWR0dyYXBoaWNzRWxlbWVudCkuY2xhc3NMaXN0O1xuICAgIGxldCBtb3ZlID0gWzAsIDBdIGFzIFBvaW50O1xuICAgIGxldCByZXNpemUgPSBbMCwgMF0gYXMgUG9pbnQ7XG4gICAgbGV0IHIgPSAwO1xuXG4gICAgaWYgKGNsYXNzZXMuY29udGFpbnMoXCJyblwiKSkge1xuICAgICAgcmVzaXplWzFdID0gbG9jWzFdIC0gbmVhcmVzdF9jb3JuZXIoZ3JpZF9sb2NbMV0pO1xuICAgICAgbW92ZVsxXSA9IG5lYXJlc3RfY29ybmVyKGdyaWRfbG9jWzFdKSAtIGxvY1sxXTtcbiAgICB9XG5cbiAgICBpZiAoY2xhc3Nlcy5jb250YWlucyhcInJ3XCIpKSB7XG4gICAgICByZXNpemVbMF0gPSBsb2NbMF0gLSBuZWFyZXN0X2Nvcm5lcihncmlkX2xvY1swXSk7XG4gICAgICBtb3ZlWzBdID0gbmVhcmVzdF9jb3JuZXIoZ3JpZF9sb2NbMF0pIC0gbG9jWzBdO1xuICAgIH1cblxuICAgIGlmIChjbGFzc2VzLmNvbnRhaW5zKFwicnNcIikpIHtcbiAgICAgIHJlc2l6ZVsxXSA9IG5lYXJlc3RfY29ybmVyKGdyaWRfbG9jWzFdKSAtIGRpbVsxXSAtIGxvY1sxXTtcbiAgICB9XG5cbiAgICBpZiAoY2xhc3Nlcy5jb250YWlucyhcInJlXCIpKSB7XG4gICAgICByZXNpemVbMF0gPSBuZWFyZXN0X2Nvcm5lcihncmlkX2xvY1swXSkgLSBkaW1bMF0gLSBsb2NbMF07XG4gICAgfVxuXG4gICAgaWYgKGNsYXNzZXMuY29udGFpbnMoXCJyb1wiKSkge1xuICAgICAgY29uc3QgY2VudGVyID0gYWRkX3AobG9jLCBkaXZfYyhkaW0sIDIpKTtcbiAgICAgIGNvbnN0IHJlbCA9IHN1Yl9wKGdyaWRfbG9jLCBjZW50ZXIpO1xuICAgICAgY29uc3QgYW5nbGUgPSBNYXRoLmF0YW4yKHJlbFswXSwgLXJlbFsxXSk7XG4gICAgICBjb25zdCBkZWcgPSAoYW5nbGUgKiAxODApIC8gTWF0aC5QSTtcbiAgICAgIHIgPSBNYXRoLnJvdW5kKGRlZyAvIDkwKSAqIDkwIC0gKHNlbGVjdGlvbi5nZXQoXCJyXCIpICUgMzYwKTtcbiAgICB9XG5cbiAgICBpZiAoY2xhc3Nlcy5jb250YWlucyhcInNlbGVjdGlvbi1kcmFnLXRhcmdldFwiKSkge1xuICAgICAgbW92ZSA9IHN1Yl9wKGdyaWRfbG9jLCB0aGlzLiNkcmFnX29mZnNldCEpLm1hcChuZWFyZXN0X2Nvcm5lcikgYXMgUG9pbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERvbid0IGxldCB0b3AtbGVmdCBkcmFncyBjYXVzZSBtb3ZlbWVudCBwYXMgdGhlIGRpbWVuc2lvbnNcbiAgICAgIG1vdmUgPSBtaW5fcChhZGRfYyhkaW0sIC1HUklEX1NJWkUpLCBtb3ZlKTtcbiAgICAgIC8vIENvbnN0cmFpbiB0aGUgdHJhbnNmb3JtIGZyb20gbWFraW5nIGFueXRoaW5nIHNtYWxsZXIgdGhhbiBhIGdyaWRcbiAgICAgIHJlc2l6ZSA9IG1heF9wKGFkZF9jKG11bF9jKGRpbSwgLTEpLCBHUklEX1NJWkUpLCByZXNpemUgYXMgUG9pbnQpO1xuICAgIH1cblxuICAgIGlmIChyICE9PSB0aGlzLiNzZWxlY3Rpb25fdHJhbnNmb3JtLnIgfHwgIWVxX3AobW92ZSwgdGhpcy4jc2VsZWN0aW9uX3RyYW5zZm9ybS5tb3ZlKSB8fCAhZXFfcChyZXNpemUsIHRoaXMuI3NlbGVjdGlvbl90cmFuc2Zvcm0ucmVzaXplKSkge1xuICAgICAgdGhpcy4jZHJhZ19vZmZzZXQgPSBhZGRfcCh0aGlzLiNkcmFnX29mZnNldCEsIG1vdmUpO1xuICAgICAgdGhpcy4jc2VsZWN0aW9uX3RyYW5zZm9ybSA9IHsgbW92ZTogWzAsIDBdIGFzIFBvaW50LCByZXNpemU6IFswLCAwXSBhcyBQb2ludCwgcjogMCB9O1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBnYW1lX2V2ZW50KHtcbiAgICAgICAgICB0eXBlOiBcInRva2VuLW1hbmlwdWxhdGVkXCIsXG4gICAgICAgICAgdG9rZW5zOiBBcnJheS5mcm9tKHRoaXMuc2VsZWN0aW9uLCAoaWQpID0+IHtcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb24gPSB0aGlzLmJvYXJkLmdldChcInRva2Vuc1wiKS5nZXQoaWQpITtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGlkOiBzZWxlY3Rpb24uZ2V0KFwiaWRcIiksXG4gICAgICAgICAgICAgIGxvYzogYWRkX3Aoc2VsZWN0aW9uLmdldChcImxvY1wiKSwgbW92ZSksXG4gICAgICAgICAgICAgIGRpbTogYWRkX3Aoc2VsZWN0aW9uLmdldChcImRpbVwiKSwgcmVzaXplKSxcbiAgICAgICAgICAgICAgcjogc2VsZWN0aW9uLmdldChcInJcIikgKyByLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQGV2ZW50T3B0aW9ucyh7IGNhcHR1cmU6IHRydWUsIHBhc3NpdmU6IGZhbHNlIH0pXG4gIHNlbGVjdGlvbl9kcmFnX2VuZChldjogUG9pbnRlckV2ZW50KSB7XG4gICAgc3RvcF9ldihldik7XG4gICAgdGhpcy4jZHJhZ19vZmZzZXQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBOb3JtYWxseSB3ZSdkIHVzZSBTVkcgbWFjaGluZXJ5IGJ1dCBpdCdzIGJyb2tlbiBpbiBvbmUgYnJvd3Nlci4uLlxuICAvLyAuLi4gSSdsbCBsZXQgeW91IGd1ZXNzIHdoby4uLlxuICAvLyAuLi4gaXQncyBzYWZhcmlcbiAgI3NjcmVlbl90b19zdmcgPSAoZXY6IHsgY2xpZW50WDogbnVtYmVyOyBjbGllbnRZOiBudW1iZXIgfSk6IFBvaW50ID0+IHtcbiAgICBsZXQgcmVzID0gc3ViX3AodGhpcy52aWV3cG9ydCEuY29vcmRUb0xvY2FsKFtldi5jbGllbnRYLCBldi5jbGllbnRZXSksIFtQQURESU5HLCBQQURESU5HXSk7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAja2V5ZG93biA9IChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgIGlmICghdGhpcy5zZWxlY3Rpb24pIHJldHVybjtcblxuICAgIC8vIEJhY2tzcGFjZVxuICAgIGlmIChldi5rZXlDb2RlID09PSA4KSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIGdhbWVfZXZlbnQoe1xuICAgICAgICAgIHR5cGU6IFwidG9rZW4tcmVtb3ZlZFwiLFxuICAgICAgICAgIGlkczogQXJyYXkuZnJvbSh0aGlzLnNlbGVjdGlvbiksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgc3RvcF9ldihldik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2LmtleSA9PT0gXCJ6XCIgJiYgdGhpcy4jbW91c2VfbG9jKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIGdhbWVfZXZlbnQoe1xuICAgICAgICAgIHR5cGU6IFwiY2FsbG91dFwiLFxuICAgICAgICAgIGxvYzogdGhpcy4jc2NyZWVuX3RvX3N2Zyh0aGlzLiNtb3VzZV9sb2MpLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgcyA9IHRoaXMuYm9hcmQuZ2V0KFwidG9rZW5zXCIpLmdldCh0aGlzLnNlbGVjdGlvbi52YWx1ZXMoKS5uZXh0KCkudmFsdWUpITtcbiAgICBjb25zdCBtb3ZlbWVudHM6IHsgW2tleTogc3RyaW5nXTogUG9pbnQgfSA9IHtcbiAgICAgIEFycm93VXA6IFswLCAtR1JJRF9TSVpFXSxcbiAgICAgIEFycm93RG93bjogWzAsIEdSSURfU0laRV0sXG4gICAgICBBcnJvd0xlZnQ6IFstR1JJRF9TSVpFLCAwXSxcbiAgICAgIEFycm93UmlnaHQ6IFtHUklEX1NJWkUsIDBdLFxuICAgIH07XG5cbiAgICBsZXQgbW92ZTogUG9pbnQgfCB1bmRlZmluZWQgPSBtb3ZlbWVudHNbZXYua2V5XTtcbiAgICBpZiAobW92ZSkge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBnYW1lX2V2ZW50KHtcbiAgICAgICAgICB0eXBlOiBcInRva2VuLW1hbmlwdWxhdGVkXCIsXG4gICAgICAgICAgdG9rZW5zOiBBcnJheS5mcm9tKHRoaXMuc2VsZWN0aW9uLCAoaWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLmJvYXJkLmdldChcInRva2Vuc1wiKS5nZXQoaWQpITtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGNsYW1wX3AoWzAsIDBdLCBzdWJfcCh0aGlzLiNkaW0sIHMuZ2V0KFwiZGltXCIpKSwgYWRkX3Aocy5nZXQoXCJsb2NcIiksIG1vdmUhKSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBpZDogcy5nZXQoXCJpZFwiKSxcbiAgICAgICAgICAgICAgbG9jOiBsb2MsXG4gICAgICAgICAgICAgIGRpbTogcy5nZXQoXCJkaW1cIiksXG4gICAgICAgICAgICAgIHI6IHMuZ2V0KFwiclwiKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgc3RvcF9ldihldik7XG4gICAgfVxuICB9O1xuXG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgXG4gICAgOmhvc3Qge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAtLXNlbGVjdGlvbi1jb2xvcjogY29ybmZsb3dlcmJsdWU7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIH1cblxuICAgIHAtcC16IHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogMDtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICByaWdodDogMDtcbiAgICAgIGJvdHRvbTogMDtcbiAgICB9XG4gICAgI3Jvb3Qge1xuICAgICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgIH1cblxuICAgICNzYm94IHtcbiAgICAgIHN0cm9rZTogdmFyKC0tc2VsZWN0aW9uLWNvbG9yKTtcbiAgICAgIHN0cm9rZS13aWR0aDogMXB4O1xuICAgICAgZmlsbDogdmFyKC0tc2VsZWN0aW9uLWNvbG9yKTtcbiAgICAgIGZpbGwtb3BhY2l0eTogMC4yO1xuICAgIH1cblxuICAgICNiZy1kcm9wIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHJpZ2h0OiA1cHg7XG4gICAgICBib3R0b206IC02MHB4O1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgaGVpZ2h0OiA1MHB4O1xuICAgICAgdHJhbnNpdGlvbjogYm90dG9tIDI1MG1zO1xuICAgICAgYmFja2dyb3VuZDogdmFyKC0tdWktYmcpO1xuICAgICAgYm9yZGVyLXJhZGl1czogNXB4IDVweCAwIDA7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgcGFkZGluZzogNXB4O1xuICAgICAgZ3JpZDogMWZyIDFmcjtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgI2JnLWRyb3AuY2FudmFzLFxuICAgICNiZy1kcm9wLmJnIHtcbiAgICAgIGJvdHRvbTogMDtcbiAgICAgIGJveC1zaGFkb3c6IDJweCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cblxuICAgICNiZy1kcm9wLWxhYmVsIHtcbiAgICAgIC0tY29sb3I6IGdyYXk7XG4gICAgICBwYWRkaW5nOiAwIDFlbTtcbiAgICAgIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWNvbG9yKTtcbiAgICAgIGNvbG9yOiB2YXIoLS1jb2xvcik7XG4gICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgfVxuXG4gICAgLmJnID4gI2JnLWRyb3AtbGFiZWwge1xuICAgICAgLS1jb2xvcjogYmx1ZTtcbiAgICB9XG5cbiAgICBzdmcge1xuICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gICAgfVxuXG4gICAgI3N1cmZhY2Uge1xuICAgICAgY2xpcC1wYXRoOiByZWN0KDEwMCUpO1xuICAgIH1cblxuICAgIC5zaGFkb3cge1xuICAgICAgc3Ryb2tlLXdpZHRoOiAke0xJTkVfV0lEVEh9O1xuICAgICAgc3Ryb2tlOiByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDJweCA0cHggNnB4IHJnYmEoMCwgMCwgMCwgMC4zKSk7XG4gICAgfVxuXG4gICAgLmRyb3BfaGludCB7XG4gICAgICB0cmFuc2l0aW9uOiBub25lO1xuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICBmaWxsOiBncmF5O1xuICAgIH1cblxuICAgIC5zZWxlY3Rpb24tYm94LFxuICAgIGxpbmUucm8ge1xuICAgICAgc3Ryb2tlOiB2YXIoLS1zZWxlY3Rpb24tY29sb3IpO1xuICAgICAgc3Ryb2tlLXdpZHRoOiAxcHg7XG4gICAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDBweCAwcHggMnB4IHZhcigtLXNlbGVjdGlvbi1jb2xvcikpO1xuICAgICAgZmlsbDogdHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgLnNlbGVjdGlvbi1ib3gge1xuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmUgIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAucm4sXG4gICAgLnJzLFxuICAgIC5yZSxcbiAgICAucncge1xuICAgICAgc3Ryb2tlLXdpZHRoOiAke0hBTkRMRV9TSVpFfTtcbiAgICAgIHZlY3Rvci1lZmZlY3Q6IG5vbi1zY2FsaW5nLXN0cm9rZTtcbiAgICAgIHN0cm9rZTogdHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgLmhhbmRsZSB7XG4gICAgICBzdHJva2Utd2lkdGg6IDFweDtcbiAgICAgIGZpbGw6IHZhcigtLXNlbGVjdGlvbi1jb2xvcik7XG4gICAgICBzdHJva2U6IHdoaXRlO1xuICAgIH1cblxuICAgIC5zZWxlY3Rpb24tZHJhZy10YXJnZXQge1xuICAgICAgcG9pbnRlci1ldmVudHM6IGZpbGw7XG4gICAgICBjdXJzb3I6IG1vdmU7XG4gICAgfVxuXG4gICAgcmVjdC5oYW5kbGUge1xuICAgICAgd2lkdGg6ICR7SEFORExFX1NJWkV9cHg7XG4gICAgICBoZWlnaHQ6ICR7SEFORExFX1NJWkV9cHg7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgkey1IQU5ETEVfU0laRSAvIDJ9cHgsICR7LUhBTkRMRV9TSVpFIC8gMn1weCk7XG4gICAgfVxuXG4gICAgLnJvLmhhbmRsZSB7XG4gICAgICBjdXJzb3I6IGNyb3NzaGFpcjtcbiAgICB9XG5cbiAgICAucm4ucmUsXG4gICAgLnJzLnJ3IHtcbiAgICAgIGN1cnNvcjogbmVzdy1yZXNpemU7XG4gICAgfVxuXG4gICAgLnJuLnJ3LFxuICAgIC5ycy5yZSB7XG4gICAgICBjdXJzb3I6IG53c2UtcmVzaXplO1xuICAgIH1cblxuICAgIC5ybixcbiAgICAucnMge1xuICAgICAgY3Vyc29yOiByb3ctcmVzaXplO1xuICAgIH1cblxuICAgIC5yZSxcbiAgICAucncge1xuICAgICAgY3Vyc29yOiBjb2wtcmVzaXplO1xuICAgIH1cblxuICAgIHAtcC16IHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZGVkZjA7XG4gICAgfVxuXG4gICAgLnRva2VuIHtcbiAgICAgIHRyYW5zZm9ybS1ib3g6IGZpbGwtYm94O1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xuICAgICAgZmlsbDogdHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgLnRva2VuICsgLmxvYWRpbmcge1xuICAgICAgZmlsbDogdXJsKCNsb2FkaW5nKTtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIH1cblxuICAgIC50b2tlbi5sb2FkZWQgKyAubG9hZGluZyB7XG4gICAgICBmaWxsOiB0cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICAjc2VsZWN0aW9uIHtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIH1cblxuICAgICNzZWxlY3Rpb24gKiB7XG4gICAgICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgICB9XG4gIGA7XG59XG5cbmV4cG9ydCB0eXBlIFRva2VuRHJvcEV2ZW50ID0gQ3VzdG9tRXZlbnQ8eyBsb2M6IFBvaW50OyBkaW06IFBvaW50OyBpbWc6IExvY2FsT3JSZW1vdGVJbWFnZSB9PjtcbmV4cG9ydCB0eXBlIEJnRHJvcEV2ZW50ID0gQ3VzdG9tRXZlbnQ8TG9jYWxPclJlbW90ZUltYWdlPjtcbmV4cG9ydCB0eXBlIFRva2VuU2VsZWN0RXZlbnQgPSBDdXN0b21FdmVudDxzdHJpbmdbXT47XG5leHBvcnQgdHlwZSBUb2tlbkRlbGV0ZUV2ZW50ID0gQ3VzdG9tRXZlbnQ8c3RyaW5nPjtcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93RXZlbnRNYXAge1xuICAgIFwidG9rZW4tZHJvcFwiOiBUb2tlbkRyb3BFdmVudDtcbiAgICBcImJnLWRyb3BcIjogQmdEcm9wRXZlbnQ7XG4gICAgXCJ0b2tlbi1zZWxlY3RcIjogVG9rZW5TZWxlY3RFdmVudDtcbiAgfVxufVxuXG5jb25zdCBuZWFyZXN0X2Nvcm5lciA9IChuOiBudW1iZXIpID0+IE1hdGgucm91bmQobiAvIEdSSURfU0laRSkgKiBHUklEX1NJWkU7XG5jb25zdCBvY2N1cGllZF9jZWxsID0gKG46IG51bWJlcikgPT4gbiAtIChuICUgR1JJRF9TSVpFKTtcbmNvbnN0IG1hcmtfbG9hZGVkID0gKGV2OiBhbnkpID0+IGV2LnRhcmdldC5jbGFzc0xpc3QuYWRkKFwibG9hZGVkXCIpO1xuIiwiaW1wb3J0IHsgY3NzLCBDU1NSZXN1bHRHcm91cCwgaHRtbCwgTGl0RWxlbWVudCB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHN0YXRlIH0gZnJvbSBcImxpdC9kZWNvcmF0b3JzLmpzXCI7XG5pbXBvcnQgeyBzdG9wX2V2IH0gZnJvbSBcIi4uL3V0aWwvZXZlbnRzXCI7XG5cbkBjdXN0b21FbGVtZW50KFwiYnV5LW1lLWEtY29mZmVlXCIpXG5leHBvcnQgY2xhc3MgQnV5TWVBQ29mZmVlIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIEBzdGF0ZSgpXG4gIF9zdGF0ZSA9IGZhbHNlO1xuXG4gIEBzdGF0ZSgpXG4gIF9sb2FkZWQgPSBmYWxzZTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8YnV0dG9uIEBjbGljaz0ke3RoaXMuX2J1eX0+QnV5IE1lIEEgQ29mZmVlPC9idXR0b24+XG4gICAgICAke3RoaXMuX3N0YXRlXG4gICAgICAgID8gaHRtbGBcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPGlmcmFtZVxuICAgICAgICAgICAgICAgIGNsYXNzPSR7dGhpcy5fbG9hZGVkID8gXCJsb2FkZWRcIiA6IFwiXCJ9XG4gICAgICAgICAgICAgICAgYWxsb3c9XCJwYXltZW50XCJcbiAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2tvLWZpLmNvbS9kanJlbnJlbi8/aGlkZWZlZWQ9dHJ1ZSZ3aWRnZXQ9dHJ1ZSZlbWJlZD10cnVlJnByZXZpZXc9dHJ1ZVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJkanJlbnJlblwiXG4gICAgICAgICAgICAgICAgQGxvYWQ9JHt0aGlzLiNpZnJhbWVfbG9hZH1cbiAgICAgICAgICAgICAgPjwvaWZyYW1lPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgYFxuICAgICAgICA6IG51bGx9XG4gICAgYDtcbiAgfVxuXG4gIF9idXkgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIkNMSUNLXCIpO1xuICAgIHN0b3BfZXYoZXYpO1xuICAgIHRoaXMuX3N0YXRlID0gdHJ1ZTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy4jY2xvc2UsIHsgY2FwdHVyZTogdHJ1ZSB9KTtcbiAgfTtcblxuICAjY2xvc2UgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBzdG9wX2V2KGV2KTtcbiAgICB0aGlzLl9zdGF0ZSA9IGZhbHNlO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLiNjbG9zZSwgeyBjYXB0dXJlOiB0cnVlIH0pO1xuICB9O1xuXG4gICNpZnJhbWVfbG9hZCA9IChldjogRXZlbnQpID0+IHtcbiAgICB0aGlzLl9sb2FkZWQgPSB0cnVlO1xuICB9O1xuXG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgXG4gICAgOmhvc3Qge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgfVxuICAgIGlmcmFtZSB7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC41cyBsaW5lYXI7XG4gICAgfVxuXG4gICAgI2NvbnRhaW5lciB7XG4gICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICBib3gtc2hhZG93OiAwIDAgNnB4IHJnYmEoMCwgMCwgMCwgMC43KTtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHdpZHRoOiAzNTBweDtcbiAgICAgIGhlaWdodDogNTI1cHg7XG4gICAgICBib3R0b206IC01MzVweDtcbiAgICAgIHJpZ2h0OiAwO1xuICAgICAgYW5pbWF0aW9uLW5hbWU6IGZhZGU7XG4gICAgICBhbmltYXRpb24tZHVyYXRpb246IDAuNXM7XG4gICAgICBhbmltYXRpb24tZGlyZWN0aW9uOiBiYWNrd2FyZHM7XG4gICAgICBiYWNrZ3JvdW5kOiB1cmwoXCJhc3NldHMvbG9hZGluZy5zdmdcIikgY2VudGVyLzEwMHB4IG5vLXJlcGVhdCwgI2VkZWRmMDtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgfVxuXG4gICAgaWZyYW1lLmxvYWRlZCB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cblxuICAgIEBrZXlmcmFtZXMgZmFkZSB7XG4gICAgICAwJSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB9XG4gICAgICAxMDAlIHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgIH1cbiAgICB9XG4gIGA7XG59XG4iLCIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIHdvcmsgd2l0aCBrZXktdmFsdWUgc3RvcmVzLlxuICpcbiAqIEBtb2R1bGUgbWFwXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IE1hcCBpbnN0YW5jZS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm4ge01hcDxhbnksIGFueT59XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSAoKSA9PiBuZXcgTWFwKClcblxuLyoqXG4gKiBDb3B5IGEgTWFwIG9iamVjdCBpbnRvIGEgZnJlc2ggTWFwIG9iamVjdC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEB0ZW1wbGF0ZSBYLFlcbiAqIEBwYXJhbSB7TWFwPFgsWT59IG1cbiAqIEByZXR1cm4ge01hcDxYLFk+fVxuICovXG5leHBvcnQgY29uc3QgY29weSA9IG0gPT4ge1xuICBjb25zdCByID0gY3JlYXRlKClcbiAgbS5mb3JFYWNoKCh2LCBrKSA9PiB7IHIuc2V0KGssIHYpIH0pXG4gIHJldHVybiByXG59XG5cbi8qKlxuICogR2V0IG1hcCBwcm9wZXJ0eS4gQ3JlYXRlIFQgaWYgcHJvcGVydHkgaXMgdW5kZWZpbmVkIGFuZCBzZXQgVCBvbiBtYXAuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGxpc3RlbmVycyA9IG1hcC5zZXRJZlVuZGVmaW5lZChldmVudHMsICdldmVudE5hbWUnLCBzZXQuY3JlYXRlKVxuICogbGlzdGVuZXJzLmFkZChsaXN0ZW5lcilcbiAqIGBgYFxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIFQsS1xuICogQHBhcmFtIHtNYXA8SywgVD59IG1hcFxuICogQHBhcmFtIHtLfSBrZXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpUfSBjcmVhdGVUXG4gKiBAcmV0dXJuIHtUfVxuICovXG5leHBvcnQgY29uc3Qgc2V0SWZVbmRlZmluZWQgPSAobWFwLCBrZXksIGNyZWF0ZVQpID0+IHtcbiAgbGV0IHNldCA9IG1hcC5nZXQoa2V5KVxuICBpZiAoc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBtYXAuc2V0KGtleSwgc2V0ID0gY3JlYXRlVCgpKVxuICB9XG4gIHJldHVybiBzZXRcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIEFycmF5IGFuZCBwb3B1bGF0ZXMgaXQgd2l0aCB0aGUgY29udGVudCBvZiBhbGwga2V5LXZhbHVlIHBhaXJzIHVzaW5nIHRoZSBgZih2YWx1ZSwga2V5KWAgZnVuY3Rpb24uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgS1xuICogQHRlbXBsYXRlIFZcbiAqIEB0ZW1wbGF0ZSBSXG4gKiBAcGFyYW0ge01hcDxLLFY+fSBtXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFYsSyk6Un0gZlxuICogQHJldHVybiB7QXJyYXk8Uj59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXAgPSAobSwgZikgPT4ge1xuICBjb25zdCByZXMgPSBbXVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBtKSB7XG4gICAgcmVzLnB1c2goZih2YWx1ZSwga2V5KSlcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogVGVzdHMgd2hldGhlciBhbnkga2V5LXZhbHVlIHBhaXJzIHBhc3MgdGhlIHRlc3QgaW1wbGVtZW50ZWQgYnkgYGYodmFsdWUsIGtleSlgLlxuICpcbiAqIEB0b2RvIHNob3VsZCByZW5hbWUgdG8gc29tZSAtIHNpbWlsYXJseSB0byBBcnJheS5zb21lXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgS1xuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7TWFwPEssVj59IG1cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVixLKTpib29sZWFufSBmXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgYW55ID0gKG0sIGYpID0+IHtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgbSkge1xuICAgIGlmIChmKHZhbHVlLCBrZXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIGFsbCBrZXktdmFsdWUgcGFpcnMgcGFzcyB0aGUgdGVzdCBpbXBsZW1lbnRlZCBieSBgZih2YWx1ZSwga2V5KWAuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgS1xuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7TWFwPEssVj59IG1cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVixLKTpib29sZWFufSBmXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgYWxsID0gKG0sIGYpID0+IHtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgbSkge1xuICAgIGlmICghZih2YWx1ZSwga2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG4iLCIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIHdvcmsgd2l0aCBzZXRzLlxuICpcbiAqIEBtb2R1bGUgc2V0XG4gKi9cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9ICgpID0+IG5ldyBTZXQoKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1NldDxUPn0gc2V0XG4gKiBAcmV0dXJuIHtBcnJheTxUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHRvQXJyYXkgPSBzZXQgPT4gQXJyYXkuZnJvbShzZXQpXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7U2V0PFQ+fSBzZXRcbiAqIEByZXR1cm4ge1R9XG4gKi9cbmV4cG9ydCBjb25zdCBmaXJzdCA9IHNldCA9PiB7XG4gIHJldHVybiBzZXQudmFsdWVzKCkubmV4dCgpLnZhbHVlIHx8IHVuZGVmaW5lZFxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge0l0ZXJhYmxlPFQ+fSBlbnRyaWVzXG4gKiBAcmV0dXJuIHtTZXQ8VD59XG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tID0gZW50cmllcyA9PiB7XG4gIHJldHVybiBuZXcgU2V0KGVudHJpZXMpXG59XG4iLCIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIHdvcmsgd2l0aCBBcnJheXMuXG4gKlxuICogQG1vZHVsZSBhcnJheVxuICovXG5cbi8qKlxuICogUmV0dXJuIHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFRoZSBlbGVtZW50IG11c3QgZXhpc3RcbiAqXG4gKiBAdGVtcGxhdGUgTFxuICogQHBhcmFtIHtBcnJheTxMPn0gYXJyXG4gKiBAcmV0dXJuIHtMfVxuICovXG5leHBvcnQgY29uc3QgbGFzdCA9IGFyciA9PiBhcnJbYXJyLmxlbmd0aCAtIDFdXG5cbi8qKlxuICogQHRlbXBsYXRlIENcbiAqIEByZXR1cm4ge0FycmF5PEM+fVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gKCkgPT4gLyoqIEB0eXBlIHtBcnJheTxDPn0gKi8gKFtdKVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBEXG4gKiBAcGFyYW0ge0FycmF5PEQ+fSBhXG4gKiBAcmV0dXJuIHtBcnJheTxEPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvcHkgPSBhID0+IC8qKiBAdHlwZSB7QXJyYXk8RD59ICovIChhLnNsaWNlKCkpXG5cbi8qKlxuICogQXBwZW5kIGVsZW1lbnRzIGZyb20gc3JjIHRvIGRlc3RcbiAqXG4gKiBAdGVtcGxhdGUgTVxuICogQHBhcmFtIHtBcnJheTxNPn0gZGVzdFxuICogQHBhcmFtIHtBcnJheTxNPn0gc3JjXG4gKi9cbmV4cG9ydCBjb25zdCBhcHBlbmRUbyA9IChkZXN0LCBzcmMpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcmMubGVuZ3RoOyBpKyspIHtcbiAgICBkZXN0LnB1c2goc3JjW2ldKVxuICB9XG59XG5cbi8qKlxuICogVHJhbnNmb3JtcyBzb21ldGhpbmcgYXJyYXktbGlrZSB0byBhbiBhY3R1YWwgQXJyYXkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtBcnJheUxpa2U8VD58SXRlcmFibGU8VD59IGFycmF5bGlrZVxuICogQHJldHVybiB7VH1cbiAqL1xuZXhwb3J0IGNvbnN0IGZyb20gPSBBcnJheS5mcm9tXG5cbi8qKlxuICogVHJ1ZSBpZmYgY29uZGl0aW9uIGhvbGRzIG9uIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIEFycmF5LlxuICpcbiAqIEBmdW5jdGlvblxuICogQHRlbXBsYXRlIElURU1cbiAqXG4gKiBAcGFyYW0ge0FycmF5PElURU0+fSBhcnJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oSVRFTSwgbnVtYmVyLCBBcnJheTxJVEVNPik6Ym9vbGVhbn0gZlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGV2ZXJ5ID0gKGFyciwgZikgPT4gYXJyLmV2ZXJ5KGYpXG5cbi8qKlxuICogVHJ1ZSBpZmYgY29uZGl0aW9uIGhvbGRzIG9uIHNvbWUgZWxlbWVudCBpbiB0aGUgQXJyYXkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAdGVtcGxhdGUgU1xuICogQHBhcmFtIHtBcnJheTxTPn0gYXJyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFMsIG51bWJlciwgQXJyYXk8Uz4pOmJvb2xlYW59IGZcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBzb21lID0gKGFyciwgZikgPT4gYXJyLnNvbWUoZilcblxuLyoqXG4gKiBAdGVtcGxhdGUgRUxFTVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8RUxFTT59IGFcbiAqIEBwYXJhbSB7QXJyYXk8RUxFTT59IGJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBlcXVhbEZsYXQgPSAoYSwgYikgPT4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGV2ZXJ5KGEsIChpdGVtLCBpbmRleCkgPT4gaXRlbSA9PT0gYltpbmRleF0pXG5cbi8qKlxuICogQHRlbXBsYXRlIEVMRU1cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8RUxFTT4+fSBhcnJcbiAqIEByZXR1cm4ge0FycmF5PEVMRU0+fVxuICovXG5leHBvcnQgY29uc3QgZmxhdHRlbiA9IGFyciA9PiBhcnIucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjLmNvbmNhdCh2YWwpLCBbXSlcblxuZXhwb3J0IGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5XG4iLCIvKipcbiAqIE9ic2VydmFibGUgY2xhc3MgcHJvdG90eXBlLlxuICpcbiAqIEBtb2R1bGUgb2JzZXJ2YWJsZVxuICovXG5cbmltcG9ydCAqIGFzIG1hcCBmcm9tICcuL21hcC5qcydcbmltcG9ydCAqIGFzIHNldCBmcm9tICcuL3NldC5qcydcbmltcG9ydCAqIGFzIGFycmF5IGZyb20gJy4vYXJyYXkuanMnXG5cbi8qKlxuICogSGFuZGxlcyBuYW1lZCBldmVudHMuXG4gKlxuICogQHRlbXBsYXRlIE5cbiAqL1xuZXhwb3J0IGNsYXNzIE9ic2VydmFibGUge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogU29tZSBkZXNjLlxuICAgICAqIEB0eXBlIHtNYXA8TiwgYW55Pn1cbiAgICAgKi9cbiAgICB0aGlzLl9vYnNlcnZlcnMgPSBtYXAuY3JlYXRlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge059IG5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZlxuICAgKi9cbiAgb24gKG5hbWUsIGYpIHtcbiAgICBtYXAuc2V0SWZVbmRlZmluZWQodGhpcy5fb2JzZXJ2ZXJzLCBuYW1lLCBzZXQuY3JlYXRlKS5hZGQoZilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge059IG5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZlxuICAgKi9cbiAgb25jZSAobmFtZSwgZikge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSAgey4uLmFueX0gYXJnc1xuICAgICAqL1xuICAgIGNvbnN0IF9mID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIHRoaXMub2ZmKG5hbWUsIF9mKVxuICAgICAgZiguLi5hcmdzKVxuICAgIH1cbiAgICB0aGlzLm9uKG5hbWUsIF9mKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tn0gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmXG4gICAqL1xuICBvZmYgKG5hbWUsIGYpIHtcbiAgICBjb25zdCBvYnNlcnZlcnMgPSB0aGlzLl9vYnNlcnZlcnMuZ2V0KG5hbWUpXG4gICAgaWYgKG9ic2VydmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYnNlcnZlcnMuZGVsZXRlKGYpXG4gICAgICBpZiAob2JzZXJ2ZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzLmRlbGV0ZShuYW1lKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbWl0IGEgbmFtZWQgZXZlbnQuIEFsbCByZWdpc3RlcmVkIGV2ZW50IGxpc3RlbmVycyB0aGF0IGxpc3RlbiB0byB0aGVcbiAgICogc3BlY2lmaWVkIG5hbWUgd2lsbCByZWNlaXZlIHRoZSBldmVudC5cbiAgICpcbiAgICogQHRvZG8gVGhpcyBzaG91bGQgY2F0Y2ggZXhjZXB0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0ge059IG5hbWUgVGhlIGV2ZW50IG5hbWUuXG4gICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJncyBUaGUgYXJndW1lbnRzIHRoYXQgYXJlIGFwcGxpZWQgdG8gdGhlIGV2ZW50IGxpc3RlbmVyLlxuICAgKi9cbiAgZW1pdCAobmFtZSwgYXJncykge1xuICAgIC8vIGNvcHkgYWxsIGxpc3RlbmVycyB0byBhbiBhcnJheSBmaXJzdCB0byBtYWtlIHN1cmUgdGhhdCBubyBldmVudCBpcyBlbWl0dGVkIHRvIGxpc3RlbmVycyB0aGF0IGFyZSBzdWJzY3JpYmVkIHdoaWxlIHRoZSBldmVudCBoYW5kbGVyIGlzIGNhbGxlZC5cbiAgICByZXR1cm4gYXJyYXkuZnJvbSgodGhpcy5fb2JzZXJ2ZXJzLmdldChuYW1lKSB8fCBtYXAuY3JlYXRlKCkpLnZhbHVlcygpKS5mb3JFYWNoKGYgPT4gZiguLi5hcmdzKSlcbiAgfVxuXG4gIGRlc3Ryb3kgKCkge1xuICAgIHRoaXMuX29ic2VydmVycyA9IG1hcC5jcmVhdGUoKVxuICB9XG59XG4iLCIvKipcbiAqIENvbW1vbiBNYXRoIGV4cHJlc3Npb25zLlxuICpcbiAqIEBtb2R1bGUgbWF0aFxuICovXG5cbmV4cG9ydCBjb25zdCBmbG9vciA9IE1hdGguZmxvb3JcbmV4cG9ydCBjb25zdCBjZWlsID0gTWF0aC5jZWlsXG5leHBvcnQgY29uc3QgYWJzID0gTWF0aC5hYnNcbmV4cG9ydCBjb25zdCBpbXVsID0gTWF0aC5pbXVsXG5leHBvcnQgY29uc3Qgcm91bmQgPSBNYXRoLnJvdW5kXG5leHBvcnQgY29uc3QgbG9nMTAgPSBNYXRoLmxvZzEwXG5leHBvcnQgY29uc3QgbG9nMiA9IE1hdGgubG9nMlxuZXhwb3J0IGNvbnN0IGxvZyA9IE1hdGgubG9nXG5leHBvcnQgY29uc3Qgc3FydCA9IE1hdGguc3FydFxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBiXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzdW0gb2YgYSBhbmQgYlxuICovXG5leHBvcnQgY29uc3QgYWRkID0gKGEsIGIpID0+IGEgKyBiXG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gYVxuICogQHBhcmFtIHtudW1iZXJ9IGJcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNtYWxsZXIgZWxlbWVudCBvZiBhIGFuZCBiXG4gKi9cbmV4cG9ydCBjb25zdCBtaW4gPSAoYSwgYikgPT4gYSA8IGIgPyBhIDogYlxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBiXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBiaWdnZXIgZWxlbWVudCBvZiBhIGFuZCBiXG4gKi9cbmV4cG9ydCBjb25zdCBtYXggPSAoYSwgYikgPT4gYSA+IGIgPyBhIDogYlxuXG5leHBvcnQgY29uc3QgaXNOYU4gPSBOdW1iZXIuaXNOYU5cblxuZXhwb3J0IGNvbnN0IHBvdyA9IE1hdGgucG93XG4vKipcbiAqIEJhc2UgMTAgZXhwb25lbnRpYWwgZnVuY3Rpb24uIFJldHVybnMgdGhlIHZhbHVlIG9mIDEwIHJhaXNlZCB0byB0aGUgcG93ZXIgb2YgcG93LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBleHBcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGV4cDEwID0gZXhwID0+IE1hdGgucG93KDEwLCBleHApXG5cbmV4cG9ydCBjb25zdCBzaWduID0gTWF0aC5zaWduXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IG5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdldGhlciBuIGlzIG5lZ2F0aXZlLiBUaGlzIGZ1bmN0aW9uIGFsc28gZGlmZmVyZW50aWF0ZXMgYmV0d2VlbiAtMCBhbmQgKzBcbiAqL1xuZXhwb3J0IGNvbnN0IGlzTmVnYXRpdmVaZXJvID0gbiA9PiBuICE9PSAwID8gbiA8IDAgOiAxIC8gbiA8IDBcbiIsIi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIHN0cmluZ3MuXG4gKlxuICogQG1vZHVsZSBzdHJpbmdcbiAqL1xuXG5leHBvcnQgY29uc3QgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuZXhwb3J0IGNvbnN0IGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludFxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmNvbnN0IHRvTG93ZXJDYXNlID0gcyA9PiBzLnRvTG93ZXJDYXNlKClcblxuY29uc3QgdHJpbUxlZnRSZWdleCA9IC9eXFxzKi9nXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IHRyaW1MZWZ0ID0gcyA9PiBzLnJlcGxhY2UodHJpbUxlZnRSZWdleCwgJycpXG5cbmNvbnN0IGZyb21DYW1lbENhc2VSZWdleCA9IC8oW0EtWl0pL2dcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHBhcmFtIHtzdHJpbmd9IHNlcGFyYXRvclxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgZnJvbUNhbWVsQ2FzZSA9IChzLCBzZXBhcmF0b3IpID0+IHRyaW1MZWZ0KHMucmVwbGFjZShmcm9tQ2FtZWxDYXNlUmVnZXgsIG1hdGNoID0+IGAke3NlcGFyYXRvcn0ke3RvTG93ZXJDYXNlKG1hdGNoKX1gKSlcblxuLyoqXG4gKiBDb21wdXRlIHRoZSB1dGY4Qnl0ZUxlbmd0aFxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgdXRmOEJ5dGVMZW5ndGggPSBzdHIgPT4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpLmxlbmd0aFxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCBfZW5jb2RlVXRmOFBvbHlmaWxsID0gc3RyID0+IHtcbiAgY29uc3QgZW5jb2RlZFN0cmluZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKVxuICBjb25zdCBsZW4gPSBlbmNvZGVkU3RyaW5nLmxlbmd0aFxuICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShsZW4pXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBidWZbaV0gPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGVuY29kZWRTdHJpbmcuY29kZVBvaW50QXQoaSkpXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHV0ZjhUZXh0RW5jb2RlciA9IC8qKiBAdHlwZSB7VGV4dEVuY29kZXJ9ICovICh0eXBlb2YgVGV4dEVuY29kZXIgIT09ICd1bmRlZmluZWQnID8gbmV3IFRleHRFbmNvZGVyKCkgOiBudWxsKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCBfZW5jb2RlVXRmOE5hdGl2ZSA9IHN0ciA9PiB1dGY4VGV4dEVuY29kZXIuZW5jb2RlKHN0cilcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZVV0ZjggPSB1dGY4VGV4dEVuY29kZXIgPyBfZW5jb2RlVXRmOE5hdGl2ZSA6IF9lbmNvZGVVdGY4UG9seWZpbGxcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgX2RlY29kZVV0ZjhQb2x5ZmlsbCA9IGJ1ZiA9PiB7XG4gIGxldCByZW1haW5pbmdMZW4gPSBidWYubGVuZ3RoXG4gIGxldCBlbmNvZGVkU3RyaW5nID0gJydcbiAgbGV0IGJ1ZlBvcyA9IDBcbiAgd2hpbGUgKHJlbWFpbmluZ0xlbiA+IDApIHtcbiAgICBjb25zdCBuZXh0TGVuID0gcmVtYWluaW5nTGVuIDwgMTAwMDAgPyByZW1haW5pbmdMZW4gOiAxMDAwMFxuICAgIGNvbnN0IGJ5dGVzID0gYnVmLnN1YmFycmF5KGJ1ZlBvcywgYnVmUG9zICsgbmV4dExlbilcbiAgICBidWZQb3MgKz0gbmV4dExlblxuICAgIC8vIFN0YXJ0aW5nIHdpdGggRVM1LjEgd2UgY2FuIHN1cHBseSBhIGdlbmVyaWMgYXJyYXktbGlrZSBvYmplY3QgYXMgYXJndW1lbnRzXG4gICAgZW5jb2RlZFN0cmluZyArPSBTdHJpbmcuZnJvbUNvZGVQb2ludC5hcHBseShudWxsLCAvKiogQHR5cGUge2FueX0gKi8gKGJ5dGVzKSlcbiAgICByZW1haW5pbmdMZW4gLT0gbmV4dExlblxuICB9XG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGVuY29kZWRTdHJpbmcpKVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGxldCB1dGY4VGV4dERlY29kZXIgPSB0eXBlb2YgVGV4dERlY29kZXIgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IG5ldyBUZXh0RGVjb2RlcigndXRmLTgnLCB7IGZhdGFsOiB0cnVlLCBpZ25vcmVCT006IHRydWUgfSlcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmICh1dGY4VGV4dERlY29kZXIgJiYgdXRmOFRleHREZWNvZGVyLmRlY29kZShuZXcgVWludDhBcnJheSgpKS5sZW5ndGggPT09IDEpIHtcbiAgLy8gU2FmYXJpIGRvZXNuJ3QgaGFuZGxlIEJPTSBjb3JyZWN0bHkuXG4gIC8vIFRoaXMgZml4ZXMgYSBidWcgaW4gU2FmYXJpIDEzLjAuNSB3aGVyZSBpdCBwcm9kdWNlcyBhIEJPTSB0aGUgZmlyc3QgdGltZSBpdCBpcyBjYWxsZWQuXG4gIC8vIHV0ZjhUZXh0RGVjb2Rlci5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSkubGVuZ3RoID09PSAxIG9uIHRoZSBmaXJzdCBjYWxsIGFuZFxuICAvLyB1dGY4VGV4dERlY29kZXIuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpLmxlbmd0aCA9PT0gMSBvbiB0aGUgc2Vjb25kIGNhbGxcbiAgLy8gQW5vdGhlciBpc3N1ZSBpcyB0aGF0IGZyb20gdGhlbiBvbiBubyBCT00gY2hhcnMgYXJlIHJlY29nbml6ZWQgYW55bW9yZVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB1dGY4VGV4dERlY29kZXIgPSBudWxsXG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IF9kZWNvZGVVdGY4TmF0aXZlID0gYnVmID0+IC8qKiBAdHlwZSB7VGV4dERlY29kZXJ9ICovICh1dGY4VGV4dERlY29kZXIpLmRlY29kZShidWYpXG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVVdGY4ID0gdXRmOFRleHREZWNvZGVyID8gX2RlY29kZVV0ZjhOYXRpdmUgOiBfZGVjb2RlVXRmOFBvbHlmaWxsXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgaW5pdGlhbCBzdHJpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBTdGFydGluZyBwb3NpdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHJlbW92ZSBOdW1iZXIgb2YgY2hhcmFjdGVycyB0byByZW1vdmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnNlcnQgTmV3IGNvbnRlbnQgdG8gaW5zZXJ0XG4gKi9cbmV4cG9ydCBjb25zdCBzcGxpY2UgPSAoc3RyLCBpbmRleCwgcmVtb3ZlLCBpbnNlcnQgPSAnJykgPT4gc3RyLnNsaWNlKDAsIGluZGV4KSArIGluc2VydCArIHN0ci5zbGljZShpbmRleCArIHJlbW92ZSlcbiIsIi8qKlxuICogT2Z0ZW4gdXNlZCBjb25kaXRpb25zLlxuICpcbiAqIEBtb2R1bGUgY29uZGl0aW9uc1xuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VHxudWxsfHVuZGVmaW5lZH0gdlxuICogQHJldHVybiB7VHxudWxsfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHVuZGVmaW5lZFRvTnVsbCA9IHYgPT4gdiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHZcbiIsIi8qIGdsb2JhbCBsb2NhbFN0b3JhZ2UsIGFkZEV2ZW50TGlzdGVuZXIgKi9cblxuLyoqXG4gKiBJc29tb3JwaGljIHZhcmlhYmxlIHN0b3JhZ2UuXG4gKlxuICogVXNlcyBMb2NhbFN0b3JhZ2UgaW4gdGhlIGJyb3dzZXIgYW5kIGZhbGxzIGJhY2sgdG8gaW4tbWVtb3J5IHN0b3JhZ2UuXG4gKlxuICogQG1vZHVsZSBzdG9yYWdlXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmNsYXNzIFZhclN0b3JhZ2VQb2x5ZmlsbCB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHthbnl9IG5ld1ZhbHVlXG4gICAqL1xuICBzZXRJdGVtIChrZXksIG5ld1ZhbHVlKSB7XG4gICAgdGhpcy5tYXAuc2V0KGtleSwgbmV3VmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKi9cbiAgZ2V0SXRlbSAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpXG4gIH1cbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHR5cGUge2FueX1cbiAqL1xubGV0IF9sb2NhbFN0b3JhZ2UgPSBuZXcgVmFyU3RvcmFnZVBvbHlmaWxsKClcbmxldCB1c2VQb2x5ZmlsbCA9IHRydWVcblxudHJ5IHtcbiAgLy8gaWYgdGhlIHNhbWUtb3JpZ2luIHJ1bGUgaXMgdmlvbGF0ZWQsIGFjY2Vzc2luZyBsb2NhbFN0b3JhZ2UgbWlnaHQgdGhyb3duIGFuIGVycm9yXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmICh0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSAndW5kZWZpbmVkJykge1xuICAgIF9sb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2VcbiAgICB1c2VQb2x5ZmlsbCA9IGZhbHNlXG4gIH1cbn0gY2F0Y2ggKGUpIHsgfVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBUaGlzIGlzIGJhc2ljYWxseSBsb2NhbFN0b3JhZ2UgaW4gYnJvd3Nlciwgb3IgYSBwb2x5ZmlsbCBpbiBub2RlanNcbiAqL1xuZXhwb3J0IGNvbnN0IHZhclN0b3JhZ2UgPSBfbG9jYWxTdG9yYWdlXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEEgcG9seWZpbGwgZm9yIGBhZGRFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgZXZlbnQgPT4gey4ufSlgIHRoYXQgZG9lcyBub3RoaW5nIGlmIHRoZSBwb2x5ZmlsbCBpcyBiZWluZyB1c2VkLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oeyBrZXk6IHN0cmluZywgbmV3VmFsdWU6IHN0cmluZywgb2xkVmFsdWU6IHN0cmluZyB9KTogdm9pZH0gZXZlbnRIYW5kbGVyXG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IG9uQ2hhbmdlID0gZXZlbnRIYW5kbGVyID0+IHVzZVBvbHlmaWxsIHx8IGFkZEV2ZW50TGlzdGVuZXIoJ3N0b3JhZ2UnLCAvKiogQHR5cGUge2FueX0gKi8gKGV2ZW50SGFuZGxlcikpXG4iLCIvKipcbiAqIElzb21vcnBoaWMgbW9kdWxlIHRvIHdvcmsgYWNjZXNzIHRoZSBlbnZpcm9ubWVudCAocXVlcnkgcGFyYW1zLCBlbnYgdmFyaWFibGVzKS5cbiAqXG4gKiBAbW9kdWxlIG1hcFxuICovXG5cbmltcG9ydCAqIGFzIG1hcCBmcm9tICcuL21hcC5qcydcbmltcG9ydCAqIGFzIHN0cmluZyBmcm9tICcuL3N0cmluZy5qcydcbmltcG9ydCAqIGFzIGNvbmRpdGlvbnMgZnJvbSAnLi9jb25kaXRpb25zLmpzJ1xuaW1wb3J0ICogYXMgc3RvcmFnZSBmcm9tICcuL3N0b3JhZ2UuanMnXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vLyBAdHMtaWdub3JlXG5leHBvcnQgY29uc3QgaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MucmVsZWFzZSAmJiAvbm9kZXxpb1xcLmpzLy50ZXN0KHByb2Nlc3MucmVsZWFzZS5uYW1lKVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAhaXNOb2RlXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGlzTWFjID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgPyAvTWFjLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkgOiBmYWxzZVxuXG4vKipcbiAqIEB0eXBlIHtNYXA8c3RyaW5nLHN0cmluZz59XG4gKi9cbmxldCBwYXJhbXNcbmNvbnN0IGFyZ3MgPSBbXVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3QgY29tcHV0ZVBhcmFtcyA9ICgpID0+IHtcbiAgaWYgKHBhcmFtcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcGFyYW1zID0gbWFwLmNyZWF0ZSgpXG4gICAgICBjb25zdCBwYXJncyA9IHByb2Nlc3MuYXJndlxuICAgICAgbGV0IGN1cnJQYXJhbU5hbWUgPSBudWxsXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwYXJnID0gcGFyZ3NbaV1cbiAgICAgICAgaWYgKHBhcmdbMF0gPT09ICctJykge1xuICAgICAgICAgIGlmIChjdXJyUGFyYW1OYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwYXJhbXMuc2V0KGN1cnJQYXJhbU5hbWUsICcnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyUGFyYW1OYW1lID0gcGFyZ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjdXJyUGFyYW1OYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwYXJhbXMuc2V0KGN1cnJQYXJhbU5hbWUsIHBhcmcpXG4gICAgICAgICAgICBjdXJyUGFyYW1OYW1lID0gbnVsbFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcmdzLnB1c2gocGFyZylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjdXJyUGFyYW1OYW1lICE9PSBudWxsKSB7XG4gICAgICAgIHBhcmFtcy5zZXQoY3VyclBhcmFtTmFtZSwgJycpXG4gICAgICB9XG4gICAgLy8gaW4gUmVhY3ROYXRpdmUgZm9yIGV4YW1wbGUgdGhpcyB3b3VsZCBub3QgYmUgdHJ1ZSAodW5sZXNzIGNvbm5lY3RlZCB0byB0aGUgUmVtb3RlIERlYnVnZ2VyKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnb2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gbWFwLmNyZWF0ZSgpXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIDsobG9jYXRpb24uc2VhcmNoIHx8ICc/Jykuc2xpY2UoMSkuc3BsaXQoJyYnKS5mb3JFYWNoKGt2ID0+IHtcbiAgICAgICAgaWYgKGt2Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGt2LnNwbGl0KCc9JylcbiAgICAgICAgICBwYXJhbXMuc2V0KGAtLSR7c3RyaW5nLmZyb21DYW1lbENhc2Uoa2V5LCAnLScpfWAsIHZhbHVlKVxuICAgICAgICAgIHBhcmFtcy5zZXQoYC0ke3N0cmluZy5mcm9tQ2FtZWxDYXNlKGtleSwgJy0nKX1gLCB2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyYW1zID0gbWFwLmNyZWF0ZSgpXG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJhbXNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBoYXNQYXJhbSA9IG5hbWUgPT4gY29tcHV0ZVBhcmFtcygpLmhhcyhuYW1lKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVmYXVsdFZhbFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGdldFBhcmFtID0gKG5hbWUsIGRlZmF1bHRWYWwpID0+IGNvbXB1dGVQYXJhbXMoKS5nZXQobmFtZSkgfHwgZGVmYXVsdFZhbFxuLy8gZXhwb3J0IGNvbnN0IGdldEFyZ3MgPSBuYW1lID0+IGNvbXB1dGVQYXJhbXMoKSAmJiBhcmdzXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge3N0cmluZ3xudWxsfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGdldFZhcmlhYmxlID0gbmFtZSA9PiBpc05vZGUgPyBjb25kaXRpb25zLnVuZGVmaW5lZFRvTnVsbChwcm9jZXNzLmVudltuYW1lLnRvVXBwZXJDYXNlKCldKSA6IGNvbmRpdGlvbnMudW5kZWZpbmVkVG9OdWxsKHN0b3JhZ2UudmFyU3RvcmFnZS5nZXRJdGVtKG5hbWUpKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtzdHJpbmd8bnVsbH1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldENvbmYgPSBuYW1lID0+IGNvbXB1dGVQYXJhbXMoKS5nZXQoJy0tJyArIG5hbWUpIHx8IGdldFZhcmlhYmxlKG5hbWUpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgaGFzQ29uZiA9IG5hbWUgPT4gaGFzUGFyYW0oJy0tJyArIG5hbWUpIHx8IGdldFZhcmlhYmxlKG5hbWUpICE9PSBudWxsXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgcHJvZHVjdGlvbiA9IGhhc0NvbmYoJ3Byb2R1Y3Rpb24nKVxuIiwiLyoqXG4gKiBFZmZpY2llbnQgc2NoZW1hLWxlc3MgYmluYXJ5IGRlY29kaW5nIHdpdGggc3VwcG9ydCBmb3IgdmFyaWFibGUgbGVuZ3RoIGVuY29kaW5nLlxuICpcbiAqIFVzZSBbbGliMC9kZWNvZGluZ10gd2l0aCBbbGliMC9lbmNvZGluZ10uIEV2ZXJ5IGVuY29kaW5nIGZ1bmN0aW9uIGhhcyBhIGNvcnJlc3BvbmRpbmcgZGVjb2RpbmcgZnVuY3Rpb24uXG4gKlxuICogRW5jb2RlcyBudW1iZXJzIGluIGxpdHRsZS1lbmRpYW4gb3JkZXIgKGxlYXN0IHRvIG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBvcmRlcilcbiAqIGFuZCBpcyBjb21wYXRpYmxlIHdpdGggR29sYW5nJ3MgYmluYXJ5IGVuY29kaW5nIChodHRwczovL2dvbGFuZy5vcmcvcGtnL2VuY29kaW5nL2JpbmFyeS8pXG4gKiB3aGljaCBpcyBhbHNvIHVzZWQgaW4gUHJvdG9jb2wgQnVmZmVycy5cbiAqXG4gKiBgYGBqc1xuICogLy8gZW5jb2Rpbmcgc3RlcFxuICogY29uc3QgZW5jb2RlciA9IG5ldyBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKClcbiAqIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLCAyNTYpXG4gKiBlbmNvZGluZy53cml0ZVZhclN0cmluZyhlbmNvZGVyLCAnSGVsbG8gd29ybGQhJylcbiAqIGNvbnN0IGJ1ZiA9IGVuY29kaW5nLnRvVWludDhBcnJheShlbmNvZGVyKVxuICogYGBgXG4gKlxuICogYGBganNcbiAqIC8vIGRlY29kaW5nIHN0ZXBcbiAqIGNvbnN0IGRlY29kZXIgPSBuZXcgZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihidWYpXG4gKiBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyKSAvLyA9PiAyNTZcbiAqIGRlY29kaW5nLnJlYWRWYXJTdHJpbmcoZGVjb2RlcikgLy8gPT4gJ0hlbGxvIHdvcmxkISdcbiAqIGRlY29kaW5nLmhhc0NvbnRlbnQoZGVjb2RlcikgLy8gPT4gZmFsc2UgLSBhbGwgZGF0YSBpcyByZWFkXG4gKiBgYGBcbiAqXG4gKiBAbW9kdWxlIGRlY29kaW5nXG4gKi9cblxuaW1wb3J0ICogYXMgYnVmZmVyIGZyb20gJy4vYnVmZmVyLmpzJ1xuaW1wb3J0ICogYXMgYmluYXJ5IGZyb20gJy4vYmluYXJ5LmpzJ1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuL21hdGguanMnXG5cbi8qKlxuICogQSBEZWNvZGVyIGhhbmRsZXMgdGhlIGRlY29kaW5nIG9mIGFuIFVpbnQ4QXJyYXkuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWNvZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheSBCaW5hcnkgZGF0YSB0byBkZWNvZGVcbiAgICovXG4gIGNvbnN0cnVjdG9yICh1aW50OEFycmF5KSB7XG4gICAgLyoqXG4gICAgICogRGVjb2RpbmcgdGFyZ2V0LlxuICAgICAqXG4gICAgICogQHR5cGUge1VpbnQ4QXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5hcnIgPSB1aW50OEFycmF5XG4gICAgLyoqXG4gICAgICogQ3VycmVudCBkZWNvZGluZyBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5wb3MgPSAwXG4gIH1cbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdWludDhBcnJheVxuICogQHJldHVybiB7RGVjb2Rlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZURlY29kZXIgPSB1aW50OEFycmF5ID0+IG5ldyBEZWNvZGVyKHVpbnQ4QXJyYXkpXG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBoYXNDb250ZW50ID0gZGVjb2RlciA9PiBkZWNvZGVyLnBvcyAhPT0gZGVjb2Rlci5hcnIubGVuZ3RoXG5cbi8qKlxuICogQ2xvbmUgYSBkZWNvZGVyIGluc3RhbmNlLlxuICogT3B0aW9uYWxseSBzZXQgYSBuZXcgcG9zaXRpb24gcGFyYW1ldGVyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyIFRoZSBkZWNvZGVyIGluc3RhbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gW25ld1Bvc10gRGVmYXVsdHMgdG8gY3VycmVudCBwb3NpdGlvblxuICogQHJldHVybiB7RGVjb2Rlcn0gQSBjbG9uZSBvZiBgZGVjb2RlcmBcbiAqL1xuZXhwb3J0IGNvbnN0IGNsb25lID0gKGRlY29kZXIsIG5ld1BvcyA9IGRlY29kZXIucG9zKSA9PiB7XG4gIGNvbnN0IF9kZWNvZGVyID0gY3JlYXRlRGVjb2RlcihkZWNvZGVyLmFycilcbiAgX2RlY29kZXIucG9zID0gbmV3UG9zXG4gIHJldHVybiBfZGVjb2RlclxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBVaW50OEFycmF5IHZpZXcgb2YgdGhlIG5leHQgYGxlbmAgYnl0ZXMgYW5kIGFkdmFuY2UgdGhlIHBvc2l0aW9uIGJ5IGBsZW5gLlxuICpcbiAqIEltcG9ydGFudDogVGhlIFVpbnQ4QXJyYXkgc3RpbGwgcG9pbnRzIHRvIHRoZSB1bmRlcmx5aW5nIEFycmF5QnVmZmVyLiBNYWtlIHN1cmUgdG8gZGlzY2FyZCB0aGUgcmVzdWx0IGFzIHNvb24gYXMgcG9zc2libGUgdG8gcHJldmVudCBhbnkgbWVtb3J5IGxlYWtzLlxuICogICAgICAgICAgICBVc2UgYGJ1ZmZlci5jb3B5VWludDhBcnJheWAgdG8gY29weSB0aGUgcmVzdWx0IGludG8gYSBuZXcgVWludDhBcnJheS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlciBUaGUgZGVjb2RlciBpbnN0YW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IGxlbiBUaGUgbGVuZ3RoIG9mIGJ5dGVzIHRvIHJlYWRcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVWludDhBcnJheSA9IChkZWNvZGVyLCBsZW4pID0+IHtcbiAgY29uc3QgdmlldyA9IGJ1ZmZlci5jcmVhdGVVaW50OEFycmF5Vmlld0Zyb21BcnJheUJ1ZmZlcihkZWNvZGVyLmFyci5idWZmZXIsIGRlY29kZXIucG9zICsgZGVjb2Rlci5hcnIuYnl0ZU9mZnNldCwgbGVuKVxuICBkZWNvZGVyLnBvcyArPSBsZW5cbiAgcmV0dXJuIHZpZXdcbn1cblxuLyoqXG4gKiBSZWFkIHZhcmlhYmxlIGxlbmd0aCBVaW50OEFycmF5LlxuICpcbiAqIEltcG9ydGFudDogVGhlIFVpbnQ4QXJyYXkgc3RpbGwgcG9pbnRzIHRvIHRoZSB1bmRlcmx5aW5nIEFycmF5QnVmZmVyLiBNYWtlIHN1cmUgdG8gZGlzY2FyZCB0aGUgcmVzdWx0IGFzIHNvb24gYXMgcG9zc2libGUgdG8gcHJldmVudCBhbnkgbWVtb3J5IGxlYWtzLlxuICogICAgICAgICAgICBVc2UgYGJ1ZmZlci5jb3B5VWludDhBcnJheWAgdG8gY29weSB0aGUgcmVzdWx0IGludG8gYSBuZXcgVWludDhBcnJheS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRWYXJVaW50OEFycmF5ID0gZGVjb2RlciA9PiByZWFkVWludDhBcnJheShkZWNvZGVyLCByZWFkVmFyVWludChkZWNvZGVyKSlcblxuLyoqXG4gKiBSZWFkIHRoZSByZXN0IG9mIHRoZSBjb250ZW50IGFzIGFuIEFycmF5QnVmZmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRUYWlsQXNVaW50OEFycmF5ID0gZGVjb2RlciA9PiByZWFkVWludDhBcnJheShkZWNvZGVyLCBkZWNvZGVyLmFyci5sZW5ndGggLSBkZWNvZGVyLnBvcylcblxuLyoqXG4gKiBTa2lwIG9uZSBieXRlLCBqdW1wIHRvIHRoZSBuZXh0IHBvc2l0aW9uLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXIgVGhlIGRlY29kZXIgaW5zdGFuY2VcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG5leHQgcG9zaXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHNraXA4ID0gZGVjb2RlciA9PiBkZWNvZGVyLnBvcysrXG5cbi8qKlxuICogUmVhZCBvbmUgYnl0ZSBhcyB1bnNpZ25lZCBpbnRlZ2VyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXIgVGhlIGRlY29kZXIgaW5zdGFuY2VcbiAqIEByZXR1cm4ge251bWJlcn0gVW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICovXG5leHBvcnQgY29uc3QgcmVhZFVpbnQ4ID0gZGVjb2RlciA9PiBkZWNvZGVyLmFycltkZWNvZGVyLnBvcysrXVxuXG4vKipcbiAqIFJlYWQgMiBieXRlcyBhcyB1bnNpZ25lZCBpbnRlZ2VyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEFuIHVuc2lnbmVkIGludGVnZXIuXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVWludDE2ID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IHVpbnQgPVxuICAgIGRlY29kZXIuYXJyW2RlY29kZXIucG9zXSArXG4gICAgKGRlY29kZXIuYXJyW2RlY29kZXIucG9zICsgMV0gPDwgOClcbiAgZGVjb2Rlci5wb3MgKz0gMlxuICByZXR1cm4gdWludFxufVxuXG4vKipcbiAqIFJlYWQgNCBieXRlcyBhcyB1bnNpZ25lZCBpbnRlZ2VyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEFuIHVuc2lnbmVkIGludGVnZXIuXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVWludDMyID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IHVpbnQgPVxuICAgIChkZWNvZGVyLmFycltkZWNvZGVyLnBvc10gK1xuICAgIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDFdIDw8IDgpICtcbiAgICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MgKyAyXSA8PCAxNikgK1xuICAgIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDNdIDw8IDI0KSkgPj4+IDBcbiAgZGVjb2Rlci5wb3MgKz0gNFxuICByZXR1cm4gdWludFxufVxuXG4vKipcbiAqIFJlYWQgNCBieXRlcyBhcyB1bnNpZ25lZCBpbnRlZ2VyIGluIGJpZyBlbmRpYW4gb3JkZXIuXG4gKiAobW9zdCBzaWduaWZpY2FudCBieXRlIGZpcnN0KVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEFuIHVuc2lnbmVkIGludGVnZXIuXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVWludDMyQmlnRW5kaWFuID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IHVpbnQgPVxuICAgIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDNdICtcbiAgICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3MgKyAyXSA8PCA4KSArXG4gICAgKGRlY29kZXIuYXJyW2RlY29kZXIucG9zICsgMV0gPDwgMTYpICtcbiAgICAoZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3NdIDw8IDI0KSkgPj4+IDBcbiAgZGVjb2Rlci5wb3MgKz0gNFxuICByZXR1cm4gdWludFxufVxuXG4vKipcbiAqIExvb2sgYWhlYWQgd2l0aG91dCBpbmNyZW1lbnRpbmcgdGhlIHBvc2l0aW9uXG4gKiB0byB0aGUgbmV4dCBieXRlIGFuZCByZWFkIGl0IGFzIHVuc2lnbmVkIGludGVnZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge251bWJlcn0gQW4gdW5zaWduZWQgaW50ZWdlci5cbiAqL1xuZXhwb3J0IGNvbnN0IHBlZWtVaW50OCA9IGRlY29kZXIgPT4gZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3NdXG5cbi8qKlxuICogTG9vayBhaGVhZCB3aXRob3V0IGluY3JlbWVudGluZyB0aGUgcG9zaXRpb25cbiAqIHRvIHRoZSBuZXh0IGJ5dGUgYW5kIHJlYWQgaXQgYXMgdW5zaWduZWQgaW50ZWdlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICovXG5leHBvcnQgY29uc3QgcGVla1VpbnQxNiA9IGRlY29kZXIgPT5cbiAgZGVjb2Rlci5hcnJbZGVjb2Rlci5wb3NdICtcbiAgKGRlY29kZXIuYXJyW2RlY29kZXIucG9zICsgMV0gPDwgOClcblxuLyoqXG4gKiBMb29rIGFoZWFkIHdpdGhvdXQgaW5jcmVtZW50aW5nIHRoZSBwb3NpdGlvblxuICogdG8gdGhlIG5leHQgYnl0ZSBhbmQgcmVhZCBpdCBhcyB1bnNpZ25lZCBpbnRlZ2VyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEFuIHVuc2lnbmVkIGludGVnZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBwZWVrVWludDMyID0gZGVjb2RlciA9PiAoXG4gIGRlY29kZXIuYXJyW2RlY29kZXIucG9zXSArXG4gIChkZWNvZGVyLmFycltkZWNvZGVyLnBvcyArIDFdIDw8IDgpICtcbiAgKGRlY29kZXIuYXJyW2RlY29kZXIucG9zICsgMl0gPDwgMTYpICtcbiAgKGRlY29kZXIuYXJyW2RlY29kZXIucG9zICsgM10gPDwgMjQpXG4pID4+PiAwXG5cbi8qKlxuICogUmVhZCB1bnNpZ25lZCBpbnRlZ2VyICgzMmJpdCkgd2l0aCB2YXJpYWJsZSBsZW5ndGguXG4gKiAxLzh0aCBvZiB0aGUgc3RvcmFnZSBpcyB1c2VkIGFzIGVuY29kaW5nIG92ZXJoZWFkLlxuICogICogbnVtYmVycyA8IDJeNyBpcyBzdG9yZWQgaW4gb25lIGJ5dGxlbmd0aFxuICogICogbnVtYmVycyA8IDJeMTQgaXMgc3RvcmVkIGluIHR3byBieWxlbmd0aFxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEFuIHVuc2lnbmVkIGludGVnZXIubGVuZ3RoXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVmFyVWludCA9IGRlY29kZXIgPT4ge1xuICBsZXQgbnVtID0gMFxuICBsZXQgbGVuID0gMFxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IHIgPSBkZWNvZGVyLmFycltkZWNvZGVyLnBvcysrXVxuICAgIG51bSA9IG51bSB8ICgociAmIGJpbmFyeS5CSVRTNykgPDwgbGVuKVxuICAgIGxlbiArPSA3XG4gICAgaWYgKHIgPCBiaW5hcnkuQklUOCkge1xuICAgICAgcmV0dXJuIG51bSA+Pj4gMCAvLyByZXR1cm4gdW5zaWduZWQgbnVtYmVyIVxuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAobGVuID4gNTMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW50ZWdlciBvdXQgb2YgcmFuZ2UhJylcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZWFkIHNpZ25lZCBpbnRlZ2VyICgzMmJpdCkgd2l0aCB2YXJpYWJsZSBsZW5ndGguXG4gKiAxLzh0aCBvZiB0aGUgc3RvcmFnZSBpcyB1c2VkIGFzIGVuY29kaW5nIG92ZXJoZWFkLlxuICogICogbnVtYmVycyA8IDJeNyBpcyBzdG9yZWQgaW4gb25lIGJ5dGxlbmd0aFxuICogICogbnVtYmVycyA8IDJeMTQgaXMgc3RvcmVkIGluIHR3byBieWxlbmd0aFxuICogQHRvZG8gVGhpcyBzaG91bGQgcHJvYmFibHkgY3JlYXRlIHRoZSBpbnZlcnNlIH5udW0gaWYgbnVtYmVyIGlzIG5lZ2F0aXZlIC0gYnV0IHRoaXMgd291bGQgYmUgYSBicmVha2luZyBjaGFuZ2UuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge251bWJlcn0gQW4gdW5zaWduZWQgaW50ZWdlci5sZW5ndGhcbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRWYXJJbnQgPSBkZWNvZGVyID0+IHtcbiAgbGV0IHIgPSBkZWNvZGVyLmFycltkZWNvZGVyLnBvcysrXVxuICBsZXQgbnVtID0gciAmIGJpbmFyeS5CSVRTNlxuICBsZXQgbGVuID0gNlxuICBjb25zdCBzaWduID0gKHIgJiBiaW5hcnkuQklUNykgPiAwID8gLTEgOiAxXG4gIGlmICgociAmIGJpbmFyeS5CSVQ4KSA9PT0gMCkge1xuICAgIC8vIGRvbid0IGNvbnRpbnVlIHJlYWRpbmdcbiAgICByZXR1cm4gc2lnbiAqIG51bVxuICB9XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgciA9IGRlY29kZXIuYXJyW2RlY29kZXIucG9zKytdXG4gICAgbnVtID0gbnVtIHwgKChyICYgYmluYXJ5LkJJVFM3KSA8PCBsZW4pXG4gICAgbGVuICs9IDdcbiAgICBpZiAociA8IGJpbmFyeS5CSVQ4KSB7XG4gICAgICByZXR1cm4gc2lnbiAqIChudW0gPj4+IDApXG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChsZW4gPiA1Mykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnRlZ2VyIG91dCBvZiByYW5nZSEnKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIExvb2sgYWhlYWQgYW5kIHJlYWQgdmFyVWludCB3aXRob3V0IGluY3JlbWVudGluZyBwb3NpdGlvblxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBwZWVrVmFyVWludCA9IGRlY29kZXIgPT4ge1xuICBjb25zdCBwb3MgPSBkZWNvZGVyLnBvc1xuICBjb25zdCBzID0gcmVhZFZhclVpbnQoZGVjb2RlcilcbiAgZGVjb2Rlci5wb3MgPSBwb3NcbiAgcmV0dXJuIHNcbn1cblxuLyoqXG4gKiBMb29rIGFoZWFkIGFuZCByZWFkIHZhclVpbnQgd2l0aG91dCBpbmNyZW1lbnRpbmcgcG9zaXRpb25cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgcGVla1ZhckludCA9IGRlY29kZXIgPT4ge1xuICBjb25zdCBwb3MgPSBkZWNvZGVyLnBvc1xuICBjb25zdCBzID0gcmVhZFZhckludChkZWNvZGVyKVxuICBkZWNvZGVyLnBvcyA9IHBvc1xuICByZXR1cm4gc1xufVxuXG4vKipcbiAqIFJlYWQgc3RyaW5nIG9mIHZhcmlhYmxlIGxlbmd0aFxuICogKiB2YXJVaW50IGlzIHVzZWQgdG8gc3RvcmUgdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nXG4gKlxuICogVHJhbnNmb3JtaW5nIHV0ZjggdG8gYSBzdHJpbmcgaXMgcHJldHR5IGV4cGVuc2l2ZS4gVGhlIGNvZGUgcGVyZm9ybXMgMTB4IGJldHRlclxuICogd2hlbiBTdHJpbmcuZnJvbUNvZGVQb2ludCBpcyBmZWQgd2l0aCBhbGwgY2hhcmFjdGVycyBhcyBhcmd1bWVudHMuXG4gKiBCdXQgbW9zdCBlbnZpcm9ubWVudHMgaGF2ZSBhIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyBwZXIgZnVuY3Rpb25zLlxuICogRm9yIGVmZmllbmN5IHJlYXNvbnMgd2UgYXBwbHkgYSBtYXhpbXVtIG9mIDEwMDAwIGNoYXJhY3RlcnMgYXQgb25jZS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7U3RyaW5nfSBUaGUgcmVhZCBTdHJpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkVmFyU3RyaW5nID0gZGVjb2RlciA9PiB7XG4gIGxldCByZW1haW5pbmdMZW4gPSByZWFkVmFyVWludChkZWNvZGVyKVxuICBpZiAocmVtYWluaW5nTGVuID09PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH0gZWxzZSB7XG4gICAgbGV0IGVuY29kZWRTdHJpbmcgPSBTdHJpbmcuZnJvbUNvZGVQb2ludChyZWFkVWludDgoZGVjb2RlcikpIC8vIHJlbWVtYmVyIHRvIGRlY3JlYXNlIHJlbWFpbmluZ0xlblxuICAgIGlmICgtLXJlbWFpbmluZ0xlbiA8IDEwMCkgeyAvLyBkbyBub3QgY3JlYXRlIGEgVWludDhBcnJheSBmb3Igc21hbGwgc3RyaW5nc1xuICAgICAgd2hpbGUgKHJlbWFpbmluZ0xlbi0tKSB7XG4gICAgICAgIGVuY29kZWRTdHJpbmcgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQocmVhZFVpbnQ4KGRlY29kZXIpKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAocmVtYWluaW5nTGVuID4gMCkge1xuICAgICAgICBjb25zdCBuZXh0TGVuID0gcmVtYWluaW5nTGVuIDwgMTAwMDAgPyByZW1haW5pbmdMZW4gOiAxMDAwMFxuICAgICAgICAvLyB0aGlzIGlzIGRhbmdlcm91cywgd2UgY3JlYXRlIGEgZnJlc2ggYXJyYXkgdmlldyBmcm9tIHRoZSBleGlzdGluZyBidWZmZXJcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBkZWNvZGVyLmFyci5zdWJhcnJheShkZWNvZGVyLnBvcywgZGVjb2Rlci5wb3MgKyBuZXh0TGVuKVxuICAgICAgICBkZWNvZGVyLnBvcyArPSBuZXh0TGVuXG4gICAgICAgIC8vIFN0YXJ0aW5nIHdpdGggRVM1LjEgd2UgY2FuIHN1cHBseSBhIGdlbmVyaWMgYXJyYXktbGlrZSBvYmplY3QgYXMgYXJndW1lbnRzXG4gICAgICAgIGVuY29kZWRTdHJpbmcgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQuYXBwbHkobnVsbCwgLyoqIEB0eXBlIHthbnl9ICovIChieXRlcykpXG4gICAgICAgIHJlbWFpbmluZ0xlbiAtPSBuZXh0TGVuXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGVuY29kZWRTdHJpbmcpKVxuICB9XG59XG5cbi8qKlxuICogTG9vayBhaGVhZCBhbmQgcmVhZCB2YXJTdHJpbmcgd2l0aG91dCBpbmNyZW1lbnRpbmcgcG9zaXRpb25cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgcGVla1ZhclN0cmluZyA9IGRlY29kZXIgPT4ge1xuICBjb25zdCBwb3MgPSBkZWNvZGVyLnBvc1xuICBjb25zdCBzID0gcmVhZFZhclN0cmluZyhkZWNvZGVyKVxuICBkZWNvZGVyLnBvcyA9IHBvc1xuICByZXR1cm4gc1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICogQHJldHVybiB7RGF0YVZpZXd9XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkRnJvbURhdGFWaWV3ID0gKGRlY29kZXIsIGxlbikgPT4ge1xuICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhkZWNvZGVyLmFyci5idWZmZXIsIGRlY29kZXIuYXJyLmJ5dGVPZmZzZXQgKyBkZWNvZGVyLnBvcywgbGVuKVxuICBkZWNvZGVyLnBvcyArPSBsZW5cbiAgcmV0dXJuIGR2XG59XG5cbi8qKlxuICogQHBhcmFtIHtEZWNvZGVyfSBkZWNvZGVyXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkRmxvYXQzMiA9IGRlY29kZXIgPT4gcmVhZEZyb21EYXRhVmlldyhkZWNvZGVyLCA0KS5nZXRGbG9hdDMyKDAsIGZhbHNlKVxuXG4vKipcbiAqIEBwYXJhbSB7RGVjb2Rlcn0gZGVjb2RlclxuICovXG5leHBvcnQgY29uc3QgcmVhZEZsb2F0NjQgPSBkZWNvZGVyID0+IHJlYWRGcm9tRGF0YVZpZXcoZGVjb2RlciwgOCkuZ2V0RmxvYXQ2NCgwLCBmYWxzZSlcblxuLyoqXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRCaWdJbnQ2NCA9IGRlY29kZXIgPT4gLyoqIEB0eXBlIHthbnl9ICovIChyZWFkRnJvbURhdGFWaWV3KGRlY29kZXIsIDgpKS5nZXRCaWdJbnQ2NCgwLCBmYWxzZSlcblxuLyoqXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRCaWdVaW50NjQgPSBkZWNvZGVyID0+IC8qKiBAdHlwZSB7YW55fSAqLyAocmVhZEZyb21EYXRhVmlldyhkZWNvZGVyLCA4KSkuZ2V0QmlnVWludDY0KDAsIGZhbHNlKVxuXG4vKipcbiAqIEB0eXBlIHtBcnJheTxmdW5jdGlvbihEZWNvZGVyKTphbnk+fVxuICovXG5jb25zdCByZWFkQW55TG9va3VwVGFibGUgPSBbXG4gIGRlY29kZXIgPT4gdW5kZWZpbmVkLCAvLyBDQVNFIDEyNzogdW5kZWZpbmVkXG4gIGRlY29kZXIgPT4gbnVsbCwgLy8gQ0FTRSAxMjY6IG51bGxcbiAgcmVhZFZhckludCwgLy8gQ0FTRSAxMjU6IGludGVnZXJcbiAgcmVhZEZsb2F0MzIsIC8vIENBU0UgMTI0OiBmbG9hdDMyXG4gIHJlYWRGbG9hdDY0LCAvLyBDQVNFIDEyMzogZmxvYXQ2NFxuICByZWFkQmlnSW50NjQsIC8vIENBU0UgMTIyOiBiaWdpbnRcbiAgZGVjb2RlciA9PiBmYWxzZSwgLy8gQ0FTRSAxMjE6IGJvb2xlYW4gKGZhbHNlKVxuICBkZWNvZGVyID0+IHRydWUsIC8vIENBU0UgMTIwOiBib29sZWFuICh0cnVlKVxuICByZWFkVmFyU3RyaW5nLCAvLyBDQVNFIDExOTogc3RyaW5nXG4gIGRlY29kZXIgPT4geyAvLyBDQVNFIDExODogb2JqZWN0PHN0cmluZyxhbnk+XG4gICAgY29uc3QgbGVuID0gcmVhZFZhclVpbnQoZGVjb2RlcilcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxhbnk+fVxuICAgICAqL1xuICAgIGNvbnN0IG9iaiA9IHt9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gcmVhZFZhclN0cmluZyhkZWNvZGVyKVxuICAgICAgb2JqW2tleV0gPSByZWFkQW55KGRlY29kZXIpXG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfSxcbiAgZGVjb2RlciA9PiB7IC8vIENBU0UgMTE3OiBhcnJheTxhbnk+XG4gICAgY29uc3QgbGVuID0gcmVhZFZhclVpbnQoZGVjb2RlcilcbiAgICBjb25zdCBhcnIgPSBbXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyci5wdXNoKHJlYWRBbnkoZGVjb2RlcikpXG4gICAgfVxuICAgIHJldHVybiBhcnJcbiAgfSxcbiAgcmVhZFZhclVpbnQ4QXJyYXkgLy8gQ0FTRSAxMTY6IFVpbnQ4QXJyYXlcbl1cblxuLyoqXG4gKiBAcGFyYW0ge0RlY29kZXJ9IGRlY29kZXJcbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRBbnkgPSBkZWNvZGVyID0+IHJlYWRBbnlMb29rdXBUYWJsZVsxMjcgLSByZWFkVWludDgoZGVjb2RlcildKGRlY29kZXIpXG5cbi8qKlxuICogVCBtdXN0IG5vdCBiZSBudWxsLlxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBjbGFzcyBSbGVEZWNvZGVyIGV4dGVuZHMgRGVjb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAgICogQHBhcmFtIHtmdW5jdGlvbihEZWNvZGVyKTpUfSByZWFkZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yICh1aW50OEFycmF5LCByZWFkZXIpIHtcbiAgICBzdXBlcih1aW50OEFycmF5KVxuICAgIC8qKlxuICAgICAqIFRoZSByZWFkZXJcbiAgICAgKi9cbiAgICB0aGlzLnJlYWRlciA9IHJlYWRlclxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgc3RhdGVcbiAgICAgKiBAdHlwZSB7VHxudWxsfVxuICAgICAqL1xuICAgIHRoaXMucyA9IG51bGxcbiAgICB0aGlzLmNvdW50ID0gMFxuICB9XG5cbiAgcmVhZCAoKSB7XG4gICAgaWYgKHRoaXMuY291bnQgPT09IDApIHtcbiAgICAgIHRoaXMucyA9IHRoaXMucmVhZGVyKHRoaXMpXG4gICAgICBpZiAoaGFzQ29udGVudCh0aGlzKSkge1xuICAgICAgICB0aGlzLmNvdW50ID0gcmVhZFZhclVpbnQodGhpcykgKyAxIC8vIHNlZSBlbmNvZGVyIGltcGxlbWVudGF0aW9uIGZvciB0aGUgcmVhc29uIHdoeSB0aGlzIGlzIGluY3JlbWVudGVkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvdW50ID0gLTEgLy8gcmVhZCB0aGUgY3VycmVudCB2YWx1ZSBmb3JldmVyXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuY291bnQtLVxuICAgIHJldHVybiAvKiogQHR5cGUge1R9ICovICh0aGlzLnMpXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludERpZmZEZWNvZGVyIGV4dGVuZHMgRGVjb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gICAqL1xuICBjb25zdHJ1Y3RvciAodWludDhBcnJheSwgc3RhcnQpIHtcbiAgICBzdXBlcih1aW50OEFycmF5KVxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgc3RhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IHN0YXJ0XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgcmVhZCAoKSB7XG4gICAgdGhpcy5zICs9IHJlYWRWYXJJbnQodGhpcylcbiAgICByZXR1cm4gdGhpcy5zXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJsZUludERpZmZEZWNvZGVyIGV4dGVuZHMgRGVjb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gICAqL1xuICBjb25zdHJ1Y3RvciAodWludDhBcnJheSwgc3RhcnQpIHtcbiAgICBzdXBlcih1aW50OEFycmF5KVxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgc3RhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IHN0YXJ0XG4gICAgdGhpcy5jb3VudCA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByZWFkICgpIHtcbiAgICBpZiAodGhpcy5jb3VudCA9PT0gMCkge1xuICAgICAgdGhpcy5zICs9IHJlYWRWYXJJbnQodGhpcylcbiAgICAgIGlmIChoYXNDb250ZW50KHRoaXMpKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSByZWFkVmFyVWludCh0aGlzKSArIDEgLy8gc2VlIGVuY29kZXIgaW1wbGVtZW50YXRpb24gZm9yIHRoZSByZWFzb24gd2h5IHRoaXMgaXMgaW5jcmVtZW50ZWRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY291bnQgPSAtMSAvLyByZWFkIHRoZSBjdXJyZW50IHZhbHVlIGZvcmV2ZXJcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb3VudC0tXG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAodGhpcy5zKVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVaW50T3B0UmxlRGVjb2RlciBleHRlbmRzIERlY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gICAqL1xuICBjb25zdHJ1Y3RvciAodWludDhBcnJheSkge1xuICAgIHN1cGVyKHVpbnQ4QXJyYXkpXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSAwXG4gICAgdGhpcy5jb3VudCA9IDBcbiAgfVxuXG4gIHJlYWQgKCkge1xuICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICB0aGlzLnMgPSByZWFkVmFySW50KHRoaXMpXG4gICAgICAvLyBpZiB0aGUgc2lnbiBpcyBuZWdhdGl2ZSwgd2UgcmVhZCB0aGUgY291bnQgdG9vLCBvdGhlcndpc2UgY291bnQgaXMgMVxuICAgICAgY29uc3QgaXNOZWdhdGl2ZSA9IG1hdGguaXNOZWdhdGl2ZVplcm8odGhpcy5zKVxuICAgICAgdGhpcy5jb3VudCA9IDFcbiAgICAgIGlmIChpc05lZ2F0aXZlKSB7XG4gICAgICAgIHRoaXMucyA9IC10aGlzLnNcbiAgICAgICAgdGhpcy5jb3VudCA9IHJlYWRWYXJVaW50KHRoaXMpICsgMlxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNvdW50LS1cbiAgICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovICh0aGlzLnMpXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEluY1VpbnRPcHRSbGVEZWNvZGVyIGV4dGVuZHMgRGVjb2RlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAgICovXG4gIGNvbnN0cnVjdG9yICh1aW50OEFycmF5KSB7XG4gICAgc3VwZXIodWludDhBcnJheSlcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IDBcbiAgICB0aGlzLmNvdW50ID0gMFxuICB9XG5cbiAgcmVhZCAoKSB7XG4gICAgaWYgKHRoaXMuY291bnQgPT09IDApIHtcbiAgICAgIHRoaXMucyA9IHJlYWRWYXJJbnQodGhpcylcbiAgICAgIC8vIGlmIHRoZSBzaWduIGlzIG5lZ2F0aXZlLCB3ZSByZWFkIHRoZSBjb3VudCB0b28sIG90aGVyd2lzZSBjb3VudCBpcyAxXG4gICAgICBjb25zdCBpc05lZ2F0aXZlID0gbWF0aC5pc05lZ2F0aXZlWmVybyh0aGlzLnMpXG4gICAgICB0aGlzLmNvdW50ID0gMVxuICAgICAgaWYgKGlzTmVnYXRpdmUpIHtcbiAgICAgICAgdGhpcy5zID0gLXRoaXMuc1xuICAgICAgICB0aGlzLmNvdW50ID0gcmVhZFZhclVpbnQodGhpcykgKyAyXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuY291bnQtLVxuICAgIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKHRoaXMucysrKVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnREaWZmT3B0UmxlRGVjb2RlciBleHRlbmRzIERlY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gICAqL1xuICBjb25zdHJ1Y3RvciAodWludDhBcnJheSkge1xuICAgIHN1cGVyKHVpbnQ4QXJyYXkpXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSAwXG4gICAgdGhpcy5jb3VudCA9IDBcbiAgICB0aGlzLmRpZmYgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgcmVhZCAoKSB7XG4gICAgaWYgKHRoaXMuY291bnQgPT09IDApIHtcbiAgICAgIGNvbnN0IGRpZmYgPSByZWFkVmFySW50KHRoaXMpXG4gICAgICAvLyBpZiB0aGUgZmlyc3QgYml0IGlzIHNldCwgd2UgcmVhZCBtb3JlIGRhdGFcbiAgICAgIGNvbnN0IGhhc0NvdW50ID0gZGlmZiAmIDFcbiAgICAgIHRoaXMuZGlmZiA9IGRpZmYgPj4gMVxuICAgICAgdGhpcy5jb3VudCA9IDFcbiAgICAgIGlmIChoYXNDb3VudCkge1xuICAgICAgICB0aGlzLmNvdW50ID0gcmVhZFZhclVpbnQodGhpcykgKyAyXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucyArPSB0aGlzLmRpZmZcbiAgICB0aGlzLmNvdW50LS1cbiAgICByZXR1cm4gdGhpcy5zXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0cmluZ0RlY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gICAqL1xuICBjb25zdHJ1Y3RvciAodWludDhBcnJheSkge1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBVaW50T3B0UmxlRGVjb2Rlcih1aW50OEFycmF5KVxuICAgIHRoaXMuc3RyID0gcmVhZFZhclN0cmluZyh0aGlzLmRlY29kZXIpXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnNwb3MgPSAwXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgcmVhZCAoKSB7XG4gICAgY29uc3QgZW5kID0gdGhpcy5zcG9zICsgdGhpcy5kZWNvZGVyLnJlYWQoKVxuICAgIGNvbnN0IHJlcyA9IHRoaXMuc3RyLnNsaWNlKHRoaXMuc3BvcywgZW5kKVxuICAgIHRoaXMuc3BvcyA9IGVuZFxuICAgIHJldHVybiByZXNcbiAgfVxufVxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogQmluYXJ5IGRhdGEgY29uc3RhbnRzLlxuICpcbiAqIEBtb2R1bGUgYmluYXJ5XG4gKi9cblxuLyoqXG4gKiBuLXRoIGJpdCBhY3RpdmF0ZWQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJJVDEgPSAxXG5leHBvcnQgY29uc3QgQklUMiA9IDJcbmV4cG9ydCBjb25zdCBCSVQzID0gNFxuZXhwb3J0IGNvbnN0IEJJVDQgPSA4XG5leHBvcnQgY29uc3QgQklUNSA9IDE2XG5leHBvcnQgY29uc3QgQklUNiA9IDMyXG5leHBvcnQgY29uc3QgQklUNyA9IDY0XG5leHBvcnQgY29uc3QgQklUOCA9IDEyOFxuZXhwb3J0IGNvbnN0IEJJVDkgPSAyNTZcbmV4cG9ydCBjb25zdCBCSVQxMCA9IDUxMlxuZXhwb3J0IGNvbnN0IEJJVDExID0gMTAyNFxuZXhwb3J0IGNvbnN0IEJJVDEyID0gMjA0OFxuZXhwb3J0IGNvbnN0IEJJVDEzID0gNDA5NlxuZXhwb3J0IGNvbnN0IEJJVDE0ID0gODE5MlxuZXhwb3J0IGNvbnN0IEJJVDE1ID0gMTYzODRcbmV4cG9ydCBjb25zdCBCSVQxNiA9IDMyNzY4XG5leHBvcnQgY29uc3QgQklUMTcgPSA2NTUzNlxuZXhwb3J0IGNvbnN0IEJJVDE4ID0gMSA8PCAxN1xuZXhwb3J0IGNvbnN0IEJJVDE5ID0gMSA8PCAxOFxuZXhwb3J0IGNvbnN0IEJJVDIwID0gMSA8PCAxOVxuZXhwb3J0IGNvbnN0IEJJVDIxID0gMSA8PCAyMFxuZXhwb3J0IGNvbnN0IEJJVDIyID0gMSA8PCAyMVxuZXhwb3J0IGNvbnN0IEJJVDIzID0gMSA8PCAyMlxuZXhwb3J0IGNvbnN0IEJJVDI0ID0gMSA8PCAyM1xuZXhwb3J0IGNvbnN0IEJJVDI1ID0gMSA8PCAyNFxuZXhwb3J0IGNvbnN0IEJJVDI2ID0gMSA8PCAyNVxuZXhwb3J0IGNvbnN0IEJJVDI3ID0gMSA8PCAyNlxuZXhwb3J0IGNvbnN0IEJJVDI4ID0gMSA8PCAyN1xuZXhwb3J0IGNvbnN0IEJJVDI5ID0gMSA8PCAyOFxuZXhwb3J0IGNvbnN0IEJJVDMwID0gMSA8PCAyOVxuZXhwb3J0IGNvbnN0IEJJVDMxID0gMSA8PCAzMFxuZXhwb3J0IGNvbnN0IEJJVDMyID0gMSA8PCAzMVxuXG4vKipcbiAqIEZpcnN0IG4gYml0cyBhY3RpdmF0ZWQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJJVFMwID0gMFxuZXhwb3J0IGNvbnN0IEJJVFMxID0gMVxuZXhwb3J0IGNvbnN0IEJJVFMyID0gM1xuZXhwb3J0IGNvbnN0IEJJVFMzID0gN1xuZXhwb3J0IGNvbnN0IEJJVFM0ID0gMTVcbmV4cG9ydCBjb25zdCBCSVRTNSA9IDMxXG5leHBvcnQgY29uc3QgQklUUzYgPSA2M1xuZXhwb3J0IGNvbnN0IEJJVFM3ID0gMTI3XG5leHBvcnQgY29uc3QgQklUUzggPSAyNTVcbmV4cG9ydCBjb25zdCBCSVRTOSA9IDUxMVxuZXhwb3J0IGNvbnN0IEJJVFMxMCA9IDEwMjNcbmV4cG9ydCBjb25zdCBCSVRTMTEgPSAyMDQ3XG5leHBvcnQgY29uc3QgQklUUzEyID0gNDA5NVxuZXhwb3J0IGNvbnN0IEJJVFMxMyA9IDgxOTFcbmV4cG9ydCBjb25zdCBCSVRTMTQgPSAxNjM4M1xuZXhwb3J0IGNvbnN0IEJJVFMxNSA9IDMyNzY3XG5leHBvcnQgY29uc3QgQklUUzE2ID0gNjU1MzVcbmV4cG9ydCBjb25zdCBCSVRTMTcgPSBCSVQxOCAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMTggPSBCSVQxOSAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMTkgPSBCSVQyMCAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMjAgPSBCSVQyMSAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMjEgPSBCSVQyMiAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMjIgPSBCSVQyMyAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMjMgPSBCSVQyNCAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMjQgPSBCSVQyNSAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMjUgPSBCSVQyNiAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMjYgPSBCSVQyNyAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMjcgPSBCSVQyOCAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMjggPSBCSVQyOSAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMjkgPSBCSVQzMCAtIDFcbmV4cG9ydCBjb25zdCBCSVRTMzAgPSBCSVQzMSAtIDFcbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJJVFMzMSA9IDB4N0ZGRkZGRkZcbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEJJVFMzMiA9IDB4RkZGRkZGRkZcbiIsIi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbnMgdG8gd29yayB3aXRoIGJ1ZmZlcnMgKFVpbnQ4QXJyYXkpLlxuICpcbiAqIEBtb2R1bGUgYnVmZmVyXG4gKi9cblxuaW1wb3J0ICogYXMgc3RyaW5nIGZyb20gJy4vc3RyaW5nLmpzJ1xuaW1wb3J0ICogYXMgZW52IGZyb20gJy4vZW52aXJvbm1lbnQuanMnXG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICcuL2VuY29kaW5nLmpzJ1xuaW1wb3J0ICogYXMgZGVjb2RpbmcgZnJvbSAnLi9kZWNvZGluZy5qcydcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVVaW50OEFycmF5RnJvbUxlbiA9IGxlbiA9PiBuZXcgVWludDhBcnJheShsZW4pXG5cbi8qKlxuICogQ3JlYXRlIFVpbnQ4QXJyYXkgd2l0aCBpbml0aWFsIGNvbnRlbnQgZnJvbSBidWZmZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBidWZmZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVVaW50OEFycmF5Vmlld0Zyb21BcnJheUJ1ZmZlciA9IChidWZmZXIsIGJ5dGVPZmZzZXQsIGxlbmd0aCkgPT4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpXG5cbi8qKlxuICogQ3JlYXRlIFVpbnQ4QXJyYXkgd2l0aCBpbml0aWFsIGNvbnRlbnQgZnJvbSBidWZmZXJcbiAqXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBidWZmZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVVpbnQ4QXJyYXlGcm9tQXJyYXlCdWZmZXIgPSBidWZmZXIgPT4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ5dGVzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmNvbnN0IHRvQmFzZTY0QnJvd3NlciA9IGJ5dGVzID0+IHtcbiAgbGV0IHMgPSAnJ1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgIHMgKz0gc3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSlcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuIGJ0b2Eocylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ5dGVzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmNvbnN0IHRvQmFzZTY0Tm9kZSA9IGJ5dGVzID0+IEJ1ZmZlci5mcm9tKGJ5dGVzLmJ1ZmZlciwgYnl0ZXMuYnl0ZU9mZnNldCwgYnl0ZXMuYnl0ZUxlbmd0aCkudG9TdHJpbmcoJ2Jhc2U2NCcpXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5jb25zdCBmcm9tQmFzZTY0QnJvd3NlciA9IHMgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY29uc3QgYSA9IGF0b2IocylcbiAgY29uc3QgYnl0ZXMgPSBjcmVhdGVVaW50OEFycmF5RnJvbUxlbihhLmxlbmd0aClcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgYnl0ZXNbaV0gPSBhLmNoYXJDb2RlQXQoaSlcbiAgfVxuICByZXR1cm4gYnl0ZXNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICovXG5jb25zdCBmcm9tQmFzZTY0Tm9kZSA9IHMgPT4ge1xuICBjb25zdCBidWYgPSBCdWZmZXIuZnJvbShzLCAnYmFzZTY0JylcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1Zi5idWZmZXIsIGJ1Zi5ieXRlT2Zmc2V0LCBidWYuYnl0ZUxlbmd0aClcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCB0b0Jhc2U2NCA9IGVudi5pc0Jyb3dzZXIgPyB0b0Jhc2U2NEJyb3dzZXIgOiB0b0Jhc2U2NE5vZGVcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBmcm9tQmFzZTY0ID0gZW52LmlzQnJvd3NlciA/IGZyb21CYXNlNjRCcm93c2VyIDogZnJvbUJhc2U2NE5vZGVcblxuLyoqXG4gKiBDb3B5IHRoZSBjb250ZW50IG9mIGFuIFVpbnQ4QXJyYXkgdmlldyB0byBhIG5ldyBBcnJheUJ1ZmZlci5cbiAqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCBjb3B5VWludDhBcnJheSA9IHVpbnQ4QXJyYXkgPT4ge1xuICBjb25zdCBuZXdCdWYgPSBjcmVhdGVVaW50OEFycmF5RnJvbUxlbih1aW50OEFycmF5LmJ5dGVMZW5ndGgpXG4gIG5ld0J1Zi5zZXQodWludDhBcnJheSlcbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKipcbiAqIEVuY29kZSBhbnl0aGluZyBhcyBhIFVJbnQ4QXJyYXkuIEl0J3MgYSBwdW4gb24gdHlwZXNjcmlwdHMncyBgYW55YCB0eXBlLlxuICogU2VlIGVuY29kaW5nLndyaXRlQW55IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEBwYXJhbSB7YW55fSBkYXRhXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5leHBvcnQgY29uc3QgZW5jb2RlQW55ID0gZGF0YSA9PiB7XG4gIGNvbnN0IGVuY29kZXIgPSBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKClcbiAgZW5jb2Rpbmcud3JpdGVBbnkoZW5jb2RlciwgZGF0YSlcbiAgcmV0dXJuIGVuY29kaW5nLnRvVWludDhBcnJheShlbmNvZGVyKVxufVxuXG4vKipcbiAqIERlY29kZSBhbiBhbnktZW5jb2RlZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZlxuICogQHJldHVybiB7YW55fVxuICovXG5leHBvcnQgY29uc3QgZGVjb2RlQW55ID0gYnVmID0+IGRlY29kaW5nLnJlYWRBbnkoZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihidWYpKVxuIiwiLyoqXG4gKiBVdGlsaXR5IGhlbHBlcnMgZm9yIHdvcmtpbmcgd2l0aCBudW1iZXJzLlxuICpcbiAqIEBtb2R1bGUgbnVtYmVyXG4gKi9cblxuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuL21hdGguanMnXG5pbXBvcnQgKiBhcyBiaW5hcnkgZnJvbSAnLi9iaW5hcnkuanMnXG5cbmV4cG9ydCBjb25zdCBNQVhfU0FGRV9JTlRFR0VSID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbmV4cG9ydCBjb25zdCBNSU5fU0FGRV9JTlRFR0VSID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcblxuZXhwb3J0IGNvbnN0IExPV0VTVF9JTlQzMiA9IDEgPDwgMzFcbi8qKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IEhJR0hFU1RfSU5UMzIgPSBiaW5hcnkuQklUUzMxXG5cbi8qKlxuICogQG1vZHVsZSBudW1iZXJcbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGlzSW50ZWdlciA9IE51bWJlci5pc0ludGVnZXIgfHwgKG51bSA9PiB0eXBlb2YgbnVtID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZShudW0pICYmIG1hdGguZmxvb3IobnVtKSA9PT0gbnVtKVxuZXhwb3J0IGNvbnN0IGlzTmFOID0gTnVtYmVyLmlzTmFOXG5leHBvcnQgY29uc3QgcGFyc2VJbnQgPSBOdW1iZXIucGFyc2VJbnRcbiIsIi8qKlxuICogRWZmaWNpZW50IHNjaGVtYS1sZXNzIGJpbmFyeSBlbmNvZGluZyB3aXRoIHN1cHBvcnQgZm9yIHZhcmlhYmxlIGxlbmd0aCBlbmNvZGluZy5cbiAqXG4gKiBVc2UgW2xpYjAvZW5jb2RpbmddIHdpdGggW2xpYjAvZGVjb2RpbmddLiBFdmVyeSBlbmNvZGluZyBmdW5jdGlvbiBoYXMgYSBjb3JyZXNwb25kaW5nIGRlY29kaW5nIGZ1bmN0aW9uLlxuICpcbiAqIEVuY29kZXMgbnVtYmVycyBpbiBsaXR0bGUtZW5kaWFuIG9yZGVyIChsZWFzdCB0byBtb3N0IHNpZ25pZmljYW50IGJ5dGUgb3JkZXIpXG4gKiBhbmQgaXMgY29tcGF0aWJsZSB3aXRoIEdvbGFuZydzIGJpbmFyeSBlbmNvZGluZyAoaHR0cHM6Ly9nb2xhbmcub3JnL3BrZy9lbmNvZGluZy9iaW5hcnkvKVxuICogd2hpY2ggaXMgYWxzbyB1c2VkIGluIFByb3RvY29sIEJ1ZmZlcnMuXG4gKlxuICogYGBganNcbiAqIC8vIGVuY29kaW5nIHN0ZXBcbiAqIGNvbnN0IGVuY29kZXIgPSBuZXcgZW5jb2RpbmcuY3JlYXRlRW5jb2RlcigpXG4gKiBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2RlciwgMjU2KVxuICogZW5jb2Rpbmcud3JpdGVWYXJTdHJpbmcoZW5jb2RlciwgJ0hlbGxvIHdvcmxkIScpXG4gKiBjb25zdCBidWYgPSBlbmNvZGluZy50b1VpbnQ4QXJyYXkoZW5jb2RlcilcbiAqIGBgYFxuICpcbiAqIGBgYGpzXG4gKiAvLyBkZWNvZGluZyBzdGVwXG4gKiBjb25zdCBkZWNvZGVyID0gbmV3IGRlY29kaW5nLmNyZWF0ZURlY29kZXIoYnVmKVxuICogZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2RlcikgLy8gPT4gMjU2XG4gKiBkZWNvZGluZy5yZWFkVmFyU3RyaW5nKGRlY29kZXIpIC8vID0+ICdIZWxsbyB3b3JsZCEnXG4gKiBkZWNvZGluZy5oYXNDb250ZW50KGRlY29kZXIpIC8vID0+IGZhbHNlIC0gYWxsIGRhdGEgaXMgcmVhZFxuICogYGBgXG4gKlxuICogQG1vZHVsZSBlbmNvZGluZ1xuICovXG5cbmltcG9ydCAqIGFzIGJ1ZmZlciBmcm9tICcuL2J1ZmZlci5qcydcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi9tYXRoLmpzJ1xuaW1wb3J0ICogYXMgbnVtYmVyIGZyb20gJy4vbnVtYmVyLmpzJ1xuaW1wb3J0ICogYXMgYmluYXJ5IGZyb20gJy4vYmluYXJ5LmpzJ1xuXG4vKipcbiAqIEEgQmluYXJ5RW5jb2RlciBoYW5kbGVzIHRoZSBlbmNvZGluZyB0byBhbiBVaW50OEFycmF5LlxuICovXG5leHBvcnQgY2xhc3MgRW5jb2RlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmNwb3MgPSAwXG4gICAgdGhpcy5jYnVmID0gbmV3IFVpbnQ4QXJyYXkoMTAwKVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxVaW50OEFycmF5Pn1cbiAgICAgKi9cbiAgICB0aGlzLmJ1ZnMgPSBbXVxuICB9XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJuIHtFbmNvZGVyfVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlRW5jb2RlciA9ICgpID0+IG5ldyBFbmNvZGVyKClcblxuLyoqXG4gKiBUaGUgY3VycmVudCBsZW5ndGggb2YgdGhlIGVuY29kZWQgZGF0YS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgbGVuZ3RoID0gZW5jb2RlciA9PiB7XG4gIGxldCBsZW4gPSBlbmNvZGVyLmNwb3NcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVyLmJ1ZnMubGVuZ3RoOyBpKyspIHtcbiAgICBsZW4gKz0gZW5jb2Rlci5idWZzW2ldLmxlbmd0aFxuICB9XG4gIHJldHVybiBsZW5cbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gdG8gVWludDhBcnJheS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHJldHVybiB7VWludDhBcnJheX0gVGhlIGNyZWF0ZWQgQXJyYXlCdWZmZXIuXG4gKi9cbmV4cG9ydCBjb25zdCB0b1VpbnQ4QXJyYXkgPSBlbmNvZGVyID0+IHtcbiAgY29uc3QgdWludDhhcnIgPSBuZXcgVWludDhBcnJheShsZW5ndGgoZW5jb2RlcikpXG4gIGxldCBjdXJQb3MgPSAwXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2Rlci5idWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZCA9IGVuY29kZXIuYnVmc1tpXVxuICAgIHVpbnQ4YXJyLnNldChkLCBjdXJQb3MpXG4gICAgY3VyUG9zICs9IGQubGVuZ3RoXG4gIH1cbiAgdWludDhhcnIuc2V0KGJ1ZmZlci5jcmVhdGVVaW50OEFycmF5Vmlld0Zyb21BcnJheUJ1ZmZlcihlbmNvZGVyLmNidWYuYnVmZmVyLCAwLCBlbmNvZGVyLmNwb3MpLCBjdXJQb3MpXG4gIHJldHVybiB1aW50OGFyclxufVxuXG4vKipcbiAqIFZlcmlmeSB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIHdyaXRlIGBsZW5gIGJ5dGVzIHd0aWhvdXQgY2hlY2tpbmcuIElmXG4gKiBuZWNlc3NhcnksIGEgbmV3IEJ1ZmZlciB3aXRoIHRoZSByZXF1aXJlZCBsZW5ndGggaXMgYXR0YWNoZWQuXG4gKlxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gKi9cbmNvbnN0IHZlcmlmeUxlbiA9IChlbmNvZGVyLCBsZW4pID0+IHtcbiAgY29uc3QgYnVmZmVyTGVuID0gZW5jb2Rlci5jYnVmLmxlbmd0aFxuICBpZiAoYnVmZmVyTGVuIC0gZW5jb2Rlci5jcG9zIDwgbGVuKSB7XG4gICAgZW5jb2Rlci5idWZzLnB1c2goYnVmZmVyLmNyZWF0ZVVpbnQ4QXJyYXlWaWV3RnJvbUFycmF5QnVmZmVyKGVuY29kZXIuY2J1Zi5idWZmZXIsIDAsIGVuY29kZXIuY3BvcykpXG4gICAgZW5jb2Rlci5jYnVmID0gbmV3IFVpbnQ4QXJyYXkobWF0aC5tYXgoYnVmZmVyTGVuLCBsZW4pICogMilcbiAgICBlbmNvZGVyLmNwb3MgPSAwXG4gIH1cbn1cblxuLyoqXG4gKiBXcml0ZSBvbmUgYnl0ZSB0byB0aGUgZW5jb2Rlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgYnl0ZSB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZSA9IChlbmNvZGVyLCBudW0pID0+IHtcbiAgY29uc3QgYnVmZmVyTGVuID0gZW5jb2Rlci5jYnVmLmxlbmd0aFxuICBpZiAoZW5jb2Rlci5jcG9zID09PSBidWZmZXJMZW4pIHtcbiAgICBlbmNvZGVyLmJ1ZnMucHVzaChlbmNvZGVyLmNidWYpXG4gICAgZW5jb2Rlci5jYnVmID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyTGVuICogMilcbiAgICBlbmNvZGVyLmNwb3MgPSAwXG4gIH1cbiAgZW5jb2Rlci5jYnVmW2VuY29kZXIuY3BvcysrXSA9IG51bVxufVxuXG4vKipcbiAqIFdyaXRlIG9uZSBieXRlIGF0IGEgc3BlY2lmaWMgcG9zaXRpb24uXG4gKiBQb3NpdGlvbiBtdXN0IGFscmVhZHkgYmUgd3JpdHRlbiAoaS5lLiBlbmNvZGVyLmxlbmd0aCA+IHBvcylcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBQb3NpdGlvbiB0byB3aGljaCB0byB3cml0ZSBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAqL1xuZXhwb3J0IGNvbnN0IHNldCA9IChlbmNvZGVyLCBwb3MsIG51bSkgPT4ge1xuICBsZXQgYnVmZmVyID0gbnVsbFxuICAvLyBpdGVyYXRlIGFsbCBidWZmZXJzIGFuZCBhZGp1c3QgcG9zaXRpb25cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVyLmJ1ZnMubGVuZ3RoICYmIGJ1ZmZlciA9PT0gbnVsbDsgaSsrKSB7XG4gICAgY29uc3QgYiA9IGVuY29kZXIuYnVmc1tpXVxuICAgIGlmIChwb3MgPCBiLmxlbmd0aCkge1xuICAgICAgYnVmZmVyID0gYiAvLyBmb3VuZCBidWZmZXJcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zIC09IGIubGVuZ3RoXG4gICAgfVxuICB9XG4gIGlmIChidWZmZXIgPT09IG51bGwpIHtcbiAgICAvLyB1c2UgY3VycmVudCBidWZmZXJcbiAgICBidWZmZXIgPSBlbmNvZGVyLmNidWZcbiAgfVxuICBidWZmZXJbcG9zXSA9IG51bVxufVxuXG4vKipcbiAqIFdyaXRlIG9uZSBieXRlIGFzIGFuIHVuc2lnbmVkIGludGVnZXIuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVVpbnQ4ID0gd3JpdGVcblxuLyoqXG4gKiBXcml0ZSBvbmUgYnl0ZSBhcyBhbiB1bnNpZ25lZCBJbnRlZ2VyIGF0IGEgc3BlY2lmaWMgbG9jYXRpb24uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgVGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBkYXRhIHdpbGwgYmUgd3JpdHRlbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRVaW50OCA9IHNldFxuXG4vKipcbiAqIFdyaXRlIHR3byBieXRlcyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtIFRoZSBudW1iZXIgdGhhdCBpcyB0byBiZSBlbmNvZGVkLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVVaW50MTYgPSAoZW5jb2RlciwgbnVtKSA9PiB7XG4gIHdyaXRlKGVuY29kZXIsIG51bSAmIGJpbmFyeS5CSVRTOClcbiAgd3JpdGUoZW5jb2RlciwgKG51bSA+Pj4gOCkgJiBiaW5hcnkuQklUUzgpXG59XG4vKipcbiAqIFdyaXRlIHR3byBieXRlcyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyIGF0IGEgc3BlY2lmaWMgbG9jYXRpb24uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgVGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBkYXRhIHdpbGwgYmUgd3JpdHRlbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRVaW50MTYgPSAoZW5jb2RlciwgcG9zLCBudW0pID0+IHtcbiAgc2V0KGVuY29kZXIsIHBvcywgbnVtICYgYmluYXJ5LkJJVFM4KVxuICBzZXQoZW5jb2RlciwgcG9zICsgMSwgKG51bSA+Pj4gOCkgJiBiaW5hcnkuQklUUzgpXG59XG5cbi8qKlxuICogV3JpdGUgdHdvIGJ5dGVzIGFzIGFuIHVuc2lnbmVkIGludGVnZXJcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlVWludDMyID0gKGVuY29kZXIsIG51bSkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHdyaXRlKGVuY29kZXIsIG51bSAmIGJpbmFyeS5CSVRTOClcbiAgICBudW0gPj4+PSA4XG4gIH1cbn1cblxuLyoqXG4gKiBXcml0ZSB0d28gYnl0ZXMgYXMgYW4gdW5zaWduZWQgaW50ZWdlciBpbiBiaWcgZW5kaWFuIG9yZGVyLlxuICogKG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBmaXJzdClcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlVWludDMyQmlnRW5kaWFuID0gKGVuY29kZXIsIG51bSkgPT4ge1xuICBmb3IgKGxldCBpID0gMzsgaSA+PSAwOyBpLS0pIHtcbiAgICB3cml0ZShlbmNvZGVyLCAobnVtID4+PiAoOCAqIGkpKSAmIGJpbmFyeS5CSVRTOClcbiAgfVxufVxuXG4vKipcbiAqIFdyaXRlIHR3byBieXRlcyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyIGF0IGEgc3BlY2lmaWMgbG9jYXRpb24uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgVGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBkYXRhIHdpbGwgYmUgd3JpdHRlbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRVaW50MzIgPSAoZW5jb2RlciwgcG9zLCBudW0pID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICBzZXQoZW5jb2RlciwgcG9zICsgaSwgbnVtICYgYmluYXJ5LkJJVFM4KVxuICAgIG51bSA+Pj49IDhcbiAgfVxufVxuXG4vKipcbiAqIFdyaXRlIGEgdmFyaWFibGUgbGVuZ3RoIHVuc2lnbmVkIGludGVnZXIuXG4gKlxuICogRW5jb2RlcyBpbnRlZ2VycyBpbiB0aGUgcmFuZ2UgZnJvbSBbMCwgNDI5NDk2NzI5NV0gLyBbMCwgMHhmZmZmZmZmZl0uIChtYXggMzIgYml0IHVuc2lnbmVkIGludGVnZXIpXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gVGhlIG51bWJlciB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVZhclVpbnQgPSAoZW5jb2RlciwgbnVtKSA9PiB7XG4gIHdoaWxlIChudW0gPiBiaW5hcnkuQklUUzcpIHtcbiAgICB3cml0ZShlbmNvZGVyLCBiaW5hcnkuQklUOCB8IChiaW5hcnkuQklUUzcgJiBudW0pKVxuICAgIG51bSA+Pj49IDdcbiAgfVxuICB3cml0ZShlbmNvZGVyLCBiaW5hcnkuQklUUzcgJiBudW0pXG59XG5cbi8qKlxuICogV3JpdGUgYSB2YXJpYWJsZSBsZW5ndGggaW50ZWdlci5cbiAqXG4gKiBFbmNvZGVzIGludGVnZXJzIGluIHRoZSByYW5nZSBmcm9tIFstMjE0NzQ4MzY0OCwgLTIxNDc0ODM2NDddLlxuICpcbiAqIFdlIGRvbid0IHVzZSB6aWctemFnIGVuY29kaW5nIGJlY2F1c2Ugd2Ugd2FudCB0byBrZWVwIHRoZSBvcHRpb24gb3BlblxuICogdG8gdXNlIHRoZSBzYW1lIGZ1bmN0aW9uIGZvciBCaWdJbnQgYW5kIDUzYml0IGludGVnZXJzIChkb3VibGVzKS5cbiAqXG4gKiBXZSB1c2UgdGhlIDd0aCBiaXQgaW5zdGVhZCBmb3Igc2lnbmFsaW5nIHRoYXQgdGhpcyBpcyBhIG5lZ2F0aXZlIG51bWJlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRoYXQgaXMgdG8gYmUgZW5jb2RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlVmFySW50ID0gKGVuY29kZXIsIG51bSkgPT4ge1xuICBjb25zdCBpc05lZ2F0aXZlID0gbWF0aC5pc05lZ2F0aXZlWmVybyhudW0pXG4gIGlmIChpc05lZ2F0aXZlKSB7XG4gICAgbnVtID0gLW51bVxuICB9XG4gIC8vICAgICAgICAgICAgIHwtIHdoZXRoZXIgdG8gY29udGludWUgcmVhZGluZyAgICAgICAgIHwtIHdoZXRoZXIgaXMgbmVnYXRpdmUgICAgIHwtIG51bWJlclxuICB3cml0ZShlbmNvZGVyLCAobnVtID4gYmluYXJ5LkJJVFM2ID8gYmluYXJ5LkJJVDggOiAwKSB8IChpc05lZ2F0aXZlID8gYmluYXJ5LkJJVDcgOiAwKSB8IChiaW5hcnkuQklUUzYgJiBudW0pKVxuICBudW0gPj4+PSA2XG4gIC8vIFdlIGRvbid0IG5lZWQgdG8gY29uc2lkZXIgdGhlIGNhc2Ugb2YgbnVtID09PSAwIHNvIHdlIGNhbiB1c2UgYSBkaWZmZXJlbnRcbiAgLy8gcGF0dGVybiBoZXJlIHRoYW4gYWJvdmUuXG4gIHdoaWxlIChudW0gPiAwKSB7XG4gICAgd3JpdGUoZW5jb2RlciwgKG51bSA+IGJpbmFyeS5CSVRTNyA/IGJpbmFyeS5CSVQ4IDogMCkgfCAoYmluYXJ5LkJJVFM3ICYgbnVtKSlcbiAgICBudW0gPj4+PSA3XG4gIH1cbn1cblxuLyoqXG4gKiBXcml0ZSBhIHZhcmlhYmxlIGxlbmd0aCBzdHJpbmcuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0aGF0IGlzIHRvIGJlIGVuY29kZWQuXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVZhclN0cmluZyA9IChlbmNvZGVyLCBzdHIpID0+IHtcbiAgY29uc3QgZW5jb2RlZFN0cmluZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKVxuICBjb25zdCBsZW4gPSBlbmNvZGVkU3RyaW5nLmxlbmd0aFxuICB3cml0ZVZhclVpbnQoZW5jb2RlciwgbGVuKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgd3JpdGUoZW5jb2RlciwgLyoqIEB0eXBlIHtudW1iZXJ9ICovIChlbmNvZGVkU3RyaW5nLmNvZGVQb2ludEF0KGkpKSlcbiAgfVxufVxuXG4vKipcbiAqIFdyaXRlIHRoZSBjb250ZW50IG9mIGFub3RoZXIgRW5jb2Rlci5cbiAqXG4gKiBAVE9ETzogY2FuIGJlIGltcHJvdmVkIVxuICogICAgICAgIC0gTm90ZTogU2hvdWxkIGNvbnNpZGVyIHRoYXQgd2hlbiBhcHBlbmRpbmcgYSBsb3Qgb2Ygc21hbGwgRW5jb2RlcnMsIHdlIHNob3VsZCByYXRoZXIgY2xvbmUgdGhhbiByZWZlcmVuY2luZyB0aGUgb2xkIHN0cnVjdHVyZS5cbiAqICAgICAgICAgICAgICAgIEVuY29kZXJzIHN0YXJ0IHdpdGggYSByYXRoZXIgYmlnIGluaXRpYWwgYnVmZmVyLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyIFRoZSBlblVpbnQ4QXJyXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGFwcGVuZCBUaGUgQmluYXJ5RW5jb2RlciB0byBiZSB3cml0dGVuLlxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVCaW5hcnlFbmNvZGVyID0gKGVuY29kZXIsIGFwcGVuZCkgPT4gd3JpdGVVaW50OEFycmF5KGVuY29kZXIsIHRvVWludDhBcnJheShhcHBlbmQpKVxuXG4vKipcbiAqIEFwcGVuZCBmaXhlZC1sZW5ndGggVWludDhBcnJheSB0byB0aGUgZW5jb2Rlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVVpbnQ4QXJyYXkgPSAoZW5jb2RlciwgdWludDhBcnJheSkgPT4ge1xuICBjb25zdCBidWZmZXJMZW4gPSBlbmNvZGVyLmNidWYubGVuZ3RoXG4gIGNvbnN0IGNwb3MgPSBlbmNvZGVyLmNwb3NcbiAgY29uc3QgbGVmdENvcHlMZW4gPSBtYXRoLm1pbihidWZmZXJMZW4gLSBjcG9zLCB1aW50OEFycmF5Lmxlbmd0aClcbiAgY29uc3QgcmlnaHRDb3B5TGVuID0gdWludDhBcnJheS5sZW5ndGggLSBsZWZ0Q29weUxlblxuICBlbmNvZGVyLmNidWYuc2V0KHVpbnQ4QXJyYXkuc3ViYXJyYXkoMCwgbGVmdENvcHlMZW4pLCBjcG9zKVxuICBlbmNvZGVyLmNwb3MgKz0gbGVmdENvcHlMZW5cbiAgaWYgKHJpZ2h0Q29weUxlbiA+IDApIHtcbiAgICAvLyBTdGlsbCBzb21ldGhpbmcgdG8gd3JpdGUsIHdyaXRlIHJpZ2h0IGhhbGYuLlxuICAgIC8vIEFwcGVuZCBuZXcgYnVmZmVyXG4gICAgZW5jb2Rlci5idWZzLnB1c2goZW5jb2Rlci5jYnVmKVxuICAgIC8vIG11c3QgaGF2ZSBhdCBsZWFzdCBzaXplIG9mIHJlbWFpbmluZyBidWZmZXJcbiAgICBlbmNvZGVyLmNidWYgPSBuZXcgVWludDhBcnJheShtYXRoLm1heChidWZmZXJMZW4gKiAyLCByaWdodENvcHlMZW4pKVxuICAgIC8vIGNvcHkgYXJyYXlcbiAgICBlbmNvZGVyLmNidWYuc2V0KHVpbnQ4QXJyYXkuc3ViYXJyYXkobGVmdENvcHlMZW4pKVxuICAgIGVuY29kZXIuY3BvcyA9IHJpZ2h0Q29weUxlblxuICB9XG59XG5cbi8qKlxuICogQXBwZW5kIGFuIFVpbnQ4QXJyYXkgdG8gRW5jb2Rlci5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1aW50OEFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZVZhclVpbnQ4QXJyYXkgPSAoZW5jb2RlciwgdWludDhBcnJheSkgPT4ge1xuICB3cml0ZVZhclVpbnQoZW5jb2RlciwgdWludDhBcnJheS5ieXRlTGVuZ3RoKVxuICB3cml0ZVVpbnQ4QXJyYXkoZW5jb2RlciwgdWludDhBcnJheSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gRGF0YVZpZXcgb2YgdGhlIG5leHQgYGxlbmAgYnl0ZXMuIFVzZSBpdCB0byB3cml0ZSBkYXRhIGFmdGVyXG4gKiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24uXG4gKlxuICogYGBganNcbiAqIC8vIHdyaXRlIGZsb2F0MzIgdXNpbmcgRGF0YVZpZXdcbiAqIGNvbnN0IGR2ID0gd3JpdGVPbkRhdGFWaWV3KGVuY29kZXIsIDQpXG4gKiBkdi5zZXRGbG9hdDMyKDAsIDEuMSlcbiAqIC8vIHJlYWQgZmxvYXQzMiB1c2luZyBEYXRhVmlld1xuICogY29uc3QgZHYgPSByZWFkRnJvbURhdGFWaWV3KGVuY29kZXIsIDQpXG4gKiBkdi5nZXRGbG9hdDMyKDApIC8vID0+IDEuMTAwMDAwMDIzODQxODU4IChsZWF2aW5nIGl0IHRvIHRoZSByZWFkZXIgdG8gZmluZCBvdXQgd2h5IHRoaXMgaXMgdGhlIGNvcnJlY3QgcmVzdWx0KVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gKiBAcmV0dXJuIHtEYXRhVmlld31cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlT25EYXRhVmlldyA9IChlbmNvZGVyLCBsZW4pID0+IHtcbiAgdmVyaWZ5TGVuKGVuY29kZXIsIGxlbilcbiAgY29uc3QgZHZpZXcgPSBuZXcgRGF0YVZpZXcoZW5jb2Rlci5jYnVmLmJ1ZmZlciwgZW5jb2Rlci5jcG9zLCBsZW4pXG4gIGVuY29kZXIuY3BvcyArPSBsZW5cbiAgcmV0dXJuIGR2aWV3XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZUZsb2F0MzIgPSAoZW5jb2RlciwgbnVtKSA9PiB3cml0ZU9uRGF0YVZpZXcoZW5jb2RlciwgNCkuc2V0RmxvYXQzMigwLCBudW0sIGZhbHNlKVxuXG4vKipcbiAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtudW1iZXJ9IG51bVxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVGbG9hdDY0ID0gKGVuY29kZXIsIG51bSkgPT4gd3JpdGVPbkRhdGFWaWV3KGVuY29kZXIsIDgpLnNldEZsb2F0NjQoMCwgbnVtLCBmYWxzZSlcblxuLyoqXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7YmlnaW50fSBudW1cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlQmlnSW50NjQgPSAoZW5jb2RlciwgbnVtKSA9PiAvKiogQHR5cGUge2FueX0gKi8gKHdyaXRlT25EYXRhVmlldyhlbmNvZGVyLCA4KSkuc2V0QmlnSW50NjQoMCwgbnVtLCBmYWxzZSlcblxuLyoqXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7YmlnaW50fSBudW1cbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlQmlnVWludDY0ID0gKGVuY29kZXIsIG51bSkgPT4gLyoqIEB0eXBlIHthbnl9ICovICh3cml0ZU9uRGF0YVZpZXcoZW5jb2RlciwgOCkpLnNldEJpZ1VpbnQ2NCgwLCBudW0sIGZhbHNlKVxuXG5jb25zdCBmbG9hdFRlc3RCZWQgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDQpKVxuLyoqXG4gKiBDaGVjayBpZiBhIG51bWJlciBjYW4gYmUgZW5jb2RlZCBhcyBhIDMyIGJpdCBmbG9hdC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5jb25zdCBpc0Zsb2F0MzIgPSBudW0gPT4ge1xuICBmbG9hdFRlc3RCZWQuc2V0RmxvYXQzMigwLCBudW0pXG4gIHJldHVybiBmbG9hdFRlc3RCZWQuZ2V0RmxvYXQzMigwKSA9PT0gbnVtXG59XG5cbi8qKlxuICogRW5jb2RlIGRhdGEgd2l0aCBlZmZpY2llbnQgYmluYXJ5IGZvcm1hdC5cbiAqXG4gKiBEaWZmZXJlbmNlcyB0byBKU09OOlxuICog4oCiIFRyYW5zZm9ybXMgZGF0YSB0byBhIGJpbmFyeSBmb3JtYXQgKG5vdCB0byBhIHN0cmluZylcbiAqIOKAoiBFbmNvZGVzIHVuZGVmaW5lZCwgTmFOLCBhbmQgQXJyYXlCdWZmZXIgKHRoZXNlIGNhbid0IGJlIHJlcHJlc2VudGVkIGluIEpTT04pXG4gKiDigKIgTnVtYmVycyBhcmUgZWZmaWNpZW50bHkgZW5jb2RlZCBlaXRoZXIgYXMgYSB2YXJpYWJsZSBsZW5ndGggaW50ZWdlciwgYXMgYVxuICogICAzMiBiaXQgZmxvYXQsIGFzIGEgNjQgYml0IGZsb2F0LCBvciBhcyBhIDY0IGJpdCBiaWdpbnQuXG4gKlxuICogRW5jb2RpbmcgdGFibGU6XG4gKlxuICogfCBEYXRhIFR5cGUgICAgICAgICAgIHwgUHJlZml4ICAgfCBFbmNvZGluZyBNZXRob2QgICAgfCBDb21tZW50IHxcbiAqIHwgLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLSB8XG4gKiB8IHVuZGVmaW5lZCAgICAgICAgICAgfCAxMjcgICAgICB8ICAgICAgICAgICAgICAgICAgICB8IEZ1bmN0aW9ucywgc3ltYm9sLCBhbmQgZXZlcnl0aGluZyB0aGF0IGNhbm5vdCBiZSBpZGVudGlmaWVkIGlzIGVuY29kZWQgYXMgdW5kZWZpbmVkIHxcbiAqIHwgbnVsbCAgICAgICAgICAgICAgICB8IDEyNiAgICAgIHwgICAgICAgICAgICAgICAgICAgIHwgfFxuICogfCBpbnRlZ2VyICAgICAgICAgICAgIHwgMTI1ICAgICAgfCB3cml0ZVZhckludCAgICAgICAgfCBPbmx5IGVuY29kZXMgMzIgYml0IHNpZ25lZCBpbnRlZ2VycyB8XG4gKiB8IGZsb2F0MzIgICAgICAgICAgICAgfCAxMjQgICAgICB8IHdyaXRlRmxvYXQzMiAgICAgICB8IHxcbiAqIHwgZmxvYXQ2NCAgICAgICAgICAgICB8IDEyMyAgICAgIHwgd3JpdGVGbG9hdDY0ICAgICAgIHwgfFxuICogfCBiaWdpbnQgICAgICAgICAgICAgIHwgMTIyICAgICAgfCB3cml0ZUJpZ0ludDY0ICAgICAgfCB8XG4gKiB8IGJvb2xlYW4gKGZhbHNlKSAgICAgfCAxMjEgICAgICB8ICAgICAgICAgICAgICAgICAgICB8IFRydWUgYW5kIGZhbHNlIGFyZSBkaWZmZXJlbnQgZGF0YSB0eXBlcyBzbyB3ZSBzYXZlIHRoZSBmb2xsb3dpbmcgYnl0ZSB8XG4gKiB8IGJvb2xlYW4gKHRydWUpICAgICAgfCAxMjAgICAgICB8ICAgICAgICAgICAgICAgICAgICB8IC0gMGIwMTExMTAwMCBzbyB0aGUgbGFzdCBiaXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRydWUgb3IgZmFsc2UgfFxuICogfCBzdHJpbmcgICAgICAgICAgICAgIHwgMTE5ICAgICAgfCB3cml0ZVZhclN0cmluZyAgICAgfCB8XG4gKiB8IG9iamVjdDxzdHJpbmcsYW55PiAgfCAxMTggICAgICB8IGN1c3RvbSAgICAgICAgICAgICB8IFdyaXRlcyB7bGVuZ3RofSB0aGVuIHtsZW5ndGh9IGtleS12YWx1ZSBwYWlycyB8XG4gKiB8IGFycmF5PGFueT4gICAgICAgICAgfCAxMTcgICAgICB8IGN1c3RvbSAgICAgICAgICAgICB8IFdyaXRlcyB7bGVuZ3RofSB0aGVuIHtsZW5ndGh9IGpzb24gdmFsdWVzIHxcbiAqIHwgVWludDhBcnJheSAgICAgICAgICB8IDExNiAgICAgIHwgd3JpdGVWYXJVaW50OEFycmF5IHwgV2UgdXNlIFVpbnQ4QXJyYXkgZm9yIGFueSBraW5kIG9mIGJpbmFyeSBkYXRhIHxcbiAqXG4gKiBSZWFzb25zIGZvciB0aGUgZGVjcmVhc2luZyBwcmVmaXg6XG4gKiBXZSBuZWVkIHRoZSBmaXJzdCBiaXQgZm9yIGV4dGVuZGFiaWxpdHkgKGxhdGVyIHdlIG1heSB3YW50IHRvIGVuY29kZSB0aGVcbiAqIHByZWZpeCB3aXRoIHdyaXRlVmFyVWludCkuIFRoZSByZW1haW5pbmcgNyBiaXRzIGFyZSBkaXZpZGVkIGFzIGZvbGxvd3M6XG4gKiBbMC0zMF0gICB0aGUgYmVnaW5uaW5nIG9mIHRoZSBkYXRhIHJhbmdlIGlzIHVzZWQgZm9yIGN1c3RvbSBwdXJwb3Nlc1xuICogICAgICAgICAgKGRlZmluZWQgYnkgdGhlIGZ1bmN0aW9uIHRoYXQgdXNlcyB0aGlzIGxpYnJhcnkpXG4gKiBbMzEtMTI3XSB0aGUgZW5kIG9mIHRoZSBkYXRhIHJhbmdlIGlzIHVzZWQgZm9yIGRhdGEgZW5jb2RpbmcgYnlcbiAqICAgICAgICAgIGxpYjAvZW5jb2RpbmcuanNcbiAqXG4gKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7dW5kZWZpbmVkfG51bGx8bnVtYmVyfGJpZ2ludHxib29sZWFufHN0cmluZ3xPYmplY3Q8c3RyaW5nLGFueT58QXJyYXk8YW55PnxVaW50OEFycmF5fSBkYXRhXG4gKi9cbmV4cG9ydCBjb25zdCB3cml0ZUFueSA9IChlbmNvZGVyLCBkYXRhKSA9PiB7XG4gIHN3aXRjaCAodHlwZW9mIGRhdGEpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgLy8gVFlQRSAxMTk6IFNUUklOR1xuICAgICAgd3JpdGUoZW5jb2RlciwgMTE5KVxuICAgICAgd3JpdGVWYXJTdHJpbmcoZW5jb2RlciwgZGF0YSlcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGlmIChudW1iZXIuaXNJbnRlZ2VyKGRhdGEpICYmIG1hdGguYWJzKGRhdGEpIDw9IGJpbmFyeS5CSVRTMzEpIHtcbiAgICAgICAgLy8gVFlQRSAxMjU6IElOVEVHRVJcbiAgICAgICAgd3JpdGUoZW5jb2RlciwgMTI1KVxuICAgICAgICB3cml0ZVZhckludChlbmNvZGVyLCBkYXRhKVxuICAgICAgfSBlbHNlIGlmIChpc0Zsb2F0MzIoZGF0YSkpIHtcbiAgICAgICAgLy8gVFlQRSAxMjQ6IEZMT0FUMzJcbiAgICAgICAgd3JpdGUoZW5jb2RlciwgMTI0KVxuICAgICAgICB3cml0ZUZsb2F0MzIoZW5jb2RlciwgZGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRZUEUgMTIzOiBGTE9BVDY0XG4gICAgICAgIHdyaXRlKGVuY29kZXIsIDEyMylcbiAgICAgICAgd3JpdGVGbG9hdDY0KGVuY29kZXIsIGRhdGEpXG4gICAgICB9XG4gICAgICBicmVha1xuICAgIGNhc2UgJ2JpZ2ludCc6XG4gICAgICAvLyBUWVBFIDEyMjogQmlnSW50XG4gICAgICB3cml0ZShlbmNvZGVyLCAxMjIpXG4gICAgICB3cml0ZUJpZ0ludDY0KGVuY29kZXIsIGRhdGEpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUWVBFIDEyNjogbnVsbFxuICAgICAgICB3cml0ZShlbmNvZGVyLCAxMjYpXG4gICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAvLyBUWVBFIDExNzogQXJyYXlcbiAgICAgICAgd3JpdGUoZW5jb2RlciwgMTE3KVxuICAgICAgICB3cml0ZVZhclVpbnQoZW5jb2RlciwgZGF0YS5sZW5ndGgpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHdyaXRlQW55KGVuY29kZXIsIGRhdGFbaV0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgLy8gVFlQRSAxMTY6IEFycmF5QnVmZmVyXG4gICAgICAgIHdyaXRlKGVuY29kZXIsIDExNilcbiAgICAgICAgd3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIGRhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUWVBFIDExODogT2JqZWN0XG4gICAgICAgIHdyaXRlKGVuY29kZXIsIDExOClcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpXG4gICAgICAgIHdyaXRlVmFyVWludChlbmNvZGVyLCBrZXlzLmxlbmd0aClcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXVxuICAgICAgICAgIHdyaXRlVmFyU3RyaW5nKGVuY29kZXIsIGtleSlcbiAgICAgICAgICB3cml0ZUFueShlbmNvZGVyLCBkYXRhW2tleV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAvLyBUWVBFIDEyMC8xMjE6IGJvb2xlYW4gKHRydWUvZmFsc2UpXG4gICAgICB3cml0ZShlbmNvZGVyLCBkYXRhID8gMTIwIDogMTIxKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gVFlQRSAxMjc6IHVuZGVmaW5lZFxuICAgICAgd3JpdGUoZW5jb2RlciwgMTI3KVxuICB9XG59XG5cbi8qKlxuICogTm93IGNvbWUgYSBmZXcgc3RhdGVmdWwgZW5jb2RlciB0aGF0IGhhdmUgdGhlaXIgb3duIGNsYXNzZXMuXG4gKi9cblxuLyoqXG4gKiBCYXNpYyBSdW4gTGVuZ3RoIEVuY29kZXIgLSBhIGJhc2ljIGNvbXByZXNzaW9uIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEVuY29kZXMgWzEsMSwxLDddIHRvIFsxLDMsNywxXSAoMyB0aW1lcyAxLCAxIHRpbWUgNykuIFRoaXMgZW5jb2RlciBtaWdodCBkbyBtb3JlIGhhcm0gdGhhbiBnb29kIGlmIHRoZXJlIGFyZSBhIGxvdCBvZiB2YWx1ZXMgdGhhdCBhcmUgbm90IHJlcGVhdGVkLlxuICpcbiAqIEl0IHdhcyBvcmlnaW5hbGx5IHVzZWQgZm9yIGltYWdlIGNvbXByZXNzaW9uLiBDb29sIC4uIGFydGljbGUgaHR0cDovL2NzYnJ1Y2UuY29tL2NibS90cmFuc2FjdG9yL3BkZnMvdHJhbnNfdjdfaTA2LnBkZlxuICpcbiAqIEBub3RlIFQgbXVzdCBub3QgYmUgbnVsbCFcbiAqXG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgY2xhc3MgUmxlRW5jb2RlciBleHRlbmRzIEVuY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtmdW5jdGlvbihFbmNvZGVyLCBUKTp2b2lkfSB3cml0ZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yICh3cml0ZXIpIHtcbiAgICBzdXBlcigpXG4gICAgLyoqXG4gICAgICogVGhlIHdyaXRlclxuICAgICAqL1xuICAgIHRoaXMudyA9IHdyaXRlclxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgc3RhdGVcbiAgICAgKiBAdHlwZSB7VHxudWxsfVxuICAgICAqL1xuICAgIHRoaXMucyA9IG51bGxcbiAgICB0aGlzLmNvdW50ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VH0gdlxuICAgKi9cbiAgd3JpdGUgKHYpIHtcbiAgICBpZiAodGhpcy5zID09PSB2KSB7XG4gICAgICB0aGlzLmNvdW50KytcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuY291bnQgPiAwKSB7XG4gICAgICAgIC8vIGZsdXNoIGNvdW50ZXIsIHVubGVzcyB0aGlzIGlzIHRoZSBmaXJzdCB2YWx1ZSAoY291bnQgPSAwKVxuICAgICAgICB3cml0ZVZhclVpbnQodGhpcywgdGhpcy5jb3VudCAtIDEpIC8vIHNpbmNlIGNvdW50IGlzIGFsd2F5cyA+IDAsIHdlIGNhbiBkZWNyZW1lbnQgYnkgb25lLiBub24tc3RhbmRhcmQgZW5jb2RpbmcgZnR3XG4gICAgICB9XG4gICAgICB0aGlzLmNvdW50ID0gMVxuICAgICAgLy8gd3JpdGUgZmlyc3QgdmFsdWVcbiAgICAgIHRoaXMudyh0aGlzLCB2KVxuICAgICAgdGhpcy5zID0gdlxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEJhc2ljIGRpZmYgZGVjb2RlciB1c2luZyB2YXJpYWJsZSBsZW5ndGggZW5jb2RpbmcuXG4gKlxuICogRW5jb2RlcyB0aGUgdmFsdWVzIFszLCAxMTAwLCAxMTAxLCAxMDUwLCAwXSB0byBbMywgMTA5NywgMSwgLTUxLCAtMTA1MF0gdXNpbmcgd3JpdGVWYXJJbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnREaWZmRW5jb2RlciBleHRlbmRzIEVuY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gICAqL1xuICBjb25zdHJ1Y3RvciAoc3RhcnQpIHtcbiAgICBzdXBlcigpXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBzdGF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zID0gc3RhcnRcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdlxuICAgKi9cbiAgd3JpdGUgKHYpIHtcbiAgICB3cml0ZVZhckludCh0aGlzLCB2IC0gdGhpcy5zKVxuICAgIHRoaXMucyA9IHZcbiAgfVxufVxuXG4vKipcbiAqIEEgY29tYmluYXRpb24gb2YgSW50RGlmZkVuY29kZXIgYW5kIFJsZUVuY29kZXIuXG4gKlxuICogQmFzaWNhbGx5IGZpcnN0IHdyaXRlcyB0aGUgSW50RGlmZkVuY29kZXIgYW5kIHRoZW4gY291bnRzIGR1cGxpY2F0ZSBkaWZmcyB1c2luZyBSbGVFbmNvZGluZy5cbiAqXG4gKiBFbmNvZGVzIHRoZSB2YWx1ZXMgWzEsMSwxLDIsMyw0LDUsNl0gYXMgWzEsMSwwLDIsMSw1XSAoUkxFKFsxLDAsMCwxLDEsMSwxLDFdKSDih5IgUmxlSW50RGlmZlsxLDEsMCwyLDEsNV0pXG4gKi9cbmV4cG9ydCBjbGFzcyBSbGVJbnREaWZmRW5jb2RlciBleHRlbmRzIEVuY29kZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gICAqL1xuICBjb25zdHJ1Y3RvciAoc3RhcnQpIHtcbiAgICBzdXBlcigpXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBzdGF0ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zID0gc3RhcnRcbiAgICB0aGlzLmNvdW50ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2XG4gICAqL1xuICB3cml0ZSAodikge1xuICAgIGlmICh0aGlzLnMgPT09IHYgJiYgdGhpcy5jb3VudCA+IDApIHtcbiAgICAgIHRoaXMuY291bnQrK1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5jb3VudCA+IDApIHtcbiAgICAgICAgLy8gZmx1c2ggY291bnRlciwgdW5sZXNzIHRoaXMgaXMgdGhlIGZpcnN0IHZhbHVlIChjb3VudCA9IDApXG4gICAgICAgIHdyaXRlVmFyVWludCh0aGlzLCB0aGlzLmNvdW50IC0gMSkgLy8gc2luY2UgY291bnQgaXMgYWx3YXlzID4gMCwgd2UgY2FuIGRlY3JlbWVudCBieSBvbmUuIG5vbi1zdGFuZGFyZCBlbmNvZGluZyBmdHdcbiAgICAgIH1cbiAgICAgIHRoaXMuY291bnQgPSAxXG4gICAgICAvLyB3cml0ZSBmaXJzdCB2YWx1ZVxuICAgICAgd3JpdGVWYXJJbnQodGhpcywgdiAtIHRoaXMucylcbiAgICAgIHRoaXMucyA9IHZcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VpbnRPcHRSbGVFbmNvZGVyfSBlbmNvZGVyXG4gKi9cbmNvbnN0IGZsdXNoVWludE9wdFJsZUVuY29kZXIgPSBlbmNvZGVyID0+IHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVuY29kZXIuY291bnQgPiAwKSB7XG4gICAgLy8gZmx1c2ggY291bnRlciwgdW5sZXNzIHRoaXMgaXMgdGhlIGZpcnN0IHZhbHVlIChjb3VudCA9IDApXG4gICAgLy8gY2FzZSAxOiBqdXN0IGEgc2luZ2xlIHZhbHVlLiBzZXQgc2lnbiB0byBwb3NpdGl2ZVxuICAgIC8vIGNhc2UgMjogd3JpdGUgc2V2ZXJhbCB2YWx1ZXMuIHNldCBzaWduIHRvIG5lZ2F0aXZlIHRvIGluZGljYXRlIHRoYXQgdGhlcmUgaXMgYSBsZW5ndGggY29taW5nXG4gICAgd3JpdGVWYXJJbnQoZW5jb2Rlci5lbmNvZGVyLCBlbmNvZGVyLmNvdW50ID09PSAxID8gZW5jb2Rlci5zIDogLWVuY29kZXIucylcbiAgICBpZiAoZW5jb2Rlci5jb3VudCA+IDEpIHtcbiAgICAgIHdyaXRlVmFyVWludChlbmNvZGVyLmVuY29kZXIsIGVuY29kZXIuY291bnQgLSAyKSAvLyBzaW5jZSBjb3VudCBpcyBhbHdheXMgPiAxLCB3ZSBjYW4gZGVjcmVtZW50IGJ5IG9uZS4gbm9uLXN0YW5kYXJkIGVuY29kaW5nIGZ0d1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIE9wdGltaXplZCBSbGUgZW5jb2RlciB0aGF0IGRvZXMgbm90IHN1ZmZlciBmcm9tIHRoZSBtZW50aW9uZWQgcHJvYmxlbSBvZiB0aGUgYmFzaWMgUmxlIGVuY29kZXIuXG4gKlxuICogSW50ZXJuYWxseSB1c2VzIFZhckludCBlbmNvZGVyIHRvIHdyaXRlIHVuc2lnbmVkIGludGVnZXJzLiBJZiB0aGUgaW5wdXQgb2NjdXJzIG11bHRpcGxlIHRpbWVzLCB3ZSB3cml0ZVxuICogd3JpdGUgaXQgYXMgYSBuZWdhdGl2ZSBudW1iZXIuIFRoZSBVaW50T3B0UmxlRGVjb2RlciB0aGVuIHVuZGVyc3RhbmRzIHRoYXQgaXQgbmVlZHMgdG8gcmVhZCBhIGNvdW50LlxuICpcbiAqIEVuY29kZXMgWzEsMiwzLDMsM10gYXMgWzEsMiwtMywzXSAob25jZSAxLCBvbmNlIDIsIHRocmVlIHRpbWVzIDMpXG4gKi9cbmV4cG9ydCBjbGFzcyBVaW50T3B0UmxlRW5jb2RlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmVuY29kZXIgPSBuZXcgRW5jb2RlcigpXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSAwXG4gICAgdGhpcy5jb3VudCA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdlxuICAgKi9cbiAgd3JpdGUgKHYpIHtcbiAgICBpZiAodGhpcy5zID09PSB2KSB7XG4gICAgICB0aGlzLmNvdW50KytcbiAgICB9IGVsc2Uge1xuICAgICAgZmx1c2hVaW50T3B0UmxlRW5jb2Rlcih0aGlzKVxuICAgICAgdGhpcy5jb3VudCA9IDFcbiAgICAgIHRoaXMucyA9IHZcbiAgICB9XG4gIH1cblxuICB0b1VpbnQ4QXJyYXkgKCkge1xuICAgIGZsdXNoVWludE9wdFJsZUVuY29kZXIodGhpcylcbiAgICByZXR1cm4gdG9VaW50OEFycmF5KHRoaXMuZW5jb2RlcilcbiAgfVxufVxuXG4vKipcbiAqIEluY3JlYXNpbmcgVWludCBPcHRpbWl6ZWQgUkxFIEVuY29kZXJcbiAqXG4gKiBUaGUgUkxFIGVuY29kZXIgY291bnRzIHRoZSBudW1iZXIgb2Ygc2FtZSBvY2N1cmVuY2VzIG9mIHRoZSBzYW1lIHZhbHVlLlxuICogVGhlIEluY1VpbnRPcHRSbGUgZW5jb2RlciBjb3VudHMgaWYgdGhlIHZhbHVlIGluY3JlYXNlcy5cbiAqIEkuZS4gNywgOCwgOSwgMTAgd2lsbCBiZSBlbmNvZGVkIGFzIFstNywgNF0uIDEsIDMsIDUgd2lsbCBiZSBlbmNvZGVkXG4gKiBhcyBbMSwgMywgNV0uXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmNVaW50T3B0UmxlRW5jb2RlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmVuY29kZXIgPSBuZXcgRW5jb2RlcigpXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnMgPSAwXG4gICAgdGhpcy5jb3VudCA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdlxuICAgKi9cbiAgd3JpdGUgKHYpIHtcbiAgICBpZiAodGhpcy5zICsgdGhpcy5jb3VudCA9PT0gdikge1xuICAgICAgdGhpcy5jb3VudCsrXG4gICAgfSBlbHNlIHtcbiAgICAgIGZsdXNoVWludE9wdFJsZUVuY29kZXIodGhpcylcbiAgICAgIHRoaXMuY291bnQgPSAxXG4gICAgICB0aGlzLnMgPSB2XG4gICAgfVxuICB9XG5cbiAgdG9VaW50OEFycmF5ICgpIHtcbiAgICBmbHVzaFVpbnRPcHRSbGVFbmNvZGVyKHRoaXMpXG4gICAgcmV0dXJuIHRvVWludDhBcnJheSh0aGlzLmVuY29kZXIpXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0ludERpZmZPcHRSbGVFbmNvZGVyfSBlbmNvZGVyXG4gKi9cbmNvbnN0IGZsdXNoSW50RGlmZk9wdFJsZUVuY29kZXIgPSBlbmNvZGVyID0+IHtcbiAgaWYgKGVuY29kZXIuY291bnQgPiAwKSB7XG4gICAgLy8gICAgICAgICAgMzEgYml0IG1ha2luZyB1cCB0aGUgZGlmZiB8IHdldGhlciB0byB3cml0ZSB0aGUgY291bnRlclxuICAgIGNvbnN0IGVuY29kZWREaWZmID0gZW5jb2Rlci5kaWZmIDw8IDEgfCAoZW5jb2Rlci5jb3VudCA9PT0gMSA/IDAgOiAxKVxuICAgIC8vIGZsdXNoIGNvdW50ZXIsIHVubGVzcyB0aGlzIGlzIHRoZSBmaXJzdCB2YWx1ZSAoY291bnQgPSAwKVxuICAgIC8vIGNhc2UgMToganVzdCBhIHNpbmdsZSB2YWx1ZS4gc2V0IGZpcnN0IGJpdCB0byBwb3NpdGl2ZVxuICAgIC8vIGNhc2UgMjogd3JpdGUgc2V2ZXJhbCB2YWx1ZXMuIHNldCBmaXJzdCBiaXQgdG8gbmVnYXRpdmUgdG8gaW5kaWNhdGUgdGhhdCB0aGVyZSBpcyBhIGxlbmd0aCBjb21pbmdcbiAgICB3cml0ZVZhckludChlbmNvZGVyLmVuY29kZXIsIGVuY29kZWREaWZmKVxuICAgIGlmIChlbmNvZGVyLmNvdW50ID4gMSkge1xuICAgICAgd3JpdGVWYXJVaW50KGVuY29kZXIuZW5jb2RlciwgZW5jb2Rlci5jb3VudCAtIDIpIC8vIHNpbmNlIGNvdW50IGlzIGFsd2F5cyA+IDEsIHdlIGNhbiBkZWNyZW1lbnQgYnkgb25lLiBub24tc3RhbmRhcmQgZW5jb2RpbmcgZnR3XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQSBjb21iaW5hdGlvbiBvZiB0aGUgSW50RGlmZkVuY29kZXIgYW5kIHRoZSBVaW50T3B0UmxlRW5jb2Rlci5cbiAqXG4gKiBUaGUgY291bnQgYXBwcm9hY2ggaXMgc2ltaWxhciB0byB0aGUgVWludERpZmZPcHRSbGVFbmNvZGVyLCBidXQgaW5zdGVhZCBvZiB1c2luZyB0aGUgbmVnYXRpdmUgYml0ZmxhZywgaXQgZW5jb2Rlc1xuICogaW4gdGhlIExTQiB3aGV0aGVyIGEgY291bnQgaXMgdG8gYmUgcmVhZC4gVGhlcmVmb3JlIHRoaXMgRW5jb2RlciBvbmx5IHN1cHBvcnRzIDMxIGJpdCBpbnRlZ2VycyFcbiAqXG4gKiBFbmNvZGVzIFsxLCAyLCAzLCAyXSBhcyBbMywgMSwgNiwgLTFdIChtb3JlIHNwZWNpZmljYWxseSBbKDEgPDwgMSkgfCAxLCAoMyA8PCAwKSB8IDAsIC0xXSlcbiAqXG4gKiBJbnRlcm5hbGx5IHVzZXMgdmFyaWFibGUgbGVuZ3RoIGVuY29kaW5nLiBDb250cmFyeSB0byBub3JtYWwgVWludFZhciBlbmNvZGluZywgdGhlIGZpcnN0IGJ5dGUgY29udGFpbnM6XG4gKiAqIDEgYml0IHRoYXQgZGVub3RlcyB3aGV0aGVyIHRoZSBuZXh0IHZhbHVlIGlzIGEgY291bnQgKExTQilcbiAqICogMSBiaXQgdGhhdCBkZW5vdGVzIHdoZXRoZXIgdGhpcyB2YWx1ZSBpcyBuZWdhdGl2ZSAoTVNCIC0gMSlcbiAqICogMSBiaXQgdGhhdCBkZW5vdGVzIHdoZXRoZXIgdG8gY29udGludWUgcmVhZGluZyB0aGUgdmFyaWFibGUgbGVuZ3RoIGludGVnZXIgKE1TQilcbiAqXG4gKiBUaGVyZWZvcmUsIG9ubHkgZml2ZSBiaXRzIHJlbWFpbiB0byBlbmNvZGUgZGlmZiByYW5nZXMuXG4gKlxuICogVXNlIHRoaXMgRW5jb2RlciBvbmx5IHdoZW4gYXBwcm9wcmlhdGUuIEluIG1vc3QgY2FzZXMsIHRoaXMgaXMgcHJvYmFibHkgYSBiYWQgaWRlYS5cbiAqL1xuZXhwb3J0IGNsYXNzIEludERpZmZPcHRSbGVFbmNvZGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuZW5jb2RlciA9IG5ldyBFbmNvZGVyKClcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucyA9IDBcbiAgICB0aGlzLmNvdW50ID0gMFxuICAgIHRoaXMuZGlmZiA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdlxuICAgKi9cbiAgd3JpdGUgKHYpIHtcbiAgICBpZiAodGhpcy5kaWZmID09PSB2IC0gdGhpcy5zKSB7XG4gICAgICB0aGlzLnMgPSB2XG4gICAgICB0aGlzLmNvdW50KytcbiAgICB9IGVsc2Uge1xuICAgICAgZmx1c2hJbnREaWZmT3B0UmxlRW5jb2Rlcih0aGlzKVxuICAgICAgdGhpcy5jb3VudCA9IDFcbiAgICAgIHRoaXMuZGlmZiA9IHYgLSB0aGlzLnNcbiAgICAgIHRoaXMucyA9IHZcbiAgICB9XG4gIH1cblxuICB0b1VpbnQ4QXJyYXkgKCkge1xuICAgIGZsdXNoSW50RGlmZk9wdFJsZUVuY29kZXIodGhpcylcbiAgICByZXR1cm4gdG9VaW50OEFycmF5KHRoaXMuZW5jb2RlcilcbiAgfVxufVxuXG4vKipcbiAqIE9wdGltaXplZCBTdHJpbmcgRW5jb2Rlci5cbiAqXG4gKiBFbmNvZGluZyBtYW55IHNtYWxsIHN0cmluZ3MgaW4gYSBzaW1wbGUgRW5jb2RlciBpcyBub3QgdmVyeSBlZmZpY2llbnQuIFRoZSBmdW5jdGlvbiBjYWxsIHRvIGRlY29kZSBhIHN0cmluZyB0YWtlcyBzb21lIHRpbWUgYW5kIGNyZWF0ZXMgcmVmZXJlbmNlcyB0aGF0IG11c3QgYmUgZXZlbnR1YWxseSBkZWxldGVkLlxuICogSW4gcHJhY3RpY2UsIHdoZW4gZGVjb2Rpbmcgc2V2ZXJhbCBtaWxsaW9uIHNtYWxsIHN0cmluZ3MsIHRoZSBHQyB3aWxsIGtpY2sgaW4gbW9yZSBhbmQgbW9yZSBvZnRlbiB0byBjb2xsZWN0IG9ycGhhbmVkIHN0cmluZyBvYmplY3RzIChvciBtYXliZSB0aGVyZSBpcyBhbm90aGVyIHJlYXNvbj8pLlxuICpcbiAqIFRoaXMgc3RyaW5nIGVuY29kZXIgc29sdmVzIHRoZSBhYm92ZSBwcm9ibGVtLiBBbGwgc3RyaW5ncyBhcmUgY29uY2F0ZW5hdGVkIGFuZCB3cml0dGVuIGFzIGEgc2luZ2xlIHN0cmluZyB1c2luZyBhIHNpbmdsZSBlbmNvZGluZyBjYWxsLlxuICpcbiAqIFRoZSBsZW5ndGhzIGFyZSBlbmNvZGVkIHVzaW5nIGEgVWludE9wdFJsZUVuY29kZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJpbmdFbmNvZGVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuc2FyciA9IFtdXG4gICAgdGhpcy5zID0gJydcbiAgICB0aGlzLmxlbnNFID0gbmV3IFVpbnRPcHRSbGVFbmNvZGVyKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gICAqL1xuICB3cml0ZSAoc3RyaW5nKSB7XG4gICAgdGhpcy5zICs9IHN0cmluZ1xuICAgIGlmICh0aGlzLnMubGVuZ3RoID4gMTkpIHtcbiAgICAgIHRoaXMuc2Fyci5wdXNoKHRoaXMucylcbiAgICAgIHRoaXMucyA9ICcnXG4gICAgfVxuICAgIHRoaXMubGVuc0Uud3JpdGUoc3RyaW5nLmxlbmd0aClcbiAgfVxuXG4gIHRvVWludDhBcnJheSAoKSB7XG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBFbmNvZGVyKClcbiAgICB0aGlzLnNhcnIucHVzaCh0aGlzLnMpXG4gICAgdGhpcy5zID0gJydcbiAgICB3cml0ZVZhclN0cmluZyhlbmNvZGVyLCB0aGlzLnNhcnIuam9pbignJykpXG4gICAgd3JpdGVVaW50OEFycmF5KGVuY29kZXIsIHRoaXMubGVuc0UudG9VaW50OEFycmF5KCkpXG4gICAgcmV0dXJuIHRvVWludDhBcnJheShlbmNvZGVyKVxuICB9XG59XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbmNvbnN0IHBlcmYgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHBlcmZvcm1hbmNlXG5cbmNvbnN0IGlzb0NyeXB0byA9IHR5cGVvZiBjcnlwdG8gPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IGNyeXB0b1xuXG4vKipcbiAqIEB0eXBlIHtmdW5jdGlvbihudW1iZXIpOkFycmF5QnVmZmVyfVxuICovXG5jb25zdCBjcnlwdG9SYW5kb21CdWZmZXIgPSBpc29DcnlwdG8gIT09IG51bGxcbiAgPyBsZW4gPT4ge1xuICAgIC8vIGJyb3dzZXJcbiAgICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIobGVuKVxuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICBpc29DcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycilcbiAgICByZXR1cm4gYnVmXG4gIH1cbiAgOiBsZW4gPT4ge1xuICAgIC8vIHBvbHlmaWxsXG4gICAgY29uc3QgYnVmID0gbmV3IEFycmF5QnVmZmVyKGxlbilcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShidWYpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJyW2ldID0gTWF0aC5jZWlsKChNYXRoLnJhbmRvbSgpICogMHhGRkZGRkZGRikgPj4+IDApXG4gICAgfVxuICAgIHJldHVybiBidWZcbiAgfVxuXG5leHBvcnRzLnBlcmZvcm1hbmNlID0gcGVyZlxuZXhwb3J0cy5jcnlwdG9SYW5kb21CdWZmZXIgPSBjcnlwdG9SYW5kb21CdWZmZXJcbiIsIlxuY29uc3QgaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MucmVsZWFzZSAmJiAvbm9kZXxpb1xcLmpzLy50ZXN0KHByb2Nlc3MucmVsZWFzZS5uYW1lKVxuXG5jb25zdCBpc29Ccm93c2VyID0gcmVxdWlyZSgnLi9icm93c2VyLmpzJylcblxuY29uc3QgcGVyZiA9IGlzTm9kZSA/IHJlcXVpcmUoJ3BlcmZfaG9va3MnKS5wZXJmb3JtYW5jZSA6IGlzb0Jyb3dzZXIucGVyZm9ybWFuY2VcbmNvbnN0IG5vZGVDcnlwdG8gPSBpc05vZGUgPyByZXF1aXJlKCdjcnlwdG8nKSA6IG51bGxcblxuLyoqXG4gKiBAdHlwZSB7ZnVuY3Rpb24obnVtYmVyKTpBcnJheUJ1ZmZlcn1cbiAqL1xuY29uc3QgY3J5cHRvUmFuZG9tQnVmZmVyID0gbm9kZUNyeXB0b1xuICAvLyBub2RlXG4gID8gbGVuID0+IG5vZGVDcnlwdG8ucmFuZG9tQnl0ZXMobGVuKS5idWZmZXJcbiAgOiBpc29Ccm93c2VyLmNyeXB0b1JhbmRvbUJ1ZmZlclxuXG5leHBvcnRzLnBlcmZvcm1hbmNlID0gcGVyZlxuZXhwb3J0cy5jcnlwdG9SYW5kb21CdWZmZXIgPSBjcnlwdG9SYW5kb21CdWZmZXJcbiIsIlxuLyoqXG4gKiBJc29tb3JwaGljIG1vZHVsZSBmb3IgdHJ1ZSByYW5kb20gbnVtYmVycyAvIGJ1ZmZlcnMgLyB1dWlkcy5cbiAqXG4gKiBBdHRlbnRpb246IGZhbGxzIGJhY2sgdG8gTWF0aC5yYW5kb20gaWYgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBjcnlwdG8uXG4gKlxuICogQG1vZHVsZSByYW5kb21cbiAqL1xuXG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJy4vbWF0aC5qcydcbmltcG9ydCAqIGFzIGJpbmFyeSBmcm9tICcuL2JpbmFyeS5qcydcbmltcG9ydCB7IGNyeXB0b1JhbmRvbUJ1ZmZlciB9IGZyb20gJy4vaXNvbW9ycGhpYy5qcydcblxuZXhwb3J0IGNvbnN0IHJhbmQgPSBNYXRoLnJhbmRvbVxuXG5leHBvcnQgY29uc3QgdWludDMyID0gKCkgPT4gbmV3IFVpbnQzMkFycmF5KGNyeXB0b1JhbmRvbUJ1ZmZlcig0KSlbMF1cblxuZXhwb3J0IGNvbnN0IHVpbnQ1MyA9ICgpID0+IHtcbiAgY29uc3QgYXJyID0gbmV3IFVpbnQzMkFycmF5KGNyeXB0b1JhbmRvbUJ1ZmZlcig4KSlcbiAgcmV0dXJuIChhcnJbMF0gJiBiaW5hcnkuQklUUzIxKSAqIChiaW5hcnkuQklUUzMyICsgMSkgKyAoYXJyWzFdID4+PiAwKVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge0FycmF5PFQ+fSBhcnJcbiAqIEByZXR1cm4ge1R9XG4gKi9cbmV4cG9ydCBjb25zdCBvbmVPZiA9IGFyciA9PiBhcnJbbWF0aC5mbG9vcihyYW5kKCkgKiBhcnIubGVuZ3RoKV1cblxuLy8gQHRzLWlnbm9yZVxuY29uc3QgdXVpZHY0VGVtcGxhdGUgPSBbMWU3XSArIC0xZTMgKyAtNGUzICsgLThlMyArIC0xZTExXG5leHBvcnQgY29uc3QgdXVpZHY0ID0gKCkgPT4gdXVpZHY0VGVtcGxhdGUucmVwbGFjZSgvWzAxOF0vZywgLyoqIEBwYXJhbSB7bnVtYmVyfSBjICovIGMgPT5cbiAgKGMgXiB1aW50MzIoKSAmIDE1ID4+IGMgLyA0KS50b1N0cmluZygxNilcbilcbiIsIi8qKlxuICogVXRpbGl0eSBtb2R1bGUgdG8gd29yayB3aXRoIHRpbWUuXG4gKlxuICogQG1vZHVsZSB0aW1lXG4gKi9cblxuaW1wb3J0ICogYXMgbWV0cmljIGZyb20gJy4vbWV0cmljLmpzJ1xuaW1wb3J0ICogYXMgbWF0aCBmcm9tICcuL21hdGguanMnXG5cbi8qKlxuICogUmV0dXJuIGN1cnJlbnQgdGltZS5cbiAqXG4gKiBAcmV0dXJuIHtEYXRlfVxuICovXG5leHBvcnQgY29uc3QgZ2V0RGF0ZSA9ICgpID0+IG5ldyBEYXRlKClcblxuLyoqXG4gKiBSZXR1cm4gY3VycmVudCB1bml4IHRpbWUuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgZ2V0VW5peFRpbWUgPSBEYXRlLm5vd1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aW1lIChpbiBtcykgdG8gYSBodW1hbiByZWFkYWJsZSBmb3JtYXQuIEUuZy4gMTEwMCA9PiAxLjFzLiA2MHMgPT4gMW1pbi4gLjAwMSA9PiAxMM68cy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gZCBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHNcbiAqIEByZXR1cm4ge3N0cmluZ30gaHVtYW5pemVkIGFwcHJveGltYXRpb24gb2YgdGltZVxuICovXG5leHBvcnQgY29uc3QgaHVtYW5pemVEdXJhdGlvbiA9IGQgPT4ge1xuICBpZiAoZCA8IDYwMDAwKSB7XG4gICAgY29uc3QgcCA9IG1ldHJpYy5wcmVmaXgoZCwgLTEpXG4gICAgcmV0dXJuIG1hdGgucm91bmQocC5uICogMTAwKSAvIDEwMCArIHAucHJlZml4ICsgJ3MnXG4gIH1cbiAgZCA9IG1hdGguZmxvb3IoZCAvIDEwMDApXG4gIGNvbnN0IHNlY29uZHMgPSBkICUgNjBcbiAgY29uc3QgbWludXRlcyA9IG1hdGguZmxvb3IoZCAvIDYwKSAlIDYwXG4gIGNvbnN0IGhvdXJzID0gbWF0aC5mbG9vcihkIC8gMzYwMCkgJSAyNFxuICBjb25zdCBkYXlzID0gbWF0aC5mbG9vcihkIC8gODY0MDApXG4gIGlmIChkYXlzID4gMCkge1xuICAgIHJldHVybiBkYXlzICsgJ2QnICsgKChob3VycyA+IDAgfHwgbWludXRlcyA+IDMwKSA/ICcgJyArIChtaW51dGVzID4gMzAgPyBob3VycyArIDEgOiBob3VycykgKyAnaCcgOiAnJylcbiAgfVxuICBpZiAoaG91cnMgPiAwKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gaG91cnMgKyAnaCcgKyAoKG1pbnV0ZXMgPiAwIHx8IHNlY29uZHMgPiAzMCkgPyAnICcgKyAoc2Vjb25kcyA+IDMwID8gbWludXRlcyArIDEgOiBtaW51dGVzKSArICdtaW4nIDogJycpXG4gIH1cbiAgcmV0dXJuIG1pbnV0ZXMgKyAnbWluJyArIChzZWNvbmRzID4gMCA/ICcgJyArIHNlY29uZHMgKyAncycgOiAnJylcbn1cbiIsIi8qKlxuICogRXJyb3IgaGVscGVycy5cbiAqXG4gKiBAbW9kdWxlIGVycm9yXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqIEByZXR1cm4ge0Vycm9yfVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gcyA9PiBuZXcgRXJyb3IocylcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHRocm93cyB7RXJyb3J9XG4gKiBAcmV0dXJuIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1ldGhvZFVuaW1wbGVtZW50ZWQgPSAoKSA9PiB7XG4gIHRocm93IGNyZWF0ZSgnTWV0aG9kIHVuaW1wbGVtZW50ZWQnKVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAdGhyb3dzIHtFcnJvcn1cbiAqIEByZXR1cm4ge25ldmVyfVxuICovXG5leHBvcnQgY29uc3QgdW5leHBlY3RlZENhc2UgPSAoKSA9PiB7XG4gIHRocm93IGNyZWF0ZSgnVW5leHBlY3RlZCBjYXNlJylcbn1cbiIsIi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbnMgZm9yIHdvcmtpbmcgd2l0aCBFY21hU2NyaXB0IG9iamVjdHMuXG4gKlxuICogQG1vZHVsZSBvYmplY3RcbiAqL1xuXG4vKipcbiAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsYW55Pn0gb2JqXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSAoKSA9PiBPYmplY3QuY3JlYXRlKG51bGwpXG5cbi8qKlxuICogT2JqZWN0LmFzc2lnblxuICovXG5leHBvcnQgY29uc3QgYXNzaWduID0gT2JqZWN0LmFzc2lnblxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBvYmpcbiAqL1xuZXhwb3J0IGNvbnN0IGtleXMgPSBPYmplY3Qua2V5c1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBvYmpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW55LHN0cmluZyk6YW55fSBmXG4gKi9cbmV4cG9ydCBjb25zdCBmb3JFYWNoID0gKG9iaiwgZikgPT4ge1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBmKG9ialtrZXldLCBrZXkpXG4gIH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgUlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IG9ialxuICogQHBhcmFtIHtmdW5jdGlvbihhbnksc3RyaW5nKTpSfSBmXG4gKiBAcmV0dXJuIHtBcnJheTxSPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hcCA9IChvYmosIGYpID0+IHtcbiAgY29uc3QgcmVzdWx0cyA9IFtdXG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIHJlc3VsdHMucHVzaChmKG9ialtrZXldLCBrZXkpKVxuICB9XG4gIHJldHVybiByZXN1bHRzXG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IG9ialxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgbGVuZ3RoID0gb2JqID0+IGtleXMob2JqKS5sZW5ndGhcblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gb2JqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFueSxzdHJpbmcpOmJvb2xlYW59IGZcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBzb21lID0gKG9iaiwgZikgPT4ge1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAoZihvYmpba2V5XSwga2V5KSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IG9ialxuICogQHBhcmFtIHtmdW5jdGlvbihhbnksc3RyaW5nKTpib29sZWFufSBmXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgZXZlcnkgPSAob2JqLCBmKSA9PiB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmICghZihvYmpba2V5XSwga2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8qKlxuICogQ2FsbHMgYE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlgLlxuICpcbiAqIEBwYXJhbSB7YW55fSBvYmpcbiAqIEBwYXJhbSB7c3RyaW5nfHN5bWJvbH0ga2V5XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgaGFzUHJvcGVydHkgPSAob2JqLCBrZXkpID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gYVxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLGFueT59IGJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBlcXVhbEZsYXQgPSAoYSwgYikgPT4gYSA9PT0gYiB8fCAobGVuZ3RoKGEpID09PSBsZW5ndGgoYikgJiYgZXZlcnkoYSwgKHZhbCwga2V5KSA9PiAodmFsICE9PSB1bmRlZmluZWQgfHwgaGFzUHJvcGVydHkoYiwga2V5KSkgJiYgYltrZXldID09PSB2YWwpKVxuIiwiLyoqXG4gKiBDb21tb24gZnVuY3Rpb25zIGFuZCBmdW5jdGlvbiBjYWxsIGhlbHBlcnMuXG4gKlxuICogQG1vZHVsZSBmdW5jdGlvblxuICovXG5cbmltcG9ydCAqIGFzIGFycmF5IGZyb20gJy4vYXJyYXkuanMnXG5pbXBvcnQgKiBhcyBvYmplY3QgZnJvbSAnLi9vYmplY3QuanMnXG5cbi8qKlxuICogQ2FsbHMgYWxsIGZ1bmN0aW9ucyBpbiBgZnNgIHdpdGggYXJncy4gT25seSB0aHJvd3MgYWZ0ZXIgYWxsIGZ1bmN0aW9ucyB3ZXJlIGNhbGxlZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGZ1bmN0aW9uPn0gZnNcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJnc1xuICovXG5leHBvcnQgY29uc3QgY2FsbEFsbCA9IChmcywgYXJncywgaSA9IDApID0+IHtcbiAgdHJ5IHtcbiAgICBmb3IgKDsgaSA8IGZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmc1tpXSguLi5hcmdzKVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoaSA8IGZzLmxlbmd0aCkge1xuICAgICAgY2FsbEFsbChmcywgYXJncywgaSArIDEpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBub3AgPSAoKSA9PiB7fVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6VH0gZlxuICogQHJldHVybiB7VH1cbiAqL1xuZXhwb3J0IGNvbnN0IGFwcGx5ID0gZiA9PiBmKClcblxuLyoqXG4gKiBAdGVtcGxhdGUgQVxuICpcbiAqIEBwYXJhbSB7QX0gYVxuICogQHJldHVybiB7QX1cbiAqL1xuZXhwb3J0IGNvbnN0IGlkID0gYSA9PiBhXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqXG4gKiBAcGFyYW0ge1R9IGFcbiAqIEBwYXJhbSB7VH0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFsaXR5U3RyaWN0ID0gKGEsIGIpID0+IGEgPT09IGJcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VD58b2JqZWN0fSBhXG4gKiBAcGFyYW0ge0FycmF5PFQ+fG9iamVjdH0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFsaXR5RmxhdCA9IChhLCBiKSA9PiBhID09PSBiIHx8IChhICE9IG51bGwgJiYgYiAhPSBudWxsICYmIGEuY29uc3RydWN0b3IgPT09IGIuY29uc3RydWN0b3IgJiYgKChhIGluc3RhbmNlb2YgQXJyYXkgJiYgYXJyYXkuZXF1YWxGbGF0KGEsIC8qKiBAdHlwZSB7QXJyYXk8VD59ICovIChiKSkpIHx8ICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgb2JqZWN0LmVxdWFsRmxhdChhLCBiKSkpKVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBhXG4gKiBAcGFyYW0ge2FueX0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWFsaXR5RGVlcCA9IChhLCBiKSA9PiB7XG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGVxdWFsaXR5U3RyaWN0KGEsIGIpXG4gIH1cbiAgaWYgKGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgc3dpdGNoIChhLmNvbnN0cnVjdG9yKSB7XG4gICAgY2FzZSBBcnJheUJ1ZmZlcjpcbiAgICAgIGEgPSBuZXcgVWludDhBcnJheShhKVxuICAgICAgYiA9IG5ldyBVaW50OEFycmF5KGIpXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG4gICAgY2FzZSBVaW50OEFycmF5OiB7XG4gICAgICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gICAgY2FzZSBTZXQ6IHtcbiAgICAgIGlmIChhLnNpemUgIT09IGIuc2l6ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgYSkge1xuICAgICAgICBpZiAoIWIuaGFzKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjYXNlIE1hcDoge1xuICAgICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgb2YgYS5rZXlzKCkpIHtcbiAgICAgICAgaWYgKCFiLmhhcyhrZXkpIHx8ICFlcXVhbGl0eURlZXAoYS5nZXQoa2V5KSwgYi5nZXQoa2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gICAgY2FzZSBPYmplY3Q6XG4gICAgICBpZiAob2JqZWN0Lmxlbmd0aChhKSAhPT0gb2JqZWN0Lmxlbmd0aChiKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGEpIHtcbiAgICAgICAgaWYgKCFvYmplY3QuaGFzUHJvcGVydHkoYSwga2V5KSB8fCAhZXF1YWxpdHlEZWVwKGFba2V5XSwgYltrZXldKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIGNhc2UgQXJyYXk6XG4gICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghZXF1YWxpdHlEZWVwKGFbaV0sIGJbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB0cnVlXG59XG4iLCIvKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIHdvcmsgd2l0aCBFY21hU2NyaXB0IFN5bWJvbHMuXG4gKlxuICogQG1vZHVsZSBzeW1ib2xcbiAqL1xuXG4vKipcbiAqIFJldHVybiBmcmVzaCBzeW1ib2wuXG4gKlxuICogQHJldHVybiB7U3ltYm9sfVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gU3ltYm9sXG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHNcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBjb25zdCBpc1N5bWJvbCA9IHMgPT4gdHlwZW9mIHMgPT09ICdzeW1ib2wnXG4iLCIvKipcbiAqIFdvcmtpbmcgd2l0aCB2YWx1ZSBwYWlycy5cbiAqXG4gKiBAbW9kdWxlIHBhaXJcbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBMLFJcbiAqL1xuZXhwb3J0IGNsYXNzIFBhaXIge1xuICAvKipcbiAgICogQHBhcmFtIHtMfSBsZWZ0XG4gICAqIEBwYXJhbSB7Un0gcmlnaHRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChsZWZ0LCByaWdodCkge1xuICAgIHRoaXMubGVmdCA9IGxlZnRcbiAgICB0aGlzLnJpZ2h0ID0gcmlnaHRcbiAgfVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBMLFJcbiAqIEBwYXJhbSB7TH0gbGVmdFxuICogQHBhcmFtIHtSfSByaWdodFxuICogQHJldHVybiB7UGFpcjxMLFI+fVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gKGxlZnQsIHJpZ2h0KSA9PiBuZXcgUGFpcihsZWZ0LCByaWdodClcblxuLyoqXG4gKiBAdGVtcGxhdGUgTCxSXG4gKiBAcGFyYW0ge1J9IHJpZ2h0XG4gKiBAcGFyYW0ge0x9IGxlZnRcbiAqIEByZXR1cm4ge1BhaXI8TCxSPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVJldmVyc2VkID0gKHJpZ2h0LCBsZWZ0KSA9PiBuZXcgUGFpcihsZWZ0LCByaWdodClcblxuLyoqXG4gKiBAdGVtcGxhdGUgTCxSXG4gKiBAcGFyYW0ge0FycmF5PFBhaXI8TCxSPj59IGFyclxuICogQHBhcmFtIHtmdW5jdGlvbihMLCBSKTphbnl9IGZcbiAqL1xuZXhwb3J0IGNvbnN0IGZvckVhY2ggPSAoYXJyLCBmKSA9PiBhcnIuZm9yRWFjaChwID0+IGYocC5sZWZ0LCBwLnJpZ2h0KSlcblxuLyoqXG4gKiBAdGVtcGxhdGUgTCxSLFhcbiAqIEBwYXJhbSB7QXJyYXk8UGFpcjxMLFI+Pn0gYXJyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEwsIFIpOlh9IGZcbiAqIEByZXR1cm4ge0FycmF5PFg+fVxuICovXG5leHBvcnQgY29uc3QgbWFwID0gKGFyciwgZikgPT4gYXJyLm1hcChwID0+IGYocC5sZWZ0LCBwLnJpZ2h0KSlcbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFV0aWxpdHkgbW9kdWxlIHRvIHdvcmsgd2l0aCB0aGUgRE9NLlxuICpcbiAqIEBtb2R1bGUgZG9tXG4gKi9cblxuaW1wb3J0ICogYXMgcGFpciBmcm9tICcuL3BhaXIuanMnXG5pbXBvcnQgKiBhcyBtYXAgZnJvbSAnLi9tYXAuanMnXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIEB0eXBlIHtEb2N1bWVudH1cbiAqL1xuZXhwb3J0IGNvbnN0IGRvYyA9IC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB7fSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgY3JlYXRlRWxlbWVudCA9IG5hbWUgPT4gZG9jLmNyZWF0ZUVsZW1lbnQobmFtZSlcblxuLyoqXG4gKiBAcmV0dXJuIHtEb2N1bWVudEZyYWdtZW50fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZURvY3VtZW50RnJhZ21lbnQgPSAoKSA9PiBkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEByZXR1cm4ge1RleHR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgY3JlYXRlVGV4dE5vZGUgPSB0ZXh0ID0+IGRvYy5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGRvbVBhcnNlciA9IC8qKiBAdHlwZSB7RE9NUGFyc2VyfSAqLyAodHlwZW9mIERPTVBhcnNlciAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgRE9NUGFyc2VyKCkgOiBudWxsKVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBlbWl0Q3VzdG9tRXZlbnQgPSAoZWwsIG5hbWUsIG9wdHMpID0+IGVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KG5hbWUsIG9wdHMpKVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqIEBwYXJhbSB7QXJyYXk8cGFpci5QYWlyPHN0cmluZyxzdHJpbmd8Ym9vbGVhbj4+fSBhdHRycyBBcnJheSBvZiBrZXktdmFsdWUgcGFpcnNcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3Qgc2V0QXR0cmlidXRlcyA9IChlbCwgYXR0cnMpID0+IHtcbiAgcGFpci5mb3JFYWNoKGF0dHJzLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpXG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgJycpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIGVsXG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogQHBhcmFtIHtNYXA8c3RyaW5nLCBzdHJpbmc+fSBhdHRycyBBcnJheSBvZiBrZXktdmFsdWUgcGFpcnNcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3Qgc2V0QXR0cmlidXRlc01hcCA9IChlbCwgYXR0cnMpID0+IHtcbiAgYXR0cnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4geyBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSkgfSlcbiAgcmV0dXJuIGVsXG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxOb2RlPnxIVE1MQ29sbGVjdGlvbn0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge0RvY3VtZW50RnJhZ21lbnR9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgZnJhZ21lbnQgPSBjaGlsZHJlbiA9PiB7XG4gIGNvbnN0IGZyYWdtZW50ID0gY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBhcHBlbmRDaGlsZChmcmFnbWVudCwgY2hpbGRyZW5baV0pXG4gIH1cbiAgcmV0dXJuIGZyYWdtZW50XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBwYXJlbnRcbiAqIEBwYXJhbSB7QXJyYXk8Tm9kZT59IG5vZGVzXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGFwcGVuZCA9IChwYXJlbnQsIG5vZGVzKSA9PiB7XG4gIGFwcGVuZENoaWxkKHBhcmVudCwgZnJhZ21lbnQobm9kZXMpKVxuICByZXR1cm4gcGFyZW50XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCByZW1vdmUgPSBlbCA9PiBlbC5yZW1vdmUoKVxuXG4vKipcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtFdmVudExpc3RlbmVyfSBmXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgYWRkRXZlbnRMaXN0ZW5lciA9IChlbCwgbmFtZSwgZikgPT4gZWwuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmKVxuXG4vKipcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IGVsXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtFdmVudExpc3RlbmVyfSBmXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IChlbCwgbmFtZSwgZikgPT4gZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBmKVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtBcnJheTxwYWlyLlBhaXI8c3RyaW5nLEV2ZW50TGlzdGVuZXI+Pn0gbGlzdGVuZXJzXG4gKiBAcmV0dXJuIHtOb2RlfVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGFkZEV2ZW50TGlzdGVuZXJzID0gKG5vZGUsIGxpc3RlbmVycykgPT4ge1xuICBwYWlyLmZvckVhY2gobGlzdGVuZXJzLCAobmFtZSwgZikgPT4gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBuYW1lLCBmKSlcbiAgcmV0dXJuIG5vZGVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEBwYXJhbSB7QXJyYXk8cGFpci5QYWlyPHN0cmluZyxFdmVudExpc3RlbmVyPj59IGxpc3RlbmVyc1xuICogQHJldHVybiB7Tm9kZX1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCByZW1vdmVFdmVudExpc3RlbmVycyA9IChub2RlLCBsaXN0ZW5lcnMpID0+IHtcbiAgcGFpci5mb3JFYWNoKGxpc3RlbmVycywgKG5hbWUsIGYpID0+IHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgbmFtZSwgZikpXG4gIHJldHVybiBub2RlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7QXJyYXk8cGFpci5QYWlyPHN0cmluZyxzdHJpbmc+fHBhaXIuUGFpcjxzdHJpbmcsYm9vbGVhbj4+fSBhdHRycyBBcnJheSBvZiBrZXktdmFsdWUgcGFpcnNcbiAqIEBwYXJhbSB7QXJyYXk8Tm9kZT59IGNoaWxkcmVuXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGVsZW1lbnQgPSAobmFtZSwgYXR0cnMgPSBbXSwgY2hpbGRyZW4gPSBbXSkgPT5cbiAgYXBwZW5kKHNldEF0dHJpYnV0ZXMoY3JlYXRlRWxlbWVudChuYW1lKSwgYXR0cnMpLCBjaGlsZHJlbilcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBjYW52YXMgPSAod2lkdGgsIGhlaWdodCkgPT4ge1xuICBjb25zdCBjID0gLyoqIEB0eXBlIHtIVE1MQ2FudmFzRWxlbWVudH0gKi8gKGNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpKVxuICBjLmhlaWdodCA9IGhlaWdodFxuICBjLndpZHRoID0gd2lkdGhcbiAgcmV0dXJuIGNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdFxuICogQHJldHVybiB7VGV4dH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCB0ZXh0ID0gY3JlYXRlVGV4dE5vZGVcblxuLyoqXG4gKiBAcGFyYW0ge3BhaXIuUGFpcjxzdHJpbmcsc3RyaW5nPn0gcGFpclxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHBhaXJUb1N0eWxlU3RyaW5nID0gcGFpciA9PiBgJHtwYWlyLmxlZnR9OiR7cGFpci5yaWdodH07YFxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8cGFpci5QYWlyPHN0cmluZyxzdHJpbmc+Pn0gcGFpcnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBwYWlyc1RvU3R5bGVTdHJpbmcgPSBwYWlycyA9PiBwYWlycy5tYXAocGFpclRvU3R5bGVTdHJpbmcpLmpvaW4oJycpXG5cbi8qKlxuICogQHBhcmFtIHtNYXA8c3RyaW5nLHN0cmluZz59IG1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBtYXBUb1N0eWxlU3RyaW5nID0gbSA9PiBtYXAubWFwKG0sICh2YWx1ZSwga2V5KSA9PiBgJHtrZXl9OiR7dmFsdWV9O2ApLmpvaW4oJycpXG5cbi8qKlxuICogQHRvZG8gc2hvdWxkIGFsd2F5cyBxdWVyeSBvbiBhIGRvbSBlbGVtZW50XG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudHxTaGFkb3dSb290fSBlbFxuICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5XG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudCB8IG51bGx9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgcXVlcnlTZWxlY3RvciA9IChlbCwgcXVlcnkpID0+IGVsLnF1ZXJ5U2VsZWN0b3IocXVlcnkpXG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudHxTaGFkb3dSb290fSBlbFxuICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5XG4gKiBAcmV0dXJuIHtOb2RlTGlzdE9mPEhUTUxFbGVtZW50Pn1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBxdWVyeVNlbGVjdG9yQWxsID0gKGVsLCBxdWVyeSkgPT4gZWwucXVlcnlTZWxlY3RvckFsbChxdWVyeSlcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IGdldEVsZW1lbnRCeUlkID0gaWQgPT4gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8gKGRvYy5nZXRFbGVtZW50QnlJZChpZCkpXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3QgX3BhcnNlID0gaHRtbCA9PiBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKGA8aHRtbD48Ym9keT4ke2h0bWx9PC9ib2R5PjwvaHRtbD5gLCAndGV4dC9odG1sJykuYm9keVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gKiBAcmV0dXJuIHtEb2N1bWVudEZyYWdtZW50fVxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlRnJhZ21lbnQgPSBodG1sID0+IGZyYWdtZW50KC8qKiBAdHlwZSB7YW55fSAqLyAoX3BhcnNlKGh0bWwpLmNoaWxkTm9kZXMpKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBwYXJzZUVsZW1lbnQgPSBodG1sID0+IC8qKiBAdHlwZSBIVE1MRWxlbWVudCAqLyAoX3BhcnNlKGh0bWwpLmZpcnN0RWxlbWVudENoaWxkKVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG9sZEVsXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fERvY3VtZW50RnJhZ21lbnR9IG5ld0VsXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgcmVwbGFjZVdpdGggPSAob2xkRWwsIG5ld0VsKSA9PiBvbGRFbC5yZXBsYWNlV2l0aChuZXdFbClcblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcGFyYW0ge05vZGV8bnVsbH0gcmVmXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH1cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpbnNlcnRCZWZvcmUgPSAocGFyZW50LCBlbCwgcmVmKSA9PiBwYXJlbnQuaW5zZXJ0QmVmb3JlKGVsLCByZWYpXG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBwYXJlbnRcbiAqIEBwYXJhbSB7Tm9kZX0gY2hpbGRcbiAqIEByZXR1cm4ge05vZGV9XG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgYXBwZW5kQ2hpbGQgPSAocGFyZW50LCBjaGlsZCkgPT4gcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKVxuXG5leHBvcnQgY29uc3QgRUxFTUVOVF9OT0RFID0gZG9jLkVMRU1FTlRfTk9ERVxuZXhwb3J0IGNvbnN0IFRFWFRfTk9ERSA9IGRvYy5URVhUX05PREVcbmV4cG9ydCBjb25zdCBDREFUQV9TRUNUSU9OX05PREUgPSBkb2MuQ0RBVEFfU0VDVElPTl9OT0RFXG5leHBvcnQgY29uc3QgQ09NTUVOVF9OT0RFID0gZG9jLkNPTU1FTlRfTk9ERVxuZXhwb3J0IGNvbnN0IERPQ1VNRU5UX05PREUgPSBkb2MuRE9DVU1FTlRfTk9ERVxuZXhwb3J0IGNvbnN0IERPQ1VNRU5UX1RZUEVfTk9ERSA9IGRvYy5ET0NVTUVOVF9UWVBFX05PREVcbmV4cG9ydCBjb25zdCBET0NVTUVOVF9GUkFHTUVOVF9OT0RFID0gZG9jLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREVcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gbm9kZVxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrTm9kZVR5cGUgPSAobm9kZSwgdHlwZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gdHlwZVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjaGlsZFxuICovXG5leHBvcnQgY29uc3QgaXNQYXJlbnRPZiA9IChwYXJlbnQsIGNoaWxkKSA9PiB7XG4gIGxldCBwID0gY2hpbGQucGFyZW50Tm9kZVxuICB3aGlsZSAocCAmJiBwICE9PSBwYXJlbnQpIHtcbiAgICBwID0gcC5wYXJlbnROb2RlXG4gIH1cbiAgcmV0dXJuIHAgPT09IHBhcmVudFxufVxuIiwiLyoqXG4gKiBJc29tb3JwaGljIGxvZ2dpbmcgbW9kdWxlIHdpdGggc3VwcG9ydCBmb3IgY29sb3JzIVxuICpcbiAqIEBtb2R1bGUgbG9nZ2luZ1xuICovXG5cbmltcG9ydCAqIGFzIGVudiBmcm9tICcuL2Vudmlyb25tZW50LmpzJ1xuaW1wb3J0ICogYXMgc3ltYm9sIGZyb20gJy4vc3ltYm9sLmpzJ1xuaW1wb3J0ICogYXMgcGFpciBmcm9tICcuL3BhaXIuanMnXG5pbXBvcnQgKiBhcyBkb20gZnJvbSAnLi9kb20uanMnXG5pbXBvcnQgKiBhcyBqc29uIGZyb20gJy4vanNvbi5qcydcbmltcG9ydCAqIGFzIG1hcCBmcm9tICcuL21hcC5qcydcbmltcG9ydCAqIGFzIGV2ZW50bG9vcCBmcm9tICcuL2V2ZW50bG9vcC5qcydcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi9tYXRoLmpzJ1xuaW1wb3J0ICogYXMgdGltZSBmcm9tICcuL3RpbWUuanMnXG5pbXBvcnQgKiBhcyBmdW5jIGZyb20gJy4vZnVuY3Rpb24uanMnXG5cbmV4cG9ydCBjb25zdCBCT0xEID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgVU5CT0xEID0gc3ltYm9sLmNyZWF0ZSgpXG5leHBvcnQgY29uc3QgQkxVRSA9IHN5bWJvbC5jcmVhdGUoKVxuZXhwb3J0IGNvbnN0IEdSRVkgPSBzeW1ib2wuY3JlYXRlKClcbmV4cG9ydCBjb25zdCBHUkVFTiA9IHN5bWJvbC5jcmVhdGUoKVxuZXhwb3J0IGNvbnN0IFJFRCA9IHN5bWJvbC5jcmVhdGUoKVxuZXhwb3J0IGNvbnN0IFBVUlBMRSA9IHN5bWJvbC5jcmVhdGUoKVxuZXhwb3J0IGNvbnN0IE9SQU5HRSA9IHN5bWJvbC5jcmVhdGUoKVxuZXhwb3J0IGNvbnN0IFVOQ09MT1IgPSBzeW1ib2wuY3JlYXRlKClcblxuLyoqXG4gKiBAdHlwZSB7T2JqZWN0PFN5bWJvbCxwYWlyLlBhaXI8c3RyaW5nLHN0cmluZz4+fVxuICovXG5jb25zdCBfYnJvd3NlclN0eWxlTWFwID0ge1xuICBbQk9MRF06IHBhaXIuY3JlYXRlKCdmb250LXdlaWdodCcsICdib2xkJyksXG4gIFtVTkJPTERdOiBwYWlyLmNyZWF0ZSgnZm9udC13ZWlnaHQnLCAnbm9ybWFsJyksXG4gIFtCTFVFXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ2JsdWUnKSxcbiAgW0dSRUVOXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ2dyZWVuJyksXG4gIFtHUkVZXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ2dyZXknKSxcbiAgW1JFRF06IHBhaXIuY3JlYXRlKCdjb2xvcicsICdyZWQnKSxcbiAgW1BVUlBMRV06IHBhaXIuY3JlYXRlKCdjb2xvcicsICdwdXJwbGUnKSxcbiAgW09SQU5HRV06IHBhaXIuY3JlYXRlKCdjb2xvcicsICdvcmFuZ2UnKSwgLy8gbm90IHdlbGwgc3VwcG9ydGVkIGluIGNocm9tZSB3aGVuIGRlYnVnZ2luZyBub2RlIHdpdGggaW5zcGVjdG9yIC0gVE9ETzogZGVwcmVjYXRlXG4gIFtVTkNPTE9SXTogcGFpci5jcmVhdGUoJ2NvbG9yJywgJ2JsYWNrJylcbn1cblxuY29uc3QgX25vZGVTdHlsZU1hcCA9IHtcbiAgW0JPTERdOiAnXFx1MDAxYlsxbScsXG4gIFtVTkJPTERdOiAnXFx1MDAxYlsybScsXG4gIFtCTFVFXTogJ1xceDFiWzM0bScsXG4gIFtHUkVFTl06ICdcXHgxYlszMm0nLFxuICBbR1JFWV06ICdcXHUwMDFiWzM3bScsXG4gIFtSRURdOiAnXFx4MWJbMzFtJyxcbiAgW1BVUlBMRV06ICdcXHgxYlszNW0nLFxuICBbT1JBTkdFXTogJ1xceDFiWzM4OzU7MjA4bScsXG4gIFtVTkNPTE9SXTogJ1xceDFiWzBtJ1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAqIEByZXR1cm4ge0FycmF5PHN0cmluZ3xvYmplY3R8bnVtYmVyPn1cbiAqL1xuY29uc3QgY29tcHV0ZUJyb3dzZXJMb2dnaW5nQXJncyA9IGFyZ3MgPT4ge1xuICBjb25zdCBzdHJCdWlsZGVyID0gW11cbiAgY29uc3Qgc3R5bGVzID0gW11cbiAgY29uc3QgY3VycmVudFN0eWxlID0gbWFwLmNyZWF0ZSgpXG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nfE9iamVjdHxudW1iZXI+fVxuICAgKi9cbiAgbGV0IGxvZ0FyZ3MgPSBbXVxuICAvLyB0cnkgd2l0aCBmb3JtYXR0aW5nIHVudGlsIHdlIGZpbmQgc29tZXRoaW5nIHVuc3VwcG9ydGVkXG4gIGxldCBpID0gMFxuXG4gIGZvciAoOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFyZyA9IGFyZ3NbaV1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3Qgc3R5bGUgPSBfYnJvd3NlclN0eWxlTWFwW2FyZ11cbiAgICBpZiAoc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY3VycmVudFN0eWxlLnNldChzdHlsZS5sZWZ0LCBzdHlsZS5yaWdodClcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGFyZy5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nIHx8IGFyZy5jb25zdHJ1Y3RvciA9PT0gTnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZG9tLm1hcFRvU3R5bGVTdHJpbmcoY3VycmVudFN0eWxlKVxuICAgICAgICBpZiAoaSA+IDAgfHwgc3R5bGUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHN0ckJ1aWxkZXIucHVzaCgnJWMnICsgYXJnKVxuICAgICAgICAgIHN0eWxlcy5wdXNoKHN0eWxlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ckJ1aWxkZXIucHVzaChhcmcpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGkgPiAwKSB7XG4gICAgLy8gY3JlYXRlIGxvZ0FyZ3Mgd2l0aCB3aGF0IHdlIGhhdmUgc28gZmFyXG4gICAgbG9nQXJncyA9IHN0eWxlc1xuICAgIGxvZ0FyZ3MudW5zaGlmdChzdHJCdWlsZGVyLmpvaW4oJycpKVxuICB9XG4gIC8vIGFwcGVuZCB0aGUgcmVzdFxuICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhcmcgPSBhcmdzW2ldXG4gICAgaWYgKCEoYXJnIGluc3RhbmNlb2YgU3ltYm9sKSkge1xuICAgICAgbG9nQXJncy5wdXNoKGFyZylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxvZ0FyZ3Ncbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAqIEByZXR1cm4ge0FycmF5PHN0cmluZ3xvYmplY3R8bnVtYmVyPn1cbiAqL1xuY29uc3QgY29tcHV0ZU5vZGVMb2dnaW5nQXJncyA9IGFyZ3MgPT4ge1xuICBjb25zdCBzdHJCdWlsZGVyID0gW11cbiAgY29uc3QgbG9nQXJncyA9IFtdXG5cbiAgLy8gdHJ5IHdpdGggZm9ybWF0dGluZyB1bnRpbCB3ZSBmaW5kIHNvbWV0aGluZyB1bnN1cHBvcnRlZFxuICBsZXQgaSA9IDBcblxuICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhcmcgPSBhcmdzW2ldXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHN0eWxlID0gX25vZGVTdHlsZU1hcFthcmddXG4gICAgaWYgKHN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0ckJ1aWxkZXIucHVzaChzdHlsZSlcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGFyZy5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nIHx8IGFyZy5jb25zdHJ1Y3RvciA9PT0gTnVtYmVyKSB7XG4gICAgICAgIHN0ckJ1aWxkZXIucHVzaChhcmcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaSA+IDApIHtcbiAgICAvLyBjcmVhdGUgbG9nQXJncyB3aXRoIHdoYXQgd2UgaGF2ZSBzbyBmYXJcbiAgICBzdHJCdWlsZGVyLnB1c2goJ1xceDFiWzBtJylcbiAgICBsb2dBcmdzLnB1c2goc3RyQnVpbGRlci5qb2luKCcnKSlcbiAgfVxuICAvLyBhcHBlbmQgdGhlIHJlc3RcbiAgZm9yICg7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYXJnID0gYXJnc1tpXVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKCEoYXJnIGluc3RhbmNlb2YgU3ltYm9sKSkge1xuICAgICAgbG9nQXJncy5wdXNoKGFyZylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxvZ0FyZ3Ncbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmNvbnN0IGNvbXB1dGVMb2dnaW5nQXJncyA9IGVudi5pc05vZGUgPyBjb21wdXRlTm9kZUxvZ2dpbmdBcmdzIDogY29tcHV0ZUJyb3dzZXJMb2dnaW5nQXJnc1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICovXG5leHBvcnQgY29uc3QgcHJpbnQgPSAoLi4uYXJncykgPT4ge1xuICBjb25zb2xlLmxvZyguLi5jb21wdXRlTG9nZ2luZ0FyZ3MoYXJncykpXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHZjb25zb2xlcy5mb3JFYWNoKHZjID0+IHZjLnByaW50KGFyZ3MpKVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAqL1xuZXhwb3J0IGNvbnN0IHdhcm4gPSAoLi4uYXJncykgPT4ge1xuICBjb25zb2xlLndhcm4oLi4uY29tcHV0ZUxvZ2dpbmdBcmdzKGFyZ3MpKVxuICBhcmdzLnVuc2hpZnQoT1JBTkdFKVxuICB2Y29uc29sZXMuZm9yRWFjaCh2YyA9PiB2Yy5wcmludChhcmdzKSlcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyXG4gKi9cbmV4cG9ydCBjb25zdCBwcmludEVycm9yID0gZXJyID0+IHtcbiAgY29uc29sZS5lcnJvcihlcnIpXG4gIHZjb25zb2xlcy5mb3JFYWNoKHZjID0+IHZjLnByaW50RXJyb3IoZXJyKSlcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBpbWFnZSBsb2NhdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBoZWlnaHQgb2YgdGhlIGltYWdlIGluIHBpeGVsXG4gKi9cbmV4cG9ydCBjb25zdCBwcmludEltZyA9ICh1cmwsIGhlaWdodCkgPT4ge1xuICBpZiAoZW52LmlzQnJvd3Nlcikge1xuICAgIGNvbnNvbGUubG9nKCclYyAgICAgICAgICAgICAgICAgICAgICAnLCBgZm9udC1zaXplOiAke2hlaWdodH1weDsgYmFja2dyb3VuZC1zaXplOiBjb250YWluOyBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OyBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHt1cmx9KWApXG4gICAgLy8gY29uc29sZS5sb2coJyVjICAgICAgICAgICAgICAgICcsIGBmb250LXNpemU6ICR7aGVpZ2h0fXg7IGJhY2tncm91bmQ6IHVybCgke3VybH0pIG5vLXJlcGVhdDtgKVxuICB9XG4gIHZjb25zb2xlcy5mb3JFYWNoKHZjID0+IHZjLnByaW50SW1nKHVybCwgaGVpZ2h0KSlcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICovXG5leHBvcnQgY29uc3QgcHJpbnRJbWdCYXNlNjQgPSAoYmFzZTY0LCBoZWlnaHQpID0+IHByaW50SW1nKGBkYXRhOmltYWdlL2dpZjtiYXNlNjQsJHtiYXNlNjR9YCwgaGVpZ2h0KVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICovXG5leHBvcnQgY29uc3QgZ3JvdXAgPSAoLi4uYXJncykgPT4ge1xuICBjb25zb2xlLmdyb3VwKC4uLmNvbXB1dGVMb2dnaW5nQXJncyhhcmdzKSlcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdmNvbnNvbGVzLmZvckVhY2godmMgPT4gdmMuZ3JvdXAoYXJncykpXG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gKi9cbmV4cG9ydCBjb25zdCBncm91cENvbGxhcHNlZCA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoLi4uY29tcHV0ZUxvZ2dpbmdBcmdzKGFyZ3MpKVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB2Y29uc29sZXMuZm9yRWFjaCh2YyA9PiB2Yy5ncm91cENvbGxhcHNlZChhcmdzKSlcbn1cblxuZXhwb3J0IGNvbnN0IGdyb3VwRW5kID0gKCkgPT4ge1xuICBjb25zb2xlLmdyb3VwRW5kKClcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdmNvbnNvbGVzLmZvckVhY2godmMgPT4gdmMuZ3JvdXBFbmQoKSlcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbigpOk5vZGV9IGNyZWF0ZU5vZGVcbiAqL1xuZXhwb3J0IGNvbnN0IHByaW50RG9tID0gY3JlYXRlTm9kZSA9PlxuICB2Y29uc29sZXMuZm9yRWFjaCh2YyA9PiB2Yy5wcmludERvbShjcmVhdGVOb2RlKCkpKVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAqL1xuZXhwb3J0IGNvbnN0IHByaW50Q2FudmFzID0gKGNhbnZhcywgaGVpZ2h0KSA9PiBwcmludEltZyhjYW52YXMudG9EYXRhVVJMKCksIGhlaWdodClcblxuZXhwb3J0IGNvbnN0IHZjb25zb2xlcyA9IG5ldyBTZXQoKVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuLyoqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xTeW1ib2x8T2JqZWN0fG51bWJlcj59IGFyZ3NcbiAqIEByZXR1cm4ge0FycmF5PEVsZW1lbnQ+fVxuICovXG5jb25zdCBfY29tcHV0ZUxpbmVTcGFucyA9IGFyZ3MgPT4ge1xuICBjb25zdCBzcGFucyA9IFtdXG4gIGNvbnN0IGN1cnJlbnRTdHlsZSA9IG5ldyBNYXAoKVxuICAvLyB0cnkgd2l0aCBmb3JtYXR0aW5nIHVudGlsIHdlIGZpbmQgc29tZXRoaW5nIHVuc3VwcG9ydGVkXG4gIGxldCBpID0gMFxuICBmb3IgKDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhcmcgPSBhcmdzW2ldXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHN0eWxlID0gX2Jyb3dzZXJTdHlsZU1hcFthcmddXG4gICAgaWYgKHN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGN1cnJlbnRTdHlsZS5zZXQoc3R5bGUubGVmdCwgc3R5bGUucmlnaHQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhcmcuY29uc3RydWN0b3IgPT09IFN0cmluZyB8fCBhcmcuY29uc3RydWN0b3IgPT09IE51bWJlcikge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IHNwYW4gPSBkb20uZWxlbWVudCgnc3BhbicsIFtwYWlyLmNyZWF0ZSgnc3R5bGUnLCBkb20ubWFwVG9TdHlsZVN0cmluZyhjdXJyZW50U3R5bGUpKV0sIFtkb20udGV4dChhcmcpXSlcbiAgICAgICAgaWYgKHNwYW4uaW5uZXJIVE1MID09PSAnJykge1xuICAgICAgICAgIHNwYW4uaW5uZXJIVE1MID0gJyZuYnNwOydcbiAgICAgICAgfVxuICAgICAgICBzcGFucy5wdXNoKHNwYW4pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBhcHBlbmQgdGhlIHJlc3RcbiAgZm9yICg7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBhcmdzW2ldXG4gICAgaWYgKCEoY29udGVudCBpbnN0YW5jZW9mIFN5bWJvbCkpIHtcbiAgICAgIGlmIChjb250ZW50LmNvbnN0cnVjdG9yICE9PSBTdHJpbmcgJiYgY29udGVudC5jb25zdHJ1Y3RvciAhPT0gTnVtYmVyKSB7XG4gICAgICAgIGNvbnRlbnQgPSAnICcgKyBqc29uLnN0cmluZ2lmeShjb250ZW50KSArICcgJ1xuICAgICAgfVxuICAgICAgc3BhbnMucHVzaChkb20uZWxlbWVudCgnc3BhbicsIFtdLCBbZG9tLnRleHQoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChjb250ZW50KSldKSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNwYW5zXG59XG5cbmNvbnN0IGxpbmVTdHlsZSA9ICdmb250LWZhbWlseTptb25vc3BhY2U7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2UyZTJlMjtwYWRkaW5nOjJweDsnXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY2xhc3MgVkNvbnNvbGUge1xuICAvKipcbiAgICogQHBhcmFtIHtFbGVtZW50fSBkb21cbiAgICovXG4gIGNvbnN0cnVjdG9yIChkb20pIHtcbiAgICB0aGlzLmRvbSA9IGRvbVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtFbGVtZW50fVxuICAgICAqL1xuICAgIHRoaXMuY2NvbnRhaW5lciA9IHRoaXMuZG9tXG4gICAgdGhpcy5kZXB0aCA9IDBcbiAgICB2Y29uc29sZXMuYWRkKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmd8U3ltYm9sfE9iamVjdHxudW1iZXI+fSBhcmdzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29sbGFwc2VkXG4gICAqL1xuICBncm91cCAoYXJncywgY29sbGFwc2VkID0gZmFsc2UpIHtcbiAgICBldmVudGxvb3AuZW5xdWV1ZSgoKSA9PiB7XG4gICAgICBjb25zdCB0cmlhbmdsZURvd24gPSBkb20uZWxlbWVudCgnc3BhbicsIFtwYWlyLmNyZWF0ZSgnaGlkZGVuJywgY29sbGFwc2VkKSwgcGFpci5jcmVhdGUoJ3N0eWxlJywgJ2NvbG9yOmdyZXk7Zm9udC1zaXplOjEyMCU7JyldLCBbZG9tLnRleHQoJ+KWvCcpXSlcbiAgICAgIGNvbnN0IHRyaWFuZ2xlUmlnaHQgPSBkb20uZWxlbWVudCgnc3BhbicsIFtwYWlyLmNyZWF0ZSgnaGlkZGVuJywgIWNvbGxhcHNlZCksIHBhaXIuY3JlYXRlKCdzdHlsZScsICdjb2xvcjpncmV5O2ZvbnQtc2l6ZToxMjUlOycpXSwgW2RvbS50ZXh0KCfilrYnKV0pXG4gICAgICBjb25zdCBjb250ZW50ID0gZG9tLmVsZW1lbnQoJ2RpdicsIFtwYWlyLmNyZWF0ZSgnc3R5bGUnLCBgJHtsaW5lU3R5bGV9O3BhZGRpbmctbGVmdDoke3RoaXMuZGVwdGggKiAxMH1weGApXSwgW3RyaWFuZ2xlRG93biwgdHJpYW5nbGVSaWdodCwgZG9tLnRleHQoJyAnKV0uY29uY2F0KF9jb21wdXRlTGluZVNwYW5zKGFyZ3MpKSlcbiAgICAgIGNvbnN0IG5leHRDb250YWluZXIgPSBkb20uZWxlbWVudCgnZGl2JywgW3BhaXIuY3JlYXRlKCdoaWRkZW4nLCBjb2xsYXBzZWQpXSlcbiAgICAgIGNvbnN0IG5leHRMaW5lID0gZG9tLmVsZW1lbnQoJ2RpdicsIFtdLCBbY29udGVudCwgbmV4dENvbnRhaW5lcl0pXG4gICAgICBkb20uYXBwZW5kKHRoaXMuY2NvbnRhaW5lciwgW25leHRMaW5lXSlcbiAgICAgIHRoaXMuY2NvbnRhaW5lciA9IG5leHRDb250YWluZXJcbiAgICAgIHRoaXMuZGVwdGgrK1xuICAgICAgLy8gd2hlbiBoZWFkZXIgaXMgY2xpY2tlZCwgY29sbGFwc2UvdW5jb2xsYXBzZSBjb250YWluZXJcbiAgICAgIGRvbS5hZGRFdmVudExpc3RlbmVyKGNvbnRlbnQsICdjbGljaycsIGV2ZW50ID0+IHtcbiAgICAgICAgbmV4dENvbnRhaW5lci50b2dnbGVBdHRyaWJ1dGUoJ2hpZGRlbicpXG4gICAgICAgIHRyaWFuZ2xlRG93bi50b2dnbGVBdHRyaWJ1dGUoJ2hpZGRlbicpXG4gICAgICAgIHRyaWFuZ2xlUmlnaHQudG9nZ2xlQXR0cmlidXRlKCdoaWRkZW4nKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICAgKi9cbiAgZ3JvdXBDb2xsYXBzZWQgKGFyZ3MpIHtcbiAgICB0aGlzLmdyb3VwKGFyZ3MsIHRydWUpXG4gIH1cblxuICBncm91cEVuZCAoKSB7XG4gICAgZXZlbnRsb29wLmVucXVldWUoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuZGVwdGggPiAwKSB7XG4gICAgICAgIHRoaXMuZGVwdGgtLVxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuY2NvbnRhaW5lciA9IHRoaXMuY2NvbnRhaW5lci5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nfFN5bWJvbHxPYmplY3R8bnVtYmVyPn0gYXJnc1xuICAgKi9cbiAgcHJpbnQgKGFyZ3MpIHtcbiAgICBldmVudGxvb3AuZW5xdWV1ZSgoKSA9PiB7XG4gICAgICBkb20uYXBwZW5kKHRoaXMuY2NvbnRhaW5lciwgW2RvbS5lbGVtZW50KCdkaXYnLCBbcGFpci5jcmVhdGUoJ3N0eWxlJywgYCR7bGluZVN0eWxlfTtwYWRkaW5nLWxlZnQ6JHt0aGlzLmRlcHRoICogMTB9cHhgKV0sIF9jb21wdXRlTGluZVNwYW5zKGFyZ3MpKV0pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAgICovXG4gIHByaW50RXJyb3IgKGVycikge1xuICAgIHRoaXMucHJpbnQoW1JFRCwgQk9MRCwgZXJyLnRvU3RyaW5nKCldKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKi9cbiAgcHJpbnRJbWcgKHVybCwgaGVpZ2h0KSB7XG4gICAgZXZlbnRsb29wLmVucXVldWUoKCkgPT4ge1xuICAgICAgZG9tLmFwcGVuZCh0aGlzLmNjb250YWluZXIsIFtkb20uZWxlbWVudCgnaW1nJywgW3BhaXIuY3JlYXRlKCdzcmMnLCB1cmwpLCBwYWlyLmNyZWF0ZSgnaGVpZ2h0JywgYCR7bWF0aC5yb3VuZChoZWlnaHQgKiAxLjUpfXB4YCldKV0pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICovXG4gIHByaW50RG9tIChub2RlKSB7XG4gICAgZXZlbnRsb29wLmVucXVldWUoKCkgPT4ge1xuICAgICAgZG9tLmFwcGVuZCh0aGlzLmNjb250YWluZXIsIFtub2RlXSlcbiAgICB9KVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgZXZlbnRsb29wLmVucXVldWUoKCkgPT4ge1xuICAgICAgdmNvbnNvbGVzLmRlbGV0ZSh0aGlzKVxuICAgIH0pXG4gIH1cbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBkb21cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVZDb25zb2xlID0gZG9tID0+IG5ldyBWQ29uc29sZShkb20pXG5cbmNvbnN0IGxvZ2dpbmdDb2xvcnMgPSBbR1JFRU4sIFBVUlBMRSwgT1JBTkdFLCBCTFVFXVxubGV0IG5leHRDb2xvciA9IDBcbmxldCBsYXN0TG9nZ2luZ1RpbWUgPSB0aW1lLmdldFVuaXhUaW1lKClcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlTmFtZVxuICogQHJldHVybiB7ZnVuY3Rpb24oLi4uYW55KTp2b2lkfVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlTW9kdWxlTG9nZ2VyID0gbW9kdWxlTmFtZSA9PiB7XG4gIGNvbnN0IGNvbG9yID0gbG9nZ2luZ0NvbG9yc1tuZXh0Q29sb3JdXG4gIGNvbnN0IGRlYnVnUmVnZXhWYXIgPSBlbnYuZ2V0VmFyaWFibGUoJ2xvZycpXG4gIGNvbnN0IGRvTG9nZ2luZyA9IGRlYnVnUmVnZXhWYXIgIT09IG51bGwgJiYgKGRlYnVnUmVnZXhWYXIgPT09ICcqJyB8fCBkZWJ1Z1JlZ2V4VmFyID09PSAndHJ1ZScgfHwgbmV3IFJlZ0V4cChkZWJ1Z1JlZ2V4VmFyLCAnZ2knKS50ZXN0KG1vZHVsZU5hbWUpKVxuICBuZXh0Q29sb3IgPSAobmV4dENvbG9yICsgMSkgJSBsb2dnaW5nQ29sb3JzLmxlbmd0aFxuICBtb2R1bGVOYW1lICs9ICc6ICdcblxuICByZXR1cm4gIWRvTG9nZ2luZyA/IGZ1bmMubm9wIDogKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCB0aW1lTm93ID0gdGltZS5nZXRVbml4VGltZSgpXG4gICAgY29uc3QgdGltZURpZmYgPSB0aW1lTm93IC0gbGFzdExvZ2dpbmdUaW1lXG4gICAgbGFzdExvZ2dpbmdUaW1lID0gdGltZU5vd1xuICAgIHByaW50KGNvbG9yLCBtb2R1bGVOYW1lLCBVTkNPTE9SLCAuLi5hcmdzLm1hcChhcmcgPT4gKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnKSA/IGFyZyA6IEpTT04uc3RyaW5naWZ5KGFyZykpLCBjb2xvciwgJyArJyArIHRpbWVEaWZmICsgJ21zJylcbiAgfVxufVxuIiwiLyoqXG4gKiBVdGlsaXR5IG1vZHVsZSB0byBjcmVhdGUgYW5kIG1hbmlwdWxhdGUgSXRlcmF0b3JzLlxuICpcbiAqIEBtb2R1bGUgaXRlcmF0b3JcbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBULFJcbiAqIEBwYXJhbSB7SXRlcmF0b3I8VD59IGl0ZXJhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFQpOlJ9IGZcbiAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8Uj59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXBJdGVyYXRvciA9IChpdGVyYXRvciwgZikgPT4gKHtcbiAgW1N5bWJvbC5pdGVyYXRvcl0gKCkge1xuICAgIHJldHVybiB0aGlzXG4gIH0sXG4gIC8vIEB0cy1pZ25vcmVcbiAgbmV4dCAoKSB7XG4gICAgY29uc3QgciA9IGl0ZXJhdG9yLm5leHQoKVxuICAgIHJldHVybiB7IHZhbHVlOiByLmRvbmUgPyB1bmRlZmluZWQgOiBmKHIudmFsdWUpLCBkb25lOiByLmRvbmUgfVxuICB9XG59KVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6SXRlcmF0b3JSZXN1bHQ8VD59IG5leHRcbiAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8VD59XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVJdGVyYXRvciA9IG5leHQgPT4gKHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8VD59XG4gICAqL1xuICBbU3ltYm9sLml0ZXJhdG9yXSAoKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcbiAgLy8gQHRzLWlnbm9yZVxuICBuZXh0XG59KVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge0l0ZXJhdG9yPFQ+fSBpdGVyYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbihUKTpib29sZWFufSBmaWx0ZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGl0ZXJhdG9yRmlsdGVyID0gKGl0ZXJhdG9yLCBmaWx0ZXIpID0+IGNyZWF0ZUl0ZXJhdG9yKCgpID0+IHtcbiAgbGV0IHJlc1xuICBkbyB7XG4gICAgcmVzID0gaXRlcmF0b3IubmV4dCgpXG4gIH0gd2hpbGUgKCFyZXMuZG9uZSAmJiAhZmlsdGVyKHJlcy52YWx1ZSkpXG4gIHJldHVybiByZXNcbn0pXG5cbi8qKlxuICogQHRlbXBsYXRlIFQsTVxuICogQHBhcmFtIHtJdGVyYXRvcjxUPn0gaXRlcmF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCk6TX0gZm1hcFxuICovXG5leHBvcnQgY29uc3QgaXRlcmF0b3JNYXAgPSAoaXRlcmF0b3IsIGZtYXApID0+IGNyZWF0ZUl0ZXJhdG9yKCgpID0+IHtcbiAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gaXRlcmF0b3IubmV4dCgpXG4gIHJldHVybiB7IGRvbmUsIHZhbHVlOiBkb25lID8gdW5kZWZpbmVkIDogZm1hcCh2YWx1ZSkgfVxufSlcbiIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdsaWIwL29ic2VydmFibGUnO1xuaW1wb3J0ICogYXMgYXJyYXkgZnJvbSAnbGliMC9hcnJheSc7XG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJ2xpYjAvbWF0aCc7XG5pbXBvcnQgKiBhcyBtYXAgZnJvbSAnbGliMC9tYXAnO1xuaW1wb3J0ICogYXMgZW5jb2RpbmcgZnJvbSAnbGliMC9lbmNvZGluZyc7XG5pbXBvcnQgKiBhcyBkZWNvZGluZyBmcm9tICdsaWIwL2RlY29kaW5nJztcbmltcG9ydCAqIGFzIHJhbmRvbSBmcm9tICdsaWIwL3JhbmRvbSc7XG5pbXBvcnQgKiBhcyBwcm9taXNlIGZyb20gJ2xpYjAvcHJvbWlzZSc7XG5pbXBvcnQgKiBhcyBidWZmZXIgZnJvbSAnbGliMC9idWZmZXInO1xuaW1wb3J0ICogYXMgZXJyb3IgZnJvbSAnbGliMC9lcnJvcic7XG5pbXBvcnQgKiBhcyBiaW5hcnkgZnJvbSAnbGliMC9iaW5hcnknO1xuaW1wb3J0ICogYXMgZiBmcm9tICdsaWIwL2Z1bmN0aW9uJztcbmltcG9ydCB7IGNhbGxBbGwgfSBmcm9tICdsaWIwL2Z1bmN0aW9uJztcbmltcG9ydCAqIGFzIHNldCBmcm9tICdsaWIwL3NldCc7XG5pbXBvcnQgKiBhcyBsb2dnaW5nIGZyb20gJ2xpYjAvbG9nZ2luZyc7XG5pbXBvcnQgKiBhcyB0aW1lIGZyb20gJ2xpYjAvdGltZSc7XG5pbXBvcnQgKiBhcyBpdGVyYXRvciBmcm9tICdsaWIwL2l0ZXJhdG9yJztcbmltcG9ydCAqIGFzIG9iamVjdCBmcm9tICdsaWIwL29iamVjdCc7XG5cbi8qKlxuICogVGhpcyBpcyBhbiBhYnN0cmFjdCBpbnRlcmZhY2UgdGhhdCBhbGwgQ29ubmVjdG9ycyBzaG91bGQgaW1wbGVtZW50IHRvIGtlZXAgdGhlbSBpbnRlcmNoYW5nZWFibGUuXG4gKlxuICogQG5vdGUgVGhpcyBpbnRlcmZhY2UgaXMgZXhwZXJpbWVudGFsIGFuZCBpdCBpcyBub3QgYWR2aXNlZCB0byBhY3R1YWxseSBpbmhlcml0IHRoaXMgY2xhc3MuXG4gKiAgICAgICBJdCBqdXN0IHNlcnZlcyBhcyB0eXBpbmcgaW5mb3JtYXRpb24uXG4gKlxuICogQGV4dGVuZHMge09ic2VydmFibGU8YW55Pn1cbiAqL1xuY2xhc3MgQWJzdHJhY3RDb25uZWN0b3IgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RG9jfSB5ZG9jXG4gICAqIEBwYXJhbSB7YW55fSBhd2FyZW5lc3NcbiAgICovXG4gIGNvbnN0cnVjdG9yICh5ZG9jLCBhd2FyZW5lc3MpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZG9jID0geWRvYztcbiAgICB0aGlzLmF3YXJlbmVzcyA9IGF3YXJlbmVzcztcbiAgfVxufVxuXG5jbGFzcyBEZWxldGVJdGVtIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1xuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoY2xvY2ssIGxlbikge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5jbG9jayA9IGNsb2NrO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sZW4gPSBsZW47XG4gIH1cbn1cblxuLyoqXG4gKiBXZSBubyBsb25nZXIgbWFpbnRhaW4gYSBEZWxldGVTdG9yZS4gRGVsZXRlU2V0IGlzIGEgdGVtcG9yYXJ5IG9iamVjdCB0aGF0IGlzIGNyZWF0ZWQgd2hlbiBuZWVkZWQuXG4gKiAtIFdoZW4gY3JlYXRlZCBpbiBhIHRyYW5zYWN0aW9uLCBpdCBtdXN0IG9ubHkgYmUgYWNjZXNzZWQgYWZ0ZXIgc29ydGluZywgYW5kIG1lcmdpbmdcbiAqICAgLSBUaGlzIERlbGV0ZVNldCBpcyBzZW5kIHRvIG90aGVyIGNsaWVudHNcbiAqIC0gV2UgZG8gbm90IGNyZWF0ZSBhIERlbGV0ZVNldCB3aGVuIHdlIHNlbmQgYSBzeW5jIG1lc3NhZ2UuIFRoZSBEZWxldGVTZXQgbWVzc2FnZSBpcyBjcmVhdGVkIGRpcmVjdGx5IGZyb20gU3RydWN0U3RvcmVcbiAqIC0gV2UgcmVhZCBhIERlbGV0ZVNldCBhcyBwYXJ0IG9mIGEgc3luYy91cGRhdGUgbWVzc2FnZS4gSW4gdGhpcyBjYXNlIHRoZSBEZWxldGVTZXQgaXMgYWxyZWFkeSBzb3J0ZWQgYW5kIG1lcmdlZC5cbiAqL1xuY2xhc3MgRGVsZXRlU2V0IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8bnVtYmVyLEFycmF5PERlbGV0ZUl0ZW0+Pn1cbiAgICAgKi9cbiAgICB0aGlzLmNsaWVudHMgPSBuZXcgTWFwKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHN0cnVjdHMgdGhhdCB0aGUgRGVsZXRlU2V0IGdjJ3MuXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICogQHBhcmFtIHtmdW5jdGlvbihHQ3xJdGVtKTp2b2lkfSBmXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGl0ZXJhdGVEZWxldGVkU3RydWN0cyA9ICh0cmFuc2FjdGlvbiwgZHMsIGYpID0+XG4gIGRzLmNsaWVudHMuZm9yRWFjaCgoZGVsZXRlcywgY2xpZW50aWQpID0+IHtcbiAgICBjb25zdCBzdHJ1Y3RzID0gLyoqIEB0eXBlIHtBcnJheTxHQ3xJdGVtPn0gKi8gKHRyYW5zYWN0aW9uLmRvYy5zdG9yZS5jbGllbnRzLmdldChjbGllbnRpZCkpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVsZXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZGVsID0gZGVsZXRlc1tpXTtcbiAgICAgIGl0ZXJhdGVTdHJ1Y3RzKHRyYW5zYWN0aW9uLCBzdHJ1Y3RzLCBkZWwuY2xvY2ssIGRlbC5sZW4sIGYpO1xuICAgIH1cbiAgfSk7XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxEZWxldGVJdGVtPn0gZGlzXG4gKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAqIEByZXR1cm4ge251bWJlcnxudWxsfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZmluZEluZGV4RFMgPSAoZGlzLCBjbG9jaykgPT4ge1xuICBsZXQgbGVmdCA9IDA7XG4gIGxldCByaWdodCA9IGRpcy5sZW5ndGggLSAxO1xuICB3aGlsZSAobGVmdCA8PSByaWdodCkge1xuICAgIGNvbnN0IG1pZGluZGV4ID0gbWF0aC5mbG9vcigobGVmdCArIHJpZ2h0KSAvIDIpO1xuICAgIGNvbnN0IG1pZCA9IGRpc1ttaWRpbmRleF07XG4gICAgY29uc3QgbWlkY2xvY2sgPSBtaWQuY2xvY2s7XG4gICAgaWYgKG1pZGNsb2NrIDw9IGNsb2NrKSB7XG4gICAgICBpZiAoY2xvY2sgPCBtaWRjbG9jayArIG1pZC5sZW4pIHtcbiAgICAgICAgcmV0dXJuIG1pZGluZGV4XG4gICAgICB9XG4gICAgICBsZWZ0ID0gbWlkaW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByaWdodCA9IG1pZGluZGV4IC0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKiBAcGFyYW0ge0lEfSBpZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGlzRGVsZXRlZCA9IChkcywgaWQpID0+IHtcbiAgY29uc3QgZGlzID0gZHMuY2xpZW50cy5nZXQoaWQuY2xpZW50KTtcbiAgcmV0dXJuIGRpcyAhPT0gdW5kZWZpbmVkICYmIGZpbmRJbmRleERTKGRpcywgaWQuY2xvY2spICE9PSBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3Qgc29ydEFuZE1lcmdlRGVsZXRlU2V0ID0gZHMgPT4ge1xuICBkcy5jbGllbnRzLmZvckVhY2goZGVscyA9PiB7XG4gICAgZGVscy5zb3J0KChhLCBiKSA9PiBhLmNsb2NrIC0gYi5jbG9jayk7XG4gICAgLy8gbWVyZ2UgaXRlbXMgd2l0aG91dCBmaWx0ZXJpbmcgb3Igc3BsaWNpbmcgdGhlIGFycmF5XG4gICAgLy8gaSBpcyB0aGUgY3VycmVudCBwb2ludGVyXG4gICAgLy8gaiByZWZlcnMgdG8gdGhlIGN1cnJlbnQgaW5zZXJ0IHBvc2l0aW9uIGZvciB0aGUgcG9pbnRlZCBpdGVtXG4gICAgLy8gdHJ5IHRvIG1lcmdlIGRlbHNbaV0gaW50byBkZWxzW2otMV0gb3Igc2V0IGRlbHNbal09ZGVsc1tpXVxuICAgIGxldCBpLCBqO1xuICAgIGZvciAoaSA9IDEsIGogPSAxOyBpIDwgZGVscy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGVmdCA9IGRlbHNbaiAtIDFdO1xuICAgICAgY29uc3QgcmlnaHQgPSBkZWxzW2ldO1xuICAgICAgaWYgKGxlZnQuY2xvY2sgKyBsZWZ0LmxlbiA+PSByaWdodC5jbG9jaykge1xuICAgICAgICBsZWZ0LmxlbiA9IG1hdGgubWF4KGxlZnQubGVuLCByaWdodC5jbG9jayArIHJpZ2h0LmxlbiAtIGxlZnQuY2xvY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGogPCBpKSB7XG4gICAgICAgICAgZGVsc1tqXSA9IHJpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgZGVscy5sZW5ndGggPSBqO1xuICB9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxEZWxldGVTZXQ+fSBkc3NcbiAqIEByZXR1cm4ge0RlbGV0ZVNldH0gQSBmcmVzaCBEZWxldGVTZXRcbiAqL1xuY29uc3QgbWVyZ2VEZWxldGVTZXRzID0gZHNzID0+IHtcbiAgY29uc3QgbWVyZ2VkID0gbmV3IERlbGV0ZVNldCgpO1xuICBmb3IgKGxldCBkc3NJID0gMDsgZHNzSSA8IGRzcy5sZW5ndGg7IGRzc0krKykge1xuICAgIGRzc1tkc3NJXS5jbGllbnRzLmZvckVhY2goKGRlbHNMZWZ0LCBjbGllbnQpID0+IHtcbiAgICAgIGlmICghbWVyZ2VkLmNsaWVudHMuaGFzKGNsaWVudCkpIHtcbiAgICAgICAgLy8gV3JpdGUgYWxsIG1pc3Npbmcga2V5cyBmcm9tIGN1cnJlbnQgZHMgYW5kIGFsbCBmb2xsb3dpbmcuXG4gICAgICAgIC8vIElmIG1lcmdlZCBhbHJlYWR5IGNvbnRhaW5zIGBjbGllbnRgIGN1cnJlbnQgZHMgaGFzIGFscmVhZHkgYmVlbiBhZGRlZC5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtBcnJheTxEZWxldGVJdGVtPn1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGRlbHMgPSBkZWxzTGVmdC5zbGljZSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gZHNzSSArIDE7IGkgPCBkc3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcnJheS5hcHBlbmRUbyhkZWxzLCBkc3NbaV0uY2xpZW50cy5nZXQoY2xpZW50KSB8fCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgbWVyZ2VkLmNsaWVudHMuc2V0KGNsaWVudCwgZGVscyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgc29ydEFuZE1lcmdlRGVsZXRlU2V0KG1lcmdlZCk7XG4gIHJldHVybiBtZXJnZWRcbn07XG5cbi8qKlxuICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gKiBAcGFyYW0ge251bWJlcn0gY2xpZW50XG4gKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGFkZFRvRGVsZXRlU2V0ID0gKGRzLCBjbGllbnQsIGNsb2NrLCBsZW5ndGgpID0+IHtcbiAgbWFwLnNldElmVW5kZWZpbmVkKGRzLmNsaWVudHMsIGNsaWVudCwgKCkgPT4gW10pLnB1c2gobmV3IERlbGV0ZUl0ZW0oY2xvY2ssIGxlbmd0aCkpO1xufTtcblxuY29uc3QgY3JlYXRlRGVsZXRlU2V0ID0gKCkgPT4gbmV3IERlbGV0ZVNldCgpO1xuXG4vKipcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHNzXG4gKiBAcmV0dXJuIHtEZWxldGVTZXR9IE1lcmdlZCBhbmQgc29ydGVkIERlbGV0ZVNldFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY3JlYXRlRGVsZXRlU2V0RnJvbVN0cnVjdFN0b3JlID0gc3MgPT4ge1xuICBjb25zdCBkcyA9IGNyZWF0ZURlbGV0ZVNldCgpO1xuICBzcy5jbGllbnRzLmZvckVhY2goKHN0cnVjdHMsIGNsaWVudCkgPT4ge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxEZWxldGVJdGVtPn1cbiAgICAgKi9cbiAgICBjb25zdCBkc2l0ZW1zID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJ1Y3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzdHJ1Y3QgPSBzdHJ1Y3RzW2ldO1xuICAgICAgaWYgKHN0cnVjdC5kZWxldGVkKSB7XG4gICAgICAgIGNvbnN0IGNsb2NrID0gc3RydWN0LmlkLmNsb2NrO1xuICAgICAgICBsZXQgbGVuID0gc3RydWN0Lmxlbmd0aDtcbiAgICAgICAgaWYgKGkgKyAxIDwgc3RydWN0cy5sZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKGxldCBuZXh0ID0gc3RydWN0c1tpICsgMV07IGkgKyAxIDwgc3RydWN0cy5sZW5ndGggJiYgbmV4dC5kZWxldGVkOyBuZXh0ID0gc3RydWN0c1srK2kgKyAxXSkge1xuICAgICAgICAgICAgbGVuICs9IG5leHQubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkc2l0ZW1zLnB1c2gobmV3IERlbGV0ZUl0ZW0oY2xvY2ssIGxlbikpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZHNpdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICBkcy5jbGllbnRzLnNldChjbGllbnQsIGRzaXRlbXMpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkc1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0RTRW5jb2RlclYxIHwgRFNFbmNvZGVyVjJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3Qgd3JpdGVEZWxldGVTZXQgPSAoZW5jb2RlciwgZHMpID0+IHtcbiAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGRzLmNsaWVudHMuc2l6ZSk7XG4gIGRzLmNsaWVudHMuZm9yRWFjaCgoZHNpdGVtcywgY2xpZW50KSA9PiB7XG4gICAgZW5jb2Rlci5yZXNldERzQ3VyVmFsKCk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGNsaWVudCk7XG4gICAgY29uc3QgbGVuID0gZHNpdGVtcy5sZW5ndGg7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGxlbik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGRzaXRlbXNbaV07XG4gICAgICBlbmNvZGVyLndyaXRlRHNDbG9jayhpdGVtLmNsb2NrKTtcbiAgICAgIGVuY29kZXIud3JpdGVEc0xlbihpdGVtLmxlbik7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtEU0RlY29kZXJWMSB8IERTRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtEZWxldGVTZXR9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkRGVsZXRlU2V0ID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IGRzID0gbmV3IERlbGV0ZVNldCgpO1xuICBjb25zdCBudW1DbGllbnRzID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ2xpZW50czsgaSsrKSB7XG4gICAgZGVjb2Rlci5yZXNldERzQ3VyVmFsKCk7XG4gICAgY29uc3QgY2xpZW50ID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgY29uc3QgbnVtYmVyT2ZEZWxldGVzID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgaWYgKG51bWJlck9mRGVsZXRlcyA+IDApIHtcbiAgICAgIGNvbnN0IGRzRmllbGQgPSBtYXAuc2V0SWZVbmRlZmluZWQoZHMuY2xpZW50cywgY2xpZW50LCAoKSA9PiBbXSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mRGVsZXRlczsgaSsrKSB7XG4gICAgICAgIGRzRmllbGQucHVzaChuZXcgRGVsZXRlSXRlbShkZWNvZGVyLnJlYWREc0Nsb2NrKCksIGRlY29kZXIucmVhZERzTGVuKCkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRzXG59O1xuXG4vKipcbiAqIEB0b2RvIFlEZWNvZGVyIGFsc28gY29udGFpbnMgcmVmZXJlbmNlcyB0byBTdHJpbmcgYW5kIG90aGVyIERlY29kZXJzLiBXb3VsZCBtYWtlIHNlbnNlIHRvIGV4Y2hhbmdlIFlEZWNvZGVyLnRvVWludDhBcnJheSBmb3IgWURlY29kZXIuRHNUb1VpbnQ4QXJyYXkoKS4uXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0RTRGVjb2RlclYxIHwgRFNEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHJldHVybiB7VWludDhBcnJheXxudWxsfSBSZXR1cm5zIGEgdjIgdXBkYXRlIGNvbnRhaW5pbmcgYWxsIGRlbGV0ZXMgdGhhdCBjb3VsZG4ndCBiZSBhcHBsaWVkIHlldDsgb3IgbnVsbCBpZiBhbGwgZGVsZXRlcyB3ZXJlIGFwcGxpZWQgc3VjY2Vzc2Z1bGx5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZEFuZEFwcGx5RGVsZXRlU2V0ID0gKGRlY29kZXIsIHRyYW5zYWN0aW9uLCBzdG9yZSkgPT4ge1xuICBjb25zdCB1bmFwcGxpZWREUyA9IG5ldyBEZWxldGVTZXQoKTtcbiAgY29uc3QgbnVtQ2xpZW50cyA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNsaWVudHM7IGkrKykge1xuICAgIGRlY29kZXIucmVzZXREc0N1clZhbCgpO1xuICAgIGNvbnN0IGNsaWVudCA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgIGNvbnN0IG51bWJlck9mRGVsZXRlcyA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgIGNvbnN0IHN0cnVjdHMgPSBzdG9yZS5jbGllbnRzLmdldChjbGllbnQpIHx8IFtdO1xuICAgIGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoc3RvcmUsIGNsaWVudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkRlbGV0ZXM7IGkrKykge1xuICAgICAgY29uc3QgY2xvY2sgPSBkZWNvZGVyLnJlYWREc0Nsb2NrKCk7XG4gICAgICBjb25zdCBjbG9ja0VuZCA9IGNsb2NrICsgZGVjb2Rlci5yZWFkRHNMZW4oKTtcbiAgICAgIGlmIChjbG9jayA8IHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSA8IGNsb2NrRW5kKSB7XG4gICAgICAgICAgYWRkVG9EZWxldGVTZXQodW5hcHBsaWVkRFMsIGNsaWVudCwgc3RhdGUsIGNsb2NrRW5kIC0gc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpbmRleCA9IGZpbmRJbmRleFNTKHN0cnVjdHMsIGNsb2NrKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlIGNhbiBpZ25vcmUgdGhlIGNhc2Ugb2YgR0MgYW5kIERlbGV0ZSBzdHJ1Y3RzLCBiZWNhdXNlIHdlIGFyZSBnb2luZyB0byBza2lwIHRoZW1cbiAgICAgICAgICogQHR5cGUge0l0ZW19XG4gICAgICAgICAqL1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGxldCBzdHJ1Y3QgPSBzdHJ1Y3RzW2luZGV4XTtcbiAgICAgICAgLy8gc3BsaXQgdGhlIGZpcnN0IGl0ZW0gaWYgbmVjZXNzYXJ5XG4gICAgICAgIGlmICghc3RydWN0LmRlbGV0ZWQgJiYgc3RydWN0LmlkLmNsb2NrIDwgY2xvY2spIHtcbiAgICAgICAgICBzdHJ1Y3RzLnNwbGljZShpbmRleCArIDEsIDAsIHNwbGl0SXRlbSh0cmFuc2FjdGlvbiwgc3RydWN0LCBjbG9jayAtIHN0cnVjdC5pZC5jbG9jaykpO1xuICAgICAgICAgIGluZGV4Kys7IC8vIGluY3JlYXNlIHdlIG5vdyB3YW50IHRvIHVzZSB0aGUgbmV4dCBzdHJ1Y3RcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXggPCBzdHJ1Y3RzLmxlbmd0aCkge1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBzdHJ1Y3QgPSBzdHJ1Y3RzW2luZGV4KytdO1xuICAgICAgICAgIGlmIChzdHJ1Y3QuaWQuY2xvY2sgPCBjbG9ja0VuZCkge1xuICAgICAgICAgICAgaWYgKCFzdHJ1Y3QuZGVsZXRlZCkge1xuICAgICAgICAgICAgICBpZiAoY2xvY2tFbmQgPCBzdHJ1Y3QuaWQuY2xvY2sgKyBzdHJ1Y3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3RydWN0cy5zcGxpY2UoaW5kZXgsIDAsIHNwbGl0SXRlbSh0cmFuc2FjdGlvbiwgc3RydWN0LCBjbG9ja0VuZCAtIHN0cnVjdC5pZC5jbG9jaykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN0cnVjdC5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkVG9EZWxldGVTZXQodW5hcHBsaWVkRFMsIGNsaWVudCwgY2xvY2ssIGNsb2NrRW5kIC0gY2xvY2spO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodW5hcHBsaWVkRFMuY2xpZW50cy5zaXplID4gMCkge1xuICAgIGNvbnN0IGRzID0gbmV3IFVwZGF0ZUVuY29kZXJWMigpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChkcy5yZXN0RW5jb2RlciwgMCk7IC8vIGVuY29kZSAwIHN0cnVjdHNcbiAgICB3cml0ZURlbGV0ZVNldChkcywgdW5hcHBsaWVkRFMpO1xuICAgIHJldHVybiBkcy50b1VpbnQ4QXJyYXkoKVxuICB9XG4gIHJldHVybiBudWxsXG59O1xuXG4vKipcbiAqIEBtb2R1bGUgWVxuICovXG5cbmNvbnN0IGdlbmVyYXRlTmV3Q2xpZW50SWQgPSByYW5kb20udWludDMyO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IERvY09wdHNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW0RvY09wdHMuZ2M9dHJ1ZV0gRGlzYWJsZSBnYXJiYWdlIGNvbGxlY3Rpb24gKGRlZmF1bHQ6IGdjPXRydWUpXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKEl0ZW0pOmJvb2xlYW59IFtEb2NPcHRzLmdjRmlsdGVyXSBXaWxsIGJlIGNhbGxlZCBiZWZvcmUgYW4gSXRlbSBpcyBnYXJiYWdlIGNvbGxlY3RlZC4gUmV0dXJuIGZhbHNlIHRvIGtlZXAgdGhlIEl0ZW0uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0RvY09wdHMuZ3VpZF0gRGVmaW5lIGEgZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgZG9jdW1lbnRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgbnVsbH0gW0RvY09wdHMuY29sbGVjdGlvbmlkXSBBc3NvY2lhdGUgdGhpcyBkb2N1bWVudCB3aXRoIGEgY29sbGVjdGlvbi4gVGhpcyBvbmx5IHBsYXlzIGEgcm9sZSBpZiB5b3VyIHByb3ZpZGVyIGhhcyBhIGNvbmNlcHQgb2YgY29sbGVjdGlvbi5cbiAqIEBwcm9wZXJ0eSB7YW55fSBbRG9jT3B0cy5tZXRhXSBBbnkga2luZCBvZiBtZXRhIGluZm9ybWF0aW9uIHlvdSB3YW50IHRvIGFzc29jaWF0ZSB3aXRoIHRoaXMgZG9jdW1lbnQuIElmIHRoaXMgaXMgYSBzdWJkb2N1bWVudCwgcmVtb3RlIHBlZXJzIHdpbGwgc3RvcmUgdGhlIG1ldGEgaW5mb3JtYXRpb24gYXMgd2VsbC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW0RvY09wdHMuYXV0b0xvYWRdIElmIGEgc3ViZG9jdW1lbnQsIGF1dG9tYXRpY2FsbHkgbG9hZCBkb2N1bWVudC4gSWYgdGhpcyBpcyBhIHN1YmRvY3VtZW50LCByZW1vdGUgcGVlcnMgd2lsbCBsb2FkIHRoZSBkb2N1bWVudCBhcyB3ZWxsIGF1dG9tYXRpY2FsbHkuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtEb2NPcHRzLnNob3VsZExvYWRdIFdoZXRoZXIgdGhlIGRvY3VtZW50IHNob3VsZCBiZSBzeW5jZWQgYnkgdGhlIHByb3ZpZGVyIG5vdy4gVGhpcyBpcyB0b2dnbGVkIHRvIHRydWUgd2hlbiB5b3UgY2FsbCB5ZG9jLmxvYWQoKVxuICovXG5cbi8qKlxuICogQSBZanMgaW5zdGFuY2UgaGFuZGxlcyB0aGUgc3RhdGUgb2Ygc2hhcmVkIGRhdGEuXG4gKiBAZXh0ZW5kcyBPYnNlcnZhYmxlPHN0cmluZz5cbiAqL1xuY2xhc3MgRG9jIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY09wdHN9IFtvcHRzXSBjb25maWd1cmF0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoeyBndWlkID0gcmFuZG9tLnV1aWR2NCgpLCBjb2xsZWN0aW9uaWQgPSBudWxsLCBnYyA9IHRydWUsIGdjRmlsdGVyID0gKCkgPT4gdHJ1ZSwgbWV0YSA9IG51bGwsIGF1dG9Mb2FkID0gZmFsc2UsIHNob3VsZExvYWQgPSB0cnVlIH0gPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5nYyA9IGdjO1xuICAgIHRoaXMuZ2NGaWx0ZXIgPSBnY0ZpbHRlcjtcbiAgICB0aGlzLmNsaWVudElEID0gZ2VuZXJhdGVOZXdDbGllbnRJZCgpO1xuICAgIHRoaXMuZ3VpZCA9IGd1aWQ7XG4gICAgdGhpcy5jb2xsZWN0aW9uaWQgPSBjb2xsZWN0aW9uaWQ7XG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxzdHJpbmcsIEFic3RyYWN0VHlwZTxZRXZlbnQ8YW55Pj4+fVxuICAgICAqL1xuICAgIHRoaXMuc2hhcmUgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5zdG9yZSA9IG5ldyBTdHJ1Y3RTdG9yZSgpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtUcmFuc2FjdGlvbiB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5fdHJhbnNhY3Rpb24gPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxUcmFuc2FjdGlvbj59XG4gICAgICovXG4gICAgdGhpcy5fdHJhbnNhY3Rpb25DbGVhbnVwcyA9IFtdO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtTZXQ8RG9jPn1cbiAgICAgKi9cbiAgICB0aGlzLnN1YmRvY3MgPSBuZXcgU2V0KCk7XG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBkb2N1bWVudCBpcyBhIHN1YmRvY3VtZW50IC0gYSBkb2N1bWVudCBpbnRlZ3JhdGVkIGludG8gYW5vdGhlciBkb2N1bWVudCAtIHRoZW4gX2l0ZW0gaXMgZGVmaW5lZC5cbiAgICAgKiBAdHlwZSB7SXRlbT99XG4gICAgICovXG4gICAgdGhpcy5faXRlbSA9IG51bGw7XG4gICAgdGhpcy5zaG91bGRMb2FkID0gc2hvdWxkTG9hZDtcbiAgICB0aGlzLmF1dG9Mb2FkID0gYXV0b0xvYWQ7XG4gICAgdGhpcy5tZXRhID0gbWV0YTtcbiAgICB0aGlzLmlzTG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy53aGVuTG9hZGVkID0gcHJvbWlzZS5jcmVhdGUocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLm9uKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZSh0aGlzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE5vdGlmeSB0aGUgcGFyZW50IGRvY3VtZW50IHRoYXQgeW91IHJlcXVlc3QgdG8gbG9hZCBkYXRhIGludG8gdGhpcyBzdWJkb2N1bWVudCAoaWYgaXQgaXMgYSBzdWJkb2N1bWVudCkuXG4gICAqXG4gICAqIGBsb2FkKClgIG1pZ2h0IGJlIHVzZWQgaW4gdGhlIGZ1dHVyZSB0byByZXF1ZXN0IGFueSBwcm92aWRlciB0byBsb2FkIHRoZSBtb3N0IGN1cnJlbnQgZGF0YS5cbiAgICpcbiAgICogSXQgaXMgc2FmZSB0byBjYWxsIGBsb2FkKClgIG11bHRpcGxlIHRpbWVzLlxuICAgKi9cbiAgbG9hZCAoKSB7XG4gICAgY29uc3QgaXRlbSA9IHRoaXMuX2l0ZW07XG4gICAgaWYgKGl0ZW0gIT09IG51bGwgJiYgIXRoaXMuc2hvdWxkTG9hZCkge1xuICAgICAgdHJhbnNhY3QoLyoqIEB0eXBlIHthbnl9ICovIChpdGVtLnBhcmVudCkuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHRyYW5zYWN0aW9uLnN1YmRvY3NMb2FkZWQuYWRkKHRoaXMpO1xuICAgICAgfSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMuc2hvdWxkTG9hZCA9IHRydWU7XG4gIH1cblxuICBnZXRTdWJkb2NzICgpIHtcbiAgICByZXR1cm4gdGhpcy5zdWJkb2NzXG4gIH1cblxuICBnZXRTdWJkb2NHdWlkcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbSh0aGlzLnN1YmRvY3MpLm1hcChkb2MgPT4gZG9jLmd1aWQpKVxuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhhdCBoYXBwZW4gaW5zaWRlIG9mIGEgdHJhbnNhY3Rpb24gYXJlIGJ1bmRsZWQuIFRoaXMgbWVhbnMgdGhhdFxuICAgKiB0aGUgb2JzZXJ2ZXIgZmlyZXMgX2FmdGVyXyB0aGUgdHJhbnNhY3Rpb24gaXMgZmluaXNoZWQgYW5kIHRoYXQgYWxsIGNoYW5nZXNcbiAgICogdGhhdCBoYXBwZW5lZCBpbnNpZGUgb2YgdGhlIHRyYW5zYWN0aW9uIGFyZSBzZW50IGFzIG9uZSBtZXNzYWdlIHRvIHRoZVxuICAgKiBvdGhlciBwZWVycy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihUcmFuc2FjdGlvbik6dm9pZH0gZiBUaGUgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgZXhlY3V0ZWQgYXMgYSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge2FueX0gW29yaWdpbl0gT3JpZ2luIG9mIHdobyBzdGFydGVkIHRoZSB0cmFuc2FjdGlvbi4gV2lsbCBiZSBzdG9yZWQgb24gdHJhbnNhY3Rpb24ub3JpZ2luXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHRyYW5zYWN0IChmLCBvcmlnaW4gPSBudWxsKSB7XG4gICAgdHJhbnNhY3QodGhpcywgZiwgb3JpZ2luKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgYSBzaGFyZWQgZGF0YSB0eXBlLlxuICAgKlxuICAgKiBNdWx0aXBsZSBjYWxscyBvZiBgeS5nZXQobmFtZSwgVHlwZUNvbnN0cnVjdG9yKWAgeWllbGQgdGhlIHNhbWUgcmVzdWx0XG4gICAqIGFuZCBkbyBub3Qgb3ZlcndyaXRlIGVhY2ggb3RoZXIuIEkuZS5cbiAgICogYHkuZGVmaW5lKG5hbWUsIFkuQXJyYXkpID09PSB5LmRlZmluZShuYW1lLCBZLkFycmF5KWBcbiAgICpcbiAgICogQWZ0ZXIgdGhpcyBtZXRob2QgaXMgY2FsbGVkLCB0aGUgdHlwZSBpcyBhbHNvIGF2YWlsYWJsZSBvbiBgeS5zaGFyZS5nZXQobmFtZSlgLlxuICAgKlxuICAgKiAqQmVzdCBQcmFjdGljZXM6KlxuICAgKiBEZWZpbmUgYWxsIHR5cGVzIHJpZ2h0IGFmdGVyIHRoZSBZanMgaW5zdGFuY2UgaXMgY3JlYXRlZCBhbmQgc3RvcmUgdGhlbSBpbiBhIHNlcGFyYXRlIG9iamVjdC5cbiAgICogQWxzbyB1c2UgdGhlIHR5cGVkIG1ldGhvZHMgYGdldFRleHQobmFtZSlgLCBgZ2V0QXJyYXkobmFtZSlgLCAuLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGNvbnN0IHkgPSBuZXcgWSguLilcbiAgICogICBjb25zdCBhcHBTdGF0ZSA9IHtcbiAgICogICAgIGRvY3VtZW50OiB5LmdldFRleHQoJ2RvY3VtZW50JylcbiAgICogICAgIGNvbW1lbnRzOiB5LmdldEFycmF5KCdjb21tZW50cycpXG4gICAqICAgfVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBUeXBlQ29uc3RydWN0b3IgVGhlIGNvbnN0cnVjdG9yIG9mIHRoZSB0eXBlIGRlZmluaXRpb24uIEUuZy4gWS5UZXh0LCBZLkFycmF5LCBZLk1hcCwgLi4uXG4gICAqIEByZXR1cm4ge0Fic3RyYWN0VHlwZTxhbnk+fSBUaGUgY3JlYXRlZCB0eXBlLiBDb25zdHJ1Y3RlZCB3aXRoIFR5cGVDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXQgKG5hbWUsIFR5cGVDb25zdHJ1Y3RvciA9IEFic3RyYWN0VHlwZSkge1xuICAgIGNvbnN0IHR5cGUgPSBtYXAuc2V0SWZVbmRlZmluZWQodGhpcy5zaGFyZSwgbmFtZSwgKCkgPT4ge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgY29uc3QgdCA9IG5ldyBUeXBlQ29uc3RydWN0b3IoKTtcbiAgICAgIHQuX2ludGVncmF0ZSh0aGlzLCBudWxsKTtcbiAgICAgIHJldHVybiB0XG4gICAgfSk7XG4gICAgY29uc3QgQ29uc3RyID0gdHlwZS5jb25zdHJ1Y3RvcjtcbiAgICBpZiAoVHlwZUNvbnN0cnVjdG9yICE9PSBBYnN0cmFjdFR5cGUgJiYgQ29uc3RyICE9PSBUeXBlQ29uc3RydWN0b3IpIHtcbiAgICAgIGlmIChDb25zdHIgPT09IEFic3RyYWN0VHlwZSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IHQgPSBuZXcgVHlwZUNvbnN0cnVjdG9yKCk7XG4gICAgICAgIHQuX21hcCA9IHR5cGUuX21hcDtcbiAgICAgICAgdHlwZS5fbWFwLmZvckVhY2goLyoqIEBwYXJhbSB7SXRlbT99IG4gKi8gbiA9PiB7XG4gICAgICAgICAgZm9yICg7IG4gIT09IG51bGw7IG4gPSBuLmxlZnQpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIG4ucGFyZW50ID0gdDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0Ll9zdGFydCA9IHR5cGUuX3N0YXJ0O1xuICAgICAgICBmb3IgKGxldCBuID0gdC5fc3RhcnQ7IG4gIT09IG51bGw7IG4gPSBuLnJpZ2h0KSB7XG4gICAgICAgICAgbi5wYXJlbnQgPSB0O1xuICAgICAgICB9XG4gICAgICAgIHQuX2xlbmd0aCA9IHR5cGUuX2xlbmd0aDtcbiAgICAgICAgdGhpcy5zaGFyZS5zZXQobmFtZSwgdCk7XG4gICAgICAgIHQuX2ludGVncmF0ZSh0aGlzLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVHlwZSB3aXRoIHRoZSBuYW1lICR7bmFtZX0gaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIHdpdGggYSBkaWZmZXJlbnQgY29uc3RydWN0b3JgKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHlwZVxuICB9XG5cbiAgLyoqXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZV1cbiAgICogQHJldHVybiB7WUFycmF5PFQ+fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRBcnJheSAobmFtZSA9ICcnKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiB0aGlzLmdldChuYW1lLCBZQXJyYXkpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXVxuICAgKiBAcmV0dXJuIHtZVGV4dH1cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0VGV4dCAobmFtZSA9ICcnKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiB0aGlzLmdldChuYW1lLCBZVGV4dClcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGVtcGxhdGUgVFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25hbWVdXG4gICAqIEByZXR1cm4ge1lNYXA8VD59XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldE1hcCAobmFtZSA9ICcnKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiB0aGlzLmdldChuYW1lLCBZTWFwKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZV1cbiAgICogQHJldHVybiB7WVhtbEZyYWdtZW50fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRYbWxGcmFnbWVudCAobmFtZSA9ICcnKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiB0aGlzLmdldChuYW1lLCBZWG1sRnJhZ21lbnQpXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIGVudGlyZSBkb2N1bWVudCBpbnRvIGEganMgb2JqZWN0LCByZWN1cnNpdmVseSB0cmF2ZXJzaW5nIGVhY2ggeWpzIHR5cGVcbiAgICogRG9lc24ndCBsb2cgdHlwZXMgdGhhdCBoYXZlIG5vdCBiZWVuIGRlZmluZWQgKHVzaW5nIHlkb2MuZ2V0VHlwZSguLikpLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBEbyBub3QgdXNlIHRoaXMgbWV0aG9kIGFuZCByYXRoZXIgY2FsbCB0b0pTT04gZGlyZWN0bHkgb24gdGhlIHNoYXJlZCB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0PHN0cmluZywgYW55Pn1cbiAgICovXG4gIHRvSlNPTiAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdDxzdHJpbmcsIGFueT59XG4gICAgICovXG4gICAgY29uc3QgZG9jID0ge307XG5cbiAgICB0aGlzLnNoYXJlLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIGRvY1trZXldID0gdmFsdWUudG9KU09OKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZG9jXG4gIH1cblxuICAvKipcbiAgICogRW1pdCBgZGVzdHJveWAgZXZlbnQgYW5kIHVucmVnaXN0ZXIgYWxsIGV2ZW50IGhhbmRsZXJzLlxuICAgKi9cbiAgZGVzdHJveSAoKSB7XG4gICAgYXJyYXkuZnJvbSh0aGlzLnN1YmRvY3MpLmZvckVhY2goc3ViZG9jID0+IHN1YmRvYy5kZXN0cm95KCkpO1xuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9pdGVtO1xuICAgIGlmIChpdGVtICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9pdGVtID0gbnVsbDtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSAvKiogQHR5cGUge0NvbnRlbnREb2N9ICovIChpdGVtLmNvbnRlbnQpO1xuICAgICAgY29udGVudC5kb2MgPSBuZXcgRG9jKHsgZ3VpZDogdGhpcy5ndWlkLCAuLi5jb250ZW50Lm9wdHMsIHNob3VsZExvYWQ6IGZhbHNlIH0pO1xuICAgICAgY29udGVudC5kb2MuX2l0ZW0gPSBpdGVtO1xuICAgICAgdHJhbnNhY3QoLyoqIEB0eXBlIHthbnl9ICovIChpdGVtKS5wYXJlbnQuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IGRvYyA9IGNvbnRlbnQuZG9jO1xuICAgICAgICBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICAgIHRyYW5zYWN0aW9uLnN1YmRvY3NBZGRlZC5hZGQoZG9jKTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2FjdGlvbi5zdWJkb2NzUmVtb3ZlZC5hZGQodGhpcyk7XG4gICAgICB9LCBudWxsLCB0cnVlKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0KCdkZXN0cm95ZWQnLCBbdHJ1ZV0pO1xuICAgIHRoaXMuZW1pdCgnZGVzdHJveScsIFt0aGlzXSk7XG4gICAgc3VwZXIuZGVzdHJveSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbiguLi5hbnkpOmFueX0gZlxuICAgKi9cbiAgb24gKGV2ZW50TmFtZSwgZikge1xuICAgIHN1cGVyLm9uKGV2ZW50TmFtZSwgZik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmXG4gICAqL1xuICBvZmYgKGV2ZW50TmFtZSwgZikge1xuICAgIHN1cGVyLm9mZihldmVudE5hbWUsIGYpO1xuICB9XG59XG5cbmNsYXNzIERTRGVjb2RlclYxIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZGVjb2RpbmcuRGVjb2Rlcn0gZGVjb2RlclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRlY29kZXIpIHtcbiAgICB0aGlzLnJlc3REZWNvZGVyID0gZGVjb2RlcjtcbiAgfVxuXG4gIHJlc2V0RHNDdXJWYWwgKCkge1xuICAgIC8vIG5vcFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHJlYWREc0Nsb2NrICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByZWFkRHNMZW4gKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG59XG5cbmNsYXNzIFVwZGF0ZURlY29kZXJWMSBleHRlbmRzIERTRGVjb2RlclYxIHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge0lEfVxuICAgKi9cbiAgcmVhZExlZnRJRCAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUlEKGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpLCBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtJRH1cbiAgICovXG4gIHJlYWRSaWdodElEICgpIHtcbiAgICByZXR1cm4gY3JlYXRlSUQoZGVjb2RpbmcucmVhZFZhclVpbnQodGhpcy5yZXN0RGVjb2RlciksIGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgdGhlIG5leHQgY2xpZW50IGlkLlxuICAgKiBVc2UgdGhpcyBpbiBmYXZvciBvZiByZWFkSUQgd2hlbmV2ZXIgcG9zc2libGUgdG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygb2JqZWN0cyBjcmVhdGVkLlxuICAgKi9cbiAgcmVhZENsaWVudCAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBpbmZvIEFuIHVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAgICovXG4gIHJlYWRJbmZvICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFVpbnQ4KHRoaXMucmVzdERlY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgcmVhZFN0cmluZyAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRWYXJTdHJpbmcodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBpc0tleVxuICAgKi9cbiAgcmVhZFBhcmVudEluZm8gKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKSA9PT0gMVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn0gaW5mbyBBbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAqL1xuICByZWFkVHlwZVJlZiAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgbGVuIG9mIGEgc3RydWN0IC0gd2VsbCBzdWl0ZWQgZm9yIE9wdCBSTEUgZW5jb2Rlci5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSBsZW5cbiAgICovXG4gIHJlYWRMZW4gKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkVmFyVWludCh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2FueX1cbiAgICovXG4gIHJlYWRBbnkgKCkge1xuICAgIHJldHVybiBkZWNvZGluZy5yZWFkQW55KHRoaXMucmVzdERlY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7VWludDhBcnJheX1cbiAgICovXG4gIHJlYWRCdWYgKCkge1xuICAgIHJldHVybiBidWZmZXIuY29weVVpbnQ4QXJyYXkoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkodGhpcy5yZXN0RGVjb2RlcikpXG4gIH1cblxuICAvKipcbiAgICogTGVnYWN5IGltcGxlbWVudGF0aW9uIHVzZXMgSlNPTiBwYXJzZS4gV2UgdXNlIGFueS1kZWNvZGluZyBpbiB2Mi5cbiAgICpcbiAgICogQHJldHVybiB7YW55fVxuICAgKi9cbiAgcmVhZEpTT04gKCkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGRlY29kaW5nLnJlYWRWYXJTdHJpbmcodGhpcy5yZXN0RGVjb2RlcikpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgcmVhZEtleSAoKSB7XG4gICAgcmV0dXJuIGRlY29kaW5nLnJlYWRWYXJTdHJpbmcodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxufVxuXG5jbGFzcyBEU0RlY29kZXJWMiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2RlY29kaW5nLkRlY29kZXJ9IGRlY29kZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkZWNvZGVyKSB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmRzQ3VyclZhbCA9IDA7XG4gICAgdGhpcy5yZXN0RGVjb2RlciA9IGRlY29kZXI7XG4gIH1cblxuICByZXNldERzQ3VyVmFsICgpIHtcbiAgICB0aGlzLmRzQ3VyclZhbCA9IDA7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgcmVhZERzQ2xvY2sgKCkge1xuICAgIHRoaXMuZHNDdXJyVmFsICs9IGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpO1xuICAgIHJldHVybiB0aGlzLmRzQ3VyclZhbFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHJlYWREc0xlbiAoKSB7XG4gICAgY29uc3QgZGlmZiA9IGRlY29kaW5nLnJlYWRWYXJVaW50KHRoaXMucmVzdERlY29kZXIpICsgMTtcbiAgICB0aGlzLmRzQ3VyclZhbCArPSBkaWZmO1xuICAgIHJldHVybiBkaWZmXG4gIH1cbn1cblxuY2xhc3MgVXBkYXRlRGVjb2RlclYyIGV4dGVuZHMgRFNEZWNvZGVyVjIge1xuICAvKipcbiAgICogQHBhcmFtIHtkZWNvZGluZy5EZWNvZGVyfSBkZWNvZGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZGVjb2Rlcikge1xuICAgIHN1cGVyKGRlY29kZXIpO1xuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgY2FjaGVkIGtleXMuIElmIHRoZSBrZXlzW2lkXSBkb2VzIG5vdCBleGlzdCwgd2UgcmVhZCBhIG5ldyBrZXlcbiAgICAgKiBmcm9tIHN0cmluZ0VuY29kZXIgYW5kIHB1c2ggaXQgdG8ga2V5cy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBcnJheTxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICAgIGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIpOyAvLyByZWFkIGZlYXR1cmUgZmxhZyAtIGN1cnJlbnRseSB1bnVzZWRcbiAgICB0aGlzLmtleUNsb2NrRGVjb2RlciA9IG5ldyBkZWNvZGluZy5JbnREaWZmT3B0UmxlRGVjb2RlcihkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheShkZWNvZGVyKSk7XG4gICAgdGhpcy5jbGllbnREZWNvZGVyID0gbmV3IGRlY29kaW5nLlVpbnRPcHRSbGVEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpKTtcbiAgICB0aGlzLmxlZnRDbG9ja0RlY29kZXIgPSBuZXcgZGVjb2RpbmcuSW50RGlmZk9wdFJsZURlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlcikpO1xuICAgIHRoaXMucmlnaHRDbG9ja0RlY29kZXIgPSBuZXcgZGVjb2RpbmcuSW50RGlmZk9wdFJsZURlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlcikpO1xuICAgIHRoaXMuaW5mb0RlY29kZXIgPSBuZXcgZGVjb2RpbmcuUmxlRGVjb2RlcihkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheShkZWNvZGVyKSwgZGVjb2RpbmcucmVhZFVpbnQ4KTtcbiAgICB0aGlzLnN0cmluZ0RlY29kZXIgPSBuZXcgZGVjb2RpbmcuU3RyaW5nRGVjb2RlcihkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheShkZWNvZGVyKSk7XG4gICAgdGhpcy5wYXJlbnRJbmZvRGVjb2RlciA9IG5ldyBkZWNvZGluZy5SbGVEZWNvZGVyKGRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5KGRlY29kZXIpLCBkZWNvZGluZy5yZWFkVWludDgpO1xuICAgIHRoaXMudHlwZVJlZkRlY29kZXIgPSBuZXcgZGVjb2RpbmcuVWludE9wdFJsZURlY29kZXIoZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkoZGVjb2RlcikpO1xuICAgIHRoaXMubGVuRGVjb2RlciA9IG5ldyBkZWNvZGluZy5VaW50T3B0UmxlRGVjb2RlcihkZWNvZGluZy5yZWFkVmFyVWludDhBcnJheShkZWNvZGVyKSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7SUR9XG4gICAqL1xuICByZWFkTGVmdElEICgpIHtcbiAgICByZXR1cm4gbmV3IElEKHRoaXMuY2xpZW50RGVjb2Rlci5yZWFkKCksIHRoaXMubGVmdENsb2NrRGVjb2Rlci5yZWFkKCkpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7SUR9XG4gICAqL1xuICByZWFkUmlnaHRJRCAoKSB7XG4gICAgcmV0dXJuIG5ldyBJRCh0aGlzLmNsaWVudERlY29kZXIucmVhZCgpLCB0aGlzLnJpZ2h0Q2xvY2tEZWNvZGVyLnJlYWQoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIHRoZSBuZXh0IGNsaWVudCBpZC5cbiAgICogVXNlIHRoaXMgaW4gZmF2b3Igb2YgcmVhZElEIHdoZW5ldmVyIHBvc3NpYmxlIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIG9iamVjdHMgY3JlYXRlZC5cbiAgICovXG4gIHJlYWRDbGllbnQgKCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudERlY29kZXIucmVhZCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBpbmZvIEFuIHVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAgICovXG4gIHJlYWRJbmZvICgpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovICh0aGlzLmluZm9EZWNvZGVyLnJlYWQoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICByZWFkU3RyaW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpbmdEZWNvZGVyLnJlYWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICByZWFkUGFyZW50SW5mbyAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50SW5mb0RlY29kZXIucmVhZCgpID09PSAxXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfSBBbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAqL1xuICByZWFkVHlwZVJlZiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZVJlZkRlY29kZXIucmVhZCgpXG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgbGVuIG9mIGEgc3RydWN0IC0gd2VsbCBzdWl0ZWQgZm9yIE9wdCBSTEUgZW5jb2Rlci5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgcmVhZExlbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuRGVjb2Rlci5yZWFkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHthbnl9XG4gICAqL1xuICByZWFkQW55ICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZEFueSh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gICAqL1xuICByZWFkQnVmICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZFZhclVpbnQ4QXJyYXkodGhpcy5yZXN0RGVjb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIG1haW5seSBoZXJlIGZvciBsZWdhY3kgcHVycG9zZXMuXG4gICAqXG4gICAqIEluaXRpYWwgd2UgaW5jb2RlZCBvYmplY3RzIHVzaW5nIEpTT04uIE5vdyB3ZSB1c2UgdGhlIG11Y2ggZmFzdGVyIGxpYjAvYW55LWVuY29kZXIuIFRoaXMgbWV0aG9kIG1haW5seSBleGlzdHMgZm9yIGxlZ2FjeSBwdXJwb3NlcyBmb3IgdGhlIHYxIGVuY29kZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge2FueX1cbiAgICovXG4gIHJlYWRKU09OICgpIHtcbiAgICByZXR1cm4gZGVjb2RpbmcucmVhZEFueSh0aGlzLnJlc3REZWNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHJlYWRLZXkgKCkge1xuICAgIGNvbnN0IGtleUNsb2NrID0gdGhpcy5rZXlDbG9ja0RlY29kZXIucmVhZCgpO1xuICAgIGlmIChrZXlDbG9jayA8IHRoaXMua2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLmtleXNba2V5Q2xvY2tdXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGtleSA9IHRoaXMuc3RyaW5nRGVjb2Rlci5yZWFkKCk7XG4gICAgICB0aGlzLmtleXMucHVzaChrZXkpO1xuICAgICAgcmV0dXJuIGtleVxuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBEU0VuY29kZXJWMSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnJlc3RFbmNvZGVyID0gZW5jb2RpbmcuY3JlYXRlRW5jb2RlcigpO1xuICB9XG5cbiAgdG9VaW50OEFycmF5ICgpIHtcbiAgICByZXR1cm4gZW5jb2RpbmcudG9VaW50OEFycmF5KHRoaXMucmVzdEVuY29kZXIpXG4gIH1cblxuICByZXNldERzQ3VyVmFsICgpIHtcbiAgICAvLyBub3BcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAgICovXG4gIHdyaXRlRHNDbG9jayAoY2xvY2spIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgY2xvY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAgICovXG4gIHdyaXRlRHNMZW4gKGxlbikge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBsZW4pO1xuICB9XG59XG5cbmNsYXNzIFVwZGF0ZUVuY29kZXJWMSBleHRlbmRzIERTRW5jb2RlclYxIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7SUR9IGlkXG4gICAqL1xuICB3cml0ZUxlZnRJRCAoaWQpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgaWQuY2xpZW50KTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgaWQuY2xvY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SUR9IGlkXG4gICAqL1xuICB3cml0ZVJpZ2h0SUQgKGlkKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGlkLmNsaWVudCk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGlkLmNsb2NrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2Ugd3JpdGVDbGllbnQgYW5kIHdyaXRlQ2xvY2sgaW5zdGVhZCBvZiB3cml0ZUlEIGlmIHBvc3NpYmxlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xpZW50XG4gICAqL1xuICB3cml0ZUNsaWVudCAoY2xpZW50KSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGNsaWVudCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZm8gQW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlclxuICAgKi9cbiAgd3JpdGVJbmZvIChpbmZvKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVVaW50OCh0aGlzLnJlc3RFbmNvZGVyLCBpbmZvKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc1xuICAgKi9cbiAgd3JpdGVTdHJpbmcgKHMpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclN0cmluZyh0aGlzLnJlc3RFbmNvZGVyLCBzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzWUtleVxuICAgKi9cbiAgd3JpdGVQYXJlbnRJbmZvIChpc1lLZXkpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQodGhpcy5yZXN0RW5jb2RlciwgaXNZS2V5ID8gMSA6IDApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmZvIEFuIHVuc2lnbmVkIDgtYml0IGludGVnZXJcbiAgICovXG4gIHdyaXRlVHlwZVJlZiAoaW5mbykge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBpbmZvKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBsZW4gb2YgYSBzdHJ1Y3QgLSB3ZWxsIHN1aXRlZCBmb3IgT3B0IFJMRSBlbmNvZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuXG4gICAqL1xuICB3cml0ZUxlbiAobGVuKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGxlbik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHthbnl9IGFueVxuICAgKi9cbiAgd3JpdGVBbnkgKGFueSkge1xuICAgIGVuY29kaW5nLndyaXRlQW55KHRoaXMucmVzdEVuY29kZXIsIGFueSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAgICovXG4gIHdyaXRlQnVmIChidWYpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkodGhpcy5yZXN0RW5jb2RlciwgYnVmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gZW1iZWRcbiAgICovXG4gIHdyaXRlSlNPTiAoZW1iZWQpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclN0cmluZyh0aGlzLnJlc3RFbmNvZGVyLCBKU09OLnN0cmluZ2lmeShlbWJlZCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICovXG4gIHdyaXRlS2V5IChrZXkpIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclN0cmluZyh0aGlzLnJlc3RFbmNvZGVyLCBrZXkpO1xuICB9XG59XG5cbmNsYXNzIERTRW5jb2RlclYyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMucmVzdEVuY29kZXIgPSBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKCk7IC8vIGVuY29kZXMgYWxsIHRoZSByZXN0IC8gbm9uLW9wdGltaXplZFxuICAgIHRoaXMuZHNDdXJyVmFsID0gMDtcbiAgfVxuXG4gIHRvVWludDhBcnJheSAoKSB7XG4gICAgcmV0dXJuIGVuY29kaW5nLnRvVWludDhBcnJheSh0aGlzLnJlc3RFbmNvZGVyKVxuICB9XG5cbiAgcmVzZXREc0N1clZhbCAoKSB7XG4gICAgdGhpcy5kc0N1cnJWYWwgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1xuICAgKi9cbiAgd3JpdGVEc0Nsb2NrIChjbG9jaykge1xuICAgIGNvbnN0IGRpZmYgPSBjbG9jayAtIHRoaXMuZHNDdXJyVmFsO1xuICAgIHRoaXMuZHNDdXJyVmFsID0gY2xvY2s7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KHRoaXMucmVzdEVuY29kZXIsIGRpZmYpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAgICovXG4gIHdyaXRlRHNMZW4gKGxlbikge1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIGVycm9yLnVuZXhwZWN0ZWRDYXNlKCk7XG4gICAgfVxuICAgIGVuY29kaW5nLndyaXRlVmFyVWludCh0aGlzLnJlc3RFbmNvZGVyLCBsZW4gLSAxKTtcbiAgICB0aGlzLmRzQ3VyclZhbCArPSBsZW47XG4gIH1cbn1cblxuY2xhc3MgVXBkYXRlRW5jb2RlclYyIGV4dGVuZHMgRFNFbmNvZGVyVjIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZyxudW1iZXI+fVxuICAgICAqL1xuICAgIHRoaXMua2V5TWFwID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIFJlZmVycyB0byB0aGUgbmV4dCB1bmlxZSBrZXktaWRlbnRpZmllciB0byBtZSB1c2VkLlxuICAgICAqIFNlZSB3cml0ZUtleSBtZXRob2QgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMua2V5Q2xvY2sgPSAwO1xuICAgIHRoaXMua2V5Q2xvY2tFbmNvZGVyID0gbmV3IGVuY29kaW5nLkludERpZmZPcHRSbGVFbmNvZGVyKCk7XG4gICAgdGhpcy5jbGllbnRFbmNvZGVyID0gbmV3IGVuY29kaW5nLlVpbnRPcHRSbGVFbmNvZGVyKCk7XG4gICAgdGhpcy5sZWZ0Q2xvY2tFbmNvZGVyID0gbmV3IGVuY29kaW5nLkludERpZmZPcHRSbGVFbmNvZGVyKCk7XG4gICAgdGhpcy5yaWdodENsb2NrRW5jb2RlciA9IG5ldyBlbmNvZGluZy5JbnREaWZmT3B0UmxlRW5jb2RlcigpO1xuICAgIHRoaXMuaW5mb0VuY29kZXIgPSBuZXcgZW5jb2RpbmcuUmxlRW5jb2RlcihlbmNvZGluZy53cml0ZVVpbnQ4KTtcbiAgICB0aGlzLnN0cmluZ0VuY29kZXIgPSBuZXcgZW5jb2RpbmcuU3RyaW5nRW5jb2RlcigpO1xuICAgIHRoaXMucGFyZW50SW5mb0VuY29kZXIgPSBuZXcgZW5jb2RpbmcuUmxlRW5jb2RlcihlbmNvZGluZy53cml0ZVVpbnQ4KTtcbiAgICB0aGlzLnR5cGVSZWZFbmNvZGVyID0gbmV3IGVuY29kaW5nLlVpbnRPcHRSbGVFbmNvZGVyKCk7XG4gICAgdGhpcy5sZW5FbmNvZGVyID0gbmV3IGVuY29kaW5nLlVpbnRPcHRSbGVFbmNvZGVyKCk7XG4gIH1cblxuICB0b1VpbnQ4QXJyYXkgKCkge1xuICAgIGNvbnN0IGVuY29kZXIgPSBlbmNvZGluZy5jcmVhdGVFbmNvZGVyKCk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIsIDApOyAvLyB0aGlzIGlzIGEgZmVhdHVyZSBmbGFnIHRoYXQgd2UgbWlnaHQgdXNlIGluIHRoZSBmdXR1cmVcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgdGhpcy5rZXlDbG9ja0VuY29kZXIudG9VaW50OEFycmF5KCkpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCB0aGlzLmNsaWVudEVuY29kZXIudG9VaW50OEFycmF5KCkpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCB0aGlzLmxlZnRDbG9ja0VuY29kZXIudG9VaW50OEFycmF5KCkpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheShlbmNvZGVyLCB0aGlzLnJpZ2h0Q2xvY2tFbmNvZGVyLnRvVWludDhBcnJheSgpKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgZW5jb2RpbmcudG9VaW50OEFycmF5KHRoaXMuaW5mb0VuY29kZXIpKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgdGhpcy5zdHJpbmdFbmNvZGVyLnRvVWludDhBcnJheSgpKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgZW5jb2RpbmcudG9VaW50OEFycmF5KHRoaXMucGFyZW50SW5mb0VuY29kZXIpKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQ4QXJyYXkoZW5jb2RlciwgdGhpcy50eXBlUmVmRW5jb2Rlci50b1VpbnQ4QXJyYXkoKSk7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5KGVuY29kZXIsIHRoaXMubGVuRW5jb2Rlci50b1VpbnQ4QXJyYXkoKSk7XG4gICAgLy8gQG5vdGUgVGhlIHJlc3QgZW5jb2RlciBpcyBhcHBlbmRlZCEgKG5vdGUgdGhlIG1pc3NpbmcgdmFyKVxuICAgIGVuY29kaW5nLndyaXRlVWludDhBcnJheShlbmNvZGVyLCBlbmNvZGluZy50b1VpbnQ4QXJyYXkodGhpcy5yZXN0RW5jb2RlcikpO1xuICAgIHJldHVybiBlbmNvZGluZy50b1VpbnQ4QXJyYXkoZW5jb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0lEfSBpZFxuICAgKi9cbiAgd3JpdGVMZWZ0SUQgKGlkKSB7XG4gICAgdGhpcy5jbGllbnRFbmNvZGVyLndyaXRlKGlkLmNsaWVudCk7XG4gICAgdGhpcy5sZWZ0Q2xvY2tFbmNvZGVyLndyaXRlKGlkLmNsb2NrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0lEfSBpZFxuICAgKi9cbiAgd3JpdGVSaWdodElEIChpZCkge1xuICAgIHRoaXMuY2xpZW50RW5jb2Rlci53cml0ZShpZC5jbGllbnQpO1xuICAgIHRoaXMucmlnaHRDbG9ja0VuY29kZXIud3JpdGUoaWQuY2xvY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRcbiAgICovXG4gIHdyaXRlQ2xpZW50IChjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudEVuY29kZXIud3JpdGUoY2xpZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5mbyBBbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAqL1xuICB3cml0ZUluZm8gKGluZm8pIHtcbiAgICB0aGlzLmluZm9FbmNvZGVyLndyaXRlKGluZm8pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzXG4gICAqL1xuICB3cml0ZVN0cmluZyAocykge1xuICAgIHRoaXMuc3RyaW5nRW5jb2Rlci53cml0ZShzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzWUtleVxuICAgKi9cbiAgd3JpdGVQYXJlbnRJbmZvIChpc1lLZXkpIHtcbiAgICB0aGlzLnBhcmVudEluZm9FbmNvZGVyLndyaXRlKGlzWUtleSA/IDEgOiAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5mbyBBbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAqL1xuICB3cml0ZVR5cGVSZWYgKGluZm8pIHtcbiAgICB0aGlzLnR5cGVSZWZFbmNvZGVyLndyaXRlKGluZm8pO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIGxlbiBvZiBhIHN0cnVjdCAtIHdlbGwgc3VpdGVkIGZvciBPcHQgUkxFIGVuY29kZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAgICovXG4gIHdyaXRlTGVuIChsZW4pIHtcbiAgICB0aGlzLmxlbkVuY29kZXIud3JpdGUobGVuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gYW55XG4gICAqL1xuICB3cml0ZUFueSAoYW55KSB7XG4gICAgZW5jb2Rpbmcud3JpdGVBbnkodGhpcy5yZXN0RW5jb2RlciwgYW55KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZlxuICAgKi9cbiAgd3JpdGVCdWYgKGJ1Zikge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludDhBcnJheSh0aGlzLnJlc3RFbmNvZGVyLCBidWYpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgbWFpbmx5IGhlcmUgZm9yIGxlZ2FjeSBwdXJwb3Nlcy5cbiAgICpcbiAgICogSW5pdGlhbCB3ZSBpbmNvZGVkIG9iamVjdHMgdXNpbmcgSlNPTi4gTm93IHdlIHVzZSB0aGUgbXVjaCBmYXN0ZXIgbGliMC9hbnktZW5jb2Rlci4gVGhpcyBtZXRob2QgbWFpbmx5IGV4aXN0cyBmb3IgbGVnYWN5IHB1cnBvc2VzIGZvciB0aGUgdjEgZW5jb2Rlci5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IGVtYmVkXG4gICAqL1xuICB3cml0ZUpTT04gKGVtYmVkKSB7XG4gICAgZW5jb2Rpbmcud3JpdGVBbnkodGhpcy5yZXN0RW5jb2RlciwgZW1iZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3BlcnR5IGtleXMgYXJlIG9mdGVuIHJldXNlZC4gRm9yIGV4YW1wbGUsIGluIHktcHJvc2VtaXJyb3IgdGhlIGtleSBgYm9sZGAgbWlnaHRcbiAgICogb2NjdXIgdmVyeSBvZnRlbi4gRm9yIGEgM2QgYXBwbGljYXRpb24sIHRoZSBrZXkgYHBvc2l0aW9uYCBtaWdodCBvY2N1ciB2ZXJ5IG9mdGVuLlxuICAgKlxuICAgKiBXZSBjYWNoZSB0aGVzZSBrZXlzIGluIGEgTWFwIGFuZCByZWZlciB0byB0aGVtIHZpYSBhIHVuaXF1ZSBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICovXG4gIHdyaXRlS2V5IChrZXkpIHtcbiAgICBjb25zdCBjbG9jayA9IHRoaXMua2V5TWFwLmdldChrZXkpO1xuICAgIGlmIChjbG9jayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvKipcbiAgICAgICAqIEB0b2RvIHVuY29tbWVudCB0byBpbnRyb2R1Y2UgdGhpcyBmZWF0dXJlIGZpbmFsbHlcbiAgICAgICAqXG4gICAgICAgKiBCYWNrZ3JvdW5kLiBUaGUgQ29udGVudEZvcm1hdCBvYmplY3Qgd2FzIGFsd2F5cyBlbmNvZGVkIHVzaW5nIHdyaXRlS2V5LCBidXQgdGhlIGRlY29kZXIgdXNlZCB0byB1c2UgcmVhZFN0cmluZy5cbiAgICAgICAqIEZ1cnRoZXJtb3JlLCBJIGZvcmdvdCB0byBzZXQgdGhlIGtleWNsb2NrLiBTbyBldmVyeXRoaW5nIHdhcyB3b3JraW5nIGZpbmUuXG4gICAgICAgKlxuICAgICAgICogSG93ZXZlciwgdGhpcyBmZWF0dXJlIGhlcmUgaXMgYmFzaWNhbGx5IHVzZWxlc3MgYXMgaXQgaXMgbm90IGJlaW5nIHVzZWQgKGl0IGFjdHVhbGx5IG9ubHkgY29uc3VtZXMgZXh0cmEgbWVtb3J5KS5cbiAgICAgICAqXG4gICAgICAgKiBJIGRvbid0IGtub3cgeWV0IGhvdyB0byByZWludHJvZHVjZSB0aGlzIGZlYXR1cmUuLlxuICAgICAgICpcbiAgICAgICAqIE9sZGVyIGNsaWVudHMgd29uJ3QgYmUgYWJsZSB0byByZWFkIHVwZGF0ZXMgd2hlbiB3ZSByZWludHJvZHVjZSB0aGlzIGZlYXR1cmUuIFNvIHRoaXMgc2hvdWxkIHByb2JhYmx5IGJlIGRvbmUgdXNpbmcgYSBmbGFnLlxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgLy8gdGhpcy5rZXlNYXAuc2V0KGtleSwgdGhpcy5rZXlDbG9jaylcbiAgICAgIHRoaXMua2V5Q2xvY2tFbmNvZGVyLndyaXRlKHRoaXMua2V5Q2xvY2srKyk7XG4gICAgICB0aGlzLnN0cmluZ0VuY29kZXIud3JpdGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5rZXlDbG9ja0VuY29kZXIud3JpdGUoY2xvY2spO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge0FycmF5PEdDfEl0ZW0+fSBzdHJ1Y3RzIEFsbCBzdHJ1Y3RzIGJ5IGBjbGllbnRgXG4gKiBAcGFyYW0ge251bWJlcn0gY2xpZW50XG4gKiBAcGFyYW0ge251bWJlcn0gY2xvY2sgd3JpdGUgc3RydWN0cyBzdGFydGluZyB3aXRoIGBJRChjbGllbnQsY2xvY2spYFxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB3cml0ZVN0cnVjdHMgPSAoZW5jb2Rlciwgc3RydWN0cywgY2xpZW50LCBjbG9jaykgPT4ge1xuICAvLyB3cml0ZSBmaXJzdCBpZFxuICBjbG9jayA9IG1hdGgubWF4KGNsb2NrLCBzdHJ1Y3RzWzBdLmlkLmNsb2NrKTsgLy8gbWFrZSBzdXJlIHRoZSBmaXJzdCBpZCBleGlzdHNcbiAgY29uc3Qgc3RhcnROZXdTdHJ1Y3RzID0gZmluZEluZGV4U1Moc3RydWN0cywgY2xvY2spO1xuICAvLyB3cml0ZSAjIGVuY29kZWQgc3RydWN0c1xuICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2Rlciwgc3RydWN0cy5sZW5ndGggLSBzdGFydE5ld1N0cnVjdHMpO1xuICBlbmNvZGVyLndyaXRlQ2xpZW50KGNsaWVudCk7XG4gIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLnJlc3RFbmNvZGVyLCBjbG9jayk7XG4gIGNvbnN0IGZpcnN0U3RydWN0ID0gc3RydWN0c1tzdGFydE5ld1N0cnVjdHNdO1xuICAvLyB3cml0ZSBmaXJzdCBzdHJ1Y3Qgd2l0aCBhbiBvZmZzZXRcbiAgZmlyc3RTdHJ1Y3Qud3JpdGUoZW5jb2RlciwgY2xvY2sgLSBmaXJzdFN0cnVjdC5pZC5jbG9jayk7XG4gIGZvciAobGV0IGkgPSBzdGFydE5ld1N0cnVjdHMgKyAxOyBpIDwgc3RydWN0cy5sZW5ndGg7IGkrKykge1xuICAgIHN0cnVjdHNbaV0ud3JpdGUoZW5jb2RlciwgMCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge01hcDxudW1iZXIsbnVtYmVyPn0gX3NtXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB3cml0ZUNsaWVudHNTdHJ1Y3RzID0gKGVuY29kZXIsIHN0b3JlLCBfc20pID0+IHtcbiAgLy8gd2UgZmlsdGVyIGFsbCB2YWxpZCBfc20gZW50cmllcyBpbnRvIHNtXG4gIGNvbnN0IHNtID0gbmV3IE1hcCgpO1xuICBfc20uZm9yRWFjaCgoY2xvY2ssIGNsaWVudCkgPT4ge1xuICAgIC8vIG9ubHkgd3JpdGUgaWYgbmV3IHN0cnVjdHMgYXJlIGF2YWlsYWJsZVxuICAgIGlmIChnZXRTdGF0ZShzdG9yZSwgY2xpZW50KSA+IGNsb2NrKSB7XG4gICAgICBzbS5zZXQoY2xpZW50LCBjbG9jayk7XG4gICAgfVxuICB9KTtcbiAgZ2V0U3RhdGVWZWN0b3Ioc3RvcmUpLmZvckVhY2goKGNsb2NrLCBjbGllbnQpID0+IHtcbiAgICBpZiAoIV9zbS5oYXMoY2xpZW50KSkge1xuICAgICAgc20uc2V0KGNsaWVudCwgMCk7XG4gICAgfVxuICB9KTtcbiAgLy8gd3JpdGUgIyBzdGF0ZXMgdGhhdCB3ZXJlIHVwZGF0ZWRcbiAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIHNtLnNpemUpO1xuICAvLyBXcml0ZSBpdGVtcyB3aXRoIGhpZ2hlciBjbGllbnQgaWRzIGZpcnN0XG4gIC8vIFRoaXMgaGVhdmlseSBpbXByb3ZlcyB0aGUgY29uZmxpY3QgYWxnb3JpdGhtLlxuICBBcnJheS5mcm9tKHNtLmVudHJpZXMoKSkuc29ydCgoYSwgYikgPT4gYlswXSAtIGFbMF0pLmZvckVhY2goKFtjbGllbnQsIGNsb2NrXSkgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB3cml0ZVN0cnVjdHMoZW5jb2Rlciwgc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KSwgY2xpZW50LCBjbG9jayk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlciBUaGUgZGVjb2RlciBvYmplY3QgdG8gcmVhZCBkYXRhIGZyb20uXG4gKiBAcGFyYW0ge0RvY30gZG9jXG4gKiBAcmV0dXJuIHtNYXA8bnVtYmVyLCB7IGk6IG51bWJlciwgcmVmczogQXJyYXk8SXRlbSB8IEdDPiB9Pn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRDbGllbnRzU3RydWN0UmVmcyA9IChkZWNvZGVyLCBkb2MpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtNYXA8bnVtYmVyLCB7IGk6IG51bWJlciwgcmVmczogQXJyYXk8SXRlbSB8IEdDPiB9Pn1cbiAgICovXG4gIGNvbnN0IGNsaWVudFJlZnMgPSBtYXAuY3JlYXRlKCk7XG4gIGNvbnN0IG51bU9mU3RhdGVVcGRhdGVzID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZTdGF0ZVVwZGF0ZXM7IGkrKykge1xuICAgIGNvbnN0IG51bWJlck9mU3RydWN0cyA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxHQ3xJdGVtPn1cbiAgICAgKi9cbiAgICBjb25zdCByZWZzID0gbmV3IEFycmF5KG51bWJlck9mU3RydWN0cyk7XG4gICAgY29uc3QgY2xpZW50ID0gZGVjb2Rlci5yZWFkQ2xpZW50KCk7XG4gICAgbGV0IGNsb2NrID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgLy8gY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgIGNsaWVudFJlZnMuc2V0KGNsaWVudCwgeyBpOiAwLCByZWZzIH0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZTdHJ1Y3RzOyBpKyspIHtcbiAgICAgIGNvbnN0IGluZm8gPSBkZWNvZGVyLnJlYWRJbmZvKCk7XG4gICAgICBzd2l0Y2ggKGJpbmFyeS5CSVRTNSAmIGluZm8pIHtcbiAgICAgICAgY2FzZSAwOiB7IC8vIEdDXG4gICAgICAgICAgY29uc3QgbGVuID0gZGVjb2Rlci5yZWFkTGVuKCk7XG4gICAgICAgICAgcmVmc1tpXSA9IG5ldyBHQyhjcmVhdGVJRChjbGllbnQsIGNsb2NrKSwgbGVuKTtcbiAgICAgICAgICBjbG9jayArPSBsZW47XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDEwOiB7IC8vIFNraXAgU3RydWN0IChub3RoaW5nIHRvIGFwcGx5KVxuICAgICAgICAgIC8vIEB0b2RvIHdlIGNvdWxkIHJlZHVjZSB0aGUgYW1vdW50IG9mIGNoZWNrcyBieSBhZGRpbmcgU2tpcCBzdHJ1Y3QgdG8gY2xpZW50UmVmcyBzbyB3ZSBrbm93IHRoYXQgc29tZXRoaW5nIGlzIG1pc3NpbmcuXG4gICAgICAgICAgY29uc3QgbGVuID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgICAgICAgcmVmc1tpXSA9IG5ldyBTa2lwKGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spLCBsZW4pO1xuICAgICAgICAgIGNsb2NrICs9IGxlbjtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHsgLy8gSXRlbSB3aXRoIGNvbnRlbnRcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUaGUgb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGRvZXNuJ3QgdXNlIGFueSB2YXJpYWJsZXMgYmVjYXVzZSBpbmxpbmluZyB2YXJpYWJsZXMgaXMgZmFzdGVyLlxuICAgICAgICAgICAqIEJlbG93IGEgbm9uLW9wdGltaXplZCB2ZXJzaW9uIGlzIHNob3duIHRoYXQgaW1wbGVtZW50cyB0aGUgYmFzaWMgYWxnb3JpdGhtIHdpdGhcbiAgICAgICAgICAgKiBhIGZldyBjb21tZW50c1xuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0IGNhbnRDb3B5UGFyZW50SW5mbyA9IChpbmZvICYgKGJpbmFyeS5CSVQ3IHwgYmluYXJ5LkJJVDgpKSA9PT0gMDtcbiAgICAgICAgICAvLyBJZiBwYXJlbnQgPSBudWxsIGFuZCBuZWl0aGVyIGxlZnQgbm9yIHJpZ2h0IGFyZSBkZWZpbmVkLCB0aGVuIHdlIGtub3cgdGhhdCBgcGFyZW50YCBpcyBjaGlsZCBvZiBgeWBcbiAgICAgICAgICAvLyBhbmQgd2UgcmVhZCB0aGUgbmV4dCBzdHJpbmcgYXMgcGFyZW50WUtleS5cbiAgICAgICAgICAvLyBJdCBpbmRpY2F0ZXMgaG93IHdlIHN0b3JlL3JldHJpZXZlIHBhcmVudCBmcm9tIGB5LnNoYXJlYFxuICAgICAgICAgIC8vIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgICAgICBjb25zdCBzdHJ1Y3QgPSBuZXcgSXRlbShcbiAgICAgICAgICAgIGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spLFxuICAgICAgICAgICAgbnVsbCwgLy8gbGVmdGRcbiAgICAgICAgICAgIChpbmZvICYgYmluYXJ5LkJJVDgpID09PSBiaW5hcnkuQklUOCA/IGRlY29kZXIucmVhZExlZnRJRCgpIDogbnVsbCwgLy8gb3JpZ2luXG4gICAgICAgICAgICBudWxsLCAvLyByaWdodFxuICAgICAgICAgICAgKGluZm8gJiBiaW5hcnkuQklUNykgPT09IGJpbmFyeS5CSVQ3ID8gZGVjb2Rlci5yZWFkUmlnaHRJRCgpIDogbnVsbCwgLy8gcmlnaHQgb3JpZ2luXG4gICAgICAgICAgICBjYW50Q29weVBhcmVudEluZm8gPyAoZGVjb2Rlci5yZWFkUGFyZW50SW5mbygpID8gZG9jLmdldChkZWNvZGVyLnJlYWRTdHJpbmcoKSkgOiBkZWNvZGVyLnJlYWRMZWZ0SUQoKSkgOiBudWxsLCAvLyBwYXJlbnRcbiAgICAgICAgICAgIGNhbnRDb3B5UGFyZW50SW5mbyAmJiAoaW5mbyAmIGJpbmFyeS5CSVQ2KSA9PT0gYmluYXJ5LkJJVDYgPyBkZWNvZGVyLnJlYWRTdHJpbmcoKSA6IG51bGwsIC8vIHBhcmVudFN1YlxuICAgICAgICAgICAgcmVhZEl0ZW1Db250ZW50KGRlY29kZXIsIGluZm8pIC8vIGl0ZW0gY29udGVudFxuICAgICAgICAgICk7XG4gICAgICAgICAgLyogQSBub24tb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIG9mIHRoZSBhYm92ZSBhbGdvcml0aG06XG5cbiAgICAgICAgICAvLyBUaGUgaXRlbSB0aGF0IHdhcyBvcmlnaW5hbGx5IHRvIHRoZSBsZWZ0IG9mIHRoaXMgaXRlbS5cbiAgICAgICAgICBjb25zdCBvcmlnaW4gPSAoaW5mbyAmIGJpbmFyeS5CSVQ4KSA9PT0gYmluYXJ5LkJJVDggPyBkZWNvZGVyLnJlYWRMZWZ0SUQoKSA6IG51bGxcbiAgICAgICAgICAvLyBUaGUgaXRlbSB0aGF0IHdhcyBvcmlnaW5hbGx5IHRvIHRoZSByaWdodCBvZiB0aGlzIGl0ZW0uXG4gICAgICAgICAgY29uc3QgcmlnaHRPcmlnaW4gPSAoaW5mbyAmIGJpbmFyeS5CSVQ3KSA9PT0gYmluYXJ5LkJJVDcgPyBkZWNvZGVyLnJlYWRSaWdodElEKCkgOiBudWxsXG4gICAgICAgICAgY29uc3QgY2FudENvcHlQYXJlbnRJbmZvID0gKGluZm8gJiAoYmluYXJ5LkJJVDcgfCBiaW5hcnkuQklUOCkpID09PSAwXG4gICAgICAgICAgY29uc3QgaGFzUGFyZW50WUtleSA9IGNhbnRDb3B5UGFyZW50SW5mbyA/IGRlY29kZXIucmVhZFBhcmVudEluZm8oKSA6IGZhbHNlXG4gICAgICAgICAgLy8gSWYgcGFyZW50ID0gbnVsbCBhbmQgbmVpdGhlciBsZWZ0IG5vciByaWdodCBhcmUgZGVmaW5lZCwgdGhlbiB3ZSBrbm93IHRoYXQgYHBhcmVudGAgaXMgY2hpbGQgb2YgYHlgXG4gICAgICAgICAgLy8gYW5kIHdlIHJlYWQgdGhlIG5leHQgc3RyaW5nIGFzIHBhcmVudFlLZXkuXG4gICAgICAgICAgLy8gSXQgaW5kaWNhdGVzIGhvdyB3ZSBzdG9yZS9yZXRyaWV2ZSBwYXJlbnQgZnJvbSBgeS5zaGFyZWBcbiAgICAgICAgICAvLyBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICAgICAgY29uc3QgcGFyZW50WUtleSA9IGNhbnRDb3B5UGFyZW50SW5mbyAmJiBoYXNQYXJlbnRZS2V5ID8gZGVjb2Rlci5yZWFkU3RyaW5nKCkgOiBudWxsXG5cbiAgICAgICAgICBjb25zdCBzdHJ1Y3QgPSBuZXcgSXRlbShcbiAgICAgICAgICAgIGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spLFxuICAgICAgICAgICAgbnVsbCwgLy8gbGVmdGRcbiAgICAgICAgICAgIG9yaWdpbiwgLy8gb3JpZ2luXG4gICAgICAgICAgICBudWxsLCAvLyByaWdodFxuICAgICAgICAgICAgcmlnaHRPcmlnaW4sIC8vIHJpZ2h0IG9yaWdpblxuICAgICAgICAgICAgY2FudENvcHlQYXJlbnRJbmZvICYmICFoYXNQYXJlbnRZS2V5ID8gZGVjb2Rlci5yZWFkTGVmdElEKCkgOiAocGFyZW50WUtleSAhPT0gbnVsbCA/IGRvYy5nZXQocGFyZW50WUtleSkgOiBudWxsKSwgLy8gcGFyZW50XG4gICAgICAgICAgICBjYW50Q29weVBhcmVudEluZm8gJiYgKGluZm8gJiBiaW5hcnkuQklUNikgPT09IGJpbmFyeS5CSVQ2ID8gZGVjb2Rlci5yZWFkU3RyaW5nKCkgOiBudWxsLCAvLyBwYXJlbnRTdWJcbiAgICAgICAgICAgIHJlYWRJdGVtQ29udGVudChkZWNvZGVyLCBpbmZvKSAvLyBpdGVtIGNvbnRlbnRcbiAgICAgICAgICApXG4gICAgICAgICAgKi9cbiAgICAgICAgICByZWZzW2ldID0gc3RydWN0O1xuICAgICAgICAgIGNsb2NrICs9IHN0cnVjdC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coJ3RpbWUgdG8gcmVhZDogJywgcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydCkgLy8gQHRvZG8gcmVtb3ZlXG4gIH1cbiAgcmV0dXJuIGNsaWVudFJlZnNcbn07XG5cbi8qKlxuICogUmVzdW1lIGNvbXB1dGluZyBzdHJ1Y3RzIGdlbmVyYXRlZCBieSBzdHJ1Y3QgcmVhZGVycy5cbiAqXG4gKiBXaGlsZSB0aGVyZSBpcyBzb21ldGhpbmcgdG8gZG8sIHdlIGludGVncmF0ZSBzdHJ1Y3RzIGluIHRoaXMgb3JkZXJcbiAqIDEuIHRvcCBlbGVtZW50IG9uIHN0YWNrLCBpZiBzdGFjayBpcyBub3QgZW1wdHlcbiAqIDIuIG5leHQgZWxlbWVudCBmcm9tIGN1cnJlbnQgc3RydWN0IHJlYWRlciAoaWYgZW1wdHksIHVzZSBuZXh0IHN0cnVjdCByZWFkZXIpXG4gKlxuICogSWYgc3RydWN0IGNhdXNhbGx5IGRlcGVuZHMgb24gYW5vdGhlciBzdHJ1Y3QgKHJlZi5taXNzaW5nKSwgd2UgcHV0IG5leHQgcmVhZGVyIG9mXG4gKiBgcmVmLmlkLmNsaWVudGAgb24gdG9wIG9mIHN0YWNrLlxuICpcbiAqIEF0IHNvbWUgcG9pbnQgd2UgZmluZCBhIHN0cnVjdCB0aGF0IGhhcyBubyBjYXVzYWwgZGVwZW5kZW5jaWVzLFxuICogdGhlbiB3ZSBzdGFydCBlbXB0eWluZyB0aGUgc3RhY2suXG4gKlxuICogSXQgaXMgbm90IHBvc3NpYmxlIHRvIGhhdmUgY2lyY2xlczogaS5lLiBzdHJ1Y3QxIChmcm9tIGNsaWVudDEpIGRlcGVuZHMgb24gc3RydWN0MiAoZnJvbSBjbGllbnQyKVxuICogZGVwZW5kcyBvbiBzdHJ1Y3QzIChmcm9tIGNsaWVudDEpLiBUaGVyZWZvcmUgdGhlIG1heCBzdGFjayBzaXplIGlzIGVxYXVsIHRvIGBzdHJ1Y3RSZWFkZXJzLmxlbmd0aGAuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgaW1wbGVtZW50ZWQgaW4gYSB3YXkgc28gdGhhdCB3ZSBjYW4gcmVzdW1lIGNvbXB1dGF0aW9uIGlmIHRoaXMgdXBkYXRlXG4gKiBjYXVzYWxseSBkZXBlbmRzIG9uIGFub3RoZXIgdXBkYXRlLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtNYXA8bnVtYmVyLCB7IGk6IG51bWJlciwgcmVmczogKEdDIHwgSXRlbSlbXSB9Pn0gY2xpZW50c1N0cnVjdFJlZnNcbiAqIEByZXR1cm4geyBudWxsIHwgeyB1cGRhdGU6IFVpbnQ4QXJyYXksIG1pc3Npbmc6IE1hcDxudW1iZXIsbnVtYmVyPiB9IH1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGludGVncmF0ZVN0cnVjdHMgPSAodHJhbnNhY3Rpb24sIHN0b3JlLCBjbGllbnRzU3RydWN0UmVmcykgPT4ge1xuICAvKipcbiAgICogQHR5cGUge0FycmF5PEl0ZW0gfCBHQz59XG4gICAqL1xuICBjb25zdCBzdGFjayA9IFtdO1xuICAvLyBzb3J0IHRoZW0gc28gdGhhdCB3ZSB0YWtlIHRoZSBoaWdoZXIgaWQgZmlyc3QsIGluIGNhc2Ugb2YgY29uZmxpY3RzIHRoZSBsb3dlciBpZCB3aWxsIHByb2JhYmx5IG5vdCBjb25mbGljdCB3aXRoIHRoZSBpZCBmcm9tIHRoZSBoaWdoZXIgdXNlci5cbiAgbGV0IGNsaWVudHNTdHJ1Y3RSZWZzSWRzID0gQXJyYXkuZnJvbShjbGllbnRzU3RydWN0UmVmcy5rZXlzKCkpLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgaWYgKGNsaWVudHNTdHJ1Y3RSZWZzSWRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgY29uc3QgZ2V0TmV4dFN0cnVjdFRhcmdldCA9ICgpID0+IHtcbiAgICBpZiAoY2xpZW50c1N0cnVjdFJlZnNJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBsZXQgbmV4dFN0cnVjdHNUYXJnZXQgPSAvKiogQHR5cGUge3tpOm51bWJlcixyZWZzOkFycmF5PEdDfEl0ZW0+fX0gKi8gKGNsaWVudHNTdHJ1Y3RSZWZzLmdldChjbGllbnRzU3RydWN0UmVmc0lkc1tjbGllbnRzU3RydWN0UmVmc0lkcy5sZW5ndGggLSAxXSkpO1xuICAgIHdoaWxlIChuZXh0U3RydWN0c1RhcmdldC5yZWZzLmxlbmd0aCA9PT0gbmV4dFN0cnVjdHNUYXJnZXQuaSkge1xuICAgICAgY2xpZW50c1N0cnVjdFJlZnNJZHMucG9wKCk7XG4gICAgICBpZiAoY2xpZW50c1N0cnVjdFJlZnNJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBuZXh0U3RydWN0c1RhcmdldCA9IC8qKiBAdHlwZSB7e2k6bnVtYmVyLHJlZnM6QXJyYXk8R0N8SXRlbT59fSAqLyAoY2xpZW50c1N0cnVjdFJlZnMuZ2V0KGNsaWVudHNTdHJ1Y3RSZWZzSWRzW2NsaWVudHNTdHJ1Y3RSZWZzSWRzLmxlbmd0aCAtIDFdKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV4dFN0cnVjdHNUYXJnZXRcbiAgfTtcbiAgbGV0IGN1clN0cnVjdHNUYXJnZXQgPSBnZXROZXh0U3RydWN0VGFyZ2V0KCk7XG4gIGlmIChjdXJTdHJ1Y3RzVGFyZ2V0ID09PSBudWxsICYmIHN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1N0cnVjdFN0b3JlfVxuICAgKi9cbiAgY29uc3QgcmVzdFN0cnVjdHMgPSBuZXcgU3RydWN0U3RvcmUoKTtcbiAgY29uc3QgbWlzc2luZ1NWID0gbmV3IE1hcCgpO1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAgICovXG4gIGNvbnN0IHVwZGF0ZU1pc3NpbmdTdiA9IChjbGllbnQsIGNsb2NrKSA9PiB7XG4gICAgY29uc3QgbWNsb2NrID0gbWlzc2luZ1NWLmdldChjbGllbnQpO1xuICAgIGlmIChtY2xvY2sgPT0gbnVsbCB8fCBtY2xvY2sgPiBjbG9jaykge1xuICAgICAgbWlzc2luZ1NWLnNldChjbGllbnQsIGNsb2NrKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBAdHlwZSB7R0N8SXRlbX1cbiAgICovXG4gIGxldCBzdGFja0hlYWQgPSAvKiogQHR5cGUge2FueX0gKi8gKGN1clN0cnVjdHNUYXJnZXQpLnJlZnNbLyoqIEB0eXBlIHthbnl9ICovIChjdXJTdHJ1Y3RzVGFyZ2V0KS5pKytdO1xuICAvLyBjYWNoaW5nIHRoZSBzdGF0ZSBiZWNhdXNlIGl0IGlzIHVzZWQgdmVyeSBvZnRlblxuICBjb25zdCBzdGF0ZSA9IG5ldyBNYXAoKTtcblxuICBjb25zdCBhZGRTdGFja1RvUmVzdFNTID0gKCkgPT4ge1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBzdGFjaykge1xuICAgICAgY29uc3QgY2xpZW50ID0gaXRlbS5pZC5jbGllbnQ7XG4gICAgICBjb25zdCB1bmFwcGxpY2FibGVJdGVtcyA9IGNsaWVudHNTdHJ1Y3RSZWZzLmdldChjbGllbnQpO1xuICAgICAgaWYgKHVuYXBwbGljYWJsZUl0ZW1zKSB7XG4gICAgICAgIC8vIGRlY3JlbWVudCBiZWNhdXNlIHdlIHdlcmVuJ3QgYWJsZSB0byBhcHBseSBwcmV2aW91cyBvcGVyYXRpb25cbiAgICAgICAgdW5hcHBsaWNhYmxlSXRlbXMuaS0tO1xuICAgICAgICByZXN0U3RydWN0cy5jbGllbnRzLnNldChjbGllbnQsIHVuYXBwbGljYWJsZUl0ZW1zLnJlZnMuc2xpY2UodW5hcHBsaWNhYmxlSXRlbXMuaSkpO1xuICAgICAgICBjbGllbnRzU3RydWN0UmVmcy5kZWxldGUoY2xpZW50KTtcbiAgICAgICAgdW5hcHBsaWNhYmxlSXRlbXMuaSA9IDA7XG4gICAgICAgIHVuYXBwbGljYWJsZUl0ZW1zLnJlZnMgPSBbXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGl0ZW0gd2FzIHRoZSBsYXN0IGl0ZW0gb24gY2xpZW50c1N0cnVjdFJlZnMgYW5kIHRoZSBmaWVsZCB3YXMgYWxyZWFkeSBjbGVhcmVkLiBBZGQgaXRlbSB0byByZXN0U3RydWN0cyBhbmQgY29udGludWVcbiAgICAgICAgcmVzdFN0cnVjdHMuY2xpZW50cy5zZXQoY2xpZW50LCBbaXRlbV0pO1xuICAgICAgfVxuICAgICAgLy8gcmVtb3ZlIGNsaWVudCBmcm9tIGNsaWVudHNTdHJ1Y3RSZWZzSWRzIHRvIHByZXZlbnQgdXNlcnMgZnJvbSBhcHBseWluZyB0aGUgc2FtZSB1cGRhdGUgYWdhaW5cbiAgICAgIGNsaWVudHNTdHJ1Y3RSZWZzSWRzID0gY2xpZW50c1N0cnVjdFJlZnNJZHMuZmlsdGVyKGMgPT4gYyAhPT0gY2xpZW50KTtcbiAgICB9XG4gICAgc3RhY2subGVuZ3RoID0gMDtcbiAgfTtcblxuICAvLyBpdGVyYXRlIG92ZXIgYWxsIHN0cnVjdCByZWFkZXJzIHVudGlsIHdlIGFyZSBkb25lXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKHN0YWNrSGVhZC5jb25zdHJ1Y3RvciAhPT0gU2tpcCkge1xuICAgICAgY29uc3QgbG9jYWxDbG9jayA9IG1hcC5zZXRJZlVuZGVmaW5lZChzdGF0ZSwgc3RhY2tIZWFkLmlkLmNsaWVudCwgKCkgPT4gZ2V0U3RhdGUoc3RvcmUsIHN0YWNrSGVhZC5pZC5jbGllbnQpKTtcbiAgICAgIGNvbnN0IG9mZnNldCA9IGxvY2FsQ2xvY2sgLSBzdGFja0hlYWQuaWQuY2xvY2s7XG4gICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAvLyB1cGRhdGUgZnJvbSB0aGUgc2FtZSBjbGllbnQgaXMgbWlzc2luZ1xuICAgICAgICBzdGFjay5wdXNoKHN0YWNrSGVhZCk7XG4gICAgICAgIHVwZGF0ZU1pc3NpbmdTdihzdGFja0hlYWQuaWQuY2xpZW50LCBzdGFja0hlYWQuaWQuY2xvY2sgLSAxKTtcbiAgICAgICAgLy8gaGlkIGEgZGVhZCB3YWxsLCBhZGQgYWxsIGl0ZW1zIGZyb20gc3RhY2sgdG8gcmVzdFNTXG4gICAgICAgIGFkZFN0YWNrVG9SZXN0U1MoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG1pc3NpbmcgPSBzdGFja0hlYWQuZ2V0TWlzc2luZyh0cmFuc2FjdGlvbiwgc3RvcmUpO1xuICAgICAgICBpZiAobWlzc2luZyAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0YWNrLnB1c2goc3RhY2tIZWFkKTtcbiAgICAgICAgICAvLyBnZXQgdGhlIHN0cnVjdCByZWFkZXIgdGhhdCBoYXMgdGhlIG1pc3Npbmcgc3RydWN0XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQHR5cGUge3sgcmVmczogQXJyYXk8R0N8SXRlbT4sIGk6IG51bWJlciB9fVxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0IHN0cnVjdFJlZnMgPSBjbGllbnRzU3RydWN0UmVmcy5nZXQoLyoqIEB0eXBlIHtudW1iZXJ9ICovIChtaXNzaW5nKSkgfHwgeyByZWZzOiBbXSwgaTogMCB9O1xuICAgICAgICAgIGlmIChzdHJ1Y3RSZWZzLnJlZnMubGVuZ3RoID09PSBzdHJ1Y3RSZWZzLmkpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgdXBkYXRlIG1lc3NhZ2UgY2F1c2FsbHkgZGVwZW5kcyBvbiBhbm90aGVyIHVwZGF0ZSBtZXNzYWdlIHRoYXQgZG9lc24ndCBleGlzdCB5ZXRcbiAgICAgICAgICAgIHVwZGF0ZU1pc3NpbmdTdigvKiogQHR5cGUge251bWJlcn0gKi8gKG1pc3NpbmcpLCBnZXRTdGF0ZShzdG9yZSwgbWlzc2luZykpO1xuICAgICAgICAgICAgYWRkU3RhY2tUb1Jlc3RTUygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGFja0hlYWQgPSBzdHJ1Y3RSZWZzLnJlZnNbc3RydWN0UmVmcy5pKytdO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob2Zmc2V0ID09PSAwIHx8IG9mZnNldCA8IHN0YWNrSGVhZC5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBhbGwgZmluZSwgYXBwbHkgdGhlIHN0YWNraGVhZFxuICAgICAgICAgIHN0YWNrSGVhZC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIG9mZnNldCk7XG4gICAgICAgICAgc3RhdGUuc2V0KHN0YWNrSGVhZC5pZC5jbGllbnQsIHN0YWNrSGVhZC5pZC5jbG9jayArIHN0YWNrSGVhZC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGl0ZXJhdGUgdG8gbmV4dCBzdGFja0hlYWRcbiAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgc3RhY2tIZWFkID0gLyoqIEB0eXBlIHtHQ3xJdGVtfSAqLyAoc3RhY2sucG9wKCkpO1xuICAgIH0gZWxzZSBpZiAoY3VyU3RydWN0c1RhcmdldCAhPT0gbnVsbCAmJiBjdXJTdHJ1Y3RzVGFyZ2V0LmkgPCBjdXJTdHJ1Y3RzVGFyZ2V0LnJlZnMubGVuZ3RoKSB7XG4gICAgICBzdGFja0hlYWQgPSAvKiogQHR5cGUge0dDfEl0ZW19ICovIChjdXJTdHJ1Y3RzVGFyZ2V0LnJlZnNbY3VyU3RydWN0c1RhcmdldC5pKytdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VyU3RydWN0c1RhcmdldCA9IGdldE5leHRTdHJ1Y3RUYXJnZXQoKTtcbiAgICAgIGlmIChjdXJTdHJ1Y3RzVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgIC8vIHdlIGFyZSBkb25lIVxuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhY2tIZWFkID0gLyoqIEB0eXBlIHtHQ3xJdGVtfSAqLyAoY3VyU3RydWN0c1RhcmdldC5yZWZzW2N1clN0cnVjdHNUYXJnZXQuaSsrXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChyZXN0U3RydWN0cy5jbGllbnRzLnNpemUgPiAwKSB7XG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBVcGRhdGVFbmNvZGVyVjIoKTtcbiAgICB3cml0ZUNsaWVudHNTdHJ1Y3RzKGVuY29kZXIsIHJlc3RTdHJ1Y3RzLCBuZXcgTWFwKCkpO1xuICAgIC8vIHdyaXRlIGVtcHR5IGRlbGV0ZXNldFxuICAgIC8vIHdyaXRlRGVsZXRlU2V0KGVuY29kZXIsIG5ldyBEZWxldGVTZXQoKSlcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgMCk7IC8vID0+IG5vIG5lZWQgZm9yIGFuIGV4dHJhIGZ1bmN0aW9uIGNhbGwsIGp1c3Qgd3JpdGUgMCBkZWxldGVzXG4gICAgcmV0dXJuIHsgbWlzc2luZzogbWlzc2luZ1NWLCB1cGRhdGU6IGVuY29kZXIudG9VaW50OEFycmF5KCkgfVxuICB9XG4gIHJldHVybiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3Qgd3JpdGVTdHJ1Y3RzRnJvbVRyYW5zYWN0aW9uID0gKGVuY29kZXIsIHRyYW5zYWN0aW9uKSA9PiB3cml0ZUNsaWVudHNTdHJ1Y3RzKGVuY29kZXIsIHRyYW5zYWN0aW9uLmRvYy5zdG9yZSwgdHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUpO1xuXG4vKipcbiAqIFJlYWQgYW5kIGFwcGx5IGEgZG9jdW1lbnQgdXBkYXRlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaGFzIHRoZSBzYW1lIGVmZmVjdCBhcyBgYXBwbHlVcGRhdGVgIGJ1dCBhY2NlcHRzIGFuIGRlY29kZXIuXG4gKlxuICogQHBhcmFtIHtkZWNvZGluZy5EZWNvZGVyfSBkZWNvZGVyXG4gKiBAcGFyYW0ge0RvY30geWRvY1xuICogQHBhcmFtIHthbnl9IFt0cmFuc2FjdGlvbk9yaWdpbl0gVGhpcyB3aWxsIGJlIHN0b3JlZCBvbiBgdHJhbnNhY3Rpb24ub3JpZ2luYCBhbmQgYC5vbigndXBkYXRlJywgKHVwZGF0ZSwgb3JpZ2luKSlgXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gW3N0cnVjdERlY29kZXJdXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRVcGRhdGVWMiA9IChkZWNvZGVyLCB5ZG9jLCB0cmFuc2FjdGlvbk9yaWdpbiwgc3RydWN0RGVjb2RlciA9IG5ldyBVcGRhdGVEZWNvZGVyVjIoZGVjb2RlcikpID0+XG4gIHRyYW5zYWN0KHlkb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAvLyBmb3JjZSB0aGF0IHRyYW5zYWN0aW9uLmxvY2FsIGlzIHNldCB0byBub24tbG9jYWxcbiAgICB0cmFuc2FjdGlvbi5sb2NhbCA9IGZhbHNlO1xuICAgIGxldCByZXRyeSA9IGZhbHNlO1xuICAgIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvYztcbiAgICBjb25zdCBzdG9yZSA9IGRvYy5zdG9yZTtcbiAgICAvLyBsZXQgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgIGNvbnN0IHNzID0gcmVhZENsaWVudHNTdHJ1Y3RSZWZzKHN0cnVjdERlY29kZXIsIGRvYyk7XG4gICAgLy8gY29uc29sZS5sb2coJ3RpbWUgdG8gcmVhZCBzdHJ1Y3RzOiAnLCBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSAvLyBAdG9kbyByZW1vdmVcbiAgICAvLyBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgLy8gY29uc29sZS5sb2coJ3RpbWUgdG8gbWVyZ2U6ICcsIHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQpIC8vIEB0b2RvIHJlbW92ZVxuICAgIC8vIHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICBjb25zdCByZXN0U3RydWN0cyA9IGludGVncmF0ZVN0cnVjdHModHJhbnNhY3Rpb24sIHN0b3JlLCBzcyk7XG4gICAgY29uc3QgcGVuZGluZyA9IHN0b3JlLnBlbmRpbmdTdHJ1Y3RzO1xuICAgIGlmIChwZW5kaW5nKSB7XG4gICAgICAvLyBjaGVjayBpZiB3ZSBjYW4gYXBwbHkgc29tZXRoaW5nXG4gICAgICBmb3IgKGNvbnN0IFtjbGllbnQsIGNsb2NrXSBvZiBwZW5kaW5nLm1pc3NpbmcpIHtcbiAgICAgICAgaWYgKGNsb2NrIDwgZ2V0U3RhdGUoc3RvcmUsIGNsaWVudCkpIHtcbiAgICAgICAgICByZXRyeSA9IHRydWU7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlc3RTdHJ1Y3RzKSB7XG4gICAgICAgIC8vIG1lcmdlIHJlc3RTdHJ1Y3RzIGludG8gc3RvcmUucGVuZGluZ1xuICAgICAgICBmb3IgKGNvbnN0IFtjbGllbnQsIGNsb2NrXSBvZiByZXN0U3RydWN0cy5taXNzaW5nKSB7XG4gICAgICAgICAgY29uc3QgbWNsb2NrID0gcGVuZGluZy5taXNzaW5nLmdldChjbGllbnQpO1xuICAgICAgICAgIGlmIChtY2xvY2sgPT0gbnVsbCB8fCBtY2xvY2sgPiBjbG9jaykge1xuICAgICAgICAgICAgcGVuZGluZy5taXNzaW5nLnNldChjbGllbnQsIGNsb2NrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGVuZGluZy51cGRhdGUgPSBtZXJnZVVwZGF0ZXNWMihbcGVuZGluZy51cGRhdGUsIHJlc3RTdHJ1Y3RzLnVwZGF0ZV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdG9yZS5wZW5kaW5nU3RydWN0cyA9IHJlc3RTdHJ1Y3RzO1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygndGltZSB0byBpbnRlZ3JhdGU6ICcsIHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQpIC8vIEB0b2RvIHJlbW92ZVxuICAgIC8vIHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICBjb25zdCBkc1Jlc3QgPSByZWFkQW5kQXBwbHlEZWxldGVTZXQoc3RydWN0RGVjb2RlciwgdHJhbnNhY3Rpb24sIHN0b3JlKTtcbiAgICBpZiAoc3RvcmUucGVuZGluZ0RzKSB7XG4gICAgICAvLyBAdG9kbyB3ZSBjb3VsZCBtYWtlIGEgbG93ZXItYm91bmQgc3RhdGUtdmVjdG9yIGNoZWNrIGFzIHdlIGRvIGFib3ZlXG4gICAgICBjb25zdCBwZW5kaW5nRFNVcGRhdGUgPSBuZXcgVXBkYXRlRGVjb2RlclYyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIoc3RvcmUucGVuZGluZ0RzKSk7XG4gICAgICBkZWNvZGluZy5yZWFkVmFyVWludChwZW5kaW5nRFNVcGRhdGUucmVzdERlY29kZXIpOyAvLyByZWFkIDAgc3RydWN0cywgYmVjYXVzZSB3ZSBvbmx5IGVuY29kZSBkZWxldGVzIGluIHBlbmRpbmdkc3VwZGF0ZVxuICAgICAgY29uc3QgZHNSZXN0MiA9IHJlYWRBbmRBcHBseURlbGV0ZVNldChwZW5kaW5nRFNVcGRhdGUsIHRyYW5zYWN0aW9uLCBzdG9yZSk7XG4gICAgICBpZiAoZHNSZXN0ICYmIGRzUmVzdDIpIHtcbiAgICAgICAgLy8gY2FzZSAxOiBkczEgIT0gbnVsbCAmJiBkczIgIT0gbnVsbFxuICAgICAgICBzdG9yZS5wZW5kaW5nRHMgPSBtZXJnZVVwZGF0ZXNWMihbZHNSZXN0LCBkc1Jlc3QyXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjYXNlIDI6IGRzMSAhPSBudWxsXG4gICAgICAgIC8vIGNhc2UgMzogZHMyICE9IG51bGxcbiAgICAgICAgLy8gY2FzZSA0OiBkczEgPT0gbnVsbCAmJiBkczIgPT0gbnVsbFxuICAgICAgICBzdG9yZS5wZW5kaW5nRHMgPSBkc1Jlc3QgfHwgZHNSZXN0MjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRWl0aGVyIGRzUmVzdCA9PSBudWxsICYmIHBlbmRpbmdEcyA9PSBudWxsIE9SIGRzUmVzdCAhPSBudWxsXG4gICAgICBzdG9yZS5wZW5kaW5nRHMgPSBkc1Jlc3Q7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKCd0aW1lIHRvIGNsZWFudXA6ICcsIHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnQpIC8vIEB0b2RvIHJlbW92ZVxuICAgIC8vIHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KClcblxuICAgIC8vIGNvbnNvbGUubG9nKCd0aW1lIHRvIHJlc3VtZSBkZWxldGUgcmVhZGVyczogJywgcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydCkgLy8gQHRvZG8gcmVtb3ZlXG4gICAgLy8gc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgIGlmIChyZXRyeSkge1xuICAgICAgY29uc3QgdXBkYXRlID0gLyoqIEB0eXBlIHt7dXBkYXRlOiBVaW50OEFycmF5fX0gKi8gKHN0b3JlLnBlbmRpbmdTdHJ1Y3RzKS51cGRhdGU7XG4gICAgICBzdG9yZS5wZW5kaW5nU3RydWN0cyA9IG51bGw7XG4gICAgICBhcHBseVVwZGF0ZVYyKHRyYW5zYWN0aW9uLmRvYywgdXBkYXRlKTtcbiAgICB9XG4gIH0sIHRyYW5zYWN0aW9uT3JpZ2luLCBmYWxzZSk7XG5cbi8qKlxuICogUmVhZCBhbmQgYXBwbHkgYSBkb2N1bWVudCB1cGRhdGUuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIGBhcHBseVVwZGF0ZWAgYnV0IGFjY2VwdHMgYW4gZGVjb2Rlci5cbiAqXG4gKiBAcGFyYW0ge2RlY29kaW5nLkRlY29kZXJ9IGRlY29kZXJcbiAqIEBwYXJhbSB7RG9jfSB5ZG9jXG4gKiBAcGFyYW0ge2FueX0gW3RyYW5zYWN0aW9uT3JpZ2luXSBUaGlzIHdpbGwgYmUgc3RvcmVkIG9uIGB0cmFuc2FjdGlvbi5vcmlnaW5gIGFuZCBgLm9uKCd1cGRhdGUnLCAodXBkYXRlLCBvcmlnaW4pKWBcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZFVwZGF0ZSA9IChkZWNvZGVyLCB5ZG9jLCB0cmFuc2FjdGlvbk9yaWdpbikgPT4gcmVhZFVwZGF0ZVYyKGRlY29kZXIsIHlkb2MsIHRyYW5zYWN0aW9uT3JpZ2luLCBuZXcgVXBkYXRlRGVjb2RlclYxKGRlY29kZXIpKTtcblxuLyoqXG4gKiBBcHBseSBhIGRvY3VtZW50IHVwZGF0ZSBjcmVhdGVkIGJ5LCBmb3IgZXhhbXBsZSwgYHkub24oJ3VwZGF0ZScsIHVwZGF0ZSA9PiAuLilgIG9yIGB1cGRhdGUgPSBlbmNvZGVTdGF0ZUFzVXBkYXRlKClgLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaGFzIHRoZSBzYW1lIGVmZmVjdCBhcyBgcmVhZFVwZGF0ZWAgYnV0IGFjY2VwdHMgYW4gVWludDhBcnJheSBpbnN0ZWFkIG9mIGEgRGVjb2Rlci5cbiAqXG4gKiBAcGFyYW0ge0RvY30geWRvY1xuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7YW55fSBbdHJhbnNhY3Rpb25PcmlnaW5dIFRoaXMgd2lsbCBiZSBzdG9yZWQgb24gYHRyYW5zYWN0aW9uLm9yaWdpbmAgYW5kIGAub24oJ3VwZGF0ZScsICh1cGRhdGUsIG9yaWdpbikpYFxuICogQHBhcmFtIHt0eXBlb2YgVXBkYXRlRGVjb2RlclYxIHwgdHlwZW9mIFVwZGF0ZURlY29kZXJWMn0gW1lEZWNvZGVyXVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBhcHBseVVwZGF0ZVYyID0gKHlkb2MsIHVwZGF0ZSwgdHJhbnNhY3Rpb25PcmlnaW4sIFlEZWNvZGVyID0gVXBkYXRlRGVjb2RlclYyKSA9PiB7XG4gIGNvbnN0IGRlY29kZXIgPSBkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVwZGF0ZSk7XG4gIHJlYWRVcGRhdGVWMihkZWNvZGVyLCB5ZG9jLCB0cmFuc2FjdGlvbk9yaWdpbiwgbmV3IFlEZWNvZGVyKGRlY29kZXIpKTtcbn07XG5cbi8qKlxuICogQXBwbHkgYSBkb2N1bWVudCB1cGRhdGUgY3JlYXRlZCBieSwgZm9yIGV4YW1wbGUsIGB5Lm9uKCd1cGRhdGUnLCB1cGRhdGUgPT4gLi4pYCBvciBgdXBkYXRlID0gZW5jb2RlU3RhdGVBc1VwZGF0ZSgpYC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMgYHJlYWRVcGRhdGVgIGJ1dCBhY2NlcHRzIGFuIFVpbnQ4QXJyYXkgaW5zdGVhZCBvZiBhIERlY29kZXIuXG4gKlxuICogQHBhcmFtIHtEb2N9IHlkb2NcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge2FueX0gW3RyYW5zYWN0aW9uT3JpZ2luXSBUaGlzIHdpbGwgYmUgc3RvcmVkIG9uIGB0cmFuc2FjdGlvbi5vcmlnaW5gIGFuZCBgLm9uKCd1cGRhdGUnLCAodXBkYXRlLCBvcmlnaW4pKWBcbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgYXBwbHlVcGRhdGUgPSAoeWRvYywgdXBkYXRlLCB0cmFuc2FjdGlvbk9yaWdpbikgPT4gYXBwbHlVcGRhdGVWMih5ZG9jLCB1cGRhdGUsIHRyYW5zYWN0aW9uT3JpZ2luLCBVcGRhdGVEZWNvZGVyVjEpO1xuXG4vKipcbiAqIFdyaXRlIGFsbCB0aGUgZG9jdW1lbnQgYXMgYSBzaW5nbGUgdXBkYXRlIG1lc3NhZ2UuIElmIHlvdSBzcGVjaWZ5IHRoZSBzdGF0ZSBvZiB0aGUgcmVtb3RlIGNsaWVudCAoYHRhcmdldFN0YXRlVmVjdG9yYCkgaXQgd2lsbFxuICogb25seSB3cml0ZSB0aGUgb3BlcmF0aW9ucyB0aGF0IGFyZSBtaXNzaW5nLlxuICpcbiAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge0RvY30gZG9jXG4gKiBAcGFyYW0ge01hcDxudW1iZXIsbnVtYmVyPn0gW3RhcmdldFN0YXRlVmVjdG9yXSBUaGUgc3RhdGUgb2YgdGhlIHRhcmdldCB0aGF0IHJlY2VpdmVzIHRoZSB1cGRhdGUuIExlYXZlIGVtcHR5IHRvIHdyaXRlIGFsbCBrbm93biBzdHJ1Y3RzXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHdyaXRlU3RhdGVBc1VwZGF0ZSA9IChlbmNvZGVyLCBkb2MsIHRhcmdldFN0YXRlVmVjdG9yID0gbmV3IE1hcCgpKSA9PiB7XG4gIHdyaXRlQ2xpZW50c1N0cnVjdHMoZW5jb2RlciwgZG9jLnN0b3JlLCB0YXJnZXRTdGF0ZVZlY3Rvcik7XG4gIHdyaXRlRGVsZXRlU2V0KGVuY29kZXIsIGNyZWF0ZURlbGV0ZVNldEZyb21TdHJ1Y3RTdG9yZShkb2Muc3RvcmUpKTtcbn07XG5cbi8qKlxuICogV3JpdGUgYWxsIHRoZSBkb2N1bWVudCBhcyBhIHNpbmdsZSB1cGRhdGUgbWVzc2FnZSB0aGF0IGNhbiBiZSBhcHBsaWVkIG9uIHRoZSByZW1vdGUgZG9jdW1lbnQuIElmIHlvdSBzcGVjaWZ5IHRoZSBzdGF0ZSBvZiB0aGUgcmVtb3RlIGNsaWVudCAoYHRhcmdldFN0YXRlYCkgaXQgd2lsbFxuICogb25seSB3cml0ZSB0aGUgb3BlcmF0aW9ucyB0aGF0IGFyZSBtaXNzaW5nLlxuICpcbiAqIFVzZSBgd3JpdGVTdGF0ZUFzVXBkYXRlYCBpbnN0ZWFkIGlmIHlvdSBhcmUgd29ya2luZyB3aXRoIGxpYjAvZW5jb2RpbmcuanMjRW5jb2RlclxuICpcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gW2VuY29kZWRUYXJnZXRTdGF0ZVZlY3Rvcl0gVGhlIHN0YXRlIG9mIHRoZSB0YXJnZXQgdGhhdCByZWNlaXZlcyB0aGUgdXBkYXRlLiBMZWF2ZSBlbXB0eSB0byB3cml0ZSBhbGwga25vd24gc3RydWN0c1xuICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IFtlbmNvZGVyXVxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZW5jb2RlU3RhdGVBc1VwZGF0ZVYyID0gKGRvYywgZW5jb2RlZFRhcmdldFN0YXRlVmVjdG9yID0gbmV3IFVpbnQ4QXJyYXkoWzBdKSwgZW5jb2RlciA9IG5ldyBVcGRhdGVFbmNvZGVyVjIoKSkgPT4ge1xuICBjb25zdCB0YXJnZXRTdGF0ZVZlY3RvciA9IGRlY29kZVN0YXRlVmVjdG9yKGVuY29kZWRUYXJnZXRTdGF0ZVZlY3Rvcik7XG4gIHdyaXRlU3RhdGVBc1VwZGF0ZShlbmNvZGVyLCBkb2MsIHRhcmdldFN0YXRlVmVjdG9yKTtcbiAgY29uc3QgdXBkYXRlcyA9IFtlbmNvZGVyLnRvVWludDhBcnJheSgpXTtcbiAgLy8gYWxzbyBhZGQgdGhlIHBlbmRpbmcgdXBkYXRlcyAoaWYgdGhlcmUgYXJlIGFueSlcbiAgaWYgKGRvYy5zdG9yZS5wZW5kaW5nRHMpIHtcbiAgICB1cGRhdGVzLnB1c2goZG9jLnN0b3JlLnBlbmRpbmdEcyk7XG4gIH1cbiAgaWYgKGRvYy5zdG9yZS5wZW5kaW5nU3RydWN0cykge1xuICAgIHVwZGF0ZXMucHVzaChkaWZmVXBkYXRlVjIoZG9jLnN0b3JlLnBlbmRpbmdTdHJ1Y3RzLnVwZGF0ZSwgZW5jb2RlZFRhcmdldFN0YXRlVmVjdG9yKSk7XG4gIH1cbiAgaWYgKHVwZGF0ZXMubGVuZ3RoID4gMSkge1xuICAgIGlmIChlbmNvZGVyLmNvbnN0cnVjdG9yID09PSBVcGRhdGVFbmNvZGVyVjEpIHtcbiAgICAgIHJldHVybiBtZXJnZVVwZGF0ZXModXBkYXRlcy5tYXAoKHVwZGF0ZSwgaSkgPT4gaSA9PT0gMCA/IHVwZGF0ZSA6IGNvbnZlcnRVcGRhdGVGb3JtYXRWMlRvVjEodXBkYXRlKSkpXG4gICAgfSBlbHNlIGlmIChlbmNvZGVyLmNvbnN0cnVjdG9yID09PSBVcGRhdGVFbmNvZGVyVjIpIHtcbiAgICAgIHJldHVybiBtZXJnZVVwZGF0ZXNWMih1cGRhdGVzKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdXBkYXRlc1swXVxufTtcblxuLyoqXG4gKiBXcml0ZSBhbGwgdGhlIGRvY3VtZW50IGFzIGEgc2luZ2xlIHVwZGF0ZSBtZXNzYWdlIHRoYXQgY2FuIGJlIGFwcGxpZWQgb24gdGhlIHJlbW90ZSBkb2N1bWVudC4gSWYgeW91IHNwZWNpZnkgdGhlIHN0YXRlIG9mIHRoZSByZW1vdGUgY2xpZW50IChgdGFyZ2V0U3RhdGVgKSBpdCB3aWxsXG4gKiBvbmx5IHdyaXRlIHRoZSBvcGVyYXRpb25zIHRoYXQgYXJlIG1pc3NpbmcuXG4gKlxuICogVXNlIGB3cml0ZVN0YXRlQXNVcGRhdGVgIGluc3RlYWQgaWYgeW91IGFyZSB3b3JraW5nIHdpdGggbGliMC9lbmNvZGluZy5qcyNFbmNvZGVyXG4gKlxuICogQHBhcmFtIHtEb2N9IGRvY1xuICogQHBhcmFtIHtVaW50OEFycmF5fSBbZW5jb2RlZFRhcmdldFN0YXRlVmVjdG9yXSBUaGUgc3RhdGUgb2YgdGhlIHRhcmdldCB0aGF0IHJlY2VpdmVzIHRoZSB1cGRhdGUuIExlYXZlIGVtcHR5IHRvIHdyaXRlIGFsbCBrbm93biBzdHJ1Y3RzXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBlbmNvZGVTdGF0ZUFzVXBkYXRlID0gKGRvYywgZW5jb2RlZFRhcmdldFN0YXRlVmVjdG9yKSA9PiBlbmNvZGVTdGF0ZUFzVXBkYXRlVjIoZG9jLCBlbmNvZGVkVGFyZ2V0U3RhdGVWZWN0b3IsIG5ldyBVcGRhdGVFbmNvZGVyVjEoKSk7XG5cbi8qKlxuICogUmVhZCBzdGF0ZSB2ZWN0b3IgZnJvbSBEZWNvZGVyIGFuZCByZXR1cm4gYXMgTWFwXG4gKlxuICogQHBhcmFtIHtEU0RlY29kZXJWMSB8IERTRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtNYXA8bnVtYmVyLG51bWJlcj59IE1hcHMgYGNsaWVudGAgdG8gdGhlIG51bWJlciBuZXh0IGV4cGVjdGVkIGBjbG9ja2AgZnJvbSB0aGF0IGNsaWVudC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZFN0YXRlVmVjdG9yID0gZGVjb2RlciA9PiB7XG4gIGNvbnN0IHNzID0gbmV3IE1hcCgpO1xuICBjb25zdCBzc0xlbmd0aCA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNzTGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjbGllbnQgPSBkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyLnJlc3REZWNvZGVyKTtcbiAgICBjb25zdCBjbG9jayA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgIHNzLnNldChjbGllbnQsIGNsb2NrKTtcbiAgfVxuICByZXR1cm4gc3Ncbn07XG5cbi8qKlxuICogUmVhZCBkZWNvZGVkU3RhdGUgYW5kIHJldHVybiBTdGF0ZSBhcyBNYXAuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBkZWNvZGVkU3RhdGVcbiAqIEByZXR1cm4ge01hcDxudW1iZXIsbnVtYmVyPn0gTWFwcyBgY2xpZW50YCB0byB0aGUgbnVtYmVyIG5leHQgZXhwZWN0ZWQgYGNsb2NrYCBmcm9tIHRoYXQgY2xpZW50LlxuICpcbiAqIEBmdW5jdGlvblxuICovXG4vLyBleHBvcnQgY29uc3QgZGVjb2RlU3RhdGVWZWN0b3JWMiA9IGRlY29kZWRTdGF0ZSA9PiByZWFkU3RhdGVWZWN0b3IobmV3IERTRGVjb2RlclYyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIoZGVjb2RlZFN0YXRlKSkpXG5cbi8qKlxuICogUmVhZCBkZWNvZGVkU3RhdGUgYW5kIHJldHVybiBTdGF0ZSBhcyBNYXAuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBkZWNvZGVkU3RhdGVcbiAqIEByZXR1cm4ge01hcDxudW1iZXIsbnVtYmVyPn0gTWFwcyBgY2xpZW50YCB0byB0aGUgbnVtYmVyIG5leHQgZXhwZWN0ZWQgYGNsb2NrYCBmcm9tIHRoYXQgY2xpZW50LlxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBkZWNvZGVTdGF0ZVZlY3RvciA9IGRlY29kZWRTdGF0ZSA9PiByZWFkU3RhdGVWZWN0b3IobmV3IERTRGVjb2RlclYxKGRlY29kaW5nLmNyZWF0ZURlY29kZXIoZGVjb2RlZFN0YXRlKSkpO1xuXG4vKipcbiAqIEBwYXJhbSB7RFNFbmNvZGVyVjEgfCBEU0VuY29kZXJWMn0gZW5jb2RlclxuICogQHBhcmFtIHtNYXA8bnVtYmVyLG51bWJlcj59IHN2XG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3Qgd3JpdGVTdGF0ZVZlY3RvciA9IChlbmNvZGVyLCBzdikgPT4ge1xuICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2Rlciwgc3Yuc2l6ZSk7XG4gIEFycmF5LmZyb20oc3YuZW50cmllcygpKS5zb3J0KChhLCBiKSA9PiBiWzBdIC0gYVswXSkuZm9yRWFjaCgoW2NsaWVudCwgY2xvY2tdKSA9PiB7XG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGNsaWVudCk7IC8vIEB0b2RvIHVzZSBhIHNwZWNpYWwgY2xpZW50IGRlY29kZXIgdGhhdCBpcyBiYXNlZCBvbiBtYXBwaW5nXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGNsb2NrKTtcbiAgfSk7XG4gIHJldHVybiBlbmNvZGVyXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RFNFbmNvZGVyVjEgfCBEU0VuY29kZXJWMn0gZW5jb2RlclxuICogQHBhcmFtIHtEb2N9IGRvY1xuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB3cml0ZURvY3VtZW50U3RhdGVWZWN0b3IgPSAoZW5jb2RlciwgZG9jKSA9PiB3cml0ZVN0YXRlVmVjdG9yKGVuY29kZXIsIGdldFN0YXRlVmVjdG9yKGRvYy5zdG9yZSkpO1xuXG4vKipcbiAqIEVuY29kZSBTdGF0ZSBhcyBVaW50OEFycmF5LlxuICpcbiAqIEBwYXJhbSB7RG9jfE1hcDxudW1iZXIsbnVtYmVyPn0gZG9jXG4gKiBAcGFyYW0ge0RTRW5jb2RlclYxIHwgRFNFbmNvZGVyVjJ9IFtlbmNvZGVyXVxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZW5jb2RlU3RhdGVWZWN0b3JWMiA9IChkb2MsIGVuY29kZXIgPSBuZXcgRFNFbmNvZGVyVjIoKSkgPT4ge1xuICBpZiAoZG9jIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgd3JpdGVTdGF0ZVZlY3RvcihlbmNvZGVyLCBkb2MpO1xuICB9IGVsc2Uge1xuICAgIHdyaXRlRG9jdW1lbnRTdGF0ZVZlY3RvcihlbmNvZGVyLCBkb2MpO1xuICB9XG4gIHJldHVybiBlbmNvZGVyLnRvVWludDhBcnJheSgpXG59O1xuXG4vKipcbiAqIEVuY29kZSBTdGF0ZSBhcyBVaW50OEFycmF5LlxuICpcbiAqIEBwYXJhbSB7RG9jfE1hcDxudW1iZXIsbnVtYmVyPn0gZG9jXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBlbmNvZGVTdGF0ZVZlY3RvciA9IGRvYyA9PiBlbmNvZGVTdGF0ZVZlY3RvclYyKGRvYywgbmV3IERTRW5jb2RlclYxKCkpO1xuXG4vKipcbiAqIEdlbmVyYWwgZXZlbnQgaGFuZGxlciBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAdGVtcGxhdGUgQVJHMCwgQVJHMVxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEV2ZW50SGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24oQVJHMCwgQVJHMSk6dm9pZD59XG4gICAgICovXG4gICAgdGhpcy5sID0gW107XG4gIH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgQVJHMCxBUkcxXG4gKiBAcmV0dXJucyB7RXZlbnRIYW5kbGVyPEFSRzAsQVJHMT59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjcmVhdGVFdmVudEhhbmRsZXIgPSAoKSA9PiBuZXcgRXZlbnRIYW5kbGVyKCk7XG5cbi8qKlxuICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGlzIGNhbGxlZCB3aGVuXG4gKiB7QGxpbmsgRXZlbnRIYW5kbGVyI2NhbGxFdmVudExpc3RlbmVyc30gaXMgY2FsbGVkLlxuICpcbiAqIEB0ZW1wbGF0ZSBBUkcwLEFSRzFcbiAqIEBwYXJhbSB7RXZlbnRIYW5kbGVyPEFSRzAsQVJHMT59IGV2ZW50SGFuZGxlclxuICogQHBhcmFtIHtmdW5jdGlvbihBUkcwLEFSRzEpOnZvaWR9IGYgVGhlIGV2ZW50IGhhbmRsZXIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBhZGRFdmVudEhhbmRsZXJMaXN0ZW5lciA9IChldmVudEhhbmRsZXIsIGYpID0+XG4gIGV2ZW50SGFuZGxlci5sLnB1c2goZik7XG5cbi8qKlxuICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lci5cbiAqXG4gKiBAdGVtcGxhdGUgQVJHMCxBUkcxXG4gKiBAcGFyYW0ge0V2ZW50SGFuZGxlcjxBUkcwLEFSRzE+fSBldmVudEhhbmRsZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oQVJHMCxBUkcxKTp2b2lkfSBmIFRoZSBldmVudCBoYW5kbGVyIHRoYXQgd2FzIGFkZGVkIHdpdGhcbiAqICAgICAgICAgICAgICAgICAgICAge0BsaW5rIEV2ZW50SGFuZGxlciNhZGRFdmVudExpc3RlbmVyfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVtb3ZlRXZlbnRIYW5kbGVyTGlzdGVuZXIgPSAoZXZlbnRIYW5kbGVyLCBmKSA9PiB7XG4gIGNvbnN0IGwgPSBldmVudEhhbmRsZXIubDtcbiAgY29uc3QgbGVuID0gbC5sZW5ndGg7XG4gIGV2ZW50SGFuZGxlci5sID0gbC5maWx0ZXIoZyA9PiBmICE9PSBnKTtcbiAgaWYgKGxlbiA9PT0gZXZlbnRIYW5kbGVyLmwubGVuZ3RoKSB7XG4gICAgY29uc29sZS5lcnJvcignW3lqc10gVHJpZWQgdG8gcmVtb3ZlIGV2ZW50IGhhbmRsZXIgdGhhdCBkb2VzblxcJ3QgZXhpc3QuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbCBhbGwgZXZlbnQgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZCB2aWFcbiAqIHtAbGluayBFdmVudEhhbmRsZXIjYWRkRXZlbnRMaXN0ZW5lcn0uXG4gKlxuICogQHRlbXBsYXRlIEFSRzAsQVJHMVxuICogQHBhcmFtIHtFdmVudEhhbmRsZXI8QVJHMCxBUkcxPn0gZXZlbnRIYW5kbGVyXG4gKiBAcGFyYW0ge0FSRzB9IGFyZzBcbiAqIEBwYXJhbSB7QVJHMX0gYXJnMVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY2FsbEV2ZW50SGFuZGxlckxpc3RlbmVycyA9IChldmVudEhhbmRsZXIsIGFyZzAsIGFyZzEpID0+XG4gIGYuY2FsbEFsbChldmVudEhhbmRsZXIubCwgW2FyZzAsIGFyZzFdKTtcblxuY2xhc3MgSUQge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudCBjbGllbnQgaWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrIHVuaXF1ZSBwZXIgY2xpZW50IGlkLCBjb250aW51b3VzIG51bWJlclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGNsaWVudCwgY2xvY2spIHtcbiAgICAvKipcbiAgICAgKiBDbGllbnQgaWRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIC8qKlxuICAgICAqIHVuaXF1ZSBwZXIgY2xpZW50IGlkLCBjb250aW51b3VzIG51bWJlclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5jbG9jayA9IGNsb2NrO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtJRCB8IG51bGx9IGFcbiAqIEBwYXJhbSB7SUQgfCBudWxsfSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjb21wYXJlSURzID0gKGEsIGIpID0+IGEgPT09IGIgfHwgKGEgIT09IG51bGwgJiYgYiAhPT0gbnVsbCAmJiBhLmNsaWVudCA9PT0gYi5jbGllbnQgJiYgYS5jbG9jayA9PT0gYi5jbG9jayk7XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGNsb2NrXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjcmVhdGVJRCA9IChjbGllbnQsIGNsb2NrKSA9PiBuZXcgSUQoY2xpZW50LCBjbG9jayk7XG5cbi8qKlxuICogQHBhcmFtIHtlbmNvZGluZy5FbmNvZGVyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge0lEfSBpZFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3Qgd3JpdGVJRCA9IChlbmNvZGVyLCBpZCkgPT4ge1xuICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2RlciwgaWQuY2xpZW50KTtcbiAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIsIGlkLmNsb2NrKTtcbn07XG5cbi8qKlxuICogUmVhZCBJRC5cbiAqICogSWYgZmlyc3QgdmFyVWludCByZWFkIGlzIDB4RkZGRkZGIGEgUm9vdElEIGlzIHJldHVybmVkLlxuICogKiBPdGhlcndpc2UgYW4gSUQgaXMgcmV0dXJuZWRcbiAqXG4gKiBAcGFyYW0ge2RlY29kaW5nLkRlY29kZXJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge0lEfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZElEID0gZGVjb2RlciA9PlxuICBjcmVhdGVJRChkZWNvZGluZy5yZWFkVmFyVWludChkZWNvZGVyKSwgZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2RlcikpO1xuXG4vKipcbiAqIFRoZSB0b3AgdHlwZXMgYXJlIG1hcHBlZCBmcm9tIHkuc2hhcmUuZ2V0KGtleW5hbWUpID0+IHR5cGUuXG4gKiBgdHlwZWAgZG9lcyBub3Qgc3RvcmUgYW55IGluZm9ybWF0aW9uIGFib3V0IHRoZSBga2V5bmFtZWAuXG4gKiBUaGlzIGZ1bmN0aW9uIGZpbmRzIHRoZSBjb3JyZWN0IGBrZXluYW1lYCBmb3IgYHR5cGVgIGFuZCB0aHJvd3Mgb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGZpbmRSb290VHlwZUtleSA9IHR5cGUgPT4ge1xuICAvLyBAdHMtaWdub3JlIF95IG11c3QgYmUgZGVmaW5lZCwgb3RoZXJ3aXNlIHVuZXhwZWN0ZWQgY2FzZVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0eXBlLmRvYy5zaGFyZS5lbnRyaWVzKCkpIHtcbiAgICBpZiAodmFsdWUgPT09IHR5cGUpIHtcbiAgICAgIHJldHVybiBrZXlcbiAgICB9XG4gIH1cbiAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBgcGFyZW50YCBpcyBhIHBhcmVudCBvZiBgY2hpbGRgLlxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtJdGVtfG51bGx9IGNoaWxkXG4gKiBAcmV0dXJuIHtCb29sZWFufSBXaGV0aGVyIGBwYXJlbnRgIGlzIGEgcGFyZW50IG9mIGBjaGlsZGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBpc1BhcmVudE9mID0gKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgaWYgKGNoaWxkLnBhcmVudCA9PT0gcGFyZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBjaGlsZCA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChjaGlsZC5wYXJlbnQpLl9pdGVtO1xuICB9XG4gIHJldHVybiBmYWxzZVxufTtcblxuLyoqXG4gKiBDb252ZW5pZW50IGhlbHBlciB0byBsb2cgdHlwZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBEbyBub3QgdXNlIGluIHByb2R1Y3RpdmUgc3lzdGVtcyBhcyB0aGUgb3V0cHV0IGNhbiBiZSBpbW1lbnNlIVxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqL1xuY29uc3QgbG9nVHlwZSA9IHR5cGUgPT4ge1xuICBjb25zdCByZXMgPSBbXTtcbiAgbGV0IG4gPSB0eXBlLl9zdGFydDtcbiAgd2hpbGUgKG4pIHtcbiAgICByZXMucHVzaChuKTtcbiAgICBuID0gbi5yaWdodDtcbiAgfVxuICBjb25zb2xlLmxvZygnQ2hpbGRyZW46ICcsIHJlcyk7XG4gIGNvbnNvbGUubG9nKCdDaGlsZHJlbiBjb250ZW50OiAnLCByZXMuZmlsdGVyKG0gPT4gIW0uZGVsZXRlZCkubWFwKG0gPT4gbS5jb250ZW50KSk7XG59O1xuXG5jbGFzcyBQZXJtYW5lbnRVc2VyRGF0YSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RvY30gZG9jXG4gICAqIEBwYXJhbSB7WU1hcDxhbnk+fSBbc3RvcmVUeXBlXVxuICAgKi9cbiAgY29uc3RydWN0b3IgKGRvYywgc3RvcmVUeXBlID0gZG9jLmdldE1hcCgndXNlcnMnKSkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNYXA8c3RyaW5nLERlbGV0ZVNldD59XG4gICAgICovXG4gICAgY29uc3QgZHNzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMueXVzZXJzID0gc3RvcmVUeXBlO1xuICAgIHRoaXMuZG9jID0gZG9jO1xuICAgIC8qKlxuICAgICAqIE1hcHMgZnJvbSBjbGllbnRpZCB0byB1c2VyRGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEB0eXBlIHtNYXA8bnVtYmVyLHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5jbGllbnRzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuZHNzID0gZHNzO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7WU1hcDxhbnk+fSB1c2VyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJEZXNjcmlwdGlvblxuICAgICAqL1xuICAgIGNvbnN0IGluaXRVc2VyID0gKHVzZXIsIHVzZXJEZXNjcmlwdGlvbikgPT4ge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7WUFycmF5PFVpbnQ4QXJyYXk+fVxuICAgICAgICovXG4gICAgICBjb25zdCBkcyA9IHVzZXIuZ2V0KCdkcycpO1xuICAgICAgY29uc3QgaWRzID0gdXNlci5nZXQoJ2lkcycpO1xuICAgICAgY29uc3QgYWRkQ2xpZW50SWQgPSAvKiogQHBhcmFtIHtudW1iZXJ9IGNsaWVudGlkICovIGNsaWVudGlkID0+IHRoaXMuY2xpZW50cy5zZXQoY2xpZW50aWQsIHVzZXJEZXNjcmlwdGlvbik7XG4gICAgICBkcy5vYnNlcnZlKC8qKiBAcGFyYW0ge1lBcnJheUV2ZW50PGFueT59IGV2ZW50ICovIGV2ZW50ID0+IHtcbiAgICAgICAgZXZlbnQuY2hhbmdlcy5hZGRlZC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgIGl0ZW0uY29udGVudC5nZXRDb250ZW50KCkuZm9yRWFjaChlbmNvZGVkRHMgPT4ge1xuICAgICAgICAgICAgaWYgKGVuY29kZWREcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgICAgdGhpcy5kc3Muc2V0KHVzZXJEZXNjcmlwdGlvbiwgbWVyZ2VEZWxldGVTZXRzKFt0aGlzLmRzcy5nZXQodXNlckRlc2NyaXB0aW9uKSB8fCBjcmVhdGVEZWxldGVTZXQoKSwgcmVhZERlbGV0ZVNldChuZXcgRFNEZWNvZGVyVjEoZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihlbmNvZGVkRHMpKSldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmRzcy5zZXQodXNlckRlc2NyaXB0aW9uLCBtZXJnZURlbGV0ZVNldHMoZHMubWFwKGVuY29kZWREcyA9PiByZWFkRGVsZXRlU2V0KG5ldyBEU0RlY29kZXJWMShkZWNvZGluZy5jcmVhdGVEZWNvZGVyKGVuY29kZWREcykpKSkpKTtcbiAgICAgIGlkcy5vYnNlcnZlKC8qKiBAcGFyYW0ge1lBcnJheUV2ZW50PGFueT59IGV2ZW50ICovIGV2ZW50ID0+XG4gICAgICAgIGV2ZW50LmNoYW5nZXMuYWRkZWQuZm9yRWFjaChpdGVtID0+IGl0ZW0uY29udGVudC5nZXRDb250ZW50KCkuZm9yRWFjaChhZGRDbGllbnRJZCkpXG4gICAgICApO1xuICAgICAgaWRzLmZvckVhY2goYWRkQ2xpZW50SWQpO1xuICAgIH07XG4gICAgLy8gb2JzZXJ2ZSB1c2Vyc1xuICAgIHN0b3JlVHlwZS5vYnNlcnZlKGV2ZW50ID0+IHtcbiAgICAgIGV2ZW50LmtleXNDaGFuZ2VkLmZvckVhY2godXNlckRlc2NyaXB0aW9uID0+XG4gICAgICAgIGluaXRVc2VyKHN0b3JlVHlwZS5nZXQodXNlckRlc2NyaXB0aW9uKSwgdXNlckRlc2NyaXB0aW9uKVxuICAgICAgKTtcbiAgICB9KTtcbiAgICAvLyBhZGQgaW50aWFsIGRhdGFcbiAgICBzdG9yZVR5cGUuZm9yRWFjaChpbml0VXNlcik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtEb2N9IGRvY1xuICAgKiBAcGFyYW0ge251bWJlcn0gY2xpZW50aWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJEZXNjcmlwdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbmZdXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oVHJhbnNhY3Rpb24sIERlbGV0ZVNldCk6Ym9vbGVhbn0gW2NvbmYuZmlsdGVyXVxuICAgKi9cbiAgc2V0VXNlck1hcHBpbmcgKGRvYywgY2xpZW50aWQsIHVzZXJEZXNjcmlwdGlvbiwgeyBmaWx0ZXIgPSAoKSA9PiB0cnVlIH0gPSB7fSkge1xuICAgIGNvbnN0IHVzZXJzID0gdGhpcy55dXNlcnM7XG4gICAgbGV0IHVzZXIgPSB1c2Vycy5nZXQodXNlckRlc2NyaXB0aW9uKTtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHVzZXIgPSBuZXcgWU1hcCgpO1xuICAgICAgdXNlci5zZXQoJ2lkcycsIG5ldyBZQXJyYXkoKSk7XG4gICAgICB1c2VyLnNldCgnZHMnLCBuZXcgWUFycmF5KCkpO1xuICAgICAgdXNlcnMuc2V0KHVzZXJEZXNjcmlwdGlvbiwgdXNlcik7XG4gICAgfVxuICAgIHVzZXIuZ2V0KCdpZHMnKS5wdXNoKFtjbGllbnRpZF0pO1xuICAgIHVzZXJzLm9ic2VydmUoZXZlbnQgPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJPdmVyd3JpdGUgPSB1c2Vycy5nZXQodXNlckRlc2NyaXB0aW9uKTtcbiAgICAgICAgaWYgKHVzZXJPdmVyd3JpdGUgIT09IHVzZXIpIHtcbiAgICAgICAgICAvLyB1c2VyIHdhcyBvdmVyd3JpdHRlbiwgcG9ydCBhbGwgZGF0YSBvdmVyIHRvIHRoZSBuZXh0IHVzZXIgb2JqZWN0XG4gICAgICAgICAgLy8gQHRvZG8gRXhwZXJpbWVudCB3aXRoIFkuU2V0cyBoZXJlXG4gICAgICAgICAgdXNlciA9IHVzZXJPdmVyd3JpdGU7XG4gICAgICAgICAgLy8gQHRvZG8gaXRlcmF0ZSBvdmVyIG9sZCB0eXBlXG4gICAgICAgICAgdGhpcy5jbGllbnRzLmZvckVhY2goKF91c2VyRGVzY3JpcHRpb24sIGNsaWVudGlkKSA9PiB7XG4gICAgICAgICAgICBpZiAodXNlckRlc2NyaXB0aW9uID09PSBfdXNlckRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgIHVzZXIuZ2V0KCdpZHMnKS5wdXNoKFtjbGllbnRpZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgRFNFbmNvZGVyVjEoKTtcbiAgICAgICAgICBjb25zdCBkcyA9IHRoaXMuZHNzLmdldCh1c2VyRGVzY3JpcHRpb24pO1xuICAgICAgICAgIGlmIChkcykge1xuICAgICAgICAgICAgd3JpdGVEZWxldGVTZXQoZW5jb2RlciwgZHMpO1xuICAgICAgICAgICAgdXNlci5nZXQoJ2RzJykucHVzaChbZW5jb2Rlci50b1VpbnQ4QXJyYXkoKV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgMCk7XG4gICAgfSk7XG4gICAgZG9jLm9uKCdhZnRlclRyYW5zYWN0aW9uJywgLyoqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uICovIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCB5ZHMgPSB1c2VyLmdldCgnZHMnKTtcbiAgICAgICAgY29uc3QgZHMgPSB0cmFuc2FjdGlvbi5kZWxldGVTZXQ7XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi5sb2NhbCAmJiBkcy5jbGllbnRzLnNpemUgPiAwICYmIGZpbHRlcih0cmFuc2FjdGlvbiwgZHMpKSB7XG4gICAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBEU0VuY29kZXJWMSgpO1xuICAgICAgICAgIHdyaXRlRGVsZXRlU2V0KGVuY29kZXIsIGRzKTtcbiAgICAgICAgICB5ZHMucHVzaChbZW5jb2Rlci50b1VpbnQ4QXJyYXkoKV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2xpZW50aWRcbiAgICogQHJldHVybiB7YW55fVxuICAgKi9cbiAgZ2V0VXNlckJ5Q2xpZW50SWQgKGNsaWVudGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50cy5nZXQoY2xpZW50aWQpIHx8IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0lEfSBpZFxuICAgKiBAcmV0dXJuIHtzdHJpbmcgfCBudWxsfVxuICAgKi9cbiAgZ2V0VXNlckJ5RGVsZXRlZElkIChpZCkge1xuICAgIGZvciAoY29uc3QgW3VzZXJEZXNjcmlwdGlvbiwgZHNdIG9mIHRoaXMuZHNzLmVudHJpZXMoKSkge1xuICAgICAgaWYgKGlzRGVsZXRlZChkcywgaWQpKSB7XG4gICAgICAgIHJldHVybiB1c2VyRGVzY3JpcHRpb25cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG4vKipcbiAqIEEgcmVsYXRpdmUgcG9zaXRpb24gaXMgYmFzZWQgb24gdGhlIFlqcyBtb2RlbCBhbmQgaXMgbm90IGFmZmVjdGVkIGJ5IGRvY3VtZW50IGNoYW5nZXMuXG4gKiBFLmcuIElmIHlvdSBwbGFjZSBhIHJlbGF0aXZlIHBvc2l0aW9uIGJlZm9yZSBhIGNlcnRhaW4gY2hhcmFjdGVyLCBpdCB3aWxsIGFsd2F5cyBwb2ludCB0byB0aGlzIGNoYXJhY3Rlci5cbiAqIElmIHlvdSBwbGFjZSBhIHJlbGF0aXZlIHBvc2l0aW9uIGF0IHRoZSBlbmQgb2YgYSB0eXBlLCBpdCB3aWxsIGFsd2F5cyBwb2ludCB0byB0aGUgZW5kIG9mIHRoZSB0eXBlLlxuICpcbiAqIEEgbnVtZXJpYyBwb3NpdGlvbiBpcyBvZnRlbiB1bnN1aXRlZCBmb3IgdXNlciBzZWxlY3Rpb25zLCBiZWNhdXNlIGl0IGRvZXMgbm90IGNoYW5nZSB3aGVuIGNvbnRlbnQgaXMgaW5zZXJ0ZWRcbiAqIGJlZm9yZSBvciBhZnRlci5cbiAqXG4gKiBgYGBJbnNlcnQoMCwgJ3gnKSgnYXxiYycpID0gJ3hhfGJjJ2BgYCBXaGVyZSB8IGlzIHRoZSByZWxhdGl2ZSBwb3NpdGlvbi5cbiAqXG4gKiBPbmUgb2YgdGhlIHByb3BlcnRpZXMgbXVzdCBiZSBkZWZpbmVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIC8vIEN1cnJlbnQgY3Vyc29yIHBvc2l0aW9uIGlzIGF0IHBvc2l0aW9uIDEwXG4gKiAgIGNvbnN0IHJlbGF0aXZlUG9zaXRpb24gPSBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uRnJvbUluZGV4KHlUZXh0LCAxMClcbiAqICAgLy8gbW9kaWZ5IHlUZXh0XG4gKiAgIHlUZXh0Lmluc2VydCgwLCAnYWJjJylcbiAqICAgeVRleHQuZGVsZXRlKDMsIDEwKVxuICogICAvLyBDb21wdXRlIHRoZSBjdXJzb3IgcG9zaXRpb25cbiAqICAgY29uc3QgYWJzb2x1dGVQb3NpdGlvbiA9IGNyZWF0ZUFic29sdXRlUG9zaXRpb25Gcm9tUmVsYXRpdmVQb3NpdGlvbih5LCByZWxhdGl2ZVBvc2l0aW9uKVxuICogICBhYnNvbHV0ZVBvc2l0aW9uLnR5cGUgPT09IHlUZXh0IC8vID0+IHRydWVcbiAqICAgY29uc29sZS5sb2coJ2N1cnNvciBsb2NhdGlvbiBpcyAnICsgYWJzb2x1dGVQb3NpdGlvbi5pbmRleCkgLy8gPT4gY3Vyc29yIGxvY2F0aW9uIGlzIDNcbiAqXG4gKi9cbmNsYXNzIFJlbGF0aXZlUG9zaXRpb24ge1xuICAvKipcbiAgICogQHBhcmFtIHtJRHxudWxsfSB0eXBlXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHRuYW1lXG4gICAqIEBwYXJhbSB7SUR8bnVsbH0gaXRlbVxuICAgKiBAcGFyYW0ge251bWJlcn0gYXNzb2NcbiAgICovXG4gIGNvbnN0cnVjdG9yICh0eXBlLCB0bmFtZSwgaXRlbSwgYXNzb2MgPSAwKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0lEfG51bGx9XG4gICAgICovXG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy50bmFtZSA9IHRuYW1lO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtJRCB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5pdGVtID0gaXRlbTtcbiAgICAvKipcbiAgICAgKiBBIHJlbGF0aXZlIHBvc2l0aW9uIGlzIGFzc29jaWF0ZWQgdG8gYSBzcGVjaWZpYyBjaGFyYWN0ZXIuIEJ5IGRlZmF1bHRcbiAgICAgKiBhc3NvYyA+PSAwLCB0aGUgcmVsYXRpdmUgcG9zaXRpb24gaXMgYXNzb2NpYXRlZCB0byB0aGUgY2hhcmFjdGVyXG4gICAgICogYWZ0ZXIgdGhlIG1lYW50IHBvc2l0aW9uLlxuICAgICAqIEkuZS4gcG9zaXRpb24gMSBpbiAnYWInIGlzIGFzc29jaWF0ZWQgdG8gY2hhcmFjdGVyICdiJy5cbiAgICAgKlxuICAgICAqIElmIGFzc29jIDwgMCwgdGhlbiB0aGUgcmVsYXRpdmUgcG9zaXRpb24gaXMgYXNzb2NpYXRlZCB0byB0aGUgY2FoYXJhY3RlclxuICAgICAqIGJlZm9yZSB0aGUgbWVhbnQgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuYXNzb2MgPSBhc3NvYztcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVsYXRpdmVQb3NpdGlvbn0gcnBvc1xuICogQHJldHVybiB7YW55fVxuICovXG5jb25zdCByZWxhdGl2ZVBvc2l0aW9uVG9KU09OID0gcnBvcyA9PiB7XG4gIGNvbnN0IGpzb24gPSB7fTtcbiAgaWYgKHJwb3MudHlwZSkge1xuICAgIGpzb24udHlwZSA9IHJwb3MudHlwZTtcbiAgfVxuICBpZiAocnBvcy50bmFtZSkge1xuICAgIGpzb24udG5hbWUgPSBycG9zLnRuYW1lO1xuICB9XG4gIGlmIChycG9zLml0ZW0pIHtcbiAgICBqc29uLml0ZW0gPSBycG9zLml0ZW07XG4gIH1cbiAgaWYgKHJwb3MuYXNzb2MgIT0gbnVsbCkge1xuICAgIGpzb24uYXNzb2MgPSBycG9zLmFzc29jO1xuICB9XG4gIHJldHVybiBqc29uXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBqc29uXG4gKiBAcmV0dXJuIHtSZWxhdGl2ZVBvc2l0aW9ufVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uRnJvbUpTT04gPSBqc29uID0+IG5ldyBSZWxhdGl2ZVBvc2l0aW9uKGpzb24udHlwZSA9PSBudWxsID8gbnVsbCA6IGNyZWF0ZUlEKGpzb24udHlwZS5jbGllbnQsIGpzb24udHlwZS5jbG9jayksIGpzb24udG5hbWUgfHwgbnVsbCwganNvbi5pdGVtID09IG51bGwgPyBudWxsIDogY3JlYXRlSUQoanNvbi5pdGVtLmNsaWVudCwganNvbi5pdGVtLmNsb2NrKSwganNvbi5hc3NvYyA9PSBudWxsID8gMCA6IGpzb24uYXNzb2MpO1xuXG5jbGFzcyBBYnNvbHV0ZVBvc2l0aW9uIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbYXNzb2NdXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodHlwZSwgaW5kZXgsIGFzc29jID0gMCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn1cbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIHRoaXMuYXNzb2MgPSBhc3NvYztcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IFthc3NvY11cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY3JlYXRlQWJzb2x1dGVQb3NpdGlvbiA9ICh0eXBlLCBpbmRleCwgYXNzb2MgPSAwKSA9PiBuZXcgQWJzb2x1dGVQb3NpdGlvbih0eXBlLCBpbmRleCwgYXNzb2MpO1xuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEBwYXJhbSB7SUR8bnVsbH0gaXRlbVxuICogQHBhcmFtIHtudW1iZXJ9IFthc3NvY11cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY3JlYXRlUmVsYXRpdmVQb3NpdGlvbiA9ICh0eXBlLCBpdGVtLCBhc3NvYykgPT4ge1xuICBsZXQgdHlwZWlkID0gbnVsbDtcbiAgbGV0IHRuYW1lID0gbnVsbDtcbiAgaWYgKHR5cGUuX2l0ZW0gPT09IG51bGwpIHtcbiAgICB0bmFtZSA9IGZpbmRSb290VHlwZUtleSh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICB0eXBlaWQgPSBjcmVhdGVJRCh0eXBlLl9pdGVtLmlkLmNsaWVudCwgdHlwZS5faXRlbS5pZC5jbG9jayk7XG4gIH1cbiAgcmV0dXJuIG5ldyBSZWxhdGl2ZVBvc2l0aW9uKHR5cGVpZCwgdG5hbWUsIGl0ZW0sIGFzc29jKVxufTtcblxuLyoqXG4gKiBDcmVhdGUgYSByZWxhdGl2ZVBvc2l0aW9uIGJhc2VkIG9uIGEgYWJzb2x1dGUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZSBUaGUgYmFzZSB0eXBlIChlLmcuIFlUZXh0IG9yIFlBcnJheSkuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGFic29sdXRlIHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFthc3NvY11cbiAqIEByZXR1cm4ge1JlbGF0aXZlUG9zaXRpb259XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNyZWF0ZVJlbGF0aXZlUG9zaXRpb25Gcm9tVHlwZUluZGV4ID0gKHR5cGUsIGluZGV4LCBhc3NvYyA9IDApID0+IHtcbiAgbGV0IHQgPSB0eXBlLl9zdGFydDtcbiAgaWYgKGFzc29jIDwgMCkge1xuICAgIC8vIGFzc29jaWF0ZWQgdG8gdGhlIGxlZnQgY2hhcmFjdGVyIG9yIHRoZSBiZWdpbm5pbmcgb2YgYSB0eXBlLCBpbmNyZW1lbnQgaW5kZXggaWYgcG9zc2libGUuXG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gY3JlYXRlUmVsYXRpdmVQb3NpdGlvbih0eXBlLCBudWxsLCBhc3NvYylcbiAgICB9XG4gICAgaW5kZXgtLTtcbiAgfVxuICB3aGlsZSAodCAhPT0gbnVsbCkge1xuICAgIGlmICghdC5kZWxldGVkICYmIHQuY291bnRhYmxlKSB7XG4gICAgICBpZiAodC5sZW5ndGggPiBpbmRleCkge1xuICAgICAgICAvLyBjYXNlIDE6IGZvdW5kIHBvc2l0aW9uIHNvbWV3aGVyZSBpbiB0aGUgbGlua2VkIGxpc3RcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlbGF0aXZlUG9zaXRpb24odHlwZSwgY3JlYXRlSUQodC5pZC5jbGllbnQsIHQuaWQuY2xvY2sgKyBpbmRleCksIGFzc29jKVxuICAgICAgfVxuICAgICAgaW5kZXggLT0gdC5sZW5ndGg7XG4gICAgfVxuICAgIGlmICh0LnJpZ2h0ID09PSBudWxsICYmIGFzc29jIDwgMCkge1xuICAgICAgLy8gbGVmdC1hc3NvY2lhdGVkIHBvc2l0aW9uLCByZXR1cm4gbGFzdCBhdmFpbGFibGUgaWRcbiAgICAgIHJldHVybiBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uKHR5cGUsIHQubGFzdElkLCBhc3NvYylcbiAgICB9XG4gICAgdCA9IHQucmlnaHQ7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVJlbGF0aXZlUG9zaXRpb24odHlwZSwgbnVsbCwgYXNzb2MpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7ZW5jb2RpbmcuRW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtSZWxhdGl2ZVBvc2l0aW9ufSBycG9zXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHdyaXRlUmVsYXRpdmVQb3NpdGlvbiA9IChlbmNvZGVyLCBycG9zKSA9PiB7XG4gIGNvbnN0IHsgdHlwZSwgdG5hbWUsIGl0ZW0sIGFzc29jIH0gPSBycG9zO1xuICBpZiAoaXRlbSAhPT0gbnVsbCkge1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmNvZGVyLCAwKTtcbiAgICB3cml0ZUlEKGVuY29kZXIsIGl0ZW0pO1xuICB9IGVsc2UgaWYgKHRuYW1lICE9PSBudWxsKSB7XG4gICAgLy8gY2FzZSAyOiBmb3VuZCBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0IGFuZCB0eXBlIGlzIHN0b3JlZCBpbiB5LnNoYXJlXG4gICAgZW5jb2Rpbmcud3JpdGVVaW50OChlbmNvZGVyLCAxKTtcbiAgICBlbmNvZGluZy53cml0ZVZhclN0cmluZyhlbmNvZGVyLCB0bmFtZSk7XG4gIH0gZWxzZSBpZiAodHlwZSAhPT0gbnVsbCkge1xuICAgIC8vIGNhc2UgMzogZm91bmQgcG9zaXRpb24gYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCBhbmQgdHlwZSBpcyBhdHRhY2hlZCB0byBhbiBpdGVtXG4gICAgZW5jb2Rpbmcud3JpdGVVaW50OChlbmNvZGVyLCAyKTtcbiAgICB3cml0ZUlEKGVuY29kZXIsIHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVycm9yLnVuZXhwZWN0ZWRDYXNlKClcbiAgfVxuICBlbmNvZGluZy53cml0ZVZhckludChlbmNvZGVyLCBhc3NvYyk7XG4gIHJldHVybiBlbmNvZGVyXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UmVsYXRpdmVQb3NpdGlvbn0gcnBvc1xuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgZW5jb2RlUmVsYXRpdmVQb3NpdGlvbiA9IHJwb3MgPT4ge1xuICBjb25zdCBlbmNvZGVyID0gZW5jb2RpbmcuY3JlYXRlRW5jb2RlcigpO1xuICB3cml0ZVJlbGF0aXZlUG9zaXRpb24oZW5jb2RlciwgcnBvcyk7XG4gIHJldHVybiBlbmNvZGluZy50b1VpbnQ4QXJyYXkoZW5jb2Rlcilcbn07XG5cbi8qKlxuICogQHBhcmFtIHtkZWNvZGluZy5EZWNvZGVyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtSZWxhdGl2ZVBvc2l0aW9ufVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkUmVsYXRpdmVQb3NpdGlvbiA9IGRlY29kZXIgPT4ge1xuICBsZXQgdHlwZSA9IG51bGw7XG4gIGxldCB0bmFtZSA9IG51bGw7XG4gIGxldCBpdGVtSUQgPSBudWxsO1xuICBzd2l0Y2ggKGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIpKSB7XG4gICAgY2FzZSAwOlxuICAgICAgLy8gY2FzZSAxOiBmb3VuZCBwb3NpdGlvbiBzb21ld2hlcmUgaW4gdGhlIGxpbmtlZCBsaXN0XG4gICAgICBpdGVtSUQgPSByZWFkSUQoZGVjb2Rlcik7XG4gICAgICBicmVha1xuICAgIGNhc2UgMTpcbiAgICAgIC8vIGNhc2UgMjogZm91bmQgcG9zaXRpb24gYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCBhbmQgdHlwZSBpcyBzdG9yZWQgaW4geS5zaGFyZVxuICAgICAgdG5hbWUgPSBkZWNvZGluZy5yZWFkVmFyU3RyaW5nKGRlY29kZXIpO1xuICAgICAgYnJlYWtcbiAgICBjYXNlIDI6IHtcbiAgICAgIC8vIGNhc2UgMzogZm91bmQgcG9zaXRpb24gYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCBhbmQgdHlwZSBpcyBhdHRhY2hlZCB0byBhbiBpdGVtXG4gICAgICB0eXBlID0gcmVhZElEKGRlY29kZXIpO1xuICAgIH1cbiAgfVxuICBjb25zdCBhc3NvYyA9IGRlY29kaW5nLmhhc0NvbnRlbnQoZGVjb2RlcikgPyBkZWNvZGluZy5yZWFkVmFySW50KGRlY29kZXIpIDogMDtcbiAgcmV0dXJuIG5ldyBSZWxhdGl2ZVBvc2l0aW9uKHR5cGUsIHRuYW1lLCBpdGVtSUQsIGFzc29jKVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnQ4QXJyYXlcbiAqIEByZXR1cm4ge1JlbGF0aXZlUG9zaXRpb259XG4gKi9cbmNvbnN0IGRlY29kZVJlbGF0aXZlUG9zaXRpb24gPSB1aW50OEFycmF5ID0+IHJlYWRSZWxhdGl2ZVBvc2l0aW9uKGRlY29kaW5nLmNyZWF0ZURlY29kZXIodWludDhBcnJheSkpO1xuXG4vKipcbiAqIEBwYXJhbSB7UmVsYXRpdmVQb3NpdGlvbn0gcnBvc1xuICogQHBhcmFtIHtEb2N9IGRvY1xuICogQHJldHVybiB7QWJzb2x1dGVQb3NpdGlvbnxudWxsfVxuICpcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjcmVhdGVBYnNvbHV0ZVBvc2l0aW9uRnJvbVJlbGF0aXZlUG9zaXRpb24gPSAocnBvcywgZG9jKSA9PiB7XG4gIGNvbnN0IHN0b3JlID0gZG9jLnN0b3JlO1xuICBjb25zdCByaWdodElEID0gcnBvcy5pdGVtO1xuICBjb25zdCB0eXBlSUQgPSBycG9zLnR5cGU7XG4gIGNvbnN0IHRuYW1lID0gcnBvcy50bmFtZTtcbiAgY29uc3QgYXNzb2MgPSBycG9zLmFzc29jO1xuICBsZXQgdHlwZSA9IG51bGw7XG4gIGxldCBpbmRleCA9IDA7XG4gIGlmIChyaWdodElEICE9PSBudWxsKSB7XG4gICAgaWYgKGdldFN0YXRlKHN0b3JlLCByaWdodElELmNsaWVudCkgPD0gcmlnaHRJRC5jbG9jaykge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgY29uc3QgcmVzID0gZm9sbG93UmVkb25lKHN0b3JlLCByaWdodElEKTtcbiAgICBjb25zdCByaWdodCA9IHJlcy5pdGVtO1xuICAgIGlmICghKHJpZ2h0IGluc3RhbmNlb2YgSXRlbSkpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIHR5cGUgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAocmlnaHQucGFyZW50KTtcbiAgICBpZiAodHlwZS5faXRlbSA9PT0gbnVsbCB8fCAhdHlwZS5faXRlbS5kZWxldGVkKSB7XG4gICAgICBpbmRleCA9IChyaWdodC5kZWxldGVkIHx8ICFyaWdodC5jb3VudGFibGUpID8gMCA6IChyZXMuZGlmZiArIChhc3NvYyA+PSAwID8gMCA6IDEpKTsgLy8gYWRqdXN0IHBvc2l0aW9uIGJhc2VkIG9uIGxlZnQgYXNzb2NpYXRpb24gaWYgbmVjZXNzYXJ5XG4gICAgICBsZXQgbiA9IHJpZ2h0LmxlZnQ7XG4gICAgICB3aGlsZSAobiAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoIW4uZGVsZXRlZCAmJiBuLmNvdW50YWJsZSkge1xuICAgICAgICAgIGluZGV4ICs9IG4ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuLmxlZnQ7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0bmFtZSAhPT0gbnVsbCkge1xuICAgICAgdHlwZSA9IGRvYy5nZXQodG5hbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZUlEICE9PSBudWxsKSB7XG4gICAgICBpZiAoZ2V0U3RhdGUoc3RvcmUsIHR5cGVJRC5jbGllbnQpIDw9IHR5cGVJRC5jbG9jaykge1xuICAgICAgICAvLyB0eXBlIGRvZXMgbm90IGV4aXN0IHlldFxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgICAgY29uc3QgeyBpdGVtIH0gPSBmb2xsb3dSZWRvbmUoc3RvcmUsIHR5cGVJRCk7XG4gICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIEl0ZW0gJiYgaXRlbS5jb250ZW50IGluc3RhbmNlb2YgQ29udGVudFR5cGUpIHtcbiAgICAgICAgdHlwZSA9IGl0ZW0uY29udGVudC50eXBlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc3RydWN0IGlzIGdhcmJhZ2UgY29sbGVjdGVkXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVycm9yLnVuZXhwZWN0ZWRDYXNlKClcbiAgICB9XG4gICAgaWYgKGFzc29jID49IDApIHtcbiAgICAgIGluZGV4ID0gdHlwZS5fbGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCA9IDA7XG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVBYnNvbHV0ZVBvc2l0aW9uKHR5cGUsIGluZGV4LCBycG9zLmFzc29jKVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1JlbGF0aXZlUG9zaXRpb258bnVsbH0gYVxuICogQHBhcmFtIHtSZWxhdGl2ZVBvc2l0aW9ufG51bGx9IGJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGNvbXBhcmVSZWxhdGl2ZVBvc2l0aW9ucyA9IChhLCBiKSA9PiBhID09PSBiIHx8IChcbiAgYSAhPT0gbnVsbCAmJiBiICE9PSBudWxsICYmIGEudG5hbWUgPT09IGIudG5hbWUgJiYgY29tcGFyZUlEcyhhLml0ZW0sIGIuaXRlbSkgJiYgY29tcGFyZUlEcyhhLnR5cGUsIGIudHlwZSkgJiYgYS5hc3NvYyA9PT0gYi5hc3NvY1xuKTtcblxuY2xhc3MgU25hcHNob3Qge1xuICAvKipcbiAgICogQHBhcmFtIHtEZWxldGVTZXR9IGRzXG4gICAqIEBwYXJhbSB7TWFwPG51bWJlcixudW1iZXI+fSBzdiBzdGF0ZSBtYXBcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkcywgc3YpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7RGVsZXRlU2V0fVxuICAgICAqL1xuICAgIHRoaXMuZHMgPSBkcztcbiAgICAvKipcbiAgICAgKiBTdGF0ZSBNYXBcbiAgICAgKiBAdHlwZSB7TWFwPG51bWJlcixudW1iZXI+fVxuICAgICAqL1xuICAgIHRoaXMuc3YgPSBzdjtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXAxXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwMlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgZXF1YWxTbmFwc2hvdHMgPSAoc25hcDEsIHNuYXAyKSA9PiB7XG4gIGNvbnN0IGRzMSA9IHNuYXAxLmRzLmNsaWVudHM7XG4gIGNvbnN0IGRzMiA9IHNuYXAyLmRzLmNsaWVudHM7XG4gIGNvbnN0IHN2MSA9IHNuYXAxLnN2O1xuICBjb25zdCBzdjIgPSBzbmFwMi5zdjtcbiAgaWYgKHN2MS5zaXplICE9PSBzdjIuc2l6ZSB8fCBkczEuc2l6ZSAhPT0gZHMyLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBzdjEuZW50cmllcygpKSB7XG4gICAgaWYgKHN2Mi5nZXQoa2V5KSAhPT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IFtjbGllbnQsIGRzaXRlbXMxXSBvZiBkczEuZW50cmllcygpKSB7XG4gICAgY29uc3QgZHNpdGVtczIgPSBkczIuZ2V0KGNsaWVudCkgfHwgW107XG4gICAgaWYgKGRzaXRlbXMxLmxlbmd0aCAhPT0gZHNpdGVtczIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkc2l0ZW1zMS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZHNpdGVtMSA9IGRzaXRlbXMxW2ldO1xuICAgICAgY29uc3QgZHNpdGVtMiA9IGRzaXRlbXMyW2ldO1xuICAgICAgaWYgKGRzaXRlbTEuY2xvY2sgIT09IGRzaXRlbTIuY2xvY2sgfHwgZHNpdGVtMS5sZW4gIT09IGRzaXRlbTIubGVuKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICogQHBhcmFtIHtEU0VuY29kZXJWMSB8IERTRW5jb2RlclYyfSBbZW5jb2Rlcl1cbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmNvbnN0IGVuY29kZVNuYXBzaG90VjIgPSAoc25hcHNob3QsIGVuY29kZXIgPSBuZXcgRFNFbmNvZGVyVjIoKSkgPT4ge1xuICB3cml0ZURlbGV0ZVNldChlbmNvZGVyLCBzbmFwc2hvdC5kcyk7XG4gIHdyaXRlU3RhdGVWZWN0b3IoZW5jb2Rlciwgc25hcHNob3Quc3YpO1xuICByZXR1cm4gZW5jb2Rlci50b1VpbnQ4QXJyYXkoKVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgZW5jb2RlU25hcHNob3QgPSBzbmFwc2hvdCA9PiBlbmNvZGVTbmFwc2hvdFYyKHNuYXBzaG90LCBuZXcgRFNFbmNvZGVyVjEoKSk7XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAqIEBwYXJhbSB7RFNEZWNvZGVyVjEgfCBEU0RlY29kZXJWMn0gW2RlY29kZXJdXG4gKiBAcmV0dXJuIHtTbmFwc2hvdH1cbiAqL1xuY29uc3QgZGVjb2RlU25hcHNob3RWMiA9IChidWYsIGRlY29kZXIgPSBuZXcgRFNEZWNvZGVyVjIoZGVjb2RpbmcuY3JlYXRlRGVjb2RlcihidWYpKSkgPT4ge1xuICByZXR1cm4gbmV3IFNuYXBzaG90KHJlYWREZWxldGVTZXQoZGVjb2RlciksIHJlYWRTdGF0ZVZlY3RvcihkZWNvZGVyKSlcbn07XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAqIEByZXR1cm4ge1NuYXBzaG90fVxuICovXG5jb25zdCBkZWNvZGVTbmFwc2hvdCA9IGJ1ZiA9PiBkZWNvZGVTbmFwc2hvdFYyKGJ1ZiwgbmV3IERTRGVjb2RlclYxKGRlY29kaW5nLmNyZWF0ZURlY29kZXIoYnVmKSkpO1xuXG4vKipcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICogQHBhcmFtIHtNYXA8bnVtYmVyLG51bWJlcj59IHNtXG4gKiBAcmV0dXJuIHtTbmFwc2hvdH1cbiAqL1xuY29uc3QgY3JlYXRlU25hcHNob3QgPSAoZHMsIHNtKSA9PiBuZXcgU25hcHNob3QoZHMsIHNtKTtcblxuY29uc3QgZW1wdHlTbmFwc2hvdCA9IGNyZWF0ZVNuYXBzaG90KGNyZWF0ZURlbGV0ZVNldCgpLCBuZXcgTWFwKCkpO1xuXG4vKipcbiAqIEBwYXJhbSB7RG9jfSBkb2NcbiAqIEByZXR1cm4ge1NuYXBzaG90fVxuICovXG5jb25zdCBzbmFwc2hvdCA9IGRvYyA9PiBjcmVhdGVTbmFwc2hvdChjcmVhdGVEZWxldGVTZXRGcm9tU3RydWN0U3RvcmUoZG9jLnN0b3JlKSwgZ2V0U3RhdGVWZWN0b3IoZG9jLnN0b3JlKSk7XG5cbi8qKlxuICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gKiBAcGFyYW0ge1NuYXBzaG90fHVuZGVmaW5lZH0gc25hcHNob3RcbiAqXG4gKiBAcHJvdGVjdGVkXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgaXNWaXNpYmxlID0gKGl0ZW0sIHNuYXBzaG90KSA9PiBzbmFwc2hvdCA9PT0gdW5kZWZpbmVkXG4gID8gIWl0ZW0uZGVsZXRlZFxuICA6IHNuYXBzaG90LnN2LmhhcyhpdGVtLmlkLmNsaWVudCkgJiYgKHNuYXBzaG90LnN2LmdldChpdGVtLmlkLmNsaWVudCkgfHwgMCkgPiBpdGVtLmlkLmNsb2NrICYmICFpc0RlbGV0ZWQoc25hcHNob3QuZHMsIGl0ZW0uaWQpO1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge1NuYXBzaG90fSBzbmFwc2hvdFxuICovXG5jb25zdCBzcGxpdFNuYXBzaG90QWZmZWN0ZWRTdHJ1Y3RzID0gKHRyYW5zYWN0aW9uLCBzbmFwc2hvdCkgPT4ge1xuICBjb25zdCBtZXRhID0gbWFwLnNldElmVW5kZWZpbmVkKHRyYW5zYWN0aW9uLm1ldGEsIHNwbGl0U25hcHNob3RBZmZlY3RlZFN0cnVjdHMsIHNldC5jcmVhdGUpO1xuICBjb25zdCBzdG9yZSA9IHRyYW5zYWN0aW9uLmRvYy5zdG9yZTtcbiAgLy8gY2hlY2sgaWYgd2UgYWxyZWFkeSBzcGxpdCBmb3IgdGhpcyBzbmFwc2hvdFxuICBpZiAoIW1ldGEuaGFzKHNuYXBzaG90KSkge1xuICAgIHNuYXBzaG90LnN2LmZvckVhY2goKGNsb2NrLCBjbGllbnQpID0+IHtcbiAgICAgIGlmIChjbG9jayA8IGdldFN0YXRlKHN0b3JlLCBjbGllbnQpKSB7XG4gICAgICAgIGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBjcmVhdGVJRChjbGllbnQsIGNsb2NrKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzKHRyYW5zYWN0aW9uLCBzbmFwc2hvdC5kcywgaXRlbSA9PiB7fSk7XG4gICAgbWV0YS5hZGQoc25hcHNob3QpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RG9jfSBvcmlnaW5Eb2NcbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXBzaG90XG4gKiBAcGFyYW0ge0RvY30gW25ld0RvY10gT3B0aW9uYWxseSwgeW91IG1heSBkZWZpbmUgdGhlIFlqcyBkb2N1bWVudCB0aGF0IHJlY2VpdmVzIHRoZSBkYXRhIGZyb20gb3JpZ2luRG9jXG4gKiBAcmV0dXJuIHtEb2N9XG4gKi9cbmNvbnN0IGNyZWF0ZURvY0Zyb21TbmFwc2hvdCA9IChvcmlnaW5Eb2MsIHNuYXBzaG90LCBuZXdEb2MgPSBuZXcgRG9jKCkpID0+IHtcbiAgaWYgKG9yaWdpbkRvYy5nYykge1xuICAgIC8vIHdlIHNob3VsZCBub3QgdHJ5IHRvIHJlc3RvcmUgYSBHQy1lZCBkb2N1bWVudCwgYmVjYXVzZSBzb21lIG9mIHRoZSByZXN0b3JlZCBpdGVtcyBtaWdodCBoYXZlIHRoZWlyIGNvbnRlbnQgZGVsZXRlZFxuICAgIHRocm93IG5ldyBFcnJvcignb3JpZ2luRG9jIG11c3Qgbm90IGJlIGdhcmJhZ2UgY29sbGVjdGVkJylcbiAgfVxuICBjb25zdCB7IHN2LCBkcyB9ID0gc25hcHNob3Q7XG5cbiAgY29uc3QgZW5jb2RlciA9IG5ldyBVcGRhdGVFbmNvZGVyVjIoKTtcbiAgb3JpZ2luRG9jLnRyYW5zYWN0KHRyYW5zYWN0aW9uID0+IHtcbiAgICBsZXQgc2l6ZSA9IDA7XG4gICAgc3YuZm9yRWFjaChjbG9jayA9PiB7XG4gICAgICBpZiAoY2xvY2sgPiAwKSB7XG4gICAgICAgIHNpemUrKztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2Rlciwgc2l6ZSk7XG4gICAgLy8gc3BsaXR0aW5nIHRoZSBzdHJ1Y3RzIGJlZm9yZSB3cml0aW5nIHRoZW0gdG8gdGhlIGVuY29kZXJcbiAgICBmb3IgKGNvbnN0IFtjbGllbnQsIGNsb2NrXSBvZiBzdikge1xuICAgICAgaWYgKGNsb2NrID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBpZiAoY2xvY2sgPCBnZXRTdGF0ZShvcmlnaW5Eb2Muc3RvcmUsIGNsaWVudCkpIHtcbiAgICAgICAgZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0cnVjdHMgPSBvcmlnaW5Eb2Muc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KSB8fCBbXTtcbiAgICAgIGNvbnN0IGxhc3RTdHJ1Y3RJbmRleCA9IGZpbmRJbmRleFNTKHN0cnVjdHMsIGNsb2NrIC0gMSk7XG4gICAgICAvLyB3cml0ZSAjIGVuY29kZWQgc3RydWN0c1xuICAgICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGxhc3RTdHJ1Y3RJbmRleCArIDEpO1xuICAgICAgZW5jb2Rlci53cml0ZUNsaWVudChjbGllbnQpO1xuICAgICAgLy8gZmlyc3QgY2xvY2sgd3JpdHRlbiBpcyAwXG4gICAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgMCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBsYXN0U3RydWN0SW5kZXg7IGkrKykge1xuICAgICAgICBzdHJ1Y3RzW2ldLndyaXRlKGVuY29kZXIsIDApO1xuICAgICAgfVxuICAgIH1cbiAgICB3cml0ZURlbGV0ZVNldChlbmNvZGVyLCBkcyk7XG4gIH0pO1xuXG4gIGFwcGx5VXBkYXRlVjIobmV3RG9jLCBlbmNvZGVyLnRvVWludDhBcnJheSgpLCAnc25hcHNob3QnKTtcbiAgcmV0dXJuIG5ld0RvY1xufTtcblxuY2xhc3MgU3RydWN0U3RvcmUge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge01hcDxudW1iZXIsQXJyYXk8R0N8SXRlbT4+fVxuICAgICAqL1xuICAgIHRoaXMuY2xpZW50cyA9IG5ldyBNYXAoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVsbCB8IHsgbWlzc2luZzogTWFwPG51bWJlciwgbnVtYmVyPiwgdXBkYXRlOiBVaW50OEFycmF5IH19XG4gICAgICovXG4gICAgdGhpcy5wZW5kaW5nU3RydWN0cyA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQHR5cGUge251bGwgfCBVaW50OEFycmF5fVxuICAgICAqL1xuICAgIHRoaXMucGVuZGluZ0RzID0gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgc3RhdGVzIGFzIGEgTWFwPGNsaWVudCxjbG9jaz4uXG4gKiBOb3RlIHRoYXQgY2xvY2sgcmVmZXJzIHRvIHRoZSBuZXh0IGV4cGVjdGVkIGNsb2NrIGlkLlxuICpcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcmV0dXJuIHtNYXA8bnVtYmVyLG51bWJlcj59XG4gKlxuICogQHB1YmxpY1xuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGdldFN0YXRlVmVjdG9yID0gc3RvcmUgPT4ge1xuICBjb25zdCBzbSA9IG5ldyBNYXAoKTtcbiAgc3RvcmUuY2xpZW50cy5mb3JFYWNoKChzdHJ1Y3RzLCBjbGllbnQpID0+IHtcbiAgICBjb25zdCBzdHJ1Y3QgPSBzdHJ1Y3RzW3N0cnVjdHMubGVuZ3RoIC0gMV07XG4gICAgc20uc2V0KGNsaWVudCwgc3RydWN0LmlkLmNsb2NrICsgc3RydWN0Lmxlbmd0aCk7XG4gIH0pO1xuICByZXR1cm4gc21cbn07XG5cbi8qKlxuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqXG4gKiBAcHVibGljXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZ2V0U3RhdGUgPSAoc3RvcmUsIGNsaWVudCkgPT4ge1xuICBjb25zdCBzdHJ1Y3RzID0gc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KTtcbiAgaWYgKHN0cnVjdHMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgY29uc3QgbGFzdFN0cnVjdCA9IHN0cnVjdHNbc3RydWN0cy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGxhc3RTdHJ1Y3QuaWQuY2xvY2sgKyBsYXN0U3RydWN0Lmxlbmd0aFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtHQ3xJdGVtfSBzdHJ1Y3RcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGFkZFN0cnVjdCA9IChzdG9yZSwgc3RydWN0KSA9PiB7XG4gIGxldCBzdHJ1Y3RzID0gc3RvcmUuY2xpZW50cy5nZXQoc3RydWN0LmlkLmNsaWVudCk7XG4gIGlmIChzdHJ1Y3RzID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHJ1Y3RzID0gW107XG4gICAgc3RvcmUuY2xpZW50cy5zZXQoc3RydWN0LmlkLmNsaWVudCwgc3RydWN0cyk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbGFzdFN0cnVjdCA9IHN0cnVjdHNbc3RydWN0cy5sZW5ndGggLSAxXTtcbiAgICBpZiAobGFzdFN0cnVjdC5pZC5jbG9jayArIGxhc3RTdHJ1Y3QubGVuZ3RoICE9PSBzdHJ1Y3QuaWQuY2xvY2spIHtcbiAgICAgIHRocm93IGVycm9yLnVuZXhwZWN0ZWRDYXNlKClcbiAgICB9XG4gIH1cbiAgc3RydWN0cy5wdXNoKHN0cnVjdCk7XG59O1xuXG4vKipcbiAqIFBlcmZvcm0gYSBiaW5hcnkgc2VhcmNoIG9uIGEgc29ydGVkIGFycmF5XG4gKiBAcGFyYW0ge0FycmF5PEl0ZW18R0M+fSBzdHJ1Y3RzXG4gKiBAcGFyYW0ge251bWJlcn0gY2xvY2tcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGZpbmRJbmRleFNTID0gKHN0cnVjdHMsIGNsb2NrKSA9PiB7XG4gIGxldCBsZWZ0ID0gMDtcbiAgbGV0IHJpZ2h0ID0gc3RydWN0cy5sZW5ndGggLSAxO1xuICBsZXQgbWlkID0gc3RydWN0c1tyaWdodF07XG4gIGxldCBtaWRjbG9jayA9IG1pZC5pZC5jbG9jaztcbiAgaWYgKG1pZGNsb2NrID09PSBjbG9jaykge1xuICAgIHJldHVybiByaWdodFxuICB9XG4gIC8vIEB0b2RvIGRvZXMgaXQgZXZlbiBtYWtlIHNlbnNlIHRvIHBpdm90IHRoZSBzZWFyY2g/XG4gIC8vIElmIGEgZ29vZCBzcGxpdCBtaXNzZXMsIGl0IG1pZ2h0IGFjdHVhbGx5IGluY3JlYXNlIHRoZSB0aW1lIHRvIGZpbmQgdGhlIGNvcnJlY3QgaXRlbS5cbiAgLy8gQ3VycmVudGx5LCB0aGUgb25seSBhZHZhbnRhZ2UgaXMgdGhhdCBzZWFyY2ggd2l0aCBwaXZvdGluZyBtaWdodCBmaW5kIHRoZSBpdGVtIG9uIHRoZSBmaXJzdCB0cnkuXG4gIGxldCBtaWRpbmRleCA9IG1hdGguZmxvb3IoKGNsb2NrIC8gKG1pZGNsb2NrICsgbWlkLmxlbmd0aCAtIDEpKSAqIHJpZ2h0KTsgLy8gcGl2b3RpbmcgdGhlIHNlYXJjaFxuICB3aGlsZSAobGVmdCA8PSByaWdodCkge1xuICAgIG1pZCA9IHN0cnVjdHNbbWlkaW5kZXhdO1xuICAgIG1pZGNsb2NrID0gbWlkLmlkLmNsb2NrO1xuICAgIGlmIChtaWRjbG9jayA8PSBjbG9jaykge1xuICAgICAgaWYgKGNsb2NrIDwgbWlkY2xvY2sgKyBtaWQubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBtaWRpbmRleFxuICAgICAgfVxuICAgICAgbGVmdCA9IG1pZGluZGV4ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmlnaHQgPSBtaWRpbmRleCAtIDE7XG4gICAgfVxuICAgIG1pZGluZGV4ID0gbWF0aC5mbG9vcigobGVmdCArIHJpZ2h0KSAvIDIpO1xuICB9XG4gIC8vIEFsd2F5cyBjaGVjayBzdGF0ZSBiZWZvcmUgbG9va2luZyBmb3IgYSBzdHJ1Y3QgaW4gU3RydWN0U3RvcmVcbiAgLy8gVGhlcmVmb3JlIHRoZSBjYXNlIG9mIG5vdCBmaW5kaW5nIGEgc3RydWN0IGlzIHVuZXhwZWN0ZWRcbiAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxufTtcblxuLyoqXG4gKiBFeHBlY3RzIHRoYXQgaWQgaXMgYWN0dWFsbHkgaW4gc3RvcmUuIFRoaXMgZnVuY3Rpb24gdGhyb3dzIG9yIGlzIGFuIGluZmluaXRlIGxvb3Agb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge0lEfSBpZFxuICogQHJldHVybiB7R0N8SXRlbX1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGZpbmQgPSAoc3RvcmUsIGlkKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8R0N8SXRlbT59XG4gICAqL1xuICAvLyBAdHMtaWdub3JlXG4gIGNvbnN0IHN0cnVjdHMgPSBzdG9yZS5jbGllbnRzLmdldChpZC5jbGllbnQpO1xuICByZXR1cm4gc3RydWN0c1tmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBpZC5jbG9jayldXG59O1xuXG4vKipcbiAqIEV4cGVjdHMgdGhhdCBpZCBpcyBhY3R1YWxseSBpbiBzdG9yZS4gVGhpcyBmdW5jdGlvbiB0aHJvd3Mgb3IgaXMgYW4gaW5maW5pdGUgbG9vcCBvdGhlcndpc2UuXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGdldEl0ZW0gPSAvKiogQHR5cGUge2Z1bmN0aW9uKFN0cnVjdFN0b3JlLElEKTpJdGVtfSAqLyAoZmluZCk7XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXk8SXRlbXxHQz59IHN0cnVjdHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1xuICovXG5jb25zdCBmaW5kSW5kZXhDbGVhblN0YXJ0ID0gKHRyYW5zYWN0aW9uLCBzdHJ1Y3RzLCBjbG9jaykgPT4ge1xuICBjb25zdCBpbmRleCA9IGZpbmRJbmRleFNTKHN0cnVjdHMsIGNsb2NrKTtcbiAgY29uc3Qgc3RydWN0ID0gc3RydWN0c1tpbmRleF07XG4gIGlmIChzdHJ1Y3QuaWQuY2xvY2sgPCBjbG9jayAmJiBzdHJ1Y3QgaW5zdGFuY2VvZiBJdGVtKSB7XG4gICAgc3RydWN0cy5zcGxpY2UoaW5kZXggKyAxLCAwLCBzcGxpdEl0ZW0odHJhbnNhY3Rpb24sIHN0cnVjdCwgY2xvY2sgLSBzdHJ1Y3QuaWQuY2xvY2spKTtcbiAgICByZXR1cm4gaW5kZXggKyAxXG4gIH1cbiAgcmV0dXJuIGluZGV4XG59O1xuXG4vKipcbiAqIEV4cGVjdHMgdGhhdCBpZCBpcyBhY3R1YWxseSBpbiBzdG9yZS4gVGhpcyBmdW5jdGlvbiB0aHJvd3Mgb3IgaXMgYW4gaW5maW5pdGUgbG9vcCBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7SUR9IGlkXG4gKiBAcmV0dXJuIHtJdGVtfVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZ2V0SXRlbUNsZWFuU3RhcnQgPSAodHJhbnNhY3Rpb24sIGlkKSA9PiB7XG4gIGNvbnN0IHN0cnVjdHMgPSAvKiogQHR5cGUge0FycmF5PEl0ZW0+fSAqLyAodHJhbnNhY3Rpb24uZG9jLnN0b3JlLmNsaWVudHMuZ2V0KGlkLmNsaWVudCkpO1xuICByZXR1cm4gc3RydWN0c1tmaW5kSW5kZXhDbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBzdHJ1Y3RzLCBpZC5jbG9jayldXG59O1xuXG4vKipcbiAqIEV4cGVjdHMgdGhhdCBpZCBpcyBhY3R1YWxseSBpbiBzdG9yZS4gVGhpcyBmdW5jdGlvbiB0aHJvd3Mgb3IgaXMgYW4gaW5maW5pdGUgbG9vcCBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge0lEfSBpZFxuICogQHJldHVybiB7SXRlbX1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGdldEl0ZW1DbGVhbkVuZCA9ICh0cmFuc2FjdGlvbiwgc3RvcmUsIGlkKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8SXRlbT59XG4gICAqL1xuICAvLyBAdHMtaWdub3JlXG4gIGNvbnN0IHN0cnVjdHMgPSBzdG9yZS5jbGllbnRzLmdldChpZC5jbGllbnQpO1xuICBjb25zdCBpbmRleCA9IGZpbmRJbmRleFNTKHN0cnVjdHMsIGlkLmNsb2NrKTtcbiAgY29uc3Qgc3RydWN0ID0gc3RydWN0c1tpbmRleF07XG4gIGlmIChpZC5jbG9jayAhPT0gc3RydWN0LmlkLmNsb2NrICsgc3RydWN0Lmxlbmd0aCAtIDEgJiYgc3RydWN0LmNvbnN0cnVjdG9yICE9PSBHQykge1xuICAgIHN0cnVjdHMuc3BsaWNlKGluZGV4ICsgMSwgMCwgc3BsaXRJdGVtKHRyYW5zYWN0aW9uLCBzdHJ1Y3QsIGlkLmNsb2NrIC0gc3RydWN0LmlkLmNsb2NrICsgMSkpO1xuICB9XG4gIHJldHVybiBzdHJ1Y3Rcbn07XG5cbi8qKlxuICogUmVwbGFjZSBgaXRlbWAgd2l0aCBgbmV3aXRlbWAgaW4gc3RvcmVcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKiBAcGFyYW0ge0dDfEl0ZW19IHN0cnVjdFxuICogQHBhcmFtIHtHQ3xJdGVtfSBuZXdTdHJ1Y3RcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlcGxhY2VTdHJ1Y3QgPSAoc3RvcmUsIHN0cnVjdCwgbmV3U3RydWN0KSA9PiB7XG4gIGNvbnN0IHN0cnVjdHMgPSAvKiogQHR5cGUge0FycmF5PEdDfEl0ZW0+fSAqLyAoc3RvcmUuY2xpZW50cy5nZXQoc3RydWN0LmlkLmNsaWVudCkpO1xuICBzdHJ1Y3RzW2ZpbmRJbmRleFNTKHN0cnVjdHMsIHN0cnVjdC5pZC5jbG9jayldID0gbmV3U3RydWN0O1xufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYSByYW5nZSBvZiBzdHJ1Y3RzXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXk8SXRlbXxHQz59IHN0cnVjdHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBjbG9ja1N0YXJ0IEluY2x1c2l2ZSBzdGFydFxuICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICogQHBhcmFtIHtmdW5jdGlvbihHQ3xJdGVtKTp2b2lkfSBmXG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGl0ZXJhdGVTdHJ1Y3RzID0gKHRyYW5zYWN0aW9uLCBzdHJ1Y3RzLCBjbG9ja1N0YXJ0LCBsZW4sIGYpID0+IHtcbiAgaWYgKGxlbiA9PT0gMCkge1xuICAgIHJldHVyblxuICB9XG4gIGNvbnN0IGNsb2NrRW5kID0gY2xvY2tTdGFydCArIGxlbjtcbiAgbGV0IGluZGV4ID0gZmluZEluZGV4Q2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgc3RydWN0cywgY2xvY2tTdGFydCk7XG4gIGxldCBzdHJ1Y3Q7XG4gIGRvIHtcbiAgICBzdHJ1Y3QgPSBzdHJ1Y3RzW2luZGV4KytdO1xuICAgIGlmIChjbG9ja0VuZCA8IHN0cnVjdC5pZC5jbG9jayArIHN0cnVjdC5sZW5ndGgpIHtcbiAgICAgIGZpbmRJbmRleENsZWFuU3RhcnQodHJhbnNhY3Rpb24sIHN0cnVjdHMsIGNsb2NrRW5kKTtcbiAgICB9XG4gICAgZihzdHJ1Y3QpO1xuICB9IHdoaWxlIChpbmRleCA8IHN0cnVjdHMubGVuZ3RoICYmIHN0cnVjdHNbaW5kZXhdLmlkLmNsb2NrIDwgY2xvY2tFbmQpXG59O1xuXG4vKipcbiAqIEEgdHJhbnNhY3Rpb24gaXMgY3JlYXRlZCBmb3IgZXZlcnkgY2hhbmdlIG9uIHRoZSBZanMgbW9kZWwuIEl0IGlzIHBvc3NpYmxlXG4gKiB0byBidW5kbGUgY2hhbmdlcyBvbiB0aGUgWWpzIG1vZGVsIGluIGEgc2luZ2xlIHRyYW5zYWN0aW9uIHRvXG4gKiBtaW5pbWl6ZSB0aGUgbnVtYmVyIG9uIG1lc3NhZ2VzIHNlbnQgYW5kIHRoZSBudW1iZXIgb2Ygb2JzZXJ2ZXIgY2FsbHMuXG4gKiBJZiBwb3NzaWJsZSB0aGUgdXNlciBvZiB0aGlzIGxpYnJhcnkgc2hvdWxkIGJ1bmRsZSBhcyBtYW55IGNoYW5nZXMgYXNcbiAqIHBvc3NpYmxlLiBIZXJlIGlzIGFuIGV4YW1wbGUgdG8gaWxsdXN0cmF0ZSB0aGUgYWR2YW50YWdlcyBvZiBidW5kbGluZzpcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgbWFwID0geS5kZWZpbmUoJ21hcCcsIFlNYXApXG4gKiAvLyBMb2cgY29udGVudCB3aGVuIGNoYW5nZSBpcyB0cmlnZ2VyZWRcbiAqIG1hcC5vYnNlcnZlKCgpID0+IHtcbiAqICAgY29uc29sZS5sb2coJ2NoYW5nZSB0cmlnZ2VyZWQnKVxuICogfSlcbiAqIC8vIEVhY2ggY2hhbmdlIG9uIHRoZSBtYXAgdHlwZSB0cmlnZ2VycyBhIGxvZyBtZXNzYWdlOlxuICogbWFwLnNldCgnYScsIDApIC8vID0+IFwiY2hhbmdlIHRyaWdnZXJlZFwiXG4gKiBtYXAuc2V0KCdiJywgMCkgLy8gPT4gXCJjaGFuZ2UgdHJpZ2dlcmVkXCJcbiAqIC8vIFdoZW4gcHV0IGluIGEgdHJhbnNhY3Rpb24sIGl0IHdpbGwgdHJpZ2dlciB0aGUgbG9nIGFmdGVyIHRoZSB0cmFuc2FjdGlvbjpcbiAqIHkudHJhbnNhY3QoKCkgPT4ge1xuICogICBtYXAuc2V0KCdhJywgMSlcbiAqICAgbWFwLnNldCgnYicsIDEpXG4gKiB9KSAvLyA9PiBcImNoYW5nZSB0cmlnZ2VyZWRcIlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgVHJhbnNhY3Rpb24ge1xuICAvKipcbiAgICogQHBhcmFtIHtEb2N9IGRvY1xuICAgKiBAcGFyYW0ge2FueX0gb3JpZ2luXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9jYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkb2MsIG9yaWdpbiwgbG9jYWwpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgWWpzIGluc3RhbmNlLlxuICAgICAqIEB0eXBlIHtEb2N9XG4gICAgICovXG4gICAgdGhpcy5kb2MgPSBkb2M7XG4gICAgLyoqXG4gICAgICogRGVzY3JpYmVzIHRoZSBzZXQgb2YgZGVsZXRlZCBpdGVtcyBieSBpZHNcbiAgICAgKiBAdHlwZSB7RGVsZXRlU2V0fVxuICAgICAqL1xuICAgIHRoaXMuZGVsZXRlU2V0ID0gbmV3IERlbGV0ZVNldCgpO1xuICAgIC8qKlxuICAgICAqIEhvbGRzIHRoZSBzdGF0ZSBiZWZvcmUgdGhlIHRyYW5zYWN0aW9uIHN0YXJ0ZWQuXG4gICAgICogQHR5cGUge01hcDxOdW1iZXIsTnVtYmVyPn1cbiAgICAgKi9cbiAgICB0aGlzLmJlZm9yZVN0YXRlID0gZ2V0U3RhdGVWZWN0b3IoZG9jLnN0b3JlKTtcbiAgICAvKipcbiAgICAgKiBIb2xkcyB0aGUgc3RhdGUgYWZ0ZXIgdGhlIHRyYW5zYWN0aW9uLlxuICAgICAqIEB0eXBlIHtNYXA8TnVtYmVyLE51bWJlcj59XG4gICAgICovXG4gICAgdGhpcy5hZnRlclN0YXRlID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIEFsbCB0eXBlcyB0aGF0IHdlcmUgZGlyZWN0bHkgbW9kaWZpZWQgKHByb3BlcnR5IGFkZGVkIG9yIGNoaWxkXG4gICAgICogaW5zZXJ0ZWQvZGVsZXRlZCkuIE5ldyB0eXBlcyBhcmUgbm90IGluY2x1ZGVkIGluIHRoaXMgU2V0LlxuICAgICAqIE1hcHMgZnJvbSB0eXBlIHRvIHBhcmVudFN1YnMgKGBpdGVtLnBhcmVudFN1YiA9IG51bGxgIGZvciBZQXJyYXkpXG4gICAgICogQHR5cGUge01hcDxBYnN0cmFjdFR5cGU8WUV2ZW50PGFueT4+LFNldDxTdHJpbmd8bnVsbD4+fVxuICAgICAqL1xuICAgIHRoaXMuY2hhbmdlZCA9IG5ldyBNYXAoKTtcbiAgICAvKipcbiAgICAgKiBTdG9yZXMgdGhlIGV2ZW50cyBmb3IgdGhlIHR5cGVzIHRoYXQgb2JzZXJ2ZSBhbHNvIGNoaWxkIGVsZW1lbnRzLlxuICAgICAqIEl0IGlzIG1haW5seSB1c2VkIGJ5IGBvYnNlcnZlRGVlcGAuXG4gICAgICogQHR5cGUge01hcDxBYnN0cmFjdFR5cGU8WUV2ZW50PGFueT4+LEFycmF5PFlFdmVudDxhbnk+Pj59XG4gICAgICovXG4gICAgdGhpcy5jaGFuZ2VkUGFyZW50VHlwZXMgPSBuZXcgTWFwKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PEFic3RyYWN0U3RydWN0Pn1cbiAgICAgKi9cbiAgICB0aGlzLl9tZXJnZVN0cnVjdHMgPSBbXTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7YW55fVxuICAgICAqL1xuICAgIHRoaXMub3JpZ2luID0gb3JpZ2luO1xuICAgIC8qKlxuICAgICAqIFN0b3JlcyBtZXRhIGluZm9ybWF0aW9uIG9uIHRoZSB0cmFuc2FjdGlvblxuICAgICAqIEB0eXBlIHtNYXA8YW55LGFueT59XG4gICAgICovXG4gICAgdGhpcy5tZXRhID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBjaGFuZ2Ugb3JpZ2luYXRlcyBmcm9tIHRoaXMgZG9jLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMubG9jYWwgPSBsb2NhbDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7U2V0PERvYz59XG4gICAgICovXG4gICAgdGhpcy5zdWJkb2NzQWRkZWQgPSBuZXcgU2V0KCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge1NldDxEb2M+fVxuICAgICAqL1xuICAgIHRoaXMuc3ViZG9jc1JlbW92ZWQgPSBuZXcgU2V0KCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge1NldDxEb2M+fVxuICAgICAqL1xuICAgIHRoaXMuc3ViZG9jc0xvYWRlZCA9IG5ldyBTZXQoKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBkYXRhIHdhcyB3cml0dGVuLlxuICovXG5jb25zdCB3cml0ZVVwZGF0ZU1lc3NhZ2VGcm9tVHJhbnNhY3Rpb24gPSAoZW5jb2RlciwgdHJhbnNhY3Rpb24pID0+IHtcbiAgaWYgKHRyYW5zYWN0aW9uLmRlbGV0ZVNldC5jbGllbnRzLnNpemUgPT09IDAgJiYgIW1hcC5hbnkodHJhbnNhY3Rpb24uYWZ0ZXJTdGF0ZSwgKGNsb2NrLCBjbGllbnQpID0+IHRyYW5zYWN0aW9uLmJlZm9yZVN0YXRlLmdldChjbGllbnQpICE9PSBjbG9jaykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBzb3J0QW5kTWVyZ2VEZWxldGVTZXQodHJhbnNhY3Rpb24uZGVsZXRlU2V0KTtcbiAgd3JpdGVTdHJ1Y3RzRnJvbVRyYW5zYWN0aW9uKGVuY29kZXIsIHRyYW5zYWN0aW9uKTtcbiAgd3JpdGVEZWxldGVTZXQoZW5jb2RlciwgdHJhbnNhY3Rpb24uZGVsZXRlU2V0KTtcbiAgcmV0dXJuIHRydWVcbn07XG5cbi8qKlxuICogSWYgYHR5cGUucGFyZW50YCB3YXMgYWRkZWQgaW4gY3VycmVudCB0cmFuc2FjdGlvbiwgYHR5cGVgIHRlY2huaWNhbGx5XG4gKiBkaWQgbm90IGNoYW5nZSwgaXQgd2FzIGp1c3QgYWRkZWQgYW5kIHdlIHNob3VsZCBub3QgZmlyZSBldmVudHMgZm9yIGB0eXBlYC5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8WUV2ZW50PGFueT4+fSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBwYXJlbnRTdWJcbiAqL1xuY29uc3QgYWRkQ2hhbmdlZFR5cGVUb1RyYW5zYWN0aW9uID0gKHRyYW5zYWN0aW9uLCB0eXBlLCBwYXJlbnRTdWIpID0+IHtcbiAgY29uc3QgaXRlbSA9IHR5cGUuX2l0ZW07XG4gIGlmIChpdGVtID09PSBudWxsIHx8IChpdGVtLmlkLmNsb2NrIDwgKHRyYW5zYWN0aW9uLmJlZm9yZVN0YXRlLmdldChpdGVtLmlkLmNsaWVudCkgfHwgMCkgJiYgIWl0ZW0uZGVsZXRlZCkpIHtcbiAgICBtYXAuc2V0SWZVbmRlZmluZWQodHJhbnNhY3Rpb24uY2hhbmdlZCwgdHlwZSwgc2V0LmNyZWF0ZSkuYWRkKHBhcmVudFN1Yik7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxBYnN0cmFjdFN0cnVjdD59IHN0cnVjdHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NcbiAqL1xuY29uc3QgdHJ5VG9NZXJnZVdpdGhMZWZ0ID0gKHN0cnVjdHMsIHBvcykgPT4ge1xuICBjb25zdCBsZWZ0ID0gc3RydWN0c1twb3MgLSAxXTtcbiAgY29uc3QgcmlnaHQgPSBzdHJ1Y3RzW3Bvc107XG4gIGlmIChsZWZ0LmRlbGV0ZWQgPT09IHJpZ2h0LmRlbGV0ZWQgJiYgbGVmdC5jb25zdHJ1Y3RvciA9PT0gcmlnaHQuY29uc3RydWN0b3IpIHtcbiAgICBpZiAobGVmdC5tZXJnZVdpdGgocmlnaHQpKSB7XG4gICAgICBzdHJ1Y3RzLnNwbGljZShwb3MsIDEpO1xuICAgICAgaWYgKHJpZ2h0IGluc3RhbmNlb2YgSXRlbSAmJiByaWdodC5wYXJlbnRTdWIgIT09IG51bGwgJiYgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHJpZ2h0LnBhcmVudCkuX21hcC5nZXQocmlnaHQucGFyZW50U3ViKSA9PT0gcmlnaHQpIHtcbiAgICAgICAgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHJpZ2h0LnBhcmVudCkuX21hcC5zZXQocmlnaHQucGFyZW50U3ViLCAvKiogQHR5cGUge0l0ZW19ICovIChsZWZ0KSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oSXRlbSk6Ym9vbGVhbn0gZ2NGaWx0ZXJcbiAqL1xuY29uc3QgdHJ5R2NEZWxldGVTZXQgPSAoZHMsIHN0b3JlLCBnY0ZpbHRlcikgPT4ge1xuICBmb3IgKGNvbnN0IFtjbGllbnQsIGRlbGV0ZUl0ZW1zXSBvZiBkcy5jbGllbnRzLmVudHJpZXMoKSkge1xuICAgIGNvbnN0IHN0cnVjdHMgPSAvKiogQHR5cGUge0FycmF5PEdDfEl0ZW0+fSAqLyAoc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KSk7XG4gICAgZm9yIChsZXQgZGkgPSBkZWxldGVJdGVtcy5sZW5ndGggLSAxOyBkaSA+PSAwOyBkaS0tKSB7XG4gICAgICBjb25zdCBkZWxldGVJdGVtID0gZGVsZXRlSXRlbXNbZGldO1xuICAgICAgY29uc3QgZW5kRGVsZXRlSXRlbUNsb2NrID0gZGVsZXRlSXRlbS5jbG9jayArIGRlbGV0ZUl0ZW0ubGVuO1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IHNpID0gZmluZEluZGV4U1Moc3RydWN0cywgZGVsZXRlSXRlbS5jbG9jayksIHN0cnVjdCA9IHN0cnVjdHNbc2ldO1xuICAgICAgICBzaSA8IHN0cnVjdHMubGVuZ3RoICYmIHN0cnVjdC5pZC5jbG9jayA8IGVuZERlbGV0ZUl0ZW1DbG9jaztcbiAgICAgICAgc3RydWN0ID0gc3RydWN0c1srK3NpXVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHN0cnVjdCA9IHN0cnVjdHNbc2ldO1xuICAgICAgICBpZiAoZGVsZXRlSXRlbS5jbG9jayArIGRlbGV0ZUl0ZW0ubGVuIDw9IHN0cnVjdC5pZC5jbG9jaykge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0cnVjdCBpbnN0YW5jZW9mIEl0ZW0gJiYgc3RydWN0LmRlbGV0ZWQgJiYgIXN0cnVjdC5rZWVwICYmIGdjRmlsdGVyKHN0cnVjdCkpIHtcbiAgICAgICAgICBzdHJ1Y3QuZ2Moc3RvcmUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0RlbGV0ZVNldH0gZHNcbiAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gKi9cbmNvbnN0IHRyeU1lcmdlRGVsZXRlU2V0ID0gKGRzLCBzdG9yZSkgPT4ge1xuICAvLyB0cnkgdG8gbWVyZ2UgZGVsZXRlZCAvIGdjJ2QgaXRlbXNcbiAgLy8gbWVyZ2UgZnJvbSByaWdodCB0byBsZWZ0IGZvciBiZXR0ZXIgZWZmaWNpZWN5IGFuZCBzbyB3ZSBkb24ndCBtaXNzIGFueSBtZXJnZSB0YXJnZXRzXG4gIGRzLmNsaWVudHMuZm9yRWFjaCgoZGVsZXRlSXRlbXMsIGNsaWVudCkgPT4ge1xuICAgIGNvbnN0IHN0cnVjdHMgPSAvKiogQHR5cGUge0FycmF5PEdDfEl0ZW0+fSAqLyAoc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KSk7XG4gICAgZm9yIChsZXQgZGkgPSBkZWxldGVJdGVtcy5sZW5ndGggLSAxOyBkaSA+PSAwOyBkaS0tKSB7XG4gICAgICBjb25zdCBkZWxldGVJdGVtID0gZGVsZXRlSXRlbXNbZGldO1xuICAgICAgLy8gc3RhcnQgd2l0aCBtZXJnaW5nIHRoZSBpdGVtIG5leHQgdG8gdGhlIGxhc3QgZGVsZXRlZCBpdGVtXG4gICAgICBjb25zdCBtb3N0UmlnaHRJbmRleFRvQ2hlY2sgPSBtYXRoLm1pbihzdHJ1Y3RzLmxlbmd0aCAtIDEsIDEgKyBmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBkZWxldGVJdGVtLmNsb2NrICsgZGVsZXRlSXRlbS5sZW4gLSAxKSk7XG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgc2kgPSBtb3N0UmlnaHRJbmRleFRvQ2hlY2ssIHN0cnVjdCA9IHN0cnVjdHNbc2ldO1xuICAgICAgICBzaSA+IDAgJiYgc3RydWN0LmlkLmNsb2NrID49IGRlbGV0ZUl0ZW0uY2xvY2s7XG4gICAgICAgIHN0cnVjdCA9IHN0cnVjdHNbLS1zaV1cbiAgICAgICkge1xuICAgICAgICB0cnlUb01lcmdlV2l0aExlZnQoc3RydWN0cywgc2kpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBkc1xuICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oSXRlbSk6Ym9vbGVhbn0gZ2NGaWx0ZXJcbiAqL1xuY29uc3QgdHJ5R2MgPSAoZHMsIHN0b3JlLCBnY0ZpbHRlcikgPT4ge1xuICB0cnlHY0RlbGV0ZVNldChkcywgc3RvcmUsIGdjRmlsdGVyKTtcbiAgdHJ5TWVyZ2VEZWxldGVTZXQoZHMsIHN0b3JlKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxUcmFuc2FjdGlvbj59IHRyYW5zYWN0aW9uQ2xlYW51cHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBpXG4gKi9cbmNvbnN0IGNsZWFudXBUcmFuc2FjdGlvbnMgPSAodHJhbnNhY3Rpb25DbGVhbnVwcywgaSkgPT4ge1xuICBpZiAoaSA8IHRyYW5zYWN0aW9uQ2xlYW51cHMubGVuZ3RoKSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbkNsZWFudXBzW2ldO1xuICAgIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvYztcbiAgICBjb25zdCBzdG9yZSA9IGRvYy5zdG9yZTtcbiAgICBjb25zdCBkcyA9IHRyYW5zYWN0aW9uLmRlbGV0ZVNldDtcbiAgICBjb25zdCBtZXJnZVN0cnVjdHMgPSB0cmFuc2FjdGlvbi5fbWVyZ2VTdHJ1Y3RzO1xuICAgIHRyeSB7XG4gICAgICBzb3J0QW5kTWVyZ2VEZWxldGVTZXQoZHMpO1xuICAgICAgdHJhbnNhY3Rpb24uYWZ0ZXJTdGF0ZSA9IGdldFN0YXRlVmVjdG9yKHRyYW5zYWN0aW9uLmRvYy5zdG9yZSk7XG4gICAgICBkb2MuX3RyYW5zYWN0aW9uID0gbnVsbDtcbiAgICAgIGRvYy5lbWl0KCdiZWZvcmVPYnNlcnZlckNhbGxzJywgW3RyYW5zYWN0aW9uLCBkb2NdKTtcbiAgICAgIC8qKlxuICAgICAgICogQW4gYXJyYXkgb2YgZXZlbnQgY2FsbGJhY2tzLlxuICAgICAgICpcbiAgICAgICAqIEVhY2ggY2FsbGJhY2sgaXMgY2FsbGVkIGV2ZW4gaWYgdGhlIG90aGVyIG9uZXMgdGhyb3cgZXJyb3JzLlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtBcnJheTxmdW5jdGlvbigpOnZvaWQ+fVxuICAgICAgICovXG4gICAgICBjb25zdCBmcyA9IFtdO1xuICAgICAgLy8gb2JzZXJ2ZSBldmVudHMgb24gY2hhbmdlZCB0eXBlc1xuICAgICAgdHJhbnNhY3Rpb24uY2hhbmdlZC5mb3JFYWNoKChzdWJzLCBpdGVtdHlwZSkgPT5cbiAgICAgICAgZnMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgaWYgKGl0ZW10eXBlLl9pdGVtID09PSBudWxsIHx8ICFpdGVtdHlwZS5faXRlbS5kZWxldGVkKSB7XG4gICAgICAgICAgICBpdGVtdHlwZS5fY2FsbE9ic2VydmVyKHRyYW5zYWN0aW9uLCBzdWJzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgZnMucHVzaCgoKSA9PiB7XG4gICAgICAgIC8vIGRlZXAgb2JzZXJ2ZSBldmVudHNcbiAgICAgICAgdHJhbnNhY3Rpb24uY2hhbmdlZFBhcmVudFR5cGVzLmZvckVhY2goKGV2ZW50cywgdHlwZSkgPT5cbiAgICAgICAgICBmcy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gdGhpbmsgYWJvdXQgdGhlIHBvc3NpYmlsaXR5IHRoYXQgdGhlIHVzZXIgdHJhbnNmb3JtcyB0aGVcbiAgICAgICAgICAgIC8vIFkuRG9jIGluIHRoZSBldmVudC5cbiAgICAgICAgICAgIGlmICh0eXBlLl9pdGVtID09PSBudWxsIHx8ICF0eXBlLl9pdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihldmVudCA9PlxuICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0Ll9pdGVtID09PSBudWxsIHx8ICFldmVudC50YXJnZXQuX2l0ZW0uZGVsZXRlZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGV2ZW50c1xuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSB0eXBlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAvLyBzb3J0IGV2ZW50cyBieSBwYXRoIGxlbmd0aCBzbyB0aGF0IHRvcC1sZXZlbCBldmVudHMgYXJlIGZpcmVkIGZpcnN0LlxuICAgICAgICAgICAgICBldmVudHNcbiAgICAgICAgICAgICAgICAuc29ydCgoZXZlbnQxLCBldmVudDIpID0+IGV2ZW50MS5wYXRoLmxlbmd0aCAtIGV2ZW50Mi5wYXRoLmxlbmd0aCk7XG4gICAgICAgICAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gY2hlY2sgZm9yIGV2ZW50cy5sZW5ndGhcbiAgICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSBrbm93IGl0IGhhcyBhdCBsZWFzdCBvbmUgZWxlbWVudFxuICAgICAgICAgICAgICBjYWxsRXZlbnRIYW5kbGVyTGlzdGVuZXJzKHR5cGUuX2RFSCwgZXZlbnRzLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgZnMucHVzaCgoKSA9PiBkb2MuZW1pdCgnYWZ0ZXJUcmFuc2FjdGlvbicsIFt0cmFuc2FjdGlvbiwgZG9jXSkpO1xuICAgICAgfSk7XG4gICAgICBjYWxsQWxsKGZzLCBbXSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIFJlcGxhY2UgZGVsZXRlZCBpdGVtcyB3aXRoIEl0ZW1EZWxldGVkIC8gR0MuXG4gICAgICAvLyBUaGlzIGlzIHdoZXJlIGNvbnRlbnQgaXMgYWN0dWFsbHkgcmVtb3ZlIGZyb20gdGhlIFlqcyBEb2MuXG4gICAgICBpZiAoZG9jLmdjKSB7XG4gICAgICAgIHRyeUdjRGVsZXRlU2V0KGRzLCBzdG9yZSwgZG9jLmdjRmlsdGVyKTtcbiAgICAgIH1cbiAgICAgIHRyeU1lcmdlRGVsZXRlU2V0KGRzLCBzdG9yZSk7XG5cbiAgICAgIC8vIG9uIGFsbCBhZmZlY3RlZCBzdG9yZS5jbGllbnRzIHByb3BzLCB0cnkgdG8gbWVyZ2VcbiAgICAgIHRyYW5zYWN0aW9uLmFmdGVyU3RhdGUuZm9yRWFjaCgoY2xvY2ssIGNsaWVudCkgPT4ge1xuICAgICAgICBjb25zdCBiZWZvcmVDbG9jayA9IHRyYW5zYWN0aW9uLmJlZm9yZVN0YXRlLmdldChjbGllbnQpIHx8IDA7XG4gICAgICAgIGlmIChiZWZvcmVDbG9jayAhPT0gY2xvY2spIHtcbiAgICAgICAgICBjb25zdCBzdHJ1Y3RzID0gLyoqIEB0eXBlIHtBcnJheTxHQ3xJdGVtPn0gKi8gKHN0b3JlLmNsaWVudHMuZ2V0KGNsaWVudCkpO1xuICAgICAgICAgIC8vIHdlIGl0ZXJhdGUgZnJvbSByaWdodCB0byBsZWZ0IHNvIHdlIGNhbiBzYWZlbHkgcmVtb3ZlIGVudHJpZXNcbiAgICAgICAgICBjb25zdCBmaXJzdENoYW5nZVBvcyA9IG1hdGgubWF4KGZpbmRJbmRleFNTKHN0cnVjdHMsIGJlZm9yZUNsb2NrKSwgMSk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IHN0cnVjdHMubGVuZ3RoIC0gMTsgaSA+PSBmaXJzdENoYW5nZVBvczsgaS0tKSB7XG4gICAgICAgICAgICB0cnlUb01lcmdlV2l0aExlZnQoc3RydWN0cywgaSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIHRyeSB0byBtZXJnZSBtZXJnZVN0cnVjdHNcbiAgICAgIC8vIEB0b2RvOiBpdCBtYWtlcyBtb3JlIHNlbnNlIHRvIHRyYW5zZm9ybSBtZXJnZVN0cnVjdHMgdG8gYSBEUywgc29ydCBpdCwgYW5kIG1lcmdlIGZyb20gcmlnaHQgdG8gbGVmdFxuICAgICAgLy8gICAgICAgIGJ1dCBhdCB0aGUgbW9tZW50IERTIGRvZXMgbm90IGhhbmRsZSBkdXBsaWNhdGVzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lcmdlU3RydWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB7IGNsaWVudCwgY2xvY2sgfSA9IG1lcmdlU3RydWN0c1tpXS5pZDtcbiAgICAgICAgY29uc3Qgc3RydWN0cyA9IC8qKiBAdHlwZSB7QXJyYXk8R0N8SXRlbT59ICovIChzdG9yZS5jbGllbnRzLmdldChjbGllbnQpKTtcbiAgICAgICAgY29uc3QgcmVwbGFjZWRTdHJ1Y3RQb3MgPSBmaW5kSW5kZXhTUyhzdHJ1Y3RzLCBjbG9jayk7XG4gICAgICAgIGlmIChyZXBsYWNlZFN0cnVjdFBvcyArIDEgPCBzdHJ1Y3RzLmxlbmd0aCkge1xuICAgICAgICAgIHRyeVRvTWVyZ2VXaXRoTGVmdChzdHJ1Y3RzLCByZXBsYWNlZFN0cnVjdFBvcyArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBsYWNlZFN0cnVjdFBvcyA+IDApIHtcbiAgICAgICAgICB0cnlUb01lcmdlV2l0aExlZnQoc3RydWN0cywgcmVwbGFjZWRTdHJ1Y3RQb3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zYWN0aW9uLmxvY2FsICYmIHRyYW5zYWN0aW9uLmFmdGVyU3RhdGUuZ2V0KGRvYy5jbGllbnRJRCkgIT09IHRyYW5zYWN0aW9uLmJlZm9yZVN0YXRlLmdldChkb2MuY2xpZW50SUQpKSB7XG4gICAgICAgIGxvZ2dpbmcucHJpbnQobG9nZ2luZy5PUkFOR0UsIGxvZ2dpbmcuQk9MRCwgJ1t5anNdICcsIGxvZ2dpbmcuVU5CT0xELCBsb2dnaW5nLlJFRCwgJ0NoYW5nZWQgdGhlIGNsaWVudC1pZCBiZWNhdXNlIGFub3RoZXIgY2xpZW50IHNlZW1zIHRvIGJlIHVzaW5nIGl0LicpO1xuICAgICAgICBkb2MuY2xpZW50SUQgPSBnZW5lcmF0ZU5ld0NsaWVudElkKCk7XG4gICAgICB9XG4gICAgICAvLyBAdG9kbyBNZXJnZSBhbGwgdGhlIHRyYW5zYWN0aW9ucyBpbnRvIG9uZSBhbmQgcHJvdmlkZSBzZW5kIHRoZSBkYXRhIGFzIGEgc2luZ2xlIHVwZGF0ZSBtZXNzYWdlXG4gICAgICBkb2MuZW1pdCgnYWZ0ZXJUcmFuc2FjdGlvbkNsZWFudXAnLCBbdHJhbnNhY3Rpb24sIGRvY10pO1xuICAgICAgaWYgKGRvYy5fb2JzZXJ2ZXJzLmhhcygndXBkYXRlJykpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBVcGRhdGVFbmNvZGVyVjEoKTtcbiAgICAgICAgY29uc3QgaGFzQ29udGVudCA9IHdyaXRlVXBkYXRlTWVzc2FnZUZyb21UcmFuc2FjdGlvbihlbmNvZGVyLCB0cmFuc2FjdGlvbik7XG4gICAgICAgIGlmIChoYXNDb250ZW50KSB7XG4gICAgICAgICAgZG9jLmVtaXQoJ3VwZGF0ZScsIFtlbmNvZGVyLnRvVWludDhBcnJheSgpLCB0cmFuc2FjdGlvbi5vcmlnaW4sIGRvYywgdHJhbnNhY3Rpb25dKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRvYy5fb2JzZXJ2ZXJzLmhhcygndXBkYXRlVjInKSkge1xuICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFVwZGF0ZUVuY29kZXJWMigpO1xuICAgICAgICBjb25zdCBoYXNDb250ZW50ID0gd3JpdGVVcGRhdGVNZXNzYWdlRnJvbVRyYW5zYWN0aW9uKGVuY29kZXIsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgaWYgKGhhc0NvbnRlbnQpIHtcbiAgICAgICAgICBkb2MuZW1pdCgndXBkYXRlVjInLCBbZW5jb2Rlci50b1VpbnQ4QXJyYXkoKSwgdHJhbnNhY3Rpb24ub3JpZ2luLCBkb2MsIHRyYW5zYWN0aW9uXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgc3ViZG9jc0FkZGVkLCBzdWJkb2NzTG9hZGVkLCBzdWJkb2NzUmVtb3ZlZCB9ID0gdHJhbnNhY3Rpb247XG4gICAgICBpZiAoc3ViZG9jc0FkZGVkLnNpemUgPiAwIHx8IHN1YmRvY3NSZW1vdmVkLnNpemUgPiAwIHx8IHN1YmRvY3NMb2FkZWQuc2l6ZSA+IDApIHtcbiAgICAgICAgc3ViZG9jc0FkZGVkLmZvckVhY2goc3ViZG9jID0+IHtcbiAgICAgICAgICBzdWJkb2MuY2xpZW50SUQgPSBkb2MuY2xpZW50SUQ7XG4gICAgICAgICAgaWYgKHN1YmRvYy5jb2xsZWN0aW9uaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgc3ViZG9jLmNvbGxlY3Rpb25pZCA9IGRvYy5jb2xsZWN0aW9uaWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRvYy5zdWJkb2NzLmFkZChzdWJkb2MpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3ViZG9jc1JlbW92ZWQuZm9yRWFjaChzdWJkb2MgPT4gZG9jLnN1YmRvY3MuZGVsZXRlKHN1YmRvYykpO1xuICAgICAgICBkb2MuZW1pdCgnc3ViZG9jcycsIFt7IGxvYWRlZDogc3ViZG9jc0xvYWRlZCwgYWRkZWQ6IHN1YmRvY3NBZGRlZCwgcmVtb3ZlZDogc3ViZG9jc1JlbW92ZWQgfSwgZG9jLCB0cmFuc2FjdGlvbl0pO1xuICAgICAgICBzdWJkb2NzUmVtb3ZlZC5mb3JFYWNoKHN1YmRvYyA9PiBzdWJkb2MuZGVzdHJveSgpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYW5zYWN0aW9uQ2xlYW51cHMubGVuZ3RoIDw9IGkgKyAxKSB7XG4gICAgICAgIGRvYy5fdHJhbnNhY3Rpb25DbGVhbnVwcyA9IFtdO1xuICAgICAgICBkb2MuZW1pdCgnYWZ0ZXJBbGxUcmFuc2FjdGlvbnMnLCBbZG9jLCB0cmFuc2FjdGlvbkNsZWFudXBzXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGVhbnVwVHJhbnNhY3Rpb25zKHRyYW5zYWN0aW9uQ2xlYW51cHMsIGkgKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgZnVuY3Rpb25hbGl0eSBvZiBgeS50cmFuc2FjdCgoKT0+ey4ufSlgXG4gKlxuICogQHBhcmFtIHtEb2N9IGRvY1xuICogQHBhcmFtIHtmdW5jdGlvbihUcmFuc2FjdGlvbik6dm9pZH0gZlxuICogQHBhcmFtIHthbnl9IFtvcmlnaW49dHJ1ZV1cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHJhbnNhY3QgPSAoZG9jLCBmLCBvcmlnaW4gPSBudWxsLCBsb2NhbCA9IHRydWUpID0+IHtcbiAgY29uc3QgdHJhbnNhY3Rpb25DbGVhbnVwcyA9IGRvYy5fdHJhbnNhY3Rpb25DbGVhbnVwcztcbiAgbGV0IGluaXRpYWxDYWxsID0gZmFsc2U7XG4gIGlmIChkb2MuX3RyYW5zYWN0aW9uID09PSBudWxsKSB7XG4gICAgaW5pdGlhbENhbGwgPSB0cnVlO1xuICAgIGRvYy5fdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oZG9jLCBvcmlnaW4sIGxvY2FsKTtcbiAgICB0cmFuc2FjdGlvbkNsZWFudXBzLnB1c2goZG9jLl90cmFuc2FjdGlvbik7XG4gICAgaWYgKHRyYW5zYWN0aW9uQ2xlYW51cHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBkb2MuZW1pdCgnYmVmb3JlQWxsVHJhbnNhY3Rpb25zJywgW2RvY10pO1xuICAgIH1cbiAgICBkb2MuZW1pdCgnYmVmb3JlVHJhbnNhY3Rpb24nLCBbZG9jLl90cmFuc2FjdGlvbiwgZG9jXSk7XG4gIH1cbiAgdHJ5IHtcbiAgICBmKGRvYy5fdHJhbnNhY3Rpb24pO1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChpbml0aWFsQ2FsbCAmJiB0cmFuc2FjdGlvbkNsZWFudXBzWzBdID09PSBkb2MuX3RyYW5zYWN0aW9uKSB7XG4gICAgICAvLyBUaGUgZmlyc3QgdHJhbnNhY3Rpb24gZW5kZWQsIG5vdyBwcm9jZXNzIG9ic2VydmVyIGNhbGxzLlxuICAgICAgLy8gT2JzZXJ2ZXIgY2FsbCBtYXkgY3JlYXRlIG5ldyB0cmFuc2FjdGlvbnMgZm9yIHdoaWNoIHdlIG5lZWQgdG8gY2FsbCB0aGUgb2JzZXJ2ZXJzIGFuZCBkbyBjbGVhbnVwLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBuZXN0IHRoZXNlIGNhbGxzLCBzbyB3ZSBleGVjdXRlIHRoZXNlIGNhbGxzIG9uZSBhZnRlclxuICAgICAgLy8gYW5vdGhlci5cbiAgICAgIC8vIEFsc28gd2UgbmVlZCB0byBlbnN1cmUgdGhhdCBhbGwgY2xlYW51cHMgYXJlIGNhbGxlZCwgZXZlbiBpZiB0aGVcbiAgICAgIC8vIG9ic2VydmVzIHRocm93IGVycm9ycy5cbiAgICAgIC8vIFRoaXMgZmlsZSBpcyBmdWxsIG9mIGhhY2t5IHRyeSB7fSBmaW5hbGx5IHt9IGJsb2NrcyB0byBlbnN1cmUgdGhhdCBhblxuICAgICAgLy8gZXZlbnQgY2FuIHRocm93IGVycm9ycyBhbmQgYWxzbyB0aGF0IHRoZSBjbGVhbnVwIGlzIGNhbGxlZC5cbiAgICAgIGNsZWFudXBUcmFuc2FjdGlvbnModHJhbnNhY3Rpb25DbGVhbnVwcywgMCk7XG4gICAgfVxuICB9XG59O1xuXG5jbGFzcyBTdGFja0l0ZW0ge1xuICAvKipcbiAgICogQHBhcmFtIHtEZWxldGVTZXR9IGRlbGV0aW9uc1xuICAgKiBAcGFyYW0ge0RlbGV0ZVNldH0gaW5zZXJ0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IgKGRlbGV0aW9ucywgaW5zZXJ0aW9ucykge1xuICAgIHRoaXMuaW5zZXJ0aW9ucyA9IGluc2VydGlvbnM7XG4gICAgdGhpcy5kZWxldGlvbnMgPSBkZWxldGlvbnM7XG4gICAgLyoqXG4gICAgICogVXNlIHRoaXMgdG8gc2F2ZSBhbmQgcmVzdG9yZSBtZXRhZGF0YSBsaWtlIHNlbGVjdGlvbiByYW5nZVxuICAgICAqL1xuICAgIHRoaXMubWV0YSA9IG5ldyBNYXAoKTtcbiAgfVxufVxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0clxuICogQHBhcmFtIHtVbmRvTWFuYWdlcn0gdW1cbiAqIEBwYXJhbSB7U3RhY2tJdGVtfSBzdGFja0l0ZW1cbiAqL1xuY29uc3QgY2xlYXJVbmRvTWFuYWdlclN0YWNrSXRlbSA9ICh0ciwgdW0sIHN0YWNrSXRlbSkgPT4ge1xuICBpdGVyYXRlRGVsZXRlZFN0cnVjdHModHIsIHN0YWNrSXRlbS5kZWxldGlvbnMsIGl0ZW0gPT4ge1xuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgSXRlbSAmJiB1bS5zY29wZS5zb21lKHR5cGUgPT4gaXNQYXJlbnRPZih0eXBlLCBpdGVtKSkpIHtcbiAgICAgIGtlZXBJdGVtKGl0ZW0sIGZhbHNlKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VuZG9NYW5hZ2VyfSB1bmRvTWFuYWdlclxuICogQHBhcmFtIHtBcnJheTxTdGFja0l0ZW0+fSBzdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICogQHJldHVybiB7U3RhY2tJdGVtP31cbiAqL1xuY29uc3QgcG9wU3RhY2tJdGVtID0gKHVuZG9NYW5hZ2VyLCBzdGFjaywgZXZlbnRUeXBlKSA9PiB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIGEgY2hhbmdlIGhhcHBlbmVkXG4gICAqIEB0eXBlIHtTdGFja0l0ZW0/fVxuICAgKi9cbiAgbGV0IHJlc3VsdCA9IG51bGw7XG4gIC8qKlxuICAgKiBLZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSB0cmFuc2FjdGlvbiBzbyB3ZSBjYW4gZmlyZSB0aGUgZXZlbnQgd2l0aCB0aGUgY2hhbmdlZFBhcmVudFR5cGVzXG4gICAqIEB0eXBlIHthbnl9XG4gICAqL1xuICBsZXQgX3RyID0gbnVsbDtcbiAgY29uc3QgZG9jID0gdW5kb01hbmFnZXIuZG9jO1xuICBjb25zdCBzY29wZSA9IHVuZG9NYW5hZ2VyLnNjb3BlO1xuICB0cmFuc2FjdChkb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCAmJiByZXN1bHQgPT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHN0b3JlID0gZG9jLnN0b3JlO1xuICAgICAgY29uc3Qgc3RhY2tJdGVtID0gLyoqIEB0eXBlIHtTdGFja0l0ZW19ICovIChzdGFjay5wb3AoKSk7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtTZXQ8SXRlbT59XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGl0ZW1zVG9SZWRvID0gbmV3IFNldCgpO1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7QXJyYXk8SXRlbT59XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGl0ZW1zVG9EZWxldGUgPSBbXTtcbiAgICAgIGxldCBwZXJmb3JtZWRDaGFuZ2UgPSBmYWxzZTtcbiAgICAgIGl0ZXJhdGVEZWxldGVkU3RydWN0cyh0cmFuc2FjdGlvbiwgc3RhY2tJdGVtLmluc2VydGlvbnMsIHN0cnVjdCA9PiB7XG4gICAgICAgIGlmIChzdHJ1Y3QgaW5zdGFuY2VvZiBJdGVtKSB7XG4gICAgICAgICAgaWYgKHN0cnVjdC5yZWRvbmUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCB7IGl0ZW0sIGRpZmYgfSA9IGZvbGxvd1JlZG9uZShzdG9yZSwgc3RydWN0LmlkKTtcbiAgICAgICAgICAgIGlmIChkaWZmID4gMCkge1xuICAgICAgICAgICAgICBpdGVtID0gZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGNyZWF0ZUlEKGl0ZW0uaWQuY2xpZW50LCBpdGVtLmlkLmNsb2NrICsgZGlmZikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RydWN0ID0gaXRlbTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFzdHJ1Y3QuZGVsZXRlZCAmJiBzY29wZS5zb21lKHR5cGUgPT4gaXNQYXJlbnRPZih0eXBlLCAvKiogQHR5cGUge0l0ZW19ICovIChzdHJ1Y3QpKSkpIHtcbiAgICAgICAgICAgIGl0ZW1zVG9EZWxldGUucHVzaChzdHJ1Y3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpdGVyYXRlRGVsZXRlZFN0cnVjdHModHJhbnNhY3Rpb24sIHN0YWNrSXRlbS5kZWxldGlvbnMsIHN0cnVjdCA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzdHJ1Y3QgaW5zdGFuY2VvZiBJdGVtICYmXG4gICAgICAgICAgc2NvcGUuc29tZSh0eXBlID0+IGlzUGFyZW50T2YodHlwZSwgc3RydWN0KSkgJiZcbiAgICAgICAgICAvLyBOZXZlciByZWRvIHN0cnVjdHMgaW4gc3RhY2tJdGVtLmluc2VydGlvbnMgYmVjYXVzZSB0aGV5IHdlcmUgY3JlYXRlZCBhbmQgZGVsZXRlZCBpbiB0aGUgc2FtZSBjYXB0dXJlIGludGVydmFsLlxuICAgICAgICAgICFpc0RlbGV0ZWQoc3RhY2tJdGVtLmluc2VydGlvbnMsIHN0cnVjdC5pZClcbiAgICAgICAgKSB7XG4gICAgICAgICAgaXRlbXNUb1JlZG8uYWRkKHN0cnVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaXRlbXNUb1JlZG8uZm9yRWFjaChzdHJ1Y3QgPT4ge1xuICAgICAgICBwZXJmb3JtZWRDaGFuZ2UgPSByZWRvSXRlbSh0cmFuc2FjdGlvbiwgc3RydWN0LCBpdGVtc1RvUmVkbywgc3RhY2tJdGVtLmluc2VydGlvbnMsIHVuZG9NYW5hZ2VyLmlnbm9yZVJlbW90ZU1hcENoYW5nZXMpICE9PSBudWxsIHx8IHBlcmZvcm1lZENoYW5nZTtcbiAgICAgIH0pO1xuICAgICAgLy8gV2Ugd2FudCB0byBkZWxldGUgaW4gcmV2ZXJzZSBvcmRlciBzbyB0aGF0IGNoaWxkcmVuIGFyZSBkZWxldGVkIGJlZm9yZVxuICAgICAgLy8gcGFyZW50cywgc28gd2UgaGF2ZSBtb3JlIGluZm9ybWF0aW9uIGF2YWlsYWJsZSB3aGVuIGl0ZW1zIGFyZSBmaWx0ZXJlZC5cbiAgICAgIGZvciAobGV0IGkgPSBpdGVtc1RvRGVsZXRlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1RvRGVsZXRlW2ldO1xuICAgICAgICBpZiAodW5kb01hbmFnZXIuZGVsZXRlRmlsdGVyKGl0ZW0pKSB7XG4gICAgICAgICAgaXRlbS5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgICAgIHBlcmZvcm1lZENoYW5nZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHBlcmZvcm1lZENoYW5nZSA/IHN0YWNrSXRlbSA6IG51bGw7XG4gICAgfVxuICAgIHRyYW5zYWN0aW9uLmNoYW5nZWQuZm9yRWFjaCgoc3ViUHJvcHMsIHR5cGUpID0+IHtcbiAgICAgIC8vIGRlc3Ryb3kgc2VhcmNoIG1hcmtlciBpZiBuZWNlc3NhcnlcbiAgICAgIGlmIChzdWJQcm9wcy5oYXMobnVsbCkgJiYgdHlwZS5fc2VhcmNoTWFya2VyKSB7XG4gICAgICAgIHR5cGUuX3NlYXJjaE1hcmtlci5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF90ciA9IHRyYW5zYWN0aW9uO1xuICB9LCB1bmRvTWFuYWdlcik7XG4gIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgIGNvbnN0IGNoYW5nZWRQYXJlbnRUeXBlcyA9IF90ci5jaGFuZ2VkUGFyZW50VHlwZXM7XG4gICAgdW5kb01hbmFnZXIuZW1pdCgnc3RhY2staXRlbS1wb3BwZWQnLCBbeyBzdGFja0l0ZW06IHJlc3VsdCwgdHlwZTogZXZlbnRUeXBlLCBjaGFuZ2VkUGFyZW50VHlwZXMgfSwgdW5kb01hbmFnZXJdKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFVuZG9NYW5hZ2VyT3B0aW9uc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IFtVbmRvTWFuYWdlck9wdGlvbnMuY2FwdHVyZVRpbWVvdXQ9NTAwXVxuICogQHByb3BlcnR5IHtmdW5jdGlvbihUcmFuc2FjdGlvbik6Ym9vbGVhbn0gW1VuZG9NYW5hZ2VyT3B0aW9ucy5jYXB0dXJlVHJhbnNhY3Rpb25dIERvIG5vdCBjYXB0dXJlIGNoYW5nZXMgb2YgYSBUcmFuc2FjdGlvbiBpZiByZXN1bHQgZmFsc2UuXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKEl0ZW0pOmJvb2xlYW59IFtVbmRvTWFuYWdlck9wdGlvbnMuZGVsZXRlRmlsdGVyPSgpPT50cnVlXSBTb21ldGltZXNcbiAqIGl0IGlzIG5lY2Vzc2FyeSB0byBmaWx0ZXIgd2hhbiBhbiBVbmRvL1JlZG8gb3BlcmF0aW9uIGNhbiBkZWxldGUuIElmIHRoaXNcbiAqIGZpbHRlciByZXR1cm5zIGZhbHNlLCB0aGUgdHlwZS9pdGVtIHdvbid0IGJlIGRlbGV0ZWQgZXZlbiBpdCBpcyBpbiB0aGVcbiAqIHVuZG8vcmVkbyBzY29wZS5cbiAqIEBwcm9wZXJ0eSB7U2V0PGFueT59IFtVbmRvTWFuYWdlck9wdGlvbnMudHJhY2tlZE9yaWdpbnM9bmV3IFNldChbbnVsbF0pXVxuICogQHByb3BlcnR5IHtib29sZWFufSBbaWdub3JlUmVtb3RlTWFwQ2hhbmdlc10gRXhwZXJpbWVudGFsLiBCeSBkZWZhdWx0LCB0aGUgVW5kb01hbmFnZXIgd2lsbCBuZXZlciBvdmVyd3JpdGUgcmVtb3RlIGNoYW5nZXMuIEVuYWJsZSB0aGlzIHByb3BlcnR5IHRvIGVuYWJsZSBvdmVyd3JpdGluZyByZW1vdGUgY2hhbmdlcyBvbiBrZXktdmFsdWUgY2hhbmdlcyAoWS5NYXAsIHByb3BlcnRpZXMgb24gWS5YbWwsIGV0Yy4uKS5cbiAqL1xuXG4vKipcbiAqIEZpcmVzICdzdGFjay1pdGVtLWFkZGVkJyBldmVudCB3aGVuIGEgc3RhY2sgaXRlbSB3YXMgYWRkZWQgdG8gZWl0aGVyIHRoZSB1bmRvLSBvclxuICogdGhlIHJlZG8tc3RhY2suIFlvdSBtYXkgc3RvcmUgYWRkaXRpb25hbCBzdGFjayBpbmZvcm1hdGlvbiB2aWEgdGhlXG4gKiBtZXRhZGF0YSBwcm9wZXJ0eSBvbiBgZXZlbnQuc3RhY2tJdGVtLm1ldGFgIChpdCBpcyBhIGBNYXBgIG9mIG1ldGFkYXRhIHByb3BlcnRpZXMpLlxuICogRmlyZXMgJ3N0YWNrLWl0ZW0tcG9wcGVkJyBldmVudCB3aGVuIGEgc3RhY2sgaXRlbSB3YXMgcG9wcGVkIGZyb20gZWl0aGVyIHRoZVxuICogdW5kby0gb3IgdGhlIHJlZG8tc3RhY2suIFlvdSBtYXkgcmVzdG9yZSB0aGUgc2F2ZWQgc3RhY2sgaW5mb3JtYXRpb24gZnJvbSBgZXZlbnQuc3RhY2tJdGVtLm1ldGFgLlxuICpcbiAqIEBleHRlbmRzIHtPYnNlcnZhYmxlPCdzdGFjay1pdGVtLWFkZGVkJ3wnc3RhY2staXRlbS1wb3BwZWQnfCdzdGFjay1jbGVhcmVkJ3wnc3RhY2staXRlbS11cGRhdGVkJz59XG4gKi9cbmNsYXNzIFVuZG9NYW5hZ2VyIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fEFycmF5PEFic3RyYWN0VHlwZTxhbnk+Pn0gdHlwZVNjb3BlIEFjY2VwdHMgZWl0aGVyIGEgc2luZ2xlIHR5cGUsIG9yIGFuIGFycmF5IG9mIHR5cGVzXG4gICAqIEBwYXJhbSB7VW5kb01hbmFnZXJPcHRpb25zfSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodHlwZVNjb3BlLCB7XG4gICAgY2FwdHVyZVRpbWVvdXQgPSA1MDAsXG4gICAgY2FwdHVyZVRyYW5zYWN0aW9uID0gdHIgPT4gdHJ1ZSxcbiAgICBkZWxldGVGaWx0ZXIgPSAoKSA9PiB0cnVlLFxuICAgIHRyYWNrZWRPcmlnaW5zID0gbmV3IFNldChbbnVsbF0pLFxuICAgIGlnbm9yZVJlbW90ZU1hcENoYW5nZXMgPSBmYWxzZVxuICB9ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxBYnN0cmFjdFR5cGU8YW55Pj59XG4gICAgICovXG4gICAgdGhpcy5zY29wZSA9IFtdO1xuICAgIHRoaXMuYWRkVG9TY29wZSh0eXBlU2NvcGUpO1xuICAgIHRoaXMuZGVsZXRlRmlsdGVyID0gZGVsZXRlRmlsdGVyO1xuICAgIHRyYWNrZWRPcmlnaW5zLmFkZCh0aGlzKTtcbiAgICB0aGlzLnRyYWNrZWRPcmlnaW5zID0gdHJhY2tlZE9yaWdpbnM7XG4gICAgdGhpcy5jYXB0dXJlVHJhbnNhY3Rpb24gPSBjYXB0dXJlVHJhbnNhY3Rpb247XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PFN0YWNrSXRlbT59XG4gICAgICovXG4gICAgdGhpcy51bmRvU3RhY2sgPSBbXTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8U3RhY2tJdGVtPn1cbiAgICAgKi9cbiAgICB0aGlzLnJlZG9TdGFjayA9IFtdO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGNsaWVudCBpcyBjdXJyZW50bHkgdW5kb2luZyAoY2FsbGluZyBVbmRvTWFuYWdlci51bmRvKVxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy51bmRvaW5nID0gZmFsc2U7XG4gICAgdGhpcy5yZWRvaW5nID0gZmFsc2U7XG4gICAgdGhpcy5kb2MgPSAvKiogQHR5cGUge0RvY30gKi8gKHRoaXMuc2NvcGVbMF0uZG9jKTtcbiAgICB0aGlzLmxhc3RDaGFuZ2UgPSAwO1xuICAgIHRoaXMuaWdub3JlUmVtb3RlTWFwQ2hhbmdlcyA9IGlnbm9yZVJlbW90ZU1hcENoYW5nZXM7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICB0aGlzLmFmdGVyVHJhbnNhY3Rpb25IYW5kbGVyID0gdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgLy8gT25seSB0cmFjayBjZXJ0YWluIHRyYW5zYWN0aW9uc1xuICAgICAgaWYgKFxuICAgICAgICAhdGhpcy5jYXB0dXJlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHx8XG4gICAgICAgICF0aGlzLnNjb3BlLnNvbWUodHlwZSA9PiB0cmFuc2FjdGlvbi5jaGFuZ2VkUGFyZW50VHlwZXMuaGFzKHR5cGUpKSB8fFxuICAgICAgICAoIXRoaXMudHJhY2tlZE9yaWdpbnMuaGFzKHRyYW5zYWN0aW9uLm9yaWdpbikgJiYgKCF0cmFuc2FjdGlvbi5vcmlnaW4gfHwgIXRoaXMudHJhY2tlZE9yaWdpbnMuaGFzKHRyYW5zYWN0aW9uLm9yaWdpbi5jb25zdHJ1Y3RvcikpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY29uc3QgdW5kb2luZyA9IHRoaXMudW5kb2luZztcbiAgICAgIGNvbnN0IHJlZG9pbmcgPSB0aGlzLnJlZG9pbmc7XG4gICAgICBjb25zdCBzdGFjayA9IHVuZG9pbmcgPyB0aGlzLnJlZG9TdGFjayA6IHRoaXMudW5kb1N0YWNrO1xuICAgICAgaWYgKHVuZG9pbmcpIHtcbiAgICAgICAgdGhpcy5zdG9wQ2FwdHVyaW5nKCk7IC8vIG5leHQgdW5kbyBzaG91bGQgbm90IGJlIGFwcGVuZGVkIHRvIGxhc3Qgc3RhY2sgaXRlbVxuICAgICAgfSBlbHNlIGlmICghcmVkb2luZykge1xuICAgICAgICAvLyBuZWl0aGVyIHVuZG9pbmcgbm9yIHJlZG9pbmc6IGRlbGV0ZSByZWRvU3RhY2tcbiAgICAgICAgdGhpcy5jbGVhcihmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBpbnNlcnRpb25zID0gbmV3IERlbGV0ZVNldCgpO1xuICAgICAgdHJhbnNhY3Rpb24uYWZ0ZXJTdGF0ZS5mb3JFYWNoKChlbmRDbG9jaywgY2xpZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXJ0Q2xvY2sgPSB0cmFuc2FjdGlvbi5iZWZvcmVTdGF0ZS5nZXQoY2xpZW50KSB8fCAwO1xuICAgICAgICBjb25zdCBsZW4gPSBlbmRDbG9jayAtIHN0YXJ0Q2xvY2s7XG4gICAgICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAgICAgYWRkVG9EZWxldGVTZXQoaW5zZXJ0aW9ucywgY2xpZW50LCBzdGFydENsb2NrLCBsZW4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IG5vdyA9IHRpbWUuZ2V0VW5peFRpbWUoKTtcbiAgICAgIGxldCBkaWRBZGQgPSBmYWxzZTtcbiAgICAgIGlmIChub3cgLSB0aGlzLmxhc3RDaGFuZ2UgPCBjYXB0dXJlVGltZW91dCAmJiBzdGFjay5sZW5ndGggPiAwICYmICF1bmRvaW5nICYmICFyZWRvaW5nKSB7XG4gICAgICAgIC8vIGFwcGVuZCBjaGFuZ2UgdG8gbGFzdCBzdGFjayBvcFxuICAgICAgICBjb25zdCBsYXN0T3AgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgbGFzdE9wLmRlbGV0aW9ucyA9IG1lcmdlRGVsZXRlU2V0cyhbbGFzdE9wLmRlbGV0aW9ucywgdHJhbnNhY3Rpb24uZGVsZXRlU2V0XSk7XG4gICAgICAgIGxhc3RPcC5pbnNlcnRpb25zID0gbWVyZ2VEZWxldGVTZXRzKFtsYXN0T3AuaW5zZXJ0aW9ucywgaW5zZXJ0aW9uc10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY3JlYXRlIGEgbmV3IHN0YWNrIG9wXG4gICAgICAgIHN0YWNrLnB1c2gobmV3IFN0YWNrSXRlbSh0cmFuc2FjdGlvbi5kZWxldGVTZXQsIGluc2VydGlvbnMpKTtcbiAgICAgICAgZGlkQWRkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghdW5kb2luZyAmJiAhcmVkb2luZykge1xuICAgICAgICB0aGlzLmxhc3RDaGFuZ2UgPSBub3c7XG4gICAgICB9XG4gICAgICAvLyBtYWtlIHN1cmUgdGhhdCBkZWxldGVkIHN0cnVjdHMgYXJlIG5vdCBnYydkXG4gICAgICBpdGVyYXRlRGVsZXRlZFN0cnVjdHModHJhbnNhY3Rpb24sIHRyYW5zYWN0aW9uLmRlbGV0ZVNldCwgLyoqIEBwYXJhbSB7SXRlbXxHQ30gaXRlbSAqLyBpdGVtID0+IHtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBJdGVtICYmIHRoaXMuc2NvcGUuc29tZSh0eXBlID0+IGlzUGFyZW50T2YodHlwZSwgaXRlbSkpKSB7XG4gICAgICAgICAga2VlcEl0ZW0oaXRlbSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc3QgY2hhbmdlRXZlbnQgPSBbeyBzdGFja0l0ZW06IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLCBvcmlnaW46IHRyYW5zYWN0aW9uLm9yaWdpbiwgdHlwZTogdW5kb2luZyA/ICdyZWRvJyA6ICd1bmRvJywgY2hhbmdlZFBhcmVudFR5cGVzOiB0cmFuc2FjdGlvbi5jaGFuZ2VkUGFyZW50VHlwZXMgfSwgdGhpc107XG4gICAgICBpZiAoZGlkQWRkKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnc3RhY2staXRlbS1hZGRlZCcsIGNoYW5nZUV2ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZW1pdCgnc3RhY2staXRlbS11cGRhdGVkJywgY2hhbmdlRXZlbnQpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5kb2Mub24oJ2FmdGVyVHJhbnNhY3Rpb24nLCB0aGlzLmFmdGVyVHJhbnNhY3Rpb25IYW5kbGVyKTtcbiAgICB0aGlzLmRvYy5vbignZGVzdHJveScsICgpID0+IHtcbiAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8QWJzdHJhY3RUeXBlPGFueT4+IHwgQWJzdHJhY3RUeXBlPGFueT59IHl0eXBlc1xuICAgKi9cbiAgYWRkVG9TY29wZSAoeXR5cGVzKSB7XG4gICAgeXR5cGVzID0gYXJyYXkuaXNBcnJheSh5dHlwZXMpID8geXR5cGVzIDogW3l0eXBlc107XG4gICAgeXR5cGVzLmZvckVhY2goeXR5cGUgPT4ge1xuICAgICAgaWYgKHRoaXMuc2NvcGUuZXZlcnkoeXQgPT4geXQgIT09IHl0eXBlKSkge1xuICAgICAgICB0aGlzLnNjb3BlLnB1c2goeXR5cGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7YW55fSBvcmlnaW5cbiAgICovXG4gIGFkZFRyYWNrZWRPcmlnaW4gKG9yaWdpbikge1xuICAgIHRoaXMudHJhY2tlZE9yaWdpbnMuYWRkKG9yaWdpbik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHthbnl9IG9yaWdpblxuICAgKi9cbiAgcmVtb3ZlVHJhY2tlZE9yaWdpbiAob3JpZ2luKSB7XG4gICAgdGhpcy50cmFja2VkT3JpZ2lucy5kZWxldGUob3JpZ2luKTtcbiAgfVxuXG4gIGNsZWFyIChjbGVhclVuZG9TdGFjayA9IHRydWUsIGNsZWFyUmVkb1N0YWNrID0gdHJ1ZSkge1xuICAgIGlmICgoY2xlYXJVbmRvU3RhY2sgJiYgdGhpcy5jYW5VbmRvKCkpIHx8IChjbGVhclJlZG9TdGFjayAmJiB0aGlzLmNhblJlZG8oKSkpIHtcbiAgICAgIHRoaXMuZG9jLnRyYW5zYWN0KHRyID0+IHtcbiAgICAgICAgaWYgKGNsZWFyVW5kb1N0YWNrKSB7XG4gICAgICAgICAgdGhpcy51bmRvU3RhY2suZm9yRWFjaChpdGVtID0+IGNsZWFyVW5kb01hbmFnZXJTdGFja0l0ZW0odHIsIHRoaXMsIGl0ZW0pKTtcbiAgICAgICAgICB0aGlzLnVuZG9TdGFjayA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGVhclJlZG9TdGFjaykge1xuICAgICAgICAgIHRoaXMucmVkb1N0YWNrLmZvckVhY2goaXRlbSA9PiBjbGVhclVuZG9NYW5hZ2VyU3RhY2tJdGVtKHRyLCB0aGlzLCBpdGVtKSk7XG4gICAgICAgICAgdGhpcy5yZWRvU3RhY2sgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoJ3N0YWNrLWNsZWFyZWQnLCBbeyB1bmRvU3RhY2tDbGVhcmVkOiBjbGVhclVuZG9TdGFjaywgcmVkb1N0YWNrQ2xlYXJlZDogY2xlYXJSZWRvU3RhY2sgfV0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuZG9NYW5hZ2VyIG1lcmdlcyBVbmRvLVN0YWNrSXRlbSBpZiB0aGV5IGFyZSBjcmVhdGVkIHdpdGhpbiB0aW1lLWdhcFxuICAgKiBzbWFsbGVyIHRoYW4gYG9wdGlvbnMuY2FwdHVyZVRpbWVvdXRgLiBDYWxsIGB1bS5zdG9wQ2FwdHVyaW5nKClgIHNvIHRoYXQgdGhlIG5leHRcbiAgICogU3RhY2tJdGVtIHdvbid0IGJlIG1lcmdlZC5cbiAgICpcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICAgIC8vIHdpdGhvdXQgc3RvcENhcHR1cmluZ1xuICAgKiAgICAgeXRleHQuaW5zZXJ0KDAsICdhJylcbiAgICogICAgIHl0ZXh0Lmluc2VydCgxLCAnYicpXG4gICAqICAgICB1bS51bmRvKClcbiAgICogICAgIHl0ZXh0LnRvU3RyaW5nKCkgLy8gPT4gJycgKG5vdGUgdGhhdCAnYWInIHdhcyByZW1vdmVkKVxuICAgKiAgICAgLy8gd2l0aCBzdG9wQ2FwdHVyaW5nXG4gICAqICAgICB5dGV4dC5pbnNlcnQoMCwgJ2EnKVxuICAgKiAgICAgdW0uc3RvcENhcHR1cmluZygpXG4gICAqICAgICB5dGV4dC5pbnNlcnQoMCwgJ2InKVxuICAgKiAgICAgdW0udW5kbygpXG4gICAqICAgICB5dGV4dC50b1N0cmluZygpIC8vID0+ICdhJyAobm90ZSB0aGF0IG9ubHkgJ2InIHdhcyByZW1vdmVkKVxuICAgKlxuICAgKi9cbiAgc3RvcENhcHR1cmluZyAoKSB7XG4gICAgdGhpcy5sYXN0Q2hhbmdlID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbmRvIGxhc3QgY2hhbmdlcyBvbiB0eXBlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdGFja0l0ZW0/fSBSZXR1cm5zIFN0YWNrSXRlbSBpZiBhIGNoYW5nZSB3YXMgYXBwbGllZFxuICAgKi9cbiAgdW5kbyAoKSB7XG4gICAgdGhpcy51bmRvaW5nID0gdHJ1ZTtcbiAgICBsZXQgcmVzO1xuICAgIHRyeSB7XG4gICAgICByZXMgPSBwb3BTdGFja0l0ZW0odGhpcywgdGhpcy51bmRvU3RhY2ssICd1bmRvJyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMudW5kb2luZyA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICAvKipcbiAgICogUmVkbyBsYXN0IHVuZG8gb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdGFja0l0ZW0/fSBSZXR1cm5zIFN0YWNrSXRlbSBpZiBhIGNoYW5nZSB3YXMgYXBwbGllZFxuICAgKi9cbiAgcmVkbyAoKSB7XG4gICAgdGhpcy5yZWRvaW5nID0gdHJ1ZTtcbiAgICBsZXQgcmVzO1xuICAgIHRyeSB7XG4gICAgICByZXMgPSBwb3BTdGFja0l0ZW0odGhpcywgdGhpcy5yZWRvU3RhY2ssICdyZWRvJyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMucmVkb2luZyA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICAvKipcbiAgICogQXJlIHVuZG8gc3RlcHMgYXZhaWxhYmxlP1xuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdW5kbyBpcyBwb3NzaWJsZVxuICAgKi9cbiAgY2FuVW5kbyAoKSB7XG4gICAgcmV0dXJuIHRoaXMudW5kb1N0YWNrLmxlbmd0aCA+IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBBcmUgcmVkbyBzdGVwcyBhdmFpbGFibGU/XG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiByZWRvIGlzIHBvc3NpYmxlXG4gICAqL1xuICBjYW5SZWRvICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWRvU3RhY2subGVuZ3RoID4gMFxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy50cmFja2VkT3JpZ2lucy5kZWxldGUodGhpcyk7XG4gICAgdGhpcy5kb2Mub2ZmKCdhZnRlclRyYW5zYWN0aW9uJywgdGhpcy5hZnRlclRyYW5zYWN0aW9uSGFuZGxlcik7XG4gICAgc3VwZXIuZGVzdHJveSgpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqL1xuZnVuY3Rpb24gKiBsYXp5U3RydWN0UmVhZGVyR2VuZXJhdG9yIChkZWNvZGVyKSB7XG4gIGNvbnN0IG51bU9mU3RhdGVVcGRhdGVzID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZTdGF0ZVVwZGF0ZXM7IGkrKykge1xuICAgIGNvbnN0IG51bWJlck9mU3RydWN0cyA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgIGNvbnN0IGNsaWVudCA9IGRlY29kZXIucmVhZENsaWVudCgpO1xuICAgIGxldCBjbG9jayA9IGRlY29kaW5nLnJlYWRWYXJVaW50KGRlY29kZXIucmVzdERlY29kZXIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZTdHJ1Y3RzOyBpKyspIHtcbiAgICAgIGNvbnN0IGluZm8gPSBkZWNvZGVyLnJlYWRJbmZvKCk7XG4gICAgICAvLyBAdG9kbyB1c2Ugc3dpdGNoIGluc3RlYWQgb2YgaWZzXG4gICAgICBpZiAoaW5mbyA9PT0gMTApIHtcbiAgICAgICAgY29uc3QgbGVuID0gZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2Rlci5yZXN0RGVjb2Rlcik7XG4gICAgICAgIHlpZWxkIG5ldyBTa2lwKGNyZWF0ZUlEKGNsaWVudCwgY2xvY2spLCBsZW4pO1xuICAgICAgICBjbG9jayArPSBsZW47XG4gICAgICB9IGVsc2UgaWYgKChiaW5hcnkuQklUUzUgJiBpbmZvKSAhPT0gMCkge1xuICAgICAgICBjb25zdCBjYW50Q29weVBhcmVudEluZm8gPSAoaW5mbyAmIChiaW5hcnkuQklUNyB8IGJpbmFyeS5CSVQ4KSkgPT09IDA7XG4gICAgICAgIC8vIElmIHBhcmVudCA9IG51bGwgYW5kIG5laXRoZXIgbGVmdCBub3IgcmlnaHQgYXJlIGRlZmluZWQsIHRoZW4gd2Uga25vdyB0aGF0IGBwYXJlbnRgIGlzIGNoaWxkIG9mIGB5YFxuICAgICAgICAvLyBhbmQgd2UgcmVhZCB0aGUgbmV4dCBzdHJpbmcgYXMgcGFyZW50WUtleS5cbiAgICAgICAgLy8gSXQgaW5kaWNhdGVzIGhvdyB3ZSBzdG9yZS9yZXRyaWV2ZSBwYXJlbnQgZnJvbSBgeS5zaGFyZWBcbiAgICAgICAgLy8gQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAgICBjb25zdCBzdHJ1Y3QgPSBuZXcgSXRlbShcbiAgICAgICAgICBjcmVhdGVJRChjbGllbnQsIGNsb2NrKSxcbiAgICAgICAgICBudWxsLCAvLyBsZWZ0XG4gICAgICAgICAgKGluZm8gJiBiaW5hcnkuQklUOCkgPT09IGJpbmFyeS5CSVQ4ID8gZGVjb2Rlci5yZWFkTGVmdElEKCkgOiBudWxsLCAvLyBvcmlnaW5cbiAgICAgICAgICBudWxsLCAvLyByaWdodFxuICAgICAgICAgIChpbmZvICYgYmluYXJ5LkJJVDcpID09PSBiaW5hcnkuQklUNyA/IGRlY29kZXIucmVhZFJpZ2h0SUQoKSA6IG51bGwsIC8vIHJpZ2h0IG9yaWdpblxuICAgICAgICAgIC8vIEB0cy1pZ25vcmUgRm9yY2Ugd3JpdGluZyBhIHN0cmluZyBoZXJlLlxuICAgICAgICAgIGNhbnRDb3B5UGFyZW50SW5mbyA/IChkZWNvZGVyLnJlYWRQYXJlbnRJbmZvKCkgPyBkZWNvZGVyLnJlYWRTdHJpbmcoKSA6IGRlY29kZXIucmVhZExlZnRJRCgpKSA6IG51bGwsIC8vIHBhcmVudFxuICAgICAgICAgIGNhbnRDb3B5UGFyZW50SW5mbyAmJiAoaW5mbyAmIGJpbmFyeS5CSVQ2KSA9PT0gYmluYXJ5LkJJVDYgPyBkZWNvZGVyLnJlYWRTdHJpbmcoKSA6IG51bGwsIC8vIHBhcmVudFN1YlxuICAgICAgICAgIHJlYWRJdGVtQ29udGVudChkZWNvZGVyLCBpbmZvKSAvLyBpdGVtIGNvbnRlbnRcbiAgICAgICAgKTtcbiAgICAgICAgeWllbGQgc3RydWN0O1xuICAgICAgICBjbG9jayArPSBzdHJ1Y3QubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbGVuID0gZGVjb2Rlci5yZWFkTGVuKCk7XG4gICAgICAgIHlpZWxkIG5ldyBHQyhjcmVhdGVJRChjbGllbnQsIGNsb2NrKSwgbGVuKTtcbiAgICAgICAgY2xvY2sgKz0gbGVuO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBMYXp5U3RydWN0UmVhZGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmlsdGVyU2tpcHNcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkZWNvZGVyLCBmaWx0ZXJTa2lwcykge1xuICAgIHRoaXMuZ2VuID0gbGF6eVN0cnVjdFJlYWRlckdlbmVyYXRvcihkZWNvZGVyKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVsbCB8IEl0ZW0gfCBTa2lwIHwgR0N9XG4gICAgICovXG4gICAgdGhpcy5jdXJyID0gbnVsbDtcbiAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICB0aGlzLmZpbHRlclNraXBzID0gZmlsdGVyU2tpcHM7XG4gICAgdGhpcy5uZXh0KCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7SXRlbSB8IEdDIHwgU2tpcCB8bnVsbH1cbiAgICovXG4gIG5leHQgKCkge1xuICAgIC8vIGlnbm9yZSBcIlNraXBcIiBzdHJ1Y3RzXG4gICAgZG8ge1xuICAgICAgdGhpcy5jdXJyID0gdGhpcy5nZW4ubmV4dCgpLnZhbHVlIHx8IG51bGw7XG4gICAgfSB3aGlsZSAodGhpcy5maWx0ZXJTa2lwcyAmJiB0aGlzLmN1cnIgIT09IG51bGwgJiYgdGhpcy5jdXJyLmNvbnN0cnVjdG9yID09PSBTa2lwKVxuICAgIHJldHVybiB0aGlzLmN1cnJcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKlxuICovXG5jb25zdCBsb2dVcGRhdGUgPSB1cGRhdGUgPT4gbG9nVXBkYXRlVjIodXBkYXRlLCBVcGRhdGVEZWNvZGVyVjEpO1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVEZWNvZGVyVjIgfCB0eXBlb2YgVXBkYXRlRGVjb2RlclYxfSBbWURlY29kZXJdXG4gKlxuICovXG5jb25zdCBsb2dVcGRhdGVWMiA9ICh1cGRhdGUsIFlEZWNvZGVyID0gVXBkYXRlRGVjb2RlclYyKSA9PiB7XG4gIGNvbnN0IHN0cnVjdHMgPSBbXTtcbiAgY29uc3QgdXBkYXRlRGVjb2RlciA9IG5ldyBZRGVjb2RlcihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVwZGF0ZSkpO1xuICBjb25zdCBsYXp5RGVjb2RlciA9IG5ldyBMYXp5U3RydWN0UmVhZGVyKHVwZGF0ZURlY29kZXIsIGZhbHNlKTtcbiAgZm9yIChsZXQgY3VyciA9IGxhenlEZWNvZGVyLmN1cnI7IGN1cnIgIT09IG51bGw7IGN1cnIgPSBsYXp5RGVjb2Rlci5uZXh0KCkpIHtcbiAgICBzdHJ1Y3RzLnB1c2goY3Vycik7XG4gIH1cbiAgbG9nZ2luZy5wcmludCgnU3RydWN0czogJywgc3RydWN0cyk7XG4gIGNvbnN0IGRzID0gcmVhZERlbGV0ZVNldCh1cGRhdGVEZWNvZGVyKTtcbiAgbG9nZ2luZy5wcmludCgnRGVsZXRlU2V0OiAnLCBkcyk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKlxuICovXG5jb25zdCBkZWNvZGVVcGRhdGUgPSAodXBkYXRlKSA9PiBkZWNvZGVVcGRhdGVWMih1cGRhdGUsIFVwZGF0ZURlY29kZXJWMSk7XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMiB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjF9IFtZRGVjb2Rlcl1cbiAqXG4gKi9cbmNvbnN0IGRlY29kZVVwZGF0ZVYyID0gKHVwZGF0ZSwgWURlY29kZXIgPSBVcGRhdGVEZWNvZGVyVjIpID0+IHtcbiAgY29uc3Qgc3RydWN0cyA9IFtdO1xuICBjb25zdCB1cGRhdGVEZWNvZGVyID0gbmV3IFlEZWNvZGVyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIodXBkYXRlKSk7XG4gIGNvbnN0IGxhenlEZWNvZGVyID0gbmV3IExhenlTdHJ1Y3RSZWFkZXIodXBkYXRlRGVjb2RlciwgZmFsc2UpO1xuICBmb3IgKGxldCBjdXJyID0gbGF6eURlY29kZXIuY3VycjsgY3VyciAhPT0gbnVsbDsgY3VyciA9IGxhenlEZWNvZGVyLm5leHQoKSkge1xuICAgIHN0cnVjdHMucHVzaChjdXJyKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0cnVjdHMsXG4gICAgZHM6IHJlYWREZWxldGVTZXQodXBkYXRlRGVjb2RlcilcbiAgfVxufTtcblxuY2xhc3MgTGF6eVN0cnVjdFdyaXRlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGVuY29kZXIpIHtcbiAgICB0aGlzLmN1cnJDbGllbnQgPSAwO1xuICAgIHRoaXMuc3RhcnRDbG9jayA9IDA7XG4gICAgdGhpcy53cml0dGVuID0gMDtcbiAgICB0aGlzLmVuY29kZXIgPSBlbmNvZGVyO1xuICAgIC8qKlxuICAgICAqIFdlIHdhbnQgdG8gd3JpdGUgb3BlcmF0aW9ucyBsYXppbHksIGJ1dCBhbHNvIHdlIG5lZWQgdG8ga25vdyBiZWZvcmVoYW5kIGhvdyBtYW55IG9wZXJhdGlvbnMgd2Ugd2FudCB0byB3cml0ZSBmb3IgZWFjaCBjbGllbnQuXG4gICAgICpcbiAgICAgKiBUaGlzIGtpbmQgb2YgbWV0YS1pbmZvcm1hdGlvbiAoI2NsaWVudHMsICNzdHJ1Y3RzLXBlci1jbGllbnQtd3JpdHRlbikgaXMgd3JpdHRlbiB0byB0aGUgcmVzdEVuY29kZXIuXG4gICAgICpcbiAgICAgKiBXZSBmcmFnbWVudCB0aGUgcmVzdEVuY29kZXIgYW5kIHN0b3JlIGEgc2xpY2Ugb2YgaXQgcGVyLWNsaWVudCB1bnRpbCB3ZSBrbm93IGhvdyBtYW55IGNsaWVudHMgdGhlcmUgYXJlLlxuICAgICAqIFdoZW4gd2UgZmx1c2ggKHRvVWludDhBcnJheSkgd2Ugd3JpdGUgdGhlIHJlc3RFbmNvZGVyIHVzaW5nIHRoZSBmcmFnbWVudHMgYW5kIHRoZSBtZXRhLWluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5PHsgd3JpdHRlbjogbnVtYmVyLCByZXN0RW5jb2RlcjogVWludDhBcnJheSB9Pn1cbiAgICAgKi9cbiAgICB0aGlzLmNsaWVudFN0cnVjdHMgPSBbXTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8VWludDhBcnJheT59IHVwZGF0ZXNcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmNvbnN0IG1lcmdlVXBkYXRlcyA9IHVwZGF0ZXMgPT4gbWVyZ2VVcGRhdGVzVjIodXBkYXRlcywgVXBkYXRlRGVjb2RlclYxLCBVcGRhdGVFbmNvZGVyVjEpO1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcGFyYW0ge3R5cGVvZiBEU0VuY29kZXJWMSB8IHR5cGVvZiBEU0VuY29kZXJWMn0gWUVuY29kZXJcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjJ9IFlEZWNvZGVyXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5jb25zdCBlbmNvZGVTdGF0ZVZlY3RvckZyb21VcGRhdGVWMiA9ICh1cGRhdGUsIFlFbmNvZGVyID0gRFNFbmNvZGVyVjIsIFlEZWNvZGVyID0gVXBkYXRlRGVjb2RlclYyKSA9PiB7XG4gIGNvbnN0IGVuY29kZXIgPSBuZXcgWUVuY29kZXIoKTtcbiAgY29uc3QgdXBkYXRlRGVjb2RlciA9IG5ldyBMYXp5U3RydWN0UmVhZGVyKG5ldyBZRGVjb2RlcihkZWNvZGluZy5jcmVhdGVEZWNvZGVyKHVwZGF0ZSkpLCBmYWxzZSk7XG4gIGxldCBjdXJyID0gdXBkYXRlRGVjb2Rlci5jdXJyO1xuICBpZiAoY3VyciAhPT0gbnVsbCkge1xuICAgIGxldCBzaXplID0gMDtcbiAgICBsZXQgY3VyckNsaWVudCA9IGN1cnIuaWQuY2xpZW50O1xuICAgIGxldCBzdG9wQ291bnRpbmcgPSBjdXJyLmlkLmNsb2NrICE9PSAwOyAvLyBtdXN0IHN0YXJ0IGF0IDBcbiAgICBsZXQgY3VyckNsb2NrID0gc3RvcENvdW50aW5nID8gMCA6IGN1cnIuaWQuY2xvY2sgKyBjdXJyLmxlbmd0aDtcbiAgICBmb3IgKDsgY3VyciAhPT0gbnVsbDsgY3VyciA9IHVwZGF0ZURlY29kZXIubmV4dCgpKSB7XG4gICAgICBpZiAoY3VyckNsaWVudCAhPT0gY3Vyci5pZC5jbGllbnQpIHtcbiAgICAgICAgaWYgKGN1cnJDbG9jayAhPT0gMCkge1xuICAgICAgICAgIHNpemUrKztcbiAgICAgICAgICAvLyBXZSBmb3VuZCBhIG5ldyBjbGllbnRcbiAgICAgICAgICAvLyB3cml0ZSB3aGF0IHdlIGhhdmUgdG8gdGhlIGVuY29kZXJcbiAgICAgICAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgY3VyckNsaWVudCk7XG4gICAgICAgICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIGN1cnJDbG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgY3VyckNsaWVudCA9IGN1cnIuaWQuY2xpZW50O1xuICAgICAgICBjdXJyQ2xvY2sgPSAwO1xuICAgICAgICBzdG9wQ291bnRpbmcgPSBjdXJyLmlkLmNsb2NrICE9PSAwO1xuICAgICAgfVxuICAgICAgLy8gd2UgaWdub3JlIHNraXBzXG4gICAgICBpZiAoY3Vyci5jb25zdHJ1Y3RvciA9PT0gU2tpcCkge1xuICAgICAgICBzdG9wQ291bnRpbmcgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFzdG9wQ291bnRpbmcpIHtcbiAgICAgICAgY3VyckNsb2NrID0gY3Vyci5pZC5jbG9jayArIGN1cnIubGVuZ3RoO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB3cml0ZSB3aGF0IHdlIGhhdmVcbiAgICBpZiAoY3VyckNsb2NrICE9PSAwKSB7XG4gICAgICBzaXplKys7XG4gICAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgY3VyckNsaWVudCk7XG4gICAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgY3VyckNsb2NrKTtcbiAgICB9XG4gICAgLy8gcHJlcGVuZCB0aGUgc2l6ZSBvZiB0aGUgc3RhdGUgdmVjdG9yXG4gICAgY29uc3QgZW5jID0gZW5jb2RpbmcuY3JlYXRlRW5jb2RlcigpO1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChlbmMsIHNpemUpO1xuICAgIGVuY29kaW5nLndyaXRlQmluYXJ5RW5jb2RlcihlbmMsIGVuY29kZXIucmVzdEVuY29kZXIpO1xuICAgIGVuY29kZXIucmVzdEVuY29kZXIgPSBlbmM7XG4gICAgcmV0dXJuIGVuY29kZXIudG9VaW50OEFycmF5KClcbiAgfSBlbHNlIHtcbiAgICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2Rlci5yZXN0RW5jb2RlciwgMCk7XG4gICAgcmV0dXJuIGVuY29kZXIudG9VaW50OEFycmF5KClcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVwZGF0ZVxuICogQHJldHVybiB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgZW5jb2RlU3RhdGVWZWN0b3JGcm9tVXBkYXRlID0gdXBkYXRlID0+IGVuY29kZVN0YXRlVmVjdG9yRnJvbVVwZGF0ZVYyKHVwZGF0ZSwgRFNFbmNvZGVyVjEsIFVwZGF0ZURlY29kZXJWMSk7XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjJ9IFlEZWNvZGVyXG4gKiBAcmV0dXJuIHt7IGZyb206IE1hcDxudW1iZXIsbnVtYmVyPiwgdG86IE1hcDxudW1iZXIsbnVtYmVyPiB9fVxuICovXG5jb25zdCBwYXJzZVVwZGF0ZU1ldGFWMiA9ICh1cGRhdGUsIFlEZWNvZGVyID0gVXBkYXRlRGVjb2RlclYyKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7TWFwPG51bWJlciwgbnVtYmVyPn1cbiAgICovXG4gIGNvbnN0IGZyb20gPSBuZXcgTWFwKCk7XG4gIC8qKlxuICAgKiBAdHlwZSB7TWFwPG51bWJlciwgbnVtYmVyPn1cbiAgICovXG4gIGNvbnN0IHRvID0gbmV3IE1hcCgpO1xuICBjb25zdCB1cGRhdGVEZWNvZGVyID0gbmV3IExhenlTdHJ1Y3RSZWFkZXIobmV3IFlEZWNvZGVyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIodXBkYXRlKSksIGZhbHNlKTtcbiAgbGV0IGN1cnIgPSB1cGRhdGVEZWNvZGVyLmN1cnI7XG4gIGlmIChjdXJyICE9PSBudWxsKSB7XG4gICAgbGV0IGN1cnJDbGllbnQgPSBjdXJyLmlkLmNsaWVudDtcbiAgICBsZXQgY3VyckNsb2NrID0gY3Vyci5pZC5jbG9jaztcbiAgICAvLyB3cml0ZSB0aGUgYmVnaW5uaW5nIHRvIGBmcm9tYFxuICAgIGZyb20uc2V0KGN1cnJDbGllbnQsIGN1cnJDbG9jayk7XG4gICAgZm9yICg7IGN1cnIgIT09IG51bGw7IGN1cnIgPSB1cGRhdGVEZWNvZGVyLm5leHQoKSkge1xuICAgICAgaWYgKGN1cnJDbGllbnQgIT09IGN1cnIuaWQuY2xpZW50KSB7XG4gICAgICAgIC8vIFdlIGZvdW5kIGEgbmV3IGNsaWVudFxuICAgICAgICAvLyB3cml0ZSB0aGUgZW5kIHRvIGB0b2BcbiAgICAgICAgdG8uc2V0KGN1cnJDbGllbnQsIGN1cnJDbG9jayk7XG4gICAgICAgIC8vIHdyaXRlIHRoZSBiZWdpbm5pbmcgdG8gYGZyb21gXG4gICAgICAgIGZyb20uc2V0KGN1cnIuaWQuY2xpZW50LCBjdXJyLmlkLmNsb2NrKTtcbiAgICAgICAgLy8gdXBkYXRlIGN1cnJDbGllbnRcbiAgICAgICAgY3VyckNsaWVudCA9IGN1cnIuaWQuY2xpZW50O1xuICAgICAgfVxuICAgICAgY3VyckNsb2NrID0gY3Vyci5pZC5jbG9jayArIGN1cnIubGVuZ3RoO1xuICAgIH1cbiAgICAvLyB3cml0ZSB0aGUgZW5kIHRvIGB0b2BcbiAgICB0by5zZXQoY3VyckNsaWVudCwgY3VyckNsb2NrKTtcbiAgfVxuICByZXR1cm4geyBmcm9tLCB0byB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKiBAcmV0dXJuIHt7IGZyb206IE1hcDxudW1iZXIsbnVtYmVyPiwgdG86IE1hcDxudW1iZXIsbnVtYmVyPiB9fVxuICovXG5jb25zdCBwYXJzZVVwZGF0ZU1ldGEgPSB1cGRhdGUgPT4gcGFyc2VVcGRhdGVNZXRhVjIodXBkYXRlLCBVcGRhdGVEZWNvZGVyVjEpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIHRvIHNsaWNlIGFueSBraW5kIG9mIHN0cnVjdCBhbmQgcmV0cmlldmUgdGhlIHJpZ2h0IHBhcnQuXG4gKiBJdCBkb2VzIG5vdCBoYW5kbGUgc2lkZS1lZmZlY3RzLCBzbyBpdCBzaG91bGQgb25seSBiZSB1c2VkIGJ5IHRoZSBsYXp5LWVuY29kZXIuXG4gKlxuICogQHBhcmFtIHtJdGVtIHwgR0MgfCBTa2lwfSBsZWZ0XG4gKiBAcGFyYW0ge251bWJlcn0gZGlmZlxuICogQHJldHVybiB7SXRlbSB8IEdDfVxuICovXG5jb25zdCBzbGljZVN0cnVjdCA9IChsZWZ0LCBkaWZmKSA9PiB7XG4gIGlmIChsZWZ0LmNvbnN0cnVjdG9yID09PSBHQykge1xuICAgIGNvbnN0IHsgY2xpZW50LCBjbG9jayB9ID0gbGVmdC5pZDtcbiAgICByZXR1cm4gbmV3IEdDKGNyZWF0ZUlEKGNsaWVudCwgY2xvY2sgKyBkaWZmKSwgbGVmdC5sZW5ndGggLSBkaWZmKVxuICB9IGVsc2UgaWYgKGxlZnQuY29uc3RydWN0b3IgPT09IFNraXApIHtcbiAgICBjb25zdCB7IGNsaWVudCwgY2xvY2sgfSA9IGxlZnQuaWQ7XG4gICAgcmV0dXJuIG5ldyBTa2lwKGNyZWF0ZUlEKGNsaWVudCwgY2xvY2sgKyBkaWZmKSwgbGVmdC5sZW5ndGggLSBkaWZmKVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGxlZnRJdGVtID0gLyoqIEB0eXBlIHtJdGVtfSAqLyAobGVmdCk7XG4gICAgY29uc3QgeyBjbGllbnQsIGNsb2NrIH0gPSBsZWZ0SXRlbS5pZDtcbiAgICByZXR1cm4gbmV3IEl0ZW0oXG4gICAgICBjcmVhdGVJRChjbGllbnQsIGNsb2NrICsgZGlmZiksXG4gICAgICBudWxsLFxuICAgICAgY3JlYXRlSUQoY2xpZW50LCBjbG9jayArIGRpZmYgLSAxKSxcbiAgICAgIG51bGwsXG4gICAgICBsZWZ0SXRlbS5yaWdodE9yaWdpbixcbiAgICAgIGxlZnRJdGVtLnBhcmVudCxcbiAgICAgIGxlZnRJdGVtLnBhcmVudFN1YixcbiAgICAgIGxlZnRJdGVtLmNvbnRlbnQuc3BsaWNlKGRpZmYpXG4gICAgKVxuICB9XG59O1xuXG4vKipcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdvcmtzIHNpbWlsYXJseSB0byBgcmVhZFVwZGF0ZVYyYC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PFVpbnQ4QXJyYXk+fSB1cGRhdGVzXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVEZWNvZGVyVjEgfCB0eXBlb2YgVXBkYXRlRGVjb2RlclYyfSBbWURlY29kZXJdXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVFbmNvZGVyVjEgfCB0eXBlb2YgVXBkYXRlRW5jb2RlclYyfSBbWUVuY29kZXJdXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICovXG5jb25zdCBtZXJnZVVwZGF0ZXNWMiA9ICh1cGRhdGVzLCBZRGVjb2RlciA9IFVwZGF0ZURlY29kZXJWMiwgWUVuY29kZXIgPSBVcGRhdGVFbmNvZGVyVjIpID0+IHtcbiAgaWYgKHVwZGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHVwZGF0ZXNbMF1cbiAgfVxuICBjb25zdCB1cGRhdGVEZWNvZGVycyA9IHVwZGF0ZXMubWFwKHVwZGF0ZSA9PiBuZXcgWURlY29kZXIoZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1cGRhdGUpKSk7XG4gIGxldCBsYXp5U3RydWN0RGVjb2RlcnMgPSB1cGRhdGVEZWNvZGVycy5tYXAoZGVjb2RlciA9PiBuZXcgTGF6eVN0cnVjdFJlYWRlcihkZWNvZGVyLCB0cnVlKSk7XG5cbiAgLyoqXG4gICAqIEB0b2RvIHdlIGRvbid0IG5lZWQgb2Zmc2V0IGJlY2F1c2Ugd2UgYWx3YXlzIHNsaWNlIGJlZm9yZVxuICAgKiBAdHlwZSB7bnVsbCB8IHsgc3RydWN0OiBJdGVtIHwgR0MgfCBTa2lwLCBvZmZzZXQ6IG51bWJlciB9fVxuICAgKi9cbiAgbGV0IGN1cnJXcml0ZSA9IG51bGw7XG5cbiAgY29uc3QgdXBkYXRlRW5jb2RlciA9IG5ldyBZRW5jb2RlcigpO1xuICAvLyB3cml0ZSBzdHJ1Y3RzIGxhemlseVxuICBjb25zdCBsYXp5U3RydWN0RW5jb2RlciA9IG5ldyBMYXp5U3RydWN0V3JpdGVyKHVwZGF0ZUVuY29kZXIpO1xuXG4gIC8vIE5vdGU6IFdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgYWxsIGxhenlTdHJ1Y3REZWNvZGVycyBhcmUgZnVsbHkgY29uc3VtZWRcbiAgLy8gTm90ZTogU2hvdWxkIG1lcmdlIGRvY3VtZW50IHVwZGF0ZXMgd2hlbmV2ZXIgcG9zc2libGUgLSBldmVuIGZyb20gZGlmZmVyZW50IHVwZGF0ZXNcbiAgLy8gTm90ZTogU2hvdWxkIGhhbmRsZSB0aGF0IHNvbWUgb3BlcmF0aW9ucyBjYW5ub3QgYmUgYXBwbGllZCB5ZXQgKClcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIC8vIFdyaXRlIGhpZ2hlciBjbGllbnRzIGZpcnN0IOKHkiBzb3J0IGJ5IGNsaWVudElEICYgY2xvY2sgYW5kIHJlbW92ZSBkZWNvZGVycyB3aXRob3V0IGNvbnRlbnRcbiAgICBsYXp5U3RydWN0RGVjb2RlcnMgPSBsYXp5U3RydWN0RGVjb2RlcnMuZmlsdGVyKGRlYyA9PiBkZWMuY3VyciAhPT0gbnVsbCk7XG4gICAgbGF6eVN0cnVjdERlY29kZXJzLnNvcnQoXG4gICAgICAvKiogQHR5cGUge2Z1bmN0aW9uKGFueSxhbnkpOm51bWJlcn0gKi8gKGRlYzEsIGRlYzIpID0+IHtcbiAgICAgICAgaWYgKGRlYzEuY3Vyci5pZC5jbGllbnQgPT09IGRlYzIuY3Vyci5pZC5jbGllbnQpIHtcbiAgICAgICAgICBjb25zdCBjbG9ja0RpZmYgPSBkZWMxLmN1cnIuaWQuY2xvY2sgLSBkZWMyLmN1cnIuaWQuY2xvY2s7XG4gICAgICAgICAgaWYgKGNsb2NrRGlmZiA9PT0gMCkge1xuICAgICAgICAgICAgLy8gQHRvZG8gcmVtb3ZlIHJlZmVyZW5jZXMgdG8gc2tpcCBzaW5jZSB0aGUgc3RydWN0RGVjb2RlcnMgbXVzdCBmaWx0ZXIgU2tpcHMuXG4gICAgICAgICAgICByZXR1cm4gZGVjMS5jdXJyLmNvbnN0cnVjdG9yID09PSBkZWMyLmN1cnIuY29uc3RydWN0b3JcbiAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgIDogZGVjMS5jdXJyLmNvbnN0cnVjdG9yID09PSBTa2lwID8gMSA6IC0xIC8vIHdlIGFyZSBmaWx0ZXJpbmcgc2tpcHMgYW55d2F5LlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY2xvY2tEaWZmXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBkZWMyLmN1cnIuaWQuY2xpZW50IC0gZGVjMS5jdXJyLmlkLmNsaWVudFxuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgICBpZiAobGF6eVN0cnVjdERlY29kZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAgY29uc3QgY3VyckRlY29kZXIgPSBsYXp5U3RydWN0RGVjb2RlcnNbMF07XG4gICAgLy8gd3JpdGUgZnJvbSBjdXJyRGVjb2RlciB1bnRpbCB0aGUgbmV4dCBvcGVyYXRpb24gaXMgZnJvbSBhbm90aGVyIGNsaWVudCBvciBpZiBmaWxsZXItc3RydWN0XG4gICAgLy8gdGhlbiB3ZSBuZWVkIHRvIHJlb3JkZXIgdGhlIGRlY29kZXJzIGFuZCBmaW5kIHRoZSBuZXh0IG9wZXJhdGlvbiB0byB3cml0ZVxuICAgIGNvbnN0IGZpcnN0Q2xpZW50ID0gLyoqIEB0eXBlIHtJdGVtIHwgR0N9ICovIChjdXJyRGVjb2Rlci5jdXJyKS5pZC5jbGllbnQ7XG5cbiAgICBpZiAoY3VycldyaXRlICE9PSBudWxsKSB7XG4gICAgICBsZXQgY3VyciA9IC8qKiBAdHlwZSB7SXRlbSB8IEdDIHwgbnVsbH0gKi8gKGN1cnJEZWNvZGVyLmN1cnIpO1xuICAgICAgbGV0IGl0ZXJhdGVkID0gZmFsc2U7XG5cbiAgICAgIC8vIGl0ZXJhdGUgdW50aWwgd2UgZmluZCBzb21ldGhpbmcgdGhhdCB3ZSBoYXZlbid0IHdyaXR0ZW4gYWxyZWFkeVxuICAgICAgLy8gcmVtZW1iZXI6IGZpcnN0IHRoZSBoaWdoIGNsaWVudC1pZHMgYXJlIHdyaXR0ZW5cbiAgICAgIHdoaWxlIChjdXJyICE9PSBudWxsICYmIGN1cnIuaWQuY2xvY2sgKyBjdXJyLmxlbmd0aCA8PSBjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrICsgY3VycldyaXRlLnN0cnVjdC5sZW5ndGggJiYgY3Vyci5pZC5jbGllbnQgPj0gY3VycldyaXRlLnN0cnVjdC5pZC5jbGllbnQpIHtcbiAgICAgICAgY3VyciA9IGN1cnJEZWNvZGVyLm5leHQoKTtcbiAgICAgICAgaXRlcmF0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBjdXJyID09PSBudWxsIHx8IC8vIGN1cnJlbnQgZGVjb2RlciBpcyBlbXB0eVxuICAgICAgICBjdXJyLmlkLmNsaWVudCAhPT0gZmlyc3RDbGllbnQgfHwgLy8gY2hlY2sgd2hldGhlciB0aGVyZSBpcyBhbm90aGVyIGRlY29kZXIgdGhhdCBoYXMgaGFzIHVwZGF0ZXMgZnJvbSBgZmlyc3RDbGllbnRgXG4gICAgICAgIChpdGVyYXRlZCAmJiBjdXJyLmlkLmNsb2NrID4gY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayArIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoKSAvLyB0aGUgYWJvdmUgd2hpbGUgbG9vcCB3YXMgdXNlZCBhbmQgd2UgYXJlIHBvdGVudGlhbGx5IG1pc3NpbmcgdXBkYXRlc1xuICAgICAgKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChmaXJzdENsaWVudCAhPT0gY3VycldyaXRlLnN0cnVjdC5pZC5jbGllbnQpIHtcbiAgICAgICAgd3JpdGVTdHJ1Y3RUb0xhenlTdHJ1Y3RXcml0ZXIobGF6eVN0cnVjdEVuY29kZXIsIGN1cnJXcml0ZS5zdHJ1Y3QsIGN1cnJXcml0ZS5vZmZzZXQpO1xuICAgICAgICBjdXJyV3JpdGUgPSB7IHN0cnVjdDogY3Vyciwgb2Zmc2V0OiAwIH07XG4gICAgICAgIGN1cnJEZWNvZGVyLm5leHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjdXJyV3JpdGUuc3RydWN0LmlkLmNsb2NrICsgY3VycldyaXRlLnN0cnVjdC5sZW5ndGggPCBjdXJyLmlkLmNsb2NrKSB7XG4gICAgICAgICAgLy8gQHRvZG8gd3JpdGUgY3VyclN0cnVjdCAmIHNldCBjdXJyU3RydWN0ID0gU2tpcChjbG9jayA9IGN1cnJTdHJ1Y3QuaWQuY2xvY2sgKyBjdXJyU3RydWN0Lmxlbmd0aCwgbGVuZ3RoID0gY3Vyci5pZC5jbG9jayAtIHNlbGYuY2xvY2spXG4gICAgICAgICAgaWYgKGN1cnJXcml0ZS5zdHJ1Y3QuY29uc3RydWN0b3IgPT09IFNraXApIHtcbiAgICAgICAgICAgIC8vIGV4dGVuZCBleGlzdGluZyBza2lwXG4gICAgICAgICAgICBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aCA9IGN1cnIuaWQuY2xvY2sgKyBjdXJyLmxlbmd0aCAtIGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xvY2s7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyKGxhenlTdHJ1Y3RFbmNvZGVyLCBjdXJyV3JpdGUuc3RydWN0LCBjdXJyV3JpdGUub2Zmc2V0KTtcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBjdXJyLmlkLmNsb2NrIC0gY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayAtIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAdHlwZSB7U2tpcH1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3Qgc3RydWN0ID0gbmV3IFNraXAoY3JlYXRlSUQoZmlyc3RDbGllbnQsIGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xvY2sgKyBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aCksIGRpZmYpO1xuICAgICAgICAgICAgY3VycldyaXRlID0geyBzdHJ1Y3QsIG9mZnNldDogMCB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gaWYgKGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xvY2sgKyBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aCA+PSBjdXJyLmlkLmNsb2NrKSB7XG4gICAgICAgICAgY29uc3QgZGlmZiA9IGN1cnJXcml0ZS5zdHJ1Y3QuaWQuY2xvY2sgKyBjdXJyV3JpdGUuc3RydWN0Lmxlbmd0aCAtIGN1cnIuaWQuY2xvY2s7XG4gICAgICAgICAgaWYgKGRpZmYgPiAwKSB7XG4gICAgICAgICAgICBpZiAoY3VycldyaXRlLnN0cnVjdC5jb25zdHJ1Y3RvciA9PT0gU2tpcCkge1xuICAgICAgICAgICAgICAvLyBwcmVmZXIgdG8gc2xpY2UgU2tpcCBiZWNhdXNlIHRoZSBvdGhlciBzdHJ1Y3QgbWlnaHQgY29udGFpbiBtb3JlIGluZm9ybWF0aW9uXG4gICAgICAgICAgICAgIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoIC09IGRpZmY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdXJyID0gc2xpY2VTdHJ1Y3QoY3VyciwgZGlmZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghY3VycldyaXRlLnN0cnVjdC5tZXJnZVdpdGgoLyoqIEB0eXBlIHthbnl9ICovIChjdXJyKSkpIHtcbiAgICAgICAgICAgIHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyKGxhenlTdHJ1Y3RFbmNvZGVyLCBjdXJyV3JpdGUuc3RydWN0LCBjdXJyV3JpdGUub2Zmc2V0KTtcbiAgICAgICAgICAgIGN1cnJXcml0ZSA9IHsgc3RydWN0OiBjdXJyLCBvZmZzZXQ6IDAgfTtcbiAgICAgICAgICAgIGN1cnJEZWNvZGVyLm5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3VycldyaXRlID0geyBzdHJ1Y3Q6IC8qKiBAdHlwZSB7SXRlbSB8IEdDfSAqLyAoY3VyckRlY29kZXIuY3VyciksIG9mZnNldDogMCB9O1xuICAgICAgY3VyckRlY29kZXIubmV4dCgpO1xuICAgIH1cbiAgICBmb3IgKFxuICAgICAgbGV0IG5leHQgPSBjdXJyRGVjb2Rlci5jdXJyO1xuICAgICAgbmV4dCAhPT0gbnVsbCAmJiBuZXh0LmlkLmNsaWVudCA9PT0gZmlyc3RDbGllbnQgJiYgbmV4dC5pZC5jbG9jayA9PT0gY3VycldyaXRlLnN0cnVjdC5pZC5jbG9jayArIGN1cnJXcml0ZS5zdHJ1Y3QubGVuZ3RoICYmIG5leHQuY29uc3RydWN0b3IgIT09IFNraXA7XG4gICAgICBuZXh0ID0gY3VyckRlY29kZXIubmV4dCgpXG4gICAgKSB7XG4gICAgICB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlcihsYXp5U3RydWN0RW5jb2RlciwgY3VycldyaXRlLnN0cnVjdCwgY3VycldyaXRlLm9mZnNldCk7XG4gICAgICBjdXJyV3JpdGUgPSB7IHN0cnVjdDogbmV4dCwgb2Zmc2V0OiAwIH07XG4gICAgfVxuICB9XG4gIGlmIChjdXJyV3JpdGUgIT09IG51bGwpIHtcbiAgICB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlcihsYXp5U3RydWN0RW5jb2RlciwgY3VycldyaXRlLnN0cnVjdCwgY3VycldyaXRlLm9mZnNldCk7XG4gICAgY3VycldyaXRlID0gbnVsbDtcbiAgfVxuICBmaW5pc2hMYXp5U3RydWN0V3JpdGluZyhsYXp5U3RydWN0RW5jb2Rlcik7XG5cbiAgY29uc3QgZHNzID0gdXBkYXRlRGVjb2RlcnMubWFwKGRlY29kZXIgPT4gcmVhZERlbGV0ZVNldChkZWNvZGVyKSk7XG4gIGNvbnN0IGRzID0gbWVyZ2VEZWxldGVTZXRzKGRzcyk7XG4gIHdyaXRlRGVsZXRlU2V0KHVwZGF0ZUVuY29kZXIsIGRzKTtcbiAgcmV0dXJuIHVwZGF0ZUVuY29kZXIudG9VaW50OEFycmF5KClcbn07XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gc3ZcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjJ9IFtZRGVjb2Rlcl1cbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZUVuY29kZXJWMSB8IHR5cGVvZiBVcGRhdGVFbmNvZGVyVjJ9IFtZRW5jb2Rlcl1cbiAqL1xuY29uc3QgZGlmZlVwZGF0ZVYyID0gKHVwZGF0ZSwgc3YsIFlEZWNvZGVyID0gVXBkYXRlRGVjb2RlclYyLCBZRW5jb2RlciA9IFVwZGF0ZUVuY29kZXJWMikgPT4ge1xuICBjb25zdCBzdGF0ZSA9IGRlY29kZVN0YXRlVmVjdG9yKHN2KTtcbiAgY29uc3QgZW5jb2RlciA9IG5ldyBZRW5jb2RlcigpO1xuICBjb25zdCBsYXp5U3RydWN0V3JpdGVyID0gbmV3IExhenlTdHJ1Y3RXcml0ZXIoZW5jb2Rlcik7XG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgWURlY29kZXIoZGVjb2RpbmcuY3JlYXRlRGVjb2Rlcih1cGRhdGUpKTtcbiAgY29uc3QgcmVhZGVyID0gbmV3IExhenlTdHJ1Y3RSZWFkZXIoZGVjb2RlciwgZmFsc2UpO1xuICB3aGlsZSAocmVhZGVyLmN1cnIpIHtcbiAgICBjb25zdCBjdXJyID0gcmVhZGVyLmN1cnI7XG4gICAgY29uc3QgY3VyckNsaWVudCA9IGN1cnIuaWQuY2xpZW50O1xuICAgIGNvbnN0IHN2Q2xvY2sgPSBzdGF0ZS5nZXQoY3VyckNsaWVudCkgfHwgMDtcbiAgICBpZiAocmVhZGVyLmN1cnIuY29uc3RydWN0b3IgPT09IFNraXApIHtcbiAgICAgIC8vIHRoZSBmaXJzdCB3cml0dGVuIHN0cnVjdCBzaG91bGRuJ3QgYmUgYSBza2lwXG4gICAgICByZWFkZXIubmV4dCgpO1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKGN1cnIuaWQuY2xvY2sgKyBjdXJyLmxlbmd0aCA+IHN2Q2xvY2spIHtcbiAgICAgIHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyKGxhenlTdHJ1Y3RXcml0ZXIsIGN1cnIsIG1hdGgubWF4KHN2Q2xvY2sgLSBjdXJyLmlkLmNsb2NrLCAwKSk7XG4gICAgICByZWFkZXIubmV4dCgpO1xuICAgICAgd2hpbGUgKHJlYWRlci5jdXJyICYmIHJlYWRlci5jdXJyLmlkLmNsaWVudCA9PT0gY3VyckNsaWVudCkge1xuICAgICAgICB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlcihsYXp5U3RydWN0V3JpdGVyLCByZWFkZXIuY3VyciwgMCk7XG4gICAgICAgIHJlYWRlci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJlYWQgdW50aWwgc29tZXRoaW5nIG5ldyBjb21lcyB1cFxuICAgICAgd2hpbGUgKHJlYWRlci5jdXJyICYmIHJlYWRlci5jdXJyLmlkLmNsaWVudCA9PT0gY3VyckNsaWVudCAmJiByZWFkZXIuY3Vyci5pZC5jbG9jayArIHJlYWRlci5jdXJyLmxlbmd0aCA8PSBzdkNsb2NrKSB7XG4gICAgICAgIHJlYWRlci5uZXh0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZpbmlzaExhenlTdHJ1Y3RXcml0aW5nKGxhenlTdHJ1Y3RXcml0ZXIpO1xuICAvLyB3cml0ZSBkc1xuICBjb25zdCBkcyA9IHJlYWREZWxldGVTZXQoZGVjb2Rlcik7XG4gIHdyaXRlRGVsZXRlU2V0KGVuY29kZXIsIGRzKTtcbiAgcmV0dXJuIGVuY29kZXIudG9VaW50OEFycmF5KClcbn07XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gc3ZcbiAqL1xuY29uc3QgZGlmZlVwZGF0ZSA9ICh1cGRhdGUsIHN2KSA9PiBkaWZmVXBkYXRlVjIodXBkYXRlLCBzdiwgVXBkYXRlRGVjb2RlclYxLCBVcGRhdGVFbmNvZGVyVjEpO1xuXG4vKipcbiAqIEBwYXJhbSB7TGF6eVN0cnVjdFdyaXRlcn0gbGF6eVdyaXRlclxuICovXG5jb25zdCBmbHVzaExhenlTdHJ1Y3RXcml0ZXIgPSBsYXp5V3JpdGVyID0+IHtcbiAgaWYgKGxhenlXcml0ZXIud3JpdHRlbiA+IDApIHtcbiAgICBsYXp5V3JpdGVyLmNsaWVudFN0cnVjdHMucHVzaCh7IHdyaXR0ZW46IGxhenlXcml0ZXIud3JpdHRlbiwgcmVzdEVuY29kZXI6IGVuY29kaW5nLnRvVWludDhBcnJheShsYXp5V3JpdGVyLmVuY29kZXIucmVzdEVuY29kZXIpIH0pO1xuICAgIGxhenlXcml0ZXIuZW5jb2Rlci5yZXN0RW5jb2RlciA9IGVuY29kaW5nLmNyZWF0ZUVuY29kZXIoKTtcbiAgICBsYXp5V3JpdGVyLndyaXR0ZW4gPSAwO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TGF6eVN0cnVjdFdyaXRlcn0gbGF6eVdyaXRlclxuICogQHBhcmFtIHtJdGVtIHwgR0N9IHN0cnVjdFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICovXG5jb25zdCB3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlciA9IChsYXp5V3JpdGVyLCBzdHJ1Y3QsIG9mZnNldCkgPT4ge1xuICAvLyBmbHVzaCBjdXJyIGlmIHdlIHN0YXJ0IGFub3RoZXIgY2xpZW50XG4gIGlmIChsYXp5V3JpdGVyLndyaXR0ZW4gPiAwICYmIGxhenlXcml0ZXIuY3VyckNsaWVudCAhPT0gc3RydWN0LmlkLmNsaWVudCkge1xuICAgIGZsdXNoTGF6eVN0cnVjdFdyaXRlcihsYXp5V3JpdGVyKTtcbiAgfVxuICBpZiAobGF6eVdyaXRlci53cml0dGVuID09PSAwKSB7XG4gICAgbGF6eVdyaXRlci5jdXJyQ2xpZW50ID0gc3RydWN0LmlkLmNsaWVudDtcbiAgICAvLyB3cml0ZSBuZXh0IGNsaWVudFxuICAgIGxhenlXcml0ZXIuZW5jb2Rlci53cml0ZUNsaWVudChzdHJ1Y3QuaWQuY2xpZW50KTtcbiAgICAvLyB3cml0ZSBzdGFydENsb2NrXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGxhenlXcml0ZXIuZW5jb2Rlci5yZXN0RW5jb2Rlciwgc3RydWN0LmlkLmNsb2NrICsgb2Zmc2V0KTtcbiAgfVxuICBzdHJ1Y3Qud3JpdGUobGF6eVdyaXRlci5lbmNvZGVyLCBvZmZzZXQpO1xuICBsYXp5V3JpdGVyLndyaXR0ZW4rKztcbn07XG4vKipcbiAqIENhbGwgdGhpcyBmdW5jdGlvbiB3aGVuIHdlIGNvbGxlY3RlZCBhbGwgcGFydHMgYW5kIHdhbnQgdG9cbiAqIHB1dCBhbGwgdGhlIHBhcnRzIHRvZ2V0aGVyLiBBZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kLFxuICogeW91IGNhbiBjb250aW51ZSB1c2luZyB0aGUgVXBkYXRlRW5jb2Rlci5cbiAqXG4gKiBAcGFyYW0ge0xhenlTdHJ1Y3RXcml0ZXJ9IGxhenlXcml0ZXJcbiAqL1xuY29uc3QgZmluaXNoTGF6eVN0cnVjdFdyaXRpbmcgPSAobGF6eVdyaXRlcikgPT4ge1xuICBmbHVzaExhenlTdHJ1Y3RXcml0ZXIobGF6eVdyaXRlcik7XG5cbiAgLy8gdGhpcyBpcyBhIGZyZXNoIGVuY29kZXIgYmVjYXVzZSB3ZSBjYWxsZWQgZmx1c2hDdXJyXG4gIGNvbnN0IHJlc3RFbmNvZGVyID0gbGF6eVdyaXRlci5lbmNvZGVyLnJlc3RFbmNvZGVyO1xuXG4gIC8qKlxuICAgKiBOb3cgd2UgcHV0IGFsbCB0aGUgZnJhZ21lbnRzIHRvZ2V0aGVyLlxuICAgKiBUaGlzIHdvcmtzIHNpbWlsYXJseSB0byBgd3JpdGVDbGllbnRzU3RydWN0c2BcbiAgICovXG5cbiAgLy8gd3JpdGUgIyBzdGF0ZXMgdGhhdCB3ZXJlIHVwZGF0ZWQgLSBpLmUuIHRoZSBjbGllbnRzXG4gIGVuY29kaW5nLndyaXRlVmFyVWludChyZXN0RW5jb2RlciwgbGF6eVdyaXRlci5jbGllbnRTdHJ1Y3RzLmxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXp5V3JpdGVyLmNsaWVudFN0cnVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwYXJ0U3RydWN0cyA9IGxhenlXcml0ZXIuY2xpZW50U3RydWN0c1tpXTtcbiAgICAvKipcbiAgICAgKiBXb3JrcyBzaW1pbGFybHkgdG8gYHdyaXRlU3RydWN0c2BcbiAgICAgKi9cbiAgICAvLyB3cml0ZSAjIGVuY29kZWQgc3RydWN0c1xuICAgIGVuY29kaW5nLndyaXRlVmFyVWludChyZXN0RW5jb2RlciwgcGFydFN0cnVjdHMud3JpdHRlbik7XG4gICAgLy8gd3JpdGUgdGhlIHJlc3Qgb2YgdGhlIGZyYWdtZW50XG4gICAgZW5jb2Rpbmcud3JpdGVVaW50OEFycmF5KHJlc3RFbmNvZGVyLCBwYXJ0U3RydWN0cy5yZXN0RW5jb2Rlcik7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqIEBwYXJhbSB7dHlwZW9mIFVwZGF0ZURlY29kZXJWMiB8IHR5cGVvZiBVcGRhdGVEZWNvZGVyVjF9IFlEZWNvZGVyXG4gKiBAcGFyYW0ge3R5cGVvZiBVcGRhdGVFbmNvZGVyVjIgfCB0eXBlb2YgVXBkYXRlRW5jb2RlclYxIH0gWUVuY29kZXJcbiAqL1xuY29uc3QgY29udmVydFVwZGF0ZUZvcm1hdCA9ICh1cGRhdGUsIFlEZWNvZGVyLCBZRW5jb2RlcikgPT4ge1xuICBjb25zdCB1cGRhdGVEZWNvZGVyID0gbmV3IFlEZWNvZGVyKGRlY29kaW5nLmNyZWF0ZURlY29kZXIodXBkYXRlKSk7XG4gIGNvbnN0IGxhenlEZWNvZGVyID0gbmV3IExhenlTdHJ1Y3RSZWFkZXIodXBkYXRlRGVjb2RlciwgZmFsc2UpO1xuICBjb25zdCB1cGRhdGVFbmNvZGVyID0gbmV3IFlFbmNvZGVyKCk7XG4gIGNvbnN0IGxhenlXcml0ZXIgPSBuZXcgTGF6eVN0cnVjdFdyaXRlcih1cGRhdGVFbmNvZGVyKTtcblxuICBmb3IgKGxldCBjdXJyID0gbGF6eURlY29kZXIuY3VycjsgY3VyciAhPT0gbnVsbDsgY3VyciA9IGxhenlEZWNvZGVyLm5leHQoKSkge1xuICAgIHdyaXRlU3RydWN0VG9MYXp5U3RydWN0V3JpdGVyKGxhenlXcml0ZXIsIGN1cnIsIDApO1xuICB9XG4gIGZpbmlzaExhenlTdHJ1Y3RXcml0aW5nKGxhenlXcml0ZXIpO1xuICBjb25zdCBkcyA9IHJlYWREZWxldGVTZXQodXBkYXRlRGVjb2Rlcik7XG4gIHdyaXRlRGVsZXRlU2V0KHVwZGF0ZUVuY29kZXIsIGRzKTtcbiAgcmV0dXJuIHVwZGF0ZUVuY29kZXIudG9VaW50OEFycmF5KClcbn07XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSB1cGRhdGVcbiAqL1xuY29uc3QgY29udmVydFVwZGF0ZUZvcm1hdFYxVG9WMiA9IHVwZGF0ZSA9PiBjb252ZXJ0VXBkYXRlRm9ybWF0KHVwZGF0ZSwgVXBkYXRlRGVjb2RlclYxLCBVcGRhdGVFbmNvZGVyVjIpO1xuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gdXBkYXRlXG4gKi9cbmNvbnN0IGNvbnZlcnRVcGRhdGVGb3JtYXRWMlRvVjEgPSB1cGRhdGUgPT4gY29udmVydFVwZGF0ZUZvcm1hdCh1cGRhdGUsIFVwZGF0ZURlY29kZXJWMiwgVXBkYXRlRW5jb2RlclYxKTtcblxuLyoqXG4gKiBAdGVtcGxhdGUge0Fic3RyYWN0VHlwZTxhbnk+fSBUXG4gKiBZRXZlbnQgZGVzY3JpYmVzIHRoZSBjaGFuZ2VzIG9uIGEgWVR5cGUuXG4gKi9cbmNsYXNzIFlFdmVudCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1R9IHRhcmdldCBUaGUgY2hhbmdlZCB0eXBlLlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IgKHRhcmdldCwgdHJhbnNhY3Rpb24pIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvbiB3aGljaCB0aGlzIGV2ZW50IHdhcyBjcmVhdGVkIG9uLlxuICAgICAqIEB0eXBlIHtUfVxuICAgICAqL1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHRhcmdldCBvbiB3aGljaCB0aGUgb2JzZXJ2ZSBjYWxsYmFjayBpcyBjYWxsZWQuXG4gICAgICogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fVxuICAgICAqL1xuICAgIHRoaXMuY3VycmVudFRhcmdldCA9IHRhcmdldDtcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhbnNhY3Rpb24gdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudC5cbiAgICAgKiBAdHlwZSB7VHJhbnNhY3Rpb259XG4gICAgICovXG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLl9jaGFuZ2VzID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVsbCB8IE1hcDxzdHJpbmcsIHsgYWN0aW9uOiAnYWRkJyB8ICd1cGRhdGUnIHwgJ2RlbGV0ZScsIG9sZFZhbHVlOiBhbnksIG5ld1ZhbHVlOiBhbnkgfT59XG4gICAgICovXG4gICAgdGhpcy5fa2V5cyA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQHR5cGUge251bGwgfCBBcnJheTx7IGluc2VydD86IHN0cmluZyB8IEFycmF5PGFueT4gfCBvYmplY3QgfCBBYnN0cmFjdFR5cGU8YW55PiwgcmV0YWluPzogbnVtYmVyLCBkZWxldGU/OiBudW1iZXIsIGF0dHJpYnV0ZXM/OiBPYmplY3Q8c3RyaW5nLCBhbnk+IH0+fVxuICAgICAqL1xuICAgIHRoaXMuX2RlbHRhID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgcGF0aCBmcm9tIGB5YCB0byB0aGUgY2hhbmdlZCB0eXBlLlxuICAgKlxuICAgKiBAdG9kbyB2MTQgc2hvdWxkIHN0YW5kYXJkaXplIG9uIHBhdGg6IEFycmF5PHtwYXJlbnQsIGluZGV4fT4gYmVjYXVzZSB0aGF0IGlzIGVhc2llciB0byB3b3JrIHdpdGguXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgcHJvcGVydHkgaG9sZHM6XG4gICAqIEBleGFtcGxlXG4gICAqICAgbGV0IHR5cGUgPSB5XG4gICAqICAgZXZlbnQucGF0aC5mb3JFYWNoKGRpciA9PiB7XG4gICAqICAgICB0eXBlID0gdHlwZS5nZXQoZGlyKVxuICAgKiAgIH0pXG4gICAqICAgdHlwZSA9PT0gZXZlbnQudGFyZ2V0IC8vID0+IHRydWVcbiAgICovXG4gIGdldCBwYXRoICgpIHtcbiAgICAvLyBAdHMtaWdub3JlIF9pdGVtIGlzIGRlZmluZWQgYmVjYXVzZSB0YXJnZXQgaXMgaW50ZWdyYXRlZFxuICAgIHJldHVybiBnZXRQYXRoVG8odGhpcy5jdXJyZW50VGFyZ2V0LCB0aGlzLnRhcmdldClcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHN0cnVjdCBpcyBkZWxldGVkIGJ5IHRoaXMgZXZlbnQuXG4gICAqXG4gICAqIEluIGNvbnRyYXN0IHRvIGNoYW5nZS5kZWxldGVkLCB0aGlzIG1ldGhvZCBhbHNvIHJldHVybnMgdHJ1ZSBpZiB0aGUgc3RydWN0IHdhcyBhZGRlZCBhbmQgdGhlbiBkZWxldGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0Fic3RyYWN0U3RydWN0fSBzdHJ1Y3RcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGRlbGV0ZXMgKHN0cnVjdCkge1xuICAgIHJldHVybiBpc0RlbGV0ZWQodGhpcy50cmFuc2FjdGlvbi5kZWxldGVTZXQsIHN0cnVjdC5pZClcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7TWFwPHN0cmluZywgeyBhY3Rpb246ICdhZGQnIHwgJ3VwZGF0ZScgfCAnZGVsZXRlJywgb2xkVmFsdWU6IGFueSwgbmV3VmFsdWU6IGFueSB9Pn1cbiAgICovXG4gIGdldCBrZXlzICgpIHtcbiAgICBpZiAodGhpcy5fa2V5cyA9PT0gbnVsbCkge1xuICAgICAgY29uc3Qga2V5cyA9IG5ldyBNYXAoKTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuICAgICAgY29uc3QgY2hhbmdlZCA9IC8qKiBAdHlwZSBTZXQ8c3RyaW5nfG51bGw+ICovICh0aGlzLnRyYW5zYWN0aW9uLmNoYW5nZWQuZ2V0KHRhcmdldCkpO1xuICAgICAgY2hhbmdlZC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmIChrZXkgIT09IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gLyoqIEB0eXBlIHtJdGVtfSAqLyAodGFyZ2V0Ll9tYXAuZ2V0KGtleSkpO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEB0eXBlIHsnZGVsZXRlJyB8ICdhZGQnIHwgJ3VwZGF0ZSd9XG4gICAgICAgICAgICovXG4gICAgICAgICAgbGV0IGFjdGlvbjtcbiAgICAgICAgICBsZXQgb2xkVmFsdWU7XG4gICAgICAgICAgaWYgKHRoaXMuYWRkcyhpdGVtKSkge1xuICAgICAgICAgICAgbGV0IHByZXYgPSBpdGVtLmxlZnQ7XG4gICAgICAgICAgICB3aGlsZSAocHJldiAhPT0gbnVsbCAmJiB0aGlzLmFkZHMocHJldikpIHtcbiAgICAgICAgICAgICAgcHJldiA9IHByZXYubGVmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmRlbGV0ZXMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgaWYgKHByZXYgIT09IG51bGwgJiYgdGhpcy5kZWxldGVzKHByZXYpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gJ2RlbGV0ZSc7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBhcnJheS5sYXN0KHByZXYuY29udGVudC5nZXRDb250ZW50KCkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAocHJldiAhPT0gbnVsbCAmJiB0aGlzLmRlbGV0ZXMocHJldikpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSAndXBkYXRlJztcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGFycmF5Lmxhc3QocHJldi5jb250ZW50LmdldENvbnRlbnQoKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gJ2FkZCc7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICBhY3Rpb24gPSAnZGVsZXRlJztcbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBhcnJheS5sYXN0KC8qKiBAdHlwZSB7SXRlbX0gKi8gaXRlbS5jb250ZW50LmdldENvbnRlbnQoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gLy8gbm9wXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleXMuc2V0KGtleSwgeyBhY3Rpb24sIG9sZFZhbHVlIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2tleXMgPSBrZXlzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fa2V5c1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTx7aW5zZXJ0Pzogc3RyaW5nIHwgQXJyYXk8YW55PiB8IG9iamVjdCB8IEFic3RyYWN0VHlwZTxhbnk+LCByZXRhaW4/OiBudW1iZXIsIGRlbGV0ZT86IG51bWJlciwgYXR0cmlidXRlcz86IE9iamVjdDxzdHJpbmcsIGFueT59Pn1cbiAgICovXG4gIGdldCBkZWx0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhbmdlcy5kZWx0YVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgc3RydWN0IGlzIGFkZGVkIGJ5IHRoaXMgZXZlbnQuXG4gICAqXG4gICAqIEluIGNvbnRyYXN0IHRvIGNoYW5nZS5kZWxldGVkLCB0aGlzIG1ldGhvZCBhbHNvIHJldHVybnMgdHJ1ZSBpZiB0aGUgc3RydWN0IHdhcyBhZGRlZCBhbmQgdGhlbiBkZWxldGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0Fic3RyYWN0U3RydWN0fSBzdHJ1Y3RcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGFkZHMgKHN0cnVjdCkge1xuICAgIHJldHVybiBzdHJ1Y3QuaWQuY2xvY2sgPj0gKHRoaXMudHJhbnNhY3Rpb24uYmVmb3JlU3RhdGUuZ2V0KHN0cnVjdC5pZC5jbGllbnQpIHx8IDApXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge3thZGRlZDpTZXQ8SXRlbT4sZGVsZXRlZDpTZXQ8SXRlbT4sa2V5czpNYXA8c3RyaW5nLHthY3Rpb246J2FkZCd8J3VwZGF0ZSd8J2RlbGV0ZScsb2xkVmFsdWU6YW55fT4sZGVsdGE6QXJyYXk8e2luc2VydD86QXJyYXk8YW55PnxzdHJpbmcsIGRlbGV0ZT86bnVtYmVyLCByZXRhaW4/Om51bWJlcn0+fX1cbiAgICovXG4gIGdldCBjaGFuZ2VzICgpIHtcbiAgICBsZXQgY2hhbmdlcyA9IHRoaXMuX2NoYW5nZXM7XG4gICAgaWYgKGNoYW5nZXMgPT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuICAgICAgY29uc3QgYWRkZWQgPSBzZXQuY3JlYXRlKCk7XG4gICAgICBjb25zdCBkZWxldGVkID0gc2V0LmNyZWF0ZSgpO1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7QXJyYXk8e2luc2VydDpBcnJheTxhbnk+fXx7ZGVsZXRlOm51bWJlcn18e3JldGFpbjpudW1iZXJ9Pn1cbiAgICAgICAqL1xuICAgICAgY29uc3QgZGVsdGEgPSBbXTtcbiAgICAgIGNoYW5nZXMgPSB7XG4gICAgICAgIGFkZGVkLFxuICAgICAgICBkZWxldGVkLFxuICAgICAgICBkZWx0YSxcbiAgICAgICAga2V5czogdGhpcy5rZXlzXG4gICAgICB9O1xuICAgICAgY29uc3QgY2hhbmdlZCA9IC8qKiBAdHlwZSBTZXQ8c3RyaW5nfG51bGw+ICovICh0aGlzLnRyYW5zYWN0aW9uLmNoYW5nZWQuZ2V0KHRhcmdldCkpO1xuICAgICAgaWYgKGNoYW5nZWQuaGFzKG51bGwpKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7YW55fVxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGxhc3RPcCA9IG51bGw7XG4gICAgICAgIGNvbnN0IHBhY2tPcCA9ICgpID0+IHtcbiAgICAgICAgICBpZiAobGFzdE9wKSB7XG4gICAgICAgICAgICBkZWx0YS5wdXNoKGxhc3RPcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGxldCBpdGVtID0gdGFyZ2V0Ll9zdGFydDsgaXRlbSAhPT0gbnVsbDsgaXRlbSA9IGl0ZW0ucmlnaHQpIHtcbiAgICAgICAgICBpZiAoaXRlbS5kZWxldGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWxldGVzKGl0ZW0pICYmICF0aGlzLmFkZHMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgaWYgKGxhc3RPcCA9PT0gbnVsbCB8fCBsYXN0T3AuZGVsZXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYWNrT3AoKTtcbiAgICAgICAgICAgICAgICBsYXN0T3AgPSB7IGRlbGV0ZTogMCB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxhc3RPcC5kZWxldGUgKz0gaXRlbS5sZW5ndGg7XG4gICAgICAgICAgICAgIGRlbGV0ZWQuYWRkKGl0ZW0pO1xuICAgICAgICAgICAgfSAvLyBlbHNlIG5vcFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hZGRzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgIGlmIChsYXN0T3AgPT09IG51bGwgfHwgbGFzdE9wLmluc2VydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGFja09wKCk7XG4gICAgICAgICAgICAgICAgbGFzdE9wID0geyBpbnNlcnQ6IFtdIH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdE9wLmluc2VydCA9IGxhc3RPcC5pbnNlcnQuY29uY2F0KGl0ZW0uY29udGVudC5nZXRDb250ZW50KCkpO1xuICAgICAgICAgICAgICBhZGRlZC5hZGQoaXRlbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAobGFzdE9wID09PSBudWxsIHx8IGxhc3RPcC5yZXRhaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhY2tPcCgpO1xuICAgICAgICAgICAgICAgIGxhc3RPcCA9IHsgcmV0YWluOiAwIH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdE9wLnJldGFpbiArPSBpdGVtLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RPcCAhPT0gbnVsbCAmJiBsYXN0T3AucmV0YWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwYWNrT3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fY2hhbmdlcyA9IGNoYW5nZXM7XG4gICAgfVxuICAgIHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKGNoYW5nZXMpXG4gIH1cbn1cblxuLyoqXG4gKiBDb21wdXRlIHRoZSBwYXRoIGZyb20gdGhpcyB0eXBlIHRvIHRoZSBzcGVjaWZpZWQgdGFyZ2V0LlxuICpcbiAqIEBleGFtcGxlXG4gKiAgIC8vIGBjaGlsZGAgc2hvdWxkIGJlIGFjY2Vzc2libGUgdmlhIGB0eXBlLmdldChwYXRoWzBdKS5nZXQocGF0aFsxXSkuLmBcbiAqICAgY29uc3QgcGF0aCA9IHR5cGUuZ2V0UGF0aFRvKGNoaWxkKVxuICogICAvLyBhc3N1bWluZyBgdHlwZSBpbnN0YW5jZW9mIFlBcnJheWBcbiAqICAgY29uc29sZS5sb2cocGF0aCkgLy8gbWlnaHQgbG9vayBsaWtlID0+IFsyLCAna2V5MSddXG4gKiAgIGNoaWxkID09PSB0eXBlLmdldChwYXRoWzBdKS5nZXQocGF0aFsxXSlcbiAqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IGNoaWxkIHRhcmdldFxuICogQHJldHVybiB7QXJyYXk8c3RyaW5nfG51bWJlcj59IFBhdGggdG8gdGhlIHRhcmdldFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZ2V0UGF0aFRvID0gKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgY29uc3QgcGF0aCA9IFtdO1xuICB3aGlsZSAoY2hpbGQuX2l0ZW0gIT09IG51bGwgJiYgY2hpbGQgIT09IHBhcmVudCkge1xuICAgIGlmIChjaGlsZC5faXRlbS5wYXJlbnRTdWIgIT09IG51bGwpIHtcbiAgICAgIC8vIHBhcmVudCBpcyBtYXAtaXNoXG4gICAgICBwYXRoLnVuc2hpZnQoY2hpbGQuX2l0ZW0ucGFyZW50U3ViKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcGFyZW50IGlzIGFycmF5LWlzaFxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgbGV0IGMgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAoY2hpbGQuX2l0ZW0ucGFyZW50KS5fc3RhcnQ7XG4gICAgICB3aGlsZSAoYyAhPT0gY2hpbGQuX2l0ZW0gJiYgYyAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoIWMuZGVsZXRlZCkge1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBjID0gYy5yaWdodDtcbiAgICAgIH1cbiAgICAgIHBhdGgudW5zaGlmdChpKTtcbiAgICB9XG4gICAgY2hpbGQgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAoY2hpbGQuX2l0ZW0ucGFyZW50KTtcbiAgfVxuICByZXR1cm4gcGF0aFxufTtcblxuY29uc3QgbWF4U2VhcmNoTWFya2VyID0gODA7XG5cbi8qKlxuICogQSB1bmlxdWUgdGltZXN0YW1wIHRoYXQgaWRlbnRpZmllcyBlYWNoIG1hcmtlci5cbiAqXG4gKiBUaW1lIGlzIHJlbGF0aXZlLC4uIHRoaXMgaXMgbW9yZSBsaWtlIGFuIGV2ZXItaW5jcmVhc2luZyBjbG9jay5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5sZXQgZ2xvYmFsU2VhcmNoTWFya2VyVGltZXN0YW1wID0gMDtcblxuY2xhc3MgQXJyYXlTZWFyY2hNYXJrZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtJdGVtfSBwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgKi9cbiAgY29uc3RydWN0b3IgKHAsIGluZGV4KSB7XG4gICAgcC5tYXJrZXIgPSB0cnVlO1xuICAgIHRoaXMucCA9IHA7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIHRoaXMudGltZXN0YW1wID0gZ2xvYmFsU2VhcmNoTWFya2VyVGltZXN0YW1wKys7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5U2VhcmNoTWFya2VyfSBtYXJrZXJcbiAqL1xuY29uc3QgcmVmcmVzaE1hcmtlclRpbWVzdGFtcCA9IG1hcmtlciA9PiB7IG1hcmtlci50aW1lc3RhbXAgPSBnbG9iYWxTZWFyY2hNYXJrZXJUaW1lc3RhbXArKzsgfTtcblxuLyoqXG4gKiBUaGlzIGlzIHJhdGhlciBjb21wbGV4IHNvIHRoaXMgZnVuY3Rpb24gaXMgdGhlIG9ubHkgdGhpbmcgdGhhdCBzaG91bGQgb3ZlcndyaXRlIGEgbWFya2VyXG4gKlxuICogQHBhcmFtIHtBcnJheVNlYXJjaE1hcmtlcn0gbWFya2VyXG4gKiBAcGFyYW0ge0l0ZW19IHBcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICovXG5jb25zdCBvdmVyd3JpdGVNYXJrZXIgPSAobWFya2VyLCBwLCBpbmRleCkgPT4ge1xuICBtYXJrZXIucC5tYXJrZXIgPSBmYWxzZTtcbiAgbWFya2VyLnAgPSBwO1xuICBwLm1hcmtlciA9IHRydWU7XG4gIG1hcmtlci5pbmRleCA9IGluZGV4O1xuICBtYXJrZXIudGltZXN0YW1wID0gZ2xvYmFsU2VhcmNoTWFya2VyVGltZXN0YW1wKys7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXlTZWFyY2hNYXJrZXI+fSBzZWFyY2hNYXJrZXJcbiAqIEBwYXJhbSB7SXRlbX0gcFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKi9cbmNvbnN0IG1hcmtQb3NpdGlvbiA9IChzZWFyY2hNYXJrZXIsIHAsIGluZGV4KSA9PiB7XG4gIGlmIChzZWFyY2hNYXJrZXIubGVuZ3RoID49IG1heFNlYXJjaE1hcmtlcikge1xuICAgIC8vIG92ZXJyaWRlIG9sZGVzdCBtYXJrZXIgKHdlIGRvbid0IHdhbnQgdG8gY3JlYXRlIG1vcmUgb2JqZWN0cylcbiAgICBjb25zdCBtYXJrZXIgPSBzZWFyY2hNYXJrZXIucmVkdWNlKChhLCBiKSA9PiBhLnRpbWVzdGFtcCA8IGIudGltZXN0YW1wID8gYSA6IGIpO1xuICAgIG92ZXJ3cml0ZU1hcmtlcihtYXJrZXIsIHAsIGluZGV4KTtcbiAgICByZXR1cm4gbWFya2VyXG4gIH0gZWxzZSB7XG4gICAgLy8gY3JlYXRlIG5ldyBtYXJrZXJcbiAgICBjb25zdCBwbSA9IG5ldyBBcnJheVNlYXJjaE1hcmtlcihwLCBpbmRleCk7XG4gICAgc2VhcmNoTWFya2VyLnB1c2gocG0pO1xuICAgIHJldHVybiBwbVxuICB9XG59O1xuXG4vKipcbiAqIFNlYXJjaCBtYXJrZXIgaGVscCB1cyB0byBmaW5kIHBvc2l0aW9ucyBpbiB0aGUgYXNzb2NpYXRpdmUgYXJyYXkgZmFzdGVyLlxuICpcbiAqIFRoZXkgc3BlZWQgdXAgdGhlIHByb2Nlc3Mgb2YgZmluZGluZyBhIHBvc2l0aW9uIHdpdGhvdXQgbXVjaCBib29ra2VlcGluZy5cbiAqXG4gKiBBIG1heGltdW0gb2YgYG1heFNlYXJjaE1hcmtlcmAgb2JqZWN0cyBhcmUgY3JlYXRlZC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFsd2F5cyByZXR1cm5zIGEgcmVmcmVzaGVkIG1hcmtlciAodXBkYXRlZCB0aW1lc3RhbXApXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0geWFycmF5XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqL1xuY29uc3QgZmluZE1hcmtlciA9ICh5YXJyYXksIGluZGV4KSA9PiB7XG4gIGlmICh5YXJyYXkuX3N0YXJ0ID09PSBudWxsIHx8IGluZGV4ID09PSAwIHx8IHlhcnJheS5fc2VhcmNoTWFya2VyID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBjb25zdCBtYXJrZXIgPSB5YXJyYXkuX3NlYXJjaE1hcmtlci5sZW5ndGggPT09IDAgPyBudWxsIDogeWFycmF5Ll9zZWFyY2hNYXJrZXIucmVkdWNlKChhLCBiKSA9PiBtYXRoLmFicyhpbmRleCAtIGEuaW5kZXgpIDwgbWF0aC5hYnMoaW5kZXggLSBiLmluZGV4KSA/IGEgOiBiKTtcbiAgbGV0IHAgPSB5YXJyYXkuX3N0YXJ0O1xuICBsZXQgcGluZGV4ID0gMDtcbiAgaWYgKG1hcmtlciAhPT0gbnVsbCkge1xuICAgIHAgPSBtYXJrZXIucDtcbiAgICBwaW5kZXggPSBtYXJrZXIuaW5kZXg7XG4gICAgcmVmcmVzaE1hcmtlclRpbWVzdGFtcChtYXJrZXIpOyAvLyB3ZSB1c2VkIGl0LCB3ZSBtaWdodCBuZWVkIHRvIHVzZSBpdCBhZ2FpblxuICB9XG4gIC8vIGl0ZXJhdGUgdG8gcmlnaHQgaWYgcG9zc2libGVcbiAgd2hpbGUgKHAucmlnaHQgIT09IG51bGwgJiYgcGluZGV4IDwgaW5kZXgpIHtcbiAgICBpZiAoIXAuZGVsZXRlZCAmJiBwLmNvdW50YWJsZSkge1xuICAgICAgaWYgKGluZGV4IDwgcGluZGV4ICsgcC5sZW5ndGgpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHBpbmRleCArPSBwLmxlbmd0aDtcbiAgICB9XG4gICAgcCA9IHAucmlnaHQ7XG4gIH1cbiAgLy8gaXRlcmF0ZSB0byBsZWZ0IGlmIG5lY2Vzc2FyeSAobWlnaHQgYmUgdGhhdCBwaW5kZXggPiBpbmRleClcbiAgd2hpbGUgKHAubGVmdCAhPT0gbnVsbCAmJiBwaW5kZXggPiBpbmRleCkge1xuICAgIHAgPSBwLmxlZnQ7XG4gICAgaWYgKCFwLmRlbGV0ZWQgJiYgcC5jb3VudGFibGUpIHtcbiAgICAgIHBpbmRleCAtPSBwLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgLy8gd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdCBwIGNhbid0IGJlIG1lcmdlZCB3aXRoIGxlZnQsIGJlY2F1c2UgdGhhdCB3b3VsZCBzY3JldyB1cCBldmVyeXRoaW5nXG4gIC8vIGluIHRoYXQgY2FzIGp1c3QgcmV0dXJuIHdoYXQgd2UgaGF2ZSAoaXQgaXMgbW9zdCBsaWtlbHkgdGhlIGJlc3QgbWFya2VyIGFueXdheSlcbiAgLy8gaXRlcmF0ZSB0byBsZWZ0IHVudGlsIHAgY2FuJ3QgYmUgbWVyZ2VkIHdpdGggbGVmdFxuICB3aGlsZSAocC5sZWZ0ICE9PSBudWxsICYmIHAubGVmdC5pZC5jbGllbnQgPT09IHAuaWQuY2xpZW50ICYmIHAubGVmdC5pZC5jbG9jayArIHAubGVmdC5sZW5ndGggPT09IHAuaWQuY2xvY2spIHtcbiAgICBwID0gcC5sZWZ0O1xuICAgIGlmICghcC5kZWxldGVkICYmIHAuY291bnRhYmxlKSB7XG4gICAgICBwaW5kZXggLT0gcC5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgLy8gQHRvZG8gcmVtb3ZlIVxuICAvLyBhc3N1cmUgcG9zaXRpb25cbiAgLy8ge1xuICAvLyAgIGxldCBzdGFydCA9IHlhcnJheS5fc3RhcnRcbiAgLy8gICBsZXQgcG9zID0gMFxuICAvLyAgIHdoaWxlIChzdGFydCAhPT0gcCkge1xuICAvLyAgICAgaWYgKCFzdGFydC5kZWxldGVkICYmIHN0YXJ0LmNvdW50YWJsZSkge1xuICAvLyAgICAgICBwb3MgKz0gc3RhcnQubGVuZ3RoXG4gIC8vICAgICB9XG4gIC8vICAgICBzdGFydCA9IC8qKiBAdHlwZSB7SXRlbX0gKi8gKHN0YXJ0LnJpZ2h0KVxuICAvLyAgIH1cbiAgLy8gICBpZiAocG9zICE9PSBwaW5kZXgpIHtcbiAgLy8gICAgIGRlYnVnZ2VyXG4gIC8vICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvdGNoYSBwb3NpdGlvbiBmYWlsIScpXG4gIC8vICAgfVxuICAvLyB9XG4gIC8vIGlmIChtYXJrZXIpIHtcbiAgLy8gICBpZiAod2luZG93Lmxlbmd0aGVzID09IG51bGwpIHtcbiAgLy8gICAgIHdpbmRvdy5sZW5ndGhlcyA9IFtdXG4gIC8vICAgICB3aW5kb3cuZ2V0TGVuZ3RoZXMgPSAoKSA9PiB3aW5kb3cubGVuZ3RoZXMuc29ydCgoYSwgYikgPT4gYSAtIGIpXG4gIC8vICAgfVxuICAvLyAgIHdpbmRvdy5sZW5ndGhlcy5wdXNoKG1hcmtlci5pbmRleCAtIHBpbmRleClcbiAgLy8gICBjb25zb2xlLmxvZygnZGlzdGFuY2UnLCBtYXJrZXIuaW5kZXggLSBwaW5kZXgsICdsZW4nLCBwICYmIHAucGFyZW50Lmxlbmd0aClcbiAgLy8gfVxuICBpZiAobWFya2VyICE9PSBudWxsICYmIG1hdGguYWJzKG1hcmtlci5pbmRleCAtIHBpbmRleCkgPCAvKiogQHR5cGUge1lUZXh0fFlBcnJheTxhbnk+fSAqLyAocC5wYXJlbnQpLmxlbmd0aCAvIG1heFNlYXJjaE1hcmtlcikge1xuICAgIC8vIGFkanVzdCBleGlzdGluZyBtYXJrZXJcbiAgICBvdmVyd3JpdGVNYXJrZXIobWFya2VyLCBwLCBwaW5kZXgpO1xuICAgIHJldHVybiBtYXJrZXJcbiAgfSBlbHNlIHtcbiAgICAvLyBjcmVhdGUgbmV3IG1hcmtlclxuICAgIHJldHVybiBtYXJrUG9zaXRpb24oeWFycmF5Ll9zZWFyY2hNYXJrZXIsIHAsIHBpbmRleClcbiAgfVxufTtcblxuLyoqXG4gKiBVcGRhdGUgbWFya2VycyB3aGVuIGEgY2hhbmdlIGhhcHBlbmVkLlxuICpcbiAqIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgZG9pbmcgYSBkZWxldGlvbiFcbiAqXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5U2VhcmNoTWFya2VyPn0gc2VhcmNoTWFya2VyXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gSWYgaW5zZXJ0aW9uLCBsZW4gaXMgcG9zaXRpdmUuIElmIGRlbGV0aW9uLCBsZW4gaXMgbmVnYXRpdmUuXG4gKi9cbmNvbnN0IHVwZGF0ZU1hcmtlckNoYW5nZXMgPSAoc2VhcmNoTWFya2VyLCBpbmRleCwgbGVuKSA9PiB7XG4gIGZvciAobGV0IGkgPSBzZWFyY2hNYXJrZXIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBtID0gc2VhcmNoTWFya2VyW2ldO1xuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICAgKi9cbiAgICAgIGxldCBwID0gbS5wO1xuICAgICAgcC5tYXJrZXIgPSBmYWxzZTtcbiAgICAgIC8vIElkZWFsbHkgd2UganVzdCB3YW50IHRvIGRvIGEgc2ltcGxlIHBvc2l0aW9uIGNvbXBhcmlzb24sIGJ1dCB0aGlzIHdpbGwgb25seSB3b3JrIGlmXG4gICAgICAvLyBzZWFyY2ggbWFya2VycyBkb24ndCBwb2ludCB0byBkZWxldGVkIGl0ZW1zIGZvciBmb3JtYXRzLlxuICAgICAgLy8gSXRlcmF0ZSBtYXJrZXIgdG8gcHJldiB1bmRlbGV0ZWQgY291bnRhYmxlIHBvc2l0aW9uIHNvIHdlIGtub3cgd2hhdCB0byBkbyB3aGVuIHVwZGF0aW5nIGEgcG9zaXRpb25cbiAgICAgIHdoaWxlIChwICYmIChwLmRlbGV0ZWQgfHwgIXAuY291bnRhYmxlKSkge1xuICAgICAgICBwID0gcC5sZWZ0O1xuICAgICAgICBpZiAocCAmJiAhcC5kZWxldGVkICYmIHAuY291bnRhYmxlKSB7XG4gICAgICAgICAgLy8gYWRqdXN0IHBvc2l0aW9uLiB0aGUgbG9vcCBzaG91bGQgYnJlYWsgbm93XG4gICAgICAgICAgbS5pbmRleCAtPSBwLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHAgPT09IG51bGwgfHwgcC5tYXJrZXIgPT09IHRydWUpIHtcbiAgICAgICAgLy8gcmVtb3ZlIHNlYXJjaCBtYXJrZXIgaWYgdXBkYXRlZCBwb3NpdGlvbiBpcyBudWxsIG9yIGlmIHBvc2l0aW9uIGlzIGFscmVhZHkgbWFya2VkXG4gICAgICAgIHNlYXJjaE1hcmtlci5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBtLnAgPSBwO1xuICAgICAgcC5tYXJrZXIgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaW5kZXggPCBtLmluZGV4IHx8IChsZW4gPiAwICYmIGluZGV4ID09PSBtLmluZGV4KSkgeyAvLyBhIHNpbXBsZSBpbmRleCA8PSBtLmluZGV4IGNoZWNrIHdvdWxkIGFjdHVhbGx5IHN1ZmZpY2VcbiAgICAgIG0uaW5kZXggPSBtYXRoLm1heChpbmRleCwgbS5pbmRleCArIGxlbik7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEFjY3VtdWxhdGUgYWxsIChsaXN0KSBjaGlsZHJlbiBvZiBhIHR5cGUgYW5kIHJldHVybiB0aGVtIGFzIGFuIEFycmF5LlxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHRcbiAqIEByZXR1cm4ge0FycmF5PEl0ZW0+fVxuICovXG5jb25zdCBnZXRUeXBlQ2hpbGRyZW4gPSB0ID0+IHtcbiAgbGV0IHMgPSB0Ll9zdGFydDtcbiAgY29uc3QgYXJyID0gW107XG4gIHdoaWxlIChzKSB7XG4gICAgYXJyLnB1c2gocyk7XG4gICAgcyA9IHMucmlnaHQ7XG4gIH1cbiAgcmV0dXJuIGFyclxufTtcblxuLyoqXG4gKiBDYWxsIGV2ZW50IGxpc3RlbmVycyB3aXRoIGFuIGV2ZW50LiBUaGlzIHdpbGwgYWxzbyBhZGQgYW4gZXZlbnQgdG8gYWxsXG4gKiBwYXJlbnRzIChmb3IgYC5vYnNlcnZlRGVlcGAgaGFuZGxlcnMpLlxuICpcbiAqIEB0ZW1wbGF0ZSBFdmVudFR5cGVcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPEV2ZW50VHlwZT59IHR5cGVcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0V2ZW50VHlwZX0gZXZlbnRcbiAqL1xuY29uc3QgY2FsbFR5cGVPYnNlcnZlcnMgPSAodHlwZSwgdHJhbnNhY3Rpb24sIGV2ZW50KSA9PiB7XG4gIGNvbnN0IGNoYW5nZWRUeXBlID0gdHlwZTtcbiAgY29uc3QgY2hhbmdlZFBhcmVudFR5cGVzID0gdHJhbnNhY3Rpb24uY2hhbmdlZFBhcmVudFR5cGVzO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBtYXAuc2V0SWZVbmRlZmluZWQoY2hhbmdlZFBhcmVudFR5cGVzLCB0eXBlLCAoKSA9PiBbXSkucHVzaChldmVudCk7XG4gICAgaWYgKHR5cGUuX2l0ZW0gPT09IG51bGwpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIHR5cGUgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodHlwZS5faXRlbS5wYXJlbnQpO1xuICB9XG4gIGNhbGxFdmVudEhhbmRsZXJMaXN0ZW5lcnMoY2hhbmdlZFR5cGUuX2VILCBldmVudCwgdHJhbnNhY3Rpb24pO1xufTtcblxuLyoqXG4gKiBAdGVtcGxhdGUgRXZlbnRUeXBlXG4gKiBBYnN0cmFjdCBZanMgVHlwZSBjbGFzc1xuICovXG5jbGFzcyBBYnN0cmFjdFR5cGUge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLl9pdGVtID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZyxJdGVtPn1cbiAgICAgKi9cbiAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLl9zdGFydCA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0RvY3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMuZG9jID0gbnVsbDtcbiAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXJzXG4gICAgICogQHR5cGUge0V2ZW50SGFuZGxlcjxFdmVudFR5cGUsVHJhbnNhY3Rpb24+fVxuICAgICAqL1xuICAgIHRoaXMuX2VIID0gY3JlYXRlRXZlbnRIYW5kbGVyKCk7XG4gICAgLyoqXG4gICAgICogRGVlcCBldmVudCBoYW5kbGVyc1xuICAgICAqIEB0eXBlIHtFdmVudEhhbmRsZXI8QXJyYXk8WUV2ZW50PGFueT4+LFRyYW5zYWN0aW9uPn1cbiAgICAgKi9cbiAgICB0aGlzLl9kRUggPSBjcmVhdGVFdmVudEhhbmRsZXIoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVsbCB8IEFycmF5PEFycmF5U2VhcmNoTWFya2VyPn1cbiAgICAgKi9cbiAgICB0aGlzLl9zZWFyY2hNYXJrZXIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0Fic3RyYWN0VHlwZTxhbnk+fG51bGx9XG4gICAqL1xuICBnZXQgcGFyZW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlbSA/IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLl9pdGVtLnBhcmVudCkgOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogSW50ZWdyYXRlIHRoaXMgdHlwZSBpbnRvIHRoZSBZanMgaW5zdGFuY2UuXG4gICAqXG4gICAqICogU2F2ZSB0aGlzIHN0cnVjdCBpbiB0aGUgb3NcbiAgICogKiBUaGlzIHR5cGUgaXMgc2VudCB0byBvdGhlciBjbGllbnRcbiAgICogKiBPYnNlcnZlciBmdW5jdGlvbnMgYXJlIGZpcmVkXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jfSB5IFRoZSBZanMgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtJdGVtfG51bGx9IGl0ZW1cbiAgICovXG4gIF9pbnRlZ3JhdGUgKHksIGl0ZW0pIHtcbiAgICB0aGlzLmRvYyA9IHk7XG4gICAgdGhpcy5faXRlbSA9IGl0ZW07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QWJzdHJhY3RUeXBlPEV2ZW50VHlwZT59XG4gICAqL1xuICBfY29weSAoKSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QWJzdHJhY3RUeXBlPEV2ZW50VHlwZT59XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICovXG4gIF93cml0ZSAoZW5jb2RlcikgeyB9XG5cbiAgLyoqXG4gICAqIFRoZSBmaXJzdCBub24tZGVsZXRlZCBpdGVtXG4gICAqL1xuICBnZXQgX2ZpcnN0ICgpIHtcbiAgICBsZXQgbiA9IHRoaXMuX3N0YXJ0O1xuICAgIHdoaWxlIChuICE9PSBudWxsICYmIG4uZGVsZXRlZCkge1xuICAgICAgbiA9IG4ucmlnaHQ7XG4gICAgfVxuICAgIHJldHVybiBuXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBZRXZlbnQgYW5kIGNhbGxzIGFsbCB0eXBlIG9ic2VydmVycy5cbiAgICogTXVzdCBiZSBpbXBsZW1lbnRlZCBieSBlYWNoIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U2V0PG51bGx8c3RyaW5nPn0gcGFyZW50U3VicyBLZXlzIGNoYW5nZWQgb24gdGhpcyB0eXBlLiBgbnVsbGAgaWYgbGlzdCB3YXMgbW9kaWZpZWQuXG4gICAqL1xuICBfY2FsbE9ic2VydmVyICh0cmFuc2FjdGlvbiwgcGFyZW50U3Vicykge1xuICAgIGlmICghdHJhbnNhY3Rpb24ubG9jYWwgJiYgdGhpcy5fc2VhcmNoTWFya2VyKSB7XG4gICAgICB0aGlzLl9zZWFyY2hNYXJrZXIubGVuZ3RoID0gMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT2JzZXJ2ZSBhbGwgZXZlbnRzIHRoYXQgYXJlIGNyZWF0ZWQgb24gdGhpcyB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEV2ZW50VHlwZSwgVHJhbnNhY3Rpb24pOnZvaWR9IGYgT2JzZXJ2ZXIgZnVuY3Rpb25cbiAgICovXG4gIG9ic2VydmUgKGYpIHtcbiAgICBhZGRFdmVudEhhbmRsZXJMaXN0ZW5lcih0aGlzLl9lSCwgZik7XG4gIH1cblxuICAvKipcbiAgICogT2JzZXJ2ZSBhbGwgZXZlbnRzIHRoYXQgYXJlIGNyZWF0ZWQgYnkgdGhpcyB0eXBlIGFuZCBpdHMgY2hpbGRyZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oQXJyYXk8WUV2ZW50PGFueT4+LFRyYW5zYWN0aW9uKTp2b2lkfSBmIE9ic2VydmVyIGZ1bmN0aW9uXG4gICAqL1xuICBvYnNlcnZlRGVlcCAoZikge1xuICAgIGFkZEV2ZW50SGFuZGxlckxpc3RlbmVyKHRoaXMuX2RFSCwgZik7XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlciBhbiBvYnNlcnZlciBmdW5jdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihFdmVudFR5cGUsVHJhbnNhY3Rpb24pOnZvaWR9IGYgT2JzZXJ2ZXIgZnVuY3Rpb25cbiAgICovXG4gIHVub2JzZXJ2ZSAoZikge1xuICAgIHJlbW92ZUV2ZW50SGFuZGxlckxpc3RlbmVyKHRoaXMuX2VILCBmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIGFuIG9ic2VydmVyIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEFycmF5PFlFdmVudDxhbnk+PixUcmFuc2FjdGlvbik6dm9pZH0gZiBPYnNlcnZlciBmdW5jdGlvblxuICAgKi9cbiAgdW5vYnNlcnZlRGVlcCAoZikge1xuICAgIHJlbW92ZUV2ZW50SGFuZGxlckxpc3RlbmVyKHRoaXMuX2RFSCwgZik7XG4gIH1cblxuICAvKipcbiAgICogQGFic3RyYWN0XG4gICAqIEByZXR1cm4ge2FueX1cbiAgICovXG4gIHRvSlNPTiAoKSB7fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVMaXN0U2xpY2UgPSAodHlwZSwgc3RhcnQsIGVuZCkgPT4ge1xuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSB0eXBlLl9sZW5ndGggKyBzdGFydDtcbiAgfVxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCA9IHR5cGUuX2xlbmd0aCArIGVuZDtcbiAgfVxuICBsZXQgbGVuID0gZW5kIC0gc3RhcnQ7XG4gIGNvbnN0IGNzID0gW107XG4gIGxldCBuID0gdHlwZS5fc3RhcnQ7XG4gIHdoaWxlIChuICE9PSBudWxsICYmIGxlbiA+IDApIHtcbiAgICBpZiAobi5jb3VudGFibGUgJiYgIW4uZGVsZXRlZCkge1xuICAgICAgY29uc3QgYyA9IG4uY29udGVudC5nZXRDb250ZW50KCk7XG4gICAgICBpZiAoYy5sZW5ndGggPD0gc3RhcnQpIHtcbiAgICAgICAgc3RhcnQgLT0gYy5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBjLmxlbmd0aCAmJiBsZW4gPiAwOyBpKyspIHtcbiAgICAgICAgICBjcy5wdXNoKGNbaV0pO1xuICAgICAgICAgIGxlbi0tO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgbiA9IG4ucmlnaHQ7XG4gIH1cbiAgcmV0dXJuIGNzXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTGlzdFRvQXJyYXkgPSB0eXBlID0+IHtcbiAgY29uc3QgY3MgPSBbXTtcbiAgbGV0IG4gPSB0eXBlLl9zdGFydDtcbiAgd2hpbGUgKG4gIT09IG51bGwpIHtcbiAgICBpZiAobi5jb3VudGFibGUgJiYgIW4uZGVsZXRlZCkge1xuICAgICAgY29uc3QgYyA9IG4uY29udGVudC5nZXRDb250ZW50KCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3MucHVzaChjW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbiA9IG4ucmlnaHQ7XG4gIH1cbiAgcmV0dXJuIGNzXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEBwYXJhbSB7U25hcHNob3R9IHNuYXBzaG90XG4gKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZUxpc3RUb0FycmF5U25hcHNob3QgPSAodHlwZSwgc25hcHNob3QpID0+IHtcbiAgY29uc3QgY3MgPSBbXTtcbiAgbGV0IG4gPSB0eXBlLl9zdGFydDtcbiAgd2hpbGUgKG4gIT09IG51bGwpIHtcbiAgICBpZiAobi5jb3VudGFibGUgJiYgaXNWaXNpYmxlKG4sIHNuYXBzaG90KSkge1xuICAgICAgY29uc3QgYyA9IG4uY29udGVudC5nZXRDb250ZW50KCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3MucHVzaChjW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbiA9IG4ucmlnaHQ7XG4gIH1cbiAgcmV0dXJuIGNzXG59O1xuXG4vKipcbiAqIEV4ZWN1dGVzIGEgcHJvdmlkZWQgZnVuY3Rpb24gb24gb25jZSBvbiBvdmVyeSBlbGVtZW50IG9mIHRoaXMgWUFycmF5LlxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHR5cGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW55LG51bWJlcixhbnkpOnZvaWR9IGYgQSBmdW5jdGlvbiB0byBleGVjdXRlIG9uIGV2ZXJ5IGVsZW1lbnQgb2YgdGhpcyBZQXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTGlzdEZvckVhY2ggPSAodHlwZSwgZikgPT4ge1xuICBsZXQgaW5kZXggPSAwO1xuICBsZXQgbiA9IHR5cGUuX3N0YXJ0O1xuICB3aGlsZSAobiAhPT0gbnVsbCkge1xuICAgIGlmIChuLmNvdW50YWJsZSAmJiAhbi5kZWxldGVkKSB7XG4gICAgICBjb25zdCBjID0gbi5jb250ZW50LmdldENvbnRlbnQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmKGNbaV0sIGluZGV4KyssIHR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBuID0gbi5yaWdodDtcbiAgfVxufTtcblxuLyoqXG4gKiBAdGVtcGxhdGUgQyxSXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEMsbnVtYmVyLEFic3RyYWN0VHlwZTxhbnk+KTpSfSBmXG4gKiBAcmV0dXJuIHtBcnJheTxSPn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVMaXN0TWFwID0gKHR5cGUsIGYpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIHR5cGVMaXN0Rm9yRWFjaCh0eXBlLCAoYywgaSkgPT4ge1xuICAgIHJlc3VsdC5wdXNoKGYoYywgaSwgdHlwZSkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gKiBAcmV0dXJuIHtJdGVyYWJsZUl0ZXJhdG9yPGFueT59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTGlzdENyZWF0ZUl0ZXJhdG9yID0gdHlwZSA9PiB7XG4gIGxldCBuID0gdHlwZS5fc3RhcnQ7XG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8YW55PnxudWxsfVxuICAgKi9cbiAgbGV0IGN1cnJlbnRDb250ZW50ID0gbnVsbDtcbiAgbGV0IGN1cnJlbnRDb250ZW50SW5kZXggPSAwO1xuICByZXR1cm4ge1xuICAgIFtTeW1ib2wuaXRlcmF0b3JdICgpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcbiAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAvLyBmaW5kIHNvbWUgY29udGVudFxuICAgICAgaWYgKGN1cnJlbnRDb250ZW50ID09PSBudWxsKSB7XG4gICAgICAgIHdoaWxlIChuICE9PSBudWxsICYmIG4uZGVsZXRlZCkge1xuICAgICAgICAgIG4gPSBuLnJpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIC8vIGNoZWNrIGlmIHdlIHJlYWNoZWQgdGhlIGVuZCwgbm8gbmVlZCB0byBjaGVjayBjdXJyZW50Q29udGVudCwgYmVjYXVzZSBpdCBkb2VzIG5vdCBleGlzdFxuICAgICAgICBpZiAobiA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBmb3VuZCBuLCBzbyB3ZSBjYW4gc2V0IGN1cnJlbnRDb250ZW50XG4gICAgICAgIGN1cnJlbnRDb250ZW50ID0gbi5jb250ZW50LmdldENvbnRlbnQoKTtcbiAgICAgICAgY3VycmVudENvbnRlbnRJbmRleCA9IDA7XG4gICAgICAgIG4gPSBuLnJpZ2h0OyAvLyB3ZSB1c2VkIHRoZSBjb250ZW50IG9mIG4sIG5vdyBpdGVyYXRlIHRvIG5leHRcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbHVlID0gY3VycmVudENvbnRlbnRbY3VycmVudENvbnRlbnRJbmRleCsrXTtcbiAgICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gZW1wdHkgY3VycmVudENvbnRlbnRcbiAgICAgIGlmIChjdXJyZW50Q29udGVudC5sZW5ndGggPD0gY3VycmVudENvbnRlbnRJbmRleCkge1xuICAgICAgICBjdXJyZW50Q29udGVudCA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHthbnl9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTGlzdEdldCA9ICh0eXBlLCBpbmRleCkgPT4ge1xuICBjb25zdCBtYXJrZXIgPSBmaW5kTWFya2VyKHR5cGUsIGluZGV4KTtcbiAgbGV0IG4gPSB0eXBlLl9zdGFydDtcbiAgaWYgKG1hcmtlciAhPT0gbnVsbCkge1xuICAgIG4gPSBtYXJrZXIucDtcbiAgICBpbmRleCAtPSBtYXJrZXIuaW5kZXg7XG4gIH1cbiAgZm9yICg7IG4gIT09IG51bGw7IG4gPSBuLnJpZ2h0KSB7XG4gICAgaWYgKCFuLmRlbGV0ZWQgJiYgbi5jb3VudGFibGUpIHtcbiAgICAgIGlmIChpbmRleCA8IG4ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBuLmNvbnRlbnQuZ2V0Q29udGVudCgpW2luZGV4XVxuICAgICAgfVxuICAgICAgaW5kZXggLT0gbi5sZW5ndGg7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7SXRlbT99IHJlZmVyZW5jZUl0ZW1cbiAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0PHN0cmluZyxhbnk+fEFycmF5PGFueT58Ym9vbGVhbnxudW1iZXJ8bnVsbHxzdHJpbmd8VWludDhBcnJheT59IGNvbnRlbnRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3NBZnRlciA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCByZWZlcmVuY2VJdGVtLCBjb250ZW50KSA9PiB7XG4gIGxldCBsZWZ0ID0gcmVmZXJlbmNlSXRlbTtcbiAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jO1xuICBjb25zdCBvd25DbGllbnRJZCA9IGRvYy5jbGllbnRJRDtcbiAgY29uc3Qgc3RvcmUgPSBkb2Muc3RvcmU7XG4gIGNvbnN0IHJpZ2h0ID0gcmVmZXJlbmNlSXRlbSA9PT0gbnVsbCA/IHBhcmVudC5fc3RhcnQgOiByZWZlcmVuY2VJdGVtLnJpZ2h0O1xuICAvKipcbiAgICogQHR5cGUge0FycmF5PE9iamVjdHxBcnJheTxhbnk+fG51bWJlcnxudWxsPn1cbiAgICovXG4gIGxldCBqc29uQ29udGVudCA9IFtdO1xuICBjb25zdCBwYWNrSnNvbkNvbnRlbnQgPSAoKSA9PiB7XG4gICAgaWYgKGpzb25Db250ZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgIGxlZnQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoc3RvcmUsIG93bkNsaWVudElkKSksIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCwgcGFyZW50LCBudWxsLCBuZXcgQ29udGVudEFueShqc29uQ29udGVudCkpO1xuICAgICAgbGVmdC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApO1xuICAgICAganNvbkNvbnRlbnQgPSBbXTtcbiAgICB9XG4gIH07XG4gIGNvbnRlbnQuZm9yRWFjaChjID0+IHtcbiAgICBpZiAoYyA9PT0gbnVsbCkge1xuICAgICAganNvbkNvbnRlbnQucHVzaChjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGNhc2UgTnVtYmVyOlxuICAgICAgICBjYXNlIE9iamVjdDpcbiAgICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICBjYXNlIEFycmF5OlxuICAgICAgICBjYXNlIFN0cmluZzpcbiAgICAgICAgICBqc29uQ29udGVudC5wdXNoKGMpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcGFja0pzb25Db250ZW50KCk7XG4gICAgICAgICAgc3dpdGNoIChjLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjYXNlIFVpbnQ4QXJyYXk6XG4gICAgICAgICAgICBjYXNlIEFycmF5QnVmZmVyOlxuICAgICAgICAgICAgICBsZWZ0ID0gbmV3IEl0ZW0oY3JlYXRlSUQob3duQ2xpZW50SWQsIGdldFN0YXRlKHN0b3JlLCBvd25DbGllbnRJZCkpLCBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLCByaWdodCwgcmlnaHQgJiYgcmlnaHQuaWQsIHBhcmVudCwgbnVsbCwgbmV3IENvbnRlbnRCaW5hcnkobmV3IFVpbnQ4QXJyYXkoLyoqIEB0eXBlIHtVaW50OEFycmF5fSAqLyAoYykpKSk7XG4gICAgICAgICAgICAgIGxlZnQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKTtcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgRG9jOlxuICAgICAgICAgICAgICBsZWZ0ID0gbmV3IEl0ZW0oY3JlYXRlSUQob3duQ2xpZW50SWQsIGdldFN0YXRlKHN0b3JlLCBvd25DbGllbnRJZCkpLCBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLCByaWdodCwgcmlnaHQgJiYgcmlnaHQuaWQsIHBhcmVudCwgbnVsbCwgbmV3IENvbnRlbnREb2MoLyoqIEB0eXBlIHtEb2N9ICovIChjKSkpO1xuICAgICAgICAgICAgICBsZWZ0LmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMCk7XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBpZiAoYyBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSkge1xuICAgICAgICAgICAgICAgIGxlZnQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoc3RvcmUsIG93bkNsaWVudElkKSksIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCwgcGFyZW50LCBudWxsLCBuZXcgQ29udGVudFR5cGUoYykpO1xuICAgICAgICAgICAgICAgIGxlZnQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgY29udGVudCB0eXBlIGluIGluc2VydCBvcGVyYXRpb24nKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHBhY2tKc29uQ29udGVudCgpO1xufTtcblxuY29uc3QgbGVuZ3RoRXhjZWVkZWQgPSBlcnJvci5jcmVhdGUoJ0xlbmd0aCBleGNlZWRlZCEnKTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0PHN0cmluZyxhbnk+fEFycmF5PGFueT58bnVtYmVyfG51bGx8c3RyaW5nfFVpbnQ4QXJyYXk+fSBjb250ZW50XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTGlzdEluc2VydEdlbmVyaWNzID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGluZGV4LCBjb250ZW50KSA9PiB7XG4gIGlmIChpbmRleCA+IHBhcmVudC5fbGVuZ3RoKSB7XG4gICAgdGhyb3cgbGVuZ3RoRXhjZWVkZWRcbiAgfVxuICBpZiAoaW5kZXggPT09IDApIHtcbiAgICBpZiAocGFyZW50Ll9zZWFyY2hNYXJrZXIpIHtcbiAgICAgIHVwZGF0ZU1hcmtlckNoYW5nZXMocGFyZW50Ll9zZWFyY2hNYXJrZXIsIGluZGV4LCBjb250ZW50Lmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiB0eXBlTGlzdEluc2VydEdlbmVyaWNzQWZ0ZXIodHJhbnNhY3Rpb24sIHBhcmVudCwgbnVsbCwgY29udGVudClcbiAgfVxuICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXg7XG4gIGNvbnN0IG1hcmtlciA9IGZpbmRNYXJrZXIocGFyZW50LCBpbmRleCk7XG4gIGxldCBuID0gcGFyZW50Ll9zdGFydDtcbiAgaWYgKG1hcmtlciAhPT0gbnVsbCkge1xuICAgIG4gPSBtYXJrZXIucDtcbiAgICBpbmRleCAtPSBtYXJrZXIuaW5kZXg7XG4gICAgLy8gd2UgbmVlZCB0byBpdGVyYXRlIG9uZSB0byB0aGUgbGVmdCBzbyB0aGF0IHRoZSBhbGdvcml0aG0gd29ya3NcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIC8vIEB0b2RvIHJlZmFjdG9yIHRoaXMgYXMgaXQgYWN0dWFsbHkgZG9lc24ndCBjb25zaWRlciBmb3JtYXRzXG4gICAgICBuID0gbi5wcmV2OyAvLyBpbXBvcnRhbnQhIGdldCB0aGUgbGVmdCB1bmRlbGV0ZWQgaXRlbSBzbyB0aGF0IHdlIGNhbiBhY3R1YWxseSBkZWNyZWFzZSBpbmRleFxuICAgICAgaW5kZXggKz0gKG4gJiYgbi5jb3VudGFibGUgJiYgIW4uZGVsZXRlZCkgPyBuLmxlbmd0aCA6IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBuICE9PSBudWxsOyBuID0gbi5yaWdodCkge1xuICAgIGlmICghbi5kZWxldGVkICYmIG4uY291bnRhYmxlKSB7XG4gICAgICBpZiAoaW5kZXggPD0gbi5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgbi5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBpbnNlcnQgaW4tYmV0d2VlblxuICAgICAgICAgIGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBjcmVhdGVJRChuLmlkLmNsaWVudCwgbi5pZC5jbG9jayArIGluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGluZGV4IC09IG4ubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBpZiAocGFyZW50Ll9zZWFyY2hNYXJrZXIpIHtcbiAgICB1cGRhdGVNYXJrZXJDaGFuZ2VzKHBhcmVudC5fc2VhcmNoTWFya2VyLCBzdGFydEluZGV4LCBjb250ZW50Lmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIHR5cGVMaXN0SW5zZXJ0R2VuZXJpY3NBZnRlcih0cmFuc2FjdGlvbiwgcGFyZW50LCBuLCBjb250ZW50KVxufTtcblxuLyoqXG4gKiBQdXNoaW5nIGNvbnRlbnQgaXMgc3BlY2lhbCBhcyB3ZSBnZW5lcmFsbHkgd2FudCB0byBwdXNoIGFmdGVyIHRoZSBsYXN0IGl0ZW0uIFNvIHdlIGRvbid0IGhhdmUgdG8gdXBkYXRlXG4gKiB0aGUgc2VyYWNoIG1hcmtlci5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdDxzdHJpbmcsYW55PnxBcnJheTxhbnk+fG51bWJlcnxudWxsfHN0cmluZ3xVaW50OEFycmF5Pn0gY29udGVudFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZUxpc3RQdXNoR2VuZXJpY3MgPSAodHJhbnNhY3Rpb24sIHBhcmVudCwgY29udGVudCkgPT4ge1xuICAvLyBVc2UgdGhlIG1hcmtlciB3aXRoIHRoZSBoaWdoZXN0IGluZGV4IGFuZCBpdGVyYXRlIHRvIHRoZSByaWdodC5cbiAgY29uc3QgbWFya2VyID0gKHBhcmVudC5fc2VhcmNoTWFya2VyIHx8IFtdKS5yZWR1Y2UoKG1heE1hcmtlciwgY3Vyck1hcmtlcikgPT4gY3Vyck1hcmtlci5pbmRleCA+IG1heE1hcmtlci5pbmRleCA/IGN1cnJNYXJrZXIgOiBtYXhNYXJrZXIsIHsgaW5kZXg6IDAsIHA6IHBhcmVudC5fc3RhcnQgfSk7XG4gIGxldCBuID0gbWFya2VyLnA7XG4gIGlmIChuKSB7XG4gICAgd2hpbGUgKG4ucmlnaHQpIHtcbiAgICAgIG4gPSBuLnJpZ2h0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHlwZUxpc3RJbnNlcnRHZW5lcmljc0FmdGVyKHRyYW5zYWN0aW9uLCBwYXJlbnQsIG4sIGNvbnRlbnQpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZUxpc3REZWxldGUgPSAodHJhbnNhY3Rpb24sIHBhcmVudCwgaW5kZXgsIGxlbmd0aCkgPT4ge1xuICBpZiAobGVuZ3RoID09PSAwKSB7IHJldHVybiB9XG4gIGNvbnN0IHN0YXJ0SW5kZXggPSBpbmRleDtcbiAgY29uc3Qgc3RhcnRMZW5ndGggPSBsZW5ndGg7XG4gIGNvbnN0IG1hcmtlciA9IGZpbmRNYXJrZXIocGFyZW50LCBpbmRleCk7XG4gIGxldCBuID0gcGFyZW50Ll9zdGFydDtcbiAgaWYgKG1hcmtlciAhPT0gbnVsbCkge1xuICAgIG4gPSBtYXJrZXIucDtcbiAgICBpbmRleCAtPSBtYXJrZXIuaW5kZXg7XG4gIH1cbiAgLy8gY29tcHV0ZSB0aGUgZmlyc3QgaXRlbSB0byBiZSBkZWxldGVkXG4gIGZvciAoOyBuICE9PSBudWxsICYmIGluZGV4ID4gMDsgbiA9IG4ucmlnaHQpIHtcbiAgICBpZiAoIW4uZGVsZXRlZCAmJiBuLmNvdW50YWJsZSkge1xuICAgICAgaWYgKGluZGV4IDwgbi5sZW5ndGgpIHtcbiAgICAgICAgZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGNyZWF0ZUlEKG4uaWQuY2xpZW50LCBuLmlkLmNsb2NrICsgaW5kZXgpKTtcbiAgICAgIH1cbiAgICAgIGluZGV4IC09IG4ubGVuZ3RoO1xuICAgIH1cbiAgfVxuICAvLyBkZWxldGUgYWxsIGl0ZW1zIHVudGlsIGRvbmVcbiAgd2hpbGUgKGxlbmd0aCA+IDAgJiYgbiAhPT0gbnVsbCkge1xuICAgIGlmICghbi5kZWxldGVkKSB7XG4gICAgICBpZiAobGVuZ3RoIDwgbi5sZW5ndGgpIHtcbiAgICAgICAgZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGNyZWF0ZUlEKG4uaWQuY2xpZW50LCBuLmlkLmNsb2NrICsgbGVuZ3RoKSk7XG4gICAgICB9XG4gICAgICBuLmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICBsZW5ndGggLT0gbi5sZW5ndGg7XG4gICAgfVxuICAgIG4gPSBuLnJpZ2h0O1xuICB9XG4gIGlmIChsZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbGVuZ3RoRXhjZWVkZWRcbiAgfVxuICBpZiAocGFyZW50Ll9zZWFyY2hNYXJrZXIpIHtcbiAgICB1cGRhdGVNYXJrZXJDaGFuZ2VzKHBhcmVudC5fc2VhcmNoTWFya2VyLCBzdGFydEluZGV4LCAtc3RhcnRMZW5ndGggKyBsZW5ndGggLyogaW4gY2FzZSB3ZSByZW1vdmUgdGhlIGFib3ZlIGV4Y2VwdGlvbiAqLyk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgdHlwZU1hcERlbGV0ZSA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBrZXkpID0+IHtcbiAgY29uc3QgYyA9IHBhcmVudC5fbWFwLmdldChrZXkpO1xuICBpZiAoYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgYy5kZWxldGUodHJhbnNhY3Rpb24pO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7T2JqZWN0fG51bWJlcnxudWxsfEFycmF5PGFueT58c3RyaW5nfFVpbnQ4QXJyYXl8QWJzdHJhY3RUeXBlPGFueT59IHZhbHVlXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTWFwU2V0ID0gKHRyYW5zYWN0aW9uLCBwYXJlbnQsIGtleSwgdmFsdWUpID0+IHtcbiAgY29uc3QgbGVmdCA9IHBhcmVudC5fbWFwLmdldChrZXkpIHx8IG51bGw7XG4gIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvYztcbiAgY29uc3Qgb3duQ2xpZW50SWQgPSBkb2MuY2xpZW50SUQ7XG4gIGxldCBjb250ZW50O1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIGNvbnRlbnQgPSBuZXcgQ29udGVudEFueShbdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKHZhbHVlLmNvbnN0cnVjdG9yKSB7XG4gICAgICBjYXNlIE51bWJlcjpcbiAgICAgIGNhc2UgT2JqZWN0OlxuICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgY2FzZSBBcnJheTpcbiAgICAgIGNhc2UgU3RyaW5nOlxuICAgICAgICBjb250ZW50ID0gbmV3IENvbnRlbnRBbnkoW3ZhbHVlXSk7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFVpbnQ4QXJyYXk6XG4gICAgICAgIGNvbnRlbnQgPSBuZXcgQ29udGVudEJpbmFyeSgvKiogQHR5cGUge1VpbnQ4QXJyYXl9ICovICh2YWx1ZSkpO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSBEb2M6XG4gICAgICAgIGNvbnRlbnQgPSBuZXcgQ29udGVudERvYygvKiogQHR5cGUge0RvY30gKi8gKHZhbHVlKSk7XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBYnN0cmFjdFR5cGUpIHtcbiAgICAgICAgICBjb250ZW50ID0gbmV3IENvbnRlbnRUeXBlKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgY29udGVudCB0eXBlJylcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuICBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoZG9jLnN0b3JlLCBvd25DbGllbnRJZCkpLCBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLCBudWxsLCBudWxsLCBwYXJlbnQsIGtleSwgY29udGVudCkuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLGFueT58bnVtYmVyfG51bGx8QXJyYXk8YW55PnxzdHJpbmd8VWludDhBcnJheXxBYnN0cmFjdFR5cGU8YW55Pnx1bmRlZmluZWR9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTWFwR2V0ID0gKHBhcmVudCwga2V5KSA9PiB7XG4gIGNvbnN0IHZhbCA9IHBhcmVudC5fbWFwLmdldChrZXkpO1xuICByZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgJiYgIXZhbC5kZWxldGVkID8gdmFsLmNvbnRlbnQuZ2V0Q29udGVudCgpW3ZhbC5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsT2JqZWN0PHN0cmluZyxhbnk+fG51bWJlcnxudWxsfEFycmF5PGFueT58c3RyaW5nfFVpbnQ4QXJyYXl8QWJzdHJhY3RUeXBlPGFueT58dW5kZWZpbmVkPn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVNYXBHZXRBbGwgPSAocGFyZW50KSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxhbnk+fVxuICAgKi9cbiAgY29uc3QgcmVzID0ge307XG4gIHBhcmVudC5fbWFwLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICBpZiAoIXZhbHVlLmRlbGV0ZWQpIHtcbiAgICAgIHJlc1trZXldID0gdmFsdWUuY29udGVudC5nZXRDb250ZW50KClbdmFsdWUubGVuZ3RoIC0gMV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCB0eXBlTWFwSGFzID0gKHBhcmVudCwga2V5KSA9PiB7XG4gIGNvbnN0IHZhbCA9IHBhcmVudC5fbWFwLmdldChrZXkpO1xuICByZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgJiYgIXZhbC5kZWxldGVkXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHtTbmFwc2hvdH0gc25hcHNob3RcbiAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsYW55PnxudW1iZXJ8bnVsbHxBcnJheTxhbnk+fHN0cmluZ3xVaW50OEFycmF5fEFic3RyYWN0VHlwZTxhbnk+fHVuZGVmaW5lZH1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHR5cGVNYXBHZXRTbmFwc2hvdCA9IChwYXJlbnQsIGtleSwgc25hcHNob3QpID0+IHtcbiAgbGV0IHYgPSBwYXJlbnQuX21hcC5nZXQoa2V5KSB8fCBudWxsO1xuICB3aGlsZSAodiAhPT0gbnVsbCAmJiAoIXNuYXBzaG90LnN2Lmhhcyh2LmlkLmNsaWVudCkgfHwgdi5pZC5jbG9jayA+PSAoc25hcHNob3Quc3YuZ2V0KHYuaWQuY2xpZW50KSB8fCAwKSkpIHtcbiAgICB2ID0gdi5sZWZ0O1xuICB9XG4gIHJldHVybiB2ICE9PSBudWxsICYmIGlzVmlzaWJsZSh2LCBzbmFwc2hvdCkgPyB2LmNvbnRlbnQuZ2V0Q29udGVudCgpW3YubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWRcbn07XG5cbi8qKlxuICogQHBhcmFtIHtNYXA8c3RyaW5nLEl0ZW0+fSBtYXBcbiAqIEByZXR1cm4ge0l0ZXJhYmxlSXRlcmF0b3I8QXJyYXk8YW55Pj59XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBjcmVhdGVNYXBJdGVyYXRvciA9IG1hcCA9PiBpdGVyYXRvci5pdGVyYXRvckZpbHRlcihtYXAuZW50cmllcygpLCAvKiogQHBhcmFtIHthbnl9IGVudHJ5ICovIGVudHJ5ID0+ICFlbnRyeVsxXS5kZWxldGVkKTtcblxuLyoqXG4gKiBAbW9kdWxlIFlBcnJheVxuICovXG5cbi8qKlxuICogRXZlbnQgdGhhdCBkZXNjcmliZXMgdGhlIGNoYW5nZXMgb24gYSBZQXJyYXlcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAZXh0ZW5kcyBZRXZlbnQ8WUFycmF5PFQ+PlxuICovXG5jbGFzcyBZQXJyYXlFdmVudCBleHRlbmRzIFlFdmVudCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1lBcnJheTxUPn0geWFycmF5IFRoZSBjaGFuZ2VkIHR5cGVcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb24gVGhlIHRyYW5zYWN0aW9uIG9iamVjdFxuICAgKi9cbiAgY29uc3RydWN0b3IgKHlhcnJheSwgdHJhbnNhY3Rpb24pIHtcbiAgICBzdXBlcih5YXJyYXksIHRyYW5zYWN0aW9uKTtcbiAgICB0aGlzLl90cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uO1xuICB9XG59XG5cbi8qKlxuICogQSBzaGFyZWQgQXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKiBAdGVtcGxhdGUgVFxuICogQGV4dGVuZHMgQWJzdHJhY3RUeXBlPFlBcnJheUV2ZW50PFQ+PlxuICogQGltcGxlbWVudHMge0l0ZXJhYmxlPFQ+fVxuICovXG5jbGFzcyBZQXJyYXkgZXh0ZW5kcyBBYnN0cmFjdFR5cGUge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8YW55Pj99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9wcmVsaW1Db250ZW50ID0gW107XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PEFycmF5U2VhcmNoTWFya2VyPn1cbiAgICAgKi9cbiAgICB0aGlzLl9zZWFyY2hNYXJrZXIgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgWUFycmF5IGNvbnRhaW5pbmcgdGhlIHNwZWNpZmllZCBpdGVtcy5cbiAgICogQHRlbXBsYXRlIFRcbiAgICogQHBhcmFtIHtBcnJheTxUPn0gaXRlbXNcbiAgICogQHJldHVybiB7WUFycmF5PFQ+fVxuICAgKi9cbiAgc3RhdGljIGZyb20gKGl0ZW1zKSB7XG4gICAgY29uc3QgYSA9IG5ldyBZQXJyYXkoKTtcbiAgICBhLnB1c2goaXRlbXMpO1xuICAgIHJldHVybiBhXG4gIH1cblxuICAvKipcbiAgICogSW50ZWdyYXRlIHRoaXMgdHlwZSBpbnRvIHRoZSBZanMgaW5zdGFuY2UuXG4gICAqXG4gICAqICogU2F2ZSB0aGlzIHN0cnVjdCBpbiB0aGUgb3NcbiAgICogKiBUaGlzIHR5cGUgaXMgc2VudCB0byBvdGhlciBjbGllbnRcbiAgICogKiBPYnNlcnZlciBmdW5jdGlvbnMgYXJlIGZpcmVkXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jfSB5IFRoZSBZanMgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBfaW50ZWdyYXRlICh5LCBpdGVtKSB7XG4gICAgc3VwZXIuX2ludGVncmF0ZSh5LCBpdGVtKTtcbiAgICB0aGlzLmluc2VydCgwLCAvKiogQHR5cGUge0FycmF5PGFueT59ICovICh0aGlzLl9wcmVsaW1Db250ZW50KSk7XG4gICAgdGhpcy5fcHJlbGltQ29udGVudCA9IG51bGw7XG4gIH1cblxuICBfY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBZQXJyYXkoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1lBcnJheTxUPn1cbiAgICovXG4gIGNsb25lICgpIHtcbiAgICBjb25zdCBhcnIgPSBuZXcgWUFycmF5KCk7XG4gICAgYXJyLmluc2VydCgwLCB0aGlzLnRvQXJyYXkoKS5tYXAoZWwgPT5cbiAgICAgIGVsIGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlID8gZWwuY2xvbmUoKSA6IGVsXG4gICAgKSk7XG4gICAgcmV0dXJuIGFyclxuICB9XG5cbiAgZ2V0IGxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZWxpbUNvbnRlbnQgPT09IG51bGwgPyB0aGlzLl9sZW5ndGggOiB0aGlzLl9wcmVsaW1Db250ZW50Lmxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgWUFycmF5RXZlbnQgYW5kIGNhbGxzIG9ic2VydmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTZXQ8bnVsbHxzdHJpbmc+fSBwYXJlbnRTdWJzIEtleXMgY2hhbmdlZCBvbiB0aGlzIHR5cGUuIGBudWxsYCBpZiBsaXN0IHdhcyBtb2RpZmllZC5cbiAgICovXG4gIF9jYWxsT2JzZXJ2ZXIgKHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKSB7XG4gICAgc3VwZXIuX2NhbGxPYnNlcnZlcih0cmFuc2FjdGlvbiwgcGFyZW50U3Vicyk7XG4gICAgY2FsbFR5cGVPYnNlcnZlcnModGhpcywgdHJhbnNhY3Rpb24sIG5ldyBZQXJyYXlFdmVudCh0aGlzLCB0cmFuc2FjdGlvbikpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgbmV3IGNvbnRlbnQgYXQgYW4gaW5kZXguXG4gICAqXG4gICAqIEltcG9ydGFudDogVGhpcyBmdW5jdGlvbiBleHBlY3RzIGFuIGFycmF5IG9mIGNvbnRlbnQuIE5vdCBqdXN0IGEgY29udGVudFxuICAgKiBvYmplY3QuIFRoZSByZWFzb24gZm9yIHRoaXMgXCJ3ZWlyZG5lc3NcIiBpcyB0aGF0IGluc2VydGluZyBzZXZlcmFsIGVsZW1lbnRzXG4gICAqIGlzIHZlcnkgZWZmaWNpZW50IHdoZW4gaXQgaXMgZG9uZSBhcyBhIHNpbmdsZSBvcGVyYXRpb24uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAvLyBJbnNlcnQgY2hhcmFjdGVyICdhJyBhdCBwb3NpdGlvbiAwXG4gICAqICB5YXJyYXkuaW5zZXJ0KDAsIFsnYSddKVxuICAgKiAgLy8gSW5zZXJ0IG51bWJlcnMgMSwgMiBhdCBwb3NpdGlvbiAxXG4gICAqICB5YXJyYXkuaW5zZXJ0KDEsIFsxLCAyXSlcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCB0byBpbnNlcnQgY29udGVudCBhdC5cbiAgICogQHBhcmFtIHtBcnJheTxUPn0gY29udGVudCBUaGUgYXJyYXkgb2YgY29udGVudFxuICAgKi9cbiAgaW5zZXJ0IChpbmRleCwgY29udGVudCkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZUxpc3RJbnNlcnRHZW5lcmljcyh0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgsIGNvbnRlbnQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8YW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpLnNwbGljZShpbmRleCwgMCwgLi4uY29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgY29udGVudCB0byB0aGlzIFlBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxUPn0gY29udGVudCBBcnJheSBvZiBjb250ZW50IHRvIGFwcGVuZC5cbiAgICpcbiAgICogQHRvZG8gVXNlIHRoZSBmb2xsb3dpbmcgaW1wbGVtZW50YXRpb24gaW4gYWxsIHR5cGVzLlxuICAgKi9cbiAgcHVzaCAoY29udGVudCkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZUxpc3RQdXNoR2VuZXJpY3ModHJhbnNhY3Rpb24sIHRoaXMsIGNvbnRlbnQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8YW55Pn0gKi8gKHRoaXMuX3ByZWxpbUNvbnRlbnQpLnB1c2goLi4uY29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByZXBwZW5kcyBjb250ZW50IHRvIHRoaXMgWUFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PFQ+fSBjb250ZW50IEFycmF5IG9mIGNvbnRlbnQgdG8gcHJlcHBlbmQuXG4gICAqL1xuICB1bnNoaWZ0IChjb250ZW50KSB7XG4gICAgdGhpcy5pbnNlcnQoMCwgY29udGVudCk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBlbGVtZW50cyBzdGFydGluZyBmcm9tIGFuIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gc3RhcnQgZGVsZXRpbmcgZWxlbWVudHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS4gRGVmYXVsdHMgdG8gMS5cbiAgICovXG4gIGRlbGV0ZSAoaW5kZXgsIGxlbmd0aCA9IDEpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVMaXN0RGVsZXRlKHRyYW5zYWN0aW9uLCB0aGlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGFueT59ICovICh0aGlzLl9wcmVsaW1Db250ZW50KS5zcGxpY2UoaW5kZXgsIGxlbmd0aCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGktdGggZWxlbWVudCBmcm9tIGEgWUFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybiBmcm9tIHRoZSBZQXJyYXlcbiAgICogQHJldHVybiB7VH1cbiAgICovXG4gIGdldCAoaW5kZXgpIHtcbiAgICByZXR1cm4gdHlwZUxpc3RHZXQodGhpcywgaW5kZXgpXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyB0aGlzIFlBcnJheSB0byBhIEphdmFTY3JpcHQgQXJyYXkuXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5PFQ+fVxuICAgKi9cbiAgdG9BcnJheSAoKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0VG9BcnJheSh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhpcyBZQXJyYXkgdG8gYSBKYXZhU2NyaXB0IEFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0XVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZF1cbiAgICogQHJldHVybiB7QXJyYXk8VD59XG4gICAqL1xuICBzbGljZSAoc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiB0eXBlTGlzdFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyB0aGlzIFNoYXJlZCBUeXBlIHRvIGEgSlNPTiBvYmplY3QuXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChjID0+IGMgaW5zdGFuY2VvZiBBYnN0cmFjdFR5cGUgPyBjLnRvSlNPTigpIDogYylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIEFycmF5IHdpdGggdGhlIHJlc3VsdCBvZiBjYWxsaW5nIGEgcHJvdmlkZWQgZnVuY3Rpb24gb24gZXZlcnlcbiAgICogZWxlbWVudCBvZiB0aGlzIFlBcnJheS5cbiAgICpcbiAgICogQHRlbXBsYXRlIE1cbiAgICogQHBhcmFtIHtmdW5jdGlvbihULG51bWJlcixZQXJyYXk8VD4pOk19IGYgRnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBlbGVtZW50IG9mIHRoZSBuZXcgQXJyYXlcbiAgICogQHJldHVybiB7QXJyYXk8TT59IEEgbmV3IGFycmF5IHdpdGggZWFjaCBlbGVtZW50IGJlaW5nIHRoZSByZXN1bHQgb2YgdGhlXG4gICAqICAgICAgICAgICAgICAgICBjYWxsYmFjayBmdW5jdGlvblxuICAgKi9cbiAgbWFwIChmKSB7XG4gICAgcmV0dXJuIHR5cGVMaXN0TWFwKHRoaXMsIC8qKiBAdHlwZSB7YW55fSAqLyAoZikpXG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgYSBwcm92aWRlZCBmdW5jdGlvbiBvbiBvbmNlIG9uIG92ZXJ5IGVsZW1lbnQgb2YgdGhpcyBZQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oVCxudW1iZXIsWUFycmF5PFQ+KTp2b2lkfSBmIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBldmVyeSBlbGVtZW50IG9mIHRoaXMgWUFycmF5LlxuICAgKi9cbiAgZm9yRWFjaCAoZikge1xuICAgIHR5cGVMaXN0Rm9yRWFjaCh0aGlzLCBmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtJdGVyYWJsZUl0ZXJhdG9yPFQ+fVxuICAgKi9cbiAgW1N5bWJvbC5pdGVyYXRvcl0gKCkge1xuICAgIHJldHVybiB0eXBlTGlzdENyZWF0ZUl0ZXJhdG9yKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICovXG4gIF93cml0ZSAoZW5jb2Rlcikge1xuICAgIGVuY29kZXIud3JpdGVUeXBlUmVmKFlBcnJheVJlZklEKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkWUFycmF5ID0gZGVjb2RlciA9PiBuZXcgWUFycmF5KCk7XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBleHRlbmRzIFlFdmVudDxZTWFwPFQ+PlxuICogRXZlbnQgdGhhdCBkZXNjcmliZXMgdGhlIGNoYW5nZXMgb24gYSBZTWFwLlxuICovXG5jbGFzcyBZTWFwRXZlbnQgZXh0ZW5kcyBZRXZlbnQge1xuICAvKipcbiAgICogQHBhcmFtIHtZTWFwPFQ+fSB5bWFwIFRoZSBZQXJyYXkgdGhhdCBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1NldDxhbnk+fSBzdWJzIFRoZSBrZXlzIHRoYXQgY2hhbmdlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yICh5bWFwLCB0cmFuc2FjdGlvbiwgc3Vicykge1xuICAgIHN1cGVyKHltYXAsIHRyYW5zYWN0aW9uKTtcbiAgICB0aGlzLmtleXNDaGFuZ2VkID0gc3VicztcbiAgfVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBNYXBUeXBlXG4gKiBBIHNoYXJlZCBNYXAgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQGV4dGVuZHMgQWJzdHJhY3RUeXBlPFlNYXBFdmVudDxNYXBUeXBlPj5cbiAqIEBpbXBsZW1lbnRzIHtJdGVyYWJsZTxNYXBUeXBlPn1cbiAqL1xuY2xhc3MgWU1hcCBleHRlbmRzIEFic3RyYWN0VHlwZSB7XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0l0ZXJhYmxlPHJlYWRvbmx5IFtzdHJpbmcsIGFueV0+PX0gZW50cmllcyAtIGFuIG9wdGlvbmFsIGl0ZXJhYmxlIHRvIGluaXRpYWxpemUgdGhlIFlNYXBcbiAgICovXG4gIGNvbnN0cnVjdG9yIChlbnRyaWVzKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZyxhbnk+P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQgPSBudWxsO1xuXG4gICAgaWYgKGVudHJpZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fcHJlbGltQ29udGVudCA9IG5ldyBNYXAoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcHJlbGltQ29udGVudCA9IG5ldyBNYXAoZW50cmllcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludGVncmF0ZSB0aGlzIHR5cGUgaW50byB0aGUgWWpzIGluc3RhbmNlLlxuICAgKlxuICAgKiAqIFNhdmUgdGhpcyBzdHJ1Y3QgaW4gdGhlIG9zXG4gICAqICogVGhpcyB0eXBlIGlzIHNlbnQgdG8gb3RoZXIgY2xpZW50XG4gICAqICogT2JzZXJ2ZXIgZnVuY3Rpb25zIGFyZSBmaXJlZFxuICAgKlxuICAgKiBAcGFyYW0ge0RvY30geSBUaGUgWWpzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgX2ludGVncmF0ZSAoeSwgaXRlbSkge1xuICAgIHN1cGVyLl9pbnRlZ3JhdGUoeSwgaXRlbSlcbiAgICA7LyoqIEB0eXBlIHtNYXA8c3RyaW5nLCBhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgdGhpcy5fcHJlbGltQ29udGVudCA9IG51bGw7XG4gIH1cblxuICBfY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBZTWFwKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtZTWFwPE1hcFR5cGU+fVxuICAgKi9cbiAgY2xvbmUgKCkge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBZTWFwKCk7XG4gICAgdGhpcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBtYXAuc2V0KGtleSwgdmFsdWUgaW5zdGFuY2VvZiBBYnN0cmFjdFR5cGUgPyB2YWx1ZS5jbG9uZSgpIDogdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXBcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIFlNYXBFdmVudCBhbmQgY2FsbHMgb2JzZXJ2ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1NldDxudWxsfHN0cmluZz59IHBhcmVudFN1YnMgS2V5cyBjaGFuZ2VkIG9uIHRoaXMgdHlwZS4gYG51bGxgIGlmIGxpc3Qgd2FzIG1vZGlmaWVkLlxuICAgKi9cbiAgX2NhbGxPYnNlcnZlciAodHJhbnNhY3Rpb24sIHBhcmVudFN1YnMpIHtcbiAgICBjYWxsVHlwZU9ic2VydmVycyh0aGlzLCB0cmFuc2FjdGlvbiwgbmV3IFlNYXBFdmVudCh0aGlzLCB0cmFuc2FjdGlvbiwgcGFyZW50U3VicykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhpcyBTaGFyZWQgVHlwZSB0byBhIEpTT04gb2JqZWN0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLGFueT59XG4gICAqL1xuICB0b0pTT04gKCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLE1hcFR5cGU+fVxuICAgICAqL1xuICAgIGNvbnN0IG1hcCA9IHt9O1xuICAgIHRoaXMuX21hcC5mb3JFYWNoKChpdGVtLCBrZXkpID0+IHtcbiAgICAgIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgIGNvbnN0IHYgPSBpdGVtLmNvbnRlbnQuZ2V0Q29udGVudCgpW2l0ZW0ubGVuZ3RoIC0gMV07XG4gICAgICAgIG1hcFtrZXldID0gdiBpbnN0YW5jZW9mIEFic3RyYWN0VHlwZSA/IHYudG9KU09OKCkgOiB2O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtYXBcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzaXplIG9mIHRoZSBZTWFwIChjb3VudCBvZiBrZXkvdmFsdWUgcGFpcnMpXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBzaXplICgpIHtcbiAgICByZXR1cm4gWy4uLmNyZWF0ZU1hcEl0ZXJhdG9yKHRoaXMuX21hcCldLmxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGtleXMgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgWU1hcCBUeXBlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtJdGVyYWJsZUl0ZXJhdG9yPHN0cmluZz59XG4gICAqL1xuICBrZXlzICgpIHtcbiAgICByZXR1cm4gaXRlcmF0b3IuaXRlcmF0b3JNYXAoY3JlYXRlTWFwSXRlcmF0b3IodGhpcy5fbWFwKSwgLyoqIEBwYXJhbSB7YW55fSB2ICovIHYgPT4gdlswXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZXMgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgWU1hcCBUeXBlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtJdGVyYWJsZUl0ZXJhdG9yPGFueT59XG4gICAqL1xuICB2YWx1ZXMgKCkge1xuICAgIHJldHVybiBpdGVyYXRvci5pdGVyYXRvck1hcChjcmVhdGVNYXBJdGVyYXRvcih0aGlzLl9tYXApLCAvKiogQHBhcmFtIHthbnl9IHYgKi8gdiA9PiB2WzFdLmNvbnRlbnQuZ2V0Q29udGVudCgpW3ZbMV0ubGVuZ3RoIC0gMV0pXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJdGVyYXRvciBvZiBba2V5LCB2YWx1ZV0gcGFpcnNcbiAgICpcbiAgICogQHJldHVybiB7SXRlcmFibGVJdGVyYXRvcjxhbnk+fVxuICAgKi9cbiAgZW50cmllcyAoKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yLml0ZXJhdG9yTWFwKGNyZWF0ZU1hcEl0ZXJhdG9yKHRoaXMuX21hcCksIC8qKiBAcGFyYW0ge2FueX0gdiAqLyB2ID0+IFt2WzBdLCB2WzFdLmNvbnRlbnQuZ2V0Q29udGVudCgpW3ZbMV0ubGVuZ3RoIC0gMV1dKVxuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGEgcHJvdmlkZWQgZnVuY3Rpb24gb24gb25jZSBvbiBldmVyeSBrZXktdmFsdWUgcGFpci5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihNYXBUeXBlLHN0cmluZyxZTWFwPE1hcFR5cGU+KTp2b2lkfSBmIEEgZnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBldmVyeSBlbGVtZW50IG9mIHRoaXMgWUFycmF5LlxuICAgKi9cbiAgZm9yRWFjaCAoZikge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLE1hcFR5cGU+fVxuICAgICAqL1xuICAgIGNvbnN0IG1hcCA9IHt9O1xuICAgIHRoaXMuX21hcC5mb3JFYWNoKChpdGVtLCBrZXkpID0+IHtcbiAgICAgIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgIGYoaXRlbS5jb250ZW50LmdldENvbnRlbnQoKVtpdGVtLmxlbmd0aCAtIDFdLCBrZXksIHRoaXMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtYXBcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIEl0ZXJhdG9yIG9mIFtrZXksIHZhbHVlXSBwYWlyc1xuICAgKlxuICAgKiBAcmV0dXJuIHtJdGVyYWJsZUl0ZXJhdG9yPGFueT59XG4gICAqL1xuICBbU3ltYm9sLml0ZXJhdG9yXSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50cmllcygpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgc3BlY2lmaWVkIGVsZW1lbnQgZnJvbSB0aGlzIFlNYXAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZWxlbWVudCB0byByZW1vdmUuXG4gICAqL1xuICBkZWxldGUgKGtleSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZU1hcERlbGV0ZSh0cmFuc2FjdGlvbiwgdGhpcywga2V5KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge01hcDxzdHJpbmcsIGFueT59ICovICh0aGlzLl9wcmVsaW1Db250ZW50KS5kZWxldGUoa2V5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBvciB1cGRhdGVzIGFuIGVsZW1lbnQgd2l0aCBhIHNwZWNpZmllZCBrZXkgYW5kIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVsZW1lbnQgdG8gYWRkIHRvIHRoaXMgWU1hcFxuICAgKiBAcGFyYW0ge01hcFR5cGV9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCB0byBhZGRcbiAgICovXG4gIHNldCAoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZU1hcFNldCh0cmFuc2FjdGlvbiwgdGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtNYXA8c3RyaW5nLCBhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3BlY2lmaWVkIGVsZW1lbnQgZnJvbSB0aGlzIFlNYXAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHJldHVybiB7TWFwVHlwZXx1bmRlZmluZWR9XG4gICAqL1xuICBnZXQgKGtleSkge1xuICAgIHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKHR5cGVNYXBHZXQodGhpcywga2V5KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBrZXkgZXhpc3RzIG9yIG5vdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IHRvIHRlc3QuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBoYXMgKGtleSkge1xuICAgIHJldHVybiB0eXBlTWFwSGFzKHRoaXMsIGtleSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIHRoaXMgWU1hcC5cbiAgICovXG4gIGNsZWFyICgpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSwgbWFwKSB7XG4gICAgICAgICAgdHlwZU1hcERlbGV0ZSh0cmFuc2FjdGlvbiwgbWFwLCBrZXkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge01hcDxzdHJpbmcsIGFueT59ICovICh0aGlzLl9wcmVsaW1Db250ZW50KS5jbGVhcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKi9cbiAgX3dyaXRlIChlbmNvZGVyKSB7XG4gICAgZW5jb2Rlci53cml0ZVR5cGVSZWYoWU1hcFJlZklEKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkWU1hcCA9IGRlY29kZXIgPT4gbmV3IFlNYXAoKTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gYVxuICogQHBhcmFtIHthbnl9IGJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGVxdWFsQXR0cnMgPSAoYSwgYikgPT4gYSA9PT0gYiB8fCAodHlwZW9mIGEgPT09ICdvYmplY3QnICYmIHR5cGVvZiBiID09PSAnb2JqZWN0JyAmJiBhICYmIGIgJiYgb2JqZWN0LmVxdWFsRmxhdChhLCBiKSk7XG5cbmNsYXNzIEl0ZW1UZXh0TGlzdFBvc2l0aW9uIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7SXRlbXxudWxsfSBsZWZ0XG4gICAqIEBwYXJhbSB7SXRlbXxudWxsfSByaWdodFxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHBhcmFtIHtNYXA8c3RyaW5nLGFueT59IGN1cnJlbnRBdHRyaWJ1dGVzXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobGVmdCwgcmlnaHQsIGluZGV4LCBjdXJyZW50QXR0cmlidXRlcykge1xuICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmN1cnJlbnRBdHRyaWJ1dGVzID0gY3VycmVudEF0dHJpYnV0ZXM7XG4gIH1cblxuICAvKipcbiAgICogT25seSBjYWxsIHRoaXMgaWYgeW91IGtub3cgdGhhdCB0aGlzLnJpZ2h0IGlzIGRlZmluZWRcbiAgICovXG4gIGZvcndhcmQgKCkge1xuICAgIGlmICh0aGlzLnJpZ2h0ID09PSBudWxsKSB7XG4gICAgICBlcnJvci51bmV4cGVjdGVkQ2FzZSgpO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMucmlnaHQuY29udGVudC5jb25zdHJ1Y3Rvcikge1xuICAgICAgY2FzZSBDb250ZW50Rm9ybWF0OlxuICAgICAgICBpZiAoIXRoaXMucmlnaHQuZGVsZXRlZCkge1xuICAgICAgICAgIHVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzKHRoaXMuY3VycmVudEF0dHJpYnV0ZXMsIC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKHRoaXMucmlnaHQuY29udGVudCkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoIXRoaXMucmlnaHQuZGVsZXRlZCkge1xuICAgICAgICAgIHRoaXMuaW5kZXggKz0gdGhpcy5yaWdodC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgdGhpcy5sZWZ0ID0gdGhpcy5yaWdodDtcbiAgICB0aGlzLnJpZ2h0ID0gdGhpcy5yaWdodC5yaWdodDtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufSBwb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCBzdGVwcyB0byBtb3ZlIGZvcndhcmRcbiAqIEByZXR1cm4ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZmluZE5leHRQb3NpdGlvbiA9ICh0cmFuc2FjdGlvbiwgcG9zLCBjb3VudCkgPT4ge1xuICB3aGlsZSAocG9zLnJpZ2h0ICE9PSBudWxsICYmIGNvdW50ID4gMCkge1xuICAgIHN3aXRjaCAocG9zLnJpZ2h0LmNvbnRlbnQuY29uc3RydWN0b3IpIHtcbiAgICAgIGNhc2UgQ29udGVudEZvcm1hdDpcbiAgICAgICAgaWYgKCFwb3MucmlnaHQuZGVsZXRlZCkge1xuICAgICAgICAgIHVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzKHBvcy5jdXJyZW50QXR0cmlidXRlcywgLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAocG9zLnJpZ2h0LmNvbnRlbnQpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCFwb3MucmlnaHQuZGVsZXRlZCkge1xuICAgICAgICAgIGlmIChjb3VudCA8IHBvcy5yaWdodC5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIHNwbGl0IHJpZ2h0XG4gICAgICAgICAgICBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgY3JlYXRlSUQocG9zLnJpZ2h0LmlkLmNsaWVudCwgcG9zLnJpZ2h0LmlkLmNsb2NrICsgY291bnQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9zLmluZGV4ICs9IHBvcy5yaWdodC5sZW5ndGg7XG4gICAgICAgICAgY291bnQgLT0gcG9zLnJpZ2h0Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgIH1cbiAgICBwb3MubGVmdCA9IHBvcy5yaWdodDtcbiAgICBwb3MucmlnaHQgPSBwb3MucmlnaHQucmlnaHQ7XG4gICAgLy8gcG9zLmZvcndhcmQoKSAtIHdlIGRvbid0IGZvcndhcmQgYmVjYXVzZSB0aGF0IHdvdWxkIGhhbHZlIHRoZSBwZXJmb3JtYW5jZSBiZWNhdXNlIHdlIGFscmVhZHkgZG8gdGhlIGNoZWNrcyBhYm92ZVxuICB9XG4gIHJldHVybiBwb3Ncbn07XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtJdGVtVGV4dExpc3RQb3NpdGlvbn1cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IGZpbmRQb3NpdGlvbiA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBpbmRleCkgPT4ge1xuICBjb25zdCBjdXJyZW50QXR0cmlidXRlcyA9IG5ldyBNYXAoKTtcbiAgY29uc3QgbWFya2VyID0gZmluZE1hcmtlcihwYXJlbnQsIGluZGV4KTtcbiAgaWYgKG1hcmtlcikge1xuICAgIGNvbnN0IHBvcyA9IG5ldyBJdGVtVGV4dExpc3RQb3NpdGlvbihtYXJrZXIucC5sZWZ0LCBtYXJrZXIucCwgbWFya2VyLmluZGV4LCBjdXJyZW50QXR0cmlidXRlcyk7XG4gICAgcmV0dXJuIGZpbmROZXh0UG9zaXRpb24odHJhbnNhY3Rpb24sIHBvcywgaW5kZXggLSBtYXJrZXIuaW5kZXgpXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcG9zID0gbmV3IEl0ZW1UZXh0TGlzdFBvc2l0aW9uKG51bGwsIHBhcmVudC5fc3RhcnQsIDAsIGN1cnJlbnRBdHRyaWJ1dGVzKTtcbiAgICByZXR1cm4gZmluZE5leHRQb3NpdGlvbih0cmFuc2FjdGlvbiwgcG9zLCBpbmRleClcbiAgfVxufTtcblxuLyoqXG4gKiBOZWdhdGUgYXBwbGllZCBmb3JtYXRzXG4gKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7QWJzdHJhY3RUeXBlPGFueT59IHBhcmVudFxuICogQHBhcmFtIHtJdGVtVGV4dExpc3RQb3NpdGlvbn0gY3VyclBvc1xuICogQHBhcmFtIHtNYXA8c3RyaW5nLGFueT59IG5lZ2F0ZWRBdHRyaWJ1dGVzXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCBpbnNlcnROZWdhdGVkQXR0cmlidXRlcyA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBuZWdhdGVkQXR0cmlidXRlcykgPT4ge1xuICAvLyBjaGVjayBpZiB3ZSByZWFsbHkgbmVlZCB0byByZW1vdmUgYXR0cmlidXRlc1xuICB3aGlsZSAoXG4gICAgY3VyclBvcy5yaWdodCAhPT0gbnVsbCAmJiAoXG4gICAgICBjdXJyUG9zLnJpZ2h0LmRlbGV0ZWQgPT09IHRydWUgfHwgKFxuICAgICAgICBjdXJyUG9zLnJpZ2h0LmNvbnRlbnQuY29uc3RydWN0b3IgPT09IENvbnRlbnRGb3JtYXQgJiZcbiAgICAgICAgZXF1YWxBdHRycyhuZWdhdGVkQXR0cmlidXRlcy5nZXQoLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoY3VyclBvcy5yaWdodC5jb250ZW50KS5rZXkpLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQpLnZhbHVlKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgaWYgKCFjdXJyUG9zLnJpZ2h0LmRlbGV0ZWQpIHtcbiAgICAgIG5lZ2F0ZWRBdHRyaWJ1dGVzLmRlbGV0ZSgvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQpLmtleSk7XG4gICAgfVxuICAgIGN1cnJQb3MuZm9yd2FyZCgpO1xuICB9XG4gIGNvbnN0IGRvYyA9IHRyYW5zYWN0aW9uLmRvYztcbiAgY29uc3Qgb3duQ2xpZW50SWQgPSBkb2MuY2xpZW50SUQ7XG4gIG5lZ2F0ZWRBdHRyaWJ1dGVzLmZvckVhY2goKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgbGVmdCA9IGN1cnJQb3MubGVmdDtcbiAgICBjb25zdCByaWdodCA9IGN1cnJQb3MucmlnaHQ7XG4gICAgY29uc3QgbmV4dEZvcm1hdCA9IG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShkb2Muc3RvcmUsIG93bkNsaWVudElkKSksIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCwgcGFyZW50LCBudWxsLCBuZXcgQ29udGVudEZvcm1hdChrZXksIHZhbCkpO1xuICAgIG5leHRGb3JtYXQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCAwKTtcbiAgICBjdXJyUG9zLnJpZ2h0ID0gbmV4dEZvcm1hdDtcbiAgICBjdXJyUG9zLmZvcndhcmQoKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7TWFwPHN0cmluZyxhbnk+fSBjdXJyZW50QXR0cmlidXRlc1xuICogQHBhcmFtIHtDb250ZW50Rm9ybWF0fSBmb3JtYXRcbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzID0gKGN1cnJlbnRBdHRyaWJ1dGVzLCBmb3JtYXQpID0+IHtcbiAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSBmb3JtYXQ7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIGN1cnJlbnRBdHRyaWJ1dGVzLmRlbGV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRBdHRyaWJ1dGVzLnNldChrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufSBjdXJyUG9zXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gYXR0cmlidXRlc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgbWluaW1pemVBdHRyaWJ1dGVDaGFuZ2VzID0gKGN1cnJQb3MsIGF0dHJpYnV0ZXMpID0+IHtcbiAgLy8gZ28gcmlnaHQgd2hpbGUgYXR0cmlidXRlc1tyaWdodC5rZXldID09PSByaWdodC52YWx1ZSAob3IgcmlnaHQgaXMgZGVsZXRlZClcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoY3VyclBvcy5yaWdodCA9PT0gbnVsbCkge1xuICAgICAgYnJlYWtcbiAgICB9IGVsc2UgaWYgKGN1cnJQb3MucmlnaHQuZGVsZXRlZCB8fCAoY3VyclBvcy5yaWdodC5jb250ZW50LmNvbnN0cnVjdG9yID09PSBDb250ZW50Rm9ybWF0ICYmIGVxdWFsQXR0cnMoYXR0cmlidXRlc1soLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoY3VyclBvcy5yaWdodC5jb250ZW50KSkua2V5XSB8fCBudWxsLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChjdXJyUG9zLnJpZ2h0LmNvbnRlbnQpLnZhbHVlKSkpIDsgZWxzZSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjdXJyUG9zLmZvcndhcmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufSBjdXJyUG9zXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gYXR0cmlidXRlc1xuICogQHJldHVybiB7TWFwPHN0cmluZyxhbnk+fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqKi9cbmNvbnN0IGluc2VydEF0dHJpYnV0ZXMgPSAodHJhbnNhY3Rpb24sIHBhcmVudCwgY3VyclBvcywgYXR0cmlidXRlcykgPT4ge1xuICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XG4gIGNvbnN0IG93bkNsaWVudElkID0gZG9jLmNsaWVudElEO1xuICBjb25zdCBuZWdhdGVkQXR0cmlidXRlcyA9IG5ldyBNYXAoKTtcbiAgLy8gaW5zZXJ0IGZvcm1hdC1zdGFydCBpdGVtc1xuICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgY29uc3QgdmFsID0gYXR0cmlidXRlc1trZXldO1xuICAgIGNvbnN0IGN1cnJlbnRWYWwgPSBjdXJyUG9zLmN1cnJlbnRBdHRyaWJ1dGVzLmdldChrZXkpIHx8IG51bGw7XG4gICAgaWYgKCFlcXVhbEF0dHJzKGN1cnJlbnRWYWwsIHZhbCkpIHtcbiAgICAgIC8vIHNhdmUgbmVnYXRlZCBhdHRyaWJ1dGUgKHNldCBudWxsIGlmIGN1cnJlbnRWYWwgdW5kZWZpbmVkKVxuICAgICAgbmVnYXRlZEF0dHJpYnV0ZXMuc2V0KGtleSwgY3VycmVudFZhbCk7XG4gICAgICBjb25zdCB7IGxlZnQsIHJpZ2h0IH0gPSBjdXJyUG9zO1xuICAgICAgY3VyclBvcy5yaWdodCA9IG5ldyBJdGVtKGNyZWF0ZUlEKG93bkNsaWVudElkLCBnZXRTdGF0ZShkb2Muc3RvcmUsIG93bkNsaWVudElkKSksIGxlZnQsIGxlZnQgJiYgbGVmdC5sYXN0SWQsIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCwgcGFyZW50LCBudWxsLCBuZXcgQ29udGVudEZvcm1hdChrZXksIHZhbCkpO1xuICAgICAgY3VyclBvcy5yaWdodC5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApO1xuICAgICAgY3VyclBvcy5mb3J3YXJkKCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZWdhdGVkQXR0cmlidXRlc1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufSBjdXJyUG9zXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R8QWJzdHJhY3RUeXBlPGFueT59IHRleHRcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxhbnk+fSBhdHRyaWJ1dGVzXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICoqL1xuY29uc3QgaW5zZXJ0VGV4dCA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCB0ZXh0LCBhdHRyaWJ1dGVzKSA9PiB7XG4gIGN1cnJQb3MuY3VycmVudEF0dHJpYnV0ZXMuZm9yRWFjaCgodmFsLCBrZXkpID0+IHtcbiAgICBpZiAoYXR0cmlidXRlc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IG51bGw7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jO1xuICBjb25zdCBvd25DbGllbnRJZCA9IGRvYy5jbGllbnRJRDtcbiAgbWluaW1pemVBdHRyaWJ1dGVDaGFuZ2VzKGN1cnJQb3MsIGF0dHJpYnV0ZXMpO1xuICBjb25zdCBuZWdhdGVkQXR0cmlidXRlcyA9IGluc2VydEF0dHJpYnV0ZXModHJhbnNhY3Rpb24sIHBhcmVudCwgY3VyclBvcywgYXR0cmlidXRlcyk7XG4gIC8vIGluc2VydCBjb250ZW50XG4gIGNvbnN0IGNvbnRlbnQgPSB0ZXh0LmNvbnN0cnVjdG9yID09PSBTdHJpbmcgPyBuZXcgQ29udGVudFN0cmluZygvKiogQHR5cGUge3N0cmluZ30gKi8gKHRleHQpKSA6ICh0ZXh0IGluc3RhbmNlb2YgQWJzdHJhY3RUeXBlID8gbmV3IENvbnRlbnRUeXBlKHRleHQpIDogbmV3IENvbnRlbnRFbWJlZCh0ZXh0KSk7XG4gIGxldCB7IGxlZnQsIHJpZ2h0LCBpbmRleCB9ID0gY3VyclBvcztcbiAgaWYgKHBhcmVudC5fc2VhcmNoTWFya2VyKSB7XG4gICAgdXBkYXRlTWFya2VyQ2hhbmdlcyhwYXJlbnQuX3NlYXJjaE1hcmtlciwgY3VyclBvcy5pbmRleCwgY29udGVudC5nZXRMZW5ndGgoKSk7XG4gIH1cbiAgcmlnaHQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoZG9jLnN0b3JlLCBvd25DbGllbnRJZCkpLCBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLCByaWdodCwgcmlnaHQgJiYgcmlnaHQuaWQsIHBhcmVudCwgbnVsbCwgY29udGVudCk7XG4gIHJpZ2h0LmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMCk7XG4gIGN1cnJQb3MucmlnaHQgPSByaWdodDtcbiAgY3VyclBvcy5pbmRleCA9IGluZGV4O1xuICBjdXJyUG9zLmZvcndhcmQoKTtcbiAgaW5zZXJ0TmVnYXRlZEF0dHJpYnV0ZXModHJhbnNhY3Rpb24sIHBhcmVudCwgY3VyclBvcywgbmVnYXRlZEF0dHJpYnV0ZXMpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55Pn0gcGFyZW50XG4gKiBAcGFyYW0ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufSBjdXJyUG9zXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsYW55Pn0gYXR0cmlidXRlc1xuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZm9ybWF0VGV4dCA9ICh0cmFuc2FjdGlvbiwgcGFyZW50LCBjdXJyUG9zLCBsZW5ndGgsIGF0dHJpYnV0ZXMpID0+IHtcbiAgY29uc3QgZG9jID0gdHJhbnNhY3Rpb24uZG9jO1xuICBjb25zdCBvd25DbGllbnRJZCA9IGRvYy5jbGllbnRJRDtcbiAgbWluaW1pemVBdHRyaWJ1dGVDaGFuZ2VzKGN1cnJQb3MsIGF0dHJpYnV0ZXMpO1xuICBjb25zdCBuZWdhdGVkQXR0cmlidXRlcyA9IGluc2VydEF0dHJpYnV0ZXModHJhbnNhY3Rpb24sIHBhcmVudCwgY3VyclBvcywgYXR0cmlidXRlcyk7XG4gIC8vIGl0ZXJhdGUgdW50aWwgZmlyc3Qgbm9uLWZvcm1hdCBvciBudWxsIGlzIGZvdW5kXG4gIC8vIGRlbGV0ZSBhbGwgZm9ybWF0cyB3aXRoIGF0dHJpYnV0ZXNbZm9ybWF0LmtleV0gIT0gbnVsbFxuICAvLyBhbHNvIGNoZWNrIHRoZSBhdHRyaWJ1dGVzIGFmdGVyIHRoZSBmaXJzdCBub24tZm9ybWF0IGFzIHdlIGRvIG5vdCB3YW50IHRvIGluc2VydCByZWR1bmRhbnQgbmVnYXRlZCBhdHRyaWJ1dGVzIHRoZXJlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHNcbiAgaXRlcmF0aW9uTG9vcDogd2hpbGUgKFxuICAgIGN1cnJQb3MucmlnaHQgIT09IG51bGwgJiZcbiAgICAobGVuZ3RoID4gMCB8fFxuICAgICAgKFxuICAgICAgICBuZWdhdGVkQXR0cmlidXRlcy5zaXplID4gMCAmJlxuICAgICAgICAoY3VyclBvcy5yaWdodC5kZWxldGVkIHx8IGN1cnJQb3MucmlnaHQuY29udGVudC5jb25zdHJ1Y3RvciA9PT0gQ29udGVudEZvcm1hdClcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIGlmICghY3VyclBvcy5yaWdodC5kZWxldGVkKSB7XG4gICAgICBzd2l0Y2ggKGN1cnJQb3MucmlnaHQuY29udGVudC5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBjYXNlIENvbnRlbnRGb3JtYXQ6IHtcbiAgICAgICAgICBjb25zdCB7IGtleSwgdmFsdWUgfSA9IC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGN1cnJQb3MucmlnaHQuY29udGVudCk7XG4gICAgICAgICAgY29uc3QgYXR0ciA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICBpZiAoYXR0ciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoZXF1YWxBdHRycyhhdHRyLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgbmVnYXRlZEF0dHJpYnV0ZXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gbmVlZCB0byBmdXJ0aGVyIGV4dGVuZCBuZWdhdGVkQXR0cmlidXRlc1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHNcbiAgICAgICAgICAgICAgICBicmVhayBpdGVyYXRpb25Mb29wXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbmVnYXRlZEF0dHJpYnV0ZXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VyclBvcy5yaWdodC5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyUG9zLmN1cnJlbnRBdHRyaWJ1dGVzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChsZW5ndGggPCBjdXJyUG9zLnJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGNyZWF0ZUlEKGN1cnJQb3MucmlnaHQuaWQuY2xpZW50LCBjdXJyUG9zLnJpZ2h0LmlkLmNsb2NrICsgbGVuZ3RoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCAtPSBjdXJyUG9zLnJpZ2h0Lmxlbmd0aDtcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICBjdXJyUG9zLmZvcndhcmQoKTtcbiAgfVxuICAvLyBRdWlsbCBqdXN0IGFzc3VtZXMgdGhhdCB0aGUgZWRpdG9yIHN0YXJ0cyB3aXRoIGEgbmV3bGluZSBhbmQgdGhhdCBpdCBhbHdheXNcbiAgLy8gZW5kcyB3aXRoIGEgbmV3bGluZS4gV2Ugb25seSBpbnNlcnQgdGhhdCBuZXdsaW5lIHdoZW4gYSBuZXcgbmV3bGluZSBpc1xuICAvLyBpbnNlcnRlZCAtIGkuZSB3aGVuIGxlbmd0aCBpcyBiaWdnZXIgdGhhbiB0eXBlLmxlbmd0aFxuICBpZiAobGVuZ3RoID4gMCkge1xuICAgIGxldCBuZXdsaW5lcyA9ICcnO1xuICAgIGZvciAoOyBsZW5ndGggPiAwOyBsZW5ndGgtLSkge1xuICAgICAgbmV3bGluZXMgKz0gJ1xcbic7XG4gICAgfVxuICAgIGN1cnJQb3MucmlnaHQgPSBuZXcgSXRlbShjcmVhdGVJRChvd25DbGllbnRJZCwgZ2V0U3RhdGUoZG9jLnN0b3JlLCBvd25DbGllbnRJZCkpLCBjdXJyUG9zLmxlZnQsIGN1cnJQb3MubGVmdCAmJiBjdXJyUG9zLmxlZnQubGFzdElkLCBjdXJyUG9zLnJpZ2h0LCBjdXJyUG9zLnJpZ2h0ICYmIGN1cnJQb3MucmlnaHQuaWQsIHBhcmVudCwgbnVsbCwgbmV3IENvbnRlbnRTdHJpbmcobmV3bGluZXMpKTtcbiAgICBjdXJyUG9zLnJpZ2h0LmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMCk7XG4gICAgY3VyclBvcy5mb3J3YXJkKCk7XG4gIH1cbiAgaW5zZXJ0TmVnYXRlZEF0dHJpYnV0ZXModHJhbnNhY3Rpb24sIHBhcmVudCwgY3VyclBvcywgbmVnYXRlZEF0dHJpYnV0ZXMpO1xufTtcblxuLyoqXG4gKiBDYWxsIHRoaXMgZnVuY3Rpb24gYWZ0ZXIgc3RyaW5nIGNvbnRlbnQgaGFzIGJlZW4gZGVsZXRlZCBpbiBvcmRlciB0b1xuICogY2xlYW4gdXAgZm9ybWF0dGluZyBJdGVtcy5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtJdGVtfSBzdGFydFxuICogQHBhcmFtIHtJdGVtfG51bGx9IGN1cnIgZXhjbHVzaXZlIGVuZCwgYXV0b21hdGljYWxseSBpdGVyYXRlcyB0byB0aGUgbmV4dCBDb250ZW50IEl0ZW1cbiAqIEBwYXJhbSB7TWFwPHN0cmluZyxhbnk+fSBzdGFydEF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7TWFwPHN0cmluZyxhbnk+fSBjdXJyQXR0cmlidXRlc1xuICogQHJldHVybiB7bnVtYmVyfSBUaGUgYW1vdW50IG9mIGZvcm1hdHRpbmcgSXRlbXMgZGVsZXRlZC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgY2xlYW51cEZvcm1hdHRpbmdHYXAgPSAodHJhbnNhY3Rpb24sIHN0YXJ0LCBjdXJyLCBzdGFydEF0dHJpYnV0ZXMsIGN1cnJBdHRyaWJ1dGVzKSA9PiB7XG4gIGxldCBlbmQgPSBjdXJyO1xuICBjb25zdCBlbmRBdHRyaWJ1dGVzID0gbWFwLmNvcHkoY3VyckF0dHJpYnV0ZXMpO1xuICB3aGlsZSAoZW5kICYmICghZW5kLmNvdW50YWJsZSB8fCBlbmQuZGVsZXRlZCkpIHtcbiAgICBpZiAoIWVuZC5kZWxldGVkICYmIGVuZC5jb250ZW50LmNvbnN0cnVjdG9yID09PSBDb250ZW50Rm9ybWF0KSB7XG4gICAgICB1cGRhdGVDdXJyZW50QXR0cmlidXRlcyhlbmRBdHRyaWJ1dGVzLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChlbmQuY29udGVudCkpO1xuICAgIH1cbiAgICBlbmQgPSBlbmQucmlnaHQ7XG4gIH1cbiAgbGV0IGNsZWFudXBzID0gMDtcbiAgbGV0IHJlYWNoZWRFbmRPZkN1cnIgPSBmYWxzZTtcbiAgd2hpbGUgKHN0YXJ0ICE9PSBlbmQpIHtcbiAgICBpZiAoY3VyciA9PT0gc3RhcnQpIHtcbiAgICAgIHJlYWNoZWRFbmRPZkN1cnIgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXN0YXJ0LmRlbGV0ZWQpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBzdGFydC5jb250ZW50O1xuICAgICAgc3dpdGNoIChjb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGNhc2UgQ29udGVudEZvcm1hdDoge1xuICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAoY29udGVudCk7XG4gICAgICAgICAgaWYgKChlbmRBdHRyaWJ1dGVzLmdldChrZXkpIHx8IG51bGwpICE9PSB2YWx1ZSB8fCAoc3RhcnRBdHRyaWJ1dGVzLmdldChrZXkpIHx8IG51bGwpID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gRWl0aGVyIHRoaXMgZm9ybWF0IGlzIG92ZXJ3cml0dGVuIG9yIGl0IGlzIG5vdCBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgYXR0cmlidXRlIGFscmVhZHkgZXhpc3RlZC5cbiAgICAgICAgICAgIHN0YXJ0LmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICBjbGVhbnVwcysrO1xuICAgICAgICAgICAgaWYgKCFyZWFjaGVkRW5kT2ZDdXJyICYmIChjdXJyQXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsKSA9PT0gdmFsdWUgJiYgKHN0YXJ0QXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsKSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgY3VyckF0dHJpYnV0ZXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc3RhcnQgPSAvKiogQHR5cGUge0l0ZW19ICovIChzdGFydC5yaWdodCk7XG4gIH1cbiAgcmV0dXJuIGNsZWFudXBzXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge0l0ZW0gfCBudWxsfSBpdGVtXG4gKi9cbmNvbnN0IGNsZWFudXBDb250ZXh0bGVzc0Zvcm1hdHRpbmdHYXAgPSAodHJhbnNhY3Rpb24sIGl0ZW0pID0+IHtcbiAgLy8gaXRlcmF0ZSB1bnRpbCBpdGVtLnJpZ2h0IGlzIG51bGwgb3IgY29udGVudFxuICB3aGlsZSAoaXRlbSAmJiBpdGVtLnJpZ2h0ICYmIChpdGVtLnJpZ2h0LmRlbGV0ZWQgfHwgIWl0ZW0ucmlnaHQuY291bnRhYmxlKSkge1xuICAgIGl0ZW0gPSBpdGVtLnJpZ2h0O1xuICB9XG4gIGNvbnN0IGF0dHJzID0gbmV3IFNldCgpO1xuICAvLyBpdGVyYXRlIGJhY2sgdW50aWwgYSBjb250ZW50IGl0ZW0gaXMgZm91bmRcbiAgd2hpbGUgKGl0ZW0gJiYgKGl0ZW0uZGVsZXRlZCB8fCAhaXRlbS5jb3VudGFibGUpKSB7XG4gICAgaWYgKCFpdGVtLmRlbGV0ZWQgJiYgaXRlbS5jb250ZW50LmNvbnN0cnVjdG9yID09PSBDb250ZW50Rm9ybWF0KSB7XG4gICAgICBjb25zdCBrZXkgPSAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChpdGVtLmNvbnRlbnQpLmtleTtcbiAgICAgIGlmIChhdHRycy5oYXMoa2V5KSkge1xuICAgICAgICBpdGVtLmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdHRycy5hZGQoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaXRlbSA9IGl0ZW0ubGVmdDtcbiAgfVxufTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGV4cGVyaW1lbnRhbCBhbmQgc3ViamVjdCB0byBjaGFuZ2UgLyBiZSByZW1vdmVkLlxuICpcbiAqIElkZWFsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBmdW5jdGlvbiBhdCBhbGwuIEZvcm1hdHRpbmcgYXR0cmlidXRlcyBzaG91bGQgYmUgY2xlYW5lZCB1cFxuICogYXV0b21hdGljYWxseSBhZnRlciBlYWNoIGNoYW5nZS4gVGhpcyBmdW5jdGlvbiBpdGVyYXRlcyB0d2ljZSBvdmVyIHRoZSBjb21wbGV0ZSBZVGV4dCB0eXBlXG4gKiBhbmQgcmVtb3ZlcyB1bm5lY2Vzc2FyeSBmb3JtYXR0aW5nIGF0dHJpYnV0ZXMuIFRoaXMgaXMgYWxzbyBoZWxwZnVsIGZvciB0ZXN0aW5nLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd29uJ3QgYmUgZXhwb3J0ZWQgYW55bW9yZSBhcyBzb29uIGFzIHRoZXJlIGlzIGNvbmZpZGVuY2UgdGhhdCB0aGUgWVRleHQgdHlwZSB3b3JrcyBhcyBpbnRlbmRlZC5cbiAqXG4gKiBAcGFyYW0ge1lUZXh0fSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEhvdyBtYW55IGZvcm1hdHRpbmcgYXR0cmlidXRlcyBoYXZlIGJlZW4gY2xlYW5lZCB1cC5cbiAqL1xuY29uc3QgY2xlYW51cFlUZXh0Rm9ybWF0dGluZyA9IHR5cGUgPT4ge1xuICBsZXQgcmVzID0gMDtcbiAgdHJhbnNhY3QoLyoqIEB0eXBlIHtEb2N9ICovICh0eXBlLmRvYyksIHRyYW5zYWN0aW9uID0+IHtcbiAgICBsZXQgc3RhcnQgPSAvKiogQHR5cGUge0l0ZW19ICovICh0eXBlLl9zdGFydCk7XG4gICAgbGV0IGVuZCA9IHR5cGUuX3N0YXJ0O1xuICAgIGxldCBzdGFydEF0dHJpYnV0ZXMgPSBtYXAuY3JlYXRlKCk7XG4gICAgY29uc3QgY3VycmVudEF0dHJpYnV0ZXMgPSBtYXAuY29weShzdGFydEF0dHJpYnV0ZXMpO1xuICAgIHdoaWxlIChlbmQpIHtcbiAgICAgIGlmIChlbmQuZGVsZXRlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgc3dpdGNoIChlbmQuY29udGVudC5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgIGNhc2UgQ29udGVudEZvcm1hdDpcbiAgICAgICAgICAgIHVwZGF0ZUN1cnJlbnRBdHRyaWJ1dGVzKGN1cnJlbnRBdHRyaWJ1dGVzLCAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChlbmQuY29udGVudCkpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmVzICs9IGNsZWFudXBGb3JtYXR0aW5nR2FwKHRyYW5zYWN0aW9uLCBzdGFydCwgZW5kLCBzdGFydEF0dHJpYnV0ZXMsIGN1cnJlbnRBdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIHN0YXJ0QXR0cmlidXRlcyA9IG1hcC5jb3B5KGN1cnJlbnRBdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIHN0YXJ0ID0gZW5kO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZW5kID0gZW5kLnJpZ2h0O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn07XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7SXRlbVRleHRMaXN0UG9zaXRpb259IGN1cnJQb3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge0l0ZW1UZXh0TGlzdFBvc2l0aW9ufVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgZGVsZXRlVGV4dCA9ICh0cmFuc2FjdGlvbiwgY3VyclBvcywgbGVuZ3RoKSA9PiB7XG4gIGNvbnN0IHN0YXJ0TGVuZ3RoID0gbGVuZ3RoO1xuICBjb25zdCBzdGFydEF0dHJzID0gbWFwLmNvcHkoY3VyclBvcy5jdXJyZW50QXR0cmlidXRlcyk7XG4gIGNvbnN0IHN0YXJ0ID0gY3VyclBvcy5yaWdodDtcbiAgd2hpbGUgKGxlbmd0aCA+IDAgJiYgY3VyclBvcy5yaWdodCAhPT0gbnVsbCkge1xuICAgIGlmIChjdXJyUG9zLnJpZ2h0LmRlbGV0ZWQgPT09IGZhbHNlKSB7XG4gICAgICBzd2l0Y2ggKGN1cnJQb3MucmlnaHQuY29udGVudC5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBjYXNlIENvbnRlbnRUeXBlOlxuICAgICAgICBjYXNlIENvbnRlbnRFbWJlZDpcbiAgICAgICAgY2FzZSBDb250ZW50U3RyaW5nOlxuICAgICAgICAgIGlmIChsZW5ndGggPCBjdXJyUG9zLnJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIGNyZWF0ZUlEKGN1cnJQb3MucmlnaHQuaWQuY2xpZW50LCBjdXJyUG9zLnJpZ2h0LmlkLmNsb2NrICsgbGVuZ3RoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCAtPSBjdXJyUG9zLnJpZ2h0Lmxlbmd0aDtcbiAgICAgICAgICBjdXJyUG9zLnJpZ2h0LmRlbGV0ZSh0cmFuc2FjdGlvbik7XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgY3VyclBvcy5mb3J3YXJkKCk7XG4gIH1cbiAgaWYgKHN0YXJ0KSB7XG4gICAgY2xlYW51cEZvcm1hdHRpbmdHYXAodHJhbnNhY3Rpb24sIHN0YXJ0LCBjdXJyUG9zLnJpZ2h0LCBzdGFydEF0dHJzLCBjdXJyUG9zLmN1cnJlbnRBdHRyaWJ1dGVzKTtcbiAgfVxuICBjb25zdCBwYXJlbnQgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAoLyoqIEB0eXBlIHtJdGVtfSAqLyAoY3VyclBvcy5sZWZ0IHx8IGN1cnJQb3MucmlnaHQpLnBhcmVudCk7XG4gIGlmIChwYXJlbnQuX3NlYXJjaE1hcmtlcikge1xuICAgIHVwZGF0ZU1hcmtlckNoYW5nZXMocGFyZW50Ll9zZWFyY2hNYXJrZXIsIGN1cnJQb3MuaW5kZXgsIC1zdGFydExlbmd0aCArIGxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGN1cnJQb3Ncbn07XG5cbi8qKlxuICogVGhlIFF1aWxsIERlbHRhIGZvcm1hdCByZXByZXNlbnRzIGNoYW5nZXMgb24gYSB0ZXh0IGRvY3VtZW50IHdpdGhcbiAqIGZvcm1hdHRpbmcgaW5mb3JtYXRpb24uIEZvciBtb3IgaW5mb3JtYXRpb24gdmlzaXQge0BsaW5rIGh0dHBzOi8vcXVpbGxqcy5jb20vZG9jcy9kZWx0YS98UXVpbGwgRGVsdGF9XG4gKlxuICogQGV4YW1wbGVcbiAqICAge1xuICogICAgIG9wczogW1xuICogICAgICAgeyBpbnNlcnQ6ICdHYW5kYWxmJywgYXR0cmlidXRlczogeyBib2xkOiB0cnVlIH0gfSxcbiAqICAgICAgIHsgaW5zZXJ0OiAnIHRoZSAnIH0sXG4gKiAgICAgICB7IGluc2VydDogJ0dyZXknLCBhdHRyaWJ1dGVzOiB7IGNvbG9yOiAnI2NjY2NjYycgfSB9XG4gKiAgICAgXVxuICogICB9XG4gKlxuICovXG5cbi8qKlxuICAqIEF0dHJpYnV0ZXMgdGhhdCBjYW4gYmUgYXNzaWduZWQgdG8gYSBzZWxlY3Rpb24gb2YgdGV4dC5cbiAgKlxuICAqIEBleGFtcGxlXG4gICogICB7XG4gICogICAgIGJvbGQ6IHRydWUsXG4gICogICAgIGZvbnQtc2l6ZTogJzQwcHgnXG4gICogICB9XG4gICpcbiAgKiBAdHlwZWRlZiB7T2JqZWN0fSBUZXh0QXR0cmlidXRlc1xuICAqL1xuXG4vKipcbiAqIEBleHRlbmRzIFlFdmVudDxZVGV4dD5cbiAqIEV2ZW50IHRoYXQgZGVzY3JpYmVzIHRoZSBjaGFuZ2VzIG9uIGEgWVRleHQgdHlwZS5cbiAqL1xuY2xhc3MgWVRleHRFdmVudCBleHRlbmRzIFlFdmVudCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1lUZXh0fSB5dGV4dFxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1NldDxhbnk+fSBzdWJzIFRoZSBrZXlzIHRoYXQgY2hhbmdlZFxuICAgKi9cbiAgY29uc3RydWN0b3IgKHl0ZXh0LCB0cmFuc2FjdGlvbiwgc3Vicykge1xuICAgIHN1cGVyKHl0ZXh0LCB0cmFuc2FjdGlvbik7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgY2hpbGRyZW4gY2hhbmdlZC5cbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuY2hpbGRMaXN0Q2hhbmdlZCA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIFNldCBvZiBhbGwgY2hhbmdlZCBhdHRyaWJ1dGVzLlxuICAgICAqIEB0eXBlIHtTZXQ8c3RyaW5nPn1cbiAgICAgKi9cbiAgICB0aGlzLmtleXNDaGFuZ2VkID0gbmV3IFNldCgpO1xuICAgIHN1YnMuZm9yRWFjaCgoc3ViKSA9PiB7XG4gICAgICBpZiAoc3ViID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuY2hpbGRMaXN0Q2hhbmdlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmtleXNDaGFuZ2VkLmFkZChzdWIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHt7YWRkZWQ6U2V0PEl0ZW0+LGRlbGV0ZWQ6U2V0PEl0ZW0+LGtleXM6TWFwPHN0cmluZyx7YWN0aW9uOidhZGQnfCd1cGRhdGUnfCdkZWxldGUnLG9sZFZhbHVlOmFueX0+LGRlbHRhOkFycmF5PHtpbnNlcnQ/OkFycmF5PGFueT58c3RyaW5nLCBkZWxldGU/Om51bWJlciwgcmV0YWluPzpudW1iZXJ9Pn19XG4gICAqL1xuICBnZXQgY2hhbmdlcyAoKSB7XG4gICAgaWYgKHRoaXMuX2NoYW5nZXMgPT09IG51bGwpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge3thZGRlZDpTZXQ8SXRlbT4sZGVsZXRlZDpTZXQ8SXRlbT4sa2V5czpNYXA8c3RyaW5nLHthY3Rpb246J2FkZCd8J3VwZGF0ZSd8J2RlbGV0ZScsb2xkVmFsdWU6YW55fT4sZGVsdGE6QXJyYXk8e2luc2VydD86QXJyYXk8YW55PnxzdHJpbmd8QWJzdHJhY3RUeXBlPGFueT58b2JqZWN0LCBkZWxldGU/Om51bWJlciwgcmV0YWluPzpudW1iZXJ9Pn19XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGNoYW5nZXMgPSB7XG4gICAgICAgIGtleXM6IHRoaXMua2V5cyxcbiAgICAgICAgZGVsdGE6IHRoaXMuZGVsdGEsXG4gICAgICAgIGFkZGVkOiBuZXcgU2V0KCksXG4gICAgICAgIGRlbGV0ZWQ6IG5ldyBTZXQoKVxuICAgICAgfTtcbiAgICAgIHRoaXMuX2NoYW5nZXMgPSBjaGFuZ2VzO1xuICAgIH1cbiAgICByZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovICh0aGlzLl9jaGFuZ2VzKVxuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIGNoYW5nZXMgaW4gdGhlIGRlbHRhIGZvcm1hdC5cbiAgICogQSB7QGxpbmsgaHR0cHM6Ly9xdWlsbGpzLmNvbS9kb2NzL2RlbHRhL3xRdWlsbCBEZWx0YX0pIHRoYXQgcmVwcmVzZW50cyB0aGUgY2hhbmdlcyBvbiB0aGUgZG9jdW1lbnQuXG4gICAqXG4gICAqIEB0eXBlIHtBcnJheTx7aW5zZXJ0PzpzdHJpbmd8b2JqZWN0fEFic3RyYWN0VHlwZTxhbnk+LCBkZWxldGU/Om51bWJlciwgcmV0YWluPzpudW1iZXIsIGF0dHJpYnV0ZXM/OiBPYmplY3Q8c3RyaW5nLGFueT59Pn1cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0IGRlbHRhICgpIHtcbiAgICBpZiAodGhpcy5fZGVsdGEgPT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHkgPSAvKiogQHR5cGUge0RvY30gKi8gKHRoaXMudGFyZ2V0LmRvYyk7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtBcnJheTx7aW5zZXJ0PzpzdHJpbmd8b2JqZWN0fEFic3RyYWN0VHlwZTxhbnk+LCBkZWxldGU/Om51bWJlciwgcmV0YWluPzpudW1iZXIsIGF0dHJpYnV0ZXM/OiBPYmplY3Q8c3RyaW5nLGFueT59Pn1cbiAgICAgICAqL1xuICAgICAgY29uc3QgZGVsdGEgPSBbXTtcbiAgICAgIHRyYW5zYWN0KHksIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudEF0dHJpYnV0ZXMgPSBuZXcgTWFwKCk7IC8vIHNhdmVzIGFsbCBjdXJyZW50IGF0dHJpYnV0ZXMgZm9yIGluc2VydFxuICAgICAgICBjb25zdCBvbGRBdHRyaWJ1dGVzID0gbmV3IE1hcCgpO1xuICAgICAgICBsZXQgaXRlbSA9IHRoaXMudGFyZ2V0Ll9zdGFydDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmc/fVxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGFjdGlvbiA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxhbnk+fVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHt9OyAvLyBjb3VudHMgYWRkZWQgb3IgcmVtb3ZlZCBuZXcgYXR0cmlidXRlcyBmb3IgcmV0YWluXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfG9iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIGxldCBpbnNlcnQgPSAnJztcbiAgICAgICAgbGV0IHJldGFpbiA9IDA7XG4gICAgICAgIGxldCBkZWxldGVMZW4gPSAwO1xuICAgICAgICBjb25zdCBhZGRPcCA9ICgpID0+IHtcbiAgICAgICAgICBpZiAoYWN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEB0eXBlIHthbnl9XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxldCBvcDtcbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgICAgICAgICAgb3AgPSB7IGRlbGV0ZTogZGVsZXRlTGVuIH07XG4gICAgICAgICAgICAgICAgZGVsZXRlTGVuID0gMDtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICBjYXNlICdpbnNlcnQnOlxuICAgICAgICAgICAgICAgIG9wID0geyBpbnNlcnQgfTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEF0dHJpYnV0ZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgIG9wLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRBdHRyaWJ1dGVzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgb3AuYXR0cmlidXRlc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnNlcnQgPSAnJztcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICBjYXNlICdyZXRhaW4nOlxuICAgICAgICAgICAgICAgIG9wID0geyByZXRhaW4gfTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgb3AuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICBvcC5hdHRyaWJ1dGVzW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldGFpbiA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbHRhLnB1c2gob3ApO1xuICAgICAgICAgICAgYWN0aW9uID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHdoaWxlIChpdGVtICE9PSBudWxsKSB7XG4gICAgICAgICAgc3dpdGNoIChpdGVtLmNvbnRlbnQuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGNhc2UgQ29udGVudFR5cGU6XG4gICAgICAgICAgICBjYXNlIENvbnRlbnRFbWJlZDpcbiAgICAgICAgICAgICAgaWYgKHRoaXMuYWRkcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kZWxldGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICBhZGRPcCgpO1xuICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2luc2VydCc7XG4gICAgICAgICAgICAgICAgICBpbnNlcnQgPSBpdGVtLmNvbnRlbnQuZ2V0Q29udGVudCgpWzBdO1xuICAgICAgICAgICAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kZWxldGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiAhPT0gJ2RlbGV0ZScpIHtcbiAgICAgICAgICAgICAgICAgIGFkZE9wKCk7XG4gICAgICAgICAgICAgICAgICBhY3Rpb24gPSAnZGVsZXRlJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlTGVuICs9IDE7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWl0ZW0uZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gIT09ICdyZXRhaW4nKSB7XG4gICAgICAgICAgICAgICAgICBhZGRPcCgpO1xuICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ3JldGFpbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldGFpbiArPSAxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIENvbnRlbnRTdHJpbmc6XG4gICAgICAgICAgICAgIGlmICh0aGlzLmFkZHMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbiAhPT0gJ2luc2VydCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2luc2VydCc7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpbnNlcnQgKz0gLyoqIEB0eXBlIHtDb250ZW50U3RyaW5nfSAqLyAoaXRlbS5jb250ZW50KS5zdHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGVsZXRlcyhpdGVtKSkge1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gIT09ICdkZWxldGUnKSB7XG4gICAgICAgICAgICAgICAgICBhZGRPcCgpO1xuICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ2RlbGV0ZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZUxlbiArPSBpdGVtLmxlbmd0aDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiAhPT0gJ3JldGFpbicpIHtcbiAgICAgICAgICAgICAgICAgIGFkZE9wKCk7XG4gICAgICAgICAgICAgICAgICBhY3Rpb24gPSAncmV0YWluJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0YWluICs9IGl0ZW0ubGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIENvbnRlbnRGb3JtYXQ6IHtcbiAgICAgICAgICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSAvKiogQHR5cGUge0NvbnRlbnRGb3JtYXR9ICovIChpdGVtLmNvbnRlbnQpO1xuICAgICAgICAgICAgICBpZiAodGhpcy5hZGRzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRlbGV0ZXMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGN1clZhbCA9IGN1cnJlbnRBdHRyaWJ1dGVzLmdldChrZXkpIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgICBpZiAoIWVxdWFsQXR0cnMoY3VyVmFsLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ3JldGFpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhZGRPcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcXVhbEF0dHJzKHZhbHVlLCAob2xkQXR0cmlidXRlcy5nZXQoa2V5KSB8fCBudWxsKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kZWxldGVzKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgb2xkQXR0cmlidXRlcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VyVmFsID0gY3VycmVudEF0dHJpYnV0ZXMuZ2V0KGtleSkgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoIWVxdWFsQXR0cnMoY3VyVmFsLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdyZXRhaW4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZE9wKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBjdXJWYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBvbGRBdHRyaWJ1dGVzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICAgICAgICAgIGlmIChhdHRyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghZXF1YWxBdHRycyhhdHRyLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ3JldGFpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhZGRPcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0ciAhPT0gbnVsbCkgeyAvLyB0aGlzIHdpbGwgYmUgY2xlYW5lZCB1cCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBjb250ZXh0bGVzcyBjbGVhbnVwIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCFpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSAnaW5zZXJ0Jykge1xuICAgICAgICAgICAgICAgICAgYWRkT3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXBkYXRlQ3VycmVudEF0dHJpYnV0ZXMoY3VycmVudEF0dHJpYnV0ZXMsIC8qKiBAdHlwZSB7Q29udGVudEZvcm1hdH0gKi8gKGl0ZW0uY29udGVudCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGl0ZW0gPSBpdGVtLnJpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGFkZE9wKCk7XG4gICAgICAgIHdoaWxlIChkZWx0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgbGFzdE9wID0gZGVsdGFbZGVsdGEubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3RPcC5yZXRhaW4gIT09IHVuZGVmaW5lZCAmJiBsYXN0T3AuYXR0cmlidXRlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyByZXRhaW4gZGVsdGEncyBpZiB0aGV5IGRvbid0IGFzc2lnbiBhdHRyaWJ1dGVzXG4gICAgICAgICAgICBkZWx0YS5wb3AoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5fZGVsdGEgPSBkZWx0YTtcbiAgICB9XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7YW55fSAqLyAodGhpcy5fZGVsdGEpXG4gIH1cbn1cblxuLyoqXG4gKiBUeXBlIHRoYXQgcmVwcmVzZW50cyB0ZXh0IHdpdGggZm9ybWF0dGluZyBpbmZvcm1hdGlvbi5cbiAqXG4gKiBUaGlzIHR5cGUgcmVwbGFjZXMgeS1yaWNodGV4dCBhcyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIGFibGUgdG8gaGFuZGxlXG4gKiBibG9jayBmb3JtYXRzIChmb3JtYXQgaW5mb3JtYXRpb24gb24gYSBwYXJhZ3JhcGgpLCBlbWJlZHMgKGNvbXBsZXggZWxlbWVudHNcbiAqIGxpa2UgcGljdHVyZXMgYW5kIHZpZGVvcyksIGFuZCB0ZXh0IGZvcm1hdHMgKCoqYm9sZCoqLCAqaXRhbGljKikuXG4gKlxuICogQGV4dGVuZHMgQWJzdHJhY3RUeXBlPFlUZXh0RXZlbnQ+XG4gKi9cbmNsYXNzIFlUZXh0IGV4dGVuZHMgQWJzdHJhY3RUeXBlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbc3RyaW5nXSBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgWVRleHQuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBwZW5kaW5nIG9wZXJhdGlvbnMgb24gdGhpcyB0eXBlXG4gICAgICogQHR5cGUge0FycmF5PGZ1bmN0aW9uKCk6dm9pZD4/fVxuICAgICAqL1xuICAgIHRoaXMuX3BlbmRpbmcgPSBzdHJpbmcgIT09IHVuZGVmaW5lZCA/IFsoKSA9PiB0aGlzLmluc2VydCgwLCBzdHJpbmcpXSA6IFtdO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxBcnJheVNlYXJjaE1hcmtlcj59XG4gICAgICovXG4gICAgdGhpcy5fc2VhcmNoTWFya2VyID0gW107XG4gIH1cblxuICAvKipcbiAgICogTnVtYmVyIG9mIGNoYXJhY3RlcnMgb2YgdGhpcyB0ZXh0IHR5cGUuXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgbGVuZ3RoICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtEb2N9IHlcbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBfaW50ZWdyYXRlICh5LCBpdGVtKSB7XG4gICAgc3VwZXIuX2ludGVncmF0ZSh5LCBpdGVtKTtcbiAgICB0cnkge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxmdW5jdGlvbj59ICovICh0aGlzLl9wZW5kaW5nKS5mb3JFYWNoKGYgPT4gZigpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbiAgICB0aGlzLl9wZW5kaW5nID0gbnVsbDtcbiAgfVxuXG4gIF9jb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IFlUZXh0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtZVGV4dH1cbiAgICovXG4gIGNsb25lICgpIHtcbiAgICBjb25zdCB0ZXh0ID0gbmV3IFlUZXh0KCk7XG4gICAgdGV4dC5hcHBseURlbHRhKHRoaXMudG9EZWx0YSgpKTtcbiAgICByZXR1cm4gdGV4dFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgWVRleHRFdmVudCBhbmQgY2FsbHMgb2JzZXJ2ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1NldDxudWxsfHN0cmluZz59IHBhcmVudFN1YnMgS2V5cyBjaGFuZ2VkIG9uIHRoaXMgdHlwZS4gYG51bGxgIGlmIGxpc3Qgd2FzIG1vZGlmaWVkLlxuICAgKi9cbiAgX2NhbGxPYnNlcnZlciAodHJhbnNhY3Rpb24sIHBhcmVudFN1YnMpIHtcbiAgICBzdXBlci5fY2FsbE9ic2VydmVyKHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKTtcbiAgICBjb25zdCBldmVudCA9IG5ldyBZVGV4dEV2ZW50KHRoaXMsIHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKTtcbiAgICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XG4gICAgY2FsbFR5cGVPYnNlcnZlcnModGhpcywgdHJhbnNhY3Rpb24sIGV2ZW50KTtcbiAgICAvLyBJZiBhIHJlbW90ZSBjaGFuZ2UgaGFwcGVuZWQsIHdlIHRyeSB0byBjbGVhbnVwIHBvdGVudGlhbCBmb3JtYXR0aW5nIGR1cGxpY2F0ZXMuXG4gICAgaWYgKCF0cmFuc2FjdGlvbi5sb2NhbCkge1xuICAgICAgLy8gY2hlY2sgaWYgYW5vdGhlciBmb3JtYXR0aW5nIGl0ZW0gd2FzIGluc2VydGVkXG4gICAgICBsZXQgZm91bmRGb3JtYXR0aW5nSXRlbSA9IGZhbHNlO1xuICAgICAgZm9yIChjb25zdCBbY2xpZW50LCBhZnRlckNsb2NrXSBvZiB0cmFuc2FjdGlvbi5hZnRlclN0YXRlLmVudHJpZXMoKSkge1xuICAgICAgICBjb25zdCBjbG9jayA9IHRyYW5zYWN0aW9uLmJlZm9yZVN0YXRlLmdldChjbGllbnQpIHx8IDA7XG4gICAgICAgIGlmIChhZnRlckNsb2NrID09PSBjbG9jaykge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgaXRlcmF0ZVN0cnVjdHModHJhbnNhY3Rpb24sIC8qKiBAdHlwZSB7QXJyYXk8SXRlbXxHQz59ICovIChkb2Muc3RvcmUuY2xpZW50cy5nZXQoY2xpZW50KSksIGNsb2NrLCBhZnRlckNsb2NrLCBpdGVtID0+IHtcbiAgICAgICAgICBpZiAoIWl0ZW0uZGVsZXRlZCAmJiAvKiogQHR5cGUge0l0ZW19ICovIChpdGVtKS5jb250ZW50LmNvbnN0cnVjdG9yID09PSBDb250ZW50Rm9ybWF0KSB7XG4gICAgICAgICAgICBmb3VuZEZvcm1hdHRpbmdJdGVtID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZm91bmRGb3JtYXR0aW5nSXRlbSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghZm91bmRGb3JtYXR0aW5nSXRlbSkge1xuICAgICAgICBpdGVyYXRlRGVsZXRlZFN0cnVjdHModHJhbnNhY3Rpb24sIHRyYW5zYWN0aW9uLmRlbGV0ZVNldCwgaXRlbSA9PiB7XG4gICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBHQyB8fCBmb3VuZEZvcm1hdHRpbmdJdGVtKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZW0ucGFyZW50ID09PSB0aGlzICYmIGl0ZW0uY29udGVudC5jb25zdHJ1Y3RvciA9PT0gQ29udGVudEZvcm1hdCkge1xuICAgICAgICAgICAgZm91bmRGb3JtYXR0aW5nSXRlbSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRyYW5zYWN0KGRvYywgKHQpID0+IHtcbiAgICAgICAgaWYgKGZvdW5kRm9ybWF0dGluZ0l0ZW0pIHtcbiAgICAgICAgICAvLyBJZiBhIGZvcm1hdHRpbmcgaXRlbSB3YXMgaW5zZXJ0ZWQsIHdlIHNpbXBseSBjbGVhbiB0aGUgd2hvbGUgdHlwZS5cbiAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNvbXB1dGUgY3VycmVudEF0dHJpYnV0ZXMgZm9yIHRoZSBjdXJyZW50IHBvc2l0aW9uIGFueXdheS5cbiAgICAgICAgICBjbGVhbnVwWVRleHRGb3JtYXR0aW5nKHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIG5vIGZvcm1hdHRpbmcgYXR0cmlidXRlIHdhcyBpbnNlcnRlZCwgd2UgY2FuIG1ha2UgZHVlIHdpdGggY29udGV4dGxlc3NcbiAgICAgICAgICAvLyBmb3JtYXR0aW5nIGNsZWFudXBzLlxuICAgICAgICAgIC8vIENvbnRleHRsZXNzOiBpdCBpcyBub3QgbmVjZXNzYXJ5IHRvIGNvbXB1dGUgY3VycmVudEF0dHJpYnV0ZXMgZm9yIHRoZSBhZmZlY3RlZCBwb3NpdGlvbi5cbiAgICAgICAgICBpdGVyYXRlRGVsZXRlZFN0cnVjdHModCwgdC5kZWxldGVTZXQsIGl0ZW0gPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBHQykge1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtLnBhcmVudCA9PT0gdGhpcykge1xuICAgICAgICAgICAgICBjbGVhbnVwQ29udGV4dGxlc3NGb3JtYXR0aW5nR2FwKHQsIGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdW5mb3JtYXR0ZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgWVRleHQgdHlwZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9TdHJpbmcgKCkge1xuICAgIGxldCBzdHIgPSAnJztcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAqL1xuICAgIGxldCBuID0gdGhpcy5fc3RhcnQ7XG4gICAgd2hpbGUgKG4gIT09IG51bGwpIHtcbiAgICAgIGlmICghbi5kZWxldGVkICYmIG4uY291bnRhYmxlICYmIG4uY29udGVudC5jb25zdHJ1Y3RvciA9PT0gQ29udGVudFN0cmluZykge1xuICAgICAgICBzdHIgKz0gLyoqIEB0eXBlIHtDb250ZW50U3RyaW5nfSAqLyAobi5jb250ZW50KS5zdHI7XG4gICAgICB9XG4gICAgICBuID0gbi5yaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIHN0clxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHVuZm9ybWF0dGVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIFlUZXh0IHR5cGUuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpXG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgYSB7QGxpbmsgRGVsdGF9IG9uIHRoaXMgc2hhcmVkIFlUZXh0IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSBkZWx0YSBUaGUgY2hhbmdlcyB0byBhcHBseSBvbiB0aGlzIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSAgW29wdHNdXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2FuaXRpemVdIFNhbml0aXplIGlucHV0IGRlbHRhLiBSZW1vdmVzIGVuZGluZyBuZXdsaW5lcyBpZiBzZXQgdG8gdHJ1ZS5cbiAgICpcbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYXBwbHlEZWx0YSAoZGVsdGEsIHsgc2FuaXRpemUgPSB0cnVlIH0gPSB7fSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgY3VyclBvcyA9IG5ldyBJdGVtVGV4dExpc3RQb3NpdGlvbihudWxsLCB0aGlzLl9zdGFydCwgMCwgbmV3IE1hcCgpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWx0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IG9wID0gZGVsdGFbaV07XG4gICAgICAgICAgaWYgKG9wLmluc2VydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBRdWlsbCBhc3N1bWVzIHRoYXQgdGhlIGNvbnRlbnQgc3RhcnRzIHdpdGggYW4gZW1wdHkgcGFyYWdyYXBoLlxuICAgICAgICAgICAgLy8gWWpzL1kuVGV4dCBhc3N1bWVzIHRoYXQgaXQgc3RhcnRzIGVtcHR5LiBXZSBhbHdheXMgaGlkZSB0aGF0XG4gICAgICAgICAgICAvLyB0aGVyZSBpcyBhIG5ld2xpbmUgYXQgdGhlIGVuZCBvZiB0aGUgY29udGVudC5cbiAgICAgICAgICAgIC8vIElmIHdlIG9taXQgdGhpcyBzdGVwLCBjbGllbnRzIHdpbGwgc2VlIGEgZGlmZmVyZW50IG51bWJlciBvZlxuICAgICAgICAgICAgLy8gcGFyYWdyYXBocywgYnV0IG5vdGhpbmcgYmFkIHdpbGwgaGFwcGVuLlxuICAgICAgICAgICAgY29uc3QgaW5zID0gKCFzYW5pdGl6ZSAmJiB0eXBlb2Ygb3AuaW5zZXJ0ID09PSAnc3RyaW5nJyAmJiBpID09PSBkZWx0YS5sZW5ndGggLSAxICYmIGN1cnJQb3MucmlnaHQgPT09IG51bGwgJiYgb3AuaW5zZXJ0LnNsaWNlKC0xKSA9PT0gJ1xcbicpID8gb3AuaW5zZXJ0LnNsaWNlKDAsIC0xKSA6IG9wLmluc2VydDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5zICE9PSAnc3RyaW5nJyB8fCBpbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBpbnNlcnRUZXh0KHRyYW5zYWN0aW9uLCB0aGlzLCBjdXJyUG9zLCBpbnMsIG9wLmF0dHJpYnV0ZXMgfHwge30pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAob3AucmV0YWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdFRleHQodHJhbnNhY3Rpb24sIHRoaXMsIGN1cnJQb3MsIG9wLnJldGFpbiwgb3AuYXR0cmlidXRlcyB8fCB7fSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcC5kZWxldGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVsZXRlVGV4dCh0cmFuc2FjdGlvbiwgY3VyclBvcywgb3AuZGVsZXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGZ1bmN0aW9uPn0gKi8gKHRoaXMuX3BlbmRpbmcpLnB1c2goKCkgPT4gdGhpcy5hcHBseURlbHRhKGRlbHRhKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIERlbHRhIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgWVRleHQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtTbmFwc2hvdH0gW3NuYXBzaG90XVxuICAgKiBAcGFyYW0ge1NuYXBzaG90fSBbcHJldlNuYXBzaG90XVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCdyZW1vdmVkJyB8ICdhZGRlZCcsIElEKTphbnl9IFtjb21wdXRlWUNoYW5nZV1cbiAgICogQHJldHVybiB7YW55fSBUaGUgRGVsdGEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB0eXBlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICB0b0RlbHRhIChzbmFwc2hvdCwgcHJldlNuYXBzaG90LCBjb21wdXRlWUNoYW5nZSkge1xuICAgIC8qKlxuICAgICAqIEB0eXBle0FycmF5PGFueT59XG4gICAgICovXG4gICAgY29uc3Qgb3BzID0gW107XG4gICAgY29uc3QgY3VycmVudEF0dHJpYnV0ZXMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgZG9jID0gLyoqIEB0eXBlIHtEb2N9ICovICh0aGlzLmRvYyk7XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIGxldCBuID0gdGhpcy5fc3RhcnQ7XG4gICAgZnVuY3Rpb24gcGFja1N0ciAoKSB7XG4gICAgICBpZiAoc3RyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gcGFjayBzdHIgd2l0aCBhdHRyaWJ1dGVzIHRvIG9wc1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge09iamVjdDxzdHJpbmcsYW55Pn1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgbGV0IGFkZEF0dHJpYnV0ZXMgPSBmYWxzZTtcbiAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGFkZEF0dHJpYnV0ZXMgPSB0cnVlO1xuICAgICAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLGFueT59XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBvcCA9IHsgaW5zZXJ0OiBzdHIgfTtcbiAgICAgICAgaWYgKGFkZEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICBvcC5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgICAgfVxuICAgICAgICBvcHMucHVzaChvcCk7XG4gICAgICAgIHN0ciA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBzbmFwc2hvdHMgYXJlIG1lcmdlZCBhZ2FpbiBhZnRlciB0aGUgdHJhbnNhY3Rpb24sIHNvIHdlIG5lZWQgdG8ga2VlcCB0aGVcbiAgICAvLyB0cmFuc2FsaXZlIHVudGlsIHdlIGFyZSBkb25lXG4gICAgdHJhbnNhY3QoZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICBpZiAoc25hcHNob3QpIHtcbiAgICAgICAgc3BsaXRTbmFwc2hvdEFmZmVjdGVkU3RydWN0cyh0cmFuc2FjdGlvbiwgc25hcHNob3QpO1xuICAgICAgfVxuICAgICAgaWYgKHByZXZTbmFwc2hvdCkge1xuICAgICAgICBzcGxpdFNuYXBzaG90QWZmZWN0ZWRTdHJ1Y3RzKHRyYW5zYWN0aW9uLCBwcmV2U25hcHNob3QpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKG4gIT09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzVmlzaWJsZShuLCBzbmFwc2hvdCkgfHwgKHByZXZTbmFwc2hvdCAhPT0gdW5kZWZpbmVkICYmIGlzVmlzaWJsZShuLCBwcmV2U25hcHNob3QpKSkge1xuICAgICAgICAgIHN3aXRjaCAobi5jb250ZW50LmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjYXNlIENvbnRlbnRTdHJpbmc6IHtcbiAgICAgICAgICAgICAgY29uc3QgY3VyID0gY3VycmVudEF0dHJpYnV0ZXMuZ2V0KCd5Y2hhbmdlJyk7XG4gICAgICAgICAgICAgIGlmIChzbmFwc2hvdCAhPT0gdW5kZWZpbmVkICYmICFpc1Zpc2libGUobiwgc25hcHNob3QpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1ciA9PT0gdW5kZWZpbmVkIHx8IGN1ci51c2VyICE9PSBuLmlkLmNsaWVudCB8fCBjdXIuc3RhdGUgIT09ICdyZW1vdmVkJykge1xuICAgICAgICAgICAgICAgICAgcGFja1N0cigpO1xuICAgICAgICAgICAgICAgICAgY3VycmVudEF0dHJpYnV0ZXMuc2V0KCd5Y2hhbmdlJywgY29tcHV0ZVlDaGFuZ2UgPyBjb21wdXRlWUNoYW5nZSgncmVtb3ZlZCcsIG4uaWQpIDogeyB0eXBlOiAncmVtb3ZlZCcgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZTbmFwc2hvdCAhPT0gdW5kZWZpbmVkICYmICFpc1Zpc2libGUobiwgcHJldlNuYXBzaG90KSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXIgPT09IHVuZGVmaW5lZCB8fCBjdXIudXNlciAhPT0gbi5pZC5jbGllbnQgfHwgY3VyLnN0YXRlICE9PSAnYWRkZWQnKSB7XG4gICAgICAgICAgICAgICAgICBwYWNrU3RyKCk7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5zZXQoJ3ljaGFuZ2UnLCBjb21wdXRlWUNoYW5nZSA/IGNvbXB1dGVZQ2hhbmdlKCdhZGRlZCcsIG4uaWQpIDogeyB0eXBlOiAnYWRkZWQnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBhY2tTdHIoKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5kZWxldGUoJ3ljaGFuZ2UnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdHIgKz0gLyoqIEB0eXBlIHtDb250ZW50U3RyaW5nfSAqLyAobi5jb250ZW50KS5zdHI7XG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIENvbnRlbnRUeXBlOlxuICAgICAgICAgICAgY2FzZSBDb250ZW50RW1iZWQ6IHtcbiAgICAgICAgICAgICAgcGFja1N0cigpO1xuICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICogQHR5cGUge09iamVjdDxzdHJpbmcsYW55Pn1cbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIGNvbnN0IG9wID0ge1xuICAgICAgICAgICAgICAgIGluc2VydDogbi5jb250ZW50LmdldENvbnRlbnQoKVswXVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAoY3VycmVudEF0dHJpYnV0ZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRycyA9IC8qKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxhbnk+fSAqLyAoe30pO1xuICAgICAgICAgICAgICAgIG9wLmF0dHJpYnV0ZXMgPSBhdHRycztcbiAgICAgICAgICAgICAgICBjdXJyZW50QXR0cmlidXRlcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3BzLnB1c2gob3ApO1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBDb250ZW50Rm9ybWF0OlxuICAgICAgICAgICAgICBpZiAoaXNWaXNpYmxlKG4sIHNuYXBzaG90KSkge1xuICAgICAgICAgICAgICAgIHBhY2tTdHIoKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVDdXJyZW50QXR0cmlidXRlcyhjdXJyZW50QXR0cmlidXRlcywgLyoqIEB0eXBlIHtDb250ZW50Rm9ybWF0fSAqLyAobi5jb250ZW50KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG4ucmlnaHQ7XG4gICAgICB9XG4gICAgICBwYWNrU3RyKCk7XG4gICAgfSwgc3BsaXRTbmFwc2hvdEFmZmVjdGVkU3RydWN0cyk7XG4gICAgcmV0dXJuIG9wc1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydCB0ZXh0IGF0IGEgZ2l2ZW4gaW5kZXguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggYXQgd2hpY2ggdG8gc3RhcnQgaW5zZXJ0aW5nLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBpbnNlcnQgYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvbi5cbiAgICogQHBhcmFtIHtUZXh0QXR0cmlidXRlc30gW2F0dHJpYnV0ZXNdIE9wdGlvbmFsbHkgZGVmaW5lIHNvbWUgZm9ybWF0dGluZ1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uIHRvIGFwcGx5IG9uIHRoZSBpbnNlcnRlZFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHQuXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGluc2VydCAoaW5kZXgsIHRleHQsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAodGV4dC5sZW5ndGggPD0gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IHkgPSB0aGlzLmRvYztcbiAgICBpZiAoeSAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QoeSwgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICBjb25zdCBwb3MgPSBmaW5kUG9zaXRpb24odHJhbnNhY3Rpb24sIHRoaXMsIGluZGV4KTtcbiAgICAgICAgaWYgKCFhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBwb3MuY3VycmVudEF0dHJpYnV0ZXMuZm9yRWFjaCgodiwgaykgPT4geyBhdHRyaWJ1dGVzW2tdID0gdjsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0VGV4dCh0cmFuc2FjdGlvbiwgdGhpcywgcG9zLCB0ZXh0LCBhdHRyaWJ1dGVzKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGZ1bmN0aW9uPn0gKi8gKHRoaXMuX3BlbmRpbmcpLnB1c2goKCkgPT4gdGhpcy5pbnNlcnQoaW5kZXgsIHRleHQsIGF0dHJpYnV0ZXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0cyBhbiBlbWJlZCBhdCBhIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IHRvIGluc2VydCB0aGUgZW1iZWQgYXQuXG4gICAqIEBwYXJhbSB7T2JqZWN0IHwgQWJzdHJhY3RUeXBlPGFueT59IGVtYmVkIFRoZSBPYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBlbWJlZC5cbiAgICogQHBhcmFtIHtUZXh0QXR0cmlidXRlc30gYXR0cmlidXRlcyBBdHRyaWJ1dGUgaW5mb3JtYXRpb24gdG8gYXBwbHkgb24gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWRcbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgaW5zZXJ0RW1iZWQgKGluZGV4LCBlbWJlZCwgYXR0cmlidXRlcyA9IHt9KSB7XG4gICAgY29uc3QgeSA9IHRoaXMuZG9jO1xuICAgIGlmICh5ICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh5LCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IHBvcyA9IGZpbmRQb3NpdGlvbih0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgpO1xuICAgICAgICBpbnNlcnRUZXh0KHRyYW5zYWN0aW9uLCB0aGlzLCBwb3MsIGVtYmVkLCBhdHRyaWJ1dGVzKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PGZ1bmN0aW9uPn0gKi8gKHRoaXMuX3BlbmRpbmcpLnB1c2goKCkgPT4gdGhpcy5pbnNlcnRFbWJlZChpbmRleCwgZW1iZWQsIGF0dHJpYnV0ZXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyB0ZXh0IHN0YXJ0aW5nIGZyb20gYW4gaW5kZXguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0byBzdGFydCBkZWxldGluZy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdG8gcmVtb3ZlLiBEZWZhdWx0cyB0byAxLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBkZWxldGUgKGluZGV4LCBsZW5ndGgpIHtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgeSA9IHRoaXMuZG9jO1xuICAgIGlmICh5ICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh5LCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIGRlbGV0ZVRleHQodHJhbnNhY3Rpb24sIGZpbmRQb3NpdGlvbih0cmFuc2FjdGlvbiwgdGhpcywgaW5kZXgpLCBsZW5ndGgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykucHVzaCgoKSA9PiB0aGlzLmRlbGV0ZShpbmRleCwgbGVuZ3RoKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFzc2lnbnMgcHJvcGVydGllcyB0byBhIHJhbmdlIG9mIHRleHQuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgcG9zaXRpb24gd2hlcmUgdG8gc3RhcnQgZm9ybWF0dGluZy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgYW1vdW50IG9mIGNoYXJhY3RlcnMgdG8gYXNzaWduIHByb3BlcnRpZXMgdG8uXG4gICAqIEBwYXJhbSB7VGV4dEF0dHJpYnV0ZXN9IGF0dHJpYnV0ZXMgQXR0cmlidXRlIGluZm9ybWF0aW9uIHRvIGFwcGx5IG9uIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGZvcm1hdCAoaW5kZXgsIGxlbmd0aCwgYXR0cmlidXRlcykge1xuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCB5ID0gdGhpcy5kb2M7XG4gICAgaWYgKHkgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHksIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgY29uc3QgcG9zID0gZmluZFBvc2l0aW9uKHRyYW5zYWN0aW9uLCB0aGlzLCBpbmRleCk7XG4gICAgICAgIGlmIChwb3MucmlnaHQgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBmb3JtYXRUZXh0KHRyYW5zYWN0aW9uLCB0aGlzLCBwb3MsIGxlbmd0aCwgYXR0cmlidXRlcyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxmdW5jdGlvbj59ICovICh0aGlzLl9wZW5kaW5nKS5wdXNoKCgpID0+IHRoaXMuZm9ybWF0KGluZGV4LCBsZW5ndGgsIGF0dHJpYnV0ZXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBhdHRyaWJ1dGUuXG4gICAqXG4gICAqIEBub3RlIFhtbC1UZXh0IG5vZGVzIGRvbid0IGhhdmUgYXR0cmlidXRlcy4gWW91IGNhbiB1c2UgdGhpcyBmZWF0dXJlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzIHRvIGNvbXBsZXRlIHRleHQtYmxvY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlTmFtZSBUaGUgYXR0cmlidXRlIG5hbWUgdGhhdCBpcyB0byBiZSByZW1vdmVkLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICByZW1vdmVBdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVNYXBEZWxldGUodHJhbnNhY3Rpb24sIHRoaXMsIGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24+fSAqLyAodGhpcy5fcGVuZGluZykucHVzaCgoKSA9PiB0aGlzLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgb3IgdXBkYXRlcyBhbiBhdHRyaWJ1dGUuXG4gICAqXG4gICAqIEBub3RlIFhtbC1UZXh0IG5vZGVzIGRvbid0IGhhdmUgYXR0cmlidXRlcy4gWW91IGNhbiB1c2UgdGhpcyBmZWF0dXJlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzIHRvIGNvbXBsZXRlIHRleHQtYmxvY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlTmFtZSBUaGUgYXR0cmlidXRlIG5hbWUgdGhhdCBpcyB0byBiZSBzZXQuXG4gICAqIEBwYXJhbSB7YW55fSBhdHRyaWJ1dGVWYWx1ZSBUaGUgYXR0cmlidXRlIHZhbHVlIHRoYXQgaXMgdG8gYmUgc2V0LlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBzZXRBdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTWFwU2V0KHRyYW5zYWN0aW9uLCB0aGlzLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqIEB0eXBlIHtBcnJheTxmdW5jdGlvbj59ICovICh0aGlzLl9wZW5kaW5nKS5wdXNoKCgpID0+IHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXR0cmlidXRlIHZhbHVlIHRoYXQgYmVsb25ncyB0byB0aGUgYXR0cmlidXRlIG5hbWUuXG4gICAqXG4gICAqIEBub3RlIFhtbC1UZXh0IG5vZGVzIGRvbid0IGhhdmUgYXR0cmlidXRlcy4gWW91IGNhbiB1c2UgdGhpcyBmZWF0dXJlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzIHRvIGNvbXBsZXRlIHRleHQtYmxvY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlTmFtZSBUaGUgYXR0cmlidXRlIG5hbWUgdGhhdCBpZGVudGlmaWVzIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyaWVkIHZhbHVlLlxuICAgKiBAcmV0dXJuIHthbnl9IFRoZSBxdWVyaWVkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0QXR0cmlidXRlIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7YW55fSAqLyAodHlwZU1hcEdldCh0aGlzLCBhdHRyaWJ1dGVOYW1lKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBhdHRyaWJ1dGUgbmFtZS92YWx1ZSBwYWlycyBpbiBhIEpTT04gT2JqZWN0LlxuICAgKlxuICAgKiBAbm90ZSBYbWwtVGV4dCBub2RlcyBkb24ndCBoYXZlIGF0dHJpYnV0ZXMuIFlvdSBjYW4gdXNlIHRoaXMgZmVhdHVyZSB0byBhc3NpZ24gcHJvcGVydGllcyB0byBjb21wbGV0ZSB0ZXh0LWJsb2Nrcy5cbiAgICpcbiAgICogQHBhcmFtIHtTbmFwc2hvdH0gW3NuYXBzaG90XVxuICAgKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBBIEpTT04gT2JqZWN0IHRoYXQgZGVzY3JpYmVzIHRoZSBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRBdHRyaWJ1dGVzIChzbmFwc2hvdCkge1xuICAgIHJldHVybiB0eXBlTWFwR2V0QWxsKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICovXG4gIF93cml0ZSAoZW5jb2Rlcikge1xuICAgIGVuY29kZXIud3JpdGVUeXBlUmVmKFlUZXh0UmVmSUQpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1lUZXh0fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZFlUZXh0ID0gZGVjb2RlciA9PiBuZXcgWVRleHQoKTtcblxuLyoqXG4gKiBAbW9kdWxlIFlYbWxcbiAqL1xuXG4vKipcbiAqIERlZmluZSB0aGUgZWxlbWVudHMgdG8gd2hpY2ggYSBzZXQgb2YgQ1NTIHF1ZXJpZXMgYXBwbHkuXG4gKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NTU19TZWxlY3RvcnN8Q1NTX1NlbGVjdG9yc31cbiAqXG4gKiBAZXhhbXBsZVxuICogICBxdWVyeSA9ICcuY2xhc3NTZWxlY3RvcidcbiAqICAgcXVlcnkgPSAnbm9kZVNlbGVjdG9yJ1xuICogICBxdWVyeSA9ICcjaWRTZWxlY3RvcidcbiAqXG4gKiBAdHlwZWRlZiB7c3RyaW5nfSBDU1NfU2VsZWN0b3JcbiAqL1xuXG4vKipcbiAqIERvbSBmaWx0ZXIgZnVuY3Rpb24uXG4gKlxuICogQGNhbGxiYWNrIGRvbUZpbHRlclxuICogQHBhcmFtIHtzdHJpbmd9IG5vZGVOYW1lIFRoZSBub2RlTmFtZSBvZiB0aGUgZWxlbWVudFxuICogQHBhcmFtIHtNYXB9IGF0dHJpYnV0ZXMgVGhlIG1hcCBvZiBhdHRyaWJ1dGVzLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0byBpbmNsdWRlIHRoZSBEb20gbm9kZSBpbiB0aGUgWVhtbEVsZW1lbnQuXG4gKi9cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc3Vic2V0IG9mIHRoZSBub2RlcyBvZiBhIFlYbWxFbGVtZW50IC8gWVhtbEZyYWdtZW50IGFuZCBhXG4gKiBwb3NpdGlvbiB3aXRoaW4gdGhlbS5cbiAqXG4gKiBDYW4gYmUgY3JlYXRlZCB3aXRoIHtAbGluayBZWG1sRnJhZ21lbnQjY3JlYXRlVHJlZVdhbGtlcn1cbiAqXG4gKiBAcHVibGljXG4gKiBAaW1wbGVtZW50cyB7SXRlcmFibGU8WVhtbEVsZW1lbnR8WVhtbFRleHR8WVhtbEVsZW1lbnR8WVhtbEhvb2s+fVxuICovXG5jbGFzcyBZWG1sVHJlZVdhbGtlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1lYbWxGcmFnbWVudCB8IFlYbWxFbGVtZW50fSByb290XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oQWJzdHJhY3RUeXBlPGFueT4pOmJvb2xlYW59IFtmXVxuICAgKi9cbiAgY29uc3RydWN0b3IgKHJvb3QsIGYgPSAoKSA9PiB0cnVlKSB7XG4gICAgdGhpcy5fZmlsdGVyID0gZjtcbiAgICB0aGlzLl9yb290ID0gcm9vdDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7SXRlbX1cbiAgICAgKi9cbiAgICB0aGlzLl9jdXJyZW50Tm9kZSA9IC8qKiBAdHlwZSB7SXRlbX0gKi8gKHJvb3QuX3N0YXJ0KTtcbiAgICB0aGlzLl9maXJzdENhbGwgPSB0cnVlO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0gKCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBuZXh0IG5vZGUuXG4gICAqXG4gICAqIEByZXR1cm4ge0l0ZXJhdG9yUmVzdWx0PFlYbWxFbGVtZW50fFlYbWxUZXh0fFlYbWxIb29rPn0gVGhlIG5leHQgbm9kZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgbmV4dCAoKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICAgKi9cbiAgICBsZXQgbiA9IHRoaXMuX2N1cnJlbnROb2RlO1xuICAgIGxldCB0eXBlID0gbiAmJiBuLmNvbnRlbnQgJiYgLyoqIEB0eXBlIHthbnl9ICovIChuLmNvbnRlbnQpLnR5cGU7XG4gICAgaWYgKG4gIT09IG51bGwgJiYgKCF0aGlzLl9maXJzdENhbGwgfHwgbi5kZWxldGVkIHx8ICF0aGlzLl9maWx0ZXIodHlwZSkpKSB7IC8vIGlmIGZpcnN0IGNhbGwsIHdlIGNoZWNrIGlmIHdlIGNhbiB1c2UgdGhlIGZpcnN0IGl0ZW1cbiAgICAgIGRvIHtcbiAgICAgICAgdHlwZSA9IC8qKiBAdHlwZSB7YW55fSAqLyAobi5jb250ZW50KS50eXBlO1xuICAgICAgICBpZiAoIW4uZGVsZXRlZCAmJiAodHlwZS5jb25zdHJ1Y3RvciA9PT0gWVhtbEVsZW1lbnQgfHwgdHlwZS5jb25zdHJ1Y3RvciA9PT0gWVhtbEZyYWdtZW50KSAmJiB0eXBlLl9zdGFydCAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIHdhbGsgZG93biBpbiB0aGUgdHJlZVxuICAgICAgICAgIG4gPSB0eXBlLl9zdGFydDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB3YWxrIHJpZ2h0IG9yIHVwIGluIHRoZSB0cmVlXG4gICAgICAgICAgd2hpbGUgKG4gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChuLnJpZ2h0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIG4gPSBuLnJpZ2h0O1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuLnBhcmVudCA9PT0gdGhpcy5fcm9vdCkge1xuICAgICAgICAgICAgICBuID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG4gPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAobi5wYXJlbnQpLl9pdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobiAhPT0gbnVsbCAmJiAobi5kZWxldGVkIHx8ICF0aGlzLl9maWx0ZXIoLyoqIEB0eXBlIHtDb250ZW50VHlwZX0gKi8gKG4uY29udGVudCkudHlwZSkpKVxuICAgIH1cbiAgICB0aGlzLl9maXJzdENhbGwgPSBmYWxzZTtcbiAgICBpZiAobiA9PT0gbnVsbCkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9XG4gICAgfVxuICAgIHRoaXMuX2N1cnJlbnROb2RlID0gbjtcbiAgICByZXR1cm4geyB2YWx1ZTogLyoqIEB0eXBlIHthbnl9ICovIChuLmNvbnRlbnQpLnR5cGUsIGRvbmU6IGZhbHNlIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBsaXN0IG9mIHtAbGluayBZWG1sRWxlbWVudH0uYW5kIHtAbGluayBZWG1sVGV4dH0gdHlwZXMuXG4gKiBBIFl4bWxGcmFnbWVudCBpcyBzaW1pbGFyIHRvIGEge0BsaW5rIFlYbWxFbGVtZW50fSwgYnV0IGl0IGRvZXMgbm90IGhhdmUgYVxuICogbm9kZU5hbWUgYW5kIGl0IGRvZXMgbm90IGhhdmUgYXR0cmlidXRlcy4gVGhvdWdoIGl0IGNhbiBiZSBib3VuZCB0byBhIERPTVxuICogZWxlbWVudCAtIGluIHRoaXMgY2FzZSB0aGUgYXR0cmlidXRlcyBhbmQgdGhlIG5vZGVOYW1lIGFyZSBub3Qgc2hhcmVkLlxuICpcbiAqIEBwdWJsaWNcbiAqIEBleHRlbmRzIEFic3RyYWN0VHlwZTxZWG1sRXZlbnQ+XG4gKi9cbmNsYXNzIFlYbWxGcmFnbWVudCBleHRlbmRzIEFic3RyYWN0VHlwZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxhbnk+fG51bGx9XG4gICAgICovXG4gICAgdGhpcy5fcHJlbGltQ29udGVudCA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtZWG1sRWxlbWVudHxZWG1sVGV4dHxudWxsfVxuICAgKi9cbiAgZ2V0IGZpcnN0Q2hpbGQgKCkge1xuICAgIGNvbnN0IGZpcnN0ID0gdGhpcy5fZmlyc3Q7XG4gICAgcmV0dXJuIGZpcnN0ID8gZmlyc3QuY29udGVudC5nZXRDb250ZW50KClbMF0gOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogSW50ZWdyYXRlIHRoaXMgdHlwZSBpbnRvIHRoZSBZanMgaW5zdGFuY2UuXG4gICAqXG4gICAqICogU2F2ZSB0aGlzIHN0cnVjdCBpbiB0aGUgb3NcbiAgICogKiBUaGlzIHR5cGUgaXMgc2VudCB0byBvdGhlciBjbGllbnRcbiAgICogKiBPYnNlcnZlciBmdW5jdGlvbnMgYXJlIGZpcmVkXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jfSB5IFRoZSBZanMgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBfaW50ZWdyYXRlICh5LCBpdGVtKSB7XG4gICAgc3VwZXIuX2ludGVncmF0ZSh5LCBpdGVtKTtcbiAgICB0aGlzLmluc2VydCgwLCAvKiogQHR5cGUge0FycmF5PGFueT59ICovICh0aGlzLl9wcmVsaW1Db250ZW50KSk7XG4gICAgdGhpcy5fcHJlbGltQ29udGVudCA9IG51bGw7XG4gIH1cblxuICBfY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBZWG1sRnJhZ21lbnQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1lYbWxGcmFnbWVudH1cbiAgICovXG4gIGNsb25lICgpIHtcbiAgICBjb25zdCBlbCA9IG5ldyBZWG1sRnJhZ21lbnQoKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZWwuaW5zZXJ0KDAsIHRoaXMudG9BcnJheSgpLm1hcChpdGVtID0+IGl0ZW0gaW5zdGFuY2VvZiBBYnN0cmFjdFR5cGUgPyBpdGVtLmNsb25lKCkgOiBpdGVtKSk7XG4gICAgcmV0dXJuIGVsXG4gIH1cblxuICBnZXQgbGVuZ3RoICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJlbGltQ29udGVudCA9PT0gbnVsbCA/IHRoaXMuX2xlbmd0aCA6IHRoaXMuX3ByZWxpbUNvbnRlbnQubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgc3VidHJlZSBvZiBjaGlsZE5vZGVzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCB3YWxrZXIgPSBlbGVtLmNyZWF0ZVRyZWVXYWxrZXIoZG9tID0+IGRvbS5ub2RlTmFtZSA9PT0gJ2RpdicpXG4gICAqIGZvciAobGV0IG5vZGUgaW4gd2Fsa2VyKSB7XG4gICAqICAgLy8gYG5vZGVgIGlzIGEgZGl2IG5vZGVcbiAgICogICBub3Aobm9kZSlcbiAgICogfVxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEFic3RyYWN0VHlwZTxhbnk+KTpib29sZWFufSBmaWx0ZXIgRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgb24gZWFjaCBjaGlsZCBlbGVtZW50IGFuZFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBjaGlsZFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIHN1YnRyZWUuXG4gICAqIEByZXR1cm4ge1lYbWxUcmVlV2Fsa2VyfSBBIHN1YnRyZWUgYW5kIGEgcG9zaXRpb24gd2l0aGluIGl0LlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBjcmVhdGVUcmVlV2Fsa2VyIChmaWx0ZXIpIHtcbiAgICByZXR1cm4gbmV3IFlYbWxUcmVlV2Fsa2VyKHRoaXMsIGZpbHRlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBZWG1sRWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHF1ZXJ5LlxuICAgKiBTaW1pbGFyIHRvIERPTSdzIHtAbGluayBxdWVyeVNlbGVjdG9yfS5cbiAgICpcbiAgICogUXVlcnkgc3VwcG9ydDpcbiAgICogICAtIHRhZ25hbWVcbiAgICogVE9ETzpcbiAgICogICAtIGlkXG4gICAqICAgLSBhdHRyaWJ1dGVcbiAgICpcbiAgICogQHBhcmFtIHtDU1NfU2VsZWN0b3J9IHF1ZXJ5IFRoZSBxdWVyeSBvbiB0aGUgY2hpbGRyZW4uXG4gICAqIEByZXR1cm4ge1lYbWxFbGVtZW50fFlYbWxUZXh0fFlYbWxIb29rfG51bGx9IFRoZSBmaXJzdCBlbGVtZW50IHRoYXQgbWF0Y2hlcyB0aGUgcXVlcnkgb3IgbnVsbC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcXVlcnlTZWxlY3RvciAocXVlcnkpIHtcbiAgICBxdWVyeSA9IHF1ZXJ5LnRvVXBwZXJDYXNlKCk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGl0ZXJhdG9yID0gbmV3IFlYbWxUcmVlV2Fsa2VyKHRoaXMsIGVsZW1lbnQgPT4gZWxlbWVudC5ub2RlTmFtZSAmJiBlbGVtZW50Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09IHF1ZXJ5KTtcbiAgICBjb25zdCBuZXh0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgIGlmIChuZXh0LmRvbmUpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXh0LnZhbHVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIFlYbWxFbGVtZW50cyB0aGF0IG1hdGNoIHRoZSBxdWVyeS5cbiAgICogU2ltaWxhciB0byBEb20ncyB7QGxpbmsgcXVlcnlTZWxlY3RvckFsbH0uXG4gICAqXG4gICAqIEB0b2RvIERvZXMgbm90IHlldCBzdXBwb3J0IGFsbCBxdWVyaWVzLiBDdXJyZW50bHkgb25seSBxdWVyeSBieSB0YWdOYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge0NTU19TZWxlY3Rvcn0gcXVlcnkgVGhlIHF1ZXJ5IG9uIHRoZSBjaGlsZHJlblxuICAgKiBAcmV0dXJuIHtBcnJheTxZWG1sRWxlbWVudHxZWG1sVGV4dHxZWG1sSG9va3xudWxsPn0gVGhlIGVsZW1lbnRzIHRoYXQgbWF0Y2ggdGhpcyBxdWVyeS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcXVlcnlTZWxlY3RvckFsbCAocXVlcnkpIHtcbiAgICBxdWVyeSA9IHF1ZXJ5LnRvVXBwZXJDYXNlKCk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBZWG1sVHJlZVdhbGtlcih0aGlzLCBlbGVtZW50ID0+IGVsZW1lbnQubm9kZU5hbWUgJiYgZWxlbWVudC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSBxdWVyeSkpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBZWG1sRXZlbnQgYW5kIGNhbGxzIG9ic2VydmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTZXQ8bnVsbHxzdHJpbmc+fSBwYXJlbnRTdWJzIEtleXMgY2hhbmdlZCBvbiB0aGlzIHR5cGUuIGBudWxsYCBpZiBsaXN0IHdhcyBtb2RpZmllZC5cbiAgICovXG4gIF9jYWxsT2JzZXJ2ZXIgKHRyYW5zYWN0aW9uLCBwYXJlbnRTdWJzKSB7XG4gICAgY2FsbFR5cGVPYnNlcnZlcnModGhpcywgdHJhbnNhY3Rpb24sIG5ldyBZWG1sRXZlbnQodGhpcywgcGFyZW50U3VicywgdHJhbnNhY3Rpb24pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbGwgdGhlIGNoaWxkcmVuIG9mIHRoaXMgWVhtbEZyYWdtZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYWxsIGNoaWxkcmVuLlxuICAgKi9cbiAgdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0eXBlTGlzdE1hcCh0aGlzLCB4bWwgPT4geG1sLnRvU3RyaW5nKCkpLmpvaW4oJycpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIERvbSBFbGVtZW50IHRoYXQgbWlycm9ycyB0aGlzIFlYbWxFbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0RvY3VtZW50fSBbX2RvY3VtZW50PWRvY3VtZW50XSBUaGUgZG9jdW1lbnQgb2JqZWN0ICh5b3UgbXVzdCBkZWZpbmVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyB3aGVuIGNhbGxpbmcgdGhpcyBtZXRob2QgaW5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZWpzKVxuICAgKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IFtob29rcz17fV0gT3B0aW9uYWwgcHJvcGVydHkgdG8gY3VzdG9taXplIGhvdyBob29rc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBwcmVzZW50ZWQgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0ge2FueX0gW2JpbmRpbmddIFlvdSBzaG91bGQgbm90IHNldCB0aGlzIHByb3BlcnR5LiBUaGlzIGlzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgaWYgRG9tQmluZGluZyB3YW50cyB0byBjcmVhdGUgYVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NvY2lhdGlvbiB0byB0aGUgY3JlYXRlZCBET00gdHlwZS5cbiAgICogQHJldHVybiB7Tm9kZX0gVGhlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudHxEb20gRWxlbWVudH1cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9ET00gKF9kb2N1bWVudCA9IGRvY3VtZW50LCBob29rcyA9IHt9LCBiaW5kaW5nKSB7XG4gICAgY29uc3QgZnJhZ21lbnQgPSBfZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIGlmIChiaW5kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJpbmRpbmcuX2NyZWF0ZUFzc29jaWF0aW9uKGZyYWdtZW50LCB0aGlzKTtcbiAgICB9XG4gICAgdHlwZUxpc3RGb3JFYWNoKHRoaXMsIHhtbFR5cGUgPT4ge1xuICAgICAgZnJhZ21lbnQuaW5zZXJ0QmVmb3JlKHhtbFR5cGUudG9ET00oX2RvY3VtZW50LCBob29rcywgYmluZGluZyksIG51bGwpO1xuICAgIH0pO1xuICAgIHJldHVybiBmcmFnbWVudFxuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgbmV3IGNvbnRlbnQgYXQgYW4gaW5kZXguXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAvLyBJbnNlcnQgY2hhcmFjdGVyICdhJyBhdCBwb3NpdGlvbiAwXG4gICAqICB4bWwuaW5zZXJ0KDAsIFtuZXcgWS5YbWxUZXh0KCd0ZXh0JyldKVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IHRvIGluc2VydCBjb250ZW50IGF0XG4gICAqIEBwYXJhbSB7QXJyYXk8WVhtbEVsZW1lbnR8WVhtbFRleHQ+fSBjb250ZW50IFRoZSBhcnJheSBvZiBjb250ZW50XG4gICAqL1xuICBpbnNlcnQgKGluZGV4LCBjb250ZW50KSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICB0eXBlTGlzdEluc2VydEdlbmVyaWNzKHRyYW5zYWN0aW9uLCB0aGlzLCBpbmRleCwgY29udGVudCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQHRzLWlnbm9yZSBfcHJlbGltQ29udGVudCBpcyBkZWZpbmVkIGJlY2F1c2UgdGhpcyBpcyBub3QgeWV0IGludGVncmF0ZWRcbiAgICAgIHRoaXMuX3ByZWxpbUNvbnRlbnQuc3BsaWNlKGluZGV4LCAwLCAuLi5jb250ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0cyBuZXcgY29udGVudCBhdCBhbiBpbmRleC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogIC8vIEluc2VydCBjaGFyYWN0ZXIgJ2EnIGF0IHBvc2l0aW9uIDBcbiAgICogIHhtbC5pbnNlcnQoMCwgW25ldyBZLlhtbFRleHQoJ3RleHQnKV0pXG4gICAqXG4gICAqIEBwYXJhbSB7bnVsbHxJdGVtfFlYbWxFbGVtZW50fFlYbWxUZXh0fSByZWYgVGhlIGluZGV4IHRvIGluc2VydCBjb250ZW50IGF0XG4gICAqIEBwYXJhbSB7QXJyYXk8WVhtbEVsZW1lbnR8WVhtbFRleHQ+fSBjb250ZW50IFRoZSBhcnJheSBvZiBjb250ZW50XG4gICAqL1xuICBpbnNlcnRBZnRlciAocmVmLCBjb250ZW50KSB7XG4gICAgaWYgKHRoaXMuZG9jICE9PSBudWxsKSB7XG4gICAgICB0cmFuc2FjdCh0aGlzLmRvYywgdHJhbnNhY3Rpb24gPT4ge1xuICAgICAgICBjb25zdCByZWZJdGVtID0gKHJlZiAmJiByZWYgaW5zdGFuY2VvZiBBYnN0cmFjdFR5cGUpID8gcmVmLl9pdGVtIDogcmVmO1xuICAgICAgICB0eXBlTGlzdEluc2VydEdlbmVyaWNzQWZ0ZXIodHJhbnNhY3Rpb24sIHRoaXMsIHJlZkl0ZW0sIGNvbnRlbnQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBjID0gLyoqIEB0eXBlIHtBcnJheTxhbnk+fSAqLyAodGhpcy5fcHJlbGltQ29udGVudCk7XG4gICAgICBjb25zdCBpbmRleCA9IHJlZiA9PT0gbnVsbCA/IDAgOiBwYy5maW5kSW5kZXgoZWwgPT4gZWwgPT09IHJlZikgKyAxO1xuICAgICAgaWYgKGluZGV4ID09PSAwICYmIHJlZiAhPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBlcnJvci5jcmVhdGUoJ1JlZmVyZW5jZSBpdGVtIG5vdCBmb3VuZCcpXG4gICAgICB9XG4gICAgICBwYy5zcGxpY2UoaW5kZXgsIDAsIC4uLmNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGVsZW1lbnRzIHN0YXJ0aW5nIGZyb20gYW4gaW5kZXguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0byBzdGFydCBkZWxldGluZyBlbGVtZW50c1xuICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS4gRGVmYXVsdHMgdG8gMS5cbiAgICovXG4gIGRlbGV0ZSAoaW5kZXgsIGxlbmd0aCA9IDEpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVMaXN0RGVsZXRlKHRyYW5zYWN0aW9uLCB0aGlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBAdHMtaWdub3JlIF9wcmVsaW1Db250ZW50IGlzIGRlZmluZWQgYmVjYXVzZSB0aGlzIGlzIG5vdCB5ZXQgaW50ZWdyYXRlZFxuICAgICAgdGhpcy5fcHJlbGltQ29udGVudC5zcGxpY2UoaW5kZXgsIGxlbmd0aCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhpcyBZQXJyYXkgdG8gYSBKYXZhU2NyaXB0IEFycmF5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheTxZWG1sRWxlbWVudHxZWG1sVGV4dHxZWG1sSG9vaz59XG4gICAqL1xuICB0b0FycmF5ICgpIHtcbiAgICByZXR1cm4gdHlwZUxpc3RUb0FycmF5KHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyBjb250ZW50IHRvIHRoaXMgWUFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PFlYbWxFbGVtZW50fFlYbWxUZXh0Pn0gY29udGVudCBBcnJheSBvZiBjb250ZW50IHRvIGFwcGVuZC5cbiAgICovXG4gIHB1c2ggKGNvbnRlbnQpIHtcbiAgICB0aGlzLmluc2VydCh0aGlzLmxlbmd0aCwgY29udGVudCk7XG4gIH1cblxuICAvKipcbiAgICogUHJlcHBlbmRzIGNvbnRlbnQgdG8gdGhpcyBZQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk8WVhtbEVsZW1lbnR8WVhtbFRleHQ+fSBjb250ZW50IEFycmF5IG9mIGNvbnRlbnQgdG8gcHJlcHBlbmQuXG4gICAqL1xuICB1bnNoaWZ0IChjb250ZW50KSB7XG4gICAgdGhpcy5pbnNlcnQoMCwgY29udGVudCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaS10aCBlbGVtZW50IGZyb20gYSBZQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuIGZyb20gdGhlIFlBcnJheVxuICAgKiBAcmV0dXJuIHtZWG1sRWxlbWVudHxZWG1sVGV4dH1cbiAgICovXG4gIGdldCAoaW5kZXgpIHtcbiAgICByZXR1cm4gdHlwZUxpc3RHZXQodGhpcywgaW5kZXgpXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyB0aGlzIFlBcnJheSB0byBhIEphdmFTY3JpcHQgQXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnRdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kXVxuICAgKiBAcmV0dXJuIHtBcnJheTxZWG1sRWxlbWVudHxZWG1sVGV4dD59XG4gICAqL1xuICBzbGljZSAoc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiB0eXBlTGlzdFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgYSBwcm92aWRlZCBmdW5jdGlvbiBvbiBvbmNlIG9uIG92ZXJ5IGNoaWxkIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oWVhtbEVsZW1lbnR8WVhtbFRleHQsbnVtYmVyLCB0eXBlb2YgdGhpcyk6dm9pZH0gZiBBIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZXZlcnkgZWxlbWVudCBvZiB0aGlzIFlBcnJheS5cbiAgICovXG4gIGZvckVhY2ggKGYpIHtcbiAgICB0eXBlTGlzdEZvckVhY2godGhpcywgZik7XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgdHlwZSB0byBiaW5hcnkgYW5kIHdyaXRlIGl0IHRvIGFuXG4gICAqIEJpbmFyeUVuY29kZXIuXG4gICAqXG4gICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gdGhpcyBJdGVtIGlzIHNlbnQgdG8gYSByZW1vdGUgcGVlci5cbiAgICpcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXIgVGhlIGVuY29kZXIgdG8gd3JpdGUgZGF0YSB0by5cbiAgICovXG4gIF93cml0ZSAoZW5jb2Rlcikge1xuICAgIGVuY29kZXIud3JpdGVUeXBlUmVmKFlYbWxGcmFnbWVudFJlZklEKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtZWG1sRnJhZ21lbnR9XG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICovXG5jb25zdCByZWFkWVhtbEZyYWdtZW50ID0gZGVjb2RlciA9PiBuZXcgWVhtbEZyYWdtZW50KCk7XG5cbi8qKlxuICogQW4gWVhtbEVsZW1lbnQgaW1pdGF0ZXMgdGhlIGJlaGF2aW9yIG9mIGFcbiAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudHxEb20gRWxlbWVudH0uXG4gKlxuICogKiBBbiBZWG1sRWxlbWVudCBoYXMgYXR0cmlidXRlcyAoa2V5IHZhbHVlIHBhaXJzKVxuICogKiBBbiBZWG1sRWxlbWVudCBoYXMgY2hpbGRFbGVtZW50cyB0aGF0IG11c3QgaW5oZXJpdCBmcm9tIFlYbWxFbGVtZW50XG4gKi9cbmNsYXNzIFlYbWxFbGVtZW50IGV4dGVuZHMgWVhtbEZyYWdtZW50IHtcbiAgY29uc3RydWN0b3IgKG5vZGVOYW1lID0gJ1VOREVGSU5FRCcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubm9kZU5hbWUgPSBub2RlTmFtZTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZywgYW55PnxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX3ByZWxpbUF0dHJzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtZWG1sRWxlbWVudHxZWG1sVGV4dHxudWxsfVxuICAgKi9cbiAgZ2V0IG5leHRTaWJsaW5nICgpIHtcbiAgICBjb25zdCBuID0gdGhpcy5faXRlbSA/IHRoaXMuX2l0ZW0ubmV4dCA6IG51bGw7XG4gICAgcmV0dXJuIG4gPyAvKiogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fSAqLyAoLyoqIEB0eXBlIHtDb250ZW50VHlwZX0gKi8gKG4uY29udGVudCkudHlwZSkgOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fG51bGx9XG4gICAqL1xuICBnZXQgcHJldlNpYmxpbmcgKCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLl9pdGVtID8gdGhpcy5faXRlbS5wcmV2IDogbnVsbDtcbiAgICByZXR1cm4gbiA/IC8qKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR9ICovICgvKiogQHR5cGUge0NvbnRlbnRUeXBlfSAqLyAobi5jb250ZW50KS50eXBlKSA6IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlZ3JhdGUgdGhpcyB0eXBlIGludG8gdGhlIFlqcyBpbnN0YW5jZS5cbiAgICpcbiAgICogKiBTYXZlIHRoaXMgc3RydWN0IGluIHRoZSBvc1xuICAgKiAqIFRoaXMgdHlwZSBpcyBzZW50IHRvIG90aGVyIGNsaWVudFxuICAgKiAqIE9ic2VydmVyIGZ1bmN0aW9ucyBhcmUgZmlyZWRcbiAgICpcbiAgICogQHBhcmFtIHtEb2N9IHkgVGhlIFlqcyBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIF9pbnRlZ3JhdGUgKHksIGl0ZW0pIHtcbiAgICBzdXBlci5faW50ZWdyYXRlKHksIGl0ZW0pXG4gICAgOygvKiogQHR5cGUge01hcDxzdHJpbmcsIGFueT59ICovICh0aGlzLl9wcmVsaW1BdHRycykpLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHRoaXMuX3ByZWxpbUF0dHJzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIEl0ZW0gd2l0aCB0aGUgc2FtZSBlZmZlY3QgYXMgdGhpcyBJdGVtICh3aXRob3V0IHBvc2l0aW9uIGVmZmVjdClcbiAgICpcbiAgICogQHJldHVybiB7WVhtbEVsZW1lbnR9XG4gICAqL1xuICBfY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBZWG1sRWxlbWVudCh0aGlzLm5vZGVOYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1lYbWxFbGVtZW50fVxuICAgKi9cbiAgY2xvbmUgKCkge1xuICAgIGNvbnN0IGVsID0gbmV3IFlYbWxFbGVtZW50KHRoaXMubm9kZU5hbWUpO1xuICAgIGNvbnN0IGF0dHJzID0gdGhpcy5nZXRBdHRyaWJ1dGVzKCk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZWwuaW5zZXJ0KDAsIHRoaXMudG9BcnJheSgpLm1hcChpdGVtID0+IGl0ZW0gaW5zdGFuY2VvZiBBYnN0cmFjdFR5cGUgPyBpdGVtLmNsb25lKCkgOiBpdGVtKSk7XG4gICAgcmV0dXJuIGVsXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgWE1MIHNlcmlhbGl6YXRpb24gb2YgdGhpcyBZWG1sRWxlbWVudC5cbiAgICogVGhlIGF0dHJpYnV0ZXMgYXJlIG9yZGVyZWQgYnkgYXR0cmlidXRlLW5hbWUsIHNvIHlvdSBjYW4gZWFzaWx5IHVzZSB0aGlzXG4gICAqIG1ldGhvZCB0byBjb21wYXJlIFlYbWxFbGVtZW50c1xuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB0eXBlLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICB0b1N0cmluZyAoKSB7XG4gICAgY29uc3QgYXR0cnMgPSB0aGlzLmdldEF0dHJpYnV0ZXMoKTtcbiAgICBjb25zdCBzdHJpbmdCdWlsZGVyID0gW107XG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5zb3J0KCk7XG4gICAgY29uc3Qga2V5c0xlbiA9IGtleXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5c0xlbjsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgc3RyaW5nQnVpbGRlci5wdXNoKGtleSArICc9XCInICsgYXR0cnNba2V5XSArICdcIicpO1xuICAgIH1cbiAgICBjb25zdCBub2RlTmFtZSA9IHRoaXMubm9kZU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICBjb25zdCBhdHRyc1N0cmluZyA9IHN0cmluZ0J1aWxkZXIubGVuZ3RoID4gMCA/ICcgJyArIHN0cmluZ0J1aWxkZXIuam9pbignICcpIDogJyc7XG4gICAgcmV0dXJuIGA8JHtub2RlTmFtZX0ke2F0dHJzU3RyaW5nfT4ke3N1cGVyLnRvU3RyaW5nKCl9PC8ke25vZGVOYW1lfT5gXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBhdHRyaWJ1dGUgZnJvbSB0aGlzIFlYbWxFbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlTmFtZSBUaGUgYXR0cmlidXRlIG5hbWUgdGhhdCBpcyB0byBiZSByZW1vdmVkLlxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICByZW1vdmVBdHRyaWJ1dGUgKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICBpZiAodGhpcy5kb2MgIT09IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0KHRoaXMuZG9jLCB0cmFuc2FjdGlvbiA9PiB7XG4gICAgICAgIHR5cGVNYXBEZWxldGUodHJhbnNhY3Rpb24sIHRoaXMsIGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7TWFwPHN0cmluZyxhbnk+fSAqLyAodGhpcy5fcHJlbGltQXR0cnMpLmRlbGV0ZShhdHRyaWJ1dGVOYW1lKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBvciB1cGRhdGVzIGFuIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZU5hbWUgVGhlIGF0dHJpYnV0ZSBuYW1lIHRoYXQgaXMgdG8gYmUgc2V0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlVmFsdWUgVGhlIGF0dHJpYnV0ZSB2YWx1ZSB0aGF0IGlzIHRvIGJlIHNldC5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2V0QXR0cmlidXRlIChhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSkge1xuICAgIGlmICh0aGlzLmRvYyAhPT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3QodGhpcy5kb2MsIHRyYW5zYWN0aW9uID0+IHtcbiAgICAgICAgdHlwZU1hcFNldCh0cmFuc2FjdGlvbiwgdGhpcywgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKiBAdHlwZSB7TWFwPHN0cmluZywgYW55Pn0gKi8gKHRoaXMuX3ByZWxpbUF0dHJzKS5zZXQoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGF0dHJpYnV0ZSB2YWx1ZSB0aGF0IGJlbG9uZ3MgdG8gdGhlIGF0dHJpYnV0ZSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlTmFtZSBUaGUgYXR0cmlidXRlIG5hbWUgdGhhdCBpZGVudGlmaWVzIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyaWVkIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBxdWVyaWVkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgZ2V0QXR0cmlidXRlIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7YW55fSAqLyAodHlwZU1hcEdldCh0aGlzLCBhdHRyaWJ1dGVOYW1lKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgYW4gYXR0cmlidXRlIGV4aXN0c1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlTmFtZSBUaGUgYXR0cmlidXRlIG5hbWUgdG8gY2hlY2sgZm9yIGV4aXN0ZW5jZS5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciB0aGUgYXR0cmlidXRlIGV4aXN0cy5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgaGFzQXR0cmlidXRlIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7YW55fSAqLyAodHlwZU1hcEhhcyh0aGlzLCBhdHRyaWJ1dGVOYW1lKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBhdHRyaWJ1dGUgbmFtZS92YWx1ZSBwYWlycyBpbiBhIEpTT04gT2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1NuYXBzaG90fSBbc25hcHNob3RdXG4gICAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsIGFueT59IEEgSlNPTiBPYmplY3QgdGhhdCBkZXNjcmliZXMgdGhlIGF0dHJpYnV0ZXMuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldEF0dHJpYnV0ZXMgKHNuYXBzaG90KSB7XG4gICAgcmV0dXJuIHR5cGVNYXBHZXRBbGwodGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgRG9tIEVsZW1lbnQgdGhhdCBtaXJyb3JzIHRoaXMgWVhtbEVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jdW1lbnR9IFtfZG9jdW1lbnQ9ZG9jdW1lbnRdIFRoZSBkb2N1bWVudCBvYmplY3QgKHlvdSBtdXN0IGRlZmluZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHdoZW4gY2FsbGluZyB0aGlzIG1ldGhvZCBpblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlanMpXG4gICAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gW2hvb2tzPXt9XSBPcHRpb25hbCBwcm9wZXJ0eSB0byBjdXN0b21pemUgaG93IGhvb2tzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHByZXNlbnRlZCBpbiB0aGUgRE9NXG4gICAqIEBwYXJhbSB7YW55fSBbYmluZGluZ10gWW91IHNob3VsZCBub3Qgc2V0IHRoaXMgcHJvcGVydHkuIFRoaXMgaXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCBpZiBEb21CaW5kaW5nIHdhbnRzIHRvIGNyZWF0ZSBhXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc29jaWF0aW9uIHRvIHRoZSBjcmVhdGVkIERPTSB0eXBlLlxuICAgKiBAcmV0dXJuIHtOb2RlfSBUaGUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50fERvbSBFbGVtZW50fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICB0b0RPTSAoX2RvY3VtZW50ID0gZG9jdW1lbnQsIGhvb2tzID0ge30sIGJpbmRpbmcpIHtcbiAgICBjb25zdCBkb20gPSBfZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLm5vZGVOYW1lKTtcbiAgICBjb25zdCBhdHRycyA9IHRoaXMuZ2V0QXR0cmlidXRlcygpO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICBkb20uc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG4gICAgfVxuICAgIHR5cGVMaXN0Rm9yRWFjaCh0aGlzLCB5eG1sID0+IHtcbiAgICAgIGRvbS5hcHBlbmRDaGlsZCh5eG1sLnRvRE9NKF9kb2N1bWVudCwgaG9va3MsIGJpbmRpbmcpKTtcbiAgICB9KTtcbiAgICBpZiAoYmluZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBiaW5kaW5nLl9jcmVhdGVBc3NvY2lhdGlvbihkb20sIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gZG9tXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgdHlwZSB0byBiaW5hcnkgYW5kIHdyaXRlIGl0IHRvIGFuXG4gICAqIEJpbmFyeUVuY29kZXIuXG4gICAqXG4gICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gdGhpcyBJdGVtIGlzIHNlbnQgdG8gYSByZW1vdGUgcGVlci5cbiAgICpcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXIgVGhlIGVuY29kZXIgdG8gd3JpdGUgZGF0YSB0by5cbiAgICovXG4gIF93cml0ZSAoZW5jb2Rlcikge1xuICAgIGVuY29kZXIud3JpdGVUeXBlUmVmKFlYbWxFbGVtZW50UmVmSUQpO1xuICAgIGVuY29kZXIud3JpdGVLZXkodGhpcy5ub2RlTmFtZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7WVhtbEVsZW1lbnR9XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRZWG1sRWxlbWVudCA9IGRlY29kZXIgPT4gbmV3IFlYbWxFbGVtZW50KGRlY29kZXIucmVhZEtleSgpKTtcblxuLyoqXG4gKiBAZXh0ZW5kcyBZRXZlbnQ8WVhtbEVsZW1lbnR8WVhtbFRleHR8WVhtbEZyYWdtZW50PlxuICogQW4gRXZlbnQgdGhhdCBkZXNjcmliZXMgY2hhbmdlcyBvbiBhIFlYbWwgRWxlbWVudCBvciBZeG1sIEZyYWdtZW50XG4gKi9cbmNsYXNzIFlYbWxFdmVudCBleHRlbmRzIFlFdmVudCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1lYbWxFbGVtZW50fFlYbWxUZXh0fFlYbWxGcmFnbWVudH0gdGFyZ2V0IFRoZSB0YXJnZXQgb24gd2hpY2ggdGhlIGV2ZW50IGlzIGNyZWF0ZWQuXG4gICAqIEBwYXJhbSB7U2V0PHN0cmluZ3xudWxsPn0gc3VicyBUaGUgc2V0IG9mIGNoYW5nZWQgYXR0cmlidXRlcy4gYG51bGxgIGlzIGluY2x1ZGVkIGlmIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICBjaGlsZCBsaXN0IGNoYW5nZWQuXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uIFRoZSB0cmFuc2FjdGlvbiBpbnN0YW5jZSB3aXRoIHdpY2ggdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZSB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yICh0YXJnZXQsIHN1YnMsIHRyYW5zYWN0aW9uKSB7XG4gICAgc3VwZXIodGFyZ2V0LCB0cmFuc2FjdGlvbik7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgY2hpbGRyZW4gY2hhbmdlZC5cbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuY2hpbGRMaXN0Q2hhbmdlZCA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIFNldCBvZiBhbGwgY2hhbmdlZCBhdHRyaWJ1dGVzLlxuICAgICAqIEB0eXBlIHtTZXQ8c3RyaW5nPn1cbiAgICAgKi9cbiAgICB0aGlzLmF0dHJpYnV0ZXNDaGFuZ2VkID0gbmV3IFNldCgpO1xuICAgIHN1YnMuZm9yRWFjaCgoc3ViKSA9PiB7XG4gICAgICBpZiAoc3ViID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuY2hpbGRMaXN0Q2hhbmdlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXNDaGFuZ2VkLmFkZChzdWIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogWW91IGNhbiBtYW5hZ2UgYmluZGluZyB0byBhIGN1c3RvbSB0eXBlIHdpdGggWVhtbEhvb2suXG4gKlxuICogQGV4dGVuZHMge1lNYXA8YW55Pn1cbiAqL1xuY2xhc3MgWVhtbEhvb2sgZXh0ZW5kcyBZTWFwIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBob29rTmFtZSBub2RlTmFtZSBvZiB0aGUgRG9tIE5vZGUuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoaG9va05hbWUpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5ob29rTmFtZSA9IGhvb2tOYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gSXRlbSB3aXRoIHRoZSBzYW1lIGVmZmVjdCBhcyB0aGlzIEl0ZW0gKHdpdGhvdXQgcG9zaXRpb24gZWZmZWN0KVxuICAgKi9cbiAgX2NvcHkgKCkge1xuICAgIHJldHVybiBuZXcgWVhtbEhvb2sodGhpcy5ob29rTmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtZWG1sSG9va31cbiAgICovXG4gIGNsb25lICgpIHtcbiAgICBjb25zdCBlbCA9IG5ldyBZWG1sSG9vayh0aGlzLmhvb2tOYW1lKTtcbiAgICB0aGlzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIGVsLnNldChrZXksIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZWxcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgRG9tIEVsZW1lbnQgdGhhdCBtaXJyb3JzIHRoaXMgWVhtbEVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jdW1lbnR9IFtfZG9jdW1lbnQ9ZG9jdW1lbnRdIFRoZSBkb2N1bWVudCBvYmplY3QgKHlvdSBtdXN0IGRlZmluZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHdoZW4gY2FsbGluZyB0aGlzIG1ldGhvZCBpblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlanMpXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGFueT59IFtob29rc10gT3B0aW9uYWwgcHJvcGVydHkgdG8gY3VzdG9taXplIGhvdyBob29rc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBwcmVzZW50ZWQgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0ge2FueX0gW2JpbmRpbmddIFlvdSBzaG91bGQgbm90IHNldCB0aGlzIHByb3BlcnR5LiBUaGlzIGlzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgaWYgRG9tQmluZGluZyB3YW50cyB0byBjcmVhdGUgYVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NvY2lhdGlvbiB0byB0aGUgY3JlYXRlZCBET00gdHlwZVxuICAgKiBAcmV0dXJuIHtFbGVtZW50fSBUaGUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50fERvbSBFbGVtZW50fVxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICB0b0RPTSAoX2RvY3VtZW50ID0gZG9jdW1lbnQsIGhvb2tzID0ge30sIGJpbmRpbmcpIHtcbiAgICBjb25zdCBob29rID0gaG9va3NbdGhpcy5ob29rTmFtZV07XG4gICAgbGV0IGRvbTtcbiAgICBpZiAoaG9vayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBkb20gPSBob29rLmNyZWF0ZURvbSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLmhvb2tOYW1lKTtcbiAgICB9XG4gICAgZG9tLnNldEF0dHJpYnV0ZSgnZGF0YS15anMtaG9vaycsIHRoaXMuaG9va05hbWUpO1xuICAgIGlmIChiaW5kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJpbmRpbmcuX2NyZWF0ZUFzc29jaWF0aW9uKGRvbSwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBkb21cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gdGhlIHByb3BlcnRpZXMgb2YgdGhpcyB0eXBlIHRvIGJpbmFyeSBhbmQgd3JpdGUgaXQgdG8gYW5cbiAgICogQmluYXJ5RW5jb2Rlci5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB0aGlzIEl0ZW0gaXMgc2VudCB0byBhIHJlbW90ZSBwZWVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlciBUaGUgZW5jb2RlciB0byB3cml0ZSBkYXRhIHRvLlxuICAgKi9cbiAgX3dyaXRlIChlbmNvZGVyKSB7XG4gICAgZW5jb2Rlci53cml0ZVR5cGVSZWYoWVhtbEhvb2tSZWZJRCk7XG4gICAgZW5jb2Rlci53cml0ZUtleSh0aGlzLmhvb2tOYW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtZWG1sSG9va31cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKi9cbmNvbnN0IHJlYWRZWG1sSG9vayA9IGRlY29kZXIgPT5cbiAgbmV3IFlYbWxIb29rKGRlY29kZXIucmVhZEtleSgpKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRleHQgaW4gYSBEb20gRWxlbWVudC4gSW4gdGhlIGZ1dHVyZSB0aGlzIHR5cGUgd2lsbCBhbHNvIGhhbmRsZVxuICogc2ltcGxlIGZvcm1hdHRpbmcgaW5mb3JtYXRpb24gbGlrZSBib2xkIGFuZCBpdGFsaWMuXG4gKi9cbmNsYXNzIFlYbWxUZXh0IGV4dGVuZHMgWVRleHQge1xuICAvKipcbiAgICogQHR5cGUge1lYbWxFbGVtZW50fFlYbWxUZXh0fG51bGx9XG4gICAqL1xuICBnZXQgbmV4dFNpYmxpbmcgKCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLl9pdGVtID8gdGhpcy5faXRlbS5uZXh0IDogbnVsbDtcbiAgICByZXR1cm4gbiA/IC8qKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR9ICovICgvKiogQHR5cGUge0NvbnRlbnRUeXBlfSAqLyAobi5jb250ZW50KS50eXBlKSA6IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7WVhtbEVsZW1lbnR8WVhtbFRleHR8bnVsbH1cbiAgICovXG4gIGdldCBwcmV2U2libGluZyAoKSB7XG4gICAgY29uc3QgbiA9IHRoaXMuX2l0ZW0gPyB0aGlzLl9pdGVtLnByZXYgOiBudWxsO1xuICAgIHJldHVybiBuID8gLyoqIEB0eXBlIHtZWG1sRWxlbWVudHxZWG1sVGV4dH0gKi8gKC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChuLmNvbnRlbnQpLnR5cGUpIDogbnVsbFxuICB9XG5cbiAgX2NvcHkgKCkge1xuICAgIHJldHVybiBuZXcgWVhtbFRleHQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1lYbWxUZXh0fVxuICAgKi9cbiAgY2xvbmUgKCkge1xuICAgIGNvbnN0IHRleHQgPSBuZXcgWVhtbFRleHQoKTtcbiAgICB0ZXh0LmFwcGx5RGVsdGEodGhpcy50b0RlbHRhKCkpO1xuICAgIHJldHVybiB0ZXh0XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIERvbSBFbGVtZW50IHRoYXQgbWlycm9ycyB0aGlzIFlYbWxUZXh0LlxuICAgKlxuICAgKiBAcGFyYW0ge0RvY3VtZW50fSBbX2RvY3VtZW50PWRvY3VtZW50XSBUaGUgZG9jdW1lbnQgb2JqZWN0ICh5b3UgbXVzdCBkZWZpbmVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyB3aGVuIGNhbGxpbmcgdGhpcyBtZXRob2QgaW5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZWpzKVxuICAgKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IFtob29rc10gT3B0aW9uYWwgcHJvcGVydHkgdG8gY3VzdG9taXplIGhvdyBob29rc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBwcmVzZW50ZWQgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0ge2FueX0gW2JpbmRpbmddIFlvdSBzaG91bGQgbm90IHNldCB0aGlzIHByb3BlcnR5LiBUaGlzIGlzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgaWYgRG9tQmluZGluZyB3YW50cyB0byBjcmVhdGUgYVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NvY2lhdGlvbiB0byB0aGUgY3JlYXRlZCBET00gdHlwZS5cbiAgICogQHJldHVybiB7VGV4dH0gVGhlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudHxEb20gRWxlbWVudH1cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdG9ET00gKF9kb2N1bWVudCA9IGRvY3VtZW50LCBob29rcywgYmluZGluZykge1xuICAgIGNvbnN0IGRvbSA9IF9kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLnRvU3RyaW5nKCkpO1xuICAgIGlmIChiaW5kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJpbmRpbmcuX2NyZWF0ZUFzc29jaWF0aW9uKGRvbSwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBkb21cbiAgfVxuXG4gIHRvU3RyaW5nICgpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIHRoaXMudG9EZWx0YSgpLm1hcChkZWx0YSA9PiB7XG4gICAgICBjb25zdCBuZXN0ZWROb2RlcyA9IFtdO1xuICAgICAgZm9yIChjb25zdCBub2RlTmFtZSBpbiBkZWx0YS5hdHRyaWJ1dGVzKSB7XG4gICAgICAgIGNvbnN0IGF0dHJzID0gW107XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRlbHRhLmF0dHJpYnV0ZXNbbm9kZU5hbWVdKSB7XG4gICAgICAgICAgYXR0cnMucHVzaCh7IGtleSwgdmFsdWU6IGRlbHRhLmF0dHJpYnV0ZXNbbm9kZU5hbWVdW2tleV0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc29ydCBhdHRyaWJ1dGVzIHRvIGdldCBhIHVuaXF1ZSBvcmRlclxuICAgICAgICBhdHRycy5zb3J0KChhLCBiKSA9PiBhLmtleSA8IGIua2V5ID8gLTEgOiAxKTtcbiAgICAgICAgbmVzdGVkTm9kZXMucHVzaCh7IG5vZGVOYW1lLCBhdHRycyB9KTtcbiAgICAgIH1cbiAgICAgIC8vIHNvcnQgbm9kZSBvcmRlciB0byBnZXQgYSB1bmlxdWUgb3JkZXJcbiAgICAgIG5lc3RlZE5vZGVzLnNvcnQoKGEsIGIpID0+IGEubm9kZU5hbWUgPCBiLm5vZGVOYW1lID8gLTEgOiAxKTtcbiAgICAgIC8vIG5vdyBjb252ZXJ0IHRvIGRvbSBzdHJpbmdcbiAgICAgIGxldCBzdHIgPSAnJztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVzdGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5lc3RlZE5vZGVzW2ldO1xuICAgICAgICBzdHIgKz0gYDwke25vZGUubm9kZU5hbWV9YDtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBub2RlLmF0dHJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgYXR0ciA9IG5vZGUuYXR0cnNbal07XG4gICAgICAgICAgc3RyICs9IGAgJHthdHRyLmtleX09XCIke2F0dHIudmFsdWV9XCJgO1xuICAgICAgICB9XG4gICAgICAgIHN0ciArPSAnPic7XG4gICAgICB9XG4gICAgICBzdHIgKz0gZGVsdGEuaW5zZXJ0O1xuICAgICAgZm9yIChsZXQgaSA9IG5lc3RlZE5vZGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHN0ciArPSBgPC8ke25lc3RlZE5vZGVzW2ldLm5vZGVOYW1lfT5gO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0clxuICAgIH0pLmpvaW4oJycpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICovXG4gIF93cml0ZSAoZW5jb2Rlcikge1xuICAgIGVuY29kZXIud3JpdGVUeXBlUmVmKFlYbWxUZXh0UmVmSUQpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge1lYbWxUZXh0fVxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqL1xuY29uc3QgcmVhZFlYbWxUZXh0ID0gZGVjb2RlciA9PiBuZXcgWVhtbFRleHQoKTtcblxuY2xhc3MgQWJzdHJhY3RTdHJ1Y3Qge1xuICAvKipcbiAgICogQHBhcmFtIHtJRH0gaWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGlkLCBsZW5ndGgpIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgZGVsZXRlZCAoKSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgdGhpcyBzdHJ1Y3Qgd2l0aCB0aGUgaXRlbSB0byB0aGUgcmlnaHQuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGFscmVhZHkgYXNzdW1pbmcgdGhhdCBgdGhpcy5pZC5jbG9jayArIHRoaXMubGVuZ3RoID09PSB0aGlzLmlkLmNsb2NrYC5cbiAgICogQWxzbyB0aGlzIG1ldGhvZCBkb2VzICpub3QqIHJlbW92ZSByaWdodCBmcm9tIFN0cnVjdFN0b3JlIVxuICAgKiBAcGFyYW0ge0Fic3RyYWN0U3RydWN0fSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufSB3ZXRoZXIgdGhpcyBtZXJnZWQgd2l0aCByaWdodFxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyIFRoZSBlbmNvZGVyIHRvIHdyaXRlIGRhdGEgdG8uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGVuY29kaW5nUmVmXG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0LCBlbmNvZGluZ1JlZikge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIG9mZnNldCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG59XG5cbmNvbnN0IHN0cnVjdEdDUmVmTnVtYmVyID0gMDtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBHQyBleHRlbmRzIEFic3RyYWN0U3RydWN0IHtcbiAgZ2V0IGRlbGV0ZWQgKCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBkZWxldGUgKCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtHQ30gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciAhPT0gcmlnaHQuY29uc3RydWN0b3IpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCArPSByaWdodC5sZW5ndGg7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgdGhpcy5pZC5jbG9jayArPSBvZmZzZXQ7XG4gICAgICB0aGlzLmxlbmd0aCAtPSBvZmZzZXQ7XG4gICAgfVxuICAgIGFkZFN0cnVjdCh0cmFuc2FjdGlvbi5kb2Muc3RvcmUsIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBlbmNvZGVyLndyaXRlSW5mbyhzdHJ1Y3RHQ1JlZk51bWJlcik7XG4gICAgZW5jb2Rlci53cml0ZUxlbih0aGlzLmxlbmd0aCAtIG9mZnNldCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtTdHJ1Y3RTdG9yZX0gc3RvcmVcbiAgICogQHJldHVybiB7bnVsbCB8IG51bWJlcn1cbiAgICovXG4gIGdldE1pc3NpbmcgKHRyYW5zYWN0aW9uLCBzdG9yZSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuY2xhc3MgQ29udGVudEJpbmFyeSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGNvbnRlbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChjb250ZW50KSB7XG4gICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiBbdGhpcy5jb250ZW50XVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50QmluYXJ5fVxuICAgKi9cbiAgY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50QmluYXJ5KHRoaXMuY29udGVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm4ge0NvbnRlbnRCaW5hcnl9XG4gICAqL1xuICBzcGxpY2UgKG9mZnNldCkge1xuICAgIHRocm93IGVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29udGVudEJpbmFyeX0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIGl0ZW0pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqL1xuICBnYyAoc3RvcmUpIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgZW5jb2Rlci53cml0ZUJ1Zih0aGlzLmNvbnRlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFJlZiAoKSB7XG4gICAgcmV0dXJuIDNcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyIH0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudEJpbmFyeX1cbiAqL1xuY29uc3QgcmVhZENvbnRlbnRCaW5hcnkgPSBkZWNvZGVyID0+IG5ldyBDb250ZW50QmluYXJ5KGRlY29kZXIucmVhZEJ1ZigpKTtcblxuY2xhc3MgQ29udGVudERlbGV0ZWQge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlblxuICAgKi9cbiAgY29uc3RydWN0b3IgKGxlbikge1xuICAgIHRoaXMubGVuID0gbGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Q29udGVudERlbGV0ZWR9XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnREZWxldGVkKHRoaXMubGVuKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHJldHVybiB7Q29udGVudERlbGV0ZWR9XG4gICAqL1xuICBzcGxpY2UgKG9mZnNldCkge1xuICAgIGNvbnN0IHJpZ2h0ID0gbmV3IENvbnRlbnREZWxldGVkKHRoaXMubGVuIC0gb2Zmc2V0KTtcbiAgICB0aGlzLmxlbiA9IG9mZnNldDtcbiAgICByZXR1cm4gcmlnaHRcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnREZWxldGVkfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHRoaXMubGVuICs9IHJpZ2h0LmxlbjtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge1xuICAgIGFkZFRvRGVsZXRlU2V0KHRyYW5zYWN0aW9uLmRlbGV0ZVNldCwgaXRlbS5pZC5jbGllbnQsIGl0ZW0uaWQuY2xvY2ssIHRoaXMubGVuKTtcbiAgICBpdGVtLm1hcmtEZWxldGVkKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVMZW4odGhpcy5sZW4gLSBvZmZzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFJlZiAoKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjIgfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50RGVsZXRlZH1cbiAqL1xuY29uc3QgcmVhZENvbnRlbnREZWxldGVkID0gZGVjb2RlciA9PiBuZXcgQ29udGVudERlbGV0ZWQoZGVjb2Rlci5yZWFkTGVuKCkpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBndWlkXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdHNcbiAqL1xuY29uc3QgY3JlYXRlRG9jRnJvbU9wdHMgPSAoZ3VpZCwgb3B0cykgPT4gbmV3IERvYyh7IGd1aWQsIC4uLm9wdHMsIHNob3VsZExvYWQ6IG9wdHMuc2hvdWxkTG9hZCB8fCBvcHRzLmF1dG9Mb2FkIHx8IGZhbHNlIH0pO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENvbnRlbnREb2Mge1xuICAvKipcbiAgICogQHBhcmFtIHtEb2N9IGRvY1xuICAgKi9cbiAgY29uc3RydWN0b3IgKGRvYykge1xuICAgIGlmIChkb2MuX2l0ZW0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoaXMgZG9jdW1lbnQgd2FzIGFscmVhZHkgaW50ZWdyYXRlZCBhcyBhIHN1Yi1kb2N1bWVudC4gWW91IHNob3VsZCBjcmVhdGUgYSBzZWNvbmQgaW5zdGFuY2UgaW5zdGVhZCB3aXRoIHRoZSBzYW1lIGd1aWQuJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtEb2N9XG4gICAgICovXG4gICAgdGhpcy5kb2MgPSBkb2M7XG4gICAgLyoqXG4gICAgICogQHR5cGUge2FueX1cbiAgICAgKi9cbiAgICBjb25zdCBvcHRzID0ge307XG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICBpZiAoIWRvYy5nYykge1xuICAgICAgb3B0cy5nYyA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZG9jLmF1dG9Mb2FkKSB7XG4gICAgICBvcHRzLmF1dG9Mb2FkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGRvYy5tZXRhICE9PSBudWxsKSB7XG4gICAgICBvcHRzLm1ldGEgPSBkb2MubWV0YTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICBnZXRDb250ZW50ICgpIHtcbiAgICByZXR1cm4gW3RoaXMuZG9jXVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50RG9jfVxuICAgKi9cbiAgY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50RG9jKGNyZWF0ZURvY0Zyb21PcHRzKHRoaXMuZG9jLmd1aWQsIHRoaXMub3B0cykpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKiBAcmV0dXJuIHtDb250ZW50RG9jfVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnREb2N9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7XG4gICAgLy8gdGhpcyBuZWVkcyB0byBiZSByZWZsZWN0ZWQgaW4gZG9jLmRlc3Ryb3kgYXMgd2VsbFxuICAgIHRoaXMuZG9jLl9pdGVtID0gaXRlbTtcbiAgICB0cmFuc2FjdGlvbi5zdWJkb2NzQWRkZWQuYWRkKHRoaXMuZG9jKTtcbiAgICBpZiAodGhpcy5kb2Muc2hvdWxkTG9hZCkge1xuICAgICAgdHJhbnNhY3Rpb24uc3ViZG9jc0xvYWRlZC5hZGQodGhpcy5kb2MpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge1xuICAgIGlmICh0cmFuc2FjdGlvbi5zdWJkb2NzQWRkZWQuaGFzKHRoaXMuZG9jKSkge1xuICAgICAgdHJhbnNhY3Rpb24uc3ViZG9jc0FkZGVkLmRlbGV0ZSh0aGlzLmRvYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zYWN0aW9uLnN1YmRvY3NSZW1vdmVkLmFkZCh0aGlzLmRvYyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqL1xuICBnYyAoc3RvcmUpIHsgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgZW5jb2Rlci53cml0ZVN0cmluZyh0aGlzLmRvYy5ndWlkKTtcbiAgICBlbmNvZGVyLndyaXRlQW55KHRoaXMub3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICByZXR1cm4gOVxuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge1VwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMn0gZGVjb2RlclxuICogQHJldHVybiB7Q29udGVudERvY31cbiAqL1xuY29uc3QgcmVhZENvbnRlbnREb2MgPSBkZWNvZGVyID0+IG5ldyBDb250ZW50RG9jKGNyZWF0ZURvY0Zyb21PcHRzKGRlY29kZXIucmVhZFN0cmluZygpLCBkZWNvZGVyLnJlYWRBbnkoKSkpO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENvbnRlbnRFbWJlZCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZW1iZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChlbWJlZCkge1xuICAgIHRoaXMuZW1iZWQgPSBlbWJlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiBbdGhpcy5lbWJlZF1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDb3VudGFibGUgKCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Q29udGVudEVtYmVkfVxuICAgKi9cbiAgY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50RW1iZWQodGhpcy5lbWJlZClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm4ge0NvbnRlbnRFbWJlZH1cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50RW1iZWR9IHJpZ2h0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBtZXJnZVdpdGggKHJpZ2h0KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtJdGVtfSBpdGVtXG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBpdGVtKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7fVxuICAvKipcbiAgICogQHBhcmFtIHtVcGRhdGVFbmNvZGVyVjEgfCBVcGRhdGVFbmNvZGVyVjJ9IGVuY29kZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgd3JpdGUgKGVuY29kZXIsIG9mZnNldCkge1xuICAgIGVuY29kZXIud3JpdGVKU09OKHRoaXMuZW1iZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFJlZiAoKSB7XG4gICAgcmV0dXJuIDVcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnRFbWJlZH1cbiAqL1xuY29uc3QgcmVhZENvbnRlbnRFbWJlZCA9IGRlY29kZXIgPT4gbmV3IENvbnRlbnRFbWJlZChkZWNvZGVyLnJlYWRKU09OKCkpO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENvbnRlbnRGb3JtYXQge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAgICovXG4gIGNvbnN0cnVjdG9yIChrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50Rm9ybWF0fVxuICAgKi9cbiAgY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50Rm9ybWF0KHRoaXMua2V5LCB0aGlzLnZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHJldHVybiB7Q29udGVudEZvcm1hdH1cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgdGhyb3cgZXJyb3IubWV0aG9kVW5pbXBsZW1lbnRlZCgpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50Rm9ybWF0fSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge1xuICAgIC8vIEB0b2RvIHNlYXJjaG1hcmtlciBhcmUgY3VycmVudGx5IHVuc3VwcG9ydGVkIGZvciByaWNoIHRleHQgZG9jdW1lbnRzXG4gICAgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGl0ZW0ucGFyZW50KS5fc2VhcmNoTWFya2VyID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqL1xuICBnYyAoc3RvcmUpIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgZW5jb2Rlci53cml0ZUtleSh0aGlzLmtleSk7XG4gICAgZW5jb2Rlci53cml0ZUpTT04odGhpcy52YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0UmVmICgpIHtcbiAgICByZXR1cm4gNlxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnRGb3JtYXR9XG4gKi9cbmNvbnN0IHJlYWRDb250ZW50Rm9ybWF0ID0gZGVjb2RlciA9PiBuZXcgQ29udGVudEZvcm1hdChkZWNvZGVyLnJlYWRLZXkoKSwgZGVjb2Rlci5yZWFkSlNPTigpKTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBDb250ZW50SlNPTiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5PGFueT59IGFyclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGFycikge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxhbnk+fVxuICAgICAqL1xuICAgIHRoaXMuYXJyID0gYXJyO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJyLmxlbmd0aFxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0FycmF5PGFueT59XG4gICAqL1xuICBnZXRDb250ZW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnJcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNDb3VudGFibGUgKCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Q29udGVudEpTT059XG4gICAqL1xuICBjb3B5ICgpIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRKU09OKHRoaXMuYXJyKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHJldHVybiB7Q29udGVudEpTT059XG4gICAqL1xuICBzcGxpY2UgKG9mZnNldCkge1xuICAgIGNvbnN0IHJpZ2h0ID0gbmV3IENvbnRlbnRKU09OKHRoaXMuYXJyLnNsaWNlKG9mZnNldCkpO1xuICAgIHRoaXMuYXJyID0gdGhpcy5hcnIuc2xpY2UoMCwgb2Zmc2V0KTtcbiAgICByZXR1cm4gcmlnaHRcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnRKU09OfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHRoaXMuYXJyID0gdGhpcy5hcnIuY29uY2F0KHJpZ2h0LmFycik7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIGl0ZW0pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqL1xuICBnYyAoc3RvcmUpIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgY29uc3QgbGVuID0gdGhpcy5hcnIubGVuZ3RoO1xuICAgIGVuY29kZXIud3JpdGVMZW4obGVuIC0gb2Zmc2V0KTtcbiAgICBmb3IgKGxldCBpID0gb2Zmc2V0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSB0aGlzLmFycltpXTtcbiAgICAgIGVuY29kZXIud3JpdGVTdHJpbmcoYyA9PT0gdW5kZWZpbmVkID8gJ3VuZGVmaW5lZCcgOiBKU09OLnN0cmluZ2lmeShjKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFJlZiAoKSB7XG4gICAgcmV0dXJuIDJcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnRKU09OfVxuICovXG5jb25zdCByZWFkQ29udGVudEpTT04gPSBkZWNvZGVyID0+IHtcbiAgY29uc3QgbGVuID0gZGVjb2Rlci5yZWFkTGVuKCk7XG4gIGNvbnN0IGNzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBjID0gZGVjb2Rlci5yZWFkU3RyaW5nKCk7XG4gICAgaWYgKGMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzLnB1c2goSlNPTi5wYXJzZShjKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgQ29udGVudEpTT04oY3MpXG59O1xuXG5jbGFzcyBDb250ZW50QW55IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoYXJyKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PGFueT59XG4gICAgICovXG4gICAgdGhpcy5hcnIgPSBhcnI7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0TGVuZ3RoICgpIHtcbiAgICByZXR1cm4gdGhpcy5hcnIubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAgICovXG4gIGdldENvbnRlbnQgKCkge1xuICAgIHJldHVybiB0aGlzLmFyclxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50QW55fVxuICAgKi9cbiAgY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50QW55KHRoaXMuYXJyKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHJldHVybiB7Q29udGVudEFueX1cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgY29uc3QgcmlnaHQgPSBuZXcgQ29udGVudEFueSh0aGlzLmFyci5zbGljZShvZmZzZXQpKTtcbiAgICB0aGlzLmFyciA9IHRoaXMuYXJyLnNsaWNlKDAsIG9mZnNldCk7XG4gICAgcmV0dXJuIHJpZ2h0XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb250ZW50QW55fSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHRoaXMuYXJyID0gdGhpcy5hcnIuY29uY2F0KHJpZ2h0LmFycik7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIGl0ZW0pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqL1xuICBnYyAoc3RvcmUpIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgY29uc3QgbGVuID0gdGhpcy5hcnIubGVuZ3RoO1xuICAgIGVuY29kZXIud3JpdGVMZW4obGVuIC0gb2Zmc2V0KTtcbiAgICBmb3IgKGxldCBpID0gb2Zmc2V0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSB0aGlzLmFycltpXTtcbiAgICAgIGVuY29kZXIud3JpdGVBbnkoYyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFJlZiAoKSB7XG4gICAgcmV0dXJuIDhcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50QW55fVxuICovXG5jb25zdCByZWFkQ29udGVudEFueSA9IGRlY29kZXIgPT4ge1xuICBjb25zdCBsZW4gPSBkZWNvZGVyLnJlYWRMZW4oKTtcbiAgY29uc3QgY3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGNzLnB1c2goZGVjb2Rlci5yZWFkQW55KCkpO1xuICB9XG4gIHJldHVybiBuZXcgQ29udGVudEFueShjcylcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQ29udGVudFN0cmluZyB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoc3RyKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnN0ciA9IHN0cjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRMZW5ndGggKCkge1xuICAgIHJldHVybiB0aGlzLnN0ci5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyLnNwbGl0KCcnKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc0NvdW50YWJsZSAoKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtDb250ZW50U3RyaW5nfVxuICAgKi9cbiAgY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50U3RyaW5nKHRoaXMuc3RyKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICogQHJldHVybiB7Q29udGVudFN0cmluZ31cbiAgICovXG4gIHNwbGljZSAob2Zmc2V0KSB7XG4gICAgY29uc3QgcmlnaHQgPSBuZXcgQ29udGVudFN0cmluZyh0aGlzLnN0ci5zbGljZShvZmZzZXQpKTtcbiAgICB0aGlzLnN0ciA9IHRoaXMuc3RyLnNsaWNlKDAsIG9mZnNldCk7XG5cbiAgICAvLyBQcmV2ZW50IGVuY29kaW5nIGludmFsaWQgZG9jdW1lbnRzIGJlY2F1c2Ugb2Ygc3BsaXR0aW5nIG9mIHN1cnJvZ2F0ZSBwYWlyczogaHR0cHM6Ly9naXRodWIuY29tL3lqcy95anMvaXNzdWVzLzI0OFxuICAgIGNvbnN0IGZpcnN0Q2hhckNvZGUgPSB0aGlzLnN0ci5jaGFyQ29kZUF0KG9mZnNldCAtIDEpO1xuICAgIGlmIChmaXJzdENoYXJDb2RlID49IDB4RDgwMCAmJiBmaXJzdENoYXJDb2RlIDw9IDB4REJGRikge1xuICAgICAgLy8gTGFzdCBjaGFyYWN0ZXIgb2YgdGhlIGxlZnQgc3BsaXQgaXMgdGhlIHN0YXJ0IG9mIGEgc3Vycm9nYXRlIHV0ZjE2L3VjczIgcGFpci5cbiAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgc3BsaXR0aW5nIG9mIHN1cnJvZ2F0ZSBwYWlycyBiZWNhdXNlIHRoaXMgbWF5IGxlYWQgdG8gaW52YWxpZCBkb2N1bWVudHMuXG4gICAgICAvLyBSZXBsYWNlIHRoZSBpbnZhbGlkIGNoYXJhY3RlciB3aXRoIGEgdW5pY29kZSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKO+/vSAvIFUrRkZGRClcbiAgICAgIHRoaXMuc3RyID0gdGhpcy5zdHIuc2xpY2UoMCwgb2Zmc2V0IC0gMSkgKyAn77+9JztcbiAgICAgIC8vIHJlcGxhY2UgcmlnaHQgYXMgd2VsbFxuICAgICAgcmlnaHQuc3RyID0gJ++/vScgKyByaWdodC5zdHIuc2xpY2UoMSk7XG4gICAgfVxuICAgIHJldHVybiByaWdodFxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29udGVudFN0cmluZ30gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICB0aGlzLnN0ciArPSByaWdodC5zdHI7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAgICovXG4gIGludGVncmF0ZSAodHJhbnNhY3Rpb24sIGl0ZW0pIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgZGVsZXRlICh0cmFuc2FjdGlvbikge31cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqL1xuICBnYyAoc3RvcmUpIHt9XG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgZW5jb2Rlci53cml0ZVN0cmluZyhvZmZzZXQgPT09IDAgPyB0aGlzLnN0ciA6IHRoaXMuc3RyLnNsaWNlKG9mZnNldCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFJlZiAoKSB7XG4gICAgcmV0dXJuIDRcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtVcGRhdGVEZWNvZGVyVjEgfCBVcGRhdGVEZWNvZGVyVjJ9IGRlY29kZXJcbiAqIEByZXR1cm4ge0NvbnRlbnRTdHJpbmd9XG4gKi9cbmNvbnN0IHJlYWRDb250ZW50U3RyaW5nID0gZGVjb2RlciA9PiBuZXcgQ29udGVudFN0cmluZyhkZWNvZGVyLnJlYWRTdHJpbmcoKSk7XG5cbi8qKlxuICogQHR5cGUge0FycmF5PGZ1bmN0aW9uKFVwZGF0ZURlY29kZXJWMSB8IFVwZGF0ZURlY29kZXJWMik6QWJzdHJhY3RUeXBlPGFueT4+fVxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgdHlwZVJlZnMgPSBbXG4gIHJlYWRZQXJyYXksXG4gIHJlYWRZTWFwLFxuICByZWFkWVRleHQsXG4gIHJlYWRZWG1sRWxlbWVudCxcbiAgcmVhZFlYbWxGcmFnbWVudCxcbiAgcmVhZFlYbWxIb29rLFxuICByZWFkWVhtbFRleHRcbl07XG5cbmNvbnN0IFlBcnJheVJlZklEID0gMDtcbmNvbnN0IFlNYXBSZWZJRCA9IDE7XG5jb25zdCBZVGV4dFJlZklEID0gMjtcbmNvbnN0IFlYbWxFbGVtZW50UmVmSUQgPSAzO1xuY29uc3QgWVhtbEZyYWdtZW50UmVmSUQgPSA0O1xuY29uc3QgWVhtbEhvb2tSZWZJRCA9IDU7XG5jb25zdCBZWG1sVGV4dFJlZklEID0gNjtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBDb250ZW50VHlwZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0Fic3RyYWN0VHlwZTxhbnk+fSB0eXBlXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodHlwZSkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn1cbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldExlbmd0aCAoKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtBcnJheTxhbnk+fVxuICAgKi9cbiAgZ2V0Q29udGVudCAoKSB7XG4gICAgcmV0dXJuIFt0aGlzLnR5cGVdXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0NvbnRlbnRUeXBlfVxuICAgKi9cbiAgY29weSAoKSB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50VHlwZSh0aGlzLnR5cGUuX2NvcHkoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm4ge0NvbnRlbnRUeXBlfVxuICAgKi9cbiAgc3BsaWNlIChvZmZzZXQpIHtcbiAgICB0aHJvdyBlcnJvci5tZXRob2RVbmltcGxlbWVudGVkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnRlbnRUeXBlfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7SXRlbX0gaXRlbVxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgaXRlbSkge1xuICAgIHRoaXMudHlwZS5faW50ZWdyYXRlKHRyYW5zYWN0aW9uLmRvYywgaXRlbSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHtcbiAgICBsZXQgaXRlbSA9IHRoaXMudHlwZS5fc3RhcnQ7XG4gICAgd2hpbGUgKGl0ZW0gIT09IG51bGwpIHtcbiAgICAgIGlmICghaXRlbS5kZWxldGVkKSB7XG4gICAgICAgIGl0ZW0uZGVsZXRlKHRyYW5zYWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBiZSBnYydkIGxhdGVyIGFuZCB3ZSB3YW50IHRvIG1lcmdlIGl0IGlmIHBvc3NpYmxlXG4gICAgICAgIC8vIFdlIHRyeSB0byBtZXJnZSBhbGwgZGVsZXRlZCBpdGVtcyBhZnRlciBlYWNoIHRyYW5zYWN0aW9uLFxuICAgICAgICAvLyBidXQgd2UgaGF2ZSBubyBrbm93bGVkZ2UgYWJvdXQgdGhhdCB0aGlzIG5lZWRzIHRvIGJlIG1lcmdlZFxuICAgICAgICAvLyBzaW5jZSBpdCBpcyBub3QgaW4gdHJhbnNhY3Rpb24uZHMuIEhlbmNlIHdlIGFkZCBpdCB0byB0cmFuc2FjdGlvbi5fbWVyZ2VTdHJ1Y3RzXG4gICAgICAgIHRyYW5zYWN0aW9uLl9tZXJnZVN0cnVjdHMucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICAgIGl0ZW0gPSBpdGVtLnJpZ2h0O1xuICAgIH1cbiAgICB0aGlzLnR5cGUuX21hcC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKCFpdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgaXRlbS5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAgICB0cmFuc2FjdGlvbi5fbWVyZ2VTdHJ1Y3RzLnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdHJhbnNhY3Rpb24uY2hhbmdlZC5kZWxldGUodGhpcy50eXBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKi9cbiAgZ2MgKHN0b3JlKSB7XG4gICAgbGV0IGl0ZW0gPSB0aGlzLnR5cGUuX3N0YXJ0O1xuICAgIHdoaWxlIChpdGVtICE9PSBudWxsKSB7XG4gICAgICBpdGVtLmdjKHN0b3JlLCB0cnVlKTtcbiAgICAgIGl0ZW0gPSBpdGVtLnJpZ2h0O1xuICAgIH1cbiAgICB0aGlzLnR5cGUuX3N0YXJ0ID0gbnVsbDtcbiAgICB0aGlzLnR5cGUuX21hcC5mb3JFYWNoKC8qKiBAcGFyYW0ge0l0ZW0gfCBudWxsfSBpdGVtICovIChpdGVtKSA9PiB7XG4gICAgICB3aGlsZSAoaXRlbSAhPT0gbnVsbCkge1xuICAgICAgICBpdGVtLmdjKHN0b3JlLCB0cnVlKTtcbiAgICAgICAgaXRlbSA9IGl0ZW0ubGVmdDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnR5cGUuX21hcCA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlclxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgdGhpcy50eXBlLl93cml0ZShlbmNvZGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRSZWYgKCkge1xuICAgIHJldHVybiA3XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcmV0dXJuIHtDb250ZW50VHlwZX1cbiAqL1xuY29uc3QgcmVhZENvbnRlbnRUeXBlID0gZGVjb2RlciA9PiBuZXcgQ29udGVudFR5cGUodHlwZVJlZnNbZGVjb2Rlci5yZWFkVHlwZVJlZigpXShkZWNvZGVyKSk7XG5cbi8qKlxuICogQHRvZG8gVGhpcyBzaG91bGQgcmV0dXJuIHNldmVyYWwgaXRlbXNcbiAqXG4gKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICogQHBhcmFtIHtJRH0gaWRcbiAqIEByZXR1cm4ge3tpdGVtOkl0ZW0sIGRpZmY6bnVtYmVyfX1cbiAqL1xuY29uc3QgZm9sbG93UmVkb25lID0gKHN0b3JlLCBpZCkgPT4ge1xuICAvKipcbiAgICogQHR5cGUge0lEfG51bGx9XG4gICAqL1xuICBsZXQgbmV4dElEID0gaWQ7XG4gIGxldCBkaWZmID0gMDtcbiAgbGV0IGl0ZW07XG4gIGRvIHtcbiAgICBpZiAoZGlmZiA+IDApIHtcbiAgICAgIG5leHRJRCA9IGNyZWF0ZUlEKG5leHRJRC5jbGllbnQsIG5leHRJRC5jbG9jayArIGRpZmYpO1xuICAgIH1cbiAgICBpdGVtID0gZ2V0SXRlbShzdG9yZSwgbmV4dElEKTtcbiAgICBkaWZmID0gbmV4dElELmNsb2NrIC0gaXRlbS5pZC5jbG9jaztcbiAgICBuZXh0SUQgPSBpdGVtLnJlZG9uZTtcbiAgfSB3aGlsZSAobmV4dElEICE9PSBudWxsICYmIGl0ZW0gaW5zdGFuY2VvZiBJdGVtKVxuICByZXR1cm4ge1xuICAgIGl0ZW0sIGRpZmZcbiAgfVxufTtcblxuLyoqXG4gKiBNYWtlIHN1cmUgdGhhdCBuZWl0aGVyIGl0ZW0gbm9yIGFueSBvZiBpdHMgcGFyZW50cyBpcyBldmVyIGRlbGV0ZWQuXG4gKlxuICogVGhpcyBwcm9wZXJ0eSBkb2VzIG5vdCBwZXJzaXN0IHdoZW4gc3RvcmluZyBpdCBpbnRvIGEgZGF0YWJhc2Ugb3Igd2hlblxuICogc2VuZGluZyBpdCB0byBvdGhlciBwZWVyc1xuICpcbiAqIEBwYXJhbSB7SXRlbXxudWxsfSBpdGVtXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGtlZXBcbiAqL1xuY29uc3Qga2VlcEl0ZW0gPSAoaXRlbSwga2VlcCkgPT4ge1xuICB3aGlsZSAoaXRlbSAhPT0gbnVsbCAmJiBpdGVtLmtlZXAgIT09IGtlZXApIHtcbiAgICBpdGVtLmtlZXAgPSBrZWVwO1xuICAgIGl0ZW0gPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAoaXRlbS5wYXJlbnQpLl9pdGVtO1xuICB9XG59O1xuXG4vKipcbiAqIFNwbGl0IGxlZnRJdGVtIGludG8gdHdvIGl0ZW1zXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtJdGVtfSBsZWZ0SXRlbVxuICogQHBhcmFtIHtudW1iZXJ9IGRpZmZcbiAqIEByZXR1cm4ge0l0ZW19XG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBzcGxpdEl0ZW0gPSAodHJhbnNhY3Rpb24sIGxlZnRJdGVtLCBkaWZmKSA9PiB7XG4gIC8vIGNyZWF0ZSByaWdodEl0ZW1cbiAgY29uc3QgeyBjbGllbnQsIGNsb2NrIH0gPSBsZWZ0SXRlbS5pZDtcbiAgY29uc3QgcmlnaHRJdGVtID0gbmV3IEl0ZW0oXG4gICAgY3JlYXRlSUQoY2xpZW50LCBjbG9jayArIGRpZmYpLFxuICAgIGxlZnRJdGVtLFxuICAgIGNyZWF0ZUlEKGNsaWVudCwgY2xvY2sgKyBkaWZmIC0gMSksXG4gICAgbGVmdEl0ZW0ucmlnaHQsXG4gICAgbGVmdEl0ZW0ucmlnaHRPcmlnaW4sXG4gICAgbGVmdEl0ZW0ucGFyZW50LFxuICAgIGxlZnRJdGVtLnBhcmVudFN1YixcbiAgICBsZWZ0SXRlbS5jb250ZW50LnNwbGljZShkaWZmKVxuICApO1xuICBpZiAobGVmdEl0ZW0uZGVsZXRlZCkge1xuICAgIHJpZ2h0SXRlbS5tYXJrRGVsZXRlZCgpO1xuICB9XG4gIGlmIChsZWZ0SXRlbS5rZWVwKSB7XG4gICAgcmlnaHRJdGVtLmtlZXAgPSB0cnVlO1xuICB9XG4gIGlmIChsZWZ0SXRlbS5yZWRvbmUgIT09IG51bGwpIHtcbiAgICByaWdodEl0ZW0ucmVkb25lID0gY3JlYXRlSUQobGVmdEl0ZW0ucmVkb25lLmNsaWVudCwgbGVmdEl0ZW0ucmVkb25lLmNsb2NrICsgZGlmZik7XG4gIH1cbiAgLy8gdXBkYXRlIGxlZnQgKGRvIG5vdCBzZXQgbGVmdEl0ZW0ucmlnaHRPcmlnaW4gYXMgaXQgd2lsbCBsZWFkIHRvIHByb2JsZW1zIHdoZW4gc3luY2luZylcbiAgbGVmdEl0ZW0ucmlnaHQgPSByaWdodEl0ZW07XG4gIC8vIHVwZGF0ZSByaWdodFxuICBpZiAocmlnaHRJdGVtLnJpZ2h0ICE9PSBudWxsKSB7XG4gICAgcmlnaHRJdGVtLnJpZ2h0LmxlZnQgPSByaWdodEl0ZW07XG4gIH1cbiAgLy8gcmlnaHQgaXMgbW9yZSBzcGVjaWZpYy5cbiAgdHJhbnNhY3Rpb24uX21lcmdlU3RydWN0cy5wdXNoKHJpZ2h0SXRlbSk7XG4gIC8vIHVwZGF0ZSBwYXJlbnQuX21hcFxuICBpZiAocmlnaHRJdGVtLnBhcmVudFN1YiAhPT0gbnVsbCAmJiByaWdodEl0ZW0ucmlnaHQgPT09IG51bGwpIHtcbiAgICAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAocmlnaHRJdGVtLnBhcmVudCkuX21hcC5zZXQocmlnaHRJdGVtLnBhcmVudFN1YiwgcmlnaHRJdGVtKTtcbiAgfVxuICBsZWZ0SXRlbS5sZW5ndGggPSBkaWZmO1xuICByZXR1cm4gcmlnaHRJdGVtXG59O1xuXG4vKipcbiAqIFJlZG9lcyB0aGUgZWZmZWN0IG9mIHRoaXMgb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uIFRoZSBZanMgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0l0ZW19IGl0ZW1cbiAqIEBwYXJhbSB7U2V0PEl0ZW0+fSByZWRvaXRlbXNcbiAqIEBwYXJhbSB7RGVsZXRlU2V0fSBpdGVtc1RvRGVsZXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlnbm9yZVJlbW90ZU1hcENoYW5nZXNcbiAqXG4gKiBAcmV0dXJuIHtJdGVtfG51bGx9XG4gKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgcmVkb0l0ZW0gPSAodHJhbnNhY3Rpb24sIGl0ZW0sIHJlZG9pdGVtcywgaXRlbXNUb0RlbGV0ZSwgaWdub3JlUmVtb3RlTWFwQ2hhbmdlcykgPT4ge1xuICBjb25zdCBkb2MgPSB0cmFuc2FjdGlvbi5kb2M7XG4gIGNvbnN0IHN0b3JlID0gZG9jLnN0b3JlO1xuICBjb25zdCBvd25DbGllbnRJRCA9IGRvYy5jbGllbnRJRDtcbiAgY29uc3QgcmVkb25lID0gaXRlbS5yZWRvbmU7XG4gIGlmIChyZWRvbmUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIHJlZG9uZSlcbiAgfVxuICBsZXQgcGFyZW50SXRlbSA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChpdGVtLnBhcmVudCkuX2l0ZW07XG4gIC8qKlxuICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgKi9cbiAgbGV0IGxlZnQgPSBudWxsO1xuICAvKipcbiAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICovXG4gIGxldCByaWdodDtcbiAgLy8gbWFrZSBzdXJlIHRoYXQgcGFyZW50IGlzIHJlZG9uZVxuICBpZiAocGFyZW50SXRlbSAhPT0gbnVsbCAmJiBwYXJlbnRJdGVtLmRlbGV0ZWQgPT09IHRydWUpIHtcbiAgICAvLyB0cnkgdG8gdW5kbyBwYXJlbnQgaWYgaXQgd2lsbCBiZSB1bmRvbmUgYW55d2F5XG4gICAgaWYgKHBhcmVudEl0ZW0ucmVkb25lID09PSBudWxsICYmICghcmVkb2l0ZW1zLmhhcyhwYXJlbnRJdGVtKSB8fCByZWRvSXRlbSh0cmFuc2FjdGlvbiwgcGFyZW50SXRlbSwgcmVkb2l0ZW1zLCBpdGVtc1RvRGVsZXRlLCBpZ25vcmVSZW1vdGVNYXBDaGFuZ2VzKSA9PT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIHdoaWxlIChwYXJlbnRJdGVtLnJlZG9uZSAhPT0gbnVsbCkge1xuICAgICAgcGFyZW50SXRlbSA9IGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBwYXJlbnRJdGVtLnJlZG9uZSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHBhcmVudFR5cGUgPSBwYXJlbnRJdGVtID09PSBudWxsID8gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGl0ZW0ucGFyZW50KSA6IC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChwYXJlbnRJdGVtLmNvbnRlbnQpLnR5cGU7XG5cbiAgaWYgKGl0ZW0ucGFyZW50U3ViID09PSBudWxsKSB7XG4gICAgLy8gSXMgYW4gYXJyYXkgaXRlbS4gSW5zZXJ0IGF0IHRoZSBvbGQgcG9zaXRpb25cbiAgICBsZWZ0ID0gaXRlbS5sZWZ0O1xuICAgIHJpZ2h0ID0gaXRlbTtcbiAgICAvLyBmaW5kIG5leHQgY2xvbmVkX3JlZG8gaXRlbXNcbiAgICB3aGlsZSAobGVmdCAhPT0gbnVsbCkge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7SXRlbXxudWxsfVxuICAgICAgICovXG4gICAgICBsZXQgbGVmdFRyYWNlID0gbGVmdDtcbiAgICAgIC8vIHRyYWNlIHJlZG9uZSB1bnRpbCBwYXJlbnQgbWF0Y2hlc1xuICAgICAgd2hpbGUgKGxlZnRUcmFjZSAhPT0gbnVsbCAmJiAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAobGVmdFRyYWNlLnBhcmVudCkuX2l0ZW0gIT09IHBhcmVudEl0ZW0pIHtcbiAgICAgICAgbGVmdFRyYWNlID0gbGVmdFRyYWNlLnJlZG9uZSA9PT0gbnVsbCA/IG51bGwgOiBnZXRJdGVtQ2xlYW5TdGFydCh0cmFuc2FjdGlvbiwgbGVmdFRyYWNlLnJlZG9uZSk7XG4gICAgICB9XG4gICAgICBpZiAobGVmdFRyYWNlICE9PSBudWxsICYmIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChsZWZ0VHJhY2UucGFyZW50KS5faXRlbSA9PT0gcGFyZW50SXRlbSkge1xuICAgICAgICBsZWZ0ID0gbGVmdFRyYWNlO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgbGVmdCA9IGxlZnQubGVmdDtcbiAgICB9XG4gICAgd2hpbGUgKHJpZ2h0ICE9PSBudWxsKSB7XG4gICAgICAvKipcbiAgICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICAgKi9cbiAgICAgIGxldCByaWdodFRyYWNlID0gcmlnaHQ7XG4gICAgICAvLyB0cmFjZSByZWRvbmUgdW50aWwgcGFyZW50IG1hdGNoZXNcbiAgICAgIHdoaWxlIChyaWdodFRyYWNlICE9PSBudWxsICYmIC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovIChyaWdodFRyYWNlLnBhcmVudCkuX2l0ZW0gIT09IHBhcmVudEl0ZW0pIHtcbiAgICAgICAgcmlnaHRUcmFjZSA9IHJpZ2h0VHJhY2UucmVkb25lID09PSBudWxsID8gbnVsbCA6IGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCByaWdodFRyYWNlLnJlZG9uZSk7XG4gICAgICB9XG4gICAgICBpZiAocmlnaHRUcmFjZSAhPT0gbnVsbCAmJiAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAocmlnaHRUcmFjZS5wYXJlbnQpLl9pdGVtID09PSBwYXJlbnRJdGVtKSB7XG4gICAgICAgIHJpZ2h0ID0gcmlnaHRUcmFjZTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHJpZ2h0ID0gcmlnaHQucmlnaHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJpZ2h0ID0gbnVsbDtcbiAgICBpZiAoaXRlbS5yaWdodCAmJiAhaWdub3JlUmVtb3RlTWFwQ2hhbmdlcykge1xuICAgICAgbGVmdCA9IGl0ZW07XG4gICAgICAvLyBJdGVyYXRlIHJpZ2h0IHdoaWxlIHJpZ2h0IGlzIGluIGl0ZW1zVG9EZWxldGVcbiAgICAgIC8vIElmIGl0IGlzIGludGVuZGVkIHRvIGRlbGV0ZSByaWdodCB3aGlsZSBpdGVtIGlzIHJlZG9uZSwgd2UgY2FuIGV4cGVjdCB0aGF0IGl0ZW0gc2hvdWxkIHJlcGxhY2UgcmlnaHQuXG4gICAgICB3aGlsZSAobGVmdCAhPT0gbnVsbCAmJiBsZWZ0LnJpZ2h0ICE9PSBudWxsICYmIGlzRGVsZXRlZChpdGVtc1RvRGVsZXRlLCBsZWZ0LnJpZ2h0LmlkKSkge1xuICAgICAgICBsZWZ0ID0gbGVmdC5yaWdodDtcbiAgICAgIH1cbiAgICAgIC8vIGZvbGxvdyByZWRvbmVcbiAgICAgIC8vIHRyYWNlIHJlZG9uZSB1bnRpbCBwYXJlbnQgbWF0Y2hlc1xuICAgICAgd2hpbGUgKGxlZnQgIT09IG51bGwgJiYgbGVmdC5yZWRvbmUgIT09IG51bGwpIHtcbiAgICAgICAgbGVmdCA9IGdldEl0ZW1DbGVhblN0YXJ0KHRyYW5zYWN0aW9uLCBsZWZ0LnJlZG9uZSk7XG4gICAgICB9XG4gICAgICAvLyBjaGVjayB3ZXRoZXIgd2Ugd2VyZSBhbGxvd2VkIHRvIGZvbGxvdyByaWdodCAoaW5kaWNhdGluZyB0aGF0IG9yaWdpbmFsbHkgdGhpcyBvcCB3YXMgcmVwbGFjZWQgYnkgYW5vdGhlciBpdGVtKVxuICAgICAgaWYgKGxlZnQgPT09IG51bGwgfHwgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKGxlZnQucGFyZW50KS5faXRlbSAhPT0gcGFyZW50SXRlbSkge1xuICAgICAgICAvLyBpbnZhbGlkIHBhcmVudDsgc2hvdWxkIG5ldmVyIGhhcHBlblxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgICAgaWYgKGxlZnQgJiYgbGVmdC5yaWdodCAhPT0gbnVsbCkge1xuICAgICAgICAvLyBJdCBpcyBub3QgcG9zc2libGUgdG8gcmVkbyB0aGlzIGl0ZW0gYmVjYXVzZSBpdCBjb25mbGljdHMgd2l0aCBhXG4gICAgICAgIC8vIGNoYW5nZSBmcm9tIGFub3RoZXIgY2xpZW50XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSBwYXJlbnRUeXBlLl9tYXAuZ2V0KGl0ZW0ucGFyZW50U3ViKSB8fCBudWxsO1xuICAgIH1cbiAgfVxuICBjb25zdCBuZXh0Q2xvY2sgPSBnZXRTdGF0ZShzdG9yZSwgb3duQ2xpZW50SUQpO1xuICBjb25zdCBuZXh0SWQgPSBjcmVhdGVJRChvd25DbGllbnRJRCwgbmV4dENsb2NrKTtcbiAgY29uc3QgcmVkb25lSXRlbSA9IG5ldyBJdGVtKFxuICAgIG5leHRJZCxcbiAgICBsZWZ0LCBsZWZ0ICYmIGxlZnQubGFzdElkLFxuICAgIHJpZ2h0LCByaWdodCAmJiByaWdodC5pZCxcbiAgICBwYXJlbnRUeXBlLFxuICAgIGl0ZW0ucGFyZW50U3ViLFxuICAgIGl0ZW0uY29udGVudC5jb3B5KClcbiAgKTtcbiAgaXRlbS5yZWRvbmUgPSBuZXh0SWQ7XG4gIGtlZXBJdGVtKHJlZG9uZUl0ZW0sIHRydWUpO1xuICByZWRvbmVJdGVtLmludGVncmF0ZSh0cmFuc2FjdGlvbiwgMCk7XG4gIHJldHVybiByZWRvbmVJdGVtXG59O1xuXG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhbnkgY29udGVudC5cbiAqL1xuY2xhc3MgSXRlbSBleHRlbmRzIEFic3RyYWN0U3RydWN0IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7SUR9IGlkXG4gICAqIEBwYXJhbSB7SXRlbSB8IG51bGx9IGxlZnRcbiAgICogQHBhcmFtIHtJRCB8IG51bGx9IG9yaWdpblxuICAgKiBAcGFyYW0ge0l0ZW0gfCBudWxsfSByaWdodFxuICAgKiBAcGFyYW0ge0lEIHwgbnVsbH0gcmlnaHRPcmlnaW5cbiAgICogQHBhcmFtIHtBYnN0cmFjdFR5cGU8YW55PnxJRHxudWxsfSBwYXJlbnQgSXMgYSB0eXBlIGlmIGludGVncmF0ZWQsIGlzIG51bGwgaWYgaXQgaXMgcG9zc2libGUgdG8gY29weSBwYXJlbnQgZnJvbSBsZWZ0IG9yIHJpZ2h0LCBpcyBJRCBiZWZvcmUgaW50ZWdyYXRpb24gdG8gc2VhcmNoIGZvciBpdC5cbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsfSBwYXJlbnRTdWJcbiAgICogQHBhcmFtIHtBYnN0cmFjdENvbnRlbnR9IGNvbnRlbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChpZCwgbGVmdCwgb3JpZ2luLCByaWdodCwgcmlnaHRPcmlnaW4sIHBhcmVudCwgcGFyZW50U3ViLCBjb250ZW50KSB7XG4gICAgc3VwZXIoaWQsIGNvbnRlbnQuZ2V0TGVuZ3RoKCkpO1xuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtIHRoYXQgd2FzIG9yaWdpbmFsbHkgdG8gdGhlIGxlZnQgb2YgdGhpcyBpdGVtLlxuICAgICAqIEB0eXBlIHtJRCB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5vcmlnaW4gPSBvcmlnaW47XG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0gdGhhdCBpcyBjdXJyZW50bHkgdG8gdGhlIGxlZnQgb2YgdGhpcyBpdGVtLlxuICAgICAqIEB0eXBlIHtJdGVtIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtIHRoYXQgaXMgY3VycmVudGx5IHRvIHRoZSByaWdodCBvZiB0aGlzIGl0ZW0uXG4gICAgICogQHR5cGUge0l0ZW0gfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbSB0aGF0IHdhcyBvcmlnaW5hbGx5IHRvIHRoZSByaWdodCBvZiB0aGlzIGl0ZW0uXG4gICAgICogQHR5cGUge0lEIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJpZ2h0T3JpZ2luID0gcmlnaHRPcmlnaW47XG4gICAgLyoqXG4gICAgICogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fElEfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHBhcmVudCByZWZlcnMgdG8gdGhpcyBpdGVtIHdpdGggc29tZSBraW5kIG9mIGtleSAoZS5nLiBZTWFwLCB0aGVcbiAgICAgKiBrZXkgaXMgc3BlY2lmaWVkIGhlcmUuIFRoZSBrZXkgaXMgdGhlbiB1c2VkIHRvIHJlZmVyIHRvIHRoZSBsaXN0IGluIHdoaWNoXG4gICAgICogdG8gaW5zZXJ0IHRoaXMgaXRlbS4gSWYgYHBhcmVudFN1YiA9IG51bGxgIHR5cGUuX3N0YXJ0IGlzIHRoZSBsaXN0IGluXG4gICAgICogd2hpY2ggdG8gaW5zZXJ0IHRvLiBPdGhlcndpc2UgaXQgaXMgYHBhcmVudC5fbWFwYC5cbiAgICAgKiBAdHlwZSB7U3RyaW5nIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIHR5cGUncyBlZmZlY3QgaXMgcmVkb25lIHRoaXMgdHlwZSByZWZlcnMgdG8gdGhlIHR5cGUgdGhhdCB1bmRpZFxuICAgICAqIHRoaXMgb3BlcmF0aW9uLlxuICAgICAqIEB0eXBlIHtJRCB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5yZWRvbmUgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBYnN0cmFjdENvbnRlbnR9XG4gICAgICovXG4gICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgICAvKipcbiAgICAgKiBiaXQxOiBrZWVwXG4gICAgICogYml0MjogY291bnRhYmxlXG4gICAgICogYml0MzogZGVsZXRlZFxuICAgICAqIGJpdDQ6IG1hcmsgLSBtYXJrIG5vZGUgYXMgZmFzdC1zZWFyY2gtbWFya2VyXG4gICAgICogQHR5cGUge251bWJlcn0gYnl0ZVxuICAgICAqL1xuICAgIHRoaXMuaW5mbyA9IHRoaXMuY29udGVudC5pc0NvdW50YWJsZSgpID8gYmluYXJ5LkJJVDIgOiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdXNlZCB0byBtYXJrIHRoZSBpdGVtIGFzIGFuIGluZGV4ZWQgZmFzdC1zZWFyY2ggbWFya2VyXG4gICAqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgc2V0IG1hcmtlciAoaXNNYXJrZWQpIHtcbiAgICBpZiAoKCh0aGlzLmluZm8gJiBiaW5hcnkuQklUNCkgPiAwKSAhPT0gaXNNYXJrZWQpIHtcbiAgICAgIHRoaXMuaW5mbyBePSBiaW5hcnkuQklUNDtcbiAgICB9XG4gIH1cblxuICBnZXQgbWFya2VyICgpIHtcbiAgICByZXR1cm4gKHRoaXMuaW5mbyAmIGJpbmFyeS5CSVQ0KSA+IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBkbyBub3QgZ2FyYmFnZSBjb2xsZWN0IHRoaXMgSXRlbS5cbiAgICovXG4gIGdldCBrZWVwICgpIHtcbiAgICByZXR1cm4gKHRoaXMuaW5mbyAmIGJpbmFyeS5CSVQxKSA+IDBcbiAgfVxuXG4gIHNldCBrZWVwIChkb0tlZXApIHtcbiAgICBpZiAodGhpcy5rZWVwICE9PSBkb0tlZXApIHtcbiAgICAgIHRoaXMuaW5mbyBePSBiaW5hcnkuQklUMTtcbiAgICB9XG4gIH1cblxuICBnZXQgY291bnRhYmxlICgpIHtcbiAgICByZXR1cm4gKHRoaXMuaW5mbyAmIGJpbmFyeS5CSVQyKSA+IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgaXRlbSB3YXMgZGVsZXRlZCBvciBub3QuXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKi9cbiAgZ2V0IGRlbGV0ZWQgKCkge1xuICAgIHJldHVybiAodGhpcy5pbmZvICYgYmluYXJ5LkJJVDMpID4gMFxuICB9XG5cbiAgc2V0IGRlbGV0ZWQgKGRvRGVsZXRlKSB7XG4gICAgaWYgKHRoaXMuZGVsZXRlZCAhPT0gZG9EZWxldGUpIHtcbiAgICAgIHRoaXMuaW5mbyBePSBiaW5hcnkuQklUMztcbiAgICB9XG4gIH1cblxuICBtYXJrRGVsZXRlZCAoKSB7XG4gICAgdGhpcy5pbmZvIHw9IGJpbmFyeS5CSVQzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgY3JlYXRvciBjbGllbnRJRCBvZiB0aGUgbWlzc2luZyBvcCBvciBkZWZpbmUgbWlzc2luZyBpdGVtcyBhbmQgcmV0dXJuIG51bGwuXG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7U3RydWN0U3RvcmV9IHN0b3JlXG4gICAqIEByZXR1cm4ge251bGwgfCBudW1iZXJ9XG4gICAqL1xuICBnZXRNaXNzaW5nICh0cmFuc2FjdGlvbiwgc3RvcmUpIHtcbiAgICBpZiAodGhpcy5vcmlnaW4gJiYgdGhpcy5vcmlnaW4uY2xpZW50ICE9PSB0aGlzLmlkLmNsaWVudCAmJiB0aGlzLm9yaWdpbi5jbG9jayA+PSBnZXRTdGF0ZShzdG9yZSwgdGhpcy5vcmlnaW4uY2xpZW50KSkge1xuICAgICAgcmV0dXJuIHRoaXMub3JpZ2luLmNsaWVudFxuICAgIH1cbiAgICBpZiAodGhpcy5yaWdodE9yaWdpbiAmJiB0aGlzLnJpZ2h0T3JpZ2luLmNsaWVudCAhPT0gdGhpcy5pZC5jbGllbnQgJiYgdGhpcy5yaWdodE9yaWdpbi5jbG9jayA+PSBnZXRTdGF0ZShzdG9yZSwgdGhpcy5yaWdodE9yaWdpbi5jbGllbnQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yaWdodE9yaWdpbi5jbGllbnRcbiAgICB9XG4gICAgaWYgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmNvbnN0cnVjdG9yID09PSBJRCAmJiB0aGlzLmlkLmNsaWVudCAhPT0gdGhpcy5wYXJlbnQuY2xpZW50ICYmIHRoaXMucGFyZW50LmNsb2NrID49IGdldFN0YXRlKHN0b3JlLCB0aGlzLnBhcmVudC5jbGllbnQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQuY2xpZW50XG4gICAgfVxuXG4gICAgLy8gV2UgaGF2ZSBhbGwgbWlzc2luZyBpZHMsIG5vdyBmaW5kIHRoZSBpdGVtc1xuXG4gICAgaWYgKHRoaXMub3JpZ2luKSB7XG4gICAgICB0aGlzLmxlZnQgPSBnZXRJdGVtQ2xlYW5FbmQodHJhbnNhY3Rpb24sIHN0b3JlLCB0aGlzLm9yaWdpbik7XG4gICAgICB0aGlzLm9yaWdpbiA9IHRoaXMubGVmdC5sYXN0SWQ7XG4gICAgfVxuICAgIGlmICh0aGlzLnJpZ2h0T3JpZ2luKSB7XG4gICAgICB0aGlzLnJpZ2h0ID0gZ2V0SXRlbUNsZWFuU3RhcnQodHJhbnNhY3Rpb24sIHRoaXMucmlnaHRPcmlnaW4pO1xuICAgICAgdGhpcy5yaWdodE9yaWdpbiA9IHRoaXMucmlnaHQuaWQ7XG4gICAgfVxuICAgIGlmICgodGhpcy5sZWZ0ICYmIHRoaXMubGVmdC5jb25zdHJ1Y3RvciA9PT0gR0MpIHx8ICh0aGlzLnJpZ2h0ICYmIHRoaXMucmlnaHQuY29uc3RydWN0b3IgPT09IEdDKSkge1xuICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgICAvLyBvbmx5IHNldCBwYXJlbnQgaWYgdGhpcyBzaG91bGRuJ3QgYmUgZ2FyYmFnZSBjb2xsZWN0ZWRcbiAgICBpZiAoIXRoaXMucGFyZW50KSB7XG4gICAgICBpZiAodGhpcy5sZWZ0ICYmIHRoaXMubGVmdC5jb25zdHJ1Y3RvciA9PT0gSXRlbSkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHRoaXMubGVmdC5wYXJlbnQ7XG4gICAgICAgIHRoaXMucGFyZW50U3ViID0gdGhpcy5sZWZ0LnBhcmVudFN1YjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJpZ2h0ICYmIHRoaXMucmlnaHQuY29uc3RydWN0b3IgPT09IEl0ZW0pIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSB0aGlzLnJpZ2h0LnBhcmVudDtcbiAgICAgICAgdGhpcy5wYXJlbnRTdWIgPSB0aGlzLnJpZ2h0LnBhcmVudFN1YjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50LmNvbnN0cnVjdG9yID09PSBJRCkge1xuICAgICAgY29uc3QgcGFyZW50SXRlbSA9IGdldEl0ZW0oc3RvcmUsIHRoaXMucGFyZW50KTtcbiAgICAgIGlmIChwYXJlbnRJdGVtLmNvbnN0cnVjdG9yID09PSBHQykge1xuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhcmVudCA9IC8qKiBAdHlwZSB7Q29udGVudFR5cGV9ICovIChwYXJlbnRJdGVtLmNvbnRlbnQpLnR5cGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICAgKi9cbiAgaW50ZWdyYXRlICh0cmFuc2FjdGlvbiwgb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA+IDApIHtcbiAgICAgIHRoaXMuaWQuY2xvY2sgKz0gb2Zmc2V0O1xuICAgICAgdGhpcy5sZWZ0ID0gZ2V0SXRlbUNsZWFuRW5kKHRyYW5zYWN0aW9uLCB0cmFuc2FjdGlvbi5kb2Muc3RvcmUsIGNyZWF0ZUlEKHRoaXMuaWQuY2xpZW50LCB0aGlzLmlkLmNsb2NrIC0gMSkpO1xuICAgICAgdGhpcy5vcmlnaW4gPSB0aGlzLmxlZnQubGFzdElkO1xuICAgICAgdGhpcy5jb250ZW50ID0gdGhpcy5jb250ZW50LnNwbGljZShvZmZzZXQpO1xuICAgICAgdGhpcy5sZW5ndGggLT0gb2Zmc2V0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgaWYgKCghdGhpcy5sZWZ0ICYmICghdGhpcy5yaWdodCB8fCB0aGlzLnJpZ2h0LmxlZnQgIT09IG51bGwpKSB8fCAodGhpcy5sZWZ0ICYmIHRoaXMubGVmdC5yaWdodCAhPT0gdGhpcy5yaWdodCkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtJdGVtfG51bGx9XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgbGVmdCA9IHRoaXMubGVmdDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge0l0ZW18bnVsbH1cbiAgICAgICAgICovXG4gICAgICAgIGxldCBvO1xuICAgICAgICAvLyBzZXQgbyB0byB0aGUgZmlyc3QgY29uZmxpY3RpbmcgaXRlbVxuICAgICAgICBpZiAobGVmdCAhPT0gbnVsbCkge1xuICAgICAgICAgIG8gPSBsZWZ0LnJpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50U3ViICE9PSBudWxsKSB7XG4gICAgICAgICAgbyA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX21hcC5nZXQodGhpcy5wYXJlbnRTdWIpIHx8IG51bGw7XG4gICAgICAgICAgd2hpbGUgKG8gIT09IG51bGwgJiYgby5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBvID0gby5sZWZ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogdXNlIHNvbWV0aGluZyBsaWtlIERlbGV0ZVNldCBoZXJlIChhIHRyZWUgaW1wbGVtZW50YXRpb24gd291bGQgYmUgYmVzdClcbiAgICAgICAgLy8gQHRvZG8gdXNlIGdsb2JhbCBzZXQgZGVmaW5pdGlvbnNcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtTZXQ8SXRlbT59XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBjb25mbGljdGluZ0l0ZW1zID0gbmV3IFNldCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge1NldDxJdGVtPn1cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGl0ZW1zQmVmb3JlT3JpZ2luID0gbmV3IFNldCgpO1xuICAgICAgICAvLyBMZXQgYyBpbiBjb25mbGljdGluZ0l0ZW1zLCBiIGluIGl0ZW1zQmVmb3JlT3JpZ2luXG4gICAgICAgIC8vICoqKntvcmlnaW59YmJiYnt0aGlzfXtjLGJ9e2MsYn17b30qKipcbiAgICAgICAgLy8gTm90ZSB0aGF0IGNvbmZsaWN0aW5nSXRlbXMgaXMgYSBzdWJzZXQgb2YgaXRlbXNCZWZvcmVPcmlnaW5cbiAgICAgICAgd2hpbGUgKG8gIT09IG51bGwgJiYgbyAhPT0gdGhpcy5yaWdodCkge1xuICAgICAgICAgIGl0ZW1zQmVmb3JlT3JpZ2luLmFkZChvKTtcbiAgICAgICAgICBjb25mbGljdGluZ0l0ZW1zLmFkZChvKTtcbiAgICAgICAgICBpZiAoY29tcGFyZUlEcyh0aGlzLm9yaWdpbiwgby5vcmlnaW4pKSB7XG4gICAgICAgICAgICAvLyBjYXNlIDFcbiAgICAgICAgICAgIGlmIChvLmlkLmNsaWVudCA8IHRoaXMuaWQuY2xpZW50KSB7XG4gICAgICAgICAgICAgIGxlZnQgPSBvO1xuICAgICAgICAgICAgICBjb25mbGljdGluZ0l0ZW1zLmNsZWFyKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBhcmVJRHModGhpcy5yaWdodE9yaWdpbiwgby5yaWdodE9yaWdpbikpIHtcbiAgICAgICAgICAgICAgLy8gdGhpcyBhbmQgbyBhcmUgY29uZmxpY3RpbmcgYW5kIHBvaW50IHRvIHRoZSBzYW1lIGludGVncmF0aW9uIHBvaW50cy4gVGhlIGlkIGRlY2lkZXMgd2hpY2ggaXRlbSBjb21lcyBmaXJzdC5cbiAgICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBpcyB0byB0aGUgbGVmdCBvZiBvLCB3ZSBjYW4gYnJlYWsgaGVyZVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfSAvLyBlbHNlLCBvIG1pZ2h0IGJlIGludGVncmF0ZWQgYmVmb3JlIGFuIGl0ZW0gdGhhdCB0aGlzIGNvbmZsaWN0cyB3aXRoLiBJZiBzbywgd2Ugd2lsbCBmaW5kIGl0IGluIHRoZSBuZXh0IGl0ZXJhdGlvbnNcbiAgICAgICAgICB9IGVsc2UgaWYgKG8ub3JpZ2luICE9PSBudWxsICYmIGl0ZW1zQmVmb3JlT3JpZ2luLmhhcyhnZXRJdGVtKHRyYW5zYWN0aW9uLmRvYy5zdG9yZSwgby5vcmlnaW4pKSkgeyAvLyB1c2UgZ2V0SXRlbSBpbnN0ZWFkIG9mIGdldEl0ZW1DbGVhbkVuZCBiZWNhdXNlIHdlIGRvbid0IHdhbnQgLyBuZWVkIHRvIHNwbGl0IGl0ZW1zLlxuICAgICAgICAgICAgLy8gY2FzZSAyXG4gICAgICAgICAgICBpZiAoIWNvbmZsaWN0aW5nSXRlbXMuaGFzKGdldEl0ZW0odHJhbnNhY3Rpb24uZG9jLnN0b3JlLCBvLm9yaWdpbikpKSB7XG4gICAgICAgICAgICAgIGxlZnQgPSBvO1xuICAgICAgICAgICAgICBjb25mbGljdGluZ0l0ZW1zLmNsZWFyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIG8gPSBvLnJpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgICB9XG4gICAgICAvLyByZWNvbm5lY3QgbGVmdC9yaWdodCArIHVwZGF0ZSBwYXJlbnQgbWFwL3N0YXJ0IGlmIG5lY2Vzc2FyeVxuICAgICAgaWYgKHRoaXMubGVmdCAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCByaWdodCA9IHRoaXMubGVmdC5yaWdodDtcbiAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgICAgICB0aGlzLmxlZnQucmlnaHQgPSB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHI7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudFN1YiAhPT0gbnVsbCkge1xuICAgICAgICAgIHIgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9tYXAuZ2V0KHRoaXMucGFyZW50U3ViKSB8fCBudWxsO1xuICAgICAgICAgIHdoaWxlIChyICE9PSBudWxsICYmIHIubGVmdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgciA9IHIubGVmdDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgciA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX3N0YXJ0XG4gICAgICAgICAgOy8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX3N0YXJ0ID0gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJpZ2h0ID0gcjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJpZ2h0ICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucmlnaHQubGVmdCA9IHRoaXM7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucGFyZW50U3ViICE9PSBudWxsKSB7XG4gICAgICAgIC8vIHNldCBhcyBjdXJyZW50IHBhcmVudCB2YWx1ZSBpZiByaWdodCA9PT0gbnVsbCBhbmQgdGhpcyBpcyBwYXJlbnRTdWJcbiAgICAgICAgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fbWFwLnNldCh0aGlzLnBhcmVudFN1YiwgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmxlZnQgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBjdXJyZW50IGF0dHJpYnV0ZSB2YWx1ZSBvZiBwYXJlbnQuIGRlbGV0ZSByaWdodFxuICAgICAgICAgIHRoaXMubGVmdC5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBhZGp1c3QgbGVuZ3RoIG9mIHBhcmVudFxuICAgICAgaWYgKHRoaXMucGFyZW50U3ViID09PSBudWxsICYmIHRoaXMuY291bnRhYmxlICYmICF0aGlzLmRlbGV0ZWQpIHtcbiAgICAgICAgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5fbGVuZ3RoICs9IHRoaXMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgYWRkU3RydWN0KHRyYW5zYWN0aW9uLmRvYy5zdG9yZSwgdGhpcyk7XG4gICAgICB0aGlzLmNvbnRlbnQuaW50ZWdyYXRlKHRyYW5zYWN0aW9uLCB0aGlzKTtcbiAgICAgIC8vIGFkZCBwYXJlbnQgdG8gdHJhbnNhY3Rpb24uY2hhbmdlZFxuICAgICAgYWRkQ2hhbmdlZFR5cGVUb1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uLCAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLCB0aGlzLnBhcmVudFN1Yik7XG4gICAgICBpZiAoKC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCkuX2l0ZW0gIT09IG51bGwgJiYgLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KS5faXRlbS5kZWxldGVkKSB8fCAodGhpcy5wYXJlbnRTdWIgIT09IG51bGwgJiYgdGhpcy5yaWdodCAhPT0gbnVsbCkpIHtcbiAgICAgICAgLy8gZGVsZXRlIGlmIHBhcmVudCBpcyBkZWxldGVkIG9yIGlmIHRoaXMgaXMgbm90IHRoZSBjdXJyZW50IGF0dHJpYnV0ZSB2YWx1ZSBvZiBwYXJlbnRcbiAgICAgICAgdGhpcy5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBwYXJlbnQgaXMgbm90IGRlZmluZWQuIEludGVncmF0ZSBHQyBzdHJ1Y3QgaW5zdGVhZFxuICAgICAgbmV3IEdDKHRoaXMuaWQsIHRoaXMubGVuZ3RoKS5pbnRlZ3JhdGUodHJhbnNhY3Rpb24sIDApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBuZXh0IG5vbi1kZWxldGVkIGl0ZW1cbiAgICovXG4gIGdldCBuZXh0ICgpIHtcbiAgICBsZXQgbiA9IHRoaXMucmlnaHQ7XG4gICAgd2hpbGUgKG4gIT09IG51bGwgJiYgbi5kZWxldGVkKSB7XG4gICAgICBuID0gbi5yaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIG5cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcmV2aW91cyBub24tZGVsZXRlZCBpdGVtXG4gICAqL1xuICBnZXQgcHJldiAoKSB7XG4gICAgbGV0IG4gPSB0aGlzLmxlZnQ7XG4gICAgd2hpbGUgKG4gIT09IG51bGwgJiYgbi5kZWxldGVkKSB7XG4gICAgICBuID0gbi5sZWZ0O1xuICAgIH1cbiAgICByZXR1cm4gblxuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBsYXN0IGNvbnRlbnQgYWRkcmVzcyBvZiB0aGlzIEl0ZW0uXG4gICAqL1xuICBnZXQgbGFzdElkICgpIHtcbiAgICAvLyBhbGxvY2F0aW5nIGlkcyBpcyBwcmV0dHkgY29zdGx5IGJlY2F1c2Ugb2YgdGhlIGFtb3VudCBvZiBpZHMgY3JlYXRlZCwgc28gd2UgdHJ5IHRvIHJldXNlIHdoZW5ldmVyIHBvc3NpYmxlXG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoID09PSAxID8gdGhpcy5pZCA6IGNyZWF0ZUlEKHRoaXMuaWQuY2xpZW50LCB0aGlzLmlkLmNsb2NrICsgdGhpcy5sZW5ndGggLSAxKVxuICB9XG5cbiAgLyoqXG4gICAqIFRyeSB0byBtZXJnZSB0d28gaXRlbXNcbiAgICpcbiAgICogQHBhcmFtIHtJdGVtfSByaWdodFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbWVyZ2VXaXRoIChyaWdodCkge1xuICAgIGlmIChcbiAgICAgIHRoaXMuY29uc3RydWN0b3IgPT09IHJpZ2h0LmNvbnN0cnVjdG9yICYmXG4gICAgICBjb21wYXJlSURzKHJpZ2h0Lm9yaWdpbiwgdGhpcy5sYXN0SWQpICYmXG4gICAgICB0aGlzLnJpZ2h0ID09PSByaWdodCAmJlxuICAgICAgY29tcGFyZUlEcyh0aGlzLnJpZ2h0T3JpZ2luLCByaWdodC5yaWdodE9yaWdpbikgJiZcbiAgICAgIHRoaXMuaWQuY2xpZW50ID09PSByaWdodC5pZC5jbGllbnQgJiZcbiAgICAgIHRoaXMuaWQuY2xvY2sgKyB0aGlzLmxlbmd0aCA9PT0gcmlnaHQuaWQuY2xvY2sgJiZcbiAgICAgIHRoaXMuZGVsZXRlZCA9PT0gcmlnaHQuZGVsZXRlZCAmJlxuICAgICAgdGhpcy5yZWRvbmUgPT09IG51bGwgJiZcbiAgICAgIHJpZ2h0LnJlZG9uZSA9PT0gbnVsbCAmJlxuICAgICAgdGhpcy5jb250ZW50LmNvbnN0cnVjdG9yID09PSByaWdodC5jb250ZW50LmNvbnN0cnVjdG9yICYmXG4gICAgICB0aGlzLmNvbnRlbnQubWVyZ2VXaXRoKHJpZ2h0LmNvbnRlbnQpXG4gICAgKSB7XG4gICAgICBjb25zdCBzZWFyY2hNYXJrZXIgPSAvKiogQHR5cGUge0Fic3RyYWN0VHlwZTxhbnk+fSAqLyAodGhpcy5wYXJlbnQpLl9zZWFyY2hNYXJrZXI7XG4gICAgICBpZiAoc2VhcmNoTWFya2VyKSB7XG4gICAgICAgIHNlYXJjaE1hcmtlci5mb3JFYWNoKG1hcmtlciA9PiB7XG4gICAgICAgICAgaWYgKG1hcmtlci5wID09PSByaWdodCkge1xuICAgICAgICAgICAgLy8gcmlnaHQgaXMgZ29pbmcgdG8gYmUgXCJmb3Jnb3R0ZW5cIiBzbyB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgbWFya2VyXG4gICAgICAgICAgICBtYXJrZXIucCA9IHRoaXM7XG4gICAgICAgICAgICAvLyBhZGp1c3QgbWFya2VyIGluZGV4XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGVsZXRlZCAmJiB0aGlzLmNvdW50YWJsZSkge1xuICAgICAgICAgICAgICBtYXJrZXIuaW5kZXggLT0gdGhpcy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChyaWdodC5rZWVwKSB7XG4gICAgICAgIHRoaXMua2VlcCA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQucmlnaHQ7XG4gICAgICBpZiAodGhpcy5yaWdodCAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnJpZ2h0LmxlZnQgPSB0aGlzO1xuICAgICAgfVxuICAgICAgdGhpcy5sZW5ndGggKz0gcmlnaHQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogTWFyayB0aGlzIEl0ZW0gYXMgZGVsZXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZSAodHJhbnNhY3Rpb24pIHtcbiAgICBpZiAoIXRoaXMuZGVsZXRlZCkge1xuICAgICAgY29uc3QgcGFyZW50ID0gLyoqIEB0eXBlIHtBYnN0cmFjdFR5cGU8YW55Pn0gKi8gKHRoaXMucGFyZW50KTtcbiAgICAgIC8vIGFkanVzdCB0aGUgbGVuZ3RoIG9mIHBhcmVudFxuICAgICAgaWYgKHRoaXMuY291bnRhYmxlICYmIHRoaXMucGFyZW50U3ViID09PSBudWxsKSB7XG4gICAgICAgIHBhcmVudC5fbGVuZ3RoIC09IHRoaXMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdGhpcy5tYXJrRGVsZXRlZCgpO1xuICAgICAgYWRkVG9EZWxldGVTZXQodHJhbnNhY3Rpb24uZGVsZXRlU2V0LCB0aGlzLmlkLmNsaWVudCwgdGhpcy5pZC5jbG9jaywgdGhpcy5sZW5ndGgpO1xuICAgICAgYWRkQ2hhbmdlZFR5cGVUb1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uLCBwYXJlbnQsIHRoaXMucGFyZW50U3ViKTtcbiAgICAgIHRoaXMuY29udGVudC5kZWxldGUodHJhbnNhY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHBhcmVudEdDZFxuICAgKi9cbiAgZ2MgKHN0b3JlLCBwYXJlbnRHQ2QpIHtcbiAgICBpZiAoIXRoaXMuZGVsZXRlZCkge1xuICAgICAgdGhyb3cgZXJyb3IudW5leHBlY3RlZENhc2UoKVxuICAgIH1cbiAgICB0aGlzLmNvbnRlbnQuZ2Moc3RvcmUpO1xuICAgIGlmIChwYXJlbnRHQ2QpIHtcbiAgICAgIHJlcGxhY2VTdHJ1Y3Qoc3RvcmUsIHRoaXMsIG5ldyBHQyh0aGlzLmlkLCB0aGlzLmxlbmd0aCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnRlbnQgPSBuZXcgQ29udGVudERlbGV0ZWQodGhpcy5sZW5ndGgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gdGhlIHByb3BlcnRpZXMgb2YgdGhpcyB0eXBlIHRvIGJpbmFyeSBhbmQgd3JpdGUgaXQgdG8gYW5cbiAgICogQmluYXJ5RW5jb2Rlci5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB0aGlzIEl0ZW0gaXMgc2VudCB0byBhIHJlbW90ZSBwZWVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1VwZGF0ZUVuY29kZXJWMSB8IFVwZGF0ZUVuY29kZXJWMn0gZW5jb2RlciBUaGUgZW5jb2RlciB0byB3cml0ZSBkYXRhIHRvLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICB3cml0ZSAoZW5jb2Rlciwgb2Zmc2V0KSB7XG4gICAgY29uc3Qgb3JpZ2luID0gb2Zmc2V0ID4gMCA/IGNyZWF0ZUlEKHRoaXMuaWQuY2xpZW50LCB0aGlzLmlkLmNsb2NrICsgb2Zmc2V0IC0gMSkgOiB0aGlzLm9yaWdpbjtcbiAgICBjb25zdCByaWdodE9yaWdpbiA9IHRoaXMucmlnaHRPcmlnaW47XG4gICAgY29uc3QgcGFyZW50U3ViID0gdGhpcy5wYXJlbnRTdWI7XG4gICAgY29uc3QgaW5mbyA9ICh0aGlzLmNvbnRlbnQuZ2V0UmVmKCkgJiBiaW5hcnkuQklUUzUpIHxcbiAgICAgIChvcmlnaW4gPT09IG51bGwgPyAwIDogYmluYXJ5LkJJVDgpIHwgLy8gb3JpZ2luIGlzIGRlZmluZWRcbiAgICAgIChyaWdodE9yaWdpbiA9PT0gbnVsbCA/IDAgOiBiaW5hcnkuQklUNykgfCAvLyByaWdodCBvcmlnaW4gaXMgZGVmaW5lZFxuICAgICAgKHBhcmVudFN1YiA9PT0gbnVsbCA/IDAgOiBiaW5hcnkuQklUNik7IC8vIHBhcmVudFN1YiBpcyBub24tbnVsbFxuICAgIGVuY29kZXIud3JpdGVJbmZvKGluZm8pO1xuICAgIGlmIChvcmlnaW4gIT09IG51bGwpIHtcbiAgICAgIGVuY29kZXIud3JpdGVMZWZ0SUQob3JpZ2luKTtcbiAgICB9XG4gICAgaWYgKHJpZ2h0T3JpZ2luICE9PSBudWxsKSB7XG4gICAgICBlbmNvZGVyLndyaXRlUmlnaHRJRChyaWdodE9yaWdpbik7XG4gICAgfVxuICAgIGlmIChvcmlnaW4gPT09IG51bGwgJiYgcmlnaHRPcmlnaW4gPT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IC8qKiBAdHlwZSB7QWJzdHJhY3RUeXBlPGFueT59ICovICh0aGlzLnBhcmVudCk7XG4gICAgICBpZiAocGFyZW50Ll9pdGVtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgcGFyZW50SXRlbSA9IHBhcmVudC5faXRlbTtcbiAgICAgICAgaWYgKHBhcmVudEl0ZW0gPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBwYXJlbnQgdHlwZSBvbiB5Ll9tYXBcbiAgICAgICAgICAvLyBmaW5kIHRoZSBjb3JyZWN0IGtleVxuICAgICAgICAgIGNvbnN0IHlrZXkgPSBmaW5kUm9vdFR5cGVLZXkocGFyZW50KTtcbiAgICAgICAgICBlbmNvZGVyLndyaXRlUGFyZW50SW5mbyh0cnVlKTsgLy8gd3JpdGUgcGFyZW50WUtleVxuICAgICAgICAgIGVuY29kZXIud3JpdGVTdHJpbmcoeWtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5jb2Rlci53cml0ZVBhcmVudEluZm8oZmFsc2UpOyAvLyB3cml0ZSBwYXJlbnQgaWRcbiAgICAgICAgICBlbmNvZGVyLndyaXRlTGVmdElEKHBhcmVudEl0ZW0uaWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmVudC5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKSB7IC8vIHRoaXMgZWRnZSBjYXNlIHdhcyBhZGRlZCBieSBkaWZmZXJlbnRpYWwgdXBkYXRlc1xuICAgICAgICBlbmNvZGVyLndyaXRlUGFyZW50SW5mbyh0cnVlKTsgLy8gd3JpdGUgcGFyZW50WUtleVxuICAgICAgICBlbmNvZGVyLndyaXRlU3RyaW5nKHBhcmVudCk7XG4gICAgICB9IGVsc2UgaWYgKHBhcmVudC5jb25zdHJ1Y3RvciA9PT0gSUQpIHtcbiAgICAgICAgZW5jb2Rlci53cml0ZVBhcmVudEluZm8oZmFsc2UpOyAvLyB3cml0ZSBwYXJlbnQgaWRcbiAgICAgICAgZW5jb2Rlci53cml0ZUxlZnRJRChwYXJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3IudW5leHBlY3RlZENhc2UoKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnRTdWIgIT09IG51bGwpIHtcbiAgICAgICAgZW5jb2Rlci53cml0ZVN0cmluZyhwYXJlbnRTdWIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNvbnRlbnQud3JpdGUoZW5jb2Rlciwgb2Zmc2V0KTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7VXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyfSBkZWNvZGVyXG4gKiBAcGFyYW0ge251bWJlcn0gaW5mb1xuICovXG5jb25zdCByZWFkSXRlbUNvbnRlbnQgPSAoZGVjb2RlciwgaW5mbykgPT4gY29udGVudFJlZnNbaW5mbyAmIGJpbmFyeS5CSVRTNV0oZGVjb2Rlcik7XG5cbi8qKlxuICogQSBsb29rdXAgbWFwIGZvciByZWFkaW5nIEl0ZW0gY29udGVudC5cbiAqXG4gKiBAdHlwZSB7QXJyYXk8ZnVuY3Rpb24oVXBkYXRlRGVjb2RlclYxIHwgVXBkYXRlRGVjb2RlclYyKTpBYnN0cmFjdENvbnRlbnQ+fVxuICovXG5jb25zdCBjb250ZW50UmVmcyA9IFtcbiAgKCkgPT4geyBlcnJvci51bmV4cGVjdGVkQ2FzZSgpOyB9LCAvLyBHQyBpcyBub3QgSXRlbUNvbnRlbnRcbiAgcmVhZENvbnRlbnREZWxldGVkLCAvLyAxXG4gIHJlYWRDb250ZW50SlNPTiwgLy8gMlxuICByZWFkQ29udGVudEJpbmFyeSwgLy8gM1xuICByZWFkQ29udGVudFN0cmluZywgLy8gNFxuICByZWFkQ29udGVudEVtYmVkLCAvLyA1XG4gIHJlYWRDb250ZW50Rm9ybWF0LCAvLyA2XG4gIHJlYWRDb250ZW50VHlwZSwgLy8gN1xuICByZWFkQ29udGVudEFueSwgLy8gOFxuICByZWFkQ29udGVudERvYywgLy8gOVxuICAoKSA9PiB7IGVycm9yLnVuZXhwZWN0ZWRDYXNlKCk7IH0gLy8gMTAgLSBTa2lwIGlzIG5vdCBJdGVtQ29udGVudFxuXTtcblxuY29uc3Qgc3RydWN0U2tpcFJlZk51bWJlciA9IDEwO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFNraXAgZXh0ZW5kcyBBYnN0cmFjdFN0cnVjdCB7XG4gIGdldCBkZWxldGVkICgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZGVsZXRlICgpIHt9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U2tpcH0gcmlnaHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIG1lcmdlV2l0aCAocmlnaHQpIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciAhPT0gcmlnaHQuY29uc3RydWN0b3IpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCArPSByaWdodC5sZW5ndGg7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqL1xuICBpbnRlZ3JhdGUgKHRyYW5zYWN0aW9uLCBvZmZzZXQpIHtcbiAgICAvLyBza2lwIHN0cnVjdHMgY2Fubm90IGJlIGludGVncmF0ZWRcbiAgICBlcnJvci51bmV4cGVjdGVkQ2FzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBkYXRlRW5jb2RlclYxIHwgVXBkYXRlRW5jb2RlclYyfSBlbmNvZGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIHdyaXRlIChlbmNvZGVyLCBvZmZzZXQpIHtcbiAgICBlbmNvZGVyLndyaXRlSW5mbyhzdHJ1Y3RTa2lwUmVmTnVtYmVyKTtcbiAgICAvLyB3cml0ZSBhcyBWYXJVaW50IGJlY2F1c2UgU2tpcHMgY2FuJ3QgbWFrZSB1c2Ugb2YgcHJlZGljdGFibGUgbGVuZ3RoLWVuY29kaW5nXG4gICAgZW5jb2Rpbmcud3JpdGVWYXJVaW50KGVuY29kZXIucmVzdEVuY29kZXIsIHRoaXMubGVuZ3RoIC0gb2Zmc2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1N0cnVjdFN0b3JlfSBzdG9yZVxuICAgKiBAcmV0dXJuIHtudWxsIHwgbnVtYmVyfVxuICAgKi9cbiAgZ2V0TWlzc2luZyAodHJhbnNhY3Rpb24sIHN0b3JlKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG4vKiogZXNsaW50LWVudiBicm93c2VyICovXG5cbmNvbnN0IGdsbyA9IC8qKiBAdHlwZSB7YW55fSAqLyAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgPyB3aW5kb3dcbiAgLy8gQHRzLWlnbm9yZVxuICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge30pO1xuXG5jb25zdCBpbXBvcnRJZGVudGlmaWVyID0gJ19fICRZSlMkIF9fJztcblxuaWYgKGdsb1tpbXBvcnRJZGVudGlmaWVyXSA9PT0gdHJ1ZSkge1xuICAvKipcbiAgICogRGVhciByZWFkZXIgb2YgdGhpcyBtZXNzYWdlLiBQbGVhc2UgdGFrZSB0aGlzIHNlcmlvdXNseS5cbiAgICpcbiAgICogSWYgeW91IHNlZSB0aGlzIG1lc3NhZ2UsIG1ha2Ugc3VyZSB0aGF0IHlvdSBvbmx5IGltcG9ydCBvbmUgdmVyc2lvbiBvZiBZanMuIEluIG1hbnkgY2FzZXMsXG4gICAqIHlvdXIgcGFja2FnZSBtYW5hZ2VyIGluc3RhbGxzIHR3byB2ZXJzaW9ucyBvZiBZanMgdGhhdCBhcmUgdXNlZCBieSBkaWZmZXJlbnQgcGFja2FnZXMgd2l0aGluIHlvdXIgcHJvamVjdC5cbiAgICogQW5vdGhlciByZWFzb24gZm9yIHRoaXMgbWVzc2FnZSBpcyB0aGF0IHNvbWUgcGFydHMgb2YgeW91ciBwcm9qZWN0IHVzZSB0aGUgY29tbW9uanMgdmVyc2lvbiBvZiBZanNcbiAgICogYW5kIG90aGVycyB1c2UgdGhlIEVjbWFTY3JpcHQgdmVyc2lvbiBvZiBZanMuXG4gICAqXG4gICAqIFRoaXMgb2Z0ZW4gbGVhZHMgdG8gaXNzdWVzIHRoYXQgYXJlIGhhcmQgdG8gZGVidWcuIFdlIG9mdGVuIG5lZWQgdG8gcGVyZm9ybSBjb25zdHJ1Y3RvciBjaGVja3MsXG4gICAqIGUuZy4gYHN0cnVjdCBpbnN0YW5jZW9mIEdDYC4gSWYgeW91IGltcG9ydGVkIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiBZanMsIGl0IGlzIGltcG9zc2libGUgZm9yIHVzIHRvXG4gICAqIGRvIHRoZSBjb25zdHJ1Y3RvciBjaGVja3MgYW55bW9yZSAtIHdoaWNoIG1pZ2h0IGJyZWFrIHRoZSBDUkRUIGFsZ29yaXRobS5cbiAgICovXG4gIGNvbnNvbGUuZXJyb3IoJ1lqcyB3YXMgYWxyZWFkeSBpbXBvcnRlZC4gVGhpcyBicmVha3MgY29uc3RydWN0b3IgY2hlY2tzIGFuZCB3aWxsIGxlYWQgdG8gaXNzc3VlcyEnKTtcbn1cbmdsb1tpbXBvcnRJZGVudGlmaWVyXSA9IHRydWU7XG5cbmV4cG9ydCB7IEFic29sdXRlUG9zaXRpb24sIEFic3RyYWN0Q29ubmVjdG9yLCBBYnN0cmFjdFN0cnVjdCwgQWJzdHJhY3RUeXBlLCBZQXJyYXkgYXMgQXJyYXksIENvbnRlbnRBbnksIENvbnRlbnRCaW5hcnksIENvbnRlbnREZWxldGVkLCBDb250ZW50RW1iZWQsIENvbnRlbnRGb3JtYXQsIENvbnRlbnRKU09OLCBDb250ZW50U3RyaW5nLCBDb250ZW50VHlwZSwgRG9jLCBHQywgSUQsIEl0ZW0sIFlNYXAgYXMgTWFwLCBQZXJtYW5lbnRVc2VyRGF0YSwgUmVsYXRpdmVQb3NpdGlvbiwgU25hcHNob3QsIFlUZXh0IGFzIFRleHQsIFRyYW5zYWN0aW9uLCBVbmRvTWFuYWdlciwgVXBkYXRlRW5jb2RlclYxLCBZWG1sRWxlbWVudCBhcyBYbWxFbGVtZW50LCBZWG1sRnJhZ21lbnQgYXMgWG1sRnJhZ21lbnQsIFlYbWxIb29rIGFzIFhtbEhvb2ssIFlYbWxUZXh0IGFzIFhtbFRleHQsIFlBcnJheUV2ZW50LCBZRXZlbnQsIFlNYXBFdmVudCwgWVRleHRFdmVudCwgWVhtbEV2ZW50LCBhcHBseVVwZGF0ZSwgYXBwbHlVcGRhdGVWMiwgY2xlYW51cFlUZXh0Rm9ybWF0dGluZywgY29tcGFyZUlEcywgY29tcGFyZVJlbGF0aXZlUG9zaXRpb25zLCBjb252ZXJ0VXBkYXRlRm9ybWF0VjFUb1YyLCBjb252ZXJ0VXBkYXRlRm9ybWF0VjJUb1YxLCBjcmVhdGVBYnNvbHV0ZVBvc2l0aW9uRnJvbVJlbGF0aXZlUG9zaXRpb24sIGNyZWF0ZURlbGV0ZVNldCwgY3JlYXRlRGVsZXRlU2V0RnJvbVN0cnVjdFN0b3JlLCBjcmVhdGVEb2NGcm9tU25hcHNob3QsIGNyZWF0ZUlELCBjcmVhdGVSZWxhdGl2ZVBvc2l0aW9uRnJvbUpTT04sIGNyZWF0ZVJlbGF0aXZlUG9zaXRpb25Gcm9tVHlwZUluZGV4LCBjcmVhdGVTbmFwc2hvdCwgZGVjb2RlUmVsYXRpdmVQb3NpdGlvbiwgZGVjb2RlU25hcHNob3QsIGRlY29kZVNuYXBzaG90VjIsIGRlY29kZVN0YXRlVmVjdG9yLCBkZWNvZGVVcGRhdGUsIGRlY29kZVVwZGF0ZVYyLCBkaWZmVXBkYXRlLCBkaWZmVXBkYXRlVjIsIGVtcHR5U25hcHNob3QsIGVuY29kZVJlbGF0aXZlUG9zaXRpb24sIGVuY29kZVNuYXBzaG90LCBlbmNvZGVTbmFwc2hvdFYyLCBlbmNvZGVTdGF0ZUFzVXBkYXRlLCBlbmNvZGVTdGF0ZUFzVXBkYXRlVjIsIGVuY29kZVN0YXRlVmVjdG9yLCBlbmNvZGVTdGF0ZVZlY3RvckZyb21VcGRhdGUsIGVuY29kZVN0YXRlVmVjdG9yRnJvbVVwZGF0ZVYyLCBlcXVhbFNuYXBzaG90cywgZmluZEluZGV4U1MsIGZpbmRSb290VHlwZUtleSwgZ2V0SXRlbSwgZ2V0U3RhdGUsIGdldFR5cGVDaGlsZHJlbiwgaXNEZWxldGVkLCBpc1BhcmVudE9mLCBpdGVyYXRlRGVsZXRlZFN0cnVjdHMsIGxvZ1R5cGUsIGxvZ1VwZGF0ZSwgbG9nVXBkYXRlVjIsIG1lcmdlVXBkYXRlcywgbWVyZ2VVcGRhdGVzVjIsIHBhcnNlVXBkYXRlTWV0YSwgcGFyc2VVcGRhdGVNZXRhVjIsIHJlYWRVcGRhdGUsIHJlYWRVcGRhdGVWMiwgcmVsYXRpdmVQb3NpdGlvblRvSlNPTiwgc25hcHNob3QsIHRyYW5zYWN0LCB0cnlHYywgdHlwZUxpc3RUb0FycmF5U25hcHNob3QsIHR5cGVNYXBHZXRTbmFwc2hvdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9eWpzLm1qcy5tYXBcbiIsIi8qKlxuICogVXRpbGl0eSBoZWxwZXJzIHRvIHdvcmsgd2l0aCBwcm9taXNlcy5cbiAqXG4gKiBAbW9kdWxlIHByb21pc2VcbiAqL1xuXG5pbXBvcnQgKiBhcyB0aW1lIGZyb20gJy4vdGltZS5qcydcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQGNhbGxiYWNrIFByb21pc2VSZXNvbHZlXG4gKiBAcGFyYW0ge1R8UHJvbWlzZUxpa2U8VD59IFtyZXN1bHRdXG4gKi9cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihQcm9taXNlUmVzb2x2ZTxUPixmdW5jdGlvbihFcnJvcik6dm9pZCk6YW55fSBmXG4gKiBAcmV0dXJuIHtQcm9taXNlPFQ+fVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gZiA9PiAvKiogQHR5cGUge1Byb21pc2U8VD59ICovIChuZXcgUHJvbWlzZShmKSlcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGZ1bmN0aW9uKCk6dm9pZCxmdW5jdGlvbihFcnJvcik6dm9pZCk6dm9pZH0gZlxuICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUVtcHR5ID0gZiA9PiBuZXcgUHJvbWlzZShmKVxuXG4vKipcbiAqIGBQcm9taXNlLmFsbGAgd2FpdCBmb3IgYWxsIHByb21pc2VzIGluIHRoZSBhcnJheSB0byByZXNvbHZlIGFuZCByZXR1cm4gdGhlIHJlc3VsdFxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7QXJyYXk8UHJvbWlzZTxUPj59IGFycnBcbiAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk8VD4+fVxuICovXG5leHBvcnQgY29uc3QgYWxsID0gYXJycCA9PiBQcm9taXNlLmFsbChhcnJwKVxuXG4vKipcbiAqIEBwYXJhbSB7RXJyb3J9IFtyZWFzb25dXG4gKiBAcmV0dXJuIHtQcm9taXNlPG5ldmVyPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlamVjdCA9IHJlYXNvbiA9PiBQcm9taXNlLnJlamVjdChyZWFzb24pXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VHx2b2lkfSByZXNcbiAqIEByZXR1cm4ge1Byb21pc2U8VHx2b2lkPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlc29sdmUgPSByZXMgPT4gUHJvbWlzZS5yZXNvbHZlKHJlcylcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfSByZXNcbiAqIEByZXR1cm4ge1Byb21pc2U8VD59XG4gKi9cbmV4cG9ydCBjb25zdCByZXNvbHZlV2l0aCA9IHJlcyA9PiBQcm9taXNlLnJlc29sdmUocmVzKVxuXG4vKipcbiAqIEB0b2RvIE5leHQgdmVyc2lvbiwgcmVvcmRlciBwYXJhbWV0ZXJzOiBjaGVjaywgW3RpbWVvdXQsIFtpbnRlcnZhbFJlc29sdXRpb25dXVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6Ym9vbGVhbn0gY2hlY2tcbiAqIEBwYXJhbSB7bnVtYmVyfSBbaW50ZXJ2YWxSZXNvbHV0aW9uXVxuICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHVudGlsID0gKHRpbWVvdXQsIGNoZWNrLCBpbnRlcnZhbFJlc29sdXRpb24gPSAxMCkgPT4gY3JlYXRlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gdGltZS5nZXRVbml4VGltZSgpXG4gIGNvbnN0IGhhc1RpbWVvdXQgPSB0aW1lb3V0ID4gMFxuICBjb25zdCB1bnRpbEludGVydmFsID0gKCkgPT4ge1xuICAgIGlmIChjaGVjaygpKSB7XG4gICAgICBjbGVhckludGVydmFsKGludGVydmFsSGFuZGxlKVxuICAgICAgcmVzb2x2ZSgpXG4gICAgfSBlbHNlIGlmIChoYXNUaW1lb3V0KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHRpbWUuZ2V0VW5peFRpbWUoKSAtIHN0YXJ0VGltZSA+IHRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbEhhbmRsZSlcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignVGltZW91dCcpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBpbnRlcnZhbEhhbmRsZSA9IHNldEludGVydmFsKHVudGlsSW50ZXJ2YWwsIGludGVydmFsUmVzb2x1dGlvbilcbn0pXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRcbiAqIEByZXR1cm4ge1Byb21pc2U8dW5kZWZpbmVkPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHdhaXQgPSB0aW1lb3V0ID0+IGNyZWF0ZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQpKVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBvYmplY3QgaXMgYSBwcm9taXNlIHVzaW5nIGR1Y2t0eXBpbmcuXG4gKlxuICogUHJvbWlzZXMgYXJlIG9mdGVuIHBvbHlmaWxsZWQsIHNvIGl0IG1ha2VzIHNlbnNlIHRvIGFkZCBzb21lIGFkZGl0aW9uYWwgZ3VhcmFudGVlcyBpZiB0aGUgdXNlciBvZiB0aGlzXG4gKiBsaWJyYXJ5IGhhcyBzb21lIGluc2FuZSBlbnZpcm9ubWVudCB3aGVyZSBnbG9iYWwgUHJvbWlzZSBvYmplY3RzIGFyZSBvdmVyd3JpdHRlbi5cbiAqXG4gKiBAcGFyYW0ge2FueX0gcFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzUHJvbWlzZSA9IHAgPT4gcCBpbnN0YW5jZW9mIFByb21pc2UgfHwgKHAgJiYgcC50aGVuICYmIHAuY2F0Y2ggJiYgcC5maW5hbGx5KVxuIiwiaW1wb3J0IHsgcmVhZEJ1aWxkZXJQcm9ncmFtLCByZXNvbHZlTW9kdWxlTmFtZSB9IGZyb20gXCJ0eXBlc2NyaXB0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwaXBlPFQ+KCk6IFtSZWFkYWJsZVdyaXRhYmxlUGFpcjxULCBUPiwgUmVhZGFibGVXcml0YWJsZVBhaXI8VCwgVD5dIHtcbiAgbGV0IGxlZnRfdG9fcmlnaHQgPSBuZXcgVHJhbnNmb3JtU3RyZWFtKCk7XG4gIGxldCByaWdodF90b19sZWZ0ID0gbmV3IFRyYW5zZm9ybVN0cmVhbSgpO1xuXG4gIHJldHVybiBbXG4gICAge1xuICAgICAgcmVhZGFibGU6IHJpZ2h0X3RvX2xlZnQucmVhZGFibGUsXG4gICAgICB3cml0YWJsZTogbGVmdF90b19yaWdodC53cml0YWJsZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlYWRhYmxlOiBsZWZ0X3RvX3JpZ2h0LnJlYWRhYmxlLFxuICAgICAgd3JpdGFibGU6IHJpZ2h0X3RvX2xlZnQud3JpdGFibGUsXG4gICAgfSxcbiAgXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlcl9jaHVua3MoYjogQmxvYiwgc2l6ZTogbnVtYmVyKTogUmVhZGFibGVTdHJlYW08VWludDhBcnJheT4ge1xuICBsZXQgaSA9IDA7XG4gIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oXG4gICAge1xuICAgICAgYXN5bmMgcHVsbChjb250cm9sbGVyKSB7XG4gICAgICAgIGlmIChpID49IGIuc2l6ZSkgcmV0dXJuIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUobmV3IFVpbnQ4QXJyYXkoYXdhaXQgYi5zbGljZShpLCBNYXRoLm1pbihpICsgc2l6ZSwgYi5zaXplKSkuYXJyYXlCdWZmZXIoKSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciBlbnF1ZXVlIHNsaWNlXCIsIGUpO1xuICAgICAgICB9XG4gICAgICAgIGkgKz0gc2l6ZTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBuZXcgQ291bnRRdWV1aW5nU3RyYXRlZ3koeyBoaWdoV2F0ZXJNYXJrOiA1IH0pXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb2xsZWN0X2Jsb2IoczogUmVhZGFibGVTdHJlYW08QXJyYXlCdWZmZXI+LCB0eXBlPzogc3RyaW5nKTogUHJvbWlzZTxCbG9iPiB7XG4gIGxldCBidWZmZXIgPSBbXSBhcyBBcnJheUJ1ZmZlcltdO1xuICBjb25zb2xlLmxvZyhcImNvbGxlY3RpbiBibG9iXCIpO1xuICBhd2FpdCBjb25zdW1lKHMsIChjaHVuaykgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiQ0hVTks/XCIpO1xuICAgIGJ1ZmZlci5wdXNoKGNodW5rIGFzIGFueSk7XG4gIH0pO1xuICBjb25zb2xlLmxvZyhcImdvdCBhbGwgYnl0ZXNcIik7XG5cbiAgcmV0dXJuIG5ldyBCbG9iKGJ1ZmZlciwgeyB0eXBlIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24qIGl0ZXI8Uj4ocjogUmVhZGFibGVTdHJlYW08Uj4pOiBBc3luY0l0ZXJhYmxlPFI+IHtcbiAgbGV0IGRvbmUsXG4gICAgdmFsdWUsXG4gICAgcmVhZGVyID0gci5nZXRSZWFkZXIoKTtcblxuICB3aGlsZSAoKHsgZG9uZSwgdmFsdWUgfSA9IGF3YWl0IHJlYWRlci5yZWFkKCkpICYmICFkb25lKSB7XG4gICAgeWllbGQgdmFsdWUhO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25zdW1lPFI+KHI6IFJlYWRhYmxlU3RyZWFtPFI+LCB3cml0ZTogKGNodW5rOiBSKSA9PiBhbnksIHNpZ25hbD86IEFib3J0U2lnbmFsKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiByLnBpcGVUbyhuZXcgV3JpdGFibGVTdHJlYW0oeyB3cml0ZSB9KSwgeyBzaWduYWwgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqc29uPFQ+KHI6IFJlYWRhYmxlV3JpdGFibGVQYWlyPHN0cmluZywgc3RyaW5nPik6IFJlYWRhYmxlV3JpdGFibGVQYWlyPFQsIFQ+IHtcbiAgbGV0IGVuY29kZSA9IG5ldyBUcmFuc2Zvcm1TdHJlYW08VCwgc3RyaW5nPih7XG4gICAgdHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG4gICAgICBjb250cm9sbGVyLmVucXVldWUoSlNPTi5zdHJpbmdpZnkoY2h1bmspKTtcbiAgICB9LFxuICB9KTtcbiAgZW5jb2RlLnJlYWRhYmxlLnBpcGVUbyhyLndyaXRhYmxlKTtcblxuICByZXR1cm4ge1xuICAgIHJlYWRhYmxlOiByLnJlYWRhYmxlLnBpcGVUaHJvdWdoKFxuICAgICAgbmV3IFRyYW5zZm9ybVN0cmVhbTxzdHJpbmcsIFQ+KHtcbiAgICAgICAgdHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG4gICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKEpTT04ucGFyc2UoY2h1bmspKTtcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKSxcblxuICAgIHdyaXRhYmxlOiBlbmNvZGUud3JpdGFibGUsXG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIFN0YXR1cyA9IFwiY29ubmVjdGVkXCIgfCBcImNvbm5lY3RpbmdcIiB8IFwiY2xvc2VkXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWJvcnRhYmxlU3RyZWFtPFIsIFc+IGV4dGVuZHMgUmVhZGFibGVXcml0YWJsZVBhaXI8UiwgVz4ge1xuICBhYm9ydCgpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gcGlwKCk6IFJlYWRhYmxlV3JpdGFibGVQYWlyPGFueSwgYW55PiB7XG4vLyAgIGxldCByZWFkZXI7XG4vLyAgIGxldCB3cml0ZXI7XG4vLyAgIGxldCBjb250cm9sbGVyOiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyO1xuLy8gICByZWFkZXIgPSBuZXcgUmVhZGFibGVTdHJlYW0oe1xuLy8gICAgIHN0YXJ0KGNvbnRyb2xsZXIpIHtjb250cm9sbGVyID0gY29udHJvbGxlcn1cbi8vICAgfSk7XG4vLyAgIHdyaXRlciA9IG5ldyBXcml0YWJsZVN0cmVhbSh7XG4vLyAgICAgd3JpdGUoY2h1bmspIHtcbi8vICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZVxuLy8gICAgIH1cbi8vICAgfSlcbi8vIH1cblxuLy8gLyoqXG4vLyAgKiBDcmVhdGVzIGEgYSBzdGFibGUgc3RyZWFtIGJ5IHJlcHJvZHVjaW5nIGFuIHVuZGVybHlpbmcgc3RyZWFtIHdoZW5ldmVyIGl0IGNsb3Nlc1xuLy8gICogQHBhcmFtIGJ1aWxkZXIgdGhlIGNvbnN0cnVjdG9yIGZvciB0aGUgdW5kZXJseWluZyBzdHJlYW1cbi8vICAqIEByZXR1cm5zIEEgc3RyZWFtXG4vLyAgKi9cbi8vIGV4cG9ydCBmdW5jdGlvbiBkdXJhYmxlPFIsIFc+KGJ1aWxkZXI6ICgpID0+IFByb21pc2U8UmVhZGFibGVXcml0YWJsZVBhaXI8UiwgVz4+KTogUmVhZGFibGVXcml0YWJsZVBhaXI8UiwgVz4ge1xuLy8gICBsZXQgdW5kZXJseWluZzogUHJvbWlzZTx7XG4vLyAgICAgd3JpdGVyOiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIsXG4vLyAgICAgcmVhZGVyOiBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIsXG4vLyAgIH0+XG5cbi8vICAgbGV0IHRpbWVvdXQ6IFByb21pc2U8dm9pZD4gPSBQcm9taXNlLnJlc29sdmUoKTtcbi8vICAgbGV0IG5vYnVmZmVyID0gbmV3IENvdW50UXVldWluZ1N0cmF0ZWd5KHtoaWdoV2F0ZXJNYXJrOiAwfSk7XG4vLyAgIGxldCBsb2FkaW5nID0gZmFsc2U7XG4vLyAgIGxldCByZWxvYWQgPSAoKSA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coJ3JlcXVlc3RpbmcgYSByZWxvYWQnKTtcbi8vICAgICBpZiAobG9hZGluZykgeyByZXR1cm47IH1cbi8vICAgICBjb25zb2xlLmxvZygncGVyZm9ybWluZyBhIHJlbG9hZCcpO1xuLy8gICAgIGxvYWRpbmcgPSB0cnVlO1xuLy8gICAgIHVuZGVybHlpbmc/LnRoZW4odSA9PiB7XG4vLyAgICAgICB1LnJlYWRlci5jbG9zZWQgfHwgdS5yZWFkZXIuY2FuY2VsKFwiUmVzdGFydGluZyBzdHJlYW1cIik7XG4vLyAgICAgICB1LndyaXRlci5jbG9zZWQgfHwgdS53cml0ZXIuY2xvc2UoKTtcbi8vICAgICB9KVxuXG4vLyAgICAgdW5kZXJseWluZyA9IHRpbWVvdXQudGhlbigoKSA9PiBidWlsZGVyKCkpLnRoZW4oKHtyZWFkYWJsZSwgd3JpdGFibGV9KSA9PiAoe1xuLy8gICAgICAgcmVhZGVyOiByZWFkYWJsZS5nZXRSZWFkZXIoKSxcbi8vICAgICAgIHdyaXRlcjogd3JpdGFibGUuZ2V0V3JpdGVyKCksXG4vLyAgICAgfSkpXG4vLyAgICAgdGltZW91dCA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4vLyAgICAgdW5kZXJseWluZy5maW5hbGx5KCgpID0+IGxvYWRpbmcgPSBmYWxzZSk7XG4vLyAgIH1cblxuLy8gICByZWxvYWQoKTtcblxuLy8gICBsZXQgd3JpdGFibGUgPSBuZXcgV3JpdGFibGVTdHJlYW0oe1xuLy8gICAgIGFzeW5jIHdyaXRlKGNodW5rKSB7XG4vLyAgICAgICB3aGlsZSh0cnVlKSB7XG4vLyAgICAgICAgIHRyeSB7XG4vLyAgICAgICAgICAgY29uc29sZS5sb2coXCJXUklUSU5HIENIVU5LXCIsIGNodW5rKTtcbi8vICAgICAgICAgICBhd2FpdCAoKGF3YWl0IHVuZGVybHlpbmcpLndyaXRlcikud3JpdGUoY2h1bmspO1xuLy8gICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ0hVTksgV1JJVFRFTlwiKTtcbi8vICAgICAgICAgICByZXR1cm47XG4vLyAgICAgICAgIH0gY2F0Y2ggKGUpe1xuLy8gICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB3cml0aW5nOiBcIiwgZSwgXCIuLi4gcmVsb2FkaW5nXCIpO1xuLy8gICAgICAgICAgIHJlbG9hZCgpO1xuLy8gICAgICAgICB9XG4vLyAgICAgICB9XG4vLyAgICAgfSxcbi8vICAgICBhc3luYyBhYm9ydChyZWFzb24pIHtcbi8vICAgICAgIGNvbnNvbGUubG9nKFwid3JpdGFibGUgYWJvcnRlZFwiKTs7XG4vLyAgICAgICB0cnkge1xuLy8gICAgICAgICBhd2FpdCAoKGF3YWl0IHVuZGVybHlpbmcpLndyaXRlcikuYWJvcnQocmVhc29uKTtcblxuLy8gICAgICAgfSBjYXRjaCB7fVxuLy8gICAgIH0sXG5cbi8vICAgICBhc3luYyBjbG9zZSgpIHtcbi8vICAgICAgIGNvbnNvbGUubG9nKFwid3JpdGFibGUgY2xvc2VkXCIpOztcbi8vICAgICAgIHRyeSB7XG4vLyAgICAgICAgIGF3YWl0ICgoYXdhaXQgdW5kZXJseWluZykud3JpdGVyKS5jbG9zZSgpO1xuLy8gICAgICAgfSBjYXRjaCB7fVxuLy8gICAgIH1cbi8vICAgfSwgbm9idWZmZXIpXG5cbi8vICAgbGV0IGNhbmNlbGVkID0gZmFsc2U7XG4vLyAgIGxldCByZWFkYWJsZSA9IG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4vLyAgICAgYXN5bmMgcHVsbChjb250cm9sbGVyKSB7XG4vLyAgICAgICB3aGlsZSghY2FuY2VsZWQpIHtcbi8vICAgICAgICAgdHJ5IHtcbi8vICAgICAgICAgICBsZXQge2RvbmUsIHZhbHVlfSA9IGF3YWl0ICgoYXdhaXQgdW5kZXJseWluZykucmVhZGVyKS5yZWFkKCk7XG4vLyAgICAgICAgICAgaWYgKCFkb25lKSB7XG4vLyAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUodmFsdWUpO1xuLy8gICAgICAgICAgICAgcmV0dXJuO1xuLy8gICAgICAgICAgIH1cbi8vICAgICAgICAgfSBjYXRjaCB7fVxuXG4vLyAgICAgICAgIHJlbG9hZCgpO1xuLy8gICAgICAgfVxuLy8gICAgIH0sXG5cbi8vICAgICBhc3luYyBjYW5jZWwocmVhc29uKSB7XG4vLyAgICAgICBjYW5jZWxlZCA9IHRydWU7XG4vLyAgICAgICBjb25zb2xlLmxvZyhcInJlYWRhYmxlIGNhbmNlbGVkXCIpO1xuLy8gICAgICAgdHJ5IHtcbi8vICAgICAgICAgYXdhaXQgKChhd2FpdCB1bmRlcmx5aW5nKS5yZWFkZXIpLmNhbmNlbChyZWFzb24pO1xuLy8gICAgICAgfSBjYXRjaCB7fVxuLy8gICAgIH1cbi8vICAgfSwgbm9idWZmZXIpO1xuXG4vLyAgIHJldHVybiB7XG4vLyAgICAgcmVhZGFibGUsXG4vLyAgICAgd3JpdGFibGUsXG4vLyAgIH07XG4vLyB9XG4iLCJpbXBvcnQgeyBEb2MsIE1hcCwgQXJyYXkgfSBmcm9tIFwieWpzXCI7XG5pbXBvcnQgeyBQZWVySWQgfSBmcm9tIFwiLi4vbmV0L3J0Yy9zaWduYWxlclwiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIi4uL3V0aWwvZXZlbnRzXCI7XG5pbXBvcnQgeyBMb2NhbE9yUmVtb3RlSW1hZ2UgfSBmcm9tIFwiLi4vdXRpbC9maWxlc1wiO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiLi4vdXRpbC9tYXRoXCI7XG5pbXBvcnQgeyBjb25zdW1lIH0gZnJvbSBcIi4uL3V0aWwvc3RyZWFtc1wiO1xuaW1wb3J0IHsgVHlwZWRNYXAsIHR5cGVkX21hcCB9IGZyb20gXCIuLi91dGlsL3lqc1wiO1xuaW1wb3J0IHsgR2FtZUV2ZW50LCBnYW1lX2V2ZW50LCBUb2tlbkRhdGEgfSBmcm9tIFwiLi9nYW1lLWV2ZW50c1wiO1xuaW1wb3J0IHsgZGVmYXVsdF90YWJsZXRvcCB9IGZyb20gXCIuL3RhYmxldG9wXCI7XG5cbmNvbnN0IENBTExPVVRfVElNRVIgPSAxNTAwO1xuXG50eXBlIEV2ZW50TWFwID0ge1xuICBcImdhbWUtZXZlbnRcIjogQ3VzdG9tRXZlbnQ8R2FtZUV2ZW50Pjtcbn07XG5cbmV4cG9ydCB0eXBlIEJvYXJkID0gVHlwZWRNYXA8e1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgYmc6IHN0cmluZyB8IG51bGw7XG4gIHRva2VuczogTWFwPFR5cGVkTWFwPFRva2VuRGF0YT4+O1xuICBvcmRlcjogQXJyYXk8c3RyaW5nPjtcbn0+O1xuXG5leHBvcnQgY2xhc3MgR2FtZSBleHRlbmRzIEV2ZW50VGFyZ2V0IGltcGxlbWVudHMgRXZlbnRFbWl0dGVyPEV2ZW50TWFwPiB7XG4gIGRvYzogRG9jO1xuICBjYWxsb3V0cyA9IG5ldyBTZXQ8UG9pbnQ+KCk7XG5cbiAgZ2V0IGJvYXJkKCk6IEJvYXJkIHtcbiAgICBsZXQgYiA9IHRoaXMuZG9jLmdldE1hcChcImJvYXJkXCIpO1xuICAgIHJldHVybiBiIGFzIGFueTtcbiAgfVxuXG4gICNldmVudF93cml0ZXI6IFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcjxHYW1lRXZlbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmRvYyA9IG5ldyBEb2MoKTtcblxuICAgIC8vIFVzZSBhIHN0cmVhbSBzbyB0aGF0IGdhbWUgZXZlbnQgcHJvY2Vzc2luZyBpcyBhbGxvd2VkIHRvIGJlIGFzeW5jXG4gICAgLy8gYnV0IHJlbWFpbnMgb3JkZXJlZC5cbiAgICBjb25zdCBldmVudHMgPSBuZXcgVHJhbnNmb3JtU3RyZWFtPEdhbWVFdmVudCwgR2FtZUV2ZW50PigpO1xuICAgIHRoaXMuI2V2ZW50X3dyaXRlciA9IGV2ZW50cy53cml0YWJsZS5nZXRXcml0ZXIoKTtcblxuICAgIGNvbnN1bWUoZXZlbnRzLnJlYWRhYmxlLCAoZXYpID0+IHRoaXMuI2hhbmRsZV9ldmVudChldikpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZV9ib2FyZCgpIHtcbiAgICB0aGlzLmRvYy50cmFuc2FjdCgoKSA9PiB7XG4gICAgICB0aGlzLmJvYXJkLnNldChcIndpZHRoXCIsIDMwKTtcbiAgICAgIHRoaXMuYm9hcmQuc2V0KFwiaGVpZ2h0XCIsIDMwKTtcbiAgICAgIHRoaXMuYm9hcmQuc2V0KFwiYmdcIiwgbnVsbCk7XG4gICAgICB0aGlzLmJvYXJkLnNldChcInRva2Vuc1wiLCBuZXcgTWFwKCkpO1xuICAgICAgdGhpcy5ib2FyZC5zZXQoXCJvcmRlclwiLCBuZXcgQXJyYXk8c3RyaW5nPigpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHNldF9iZyhpbWc6IExvY2FsT3JSZW1vdGVJbWFnZSB8IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHVybCA9IGltZyA/IGF3YWl0IHRoaXMuI3JlZ2lzdGVyX3Jlc291cmNlKGltZykgOiBudWxsO1xuICAgIHRoaXMuYXBwbHkoe1xuICAgICAgdHlwZTogXCJiZ1wiLFxuICAgICAgdXJsLFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgYWRkX3Rva2VuKGltZzogTG9jYWxPclJlbW90ZUltYWdlLCB0OiBPbWl0PFRva2VuRGF0YSwgXCJ1cmxcIiB8IFwiaWRcIj4pIHtcbiAgICBjb25zdCBpZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgY29uc3QgdXJsID0gYXdhaXQgdGhpcy4jcmVnaXN0ZXJfcmVzb3VyY2UoaW1nKTtcbiAgICBjb25zdCB0b2tlbiA9IHtcbiAgICAgIGlkLFxuICAgICAgdXJsLFxuICAgICAgLi4udCxcbiAgICB9O1xuXG4gICAgdGhpcy5hcHBseSh7XG4gICAgICB0eXBlOiBcInRva2VuLWFkZGVkXCIsXG4gICAgICAuLi50b2tlbixcbiAgICB9KTtcbiAgfVxuXG4gIHNldF9kaW0oZGltOiBQb2ludCkge1xuICAgIHRoaXMuYXBwbHkoe1xuICAgICAgdHlwZTogXCJncmlkLXJlc2l6ZWRcIixcbiAgICAgIGRpbSxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGFwcGx5KGV2OiBHYW1lRXZlbnQpIHtcbiAgICBhd2FpdCB0aGlzLiNldmVudF93cml0ZXIud3JpdGUoZXYpO1xuICB9XG5cbiAgI2hhbmRsZV9ldmVudChldjogR2FtZUV2ZW50KTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coXCJoYW5kbGluZyBldmVudFwiLCBldik7XG4gICAgdGhpcy5kb2MudHJhbnNhY3QoKCkgPT4ge1xuICAgICAgc3dpdGNoIChldi50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJ0b2tlbi1tYW5pcHVsYXRlZFwiOlxuICAgICAgICAgIGZvciAobGV0IHQgb2YgZXYudG9rZW5zKSB7XG4gICAgICAgICAgICBsZXQgdG9rZW4gPSB0aGlzLmJvYXJkLmdldChcInRva2Vuc1wiKS5nZXQodC5pZCk7XG4gICAgICAgICAgICBpZiAodG9rZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVXBkYXRlIHJlY2VpdmVkIGZvciBub25leGlzdGFudCB0b2tlblwiLCB0LmlkKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b2tlbi5zZXQoXCJkaW1cIiwgdC5kaW0pO1xuICAgICAgICAgICAgdG9rZW4uc2V0KFwiclwiLCB0LnIpO1xuICAgICAgICAgICAgdG9rZW4uc2V0KFwibG9jXCIsIHQubG9jKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInRva2VuLWFkZGVkXCI6XG4gICAgICAgICAgbGV0IHRva2VuID0geyBpZDogZXYuaWQsIGRpbTogZXYuZGltLCBsb2M6IGV2LmxvYywgdXJsOiBldi51cmwsIHI6IDAgfTtcbiAgICAgICAgICBjb25zb2xlLmxvZyh0b2tlbik7XG4gICAgICAgICAgdGhpcy5ib2FyZC5nZXQoXCJ0b2tlbnNcIikuc2V0KGV2LmlkLCB0eXBlZF9tYXAodG9rZW4pKTtcbiAgICAgICAgICB0aGlzLmJvYXJkLmdldChcIm9yZGVyXCIpLnB1c2goW2V2LmlkXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJncmlkLXJlc2l6ZWRcIjpcbiAgICAgICAgICB0aGlzLmJvYXJkLnNldChcIndpZHRoXCIsIGV2LmRpbVswXSk7XG4gICAgICAgICAgdGhpcy5ib2FyZC5zZXQoXCJoZWlnaHRcIiwgZXYuZGltWzFdKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwidG9rZW4tcmVtb3ZlZFwiOlxuICAgICAgICAgIGZvciAobGV0IGlkIG9mIGV2Lmlkcykge1xuICAgICAgICAgICAgdGhpcy5ib2FyZC5nZXQoXCJ0b2tlbnNcIikuZGVsZXRlKGlkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXQgaW5kaWNlczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgICB0aGlzLmJvYXJkLmdldChcIm9yZGVyXCIpLmZvckVhY2goKGlkLCBpZHgpID0+IGV2Lmlkcy5pbmNsdWRlcyhpZCkgJiYgaW5kaWNlcy5wdXNoKGlkeCkpO1xuICAgICAgICAgIGluZGljZXNcbiAgICAgICAgICAgIC5zb3J0KClcbiAgICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAgIC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuYm9hcmQuZ2V0KFwib3JkZXJcIikuZGVsZXRlKGkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdGF0ZS1zeW5jXCI6XG4gICAgICAgICAgLy8gdGhpcy50YWJsZXRvcCA9IGRlc2VyaWFsaXplX3RidChldi50YWJsZXRvcCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInRva2VuLXJlb3JkZXJcIjpcbiAgICAgICAgICAvLyBjb25zdCBpZHggPSB0aGlzLnRhYmxldG9wLnRva2Vucy5pbmRleChldi5pZCk7XG4gICAgICAgICAgLy8gaWYgKGlkeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gICBjb25zb2xlLmVycm9yKFwiVHJpZWQgdG8gcmVvcmRlciBub24tZXhpc3RhbnQgdG9rZW5cIiwgZXYuaWQpO1xuICAgICAgICAgIC8vICAgcmV0dXJuO1xuICAgICAgICAgIC8vIH1cblxuICAgICAgICAgIC8vIGxldCB0YXJnZXQ7XG4gICAgICAgICAgLy8gaWYgKGV2LmlkeCA9PT0gXCJ0b3BcIikge1xuICAgICAgICAgIC8vICAgdGFyZ2V0ID0gdGhpcy50YWJsZXRvcC50b2tlbnMuc2l6ZSAtIDE7XG4gICAgICAgICAgLy8gfSBlbHNlIGlmIChldi5pZHggPT09IFwiYm90dG9tXCIpIHtcbiAgICAgICAgICAvLyAgIHRhcmdldCA9IDA7XG4gICAgICAgICAgLy8gfSBlbHNlIGlmIChldi5pZHggPT09IFwidXBcIikge1xuICAgICAgICAgIC8vICAgdGFyZ2V0ID0gTWF0aC5taW4odGhpcy50YWJsZXRvcC50b2tlbnMuc2l6ZSAtIDEsIGlkeCArIDEpO1xuICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgLy8gICB0YXJnZXQgPSBNYXRoLm1heCgwLCBpZHggLSAxKTtcbiAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAvLyB0aGlzLnRhYmxldG9wLnRva2Vucy5zZXRfaW5kZXgoZXYuaWQsIHRhcmdldCk7XG4gICAgICAgICAgLy8gYnJlYWs7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJiZ1wiOlxuICAgICAgICAgIHRoaXMuYm9hcmQuc2V0KFwiYmdcIiwgZXYudXJsKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiY2FsbG91dFwiOlxuICAgICAgICAgIHRoaXMuY2FsbG91dHMuYWRkKGV2LmxvYyk7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhbGxvdXRzLmRlbGV0ZShldi5sb2MpO1xuICAgICAgICAgIH0sIENBTExPVVRfVElNRVIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgI3JlZ2lzdGVyX3Jlc291cmNlKGltZzogTG9jYWxPclJlbW90ZUltYWdlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvLyBVUkxzIGFyZSB2YWxpZCByZXNvdXJjZXNcbiAgICBpZiAodHlwZW9mIGltZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIGltZyBhcyBzdHJpbmc7XG4gICAgfVxuXG4gICAgbGV0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkpO1xuICAgIHVybC5zZWFyY2ggPSBcIlwiO1xuICAgIGxldCBoYXNoID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJTSEEtMVwiLCBhd2FpdCBpbWcuYXJyYXlCdWZmZXIoKSk7XG4gICAgbGV0IGlkID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLm5ldyBVaW50OEFycmF5KGhhc2gpKSk7XG4gICAgY29uc29sZS5sb2coXCJSRVNPVVJDRSBJRDogXCIsIGlkKTtcbiAgICB1cmwucGF0aG5hbWUgPSBgL3Jlc291cmNlcy8ke2lkfWA7XG4gICAgbGV0IGNhY2hlID0gYXdhaXQgY2FjaGVzLm9wZW4oXCJyZXNvdXJjZXNcIik7XG4gICAgYXdhaXQgY2FjaGUucHV0KHVybCwgbmV3IFJlc3BvbnNlKGltZykpO1xuICAgIHJldHVybiB1cmwudG9TdHJpbmcoKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdhbWUgZXh0ZW5kcyBFdmVudFRhcmdldCB7XG4gIGFkZEV2ZW50TGlzdGVuZXIodHlwZTogXCJnYW1lLWV2ZW50XCIsIGxpc3RlbmVyOiAoZXY6IEN1c3RvbUV2ZW50PEdhbWVFdmVudD4pID0+IGFueSwgY2FwdHVyZT86IGJvb2xlYW4pOiB2b2lkO1xuICBhZGRFdmVudExpc3RlbmVyKHR5cGU6IHN0cmluZywgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXIgfCBFdmVudExpc3RlbmVyT2JqZWN0LCB1c2VDYXB0dXJlPzogYm9vbGVhbik6IHZvaWQ7XG59XG4iLCJpbXBvcnQgeyBNYXAgfSBmcm9tIFwieWpzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHlwZWRNYXA8U2hhcGU+IHtcbiAgc2l6ZTogbnVtYmVyO1xuICBnZXQ8SyBleHRlbmRzIGtleW9mIFNoYXBlICYgc3RyaW5nPihrOiBLKTogU2hhcGVbS107XG4gIHNldDxLIGV4dGVuZHMga2V5b2YgU2hhcGUgJiBzdHJpbmc+KGs6IEssIHY6IFNoYXBlW0tdKTogdm9pZDtcbiAga2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPGtleW9mIFNoYXBlPjtcbiAgdmFsdWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8U2hhcGVba2V5b2YgU2hhcGVdPjtcbiAgZGVsZXRlPEsgZXh0ZW5kcyBrZXlvZiBTaGFwZSAmIHN0cmluZz4oazogSyk6IHZvaWQ7XG4gIGZvckVhY2goZjogKGFyZzA6IFNoYXBlW2tleW9mIFNoYXBlXSwgYXJnMToga2V5b2YgU2hhcGUsIGFyZzI6IFR5cGVkTWFwPFNoYXBlPikgPT4gdm9pZCk6IFNoYXBlO1xuICBoYXMoa2V5OiBrZXlvZiBTaGFwZSk6IGJvb2xlYW47XG4gIGNsZWFyKCk6IHZvaWQ7XG4gIGNsb25lKCk6IFR5cGVkTWFwPFNoYXBlPjtcbiAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxFbnRyaWVzPFNoYXBlPj47XG59XG5cbnR5cGUgRW50cmllczxUPiA9IHtcbiAgW0sgaW4ga2V5b2YgVF06IFtLLCBUW0tdXTtcbn1ba2V5b2YgVF1bXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHR5cGVkX21hcDxTaGFwZT4oczogU2hhcGUpOiBUeXBlZE1hcDxTaGFwZT4ge1xuICBsZXQgeCA9IG5ldyBNYXAoKTtcbiAgZm9yIChsZXQgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHMpKSB7XG4gICAgeC5zZXQoaywgdik7XG4gIH1cbiAgcmV0dXJuIHggYXMgYW55O1xufVxuIiwiaW1wb3J0e25vdGhpbmcgYXMgdH1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3QgbD1sPT5udWxsIT1sP2w6dDtleHBvcnR7bCBhcyBpZkRlZmluZWR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWYtZGVmaW5lZC5qcy5tYXBcbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRpbnkgd2Vic29ja2V0IGNvbm5lY3Rpb24gaGFuZGxlci5cbiAqXG4gKiBJbXBsZW1lbnRzIGV4cG9uZW50aWFsIGJhY2tvZmYgcmVjb25uZWN0cywgcGluZy9wb25nLCBhbmQgYSBuaWNlIGV2ZW50IHN5c3RlbSB1c2luZyBbbGliMC9vYnNlcnZhYmxlXS5cbiAqXG4gKiBAbW9kdWxlIHdlYnNvY2tldFxuICovXG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuL29ic2VydmFibGUuanMnXG5pbXBvcnQgKiBhcyB0aW1lIGZyb20gJy4vdGltZS5qcydcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi9tYXRoLmpzJ1xuXG5jb25zdCByZWNvbm5lY3RUaW1lb3V0QmFzZSA9IDEyMDBcbmNvbnN0IG1heFJlY29ubmVjdFRpbWVvdXQgPSAyNTAwXG4vLyBAdG9kbyAtIHRoaXMgc2hvdWxkIGRlcGVuZCBvbiBhd2FyZW5lc3Mub3V0ZGF0ZWRUaW1lXG5jb25zdCBtZXNzYWdlUmVjb25uZWN0VGltZW91dCA9IDMwMDAwXG5cbi8qKlxuICogQHBhcmFtIHtXZWJzb2NrZXRDbGllbnR9IHdzY2xpZW50XG4gKi9cbmNvbnN0IHNldHVwV1MgPSAod3NjbGllbnQpID0+IHtcbiAgaWYgKHdzY2xpZW50LnNob3VsZENvbm5lY3QgJiYgd3NjbGllbnQud3MgPT09IG51bGwpIHtcbiAgICBjb25zdCB3ZWJzb2NrZXQgPSBuZXcgV2ViU29ja2V0KHdzY2xpZW50LnVybClcbiAgICBjb25zdCBiaW5hcnlUeXBlID0gd3NjbGllbnQuYmluYXJ5VHlwZVxuICAgIC8qKlxuICAgICAqIEB0eXBlIHthbnl9XG4gICAgICovXG4gICAgbGV0IHBpbmdUaW1lb3V0ID0gbnVsbFxuICAgIGlmIChiaW5hcnlUeXBlKSB7XG4gICAgICB3ZWJzb2NrZXQuYmluYXJ5VHlwZSA9IGJpbmFyeVR5cGVcbiAgICB9XG4gICAgd3NjbGllbnQud3MgPSB3ZWJzb2NrZXRcbiAgICB3c2NsaWVudC5jb25uZWN0aW5nID0gdHJ1ZVxuICAgIHdzY2xpZW50LmNvbm5lY3RlZCA9IGZhbHNlXG4gICAgd2Vic29ja2V0Lm9ubWVzc2FnZSA9IGV2ZW50ID0+IHtcbiAgICAgIHdzY2xpZW50Lmxhc3RNZXNzYWdlUmVjZWl2ZWQgPSB0aW1lLmdldFVuaXhUaW1lKClcbiAgICAgIGNvbnN0IGRhdGEgPSBldmVudC5kYXRhXG4gICAgICBjb25zdCBtZXNzYWdlID0gdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZShkYXRhKSA6IGRhdGFcbiAgICAgIGlmIChtZXNzYWdlICYmIG1lc3NhZ2UudHlwZSA9PT0gJ3BvbmcnKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChwaW5nVGltZW91dClcbiAgICAgICAgcGluZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KHNlbmRQaW5nLCBtZXNzYWdlUmVjb25uZWN0VGltZW91dCAvIDIpXG4gICAgICB9XG4gICAgICB3c2NsaWVudC5lbWl0KCdtZXNzYWdlJywgW21lc3NhZ2UsIHdzY2xpZW50XSlcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHthbnl9IGVycm9yXG4gICAgICovXG4gICAgY29uc3Qgb25jbG9zZSA9IGVycm9yID0+IHtcbiAgICAgIGlmICh3c2NsaWVudC53cyAhPT0gbnVsbCkge1xuICAgICAgICB3c2NsaWVudC53cyA9IG51bGxcbiAgICAgICAgd3NjbGllbnQuY29ubmVjdGluZyA9IGZhbHNlXG4gICAgICAgIGlmICh3c2NsaWVudC5jb25uZWN0ZWQpIHtcbiAgICAgICAgICB3c2NsaWVudC5jb25uZWN0ZWQgPSBmYWxzZVxuICAgICAgICAgIHdzY2xpZW50LmVtaXQoJ2Rpc2Nvbm5lY3QnLCBbeyB0eXBlOiAnZGlzY29ubmVjdCcsIGVycm9yIH0sIHdzY2xpZW50XSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3c2NsaWVudC51bnN1Y2Nlc3NmdWxSZWNvbm5lY3RzKytcbiAgICAgICAgfVxuICAgICAgICAvLyBTdGFydCB3aXRoIG5vIHJlY29ubmVjdCB0aW1lb3V0IGFuZCBpbmNyZWFzZSB0aW1lb3V0IGJ5XG4gICAgICAgIC8vIGxvZzEwKHdzVW5zdWNjZXNzZnVsUmVjb25uZWN0cykuXG4gICAgICAgIC8vIFRoZSBpZGVhIGlzIHRvIGluY3JlYXNlIHJlY29ubmVjdCB0aW1lb3V0IHNsb3dseSBhbmQgaGF2ZSBubyByZWNvbm5lY3RcbiAgICAgICAgLy8gdGltZW91dCBhdCB0aGUgYmVnaW5uaW5nIChsb2coMSkgPSAwKVxuICAgICAgICBzZXRUaW1lb3V0KHNldHVwV1MsIG1hdGgubWluKG1hdGgubG9nMTAod3NjbGllbnQudW5zdWNjZXNzZnVsUmVjb25uZWN0cyArIDEpICogcmVjb25uZWN0VGltZW91dEJhc2UsIG1heFJlY29ubmVjdFRpbWVvdXQpLCB3c2NsaWVudClcbiAgICAgIH1cbiAgICAgIGNsZWFyVGltZW91dChwaW5nVGltZW91dClcbiAgICB9XG4gICAgY29uc3Qgc2VuZFBpbmcgPSAoKSA9PiB7XG4gICAgICBpZiAod3NjbGllbnQud3MgPT09IHdlYnNvY2tldCkge1xuICAgICAgICB3c2NsaWVudC5zZW5kKHtcbiAgICAgICAgICB0eXBlOiAncGluZydcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgd2Vic29ja2V0Lm9uY2xvc2UgPSAoKSA9PiBvbmNsb3NlKG51bGwpXG4gICAgd2Vic29ja2V0Lm9uZXJyb3IgPSBlcnJvciA9PiBvbmNsb3NlKGVycm9yKVxuICAgIHdlYnNvY2tldC5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICB3c2NsaWVudC5sYXN0TWVzc2FnZVJlY2VpdmVkID0gdGltZS5nZXRVbml4VGltZSgpXG4gICAgICB3c2NsaWVudC5jb25uZWN0aW5nID0gZmFsc2VcbiAgICAgIHdzY2xpZW50LmNvbm5lY3RlZCA9IHRydWVcbiAgICAgIHdzY2xpZW50LnVuc3VjY2Vzc2Z1bFJlY29ubmVjdHMgPSAwXG4gICAgICB3c2NsaWVudC5lbWl0KCdjb25uZWN0JywgW3sgdHlwZTogJ2Nvbm5lY3QnIH0sIHdzY2xpZW50XSlcbiAgICAgIC8vIHNldCBwaW5nXG4gICAgICBwaW5nVGltZW91dCA9IHNldFRpbWVvdXQoc2VuZFBpbmcsIG1lc3NhZ2VSZWNvbm5lY3RUaW1lb3V0IC8gMilcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAZXh0ZW5kcyBPYnNlcnZhYmxlPHN0cmluZz5cbiAqL1xuZXhwb3J0IGNsYXNzIFdlYnNvY2tldENsaWVudCBleHRlbmRzIE9ic2VydmFibGUge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdHNdXG4gICAqIEBwYXJhbSB7J2FycmF5YnVmZmVyJyB8ICdibG9iJyB8IG51bGx9IFtvcHRzLmJpbmFyeVR5cGVdIFNldCBgd3MuYmluYXJ5VHlwZWBcbiAgICovXG4gIGNvbnN0cnVjdG9yICh1cmwsIHsgYmluYXJ5VHlwZSB9ID0ge30pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy51cmwgPSB1cmxcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7V2ViU29ja2V0P31cbiAgICAgKi9cbiAgICB0aGlzLndzID0gbnVsbFxuICAgIHRoaXMuYmluYXJ5VHlwZSA9IGJpbmFyeVR5cGUgfHwgbnVsbFxuICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2VcbiAgICB0aGlzLmNvbm5lY3RpbmcgPSBmYWxzZVxuICAgIHRoaXMudW5zdWNjZXNzZnVsUmVjb25uZWN0cyA9IDBcbiAgICB0aGlzLmxhc3RNZXNzYWdlUmVjZWl2ZWQgPSAwXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBjb25uZWN0IHRvIG90aGVyIHBlZXJzIG9yIG5vdFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2hvdWxkQ29ubmVjdCA9IHRydWVcbiAgICB0aGlzLl9jaGVja0ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY29ubmVjdGVkICYmIG1lc3NhZ2VSZWNvbm5lY3RUaW1lb3V0IDwgdGltZS5nZXRVbml4VGltZSgpIC0gdGhpcy5sYXN0TWVzc2FnZVJlY2VpdmVkKSB7XG4gICAgICAgIC8vIG5vIG1lc3NhZ2UgcmVjZWl2ZWQgaW4gYSBsb25nIHRpbWUgLSBub3QgZXZlbiB5b3VyIG93biBhd2FyZW5lc3NcbiAgICAgICAgLy8gdXBkYXRlcyAod2hpY2ggYXJlIHVwZGF0ZWQgZXZlcnkgMTUgc2Vjb25kcylcbiAgICAgICAgLyoqIEB0eXBlIHtXZWJTb2NrZXR9ICovICh0aGlzLndzKS5jbG9zZSgpXG4gICAgICB9XG4gICAgfSwgbWVzc2FnZVJlY29ubmVjdFRpbWVvdXQgLyAyKVxuICAgIHNldHVwV1ModGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2FueX0gbWVzc2FnZVxuICAgKi9cbiAgc2VuZCAobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLndzKSB7XG4gICAgICB0aGlzLndzLnNlbmQoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpXG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9jaGVja0ludGVydmFsKVxuICAgIHRoaXMuZGlzY29ubmVjdCgpXG4gICAgc3VwZXIuZGVzdHJveSgpXG4gIH1cblxuICBkaXNjb25uZWN0ICgpIHtcbiAgICB0aGlzLnNob3VsZENvbm5lY3QgPSBmYWxzZVxuICAgIGlmICh0aGlzLndzICE9PSBudWxsKSB7XG4gICAgICB0aGlzLndzLmNsb3NlKClcbiAgICB9XG4gIH1cblxuICBjb25uZWN0ICgpIHtcbiAgICB0aGlzLnNob3VsZENvbm5lY3QgPSB0cnVlXG4gICAgaWYgKCF0aGlzLmNvbm5lY3RlZCAmJiB0aGlzLndzID09PSBudWxsKSB7XG4gICAgICBzZXR1cFdTKHRoaXMpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcImxpYjAvb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCB3YWl0Rm9yIH0gZnJvbSBcIi4vZXZlbnRzXCI7XG5cbmV4cG9ydCB0eXBlIFN0YXR1cyA9IFwib3BlblwiIHwgXCJjbG9zZWRcIiB8IFwib3BlbmluZ1wiO1xuXG5leHBvcnQgdHlwZSBIYXNTdGF0dXMgPSB7IHN0YXR1czogU3RhdHVzIH0gJiBFdmVudEVtaXR0ZXI8e1xuICBzdGF0dXM6IEN1c3RvbUV2ZW50PFN0YXR1cz47XG59PjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RlZChpOiBIYXNTdGF0dXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgaGFuZGxlciA9ICh7IGRldGFpbDogc3RhdHVzIH06IHsgZGV0YWlsOiBTdGF0dXMgfSkgPT4ge1xuICAgICAgc3RhdHVzID09PSBcIm9wZW5cIiAmJiByZXNvbHZlKCk7XG4gICAgICBzdGF0dXMgPT09IFwiY2xvc2VkXCIgJiYgcmVqZWN0KCk7XG4gICAgICBpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdGF0dXNcIiwgaGFuZGxlcik7XG4gICAgfTtcbiAgICBpLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0dXNcIiwgaGFuZGxlcik7XG4gICAgaGFuZGxlcih7IGRldGFpbDogaS5zdGF0dXMgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgY2xhc3MgU3RhdHVzRW1pdHRlciBleHRlbmRzIE9ic2VydmFibGU8XCJzdGF0dXNcIj4ge1xuICAjdmFsdWU6IFN0YXR1cyA9IFwib3BlbmluZ1wiO1xuICBnZXQgY3VycmVudCgpIHtcbiAgICByZXR1cm4gdGhpcy4jdmFsdWU7XG4gIH1cblxuICBzZXQoczogU3RhdHVzKSB7XG4gICAgbGV0IHNob3VsZF9lbWl0ID0gdGhpcy4jdmFsdWUgIT09IHM7XG4gICAgdGhpcy4jdmFsdWUgPSBzO1xuICAgIGlmIChzaG91bGRfZW1pdCkgdGhpcy5lbWl0KFwic3RhdHVzXCIsIFtdKTtcbiAgfVxuXG4gIGNvbm5lY3RlZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy4jdmFsdWUgPT09IFwiY2xvc2VkXCIpIHJlamVjdChcImNsb3NlZFwiKTtcbiAgICAgICAgaWYgKHRoaXMuI3ZhbHVlID09PSBcIm9wZW5cIikgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLiN2YWx1ZSA9PT0gXCJvcGVuaW5nXCIpIHtcbiAgICAgICAgdGhpcy5vbmNlKFwic3RhdHVzXCIsIGNvbXBsZXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFdlYnNvY2tldENsaWVudCB9IGZyb20gXCJsaWIwL3dlYnNvY2tldFwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJsaWIwL29ic2VydmFibGVcIjtcbmltcG9ydCB7IFN0YXR1c0VtaXR0ZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9uZXRcIjtcbmNvbnN0IERFRkFVTFRfU0lHTkFMRVIgPSBcIndzczovL2JhdHRsZWdyaWQtc2lnbmFsaW5nLmhlcm9rdWFwcC5jb21cIjtcblxuY29uc3QgUEVFUl9DT05GSUcgPSB7XG4gIGljZVNlcnZlcnM6IFt7IHVybHM6IFtcInN0dW46c3R1bjEubC5nb29nbGUuY29tOjE5MzAyXCIsIFwic3R1bjpzdHVuMi5sLmdvb2dsZS5jb206MTkzMDJcIl0gfV0sXG59O1xuXG50eXBlIFBlZXJTdGF0ZSA9IHtcbiAgcG9saXRlOiBib29sZWFuO1xuICBtYWtpbmdfb2ZmZXI6IGJvb2xlYW47XG4gIGlnbm9yZV9vZmZlcjogYm9vbGVhbjtcbiAgaXNTZXR0aW5nUmVtb3RlQW5zd2VyUGVuZGluZzogYm9vbGVhbjtcbiAgcGVlcjogUlRDUGVlckNvbm5lY3Rpb247XG59O1xuXG5leHBvcnQgdHlwZSBQZWVySWQgPSBzdHJpbmcgJiB7IF9fYnJhbmQ6IFwiUGVlcklkXCIgfTtcbmV4cG9ydCBjbGFzcyBTaWduYWxlciBleHRlbmRzIE9ic2VydmFibGU8XCJwZWVyXCI+IHtcbiAgc29ja2V0OiBXZWJzb2NrZXRDbGllbnQ7XG4gIHBlZXJzOiBNYXA8UGVlcklkLCBQZWVyU3RhdGU+ID0gbmV3IE1hcCgpO1xuICBwZWVyX2lkOiBQZWVySWQ7XG4gIHN0YXR1cyA9IG5ldyBTdGF0dXNFbWl0dGVyKCk7XG4gIGFsbG93X2Nvbm5lY3Rpb25zOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHBlZXJfaWQ6IFBlZXJJZCwgYWxsb3dfY29ubmVjdGlvbnMgPSBmYWxzZSwgc2lnbmFsX3VybCA9IERFRkFVTFRfU0lHTkFMRVIpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgbGV0IHVybCA9IG5ldyBVUkwoc2lnbmFsX3VybCk7XG4gICAgdXJsLnBhdGhuYW1lID0gcGVlcl9pZDtcblxuICAgIHRoaXMuYWxsb3dfY29ubmVjdGlvbnMgPSBhbGxvd19jb25uZWN0aW9ucztcbiAgICB0aGlzLnBlZXJfaWQgPSBwZWVyX2lkO1xuICAgIHRoaXMuc29ja2V0ID0gbmV3IFdlYnNvY2tldENsaWVudCh1cmwudG9TdHJpbmcoKSk7XG4gICAgdGhpcy5zdGF0dXMuc2V0KFwib3BlbmluZ1wiKTtcbiAgICB0aGlzLnNvY2tldC5vbihcImNvbm5lY3RcIiwgKCkgPT4gdGhpcy5zdGF0dXMuc2V0KFwib3BlblwiKSk7XG4gICAgdGhpcy5zb2NrZXQub24oXCJkaXNjb25uZWN0XCIsICgpID0+IHRoaXMuc3RhdHVzLnNldChcIm9wZW5pbmdcIikpO1xuICAgIHRoaXMuc29ja2V0Lm9uKFwibWVzc2FnZVwiLCB0aGlzLiNvbm1lc3NhZ2UpO1xuICB9XG5cbiAgaW5pdGlhdGUocmVtb3RlX2lkOiBQZWVySWQpOiBSVENQZWVyQ29ubmVjdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuI2luaXRfY29ubmVjdGlvbihyZW1vdGVfaWQsIGZhbHNlKS5wZWVyO1xuICB9XG5cbiAgI2luaXRfY29ubmVjdGlvbihyZW1vdGVfaWQ6IFBlZXJJZCwgb3V0Z29pbmc6IGJvb2xlYW4pOiBQZWVyU3RhdGUge1xuICAgIGxldCBwZWVyID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKFBFRVJfQ09ORklHKTtcbiAgICBsZXQgc3RhdGUgPSB7XG4gICAgICBwb2xpdGU6IG91dGdvaW5nLFxuICAgICAgbWFraW5nX29mZmVyOiBmYWxzZSxcbiAgICAgIGlnbm9yZV9vZmZlcjogZmFsc2UsXG4gICAgICBpc1NldHRpbmdSZW1vdGVBbnN3ZXJQZW5kaW5nOiBmYWxzZSxcbiAgICAgIHBlZXIsXG4gICAgfTtcblxuICAgIHRoaXMucGVlcnMuc2V0KHJlbW90ZV9pZCwgc3RhdGUpO1xuXG4gICAgLy8gRm9yd2FyZCBhbGwgaWNlIGNhbmRpZGF0ZXNcbiAgICBwZWVyLm9uaWNlY2FuZGlkYXRlID0gYXN5bmMgKHsgY2FuZGlkYXRlIH0pID0+IHtcbiAgICAgIGF3YWl0IHRoaXMuI3NlbmQoe1xuICAgICAgICB0eXBlOiBcInNpZ25hbFwiLFxuICAgICAgICBmcm9tOiB0aGlzLnBlZXJfaWQsXG4gICAgICAgIHRvOiByZW1vdGVfaWQsXG4gICAgICAgIGNhbmRpZGF0ZSxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwZWVyLm9ubmVnb3RpYXRpb25uZWVkZWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIm5lZ290aWF0aW9uIG5lZWRlZCFcIik7XG4gICAgICB0cnkge1xuICAgICAgICBzdGF0ZS5tYWtpbmdfb2ZmZXIgPSB0cnVlO1xuICAgICAgICBhd2FpdCBwZWVyLnNldExvY2FsRGVzY3JpcHRpb24oKTtcbiAgICAgICAgYXdhaXQgdGhpcy4jc2VuZCh7IHR5cGU6IFwic2lnbmFsXCIsIGZyb206IHRoaXMucGVlcl9pZCwgdG86IHJlbW90ZV9pZCwgZGVzY3JpcHRpb246IHBlZXIubG9jYWxEZXNjcmlwdGlvbiB9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHN0YXRlLm1ha2luZ19vZmZlciA9IGZhbHNlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBwZWVyLmFkZEV2ZW50TGlzdGVuZXIoXCJpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJpY2VDb25uZWN0aW9uU3RhdGVcIiwgcGVlci5pY2VDb25uZWN0aW9uU3RhdGUpO1xuICAgICAgaWYgKHBlZXIuaWNlQ29ubmVjdGlvblN0YXRlID09PSBcImNsb3NlZFwiKSB7XG4gICAgICAgIHRoaXMucGVlcnMuZGVsZXRlKHJlbW90ZV9pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBhc3luYyAjc2VuZChtc2c6IFNpZ25hbCkge1xuICAgIGF3YWl0IHRoaXMuc3RhdHVzLmNvbm5lY3RlZCgpO1xuICAgIGF3YWl0IHRoaXMuc29ja2V0LnNlbmQobXNnKTtcbiAgfVxuXG4gICNvbm1lc3NhZ2UgPSBhc3luYyAoc2lnOiBTaWduYWwpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIk9OTUVTU0FHRVwiLCBzaWcpO1xuICAgIGlmIChzaWcudHlwZSA9PT0gXCJlcnJvci1ub3QtZXhpc3RzXCIpIHtcbiAgICAgIGxldCBzdGF0ZSA9IHRoaXMucGVlcnMuZ2V0KHNpZy5kZXN0aW5hdGlvbik7XG4gICAgICBzdGF0ZT8ucGVlci5jbG9zZSgpO1xuICAgICAgY29uc29sZS5sb2coXCJjbG9zaW5nXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBzdGF0ZSA9IHRoaXMucGVlcnMuZ2V0KHNpZy5mcm9tKTtcbiAgICBpZiAoIXN0YXRlKSB7XG4gICAgICBpZiAoc2lnLmRlc2NyaXB0aW9uPy50eXBlID09PSBcIm9mZmVyXCIpIHtcbiAgICAgICAgc3RhdGUgPSB0aGlzLiNpbml0X2Nvbm5lY3Rpb24oc2lnLmZyb20sIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcGMgPSBzdGF0ZS5wZWVyO1xuXG4gICAgLy8gQWRhcHRlZCBmcm9tIFwiUGVyZmVjdCBOZWdvdGlhdGlvblwiIGJ5IE1vemlsbGE6IChodHRwczovL2Jsb2cubW96aWxsYS5vcmcvd2VicnRjL3BlcmZlY3QtbmVnb3RpYXRpb24taW4td2VicnRjLylcbiAgICBpZiAoc2lnLmRlc2NyaXB0aW9uKSB7XG4gICAgICAvLyBBbiBvZmZlciBtYXkgY29tZSBpbiB3aGlsZSB3ZSBhcmUgYnVzeSBwcm9jZXNzaW5nIFNSRChhbnN3ZXIpLlxuICAgICAgLy8gSW4gdGhpcyBjYXNlLCB3ZSB3aWxsIGJlIGluIFwic3RhYmxlXCIgYnkgdGhlIHRpbWUgdGhlIG9mZmVyIGlzIHByb2Nlc3NlZCAvLyBzbyBpdCBpcyBzYWZlIHRvIGNoYWluIGl0IG9uIG91ciBPcGVyYXRpb25zIENoYWluIG5vdy5cbiAgICAgIGNvbnN0IHJlYWR5Rm9yT2ZmZXIgPSAhc3RhdGUubWFraW5nX29mZmVyICYmIChwYy5zaWduYWxpbmdTdGF0ZSA9PSBcInN0YWJsZVwiIHx8IHN0YXRlLmlzU2V0dGluZ1JlbW90ZUFuc3dlclBlbmRpbmcpO1xuICAgICAgY29uc3Qgb2ZmZXJDb2xsaXNpb24gPSBzaWcuZGVzY3JpcHRpb24udHlwZSA9PSBcIm9mZmVyXCIgJiYgIXJlYWR5Rm9yT2ZmZXI7XG4gICAgICBzdGF0ZS5pZ25vcmVfb2ZmZXIgPSAhc3RhdGUucG9saXRlICYmIG9mZmVyQ29sbGlzaW9uO1xuXG4gICAgICBpZiAoc3RhdGUuaWdub3JlX29mZmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3RhdGUuaXNTZXR0aW5nUmVtb3RlQW5zd2VyUGVuZGluZyA9IHNpZy5kZXNjcmlwdGlvbi50eXBlID09PSBcImFuc3dlclwiO1xuICAgICAgYXdhaXQgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oc2lnLmRlc2NyaXB0aW9uKTtcbiAgICAgIHN0YXRlLmlzU2V0dGluZ1JlbW90ZUFuc3dlclBlbmRpbmcgPSBmYWxzZTtcblxuICAgICAgaWYgKHNpZy5kZXNjcmlwdGlvbi50eXBlID09PSBcIm9mZmVyXCIpIHtcbiAgICAgICAgYXdhaXQgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpO1xuICAgICAgICBhd2FpdCB0aGlzLiNzZW5kKHsgdHlwZTogXCJzaWduYWxcIiwgZnJvbTogdGhpcy5wZWVyX2lkLCB0bzogc2lnLmZyb20sIGRlc2NyaXB0aW9uOiBwYy5sb2NhbERlc2NyaXB0aW9uIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5lbWl0KFwicGVlclwiLCBbc2lnLmZyb20sIHBjXSk7XG4gICAgfSBlbHNlIGlmIChzaWcuY2FuZGlkYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBwYy5hZGRJY2VDYW5kaWRhdGUoc2lnLmNhbmRpZGF0ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKCFzdGF0ZS5pZ25vcmVfb2ZmZXIpIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgc2h1dGRvd24oKSB7XG4gICAgdGhpcy5zb2NrZXQuZGVzdHJveSgpO1xuICAgIHRoaXMucGVlcnMuY2xlYXIoKTtcbiAgICB0aGlzLnN0YXR1cy5kZXN0cm95KCk7XG4gIH1cbn1cblxudHlwZSBTaWduYWxEYXRhID0geyB0eXBlOiBcInNpZ25hbFwiOyBmcm9tOiBQZWVySWQ7IHRvOiBQZWVySWQgfSAmIHtcbiAgZGVzY3JpcHRpb24/OiBSVENTZXNzaW9uRGVzY3JpcHRpb24gfCBudWxsO1xuICBjYW5kaWRhdGU/OiBSVENJY2VDYW5kaWRhdGUgfCBudWxsO1xufTtcblxudHlwZSBTaWduYWxFcnJvciA9IHtcbiAgdHlwZTogXCJlcnJvci1ub3QtZXhpc3RzXCI7XG4gIGRlc3RpbmF0aW9uOiBQZWVySWQ7XG59O1xuXG50eXBlIFNpZ25hbCA9IFNpZ25hbERhdGEgfCBTaWduYWxFcnJvcjtcbiIsImltcG9ydCB7IFN0YXR1cyB9IGZyb20gXCIuL25ldFwiO1xuXG5leHBvcnQgdHlwZSBSVENNZXNzYWdlID0gc3RyaW5nIHwgQXJyYXlCdWZmZXIgfCBBcnJheUJ1ZmZlclZpZXcgfCBCbG9iO1xuXG5leHBvcnQgY29uc3QgTUFYX01FU1NBR0VfU0laRSA9IDI1NiAqIDEwMjQ7XG5leHBvcnQgY29uc3Qgc3RyZWFtcyA9IDxSIGV4dGVuZHMgUlRDTWVzc2FnZSwgVyBleHRlbmRzIFJUQ01lc3NhZ2U+KGRjOiBSVENEYXRhQ2hhbm5lbCk6IFJlYWRhYmxlV3JpdGFibGVQYWlyPFIsIFc+ID0+ICh7XG4gIHJlYWRhYmxlOiByZWFkX3N0cmVhbShkYykgYXMgUmVhZGFibGVTdHJlYW08Uj4sXG4gIHdyaXRhYmxlOiB3cml0ZV9zdHJlYW0oZGMpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBvcGVuID0gYXN5bmMgKGNvbm46IFJUQ1BlZXJDb25uZWN0aW9uKTogUHJvbWlzZTxSVENQZWVyQ29ubmVjdGlvbj4gPT4ge1xuICBjb25zb2xlLmxvZyhcIk9QRU5cIik7XG4gIGlmIChjb25uLmljZUNvbm5lY3Rpb25TdGF0ZSA9PT0gXCJjb25uZWN0ZWRcIikge1xuICAgIGNvbnNvbGUubG9nKFwiV0FUXCIpO1xuICAgIHJldHVybiBjb25uO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlBcIiwgY29ubi5pY2VDb25uZWN0aW9uU3RhdGUpO1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJPUEVOXCIsIGNvbm4uaWNlQ29ubmVjdGlvblN0YXRlKTtcbiAgICAgIGlmIChbXCJmYWlsZWRcIiwgXCJjbG9zZWRcIl0uaW5jbHVkZXMoY29ubi5pY2VDb25uZWN0aW9uU3RhdGUpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTkFJTEVEIElUXCIpO1xuICAgICAgICByZWplY3QoXCJGYWlsZWQgdG8gY29ubmVjdFwiKTtcbiAgICAgICAgY29ubi5yZW1vdmVFdmVudExpc3RlbmVyKFwiaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsIGxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoY29ubi5pY2VDb25uZWN0aW9uU3RhdGUgPT09IFwiY29ubmVjdGVkXCIpIHtcbiAgICAgICAgcmVzb2x2ZShjb25uKTtcbiAgICAgICAgY29ubi5yZW1vdmVFdmVudExpc3RlbmVyKFwiaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbm4uYWRkRXZlbnRMaXN0ZW5lcihcInNpZ25hbGluZ3N0YXRlY2hhbmdlXCIsIChldikgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJTSUdOQUxcIiwgZXYpO1xuICAgIH0pO1xuICAgIGNvbm4uYWRkRXZlbnRMaXN0ZW5lcihcImljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiLCBsaXN0ZW5lcik7XG4gIH0pO1xufTtcblxuY29uc3QgcmVhZF9zdHJlYW0gPSAoZGM6IFJUQ0RhdGFDaGFubmVsKTogUmVhZGFibGVTdHJlYW08UlRDTWVzc2FnZT4gPT4ge1xuICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICBkYy5vbm1lc3NhZ2UgPSAoeyBkYXRhIH0pID0+IHtcbiAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGRhdGEpO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IG9uY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIGlmIChkYy5idWZmZXJlZEFtb3VudCA9PT0gMCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiVW5kZXJseWluZyBkYXRhY2hhbm5lbCBjbG9zZWRcIik7XG4gICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRjLmFkZEV2ZW50TGlzdGVuZXIoXCJidWZmZXJlZGFtb3VudGxvd1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVuZGVybHlpbmcgZGF0YWNoYW5uZWwgY2xvc2VkXCIpO1xuICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZGMuYWRkRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9LFxuXG4gICAgY2FuY2VsKCkge1xuICAgICAgZGMuY2xvc2UoKTtcbiAgICB9LFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBmbHVzaCA9IChkYzogUlRDRGF0YUNoYW5uZWwpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB0cnlfY2xvc2UgPSAoKSA9PiB7XG4gICAgICBpZiAoZGMuYnVmZmVyZWRBbW91bnQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRjLnJlYWR5U3RhdGUgPT09IFwiY2xvc2VkXCIgfHwgZGMucmVhZHlTdGF0ZSA9PT0gXCJjbG9zaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChcIkJ1ZmZlciBjbG9zZWQgYmVmb3JlIGZsdXNoaW5nXCIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkYy5idWZmZXJlZEFtb3VudExvd1RocmVzaG9sZCA9IDA7XG4gICAgZGMuYWRkRXZlbnRMaXN0ZW5lcihcImJ1ZmZlcmVkYW1vdW50bG93XCIsIHRyeV9jbG9zZSk7XG4gICAgdHJ5X2Nsb3NlKCk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGRjX3N0YXR1cyA9IChkYzogUlRDRGF0YUNoYW5uZWwpOiBTdGF0dXMgPT4ge1xuICBzd2l0Y2ggKGRjLnJlYWR5U3RhdGUpIHtcbiAgICBjYXNlIFwib3BlblwiOlxuICAgIGNhc2UgXCJjbG9zZWRcIjpcbiAgICAgIHJldHVybiBkYy5yZWFkeVN0YXRlO1xuICAgIGNhc2UgXCJjbG9zaW5nXCI6XG4gICAgICByZXR1cm4gXCJjbG9zZWRcIjtcbiAgICBjYXNlIFwiY29ubmVjdGluZ1wiOlxuICAgICAgcmV0dXJuIFwib3BlbmluZ1wiO1xuICB9XG59O1xuXG5jb25zdCB3cml0ZV9zdHJlYW0gPSAoZGM6IFJUQ0RhdGFDaGFubmVsKTogV3JpdGFibGVTdHJlYW08UlRDTWVzc2FnZT4gPT4ge1xuICBsZXQgcmVzdW1lOiAoKCkgPT4gdm9pZCkgfCB1bmRlZmluZWQ7XG4gIGRjLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCAoZXJyKSA9PiBjb25zb2xlLmxvZyhcIkRDIEVSUk9SXCIsIGVycikpO1xuICByZXR1cm4gbmV3IFdyaXRhYmxlU3RyZWFtKFxuICAgIHtcbiAgICAgIHN0YXJ0KGNvbnRyb2xsZXIpIHtcbiAgICAgICAgY29uc3Qgb25jbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInN0cmVhbSBjbG9zZWQgYnkgZGMgZW5kaW5nXCIsIGRjLmxhYmVsKTtcbiAgICAgICAgICBjb250cm9sbGVyLmVycm9yKFwiQ2xvc2VkIGZvb1wiKTtcbiAgICAgICAgICBkYy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgICAgIH07XG4gICAgICAgIGRjLmFkZEV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICAgICAgZGMub25vcGVuID0gKCkgPT4gcmVzdW1lICYmIHJlc3VtZSgpO1xuICAgICAgICBkYy5vbmJ1ZmZlcmVkYW1vdW50bG93ID0gKCkgPT4gcmVzdW1lICYmIHJlc3VtZSgpO1xuICAgICAgfSxcbiAgICAgIGFzeW5jIHdyaXRlKGNodW5rKSB7XG4gICAgICAgIGlmIChkYy5yZWFkeVN0YXRlID09PSBcImNvbm5lY3RpbmdcIiB8fCBkYy5idWZmZXJlZEFtb3VudCA+IGRjLmJ1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJ3YWl0aW5nIGZvciByZXN1bXB0b2luLi4uXCIpO1xuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyLCBfKSA9PiAocmVzdW1lID0gcikpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVzdW1lZCFcIik7XG4gICAgICAgIH1cbiAgICAgICAgZGMuc2VuZChjaHVuayk7XG4gICAgICB9LFxuICAgICAgYWJvcnQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiYWJvcnRlZCBkYyBieSBzdHJlYW1cIik7XG4gICAgICAgIGRjLmNsb3NlKCk7XG4gICAgICB9LFxuICAgICAgY2xvc2UoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY2xvc2VkIGRjIGJ5IHN0cmVhbVwiKTtcbiAgICAgICAgZGMuY2xvc2UoKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICAvLyBEb24ndCBsZXQgdGhlIG91dHB1dCBzdHJlYW0gY29uc3VtZSBtb3JlIHRoYW4gb25lIG1lc3NhZ2UgaW4gY2FzZSBpdCBnZXRzIHNodXRkb3duXG4gICAgbmV3IENvdW50UXVldWluZ1N0cmF0ZWd5KHsgaGlnaFdhdGVyTWFyazogMSB9KVxuICApO1xufTtcbiIsImltcG9ydCB7IGZsdXNoLCBNQVhfTUVTU0FHRV9TSVpFIH0gZnJvbSBcIi4uLy4uL3V0aWwvcnRjXCI7XG5pbXBvcnQgeyBidWZmZXJfY2h1bmtzLCBjb2xsZWN0X2Jsb2IgfSBmcm9tIFwiLi4vLi4vdXRpbC9zdHJlYW1zXCI7XG5leHBvcnQgY29uc3QgUkVTT1VSQ0VfUFJPVE9DT0wgPSBcInJlcXVlc3QtcmVzb3VyY2VcIjtcblxuZXhwb3J0IHR5cGUgUmVzb3VyY2UgPSB7XG4gIGJsb2I6IEJsb2I7XG59O1xuXG50eXBlIEhlYWRlciA9IHtcbiAgdHlwZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3QoY2hhbm5lbDogUmVhZGFibGVXcml0YWJsZVBhaXI8QXJyYXlCdWZmZXIgfCBzdHJpbmcsIEFycmF5QnVmZmVyIHwgc3RyaW5nPik6IFByb21pc2U8UmVzb3VyY2U+IHtcbiAgbGV0IHJlYWRlciA9IGNoYW5uZWwucmVhZGFibGUuZ2V0UmVhZGVyKCk7XG4gIGxldCBmaXJzdCA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gIGNvbnNvbGUubG9nKFwiaGVhZGVyPyBcIiwgZmlyc3QpO1xuICBsZXQgaGVhZGVyOiBIZWFkZXIgPSBKU09OLnBhcnNlKGZpcnN0LnZhbHVlIGFzIGFueSk7XG4gIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuXG4gIGxldCBibG9iID0gYXdhaXQgY29sbGVjdF9ibG9iKGNoYW5uZWwucmVhZGFibGUgYXMgUmVhZGFibGVTdHJlYW08QXJyYXlCdWZmZXI+LCBoZWFkZXI/LnR5cGUpO1xuXG4gIC8vIGNvbnNvbGUubG9nKFwiQnVpbHQgYnVmZmVyXCIsIGJsb2IpO1xuICByZXR1cm4ge1xuICAgIGJsb2IsXG4gIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXNwb25zZShcbiAgZGM6IFJlYWRhYmxlV3JpdGFibGVQYWlyPEFycmF5QnVmZmVyIHwgc3RyaW5nLCBBcnJheUJ1ZmZlciB8IHN0cmluZz4sXG4gIHJlc291cmNlOiBSZXNvdXJjZSxcbiAgbXNnX3NpemU6IG51bWJlciA9IE1BWF9NRVNTQUdFX1NJWkVcbikge1xuICBjb25zb2xlLmxvZyhcIlVTSU5HIE1BWCBNRVNTQUdFIFNJWkU6IFwiLCBtc2dfc2l6ZSk7XG4gIGxldCB3cml0ZXIgPSBkYy53cml0YWJsZS5nZXRXcml0ZXIoKTtcbiAgYXdhaXQgd3JpdGVyLndyaXRlKEpTT04uc3RyaW5naWZ5KHsgdHlwZTogcmVzb3VyY2UuYmxvYi50eXBlIH0pKTtcbiAgd3JpdGVyLnJlbGVhc2VMb2NrKCk7XG5cbiAgYXdhaXQgYnVmZmVyX2NodW5rcyhyZXNvdXJjZS5ibG9iLCBtc2dfc2l6ZSkucGlwZVRvKGRjLndyaXRhYmxlLCB7IHByZXZlbnRDbG9zZTogdHJ1ZSB9KTtcbn1cbiIsImltcG9ydCB7IEdhbWVFdmVudCB9IGZyb20gXCIuLi9nYW1lL2dhbWUtZXZlbnRzXCI7XG5pbXBvcnQgeyBTdGF0dXNFbWl0dGVyIH0gZnJvbSBcIi4uL3V0aWwvbmV0XCI7XG5pbXBvcnQgeyBzdHJlYW1zIH0gZnJvbSBcIi4uL3V0aWwvcnRjXCI7XG5pbXBvcnQgeyBqc29uIH0gZnJvbSBcIi4uL3V0aWwvc3RyZWFtc1wiO1xuaW1wb3J0IHsgcmVxdWVzdCwgUmVzb3VyY2UsIFJFU09VUkNFX1BST1RPQ09MIH0gZnJvbSBcIi4vcmVzb3VyY2VzL3Byb3RvY29sXCI7XG5pbXBvcnQgeyBSZXNvdXJjZUlkIH0gZnJvbSBcIi4vcmVzb3VyY2VzL3NlcnZpY2Utd29ya2VyLXByb3RvY29sXCI7XG5pbXBvcnQgeyBQZWVySWQgfSBmcm9tIFwiLi9ydGMvc2lnbmFsZXJcIjtcblxuZXhwb3J0IHR5cGUgR2FtZVVwZGF0ZSA9IFVpbnQ4QXJyYXk7XG5cbmV4cG9ydCBjbGFzcyBHYW1lUGVlciB7XG4gICAgcGVlcjogUlRDUGVlckNvbm5lY3Rpb247XG4gICAgc3RhdHVzID0gbmV3IFN0YXR1c0VtaXR0ZXIoKTtcbiAgICBpZDogUGVlcklkO1xuXG4gICAgZXZlbnRzOiBSZWFkYWJsZVN0cmVhbTxHYW1lVXBkYXRlPjtcbiAgICAjZXZlbnRfd3JpdGVyOiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXI8R2FtZVVwZGF0ZT47XG5cbiAgICBjb25zdHJ1Y3RvcihpZDogUGVlcklkLCBwZWVyOiBSVENQZWVyQ29ubmVjdGlvbikge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucGVlciA9IHBlZXI7XG5cbiAgICAgICAgbGV0IGRjID0gcGVlci5jcmVhdGVEYXRhQ2hhbm5lbChcImV2ZW50c1wiLCB7bmVnb3RpYXRlZDogdHJ1ZSwgaWQ6IDF9KTtcbiAgICAgICAgZGMuYmluYXJ5VHlwZSA9IFwiYXJyYXlidWZmZXJcIjsgXG4gICAgICAgIGxldCB7cmVhZGFibGUsIHdyaXRhYmxlfSA9IHN0cmVhbXM8QXJyYXlCdWZmZXIsIEFycmF5QnVmZmVyPihkYyk7XG5cbiAgICAgICAgdGhpcy5ldmVudHMgPSByZWFkYWJsZS5waXBlVGhyb3VnaChuZXcgVHJhbnNmb3JtU3RyZWFtPEFycmF5QnVmZmVyLCBVaW50OEFycmF5Pih7XG4gICAgICAgICAgICB0cmFuc2Zvcm0oY2h1bmssIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2h1bmsnLCBjaHVuayk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKG5ldyBVaW50OEFycmF5KGNodW5rKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLiNldmVudF93cml0ZXIgPSB3cml0YWJsZS5nZXRXcml0ZXIoKTtcblxuICAgICAgICAvLyBUaGlzIGlzIGdyb3NzIGJ1dCB0aGUgbWFudWFsIGNsb3NlIGZyb20gdGhlIHNpZ25hbGVyIHdvbid0IGZpcmUgYW55IGhhbmRsZXJzXG4gICAgICAgIGxldCBvbGRfY2xvc2UgPSBwZWVyLmNsb3NlO1xuICAgICAgICBwZWVyLmNsb3NlID0gKCkgPT4ge3RoaXMuc3RhdHVzLnNldCgnY2xvc2VkJyk7IG9sZF9jbG9zZS5iaW5kKHBlZXIpKCl9XG5cbiAgICAgICAgcGVlci5hZGRFdmVudExpc3RlbmVyKCdpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNUQVRFIENIQU5HRVwiKTtcbiAgICAgICAgICAgIHN3aXRjaCAocGVlci5pY2VDb25uZWN0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2xvc2VkXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzLnNldCgnY2xvc2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Nvbm5lY3RlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzLnNldCgnb3BlbicpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cy5zZXQoJ29wZW5pbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGVlci5vbmRhdGFjaGFubmVsID0gKGV2KSA9PiB0aGlzLm9uZGF0YWNoYW5uZWwoZXYpO1xuICAgIH1cblxuICAgIHdyaXRlX2V2ZW50KGV2OiBHYW1lVXBkYXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNldmVudF93cml0ZXIud3JpdGUoZXYpO1xuICAgIH1cblxuICAgIHJlcXVlc3QoaWQ6IFJlc291cmNlSWQpOiBQcm9taXNlPFJlc291cmNlPiB7XG4gICAgICByZXR1cm4gdGhpcy5kYXRhY2hhbm5lbChpZCwge3Byb3RvY29sOiBSRVNPVVJDRV9QUk9UT0NPTH0pXG4gICAgICAgIC50aGVuKHN0cmVhbXM8QXJyYXlCdWZmZXIsIEFycmF5QnVmZmVyPilcbiAgICAgICAgLnRoZW4ocmVxdWVzdClcbiAgICB9XG5cblxuICAgIG9uZGF0YWNoYW5uZWwgPSAoZXY6IFJUQ0RhdGFDaGFubmVsRXZlbnQpID0+IHt9O1xuXG4gICAgZGF0YWNoYW5uZWwobmFtZTogc3RyaW5nLCBpbml0PzogUlRDRGF0YUNoYW5uZWxJbml0KTogUHJvbWlzZTxSVENEYXRhQ2hhbm5lbD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgZGMgPSB0aGlzLnBlZXIuY3JlYXRlRGF0YUNoYW5uZWwobmFtZSwgaW5pdCk7XG4gICAgICAgIGRjLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICBcIm9wZW5cIixcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGRjLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCByZWplY3QpO1xuICAgICAgICAgICAgcmVzb2x2ZShkYyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBvbmNlOiB0cnVlIH1cbiAgICAgICAgKTtcbiAgICAgICAgZGMuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHJlamVjdCwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuLi9nYW1lL2dhbWVcIjtcbmltcG9ydCB7IEdhbWVFdmVudCB9IGZyb20gXCIuLi9nYW1lL2dhbWUtZXZlbnRzXCI7XG5pbXBvcnQgeyBjb25zdW1lIH0gZnJvbSBcIi4uL3V0aWwvc3RyZWFtc1wiO1xuaW1wb3J0IHsgU2lnbmFsZXIsIFBlZXJJZCB9IGZyb20gXCIuL3J0Yy9zaWduYWxlclwiO1xuaW1wb3J0IHsgUkVTT1VSQ0VfUFJPVE9DT0wsIHJlcXVlc3QgfSBmcm9tIFwiLi9yZXNvdXJjZXMvcHJvdG9jb2xcIjtcbmltcG9ydCB7IGRjX3N0YXR1cywgTUFYX01FU1NBR0VfU0laRSwgc3RyZWFtcyB9IGZyb20gXCIuLi91dGlsL3J0Y1wiO1xuaW1wb3J0IHsgUmVzb3VyY2VJZCwgUmVzb3VyY2VNZXNzYWdlLCBSZXNvdXJjZVJlcXVlc3QgfSBmcm9tIFwiLi9yZXNvdXJjZXMvc2VydmljZS13b3JrZXItcHJvdG9jb2xcIjtcbmltcG9ydCB7IFN0YXR1c0VtaXR0ZXIgfSBmcm9tIFwiLi4vdXRpbC9uZXRcIjtcbmltcG9ydCB7IEdhbWVQZWVyIH0gZnJvbSBcIi4vZ2FtZV9wZWVyXCI7XG5pbXBvcnQgeyBhcHBseVVwZGF0ZSwgbG9nVXBkYXRlIH0gZnJvbSBcInlqc1wiO1xuXG5leHBvcnQgY2xhc3MgQ2xpZW50IHtcbiAgI2dhbWU6IEdhbWU7XG4gICNwZWVyOiBHYW1lUGVlcjtcbiAgI2dhbWVfaWQ6IFBlZXJJZDtcbiAgI3NpZ25hbGVyOiBTaWduYWxlcjtcbiAgZ2V0IHN0YXR1cygpOiBTdGF0dXNFbWl0dGVyIHtcbiAgICByZXR1cm4gdGhpcy4jcGVlci5zdGF0dXM7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihnYW1lX2lkOiBQZWVySWQsIGdhbWU6IEdhbWUpIHtcbiAgICB0aGlzLiNzaWduYWxlciA9IG5ldyBTaWduYWxlcihjcnlwdG8ucmFuZG9tVVVJRCgpIGFzIFBlZXJJZCk7XG4gICAgdGhpcy4jZ2FtZSA9IGdhbWU7XG4gICAgdGhpcy4jZ2FtZV9pZCA9IGdhbWVfaWQ7XG4gICAgdGhpcy4jZ2FtZS5kb2Mub24oXCJ1cGRhdGVcIiwgdGhpcy5mb3J3YXJkX3VwZGF0ZXMpO1xuICAgIHRoaXMuI3BlZXIgPSB0aGlzLiNzZXR1cF9wZWVyKCk7XG4gICAgbGV0IGNhY2hlID0gY2FjaGVzLm9wZW4oXCJyZXNvdXJjZXNcIik7XG4gICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIub25tZXNzYWdlID0gYXN5bmMgKGV2OiBNZXNzYWdlRXZlbnQ8UmVzb3VyY2VSZXF1ZXN0PikgPT4ge1xuICAgICAgbGV0IGlkID0gZXYuZGF0YS5pZCBhcyBSZXNvdXJjZUlkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHJlc291cmNlID0gYXdhaXQgdGhpcy4jcGVlci5yZXF1ZXN0KGlkKTtcbiAgICAgICAgbGV0IHIgPSBuZXcgUmVzcG9uc2UocmVzb3VyY2UuYmxvYik7XG4gICAgICAgIGF3YWl0IChhd2FpdCBjYWNoZSkucHV0KGAvcmVzb3VyY2VzLyR7aWR9YCwgcik7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ09NTVVOSUNBVElORyBXSVRIIFNFUlZJQ0UgV09SS0VSXCIpO1xuICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyIS5wb3N0TWVzc2FnZSh7IHR5cGU6IFwiZm91bmRcIiwgaWQgfSBhcyBSZXNvdXJjZU1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgcmVzb3VyY2U6IFwiLCBlKTtcbiAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlciEucG9zdE1lc3NhZ2UoeyB0eXBlOiBcIm5vdGZvdW5kXCIsIGlkLCBlcnJvcjogZSB9IGFzIFJlc291cmNlTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZvcndhcmRfdXBkYXRlcyA9ICh1cGRhdGU6IFVpbnQ4QXJyYXksIG9yaWdpbjogYW55KSA9PiB7XG4gICAgaWYgKG9yaWdpbiA9PT0gXCJyZW1vdGVcIikgcmV0dXJuO1xuICAgIHRoaXMuI3BlZXIud3JpdGVfZXZlbnQodXBkYXRlKTtcbiAgfTtcblxuICBhc3luYyByZWNvbm5lY3QoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy4jcGVlciA9IHRoaXMuI3NldHVwX3BlZXIoKTtcbiAgfVxuXG4gIGFzeW5jIHNodXRkb3duKCkge1xuICAgIHRoaXMuI2dhbWUuZG9jLm9mZihcInVwZGF0ZVwiLCB0aGlzLmZvcndhcmRfdXBkYXRlcyk7XG4gICAgdGhpcy4jcGVlci5wZWVyLmNsb3NlKCk7XG4gICAgY29uc29sZS5sb2coXCJXYWl0aW5nIGZvciBzaWduYWxlciBzaHV0ZG93blwiKTtcbiAgICBhd2FpdCB0aGlzLiNzaWduYWxlci5zaHV0ZG93bigpO1xuICAgIGNvbnNvbGUubG9nKFwic2lnbmFsZXIgZGVhZFwiKTtcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5vbm1lc3NhZ2UgPSBudWxsO1xuICB9XG5cbiAgI3NldHVwX3BlZXIoKTogR2FtZVBlZXIge1xuICAgIGxldCBwZWVyID0gbmV3IEdhbWVQZWVyKHRoaXMuI3NpZ25hbGVyLnBlZXJfaWQsIHRoaXMuI3NpZ25hbGVyLmluaXRpYXRlKHRoaXMuI2dhbWVfaWQpKTtcblxuICAgIGNvbnN1bWUocGVlci5ldmVudHMsIChldikgPT4ge1xuICAgICAgcmV0dXJuIGFwcGx5VXBkYXRlKHRoaXMuI2dhbWUuZG9jLCBldiwgXCJyZW1vdGVcIik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcGVlcjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgd2FpdEZvciB9IGZyb20gXCIuLi91dGlsL2V2ZW50c1wiO1xuaW1wb3J0IHsgZmx1c2gsIE1BWF9NRVNTQUdFX1NJWkUsIHN0cmVhbXMgfSBmcm9tIFwiLi4vdXRpbC9ydGNcIjtcbmltcG9ydCB7IGNvbnN1bWUgfSBmcm9tIFwiLi4vdXRpbC9zdHJlYW1zXCI7XG5pbXBvcnQgeyBHYW1lUGVlciB9IGZyb20gXCIuL2dhbWVfcGVlclwiO1xuaW1wb3J0IHsgUmVzb3VyY2UsIFJFU09VUkNFX1BST1RPQ09MLCByZXNwb25zZSB9IGZyb20gXCIuL3Jlc291cmNlcy9wcm90b2NvbFwiO1xuaW1wb3J0IHsgUmVzb3VyY2VJZCB9IGZyb20gXCIuL3Jlc291cmNlcy9zZXJ2aWNlLXdvcmtlci1wcm90b2NvbFwiO1xuaW1wb3J0IHsgU2lnbmFsZXIsIFBlZXJJZCB9IGZyb20gXCIuL3J0Yy9zaWduYWxlclwiO1xuaW1wb3J0IHsgYXBwbHlVcGRhdGUsIGVuY29kZVN0YXRlQXNVcGRhdGUsIGVuY29kZVN0YXRlVmVjdG9yLCBsb2dVcGRhdGUgfSBmcm9tIFwieWpzXCI7XG5pbXBvcnQgeyBHYW1lIH0gZnJvbSBcIi4uL2dhbWUvZ2FtZVwiO1xuXG5leHBvcnQgY2xhc3MgU2VydmVyIHtcbiAgc2lnbmFsZXI6IFNpZ25hbGVyO1xuICAjZ2FtZTogR2FtZTtcbiAgY2xpZW50czogU2V0PEdhbWVQZWVyPiA9IG5ldyBTZXQoKTtcbiAgI2Fib3J0OiBBYm9ydENvbnRyb2xsZXI7XG5cbiAgY29uc3RydWN0b3IoZ2FtZTogR2FtZSkge1xuICAgIHRoaXMuc2lnbmFsZXIgPSBuZXcgU2lnbmFsZXIoY3J5cHRvLnJhbmRvbVVVSUQoKSBhcyBQZWVySWQsIHRydWUpO1xuICAgIHRoaXMuI2dhbWUgPSBnYW1lO1xuICAgIHRoaXMuI2Fib3J0ID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIHRoaXMuc2lnbmFsZXIub24oXCJwZWVyXCIsIHRoaXMuI2FkZF9jbGllbnQpO1xuICAgIHRoaXMuI2dhbWUuZG9jLm9uKFwidXBkYXRlXCIsICh1cGRhdGUsIG9yaWdpbikgPT4ge1xuICAgICAgLy8gdG9kbywgcHJldmVudCBlY2hvXG4gICAgICBmb3IgKGxldCBjbGllbnQgb2YgdGhpcy5jbGllbnRzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRUNIT1wiLCBjbGllbnQuaWQsIG9yaWdpbik7XG4gICAgICAgIGlmIChjbGllbnQuaWQgPT09IG9yaWdpbikgY29udGludWU7XG4gICAgICAgIGNsaWVudC53cml0ZV9ldmVudCh1cGRhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgI2FkZF9jbGllbnQgPSAoaWQ6IFBlZXJJZCwgcGVlcjogUlRDUGVlckNvbm5lY3Rpb24pID0+IHtcbiAgICBsZXQgZ3AgPSBuZXcgR2FtZVBlZXIoaWQsIHBlZXIpO1xuICAgIHRoaXMuY2xpZW50cy5hZGQoZ3ApO1xuXG4gICAgZ3Aud3JpdGVfZXZlbnQoZW5jb2RlU3RhdGVBc1VwZGF0ZSh0aGlzLiNnYW1lLmRvYykpO1xuXG4gICAgY29uc3VtZShncC5ldmVudHMsIChldikgPT4ge1xuICAgICAgYXBwbHlVcGRhdGUodGhpcy4jZ2FtZS5kb2MsIGV2LCBpZCk7XG4gICAgfSk7XG5cbiAgICAvLyBwZWVyLmV2ZW50c19kYy5hZGRFdmVudExpc3RlbmVyKFwiY2xvc2VcIiwgKCkgPT4ge1xuICAgIC8vICAgY29uc29sZS5sb2coXCJQRUVFUiBFVkVOVCBEQ1wiKTtcbiAgICAvLyAgIHRoaXMuY2xpZW50cy5kZWxldGUocGVlcik7XG4gICAgLy8gfSk7XG5cbiAgICBwZWVyLm9uZGF0YWNoYW5uZWwgPSBhc3luYyAoZXYpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiSU5DT01JTkcgRENcIiwgZXYuY2hhbm5lbCk7XG4gICAgICBjb25zdCBjaGFubmVsID0gZXYuY2hhbm5lbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHdhaXRGb3IoXCJvcGVuXCIsIGNoYW5uZWwpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIm5ldyBkY1wiLCBjaGFubmVsKTtcbiAgICAgICAgaWYgKGNoYW5uZWwucHJvdG9jb2wgPT09IFJFU09VUkNFX1BST1RPQ09MKSB7XG4gICAgICAgICAgYXdhaXQgcmVzcG9uc2UoXG4gICAgICAgICAgICBzdHJlYW1zPEFycmF5QnVmZmVyLCBBcnJheUJ1ZmZlcj4oY2hhbm5lbCksXG4gICAgICAgICAgICBhd2FpdCB0aGlzLiNnZXRfcmVzb3VyY2UoY2hhbm5lbC5sYWJlbCBhcyBSZXNvdXJjZUlkKSxcbiAgICAgICAgICAgIHBlZXIuc2N0cD8ubWF4TWVzc2FnZVNpemUgfHwgTUFYX01FU1NBR0VfU0laRVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJGTFVTSElOR1wiKTtcbiAgICAgICAgICBhd2FpdCBmbHVzaChjaGFubmVsKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgY2hhbm5lbC5jbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgYXN5bmMgI2dldF9yZXNvdXJjZShpZDogUmVzb3VyY2VJZCk6IFByb21pc2U8UmVzb3VyY2U+IHtcbiAgICBsZXQgcmVzcCA9IGF3YWl0IChhd2FpdCBjYWNoZXMub3BlbihcInJlc291cmNlc1wiKSkubWF0Y2goYC9yZXNvdXJjZXMvJHtpZH1gKTtcbiAgICBpZiAoIXJlc3ApIHtcbiAgICAgIHRocm93IGBSZXF1ZXN0ZWQgdW5rbm93biByZXNvdXJjZSAke2lkfWA7XG4gICAgfVxuICAgIHJldHVybiB7IGJsb2I6IGF3YWl0IHJlc3AuYmxvYigpIH07XG4gIH1cblxuICBhc3luYyBzaHV0ZG93bigpIHtcbiAgICBmb3IgKGxldCBjIG9mIHRoaXMuY2xpZW50cykge1xuICAgICAgYy5wZWVyLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGllbnRzLmNsZWFyKCk7XG4gICAgdGhpcy4jYWJvcnQuYWJvcnQoXCJTZXJ2ZXIgc2h1dHRpbmcgZG93blwiKTtcbiAgICBhd2FpdCB0aGlzLnNpZ25hbGVyLnNodXRkb3duKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNzcywgQ1NTUmVzdWx0R3JvdXAsIGh0bWwsIExpdEVsZW1lbnQgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSwgc3RhdGUgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcbmltcG9ydCB7IHN0eWxlTWFwIH0gZnJvbSBcImxpdC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qc1wiO1xuXG5AY3VzdG9tRWxlbWVudChcIndpdGgtdG9vbHRpcFwiKVxuY2xhc3MgV2l0aFRvb2x0aXAgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgQHByb3BlcnR5KClcbiAgdGV4dCA9IFwiXCI7XG5cbiAgQHN0YXRlKClcbiAgbW91c2V4OiBudW1iZXIgPSAwO1xuXG4gIEBzdGF0ZSgpXG4gIG1vdXNleTogbnVtYmVyID0gMDtcblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuI21vdXNlbW92ZSk7XG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy4jbW91c2Vtb3ZlKTtcbiAgfVxuXG4gICNtb3VzZW1vdmUgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICB0aGlzLm1vdXNleCA9IGV2LnBhZ2VYO1xuICAgIHRoaXMubW91c2V5ID0gZXYucGFnZVk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnNvbGUubG9nKFwiUmVuZGVyaW5nXCIpO1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgPGRpdlxuICAgICAgICBpZD1cIm1lc3NhZ2VcIlxuICAgICAgICBzdHlsZT0ke3N0eWxlTWFwKHtcbiAgICAgICAgICBsZWZ0OiBgJHt0aGlzLm1vdXNleCArIDh9cHhgLFxuICAgICAgICAgIHRvcDogYCR7dGhpcy5tb3VzZXkgKyAxMH1weGAsXG4gICAgICAgIH0pfVxuICAgICAgPlxuICAgICAgICAke3RoaXMudGV4dH1cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBzdGF0aWMgc3R5bGVzPzogQ1NTUmVzdWx0R3JvdXAgfCB1bmRlZmluZWQgPSBjc3NgXG4gICAgOmhvc3Qge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgICAgaGVpZ2h0OiBmaXQtY29udGVudDtcbiAgICB9XG5cbiAgICBkaXYge1xuICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgYmFja2dyb3VuZDogYmxhY2s7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICBwYWRkaW5nOiAwLjI1ZW0gMC41ZW07XG4gICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgd2lkdGg6IG1heC1jb250ZW50O1xuICAgIH1cblxuICAgIEBrZXlmcmFtZXMgYXBwZWFyIHtcbiAgICAgIDAlIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgIH1cblxuICAgICAgMTAwJSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgOmhvc3QoOmhvdmVyKSBkaXYge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBhbmltYXRpb246IGFwcGVhciAyNTBtcyBsaW5lYXIgZm9yd2FyZHMgNzUwbXM7XG4gICAgfVxuICBgO1xufVxuIiwiaW1wb3J0IHsgY3NzLCBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSBcImxpdFwiO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHkgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcbmltcG9ydCB7IFN0YXR1cyB9IGZyb20gXCIuLi91dGlsL25ldFwiO1xuaW1wb3J0IFwiLi91dGlsL3dpdGgtdG9vbHRpcFwiO1xuXG5AY3VzdG9tRWxlbWVudChcImhvc3QtdG9nZ2xlXCIpXG5jbGFzcyBIb3N0VG9nZ2xlIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIEBwcm9wZXJ0eSgpXG4gIHN0YXR1czogU3RhdHVzIHwgXCJsb2NhbFwiID0gXCJsb2NhbFwiO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDwhLS0gUmVjdGFuZ3VsYXIgc3dpdGNoIC0tPlxuICAgICAgPGxhYmVsIGNsYXNzPVwic3dpdGNoXCI+XG4gICAgICAgIDx3aXRoLXRvb2x0aXAgdGV4dD0ke2h1bWFuKHRoaXMuc3RhdHVzKX0+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIEBpbnB1dD0ke3RoaXMudG9nZ2xlfSA/Y2hlY2tlZD0ke3RoaXMuc3RhdHVzICE9PSBcImxvY2FsXCJ9IC8+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJzbGlkZXIgcm91bmQgJHt0aGlzLnN0YXR1c31cIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwib24tc3BhY2VcIj5Ib3N0aW5nPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkb3RcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm9mZi1zcGFjZVwiPk9mZmxpbmU8L3NwYW4+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L3dpdGgtdG9vbHRpcD5cbiAgICAgIDwvbGFiZWw+XG4gICAgYDtcbiAgfVxuXG4gIHRvZ2dsZSA9IChldjogSW5wdXRFdmVudCkgPT4ge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoKGV2LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiZW5hYmxlXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImRpc2FibGVcIikpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBzdGF0aWMgc3R5bGVzID0gY3NzYFxuICAgIC5zbGlkZXIge1xuICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgICBmbGV4LXdyYXA6IG5vd3JhcDtcbiAgICAgIGhlaWdodDogMWVtO1xuICAgICAgdHJhbnNpdGlvbjogMC40cztcbiAgICAgIHBhZGRpbmc6IDAuMmVtO1xuICAgICAgbWluLXdpZHRoOiA0LjVlbTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIGJhY2tncm91bmQ6ICNjY2M7XG4gICAgfVxuXG4gICAgLm9wZW4ge1xuICAgICAgYmFja2dyb3VuZDogIzIxOTZmMztcbiAgICB9XG5cbiAgICAub3BlbmluZyB7XG4gICAgICBiYWNrZ3JvdW5kOiAjZmRjYjE4O1xuICAgIH1cblxuICAgIC5vcGVuaW5nID4gLm9uLXNwYWNlIHtcbiAgICAgIGNvbG9yOiBibGFjaztcbiAgICB9XG5cbiAgICBpbnB1dCB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgIGlucHV0OmNoZWNrZWQgKyAuc2xpZGVyIHtcbiAgICB9XG5cbiAgICBpbnB1dDpjaGVja2VkICsgLnNsaWRlciA+IC5vbi1zcGFjZSB7XG4gICAgICBmbGV4LWdyb3c6IDE7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cblxuICAgIGlucHV0OmNoZWNrZWQgKyAuc2xpZGVyID4gLm9mZi1zcGFjZSB7XG4gICAgICBmbGV4LWdyb3c6IDAgIWltcG9ydGFudDtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgLm9mZi1zcGFjZSB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgICAgZmxleC1ncm93OiAxICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgLm9uLXNwYWNlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICB3aWR0aDogMDtcbiAgICB9XG5cbiAgICAub24tc3BhY2UsXG4gICAgLm9mZi1zcGFjZSB7XG4gICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgIH1cblxuICAgIC5zbGlkZXIgPiBzcGFuIHtcbiAgICAgIGZsZXgtZ3JvdzogMDtcbiAgICAgIGZsZXgtYmFzaXM6IDA7XG4gICAgICB0cmFuc2l0aW9uOiAwLjRzO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB9XG5cbiAgICAucm91bmQge1xuICAgICAgYm9yZGVyLXJhZGl1czogMWVtO1xuICAgIH1cbiAgICAuZG90IHtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDFlbTtcbiAgICAgIG1pbi13aWR0aDogMWVtO1xuICAgICAgaGVpZ2h0OiAxZW07XG4gICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICB9XG4gIGA7XG59XG5cbmZ1bmN0aW9uIGh1bWFuKHM6IFN0YXR1cyB8IFwibG9jYWxcIikge1xuICBzd2l0Y2ggKHMpIHtcbiAgICBjYXNlIFwib3BlblwiOlxuICAgICAgcmV0dXJuIFwiSm9pbmFibGVcIjtcbiAgICBjYXNlIFwiY2xvc2VkXCI6XG4gICAgICByZXR1cm4gXCJPZmZsaW5lXCI7XG4gICAgY2FzZSBcIm9wZW5pbmdcIjpcbiAgICAgIHJldHVybiBcIk5vdCBKb2luYWJsZVwiO1xuICAgIGNhc2UgXCJsb2NhbFwiOlxuICAgICAgcmV0dXJuIFwiU3RhcnQgaG9zdGluZ1wiO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjc3MsIGh0bWwsIExpdEVsZW1lbnQgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgU3RhdHVzIH0gZnJvbSBcIi4uL3V0aWwvbmV0XCI7XG5pbXBvcnQgXCIuL3V0aWwvd2l0aC10b29sdGlwXCI7XG5cbkBjdXN0b21FbGVtZW50KFwiY2xpZW50LXN0YXR1c1wiKVxuY2xhc3MgQ2xpZW50U3RhdHVzIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIEBwcm9wZXJ0eSgpXG4gIHN0YXR1czogU3RhdHVzID0gXCJvcGVuaW5nXCI7XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPCEtLSBSZWN0YW5ndWxhciBzd2l0Y2ggLS0+XG4gICAgICA8c3BhbiBjbGFzcz1cInNsaWRlciByb3VuZCAke3RoaXMuc3RhdHVzfVwiPiAke2h1bWFuKHRoaXMuc3RhdHVzKX0gPC9zcGFuPlxuICAgIGA7XG4gIH1cblxuICB0b2dnbGUgPSAoZXY6IElucHV0RXZlbnQpID0+IHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKChldi50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCkge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImVuYWJsZVwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJkaXNhYmxlXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgc3RhdGljIHN0eWxlcyA9IGNzc2BcbiAgICAuc2xpZGVyIHtcbiAgICAgIGhlaWdodDogMWVtO1xuICAgICAgdHJhbnNpdGlvbjogMC40cztcbiAgICAgIHBhZGRpbmc6IDAuMmVtO1xuICAgICAgbWluLXdpZHRoOiA1ZW07XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuICAgIH1cblxuICAgIC5vcGVuIHtcbiAgICAgIGJhY2tncm91bmQ6ICMyMTk2ZjM7XG4gICAgfVxuXG4gICAgLm9wZW5pbmcge1xuICAgICAgYmFja2dyb3VuZDogI2ZkY2IxODtcbiAgICB9XG5cbiAgICAucm91bmQge1xuICAgICAgYm9yZGVyLXJhZGl1czogMWVtO1xuICAgIH1cbiAgYDtcbn1cblxuZnVuY3Rpb24gaHVtYW4oczogU3RhdHVzIHwgXCJsb2NhbFwiKSB7XG4gIHN3aXRjaCAocykge1xuICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgICByZXR1cm4gXCJDb25uZWN0ZWRcIjtcbiAgICBjYXNlIFwiY2xvc2VkXCI6XG4gICAgICByZXR1cm4gXCJEaXNjb25uZWN0ZWRcIjtcbiAgICBjYXNlIFwib3BlbmluZ1wiOlxuICAgICAgcmV0dXJuIFwiQ29ubmVjdGluZ1wiO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgdGltZW91dCA9IDxUPihwcm9tOiBQcm9taXNlPFQ+LCB0aW1lOiBudW1iZXIpOiBQcm9taXNlPFQ+ID0+XG4gIFByb21pc2UucmFjZShbcHJvbSwgbmV3IFByb21pc2UoKF9yLCByZWopID0+IHNldFRpbWVvdXQocmVqLCB0aW1lKSkgYXMgUHJvbWlzZTxUPl0pO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmV0cnk8VD4odGltZXM6IG51bWJlciwgcHJvbTogKCkgPT4gUHJvbWlzZTxUPik6IFByb21pc2U8VD4ge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgcHJvbSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICh0aW1lcy0tID09IDApIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGNzcywgaHRtbCwgTGl0RWxlbWVudCB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHF1ZXJ5LCBzdGF0ZSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgR2FtZUV2ZW50IH0gZnJvbSBcIi4uL2dhbWUvZ2FtZS1ldmVudHNcIjtcbmltcG9ydCB7IEJnRHJvcEV2ZW50LCBDYW52YXMsIFRva2VuRHJvcEV2ZW50LCBUb2tlblNlbGVjdEV2ZW50IH0gZnJvbSBcIi4vY2FudmFzXCI7XG5pbXBvcnQgXCIuL2J1eW1lYWNvZmZlZVwiO1xuaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuLi9nYW1lL2dhbWVcIjtcbmltcG9ydCB7IGlmRGVmaW5lZCB9IGZyb20gXCJsaXQvZGlyZWN0aXZlcy9pZi1kZWZpbmVkLmpzXCI7XG5pbXBvcnQgeyBtYXhfcCB9IGZyb20gXCIuLi91dGlsL21hdGhcIjtcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSBcIi4uL3V0aWwvaXRlclwiO1xuaW1wb3J0IHsgQ2xpZW50IH0gZnJvbSBcIi4uL25ldC9jbGllbnRcIjtcbmltcG9ydCB7IFNlcnZlciB9IGZyb20gXCIuLi9uZXQvc2VydmVyXCI7XG5pbXBvcnQgXCIuL3V0aWwvd2l0aC10b29sdGlwXCI7XG5pbXBvcnQgXCIuL2hvc3QtdG9nZ2xlXCI7XG5pbXBvcnQgXCIuL2NsaWVudC1zdGF0dXNcIjtcbmltcG9ydCB7IHRpbWVvdXQgfSBmcm9tIFwiLi4vdXRpbC9wcm9taXNlc1wiO1xuaW1wb3J0IHsgUGVlcklkIH0gZnJvbSBcIi4uL25ldC9ydGMvc2lnbmFsZXJcIjtcblxuQGN1c3RvbUVsZW1lbnQoXCJiZy1hcHBcIilcbmNsYXNzIEFwcCBleHRlbmRzIExpdEVsZW1lbnQge1xuICBAcXVlcnkoXCIjd2lkdGhcIiwgdHJ1ZSlcbiAgd2lkdGg/OiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gIEBxdWVyeShcIiNoZWlnaHRcIiwgdHJ1ZSlcbiAgaGVpZ2h0PzogSFRNTElucHV0RWxlbWVudDtcblxuICBAcXVlcnkoXCJiZy1jYW52YXNcIiwgdHJ1ZSlcbiAgY2FudmFzPzogQ2FudmFzO1xuXG4gIEBzdGF0ZSgpXG4gIGNsaWVudD86IENsaWVudDtcblxuICBAc3RhdGUoKVxuICBzZXJ2ZXI/OiBTZXJ2ZXI7XG5cbiAgQHN0YXRlKClcbiAgc2VsZWN0aW9uOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcblxuICBAc3RhdGUoKVxuICBob3N0X3BlbmRpbmcgPSBmYWxzZTtcblxuICBAc3RhdGUoKVxuICBjbGllbnRfcGVuZGluZyA9IGZhbHNlO1xuXG4gIGdhbWU6IEdhbWUgPSBuZXcgR2FtZSgpO1xuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgZXJyb3IgPVxuICAgICAgdGhpcy5jbGllbnQ/LnN0YXR1cy5jdXJyZW50ID09PSBcImNsb3NlZFwiXG4gICAgICAgID8gaHRtbGAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UgZXJyb3JcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxoMT5FcnJvciBjb25uZWN0aW5nIHRvIHJlbW90ZSBncmlkPC9oMT5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9JHt0aGlzLiNuZXdfbG9jYWx9Pk5ldyBsb2NhbCBncmlkPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5gXG4gICAgICAgIDogbnVsbDtcbiAgICBsZXQgY29ubmVjdGluZyA9IHRoaXMuY2xpZW50X3BlbmRpbmdcbiAgICAgID8gaHRtbGAgPGRpdiBjbGFzcz1cIm1lc3NhZ2VcIj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGgxPkNvbm5lY3RpbmcgdG8gZ3JpZC4uLjwvaDE+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PmBcbiAgICAgIDogbnVsbDtcbiAgICBsZXQgZGlzY29ubmVjdGVkID1cbiAgICAgIHRoaXMuY2xpZW50Py5zdGF0dXMuY3VycmVudCA9PT0gXCJjbG9zZWRcIlxuICAgICAgICA/IGh0bWxgIDxkaXYgY2xhc3M9XCJtZXNzYWdlXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8aDE+RGlzY29ubmVjdGVkIGZyb20gaG9zdDwvaDE+XG4gICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPSR7dGhpcy4jbmV3X2xvY2FsfT5Db250aW51ZSBsb2NhbGx5PC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5gXG4gICAgICAgIDogbnVsbDtcblxuICAgIGxldCBvdmVybGF5ID0gZXJyb3IgfHwgY29ubmVjdGluZyB8fCBkaXNjb25uZWN0ZWQ7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8c2VjdGlvbiBpZD1cInRvb2xiYXJcIiBjbGFzcz1cImdyb3VwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJncm91cFwiPlxuICAgICAgICAgICR7dGhpcy5jbGllbnRcbiAgICAgICAgICAgID8gaHRtbGA8Y2xpZW50LXN0YXR1cyBzdGF0dXM9JHt0aGlzLmNsaWVudC5zdGF0dXMuY3VycmVudH0+PC9jbGllbnQtc3RhdHVzPmBcbiAgICAgICAgICAgIDogaHRtbGA8aG9zdC10b2dnbGVcbiAgICAgICAgICAgICAgICBzdGF0dXM9JHt0aGlzLnNlcnZlcj8uc2lnbmFsZXIuc3RhdHVzLmN1cnJlbnQgPz8gXCJsb2NhbFwifVxuICAgICAgICAgICAgICAgIEBlbmFibGU9JHt0aGlzLiNob3N0fVxuICAgICAgICAgICAgICAgIEBkaXNhYmxlPSR7dGhpcy4jdW5ob3N0fVxuICAgICAgICAgICAgICA+PC9ob3N0LXRvZ2dsZT5gfVxuICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgR3JpZDpcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cIndpZHRoXCIgdHlwZT1cIm51bWJlclwiIG1pbj1cIjFcIiBAaW5wdXQ9JHt0aGlzLiN1cGRhdGVEaW19IC52YWx1ZT0ke3RoaXMuZ2FtZS5ib2FyZC5nZXQoXCJ3aWR0aFwiKSArIFwiXCJ9IC8+IHhcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cImhlaWdodFwiIHR5cGU9XCJudW1iZXJcIiBtaW49XCIxXCIgQGlucHV0PSR7dGhpcy4jdXBkYXRlRGltfSAudmFsdWU9JHt0aGlzLmdhbWUuYm9hcmQuZ2V0KFwiaGVpZ2h0XCIpICsgXCJcIn0gLz5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgJHt0aGlzLnNlbGVjdGlvbi5zaXplID09PSAxXG4gICAgICAgICAgICA/IGh0bWxgXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSR7KCkgPT4gdGhpcy5nYW1lLmFwcGx5KHsgdHlwZTogXCJ0b2tlbi1yZW9yZGVyXCIsIGlkOiBmaXJzdCh0aGlzLnNlbGVjdGlvbikhLCBpZHg6IFwiZG93blwiIH0pfVxuICAgICAgICAgICAgICAgICAgICA/ZGlzYWJsZWQ9JHt0cnVlIC8qdGhpcy5nYW1lLnRhYmxldG9wLnRva2Vucy5pbmRleChmaXJzdCh0aGlzLnNlbGVjdGlvbikhKSA9PT0gMCovfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICBNb3ZlIERvd25cbiAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBAY2xpY2s9JHsoKSA9PiB0aGlzLmdhbWUuYXBwbHkoeyB0eXBlOiBcInRva2VuLXJlb3JkZXJcIiwgaWQ6IGZpcnN0KHRoaXMuc2VsZWN0aW9uKSEsIGlkeDogXCJ1cFwiIH0pfVxuICAgICAgICAgICAgICAgICAgICA/ZGlzYWJsZWQ9JHt0cnVlIC8qdGhpcy5nYW1lLnRhYmxldG9wLnRva2Vucy5pbmRleChmaXJzdCh0aGlzLnNlbGVjdGlvbikhKSA9PT0gdGhpcy5nYW1lLnRhYmxldG9wLnRva2Vucy5zaXplIC0gMSovfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICBNb3ZlIFVwXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgOiBudWxsfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImdyb3VwXCI+XG4gICAgICAgICAgPGJ1eS1tZS1hLWNvZmZlZSBjbGFzcz1cInJpZ2h0XCI+PC9idXktbWUtYS1jb2ZmZWU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9zZWN0aW9uPlxuICAgICAgPGJnLWNhbnZhc1xuICAgICAgICBiZz0ke2lmRGVmaW5lZCh0aGlzLmdhbWUuYm9hcmQuZ2V0KFwiYmdcIikgPz8gdW5kZWZpbmVkKX1cbiAgICAgICAgLnNlbGVjdGlvbj0ke3RoaXMuc2VsZWN0aW9ufVxuICAgICAgICB3aWR0aD0ke3RoaXMuZ2FtZS5ib2FyZC5nZXQoXCJ3aWR0aFwiKX1cbiAgICAgICAgaGVpZ2h0PSR7dGhpcy5nYW1lLmJvYXJkLmdldChcImhlaWdodFwiKX1cbiAgICAgICAgLmJvYXJkPSR7dGhpcy5nYW1lLmJvYXJkfVxuICAgICAgICAuY2FsbG91dHM9JHt0aGlzLmdhbWUuY2FsbG91dHN9XG4gICAgICAgIEB0b2tlbi1kcm9wPSR7KHsgZGV0YWlsIH06IFRva2VuRHJvcEV2ZW50KSA9PiB0aGlzLmdhbWUuYWRkX3Rva2VuKGRldGFpbC5pbWcsIHsgbG9jOiBkZXRhaWwubG9jLCByOiAwLCBkaW06IGRldGFpbC5kaW0gfSl9XG4gICAgICAgIEBiZy1kcm9wPSR7KHsgZGV0YWlsIH06IEJnRHJvcEV2ZW50KSA9PiB0aGlzLmdhbWUuc2V0X2JnKGRldGFpbCl9XG4gICAgICAgIEB0b2tlbi1zZWxlY3Q9JHsoeyBkZXRhaWwgfTogVG9rZW5TZWxlY3RFdmVudCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2VsZWN0aW9uID0gbmV3IFNldChkZXRhaWwpO1xuICAgICAgICB9fVxuICAgICAgICBAZ2FtZS1ldmVudD0keyh7IGRldGFpbCB9OiBDdXN0b21FdmVudDxHYW1lRXZlbnQ+KSA9PiB0aGlzLmdhbWUuYXBwbHkoZGV0YWlsKX1cbiAgICAgID48L2JnLWNhbnZhcz5cbiAgICAgICR7b3ZlcmxheX1cbiAgICBgO1xuICB9XG5cbiAgdXBkYXRlZChjaGFuZ2VkUHJvcGVydGllczogTWFwPHN0cmluZywgYW55Pikge1xuICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoXCJjbGllbnRcIikpIHtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gYEJhdHRsZUdyaWQke3RoaXMuY2xpZW50ICYmIHRoaXMuY2xpZW50LnN0YXR1cy5jdXJyZW50ID09PSBcIm9wZW5cIiA/ICh0aGlzLnNlcnZlciA/IFwiLSBIb3N0aW5nXCIgOiBcIi0gQ29ubmVjdGVkXCIpIDogXCJcIn1gO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgXG4gICAgOmhvc3Qge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgZ3JpZDpcbiAgICAgICAgXCJ0b29sYmFyXCIgMzBweFxuICAgICAgICBcInZpZXdwb3J0XCIgbWlubWF4KDAsIDFmcilcbiAgICAgICAgLyBtaW5tYXgoMCwgMWZyKTtcbiAgICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICAgICAgLS11aS1iZzogI2Y5ZjlmYTtcbiAgICB9XG5cbiAgICAubWVzc2FnZSB7XG4gICAgICBncmlkLWFyZWE6IDEgLyAxIC8gMyAvIDE7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgei1pbmRleDogMjtcbiAgICB9XG5cbiAgICAucmlnaHQge1xuICAgICAganVzdGlmeS1zZWxmOiBlbmQ7XG4gICAgfVxuXG4gICAgYmctY2FudmFzIHtcbiAgICAgIGdyaWQtYXJlYTogdmlld3BvcnQ7XG4gICAgICB6LWluZGV4OiAxO1xuICAgIH1cblxuICAgIGlucHV0W3R5cGU9XCJudW1iZXJcIl0ge1xuICAgICAgd2lkdGg6IDNlbTtcbiAgICB9XG5cbiAgICAuZ3JvdXAge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBmbGV4LXdyYXA6IG5vd3JhcDtcbiAgICB9XG5cbiAgICAjdG9vbGJhciB7XG4gICAgICBncmlkLWFyZWE6IHRvb2xiYXI7XG4gICAgICBib3gtc2hhZG93OiAwIDAgNHB4IGdyYXk7XG4gICAgICB6LWluZGV4OiAyO1xuICAgICAgYmFja2dyb3VuZDogdmFyKC0tdWktYmcpO1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgcGFkZGluZzogMCAxZW07XG4gICAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHVuc2V0O1xuICAgIH1cbiAgICAuZ3JvdXAgaW1nIHtcbiAgICAgIHdpZHRoOiAxZW07XG4gICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIH1cbiAgYDtcblxuICAjdXBkYXRlRGltID0gKCkgPT4ge1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIHRoaXMuZ2FtZS5zZXRfZGltKG1heF9wKFsxLCAxXSwgW3BhcnNlSW50KHRoaXMud2lkdGg/LnZhbHVlKSA/PyAwLCBwYXJzZUludCh0aGlzLmhlaWdodD8udmFsdWUpID8/IDBdKSk7XG4gIH07XG5cbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICBjb25zb2xlLmxvZyh0aGlzLmdhbWUuYm9hcmQpO1xuICAgIHRoaXMuZ2FtZS5kb2Mub24oXCJ1cGRhdGVcIiwgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJVUERBVEVJTkdcIik7XG4gICAgICBmb3IgKGNvbnN0IGlkIG9mIHRoaXMuc2VsZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5ib2FyZC5nZXQoXCJ0b2tlbnNcIikuaGFzKGlkKSB8fCB0aGlzLnNlbGVjdGlvbi5kZWxldGUoaWQpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gICAgICB0aGlzLmNhbnZhcz8ucmVxdWVzdFVwZGF0ZSgpO1xuICAgIH0pO1xuICAgIHRoaXMuZ2FtZS5kb2Mub24oXCJhZnRlclRyYW5zYWN0aW9uXCIsICgpID0+IHtcbiAgICAgIHRoaXMuY2FudmFzPy5yZXF1ZXN0VXBkYXRlKCk7XG4gICAgfSk7XG4gICAgLy8gc2V0VGltZW91dCggYXN5bmMgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiZGVidWcgbm93IHBsZWFzZVwiKTtcblxuICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgIGxldCBnYW1lX2lkID0gcGFyYW1zLmdldChcImdhbWVcIikgYXMgUGVlcklkIHwgdW5kZWZpbmVkO1xuICAgIGlmICghZ2FtZV9pZCkgcmV0dXJuIGF3YWl0IHRoaXMuI25ld19sb2NhbCgpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKFwibmV3IGNsaWVudFwiKTtcbiAgICAgIHRoaXMuY2xpZW50ID0gbmV3IENsaWVudChnYW1lX2lkLCB0aGlzLmdhbWUpO1xuICAgICAgdGhpcy5jbGllbnQuc3RhdHVzLm9uKFwic3RhdHVzXCIsICgpID0+IHRoaXMucmVxdWVzdFVwZGF0ZSgpKTtcbiAgICAgIGNvbnNvbGUubG9nKFwid2FpdGluZyBmb3IgY29ubmVjdGlvblwiKTtcbiAgICAgIHRoaXMuY2xpZW50X3BlbmRpbmcgPSB0cnVlO1xuICAgICAgYXdhaXQgdGltZW91dCh0aGlzLmNsaWVudC5zdGF0dXMuY29ubmVjdGVkKCksIDUwMDApO1xuICAgICAgY29uc29sZS5sb2coXCJjb25uZWN0ZWRcIik7XG4gICAgfSBjYXRjaCB7XG4gICAgICBjb25zb2xlLmxvZyhcImdpdmluZyB1cFwiKTtcbiAgICAgIGF3YWl0IHRoaXMuI25ld19sb2NhbCgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmNsaWVudF9wZW5kaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gfSwgMjAwMCk7XG4gIH1cblxuICAjbmV3X2xvY2FsID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwibmV3IGxvY2FsLi4uXCIpO1xuICAgIHRoaXMuZ2FtZS5pbml0aWFsaXplX2JvYXJkKCk7XG4gICAgYXdhaXQgdGhpcy5jbGllbnQ/LnNodXRkb3duKCk7XG4gICAgdGhpcy5jbGllbnQgJiYgdGhpcy5jbGllbnQuc3RhdHVzLm9mZihcInN0YXR1c1wiLCB0aGlzLnJlcXVlc3RVcGRhdGUpO1xuICAgIHRoaXMuY2xpZW50ID0gdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBcIlwiLCB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdChcIj9cIilbMF0pO1xuICB9O1xuXG4gICN1cGRhdGUgPSAoKSA9PiB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcblxuICAjaG9zdCA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5jbGllbnQ/LnNodXRkb3duKCk7XG4gICAgICB0aGlzLmNsaWVudCA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy5ob3N0X3BlbmRpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5zZXJ2ZXIgPSBuZXcgU2VydmVyKHRoaXMuZ2FtZSk7XG4gICAgICB0aGlzLnNlcnZlci5zaWduYWxlci5zdGF0dXMub24oXCJzdGF0dXNcIiwgdGhpcy4jdXBkYXRlKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiV0FJVElOR1wiKTtcbiAgICAgIGF3YWl0IHRpbWVvdXQodGhpcy5zZXJ2ZXIuc2lnbmFsZXIuc3RhdHVzLmNvbm5lY3RlZCgpLCA1MDAwKTtcblxuICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHt9LCBcIlwiLCBcIj9nYW1lPVwiICsgdGhpcy5zZXJ2ZXIuc2lnbmFsZXIucGVlcl9pZCk7XG4gICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh3aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIGF3YWl0IHRoaXMuI3VuaG9zdDtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5ob3N0X3BlbmRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgI3VuaG9zdCA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgcyA9IHRoaXMuc2VydmVyO1xuICAgIHRoaXMuc2VydmVyID0gdW5kZWZpbmVkO1xuXG4gICAgYXdhaXQgcz8uc2h1dGRvd24oKTtcblxuICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgXCJcIiwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfTtcbn1cbiIsImltcG9ydCB7IHN0b3BfZXYgfSBmcm9tIFwiLi4vdXRpbC9ldmVudHNcIjtcbmltcG9ydCB7IGFkZF9wLCBkaXZfYywgZGl2X3AsIG1heF9wLCBtdWxfYywgbXVsX3AsIFBvaW50LCBzdWJfcCB9IGZyb20gXCIuLi91dGlsL21hdGhcIjtcblxudHlwZSBTdGF0ZSA9IHtcbiAgb2Zmc2V0OiBbMCwgMF07XG4gIHo6IG51bWJlcjtcbn07XG5cbmNvbnN0IE1BWF9TQ0FMRSA9IDQ7XG5jb25zdCBNSU5fU0NBTEUgPSAxO1xuY29uc3QgQVVUT19aT09NX0ZJTEwgPSAwLjk1OyAvLyBQZXJjZW50YWdlIG9mIHRoZSB2aWV3cG9ydCB0byBmaWxsIG9uIGZpcnN0IGxvYWRcblxuY29uc3QgU1BFRUQgPSAwLjAwMjsgLy8gMTAwIHB4IHBlciBzZWNvbmRcblxuZXhwb3J0IGNsYXNzIFBQWiBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgcm9vdDogU2hhZG93Um9vdDtcbiAgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcblxuICBzdGF0ZSA9IHsgejogMSwgc2Nyb2xsX3BvczogWzAsIDBdIGFzIFtudW1iZXIsIG51bWJlcl0gfTtcbiAgZGVzaXJlZF9zdGF0ZSA9IHsgejogMSB9O1xuXG4gIC8vIFRPRE86IHJlcGxhY2Ugd2l0aCBhIGBkZXNpcmVkX3N0YXRlLnNjcm9sbF9wb3NgIHRoYXQgd2UgaW50ZXJwb2xhdGVcblxuICAvKiogVGhlIHBvaW50IGFyb3VuZCB3aGljaCBhbiBhbmltYXRlZCB6b29tIG9wZXJhdGVzICovXG4gIG9yaWdpbiA9IFswLCAwXSBhcyBbbnVtYmVyLCBudW1iZXJdO1xuXG4gIC8qKiBMb2NhdGlvbiBvZiB0aGUgdmlld3BvcnQgaW4gY2xpZW50IHNwYWNlICovXG4gIHZsb2M6IFBvaW50ID0gWzAsIDBdIGFzIFBvaW50O1xuXG4gIC8qKiBEaW1lbnNpb25zIG9mIHRoZSB2aWV3cG9ydCAqL1xuICB2ZGltOiBQb2ludCA9IFswLCAwXSBhcyBQb2ludDtcblxuICAvKiogRGltZW5zaW9ucyBvZiB0aGUgY2xpZW50ICovXG4gIGNkaW06IFBvaW50ID0gWzAsIDBdIGFzIFBvaW50O1xuXG4gIC8qKiBPZmZzZXQgb2YgdGhlIGNsaWVudCB3aXRoaW4gdGhlIGludGVyaW9yIHNjcm9sbGFibGUgc3BhY2UuIFVzZWQgdG8gY2VudGVyIGNvbnRlbnQgKi9cbiAgb2Zmc2V0OiBQb2ludCA9IFswLCAwXSBhcyBQb2ludDtcblxuICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgem9vbWluZyBzaG91bGQgYmUgYW5pbWF0ZWQgb3IgaW1tZWRpYXRlICovXG4gIHNtb290aDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5yb290ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiBcIm9wZW5cIiB9KTtcbiAgICB0aGlzLnJvb3QuYXBwZW5kQ2hpbGQoUFBaLnRlbXBsYXRlKCkuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy5yb290LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyXCIpIGFzIEhUTUxEaXZFbGVtZW50O1xuICAgIHRoaXMuI3Jlc2l6ZV9vYnNlcnZlci5vYnNlcnZlKHRoaXMpO1xuICAgIHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKFwic2xvdFwiKSEub25zbG90Y2hhbmdlID0gKHsgdGFyZ2V0IH0pID0+IHtcbiAgICAgIGxldCBzbG90ID0gdGFyZ2V0IGFzIEhUTUxTbG90RWxlbWVudDtcbiAgICAgIGxldCBzdmcgPSBzbG90LmFzc2lnbmVkRWxlbWVudHMoKVswXSBhcyBTVkdTVkdFbGVtZW50O1xuICAgICAgdGhpcy4jcmVzaXplX29ic2VydmVyLm9ic2VydmUoc3ZnKTtcblxuICAgICAgdGhpcy5zbW9vdGggPSBmYWxzZTtcbiAgICB9O1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCAoKSA9PiAodGhpcy5zdGF0ZS5zY3JvbGxfcG9zID0gW3RoaXMuc2Nyb2xsTGVmdCwgdGhpcy5zY3JvbGxUb3BdKSk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiZ2VzdHVyZXN0YXJ0XCIsIHRoaXMuI2dlc3R1cmUuc3RhcnQpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImdlc3R1cmVjaGFuZ2VcIiwgdGhpcy4jZ2VzdHVyZS5jaGFuZ2UpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuI2tleWJvYXJkX3pvb20sIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gIH1cblxuICAjem9vbV90b19maXQoKSB7XG4gICAgbGV0IHN2ZyA9ICh0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihcInNsb3RcIikgYXMgSFRNTFNsb3RFbGVtZW50KS5hc3NpZ25lZEVsZW1lbnRzKClbMF0gYXMgU1ZHU1ZHRWxlbWVudDtcbiAgICBsZXQgZGltID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0aGlzLnZkaW0gPSBbZGltLndpZHRoLCBkaW0uaGVpZ2h0XSBhcyBQb2ludDtcbiAgICB0aGlzLmNkaW0gPSBbc3ZnLndpZHRoLmJhc2VWYWwudmFsdWUsIHN2Zy5oZWlnaHQuYmFzZVZhbC52YWx1ZV0gYXMgUG9pbnQ7XG4gICAgY29uc3Qgem9vbSA9IE1hdGgubWF4KE1JTl9TQ0FMRSwgTWF0aC5taW4oTUFYX1NDQUxFLCAuLi5tdWxfYyhkaXZfcCh0aGlzLnZkaW0sIHRoaXMuY2RpbSksIEFVVE9fWk9PTV9GSUxMKSkpO1xuICAgIHRoaXMuem9vbShbMCwgMF0sIHpvb20gLSB0aGlzLnN0YXRlLnopO1xuICB9XG5cbiAgI3Jlc2l6ZV9vYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgIGZvciAobGV0IGUgb2YgZW50cmllcykge1xuICAgICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzKSB7XG4gICAgICAgIHRoaXMudmRpbSA9IFtlLmNvbnRlbnRSZWN0LndpZHRoLCBlLmNvbnRlbnRSZWN0LmhlaWdodF07XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB0aGlzLnZsb2MgPSBbcmVjdC54LCByZWN0LnldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9AdHMtaWdub3JlO1xuICAgICAgICB0aGlzLmNkaW0gPSBbZS50YXJnZXQud2lkdGguYmFzZVZhbC52YWx1ZSwgZS50YXJnZXQuaGVpZ2h0LmJhc2VWYWwudmFsdWVdO1xuICAgICAgICB0aGlzLiN6b29tX3RvX2ZpdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY2VudGVyKCk7XG4gIH0pO1xuXG4gIGxvb3AgPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHBydjtcbiAgICBsZXQgdHM7XG4gICAgd2hpbGUgKCgocHJ2ID0gdHMpIHx8IHRydWUpICYmICh0cyA9IGF3YWl0IG5leHRfZnJhbWUoKSkpIHtcbiAgICAgIGlmICghcHJ2KSBjb250aW51ZTtcbiAgICAgIGxldCBkZWx0YSA9IHRoaXMuZGVzaXJlZF9zdGF0ZS56IC0gdGhpcy5zdGF0ZS56O1xuICAgICAgaWYgKGRlbHRhID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbGV0IGVsYXBzZWQgPSB0cyAtIHBydjtcblxuICAgICAgLy8gSWYgaXQncyBzbW9vdGgsIHdlJ2xsIG1vdmUgaW4gaW5jcmVtZW50cywgb3RoZXJ3aXNlIHBlcmZvcm0gYWxsIGFkanVzdG1lbnRzIGluIG9uZSBmcmFtZVxuICAgICAgbGV0IGRlbHRhX3NjYWxlID0gdGhpcy5zbW9vdGggPyBNYXRoLnNpZ24oZGVsdGEpICogTWF0aC5taW4oZWxhcHNlZCAqIFNQRUVEICogdGhpcy5zdGF0ZS56LCBNYXRoLmFicyhkZWx0YSkpIDogZGVsdGE7XG5cbiAgICAgIC8vIFJlY29yZCB0aGUgbmV3IHpcbiAgICAgIHRoaXMuc3RhdGUueiArPSBkZWx0YV9zY2FsZTtcblxuICAgICAgdGhpcy5jZW50ZXIoKTtcblxuICAgICAgLy8gQmUgc3VyZSB0byBwcmV2ZW50IG5lZ2F0aXZlIHNjcm9sbCBwb3NpdGlvbnNcbiAgICAgIHRoaXMuc3RhdGUuc2Nyb2xsX3BvcyA9IG1heF9wKFswLCAwXSwgYWRkX3AobXVsX2ModGhpcy5vcmlnaW4sIGRlbHRhX3NjYWxlKSwgdGhpcy5zdGF0ZS5zY3JvbGxfcG9zKSk7XG4gICAgICB0aGlzLnNjcm9sbFRvKHsgbGVmdDogdGhpcy5zdGF0ZS5zY3JvbGxfcG9zWzBdLCB0b3A6IHRoaXMuc3RhdGUuc2Nyb2xsX3Bvc1sxXSB9KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENlbnRlcnMgdGhlIGNvbnRlbnQgb24gdGhlIHNjcmVlbiBpZiBpdCBpcyBzbWFsbGVyIHRoYW4gdGhlIHZpZXdwb3J0LlxuICAgKiBUaGlzIHVwZGF0ZXMgdGhlIGBvZmZzZXRgIG1lbWJlciBhY2NvcmRpbmdseVxuICAgKi9cbiAgY2VudGVyKCkge1xuICAgIHRoaXMub2Zmc2V0ID0gbWF4X3AoWzAsIDBdLCBtdWxfYyhzdWJfcCh0aGlzLnZkaW0sIG11bF9jKHRoaXMuY2RpbSwgdGhpcy5zdGF0ZS56KSksIDAuNSkpO1xuICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHt0aGlzLm9mZnNldFswXX1weCwgJHt0aGlzLm9mZnNldFsxXX1weCkgc2NhbGUoJHt0aGlzLnN0YXRlLnp9KWA7XG4gIH1cblxuICAvKipcbiAgICogUnVucyB3aGVuIHRoZSBjb21wb25lbnQgaXMgYXR0YWNoZWQgdG8gdGhlIERPTS5cbiAgICogU2V0cyB1cCBvdXIgYW5pbWF0aW9uIGxvb3AgYW5kIGV2ZW50IGxpc3RlbmVlc1xuICAgKi9cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5sb29wKCk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgdGhpcy53aGVlbCwgeyBwYXNzaXZlOiBmYWxzZSwgY2FwdHVyZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhbiBpbmNyZW1lbnRhbCB6b29tIG9uIGEgbG9jYXRpb24gKHNjcmVlbiBjb29yZGluYXRlKVxuICAgKi9cbiAgem9vbSA9IChvcmlnaW46IFtudW1iZXIsIG51bWJlcl0sIGluYzogbnVtYmVyKSA9PiB7XG4gICAgLy8gU3RlcCAxOiBCb3VuZCB0aGUgcHJvcG9zZWQgZGVsdGEgYnkgdGhlIG1pbiBhbmQgbWF4IHNjYWxlXG4gICAgdGhpcy5kZXNpcmVkX3N0YXRlLnogPSBNYXRoLm1pbihNQVhfU0NBTEUsIE1hdGgubWF4KE1JTl9TQ0FMRSwgdGhpcy5kZXNpcmVkX3N0YXRlLnogKyBpbmMpKTtcblxuICAgIC8vIFN0ZXAgMjogUmVjb3JkIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbi5cbiAgICAvLyAgICAgICAgICBUT0RPOiBEZXRlcm1pbmUgaWYgd2Ugc3RpbGwgbmVlZCB0aGlzIHdoZW4gd2UgcmVjb3JkIG9uIHNjcm9sbCBldmVudFxuICAgIHRoaXMuc3RhdGUuc2Nyb2xsX3BvcyA9IFt0aGlzLnNjcm9sbExlZnQsIHRoaXMuc2Nyb2xsVG9wXTtcblxuICAgIC8vIFN0ZXAgMzogUmVjb3JkIHRoZSBvcmlnaW4gdGhlIHpvb20gaW4gY29udGVudC1sb2NhbCBjb29yZGluYXRlcy5cbiAgICAvLyAgICAgICAgICBUaGUgZ29hbCBvZiB6b29taW5nIGlzIHRvIGtlZXAgdGhpcyBjb29yZGluYXRlIGluIHRoZSBzYW1lIGNsaWVudCBsb2NhdGlvblxuICAgIHRoaXMub3JpZ2luID0gdGhpcy5jb29yZFRvTG9jYWwob3JpZ2luKTtcblxuICAgIC8vIFN0ZXAgNDogRG8gdGhlIHpvb21pbmc/IFdlIGhhdmUgYW4gYW5pbWF0aW9uIGxvb3AgcnVubmluZyBmb3IgdGhhdFxuICB9O1xuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhbiBpbmNyZW1lbnRhbCB6b29tIG9uIGEgbG9jYXRpb24gKGxvY2FsIGNvb3JkaW5hdGUgaW4gY29udGVudClcbiAgICovXG4gIHdoZWVsID0gKGV2OiBXaGVlbEV2ZW50KSA9PiB7XG4gICAgaWYgKCFldi5jdHJsS2V5KSByZXR1cm47XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgIC8vIEZpcmVmb3ggc2Nyb2xscyBieSBsaW5lcywgY2hyb21lIHNjcm9sbHMgYnkgcGl4ZWxzLCB0aGVyZSdzIG5vIGZvcm1hbFxuICAgIC8vIGRlZmluaXRpb24gb2Ygd2hhdCBhIFwibGluZVwiIGlzLCBidXQgbGV0J3MganVzdCBzYXkgaXQncyAxMCBweFxuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBldi5kZWx0YU1vZGUgPT09IFdoZWVsRXZlbnQuRE9NX0RFTFRBX0xJTkUgPyAxMCA6IDE7XG5cbiAgICAvLyBEb24ndCBsZXQgYW55IHdlaXJkIGlucHV0cyBjYXVzZSBhIGp1bXAgb2YgbW9yZSB0aGFuIDUwcHggLyA1IGxpbmVzXG4gICAgY29uc3QgZGVsdGEgPSBNYXRoLm1pbig1MCwgTWF0aC5tYXgoLTUwLCAtZXYuZGVsdGFZICogbXVsdGlwbGllcikpO1xuXG4gICAgLy8gVHVybiB0aGUgc2Nyb2xsIGRlbHRhIGludG8gYSB6b29tIGRlbHRhLiBXZSB1c2UgYSBtYWdpYyBzY2FsYXIsXG4gICAgLy8gIGJ1dCBub3RlIHRoYXQgd2Ugem9vbSAqbW9yZSogdGhlIG1vcmUgem9vbWVkIGluIHdlIGFyZS5cbiAgICBjb25zdCB6b29tID0gZGVsdGEgKiAwLjAwNSAqIHRoaXMuc3RhdGUuejtcblxuICAgIC8vIE9ubHkgZG8gc21vb3RoaW5nIGlmIHRoZSBkZWx0YSBpcyBsYXJnZS5cbiAgICAvLyBUaGlzIHNob3VsZCBjb3JyZXNwb25kIHRvIHVzaW5nIGEgc2Nyb2xsIHdoZWVsIGFzIG9wcG9zZWQgdG8gYSB0b3VjaHBhZFxuICAgIHRoaXMuc21vb3RoID0gTWF0aC5hYnMoZGVsdGEpID09PSA1MDtcblxuICAgIHRoaXMuem9vbShbZXYuY2xpZW50WCwgZXYuY2xpZW50WV0sIHpvb20pO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcjtcbiAgfTtcblxuICAja2V5Ym9hcmRfem9vbSA9IChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiem9vbSFcIiwgZXYuY3RybEtleSwgZXYua2V5KTtcbiAgICBpZiAoIWV2LmN0cmxLZXkpIHJldHVybjtcbiAgICBpZiAoZXYua2V5ID09PSBcIi1cIikge1xuICAgICAgdGhpcy5zbW9vdGggPSB0cnVlO1xuICAgICAgdGhpcy56b29tKHRoaXMuY29vcmRUb0xvY2FsKGFkZF9wKHRoaXMudmxvYywgZGl2X2ModGhpcy52ZGltLCAyKSkpLCAtMC4yICogdGhpcy5zdGF0ZS56KTtcbiAgICAgIHN0b3BfZXYoZXYpO1xuICAgIH0gZWxzZSBpZiAoZXYua2V5ID09PSBcIj1cIikge1xuICAgICAgdGhpcy5zbW9vdGggPSB0cnVlO1xuICAgICAgdGhpcy56b29tKHRoaXMuY29vcmRUb0xvY2FsKGFkZF9wKHRoaXMudmxvYywgZGl2X2ModGhpcy52ZGltLCAyKSkpLCAwLjIgKiB0aGlzLnN0YXRlLnopO1xuICAgICAgc3RvcF9ldihldik7XG4gICAgfSBlbHNlIGlmIChldi5rZXkgPT09IFwiMFwiKSB7XG4gICAgICB0aGlzLnNtb290aCA9IHRydWU7XG4gICAgICB0aGlzLiN6b29tX3RvX2ZpdCgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBHZXN0dXJlLWJhc2VkIHNjcm9sbGluZ1xuICAvLyBTYWZhcmkgcmVjb3JkcyBwaW5jaGVzIGFzIGdlc3R1cmUgZXZlbnRzIHJhdGhlciB0aGFuIHdoZWVsIGV2ZW50c1xuICAvLyBzbyB3ZSBoYXZlIHRvIGxpc3RlbiBmb3IgdGhlc2UgYXMgd2VsbFxuICAjZ2VzdHVyZSA9IHtcbiAgICBwcmV2X3NjYWxlOiAwLFxuICAgIG9yaWdpbjogWzAsIDBdIGFzIFtudW1iZXIsIG51bWJlcl0sXG4gICAgc3RhcnQ6IChldjogYW55KSA9PiB7XG4gICAgICBzdG9wX2V2KGV2KTtcbiAgICAgIHRoaXMuI2dlc3R1cmUub3JpZ2luID0gdGhpcy5jb29yZFRvTG9jYWwoW2V2LmNsaWVudFgsIGV2LmNsaWVudFldKTtcbiAgICAgIHRoaXMuI2dlc3R1cmUucHJldl9zY2FsZSA9IDE7XG4gICAgfSxcblxuICAgIGNoYW5nZTogKGV2OiBhbnkpID0+IHtcbiAgICAgIHN0b3BfZXYoZXYpO1xuICAgICAgdGhpcy56b29tKFxuICAgICAgICB0aGlzLiNnZXN0dXJlLm9yaWdpbixcbiAgICAgICAgLy8gSSdsbCBiZSByZWFsIEknbSBub3QgZW50aXJlbHkgc3VyZSB3aHkgdGhpcyBpcyB0aGUgbWFnaWMgbnVtYmVyXG4gICAgICAgIHRoaXMuc3RhdGUueiAqIChldi5zY2FsZSAtIHRoaXMuI2dlc3R1cmUucHJldl9zY2FsZSkgKiAxLjVcbiAgICAgICk7XG4gICAgICB0aGlzLiNnZXN0dXJlLnByZXZfc2NhbGUgPSBldi5zY2FsZTtcbiAgICB9LFxuICB9O1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBjbGllbnQgY29vcmRpbmF0ZXMgaW50byBjb250ZW50IGNvb3JkaW5hdGVzLCBhY2NvdW50aW5nIGZvclxuICAgKiB0aGUgdmlld3BvcnQncyBvZmZzZXQgYW5kIHNjYWxlXG4gICAqL1xuICBjb29yZFRvTG9jYWwoY2xpZW50X2Nvb3JkOiBbbnVtYmVyLCBudW1iZXJdKTogW251bWJlciwgbnVtYmVyXSB7XG4gICAgLy8gdjogVGhlIGNvb3JkaW5hdGUgb2YgdGhlIGV2ZW50IHdpdGhpbiB0byB0aGUgaW50ZXJpb3Igc2Nyb2xsYWJsZSBzcGFjZTpcbiAgICBjb25zdCB2ID0gYWRkX3Aoc3ViX3AoY2xpZW50X2Nvb3JkLCB0aGlzLnZsb2MpLCB0aGlzLnN0YXRlLnNjcm9sbF9wb3MpO1xuICAgIC8vIFdlIHdhbnQgdG8ganVzdCBkaXZpZGUgYnkgc2NhbGUsIGJ1dCBiZWZvcmUgd2UgY2FuIGRvIHRoYXQsIHdlIGhhdmUgdG8gc3VidHJhY3RcbiAgICAvLyBhbnkgb2Zmc2V0IG9uIHRoZSBjb250ZW50ICh0aGUgcmVzdWx0IG9mIG91ciBjZW50ZXJpbmcgb3BlcmF0aW9uKVxuICAgIGNvbnN0IHJlcyA9IGRpdl9jKHN1Yl9wKHYsIHRoaXMub2Zmc2V0KSwgdGhpcy5zdGF0ZS56KTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgc3RhdGljIHRlbXBsYXRlKCk6IEhUTUxUZW1wbGF0ZUVsZW1lbnQge1xuICAgIGxldCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICAgIHQuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPHN0eWxlPlxuICAgICAgICAgICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAjY29udGFpbmVyIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvc3R5bGU+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8c2xvdCBpZD1cImNvbnRlbnRcIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICByZXR1cm4gdDtcbiAgfVxufVxuXG5jb25zdCBuZXh0X2ZyYW1lID0gKCk6IFByb21pc2U8RE9NSGlnaFJlc1RpbWVTdGFtcD4gPT4gbmV3IFByb21pc2UoKHJlcykgPT4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZXMpKTtcblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwicC1wLXpcIiwgUFBaKTtcbiIsIi8vLyA8cmVmZXJlbmNlIGxpYj1cIkRPTVwiIC8+XG5cbmltcG9ydCBcIi4vdWkvc2FmYXJpLWZpeFwiO1xuaW1wb3J0IFwiLi91aS9jYW52YXNcIjtcbmltcG9ydCBcIi4vdWkvYXBwXCI7XG5pbXBvcnQgXCIuL3VpL2FwcFwiO1xuaW1wb3J0IFwiLi91aS9wcHBcIjtcblxuYXdhaXQgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoXCIuL3NlcnZpY2Utd29ya2VyLmpzXCIpO1xuXG5kb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXG4gIFwid2hlZWxcIixcbiAgKGV2KSA9PiB7XG4gICAgaWYgKGV2LmN0cmxLZXkpIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gIH0sXG4gIHsgcGFzc2l2ZTogZmFsc2UgfVxuKTtcbiJdLCJuYW1lcyI6WyJhcHBIZWlnaHQiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJ3aW5kb3ciLCJpbm5lckhlaWdodCIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImQiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJyZWNlaXZlciIsInN0YXRlIiwia2luZCIsImYiLCJUeXBlRXJyb3IiLCJoYXMiLCJjYWxsIiwidmFsdWUiLCJnZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0Iiwic2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInQiLCJTaGFkb3dSb290IiwiU2hhZHlDU1MiLCJuYXRpdmVTaGFkb3ciLCJEb2N1bWVudCIsInByb3RvdHlwZSIsIkNTU1N0eWxlU2hlZXQiLCJlIiwiU3ltYm9sIiwibiIsIldlYWtNYXAiLCJzIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwiXyRjc3NSZXN1bHQkIiwiRXJyb3IiLCJjc3NUZXh0Iiwic3R5bGVTaGVldCIsIm8iLCJyZXBsYWNlU3luYyIsInRvU3RyaW5nIiwicmVkdWNlIiwiUyIsImNzc1J1bGVzIiwidHJ1c3RlZFR5cGVzIiwiZW1wdHlTY3JpcHQiLCJoIiwicmVhY3RpdmVFbGVtZW50UG9seWZpbGxTdXBwb3J0IiwidG9BdHRyaWJ1dGUiLCJCb29sZWFuIiwiQXJyYXkiLCJKU09OIiwic3RyaW5naWZ5IiwiZnJvbUF0dHJpYnV0ZSIsIk51bWJlciIsInBhcnNlIiwibCIsImF0dHJpYnV0ZSIsInR5cGUiLCJTdHJpbmciLCJjb252ZXJ0ZXIiLCJyZWZsZWN0IiwiaGFzQ2hhbmdlZCIsImEiLCJIVE1MRWxlbWVudCIsInN1cGVyIiwiXyRFaSIsIk1hcCIsImlzVXBkYXRlUGVuZGluZyIsImhhc1VwZGF0ZWQiLCJfJEVsIiwidSIsInN0YXRpYyIsInB1c2giLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJmaW5hbGl6ZSIsImVsZW1lbnRQcm9wZXJ0aWVzIiwiZm9yRWFjaCIsIl8kRXAiLCJfJEV2Iiwibm9BY2Nlc3NvciIsImhhc093blByb3BlcnR5IiwiZ2V0UHJvcGVydHlEZXNjcmlwdG9yIiwicmVxdWVzdFVwZGF0ZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJmaW5hbGl6ZWQiLCJnZXRQcm90b3R5cGVPZiIsInByb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiY3JlYXRlUHJvcGVydHkiLCJlbGVtZW50U3R5bGVzIiwiZmluYWxpemVTdHlsZXMiLCJzdHlsZXMiLCJpc0FycmF5IiwiU2V0IiwiZmxhdCIsInJldmVyc2UiLCJ1bnNoaWZ0IiwidG9Mb3dlckNhc2UiLCJfJEVfIiwiUHJvbWlzZSIsImVuYWJsZVVwZGF0aW5nIiwiXyRBTCIsIl8kRWciLCJhZGRDb250cm9sbGVyIiwiXyRFUyIsInJlbmRlclJvb3QiLCJpc0Nvbm5lY3RlZCIsImhvc3RDb25uZWN0ZWQiLCJyZW1vdmVDb250cm9sbGVyIiwic3BsaWNlIiwiaW5kZXhPZiIsImNyZWF0ZVJlbmRlclJvb3QiLCJzaGFkb3dSb290IiwiYXR0YWNoU2hhZG93Iiwic2hhZG93Um9vdE9wdGlvbnMiLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJtYXAiLCJjcmVhdGVFbGVtZW50IiwibGl0Tm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImhvc3REaXNjb25uZWN0ZWQiLCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2siLCJfJEFLIiwiXyRFTyIsInJlbW92ZUF0dHJpYnV0ZSIsImdldFByb3BlcnR5T3B0aW9ucyIsIl8kRUMiLCJfJEVqIiwiYXN5bmMiLCJyZWplY3QiLCJzY2hlZHVsZVVwZGF0ZSIsInBlcmZvcm1VcGRhdGUiLCJzaG91bGRVcGRhdGUiLCJ3aWxsVXBkYXRlIiwiaG9zdFVwZGF0ZSIsInVwZGF0ZSIsIl8kRWsiLCJfJEFFIiwiaG9zdFVwZGF0ZWQiLCJmaXJzdFVwZGF0ZWQiLCJ1cGRhdGVkIiwidXBkYXRlQ29tcGxldGUiLCJnZXRVcGRhdGVDb21wbGV0ZSIsIm1vZGUiLCJSZWFjdGl2ZUVsZW1lbnQiLCJnbG9iYWxUaGlzIiwicmVhY3RpdmVFbGVtZW50VmVyc2lvbnMiLCJjcmVhdGVQb2xpY3kiLCJjcmVhdGVIVE1MIiwiTWF0aCIsInJhbmRvbSIsInNsaWNlIiwiY3JlYXRlQ29tbWVudCIsIml0ZXJhdG9yIiwidiIsIl8iLCJtIiwiZyIsInAiLCJfJGxpdFR5cGUkIiwic3RyaW5ncyIsInZhbHVlcyIsIiQiLCJ5IiwiYiIsImZvciIsInciLCJUIiwiQSIsImNyZWF0ZVRyZWVXYWxrZXIiLCJDIiwibGFzdEluZGV4IiwiZXhlYyIsInRlc3QiLCJSZWdFeHAiLCJzdGFydHNXaXRoIiwiRSIsInBhcnRzIiwiZWwiLCJjdXJyZW50Tm9kZSIsImNvbnRlbnQiLCJmaXJzdENoaWxkIiwicmVtb3ZlIiwiYXBwZW5kIiwiY2hpbGROb2RlcyIsIm5leHROb2RlIiwibm9kZVR5cGUiLCJoYXNBdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlTmFtZXMiLCJlbmRzV2l0aCIsImdldEF0dHJpYnV0ZSIsInNwbGl0IiwiaW5kZXgiLCJuYW1lIiwiY3RvciIsIk0iLCJIIiwiSSIsInRhZ05hbWUiLCJkYXRhIiwiaW5uZXJIVE1MIiwiUCIsIl8kQ2wiLCJfJEN1IiwiXyRsaXREaXJlY3RpdmUkIiwiXyRBTyIsIl8kQVQiLCJfJEFTIiwiViIsIl8kQU4iLCJfJEFEIiwiXyRBTSIsInBhcmVudE5vZGUiLCJfJEFVIiwiY3JlYXRpb25TY29wZSIsImltcG9ydE5vZGUiLCJOIiwibmV4dFNpYmxpbmciLCJMIiwiXyRBSSIsIl8kQUgiLCJfJEFBIiwiXyRBQiIsIm9wdGlvbnMiLCJfJENnIiwic3RhcnROb2RlIiwiZW5kTm9kZSIsIl8kQVIiLCJrIiwiaW5zZXJ0QmVmb3JlIiwiY3JlYXRlVGV4dE5vZGUiLCJfJEFDIiwiXyRBUCIsInNldENvbm5lY3RlZCIsImVsZW1lbnQiLCJmaWxsIiwiY2FwdHVyZSIsIm9uY2UiLCJwYXNzaXZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhbmRsZUV2ZW50IiwiaG9zdCIsIlIiLCJqIiwiRCIsIkYiLCJPIiwiVyIsIkIiLCJaIiwieiIsImxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQiLCJsaXRIdG1sVmVyc2lvbnMiLCJyZW5kZXJPcHRpb25zIiwiXyREbyIsInJlbmRlckJlZm9yZSIsInJlbmRlciIsIl8kbGl0UGFydCQiLCJfJGxpdEVsZW1lbnQkIiwibGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0IiwiTGl0RWxlbWVudCIsImxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQiLCJsaXRFbGVtZW50VmVyc2lvbnMiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImVsZW1lbnRzIiwiZmluaXNoZXIiLCJkZXNjcmlwdG9yIiwicGxhY2VtZW50Iiwib3JpZ2luYWxLZXkiLCJpbml0aWFsaXplciIsImFzc2lnbiIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MU2xvdEVsZW1lbnQiLCJhc3NpZ25lZEVsZW1lbnRzIiwiXyRDdCIsIl8kQ2kiLCJfJEFRIiwiZHQiLCJrZXlzIiwidXQiLCJ4IiwiYWRkX3AiLCJhZGRfYyIsInN1Yl9wIiwibXVsX2MiLCJkaXZfYyIsIm1heF9wIiwibWF4IiwibWluX3AiLCJtaW4iLCJjbGFtcF9wIiwiZXFfcCIsImlzX3ByaW1hcnlfZG93biIsImV2IiwiaXNQcmltYXJ5IiwicG9pbnRlclR5cGUiLCJwcmVzc3VyZSIsImlzX21vdXNlX2Rvd24iLCJidXR0b25zIiwic3RvcF9ldiIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwid2luZG93X2V2IiwiZGV0YWlsIiwiQ3VzdG9tRXZlbnQiLCJnZXRJbWFnZSIsImRhdGFJdGVtcyIsImRhdGFUcmFuc2ZlciIsIml0ZW1zIiwicmVzb2x2ZSIsImNvbnNvbGUiLCJsb2ciLCJnZXRBc0ZpbGUiLCJnZXRBc1N0cmluZyIsImV4dHJhY3RVUkxGcm9tSFRNTCIsImh0bWwiLCJ1cmwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJzcmMiLCJnYW1lX2V2ZW50IiwiZmlyc3QiLCJpdGVyIiwibmV4dCIsIml0ZW0iLCJyZXBsYWNlIiwiY3QiLCJhZGQiLCJkZWxldGUiLCJpbmNsdWRlcyIsInJlbW92ZVByb3BlcnR5IiwiQ2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJzZWxlY3Rpb24iLCJjYWxsb3V0cyIsIl9DYW52YXNfc2JveCIsIl9DYW52YXNfbW91c2VfbG9jIiwiX0NhbnZhc19kcmFnX2RlcHRoIiwiX0NhbnZhc19kcmFnX2VudGVyIiwiX2EiLCJfQ2FudmFzX2RyYWdfb3ZlciIsImNlbGwiLCJfQ2FudmFzX3NjcmVlbl90b19zdmciLCJvY2N1cGllZF9jZWxsIiwiX2Ryb3BfaGludCIsImhvdmVyaW5nIiwiX0NhbnZhc19kcmFnX2xlYXZlIiwidW5kZWZpbmVkIiwiX0NhbnZhc19iZ19kcmFnX292ZXIiLCJfQ2FudmFzX2JnX2Ryb3AiLCJpbWciLCJkaXNwYXRjaEV2ZW50IiwiX0NhbnZhc19kcm9wIiwibG9jIiwiZGltIiwiX0NhbnZhc19tb3VzZV9mb2N1cyIsIl9DYW52YXNfZm9jdXMiLCJfQ2FudmFzX3RvdWNoX2ZvY3VzIiwiaXNfcHJpbWFyeV90b3VjaCIsImlkIiwic2hpZnRLZXkiLCJjdHJsS2V5IiwiZmlsdGVyIiwiX0NhbnZhc19kcmFnX29mZnNldCIsIl9DYW52YXNfc2VsZWN0aW9uX3RyYW5zZm9ybSIsIm1vdmUiLCJyZXNpemUiLCJ2aWV3cG9ydCIsImNvb3JkVG9Mb2NhbCIsImNsaWVudFgiLCJjbGllbnRZIiwiX0NhbnZhc19rZXlkb3duIiwia2V5Q29kZSIsImlkcyIsImZyb20iLCJib2FyZCIsIkFycm93VXAiLCJBcnJvd0Rvd24iLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0IiwidG9rZW5zIiwiX0NhbnZhc19pbnN0YW5jZXMiLCJfQ2FudmFzX2RpbV9nZXQiLCJzYmJveCIsInNlbGVjdGVkIiwic2l6ZSIsIl9DYW52YXNfc2JveF9zdGFydCIsIl9DYW52YXNfc2JveF9tb3ZlIiwiX0NhbnZhc19zYm94X3N0b3AiLCJQQURESU5HIiwic3R5bGVNYXAiLCJiZyIsInN2ZyIsInJlcGVhdCIsInRpZCIsIkxJTkVfV0lEVEgiLCJtYXJrX2xvYWRlZCIsImJib3giLCJzdGFydCIsImVuZCIsInByZXZlbnRfc2FmYXJpX3Njcm9sbCIsInNlbGVjdGlvbl9kcmFnX3N0YXJ0Iiwic2VsZWN0aW9uX2RyYWciLCJzZWxlY3Rpb25fZHJhZ19lbmQiLCJwaW4iLCJtb3VzZSIsImFicyIsInBvaW50IiwiQ0FMTE9VVF9ESU0iLCJzaWduIiwiUk9UQVRFX1NJWkUiLCJzdmdfY29vcmQiLCJzZXRQb2ludGVyQ2FwdHVyZSIsInBvaW50ZXJJZCIsImdyaWRfbG9jIiwiY2xhc3NlcyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwibmVhcmVzdF9jb3JuZXIiLCJjZW50ZXIiLCJyZWwiLCJkZWciLCJhdGFuMiIsIlBJIiwicm91bmQiLCJsb2NhbCIsImFic19wIiwiYm94Iiwic2VsIiwiaW50ZXJzZWN0IiwiX0NhbnZhc19zZWxlY3Rpb25fYmJveCIsInRvSlNPTiIsImNzcyIsInByb3BlcnR5IiwicXVlcnkiLCJldmVudE9wdGlvbnMiLCJjdXN0b21FbGVtZW50IiwiQnV5TWVBQ29mZmVlIiwiX3N0YXRlIiwiX2xvYWRlZCIsIl9idXkiLCJfQnV5TWVBQ29mZmVlX2Nsb3NlIiwiX0J1eU1lQUNvZmZlZV9pZnJhbWVfbG9hZCIsImNyZWF0ZSIsImNvcHkiLCJzZXRJZlVuZGVmaW5lZCIsImNyZWF0ZVQiLCJsYXN0IiwiYXJyIiwiYXBwZW5kVG8iLCJkZXN0IiwiT2JzZXJ2YWJsZSIsIl9vYnNlcnZlcnMiLCJtYXAuY3JlYXRlIiwib24iLCJtYXAuc2V0SWZVbmRlZmluZWQiLCJzZXQuY3JlYXRlIiwiX2YiLCJhcmdzIiwib2ZmIiwib2JzZXJ2ZXJzIiwiZW1pdCIsImFycmF5LmZyb20iLCJkZXN0cm95IiwiZmxvb3IiLCJsb2cxMCIsImlzTmVnYXRpdmVaZXJvIiwidHJpbUxlZnRSZWdleCIsImZyb21DYW1lbENhc2VSZWdleCIsImZyb21DYW1lbENhc2UiLCJzZXBhcmF0b3IiLCJ0cmltTGVmdCIsIm1hdGNoIiwiVGV4dEVuY29kZXIiLCJ1dGY4VGV4dERlY29kZXIiLCJUZXh0RGVjb2RlciIsImZhdGFsIiwiaWdub3JlQk9NIiwiZGVjb2RlIiwiVWludDhBcnJheSIsInVuZGVmaW5lZFRvTnVsbCIsIl9sb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwibmV3VmFsdWUiLCJnZXRJdGVtIiwidXNlUG9seWZpbGwiLCJsb2NhbFN0b3JhZ2UiLCJ2YXJTdG9yYWdlIiwiaXNOb2RlIiwicHJvY2VzcyIsInJlbGVhc2UiLCJwYXJhbXMiLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSIsImhhc1BhcmFtIiwicGFyZ3MiLCJhcmd2IiwiY3VyclBhcmFtTmFtZSIsInBhcmciLCJsb2NhdGlvbiIsInNlYXJjaCIsImt2Iiwic3RyaW5nLmZyb21DYW1lbENhc2UiLCJjb21wdXRlUGFyYW1zIiwiY29uZGl0aW9ucy51bmRlZmluZWRUb051bGwiLCJlbnYiLCJ0b1VwcGVyQ2FzZSIsInN0b3JhZ2UudmFyU3RvcmFnZSIsImdldFZhcmlhYmxlIiwiRGVjb2RlciIsInVpbnQ4QXJyYXkiLCJwb3MiLCJjcmVhdGVEZWNvZGVyIiwicmVhZFZhclVpbnQ4QXJyYXkiLCJkZWNvZGVyIiwibGVuIiwidmlldyIsImJ1ZmZlci5jcmVhdGVVaW50OEFycmF5Vmlld0Zyb21BcnJheUJ1ZmZlciIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJyZWFkVWludDhBcnJheSIsInJlYWRWYXJVaW50IiwicmVhZFVpbnQ4IiwibnVtIiwicmVhZFZhckludCIsInJlYWRWYXJTdHJpbmciLCJyZW1haW5pbmdMZW4iLCJlbmNvZGVkU3RyaW5nIiwiZnJvbUNvZGVQb2ludCIsIm5leHRMZW4iLCJieXRlcyIsInN1YmFycmF5IiwiYXBwbHkiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlc2NhcGUiLCJyZWFkRnJvbURhdGFWaWV3IiwiZHYiLCJEYXRhVmlldyIsInJlYWRBbnlMb29rdXBUYWJsZSIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0IiwiZ2V0QmlnSW50NjQiLCJvYmoiLCJyZWFkQW55IiwiUmxlRGVjb2RlciIsInJlYWRlciIsImNvdW50IiwicmVhZCIsIlVpbnRPcHRSbGVEZWNvZGVyIiwiaXNOZWdhdGl2ZSIsIm1hdGguaXNOZWdhdGl2ZVplcm8iLCJJbnREaWZmT3B0UmxlRGVjb2RlciIsImRpZmYiLCJoYXNDb3VudCIsIlN0cmluZ0RlY29kZXIiLCJzdHIiLCJzcG9zIiwicmVzIiwiY3JlYXRlVWludDhBcnJheVZpZXdGcm9tQXJyYXlCdWZmZXIiLCJjb3B5VWludDhBcnJheSIsIm5ld0J1ZiIsImJ5dGVMZW5ndGgiLCJpc0ludGVnZXIiLCJpc0Zpbml0ZSIsIm1hdGguZmxvb3IiLCJFbmNvZGVyIiwiY3BvcyIsImNidWYiLCJidWZzIiwiY3JlYXRlRW5jb2RlciIsInRvVWludDhBcnJheSIsImVuY29kZXIiLCJ1aW50OGFyciIsImN1clBvcyIsIndyaXRlIiwiYnVmZmVyTGVuIiwid3JpdGVVaW50OCIsIndyaXRlVmFyVWludCIsIndyaXRlVmFySW50Iiwid3JpdGVWYXJTdHJpbmciLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImNvZGVQb2ludEF0Iiwid3JpdGVVaW50OEFycmF5IiwibGVmdENvcHlMZW4iLCJtYXRoLm1pbiIsInJpZ2h0Q29weUxlbiIsIm1hdGgubWF4Iiwid3JpdGVWYXJVaW50OEFycmF5Iiwid3JpdGVPbkRhdGFWaWV3IiwidmVyaWZ5TGVuIiwiZHZpZXciLCJmbG9hdFRlc3RCZWQiLCJBcnJheUJ1ZmZlciIsIndyaXRlQW55IiwibnVtYmVyLmlzSW50ZWdlciIsIm1hdGguYWJzIiwic2V0RmxvYXQzMiIsIndyaXRlRmxvYXQzMiIsInNldEZsb2F0NjQiLCJ3cml0ZUZsb2F0NjQiLCJzZXRCaWdJbnQ2NCIsIndyaXRlQmlnSW50NjQiLCJSbGVFbmNvZGVyIiwid3JpdGVyIiwiZmx1c2hVaW50T3B0UmxlRW5jb2RlciIsIlVpbnRPcHRSbGVFbmNvZGVyIiwiZmx1c2hJbnREaWZmT3B0UmxlRW5jb2RlciIsImVuY29kZWREaWZmIiwiSW50RGlmZk9wdFJsZUVuY29kZXIiLCJTdHJpbmdFbmNvZGVyIiwic2FyciIsImxlbnNFIiwic3RyaW5nIiwiam9pbiIsInBlcmYiLCJwZXJmb3JtYW5jZSIsImlzb0NyeXB0byIsImNyeXB0byIsImNyeXB0b1JhbmRvbUJ1ZmZlciIsImJ1ZiIsImdldFJhbmRvbVZhbHVlcyIsImNlaWwiLCJicm93c2VyIiwiaXNvQnJvd3NlciIsInJlcXVpcmUkJDAiLCJyZXF1aXJlJCQxIiwibm9kZUNyeXB0byIsInJlcXVpcmUkJDIiLCJjcnlwdG9SYW5kb21CdWZmZXJfMSIsInJhbmRvbUJ5dGVzIiwidWludDMyIiwiVWludDMyQXJyYXkiLCJ1dWlkdjRUZW1wbGF0ZSIsInV1aWR2NCIsImdldFVuaXhUaW1lIiwiRGF0ZSIsIm5vdyIsIm1ldGhvZFVuaW1wbGVtZW50ZWQiLCJ1bmV4cGVjdGVkQ2FzZSIsImVxdWFsRmxhdCIsImV2ZXJ5IiwidmFsIiwiaGFzUHJvcGVydHkiLCJjYWxsQWxsIiwiZnMiLCJQYWlyIiwibGVmdCIsInJpZ2h0IiwiZG9jIiwibWFwVG9TdHlsZVN0cmluZyIsIm1hcC5tYXAiLCJFTEVNRU5UX05PREUiLCJURVhUX05PREUiLCJDREFUQV9TRUNUSU9OX05PREUiLCJDT01NRU5UX05PREUiLCJET0NVTUVOVF9OT0RFIiwiRE9DVU1FTlRfVFlQRV9OT0RFIiwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERSIsIkJPTEQiLCJzeW1ib2wuY3JlYXRlIiwiVU5CT0xEIiwiQkxVRSIsIkdSRVkiLCJHUkVFTiIsIlJFRCIsIlBVUlBMRSIsIk9SQU5HRSIsIlVOQ09MT1IiLCJfYnJvd3NlclN0eWxlTWFwIiwicGFpci5jcmVhdGUiLCJfbm9kZVN0eWxlTWFwIiwiY29tcHV0ZUxvZ2dpbmdBcmdzIiwiZW52LmlzTm9kZSIsInN0ckJ1aWxkZXIiLCJsb2dBcmdzIiwiYXJnIiwiY3VycmVudFN0eWxlIiwiZG9tLm1hcFRvU3R5bGVTdHJpbmciLCJ2Y29uc29sZXMiLCJjcmVhdGVJdGVyYXRvciIsIml0ZXJhdG9yTWFwIiwiZm1hcCIsImRvbmUiLCJEZWxldGVJdGVtIiwiY2xvY2siLCJEZWxldGVTZXQiLCJjbGllbnRzIiwiaXRlcmF0ZURlbGV0ZWRTdHJ1Y3RzIiwidHJhbnNhY3Rpb24iLCJkcyIsImRlbGV0ZXMiLCJjbGllbnRpZCIsInN0cnVjdHMiLCJzdG9yZSIsImRlbCIsIml0ZXJhdGVTdHJ1Y3RzIiwiaXNEZWxldGVkIiwiZGlzIiwiY2xpZW50IiwibWlkaW5kZXgiLCJtaWQiLCJtaWRjbG9jayIsImZpbmRJbmRleERTIiwic29ydEFuZE1lcmdlRGVsZXRlU2V0IiwiZGVscyIsInNvcnQiLCJhZGRUb0RlbGV0ZVNldCIsImNyZWF0ZURlbGV0ZVNldCIsIndyaXRlRGVsZXRlU2V0IiwiZW5jb2Rpbmcud3JpdGVWYXJVaW50IiwicmVzdEVuY29kZXIiLCJkc2l0ZW1zIiwicmVzZXREc0N1clZhbCIsIndyaXRlRHNDbG9jayIsIndyaXRlRHNMZW4iLCJyZWFkRGVsZXRlU2V0IiwibnVtQ2xpZW50cyIsImRlY29kaW5nLnJlYWRWYXJVaW50IiwicmVzdERlY29kZXIiLCJudW1iZXJPZkRlbGV0ZXMiLCJkc0ZpZWxkIiwicmVhZERzQ2xvY2siLCJyZWFkRHNMZW4iLCJyZWFkQW5kQXBwbHlEZWxldGVTZXQiLCJ1bmFwcGxpZWREUyIsImdldFN0YXRlIiwiY2xvY2tFbmQiLCJmaW5kSW5kZXhTUyIsInN0cnVjdCIsImRlbGV0ZWQiLCJzcGxpdEl0ZW0iLCJVcGRhdGVFbmNvZGVyVjIiLCJnZW5lcmF0ZU5ld0NsaWVudElkIiwicmFuZG9tLnVpbnQzMiIsIkRvYyIsImd1aWQiLCJyYW5kb20udXVpZHY0IiwiY29sbGVjdGlvbmlkIiwiZ2MiLCJnY0ZpbHRlciIsIm1ldGEiLCJhdXRvTG9hZCIsInNob3VsZExvYWQiLCJjbGllbnRJRCIsInNoYXJlIiwiU3RydWN0U3RvcmUiLCJfdHJhbnNhY3Rpb24iLCJfdHJhbnNhY3Rpb25DbGVhbnVwcyIsInN1YmRvY3MiLCJfaXRlbSIsImlzTG9hZGVkIiwid2hlbkxvYWRlZCIsInByb21pc2UuY3JlYXRlIiwibG9hZCIsInRyYW5zYWN0Iiwic3ViZG9jc0xvYWRlZCIsImdldFN1YmRvY3MiLCJnZXRTdWJkb2NHdWlkcyIsIm9yaWdpbiIsIlR5cGVDb25zdHJ1Y3RvciIsIkFic3RyYWN0VHlwZSIsIl9pbnRlZ3JhdGUiLCJDb25zdHIiLCJfbWFwIiwicGFyZW50IiwiX3N0YXJ0IiwiX2xlbmd0aCIsImdldEFycmF5IiwiWUFycmF5IiwiZ2V0VGV4dCIsIllUZXh0IiwiZ2V0TWFwIiwiWU1hcCIsImdldFhtbEZyYWdtZW50IiwiWVhtbEZyYWdtZW50Iiwic3ViZG9jIiwib3B0cyIsInN1YmRvY3NBZGRlZCIsInN1YmRvY3NSZW1vdmVkIiwiZXZlbnROYW1lIiwiRFNEZWNvZGVyVjEiLCJVcGRhdGVEZWNvZGVyVjEiLCJyZWFkTGVmdElEIiwiY3JlYXRlSUQiLCJyZWFkUmlnaHRJRCIsInJlYWRDbGllbnQiLCJyZWFkSW5mbyIsImRlY29kaW5nLnJlYWRVaW50OCIsInJlYWRTdHJpbmciLCJkZWNvZGluZy5yZWFkVmFyU3RyaW5nIiwicmVhZFBhcmVudEluZm8iLCJyZWFkVHlwZVJlZiIsInJlYWRMZW4iLCJkZWNvZGluZy5yZWFkQW55IiwicmVhZEJ1ZiIsImJ1ZmZlci5jb3B5VWludDhBcnJheSIsImRlY29kaW5nLnJlYWRWYXJVaW50OEFycmF5IiwicmVhZEpTT04iLCJyZWFkS2V5IiwiVXBkYXRlRGVjb2RlclYyIiwiZHNDdXJyVmFsIiwia2V5Q2xvY2tEZWNvZGVyIiwiZGVjb2RpbmcuSW50RGlmZk9wdFJsZURlY29kZXIiLCJjbGllbnREZWNvZGVyIiwiZGVjb2RpbmcuVWludE9wdFJsZURlY29kZXIiLCJsZWZ0Q2xvY2tEZWNvZGVyIiwicmlnaHRDbG9ja0RlY29kZXIiLCJpbmZvRGVjb2RlciIsImRlY29kaW5nLlJsZURlY29kZXIiLCJzdHJpbmdEZWNvZGVyIiwiZGVjb2RpbmcuU3RyaW5nRGVjb2RlciIsInBhcmVudEluZm9EZWNvZGVyIiwidHlwZVJlZkRlY29kZXIiLCJsZW5EZWNvZGVyIiwiSUQiLCJrZXlDbG9jayIsIlVwZGF0ZUVuY29kZXJWMSIsImVuY29kaW5nLmNyZWF0ZUVuY29kZXIiLCJlbmNvZGluZy50b1VpbnQ4QXJyYXkiLCJ3cml0ZUxlZnRJRCIsIndyaXRlUmlnaHRJRCIsIndyaXRlQ2xpZW50Iiwid3JpdGVJbmZvIiwiaW5mbyIsImVuY29kaW5nLndyaXRlVWludDgiLCJ3cml0ZVN0cmluZyIsImVuY29kaW5nLndyaXRlVmFyU3RyaW5nIiwid3JpdGVQYXJlbnRJbmZvIiwiaXNZS2V5Iiwid3JpdGVUeXBlUmVmIiwid3JpdGVMZW4iLCJhbnkiLCJlbmNvZGluZy53cml0ZUFueSIsIndyaXRlQnVmIiwiZW5jb2Rpbmcud3JpdGVWYXJVaW50OEFycmF5Iiwid3JpdGVKU09OIiwiZW1iZWQiLCJ3cml0ZUtleSIsImVycm9yLnVuZXhwZWN0ZWRDYXNlIiwia2V5TWFwIiwia2V5Q2xvY2tFbmNvZGVyIiwiZW5jb2RpbmcuSW50RGlmZk9wdFJsZUVuY29kZXIiLCJjbGllbnRFbmNvZGVyIiwiZW5jb2RpbmcuVWludE9wdFJsZUVuY29kZXIiLCJsZWZ0Q2xvY2tFbmNvZGVyIiwicmlnaHRDbG9ja0VuY29kZXIiLCJpbmZvRW5jb2RlciIsImVuY29kaW5nLlJsZUVuY29kZXIiLCJzdHJpbmdFbmNvZGVyIiwiZW5jb2RpbmcuU3RyaW5nRW5jb2RlciIsInBhcmVudEluZm9FbmNvZGVyIiwidHlwZVJlZkVuY29kZXIiLCJsZW5FbmNvZGVyIiwiZW5jb2Rpbmcud3JpdGVVaW50OEFycmF5Iiwid3JpdGVDbGllbnRzU3RydWN0cyIsIl9zbSIsInNtIiwiZ2V0U3RhdGVWZWN0b3IiLCJlbnRyaWVzIiwic3RhcnROZXdTdHJ1Y3RzIiwiZmlyc3RTdHJ1Y3QiLCJ3cml0ZVN0cnVjdHMiLCJyZWFkVXBkYXRlVjIiLCJ5ZG9jIiwidHJhbnNhY3Rpb25PcmlnaW4iLCJzdHJ1Y3REZWNvZGVyIiwicmV0cnkiLCJzcyIsImNsaWVudFJlZnMiLCJudW1PZlN0YXRlVXBkYXRlcyIsIm51bWJlck9mU3RydWN0cyIsInJlZnMiLCJHQyIsIlNraXAiLCJjYW50Q29weVBhcmVudEluZm8iLCJJdGVtIiwicmVhZEl0ZW1Db250ZW50IiwicmVhZENsaWVudHNTdHJ1Y3RSZWZzIiwicmVzdFN0cnVjdHMiLCJjbGllbnRzU3RydWN0UmVmcyIsInN0YWNrIiwiY2xpZW50c1N0cnVjdFJlZnNJZHMiLCJnZXROZXh0U3RydWN0VGFyZ2V0IiwibmV4dFN0cnVjdHNUYXJnZXQiLCJwb3AiLCJjdXJTdHJ1Y3RzVGFyZ2V0IiwibWlzc2luZ1NWIiwidXBkYXRlTWlzc2luZ1N2IiwibWNsb2NrIiwic3RhY2tIZWFkIiwiYWRkU3RhY2tUb1Jlc3RTUyIsInVuYXBwbGljYWJsZUl0ZW1zIiwib2Zmc2V0IiwibWlzc2luZyIsImdldE1pc3NpbmciLCJzdHJ1Y3RSZWZzIiwiaW50ZWdyYXRlIiwiaW50ZWdyYXRlU3RydWN0cyIsInBlbmRpbmciLCJwZW5kaW5nU3RydWN0cyIsIm1lcmdlVXBkYXRlc1YyIiwiZHNSZXN0IiwicGVuZGluZ0RzIiwicGVuZGluZ0RTVXBkYXRlIiwiZGVjb2RpbmcuY3JlYXRlRGVjb2RlciIsImRzUmVzdDIiLCJhcHBseVVwZGF0ZVYyIiwiWURlY29kZXIiLCJhcHBseVVwZGF0ZSIsIndyaXRlU3RhdGVBc1VwZGF0ZSIsInRhcmdldFN0YXRlVmVjdG9yIiwiY3JlYXRlRGVsZXRlU2V0RnJvbVN0cnVjdFN0b3JlIiwiZW5jb2RlU3RhdGVBc1VwZGF0ZSIsImVuY29kZWRUYXJnZXRTdGF0ZVZlY3RvciIsImRlY29kZVN0YXRlVmVjdG9yIiwidXBkYXRlcyIsImRpZmZVcGRhdGVWMiIsIm1lcmdlVXBkYXRlcyIsImNvbnZlcnRVcGRhdGVGb3JtYXRWMlRvVjEiLCJlbmNvZGVTdGF0ZUFzVXBkYXRlVjIiLCJkZWNvZGVkU3RhdGUiLCJzc0xlbmd0aCIsInJlYWRTdGF0ZVZlY3RvciIsIkV2ZW50SGFuZGxlciIsImNyZWF0ZUV2ZW50SGFuZGxlciIsImFkZEV2ZW50SGFuZGxlckxpc3RlbmVyIiwiZXZlbnRIYW5kbGVyIiwicmVtb3ZlRXZlbnRIYW5kbGVyTGlzdGVuZXIiLCJlcnJvciIsImNhbGxFdmVudEhhbmRsZXJMaXN0ZW5lcnMiLCJhcmcwIiwiYXJnMSIsImYuY2FsbEFsbCIsImNvbXBhcmVJRHMiLCJTbmFwc2hvdCIsInN2IiwiaXNWaXNpYmxlIiwic25hcHNob3QiLCJzcGxpdFNuYXBzaG90QWZmZWN0ZWRTdHJ1Y3RzIiwiZ2V0SXRlbUNsZWFuU3RhcnQiLCJsYXN0U3RydWN0IiwiYWRkU3RydWN0IiwiZmluZEluZGV4Q2xlYW5TdGFydCIsImdldEl0ZW1DbGVhbkVuZCIsImNsb2NrU3RhcnQiLCJUcmFuc2FjdGlvbiIsImRlbGV0ZVNldCIsImJlZm9yZVN0YXRlIiwiYWZ0ZXJTdGF0ZSIsImNoYW5nZWQiLCJjaGFuZ2VkUGFyZW50VHlwZXMiLCJfbWVyZ2VTdHJ1Y3RzIiwid3JpdGVVcGRhdGVNZXNzYWdlRnJvbVRyYW5zYWN0aW9uIiwibWFwLmFueSIsIndyaXRlU3RydWN0c0Zyb21UcmFuc2FjdGlvbiIsImFkZENoYW5nZWRUeXBlVG9UcmFuc2FjdGlvbiIsInBhcmVudFN1YiIsInRyeVRvTWVyZ2VXaXRoTGVmdCIsIm1lcmdlV2l0aCIsImNsZWFudXBUcmFuc2FjdGlvbnMiLCJ0cmFuc2FjdGlvbkNsZWFudXBzIiwibWVyZ2VTdHJ1Y3RzIiwic3VicyIsIml0ZW10eXBlIiwiX2NhbGxPYnNlcnZlciIsImV2ZW50cyIsImV2ZW50IiwiY3VycmVudFRhcmdldCIsImV2ZW50MSIsImV2ZW50MiIsInBhdGgiLCJfZEVIIiwiZGVsZXRlSXRlbXMiLCJkaSIsImRlbGV0ZUl0ZW0iLCJlbmREZWxldGVJdGVtQ2xvY2siLCJzaSIsImtlZXAiLCJ0cnlHY0RlbGV0ZVNldCIsInRyeU1lcmdlRGVsZXRlU2V0IiwiYmVmb3JlQ2xvY2siLCJmaXJzdENoYW5nZVBvcyIsInJlcGxhY2VkU3RydWN0UG9zIiwidmMiLCJwcmludCIsImxvZ2dpbmcucHJpbnQiLCJsb2dnaW5nLk9SQU5HRSIsImxvZ2dpbmcuQk9MRCIsImxvZ2dpbmcuVU5CT0xEIiwibG9nZ2luZy5SRUQiLCJsb2FkZWQiLCJhZGRlZCIsInJlbW92ZWQiLCJpbml0aWFsQ2FsbCIsIkxhenlTdHJ1Y3RSZWFkZXIiLCJmaWx0ZXJTa2lwcyIsImdlbiIsImxhenlTdHJ1Y3RSZWFkZXJHZW5lcmF0b3IiLCJjdXJyIiwiTGF6eVN0cnVjdFdyaXRlciIsImN1cnJDbGllbnQiLCJzdGFydENsb2NrIiwid3JpdHRlbiIsImNsaWVudFN0cnVjdHMiLCJzbGljZVN0cnVjdCIsImxlZnRJdGVtIiwicmlnaHRPcmlnaW4iLCJZRW5jb2RlciIsInVwZGF0ZURlY29kZXJzIiwibGF6eVN0cnVjdERlY29kZXJzIiwiY3VycldyaXRlIiwidXBkYXRlRW5jb2RlciIsImxhenlTdHJ1Y3RFbmNvZGVyIiwiZGVjIiwiZGVjMSIsImRlYzIiLCJjbG9ja0RpZmYiLCJjdXJyRGVjb2RlciIsImZpcnN0Q2xpZW50IiwiaXRlcmF0ZWQiLCJ3cml0ZVN0cnVjdFRvTGF6eVN0cnVjdFdyaXRlciIsImZpbmlzaExhenlTdHJ1Y3RXcml0aW5nIiwiZHNzIiwibWVyZ2VkIiwiZHNzSSIsImRlbHNMZWZ0IiwiYXJyYXkuYXBwZW5kVG8iLCJtZXJnZURlbGV0ZVNldHMiLCJsYXp5U3RydWN0V3JpdGVyIiwic3ZDbG9jayIsImZsdXNoTGF6eVN0cnVjdFdyaXRlciIsImxhenlXcml0ZXIiLCJwYXJ0U3RydWN0cyIsInVwZGF0ZURlY29kZXIiLCJsYXp5RGVjb2RlciIsImNvbnZlcnRVcGRhdGVGb3JtYXQiLCJZRXZlbnQiLCJfY2hhbmdlcyIsIl9rZXlzIiwiX2RlbHRhIiwiZ2V0UGF0aFRvIiwiYWN0aW9uIiwib2xkVmFsdWUiLCJhZGRzIiwicHJldiIsImFycmF5Lmxhc3QiLCJnZXRDb250ZW50IiwiZGVsdGEiLCJjaGFuZ2VzIiwibGFzdE9wIiwicGFja09wIiwiaW5zZXJ0IiwiY29uY2F0IiwicmV0YWluIiwiY2hpbGQiLCJnbG9iYWxTZWFyY2hNYXJrZXJUaW1lc3RhbXAiLCJBcnJheVNlYXJjaE1hcmtlciIsIm1hcmtlciIsInRpbWVzdGFtcCIsIm92ZXJ3cml0ZU1hcmtlciIsImZpbmRNYXJrZXIiLCJ5YXJyYXkiLCJfc2VhcmNoTWFya2VyIiwicGluZGV4IiwicmVmcmVzaE1hcmtlclRpbWVzdGFtcCIsImNvdW50YWJsZSIsInNlYXJjaE1hcmtlciIsInBtIiwibWFya1Bvc2l0aW9uIiwidXBkYXRlTWFya2VyQ2hhbmdlcyIsImNhbGxUeXBlT2JzZXJ2ZXJzIiwiY2hhbmdlZFR5cGUiLCJfZUgiLCJfY29weSIsImVycm9yLm1ldGhvZFVuaW1wbGVtZW50ZWQiLCJjbG9uZSIsIl93cml0ZSIsIl9maXJzdCIsInBhcmVudFN1YnMiLCJvYnNlcnZlIiwib2JzZXJ2ZURlZXAiLCJ1bm9ic2VydmUiLCJ1bm9ic2VydmVEZWVwIiwidHlwZUxpc3RTbGljZSIsImNzIiwidHlwZUxpc3RUb0FycmF5IiwidHlwZUxpc3RGb3JFYWNoIiwidHlwZUxpc3RNYXAiLCJyZXN1bHQiLCJ0eXBlTGlzdENyZWF0ZUl0ZXJhdG9yIiwiY3VycmVudENvbnRlbnQiLCJjdXJyZW50Q29udGVudEluZGV4IiwidHlwZUxpc3RHZXQiLCJ0eXBlTGlzdEluc2VydEdlbmVyaWNzQWZ0ZXIiLCJyZWZlcmVuY2VJdGVtIiwib3duQ2xpZW50SWQiLCJqc29uQ29udGVudCIsInBhY2tKc29uQ29udGVudCIsImxhc3RJZCIsIkNvbnRlbnRBbnkiLCJDb250ZW50QmluYXJ5IiwiQ29udGVudERvYyIsIkNvbnRlbnRUeXBlIiwibGVuZ3RoRXhjZWVkZWQiLCJlcnJvci5jcmVhdGUiLCJ0eXBlTGlzdEluc2VydEdlbmVyaWNzIiwic3RhcnRJbmRleCIsInR5cGVMaXN0RGVsZXRlIiwic3RhcnRMZW5ndGgiLCJ0eXBlTWFwRGVsZXRlIiwidHlwZU1hcFNldCIsInR5cGVNYXBHZXQiLCJ0eXBlTWFwR2V0QWxsIiwidHlwZU1hcEhhcyIsImNyZWF0ZU1hcEl0ZXJhdG9yIiwiaXRlcmF0b3IuaXRlcmF0b3JGaWx0ZXIiLCJlbnRyeSIsIllBcnJheUV2ZW50IiwiX3ByZWxpbUNvbnRlbnQiLCJ0b0FycmF5IiwibWF4TWFya2VyIiwiY3Vyck1hcmtlciIsInR5cGVMaXN0UHVzaEdlbmVyaWNzIiwiWUFycmF5UmVmSUQiLCJZTWFwRXZlbnQiLCJ5bWFwIiwia2V5c0NoYW5nZWQiLCJpdGVyYXRvci5pdGVyYXRvck1hcCIsImNsZWFyIiwiWU1hcFJlZklEIiwiZXF1YWxBdHRycyIsIm9iamVjdC5lcXVhbEZsYXQiLCJJdGVtVGV4dExpc3RQb3NpdGlvbiIsImN1cnJlbnRBdHRyaWJ1dGVzIiwiZm9yd2FyZCIsIkNvbnRlbnRGb3JtYXQiLCJ1cGRhdGVDdXJyZW50QXR0cmlidXRlcyIsImZpbmROZXh0UG9zaXRpb24iLCJmaW5kUG9zaXRpb24iLCJpbnNlcnROZWdhdGVkQXR0cmlidXRlcyIsImN1cnJQb3MiLCJuZWdhdGVkQXR0cmlidXRlcyIsIm5leHRGb3JtYXQiLCJmb3JtYXQiLCJtaW5pbWl6ZUF0dHJpYnV0ZUNoYW5nZXMiLCJhdHRyaWJ1dGVzIiwiaW5zZXJ0QXR0cmlidXRlcyIsImN1cnJlbnRWYWwiLCJpbnNlcnRUZXh0IiwidGV4dCIsIkNvbnRlbnRTdHJpbmciLCJDb250ZW50RW1iZWQiLCJnZXRMZW5ndGgiLCJmb3JtYXRUZXh0IiwiaXRlcmF0aW9uTG9vcCIsImF0dHIiLCJuZXdsaW5lcyIsImNsZWFudXBGb3JtYXR0aW5nR2FwIiwic3RhcnRBdHRyaWJ1dGVzIiwiY3VyckF0dHJpYnV0ZXMiLCJlbmRBdHRyaWJ1dGVzIiwibWFwLmNvcHkiLCJjbGVhbnVwcyIsInJlYWNoZWRFbmRPZkN1cnIiLCJkZWxldGVUZXh0Iiwic3RhcnRBdHRycyIsIllUZXh0RXZlbnQiLCJ5dGV4dCIsImNoaWxkTGlzdENoYW5nZWQiLCJzdWIiLCJvbGRBdHRyaWJ1dGVzIiwiZGVsZXRlTGVuIiwiYWRkT3AiLCJvcCIsImN1clZhbCIsIl9wZW5kaW5nIiwiYXBwbHlEZWx0YSIsInRvRGVsdGEiLCJmb3VuZEZvcm1hdHRpbmdJdGVtIiwiYWZ0ZXJDbG9jayIsImNsZWFudXBZVGV4dEZvcm1hdHRpbmciLCJhdHRycyIsImNsZWFudXBDb250ZXh0bGVzc0Zvcm1hdHRpbmdHYXAiLCJzYW5pdGl6ZSIsImlucyIsInByZXZTbmFwc2hvdCIsImNvbXB1dGVZQ2hhbmdlIiwib3BzIiwicGFja1N0ciIsImFkZEF0dHJpYnV0ZXMiLCJjdXIiLCJ1c2VyIiwiaW5zZXJ0RW1iZWQiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlVmFsdWUiLCJnZXRBdHRyaWJ1dGVzIiwiWVRleHRSZWZJRCIsIllYbWxUcmVlV2Fsa2VyIiwicm9vdCIsIl9maWx0ZXIiLCJfcm9vdCIsIl9jdXJyZW50Tm9kZSIsIl9maXJzdENhbGwiLCJZWG1sRWxlbWVudCIsIm5vZGVOYW1lIiwicXVlcnlTZWxlY3RvckFsbCIsIllYbWxFdmVudCIsInhtbCIsInRvRE9NIiwiX2RvY3VtZW50IiwiaG9va3MiLCJiaW5kaW5nIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiX2NyZWF0ZUFzc29jaWF0aW9uIiwieG1sVHlwZSIsImluc2VydEFmdGVyIiwicmVmIiwicmVmSXRlbSIsInBjIiwiZmluZEluZGV4IiwiWVhtbEZyYWdtZW50UmVmSUQiLCJfcHJlbGltQXR0cnMiLCJwcmV2U2libGluZyIsInN0cmluZ0J1aWxkZXIiLCJrZXlzTGVuIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJoYXNBdHRyaWJ1dGUiLCJkb20iLCJ5eG1sIiwiWVhtbEVsZW1lbnRSZWZJRCIsImF0dHJpYnV0ZXNDaGFuZ2VkIiwiWVhtbEhvb2siLCJob29rTmFtZSIsImhvb2siLCJjcmVhdGVEb20iLCJZWG1sSG9va1JlZklEIiwiWVhtbFRleHQiLCJuZXN0ZWROb2RlcyIsIm5vZGUiLCJZWG1sVGV4dFJlZklEIiwiQWJzdHJhY3RTdHJ1Y3QiLCJlbmNvZGluZ1JlZiIsImlzQ291bnRhYmxlIiwiZ2V0UmVmIiwiQ29udGVudERlbGV0ZWQiLCJtYXJrRGVsZXRlZCIsImNyZWF0ZURvY0Zyb21PcHRzIiwiQ29udGVudEpTT04iLCJmaXJzdENoYXJDb2RlIiwiY2hhckNvZGVBdCIsInR5cGVSZWZzIiwicmlnaHRJdGVtIiwicmVkb25lIiwiaXNNYXJrZWQiLCJkb0tlZXAiLCJkb0RlbGV0ZSIsInBhcmVudEl0ZW0iLCJjb25mbGljdGluZ0l0ZW1zIiwiaXRlbXNCZWZvcmVPcmlnaW4iLCJwYXJlbnRHQ2QiLCJuZXdTdHJ1Y3QiLCJyZXBsYWNlU3RydWN0IiwieWtleSIsImZpbmRSb290VHlwZUtleSIsImNvbnRlbnRSZWZzIiwiZ2xvIiwiZ2xvYmFsIiwiY29uc3VtZSIsInNpZ25hbCIsInBpcGVUbyIsIldyaXRhYmxlU3RyZWFtIiwiR2FtZSIsIkV2ZW50VGFyZ2V0IiwiX0dhbWVfZXZlbnRfd3JpdGVyIiwiVHJhbnNmb3JtU3RyZWFtIiwid3JpdGFibGUiLCJnZXRXcml0ZXIiLCJyZWFkYWJsZSIsImluaXRpYWxpemVfYm9hcmQiLCJ0b2tlbiIsInJhbmRvbVVVSUQiLCJfR2FtZV9pbnN0YW5jZXMiLCJfR2FtZV9yZWdpc3Rlcl9yZXNvdXJjZSIsInNldF9kaW0iLCJ0eXBlZF9tYXAiLCJpbmRpY2VzIiwiaWR4Iiwic2V0VGltZW91dCIsIlVSTCIsImhhc2giLCJzdWJ0bGUiLCJkaWdlc3QiLCJhcnJheUJ1ZmZlciIsImJ0b2EiLCJmcm9tQ2hhckNvZGUiLCJwYXRobmFtZSIsImNhY2hlIiwiY2FjaGVzIiwib3BlbiIsInB1dCIsIlJlc3BvbnNlIiwic2V0dXBXUyIsIndzY2xpZW50Iiwic2hvdWxkQ29ubmVjdCIsIndzIiwid2Vic29ja2V0IiwiV2ViU29ja2V0IiwiYmluYXJ5VHlwZSIsInBpbmdUaW1lb3V0IiwiY29ubmVjdGluZyIsImNvbm5lY3RlZCIsIm9ubWVzc2FnZSIsImxhc3RNZXNzYWdlUmVjZWl2ZWQiLCJ0aW1lLmdldFVuaXhUaW1lIiwibWVzc2FnZSIsImNsZWFyVGltZW91dCIsInNlbmRQaW5nIiwibWVzc2FnZVJlY29ubmVjdFRpbWVvdXQiLCJvbmNsb3NlIiwidW5zdWNjZXNzZnVsUmVjb25uZWN0cyIsIm1hdGgubG9nMTAiLCJzZW5kIiwib25lcnJvciIsIm9ub3BlbiIsIldlYnNvY2tldENsaWVudCIsIl9jaGVja0ludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbG9zZSIsImNsZWFySW50ZXJ2YWwiLCJkaXNjb25uZWN0IiwiY29ubmVjdCIsIlN0YXR1c0VtaXR0ZXIiLCJfU3RhdHVzRW1pdHRlcl92YWx1ZSIsImN1cnJlbnQiLCJzaG91bGRfZW1pdCIsImNvbXBsZXRlIiwiUEVFUl9DT05GSUciLCJpY2VTZXJ2ZXJzIiwidXJscyIsIlNpZ25hbGVyIiwicGVlcl9pZCIsImFsbG93X2Nvbm5lY3Rpb25zIiwic2lnbmFsX3VybCIsInBlZXJzIiwic3RhdHVzIiwiX1NpZ25hbGVyX29ubWVzc2FnZSIsInNpZyIsImRlc3RpbmF0aW9uIiwicGVlciIsImRlc2NyaXB0aW9uIiwiX1NpZ25hbGVyX2luc3RhbmNlcyIsIl9TaWduYWxlcl9pbml0X2Nvbm5lY3Rpb24iLCJyZWFkeUZvck9mZmVyIiwibWFraW5nX29mZmVyIiwic2lnbmFsaW5nU3RhdGUiLCJpc1NldHRpbmdSZW1vdGVBbnN3ZXJQZW5kaW5nIiwib2ZmZXJDb2xsaXNpb24iLCJpZ25vcmVfb2ZmZXIiLCJwb2xpdGUiLCJzZXRSZW1vdGVEZXNjcmlwdGlvbiIsInNldExvY2FsRGVzY3JpcHRpb24iLCJfU2lnbmFsZXJfc2VuZCIsInRvIiwibG9jYWxEZXNjcmlwdGlvbiIsImNhbmRpZGF0ZSIsImFkZEljZUNhbmRpZGF0ZSIsImVyciIsInNvY2tldCIsImluaXRpYXRlIiwicmVtb3RlX2lkIiwic2h1dGRvd24iLCJXZWFrU2V0Iiwib3V0Z29pbmciLCJSVENQZWVyQ29ubmVjdGlvbiIsIm9uaWNlY2FuZGlkYXRlIiwib25uZWdvdGlhdGlvbm5lZWRlZCIsImljZUNvbm5lY3Rpb25TdGF0ZSIsIm1zZyIsInN0cmVhbXMiLCJkYyIsInJlYWRfc3RyZWFtIiwid3JpdGVfc3RyZWFtIiwiUmVhZGFibGVTdHJlYW0iLCJjb250cm9sbGVyIiwiZW5xdWV1ZSIsImJ1ZmZlcmVkQW1vdW50IiwiY2FuY2VsIiwicmVzdW1lIiwibGFiZWwiLCJvbmJ1ZmZlcmVkYW1vdW50bG93IiwiY2h1bmsiLCJyZWFkeVN0YXRlIiwiYnVmZmVyZWRBbW91bnRMb3dUaHJlc2hvbGQiLCJhYm9ydCIsIkNvdW50UXVldWluZ1N0cmF0ZWd5IiwiaGlnaFdhdGVyTWFyayIsInJlcXVlc3QiLCJjaGFubmVsIiwiZ2V0UmVhZGVyIiwiaGVhZGVyIiwicmVsZWFzZUxvY2siLCJibG9iIiwiQmxvYiIsImNvbGxlY3RfYmxvYiIsInJlc3BvbnNlIiwicmVzb3VyY2UiLCJtc2dfc2l6ZSIsImJ1ZmZlcl9jaHVua3MiLCJwcmV2ZW50Q2xvc2UiLCJHYW1lUGVlciIsIl9HYW1lUGVlcl9ldmVudF93cml0ZXIiLCJvbmRhdGFjaGFubmVsIiwiY3JlYXRlRGF0YUNoYW5uZWwiLCJuZWdvdGlhdGVkIiwicGlwZVRocm91Z2giLCJ0cmFuc2Zvcm0iLCJvbGRfY2xvc2UiLCJiaW5kIiwid3JpdGVfZXZlbnQiLCJkYXRhY2hhbm5lbCIsInByb3RvY29sIiwidGhlbiIsImluaXQiLCJDbGllbnQiLCJnYW1lX2lkIiwiZ2FtZSIsIl9DbGllbnRfZ2FtZSIsIl9DbGllbnRfcGVlciIsIl9DbGllbnRfZ2FtZV9pZCIsIl9DbGllbnRfc2lnbmFsZXIiLCJmb3J3YXJkX3VwZGF0ZXMiLCJzZXJ2aWNlV29ya2VyIiwicG9zdE1lc3NhZ2UiLCJTZXJ2ZXIiLCJfU2VydmVyX2dhbWUiLCJfU2VydmVyX2Fib3J0IiwiX1NlcnZlcl9hZGRfY2xpZW50IiwiZ3AiLCJfU2VydmVyX2luc3RhbmNlcyIsIl9TZXJ2ZXJfZ2V0X3Jlc291cmNlIiwic2N0cCIsIm1heE1lc3NhZ2VTaXplIiwidHJ5X2Nsb3NlIiwic2lnbmFsZXIiLCJBYm9ydENvbnRyb2xsZXIiLCJyZXNwIiwiV2l0aFRvb2x0aXAiLCJtb3VzZXgiLCJtb3VzZXkiLCJfV2l0aFRvb2x0aXBfbW91c2Vtb3ZlIiwicGFnZVgiLCJwYWdlWSIsInRvcCIsIkhvc3RUb2dnbGUiLCJ0b2dnbGUiLCJjaGVja2VkIiwiaHVtYW4iLCJDbGllbnRTdGF0dXMiLCJ0aW1lb3V0IiwicHJvbSIsInRpbWUiLCJyYWNlIiwiX3IiLCJyZWoiLCJBcHAiLCJob3N0X3BlbmRpbmciLCJjbGllbnRfcGVuZGluZyIsIl9BcHBfdXBkYXRlRGltIiwicGFyc2VJbnQiLCJfQXBwX25ld19sb2NhbCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJocmVmIiwiX0FwcF91cGRhdGUiLCJfQXBwX2hvc3QiLCJzZXJ2ZXIiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJfQXBwX3VuaG9zdCIsInJlcGxhY2VTdGF0ZSIsImRpc2Nvbm5lY3RlZCIsIm92ZXJsYXkiLCJpZkRlZmluZWQiLCJhZGRfdG9rZW4iLCJzZXRfYmciLCJjaGFuZ2VkUHJvcGVydGllcyIsInRpdGxlIiwiY2FudmFzIiwiVVJMU2VhcmNoUGFyYW1zIiwiUFBaIiwic2Nyb2xsX3BvcyIsImRlc2lyZWRfc3RhdGUiLCJ2bG9jIiwidmRpbSIsImNkaW0iLCJzbW9vdGgiLCJfUFBaX3Jlc2l6ZV9vYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwiY29udGVudFJlY3QiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYmFzZVZhbCIsIl9QUFpfaW5zdGFuY2VzIiwiX1BQWl96b29tX3RvX2ZpdCIsImxvb3AiLCJwcnYiLCJ0cyIsIm5leHRfZnJhbWUiLCJlbGFwc2VkIiwiZGVsdGFfc2NhbGUiLCJzY3JvbGxUbyIsInpvb20iLCJpbmMiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwid2hlZWwiLCJtdWx0aXBsaWVyIiwiZGVsdGFNb2RlIiwiV2hlZWxFdmVudCIsIkRPTV9ERUxUQV9MSU5FIiwiZGVsdGFZIiwiX1BQWl9rZXlib2FyZF96b29tIiwiX1BQWl9nZXN0dXJlIiwicHJldl9zY2FsZSIsImNoYW5nZSIsInNjYWxlIiwidGVtcGxhdGUiLCJjbG9uZU5vZGUiLCJjb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsIm9uc2xvdGNoYW5nZSIsImNsaWVudF9jb29yZCIsImRpdl9wIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVnaXN0ZXIiLCJib2R5Il0sIm1hcHBpbmdzIjoiZ0RBQ0EsTUFBTUEsRUFBWSxLQUNKQyxTQUFTQyxnQkFDakJDLE1BQU1DLFlBQVksZUFBZ0IsR0FBR0MsT0FBT0Msa0JDbUQzQyxTQUFTQyxFQUFXQyxFQUFZQyxFQUFRQyxFQUFLQyxHQUNoRCxJQUEySEMsRUFBdkhDLEVBQUlDLFVBQVVDLE9BQVFDLEVBQUlILEVBQUksRUFBSUosRUFBa0IsT0FBVEUsRUFBZ0JBLEVBQU9NLE9BQU9DLHlCQUF5QlQsRUFBUUMsR0FBT0MsRUFDckgsR0FBdUIsaUJBQVpRLFNBQW9ELG1CQUFyQkEsUUFBUUMsU0FBeUJKLEVBQUlHLFFBQVFDLFNBQVNaLEVBQVlDLEVBQVFDLEVBQUtDLFFBQ3BILElBQUssSUFBSVUsRUFBSWIsRUFBV08sT0FBUyxFQUFHTSxHQUFLLEVBQUdBLEtBQVNULEVBQUlKLEVBQVdhLE1BQUlMLEdBQUtILEVBQUksRUFBSUQsRUFBRUksR0FBS0gsRUFBSSxFQUFJRCxFQUFFSCxFQUFRQyxFQUFLTSxHQUFLSixFQUFFSCxFQUFRQyxLQUFTTSxHQUNoSixPQUFPSCxFQUFJLEdBQUtHLEdBQUtDLE9BQU9LLGVBQWViLEVBQVFDLEVBQUtNLEdBQUlBLEVBNkt6RCxTQUFTTyxFQUF1QkMsRUFBVUMsRUFBT0MsRUFBTUMsR0FDMUQsR0FBYSxNQUFURCxJQUFpQkMsRUFBRyxNQUFNLElBQUlDLFVBQVUsaURBQzVDLEdBQXFCLG1CQUFWSCxFQUF1QkQsSUFBYUMsSUFBVUUsR0FBS0YsRUFBTUksSUFBSUwsR0FBVyxNQUFNLElBQUlJLFVBQVUsNEVBQ3ZHLE1BQWdCLE1BQVRGLEVBQWVDLEVBQWEsTUFBVEQsRUFBZUMsRUFBRUcsS0FBS04sR0FBWUcsRUFBSUEsRUFBRUksTUFBUU4sRUFBTU8sSUFBSVIsR0FHakYsU0FBU1MsRUFBdUJULEVBQVVDLEVBQU9NLEVBQU9MLEVBQU1DLEdBQ2pFLEdBQWEs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
