{"version":3,"file":"service-worker.js","sources":["../src/net/resources/service-worker.ts"],"sourcesContent":["/// <reference no-default-lib=\"true\"/>\n/// <reference lib=\"es2020\" />\n/// <reference lib=\"WebWorker\" />\n\nimport { ResourceMessage } from \"./service-worker-protocol\";\n\ntype ResourceId = string;\n\nconst sw = self as ServiceWorkerGlobalScope & typeof globalThis;\n\nlet pending = new Map<\n  ResourceId,\n  {\n    resolve: () => void;\n    reject: (err: any) => void;\n    promise: Promise<void>;\n  }\n>();\n\nlet cache: Cache;\n\nsw.addEventListener(\"install\", (ev) => {\n  console.log(\"installing\");\n});\n\nsw.addEventListener(\"message\", (ev: ExtendableMessageEvent) => {\n  ev.waitUntil(\n    (async () => {\n      let data = ev.data as ResourceMessage;\n      switch (data.type) {\n        case \"found\":\n          pending.get(data.id)?.resolve();\n          break;\n        case \"notfound\":\n          pending.get(data.id)?.reject(data.error);\n      }\n    })()\n  );\n});\n\nsw.addEventListener(\"activate\", (ev) => {\n  console.log(\"activate\");\n  ev.waitUntil(\n    (async () => {\n      cache = await caches.open(\"resources\");\n      await sw.clients.claim();\n      console.log(\"claimed clients\");\n    })()\n  );\n});\n\nfunction which_resource(url: string): ResourceId | null {\n  let segs = new URL(url).pathname.split(\"/\");\n  console.log(segs);\n  if (segs.length < 3 || segs[1] != \"resources\") {\n    return null;\n  }\n\n  return segs.slice(2).join(\"/\") as ResourceId;\n}\n\nasync function fetch_resource(ev: FetchEvent): Promise<Response> {\n  const request = ev.request;\n  const resource = which_resource(request.url);\n  console.log(\"TRYING TO FETCH\", request.url, resource);\n  if (!resource) {\n    return new Response(null, {\n      status: 404,\n      statusText: \"Not found\",\n    });\n  }\n\n  let promise = pending.get(resource)?.promise;\n\n  // request is not pending\n  if (!promise) {\n    console.log(\"Request is not pending\");\n    let resolve: () => void;\n    let reject: (err: any) => void;\n    promise = new Promise<void>((a, b) => {\n      resolve = a;\n      reject = b;\n    });\n\n    pending.set(resource, {\n      resolve: () => {\n        console.log(\"RESOLVE\");\n        pending.delete(resource);\n        resolve();\n      },\n      reject: (err: any) => {\n        console.log(\"REJECT\");\n        pending.delete(resource);\n        reject(err);\n      },\n      promise,\n    });\n\n    let cached = await caches.match(ev.request);\n    if (cached) {\n      console.log(\"request is cached\");\n      resolve!();\n      return cached;\n    } else {\n      console.log(\"request is not cached\");\n      const c = await sw.clients.get(ev.clientId);\n      if (!c) {\n        reject!(\"client does not exist\");\n      } else {\n        console.log(\"forwarding request to client\");\n        c.postMessage({ id: resource });\n      }\n    }\n  }\n\n  let res = await promise.then(() => caches.match(ev.request)).catch((err) => new Response(err, { status: 500, statusText: \"Internal Error\" }));\n\n  return (\n    res ||\n    new Response(null, {\n      status: 404,\n      statusText: \"Not found\",\n    })\n  );\n}\n\nsw.addEventListener(\"fetch\", (ev) => {\n  let url = new URL(ev.request.url);\n  if (!url.pathname.startsWith(\"/resources/\")) {\n    return false;\n  }\n  ev.respondWith(\n    (async () => {\n      console.log(ev.request.headers);\n      console.log(\"RESPONDING\");\n      return fetch_resource(ev);\n    })()\n  );\n});\n"],"names":["sw","self","pending","Map","async","fetch_resource","ev","request","resource","url","segs","URL","pathname","split","console","log","length","slice","join","which_resource","Response","status","statusText","promise","get","resolve","reject","Promise","a","b","set","delete","err","cached","caches","match","c","clients","clientId","postMessage","id","then","catch","addEventListener","waitUntil","data","type","error","open","claim","startsWith","respondWith","headers"],"mappings":"AAQA,MAAMA,EAAKC,KAEX,IAAIC,EAAU,IAAIC,IAmDlBC,eAAeC,EAAeC,GAC5B,MAAMC,EAAUD,EAAGC,QACbC,EAZR,SAAwBC,GACtB,IAAIC,EAAO,IAAIC,IAAIF,GAAKG,SAASC,MAAM,KAEvC,OADAC,QAAQC,IAAIL,GACRA,EAAKM,OAAS,GAAgB,aAAXN,EAAK,GACnB,KAGFA,EAAKO,MAAM,GAAGC,KAAK,KAKTC,CAAeZ,EAAQE,KAExC,GADAK,QAAQC,IAAI,kBAAmBR,EAAQE,IAAKD,IACvCA,EACH,OAAO,IAAIY,SAAS,KAAM,CACxBC,OAAQ,IACRC,WAAY,cAIhB,IAAIC,EAAUrB,EAAQsB,IAAIhB,IAAWe,QAGrC,IAAKA,EAAS,CAEZ,IAAIE,EACAC,EAFJZ,QAAQC,IAAI,0BAGZQ,EAAU,IAAII,SAAc,CAACC,EAAGC,KAC9BJ,EAAUG,EACVF,EAASG,KAGX3B,EAAQ4B,IAAItB,EAAU,CACpBiB,QAAS,KACPX,QAAQC,IAAI,WACZb,EAAQ6B,OAAOvB,GACfiB,KAEFC,OAASM,IACPlB,QAAQC,IAAI,UACZb,EAAQ6B,OAAOvB,GACfkB,EAAOM,IAETT,YAGF,IAAIU,QAAeC,OAAOC,MAAM7B,EAAGC,SACnC,GAAI0B,EAGF,OAFAnB,QAAQC,IAAI,qBACZU,IACOQ,EACF,CACLnB,QAAQC,IAAI,yBACZ,MAAMqB,QAAUpC,EAAGqC,QAAQb,IAAIlB,EAAGgC,UAC7BF,GAGHtB,QAAQC,IAAI,gCACZqB,EAAEG,YAAY,CAAEC,GAAIhC,KAHpBkB,EAAQ,0BAUd,aAFgBH,EAAQkB,MAAK,IAAMP,OAAOC,MAAM7B,EAAGC,WAAUmC,OAAOV,GAAQ,IAAIZ,SAASY,EAAK,CAAEX,OAAQ,IAAKC,WAAY,sBAIvH,IAAIF,SAAS,KAAM,CACjBC,OAAQ,IACRC,WAAY,cApGlBtB,EAAG2C,iBAAiB,WAAYrC,IAC9BQ,QAAQC,IAAI,iBAGdf,EAAG2C,iBAAiB,WAAYrC,IAC9BA,EAAGsC,UACD,WACE,IAAIC,EAAOvC,EAAGuC,KACd,OAAQA,EAAKC,MACX,IAAK,QACH5C,EAAQsB,IAAIqB,EAAKL,KAAKf,UACtB,MACF,IAAK,WACHvB,EAAQsB,IAAIqB,EAAKL,KAAKd,OAAOmB,EAAKE,SAPxC,OAaJ/C,EAAG2C,iBAAiB,YAAarC,IAC/BQ,QAAQC,IAAI,YACZT,EAAGsC,UACD,iBACgBV,OAAOc,KAAK,mBACpBhD,EAAGqC,QAAQY,QACjBnC,QAAQC,IAAI,oBAHd,OAmFJf,EAAG2C,iBAAiB,SAAUrC,IAE5B,IADU,IAAIK,IAAIL,EAAGC,QAAQE,KACpBG,SAASsC,WAAW,eAC3B,OAAO,EAET5C,EAAG6C,YACD,WACErC,QAAQC,IAAIT,EAAGC,QAAQ6C,SACvBtC,QAAQC,IAAI,cACLV,EAAeC,IAHxB"}