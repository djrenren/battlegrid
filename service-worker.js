const e=self;let s=new Map;async function t(t){const n=t.request,o=function(e){let s=new URL(e).pathname.split("/");return 3!==s.length&&"resources"!=s[1]?null:s[2]}(n.url);if(console.log("TRYING TO FETCH",n.url,o),!o)return new Response(null,{status:404,statusText:"Not found"});let c=s.get(o)?.promise;if(!c){let n,a;console.log("Request is not pending"),c=new Promise(((e,s)=>{n=e,a=s})),s.set(o,{resolve:()=>{console.log("RESOLVE"),s.delete(o),n()},reject:e=>{console.log("REJECT"),s.delete(o),a(e)},promise:c});let l=await caches.match(t.request);if(l)return console.log("request is cached"),n(),l;{console.log("request is not cached");const s=await e.clients.get(t.clientId);s?(console.log("forwarding request to client"),s.postMessage({id:o})):a("client does not exist")}}return await c.then((()=>caches.match(t.request))).catch((e=>new Response(e,{status:500,statusText:"Internal Error"})))||new Response(null,{status:404,statusText:"Not found"})}e.addEventListener("install",(e=>{console.log("installing")})),e.addEventListener("message",(e=>{e.waitUntil((async()=>{let t=caches.open("resources"),n=e.data;switch(n.type){case"found":let e=new Response(n.blob);await(await t).put(`/resources/${n.id}`,e),s.get(n.id)?.resolve();break;case"notfound":s.get(n.id)?.reject(n.error)}})())})),e.addEventListener("activate",(s=>{console.log("activate"),s.waitUntil((async()=>{await caches.open("resources"),await e.clients.claim(),console.log("claimed clients")})())})),e.addEventListener("fetch",(e=>{if(!new URL(e.request.url).pathname.startsWith("/resources/"))return!1;e.respondWith((async()=>(console.log(e.request.headers),console.log("RESPONDING"),t(e)))())}));
//# sourceMappingURL=service-worker.js.map
